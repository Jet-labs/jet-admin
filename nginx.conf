# Define the user Nginx runs as. 'nginx' user should exist in the base image (alpine does).
user nginx;
# Auto-detect optimal number of worker processes
worker_processes auto;

# Global error log location and level
error_log /var/log/nginx/error.log warn;
# Path for the Nginx PID file
pid /var/run/nginx.pid;

events {
    # Max connections per worker process
    worker_connections 1024;
}

http {
    # Include standard MIME types
    include /etc/nginx/mime.types;
    # Default MIME type if none match
    default_type application/octet-stream;

    # Enable efficient file sending
    sendfile on;
    # Optimize TCP packet sending (Nagle's algorithm)
    # tcp_nopush on;

    # Keepalive connection timeout
    keepalive_timeout 65;

    # Enable Gzip compression (optional, uncomment to enable)
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;


    # =====================================================
    # Server Block for HTTPS (Port 443)
    # =====================================================
    server {
        # Listen on port 443 for IPv4 and IPv6 with SSL enabled
        listen 443 ssl;
        listen [::]:443 ssl; # For IPv6

        # Server name(s) - adjust if needed, 'localhost' matches default entrypoint CN
        server_name localhost;

        # --- SSL Configuration ---
        # Point to the certificate and key generated by docker-entrypoint.sh
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;

        # --- Recommended SSL Protocols ---
        # Use modern, secure TLS versions
        ssl_protocols TLSv1.2 TLSv1.3;

        # --- Recommended Ciphers (Example - consult security best practices) ---
        # Prioritize server's cipher suite order
        ssl_prefer_server_ciphers on;
        # Example cipher suite (adjust based on compatibility/security needs)
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';

        # --- Frontend Static Files ---
        location / {
            # Root directory for the built frontend application
            root /apps/frontend/dist;
            # Default file to serve
            index index.html;
            # Handle client-side routing (for SPAs like React, Vue, Angular)
            try_files $uri $uri/ /index.html;
        }

        # --- Backend API Proxy ---
        location /api {
            # Forward requests to the backend service running internally on port 8090
            proxy_pass http://localhost:8090;

            # --- Standard Proxy Headers ---
            # Required for WebSocket support (if needed)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';

            # Pass essential headers to the backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Pass the protocol (http/https) to the backend
            proxy_set_header X-Forwarded-Proto $scheme;

            # Bypass proxy cache for upgrades (WebSocket)
            proxy_cache_bypass $http_upgrade;
        }

        # --- Optional: Custom Error Pages ---
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }

    # =====================================================
    # Optional: Server Block for HTTP (Port 80) Redirect
    # Redirects all HTTP traffic to HTTPS
    # =====================================================
    server {
        listen 80;
        listen [::]:80; # For IPv6

        # Match the same server name as the HTTPS block
        server_name localhost;

        # Perform a permanent (301) redirect to the HTTPS version of the requested URL
        location / {
            return 301 https://$host$request_uri;
        }
    }
}