var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from3, except, desc) => {
  if (from3 && typeof from3 === "object" || typeof from3 === "function") {
    for (let key of __getOwnPropNames(from3))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type7) {
          return typeof type7 === "string" || typeof type7 === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type7 === REACT_FRAGMENT_TYPE || type7 === REACT_CONCURRENT_MODE_TYPE || type7 === REACT_PROFILER_TYPE || type7 === REACT_STRICT_MODE_TYPE || type7 === REACT_SUSPENSE_TYPE || type7 === REACT_SUSPENSE_LIST_TYPE || typeof type7 === "object" && type7 !== null && (type7.$$typeof === REACT_LAZY_TYPE || type7.$$typeof === REACT_MEMO_TYPE || type7.$$typeof === REACT_PROVIDER_TYPE || type7.$$typeof === REACT_CONTEXT_TYPE || type7.$$typeof === REACT_FORWARD_REF_TYPE || type7.$$typeof === REACT_FUNDAMENTAL_TYPE || type7.$$typeof === REACT_RESPONDER_TYPE || type7.$$typeof === REACT_SCOPE_TYPE || type7.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type7 = object.type;
                switch (type7) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type7;
                  default:
                    var $$typeofType = type7 && type7.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element6 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element6;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../node_modules/prop-types/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../node_modules/prop-types/node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// ../../node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "../../node_modules/object-assign/index.js"(exports, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from3;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from3 = Object(arguments[s]);
        for (var key in from3) {
          if (hasOwnProperty.call(from3, key)) {
            to[key] = from3[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from3);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from3, symbols[i])) {
              to[symbols[i]] = from3[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// ../../node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../node_modules/prop-types/lib/has.js"(exports, module2) {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../node_modules/prop-types/checkPropTypes.js"(exports, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text5) {
        var message = "Warning: " + text5;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// ../../node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module2) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text5) {
        var message = "Warning: " + text5;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data2) {
        this.message = message;
        this.data = data2 && typeof data2 === "object" ? data2 : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props2, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props2[propName] == null) {
            if (isRequired) {
              if (props2[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props2, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props2, propName, componentName, location, propFullName, secret) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props2, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props2[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props2, propName, componentName, location, propFullName) {
          if (!(props2[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props2[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is2(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type7 = getPreciseType(value);
            if (type7 === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props2, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props2, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props2, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props2, propName, componentName, location, propFullName) {
          if (!isNode(props2[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type7) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type7 + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props2, propName, componentName, location, propFullName) {
          var propValue = props2[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props2[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props2[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type7 = getPreciseType(value);
        switch (type7) {
          case "array":
          case "object":
            return "an " + type7;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type7;
          default:
            return type7;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../node_modules/prop-types/index.js"(exports, module2) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../node_modules/@lezer/common/dist/index.js
function checkSide(side, pos, from3, to) {
  switch (side) {
    case -2:
      return from3 < pos;
    case -1:
      return to >= pos && from3 < pos;
    case 0:
      return from3 < pos && to > pos;
    case 1:
      return from3 <= pos && to > pos;
    case 2:
      return to > pos;
    case 4:
      return true;
  }
}
function resolveNode(node, pos, side, overlays) {
  var _a2;
  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
    if (!parent)
      return node;
    node = parent;
  }
  let mode = overlays ? 0 : IterMode.IgnoreOverlays;
  if (overlays)
    for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
      if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
        node = parent;
    }
  for (; ; ) {
    let inner = node.enter(pos, side, mode);
    if (!inner)
      return node;
    node = inner;
  }
}
function getChildren(node, type7, before, after) {
  let cur2 = node.cursor(), result = [];
  if (!cur2.firstChild())
    return result;
  if (before != null)
    for (let found = false; !found; ) {
      found = cur2.type.is(before);
      if (!cur2.nextSibling())
        return result;
    }
  for (; ; ) {
    if (after != null && cur2.type.is(after))
      return result;
    if (cur2.type.is(type7))
      result.push(cur2.node);
    if (!cur2.nextSibling())
      return after == null ? result : [];
  }
}
function matchNodeContext(node, context, i = context.length - 1) {
  for (let p = node; i >= 0; p = p.parent) {
    if (!p)
      return false;
    if (!p.type.isAnonymous) {
      if (context[i] && context[i] != p.name)
        return false;
      i--;
    }
  }
  return true;
}
function iterStack(heads) {
  if (!heads.length)
    return null;
  let pick = 0, picked = heads[0];
  for (let i = 1; i < heads.length; i++) {
    let node = heads[i];
    if (node.from > picked.from || node.to < picked.to) {
      picked = node;
      pick = i;
    }
  }
  let next2 = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
  let newHeads = heads.slice();
  if (next2)
    newHeads[pick] = next2;
  else
    newHeads.splice(pick, 1);
  return new StackIterator(newHeads, picked);
}
function stackIterator(tree, pos, side) {
  let inner = tree.resolveInner(pos, side), layers = null;
  for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
    if (scan.index < 0) {
      let parent = scan.parent;
      (layers || (layers = [inner])).push(parent.resolve(pos, side));
      scan = parent;
    } else {
      let mount = MountedTree.get(scan.tree);
      if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
        let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
        (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
      }
    }
  }
  return layers ? iterStack(layers) : inner;
}
function hasChild(tree) {
  return tree.children.some((ch2) => ch2 instanceof TreeBuffer || !ch2.type.isAnonymous || hasChild(ch2));
}
function buildTree(data2) {
  var _a2;
  let { buffer, nodeSet: nodeSet2, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet2.types.length } = data2;
  let cursor2 = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  let types8 = nodeSet2.types;
  let contextHash = 0, lookAhead = 0;
  function takeNode(parentStart, minPos, children2, positions2, inRepeat, depth) {
    let { id: id3, start: start2, end: end2, size } = cursor2;
    let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
    while (size < 0) {
      cursor2.next();
      if (size == -1) {
        let node2 = reused[id3];
        children2.push(node2);
        positions2.push(start2 - parentStart);
        return;
      } else if (size == -3) {
        contextHash = id3;
        return;
      } else if (size == -4) {
        lookAhead = id3;
        return;
      } else {
        throw new RangeError(`Unrecognized record size: ${size}`);
      }
    }
    let type7 = types8[id3], node, buffer2;
    let startPos = start2 - parentStart;
    if (end2 - start2 <= maxBufferLength && (buffer2 = findBufferSize(cursor2.pos - minPos, inRepeat))) {
      let data3 = new Uint16Array(buffer2.size - buffer2.skip);
      let endPos = cursor2.pos - buffer2.size, index = data3.length;
      while (cursor2.pos > endPos)
        index = copyToBuffer(buffer2.start, data3, index);
      node = new TreeBuffer(data3, end2 - buffer2.start, nodeSet2);
      startPos = buffer2.start - parentStart;
    } else {
      let endPos = cursor2.pos - size;
      cursor2.next();
      let localChildren = [], localPositions = [];
      let localInRepeat = id3 >= minRepeatType ? id3 : -1;
      let lastGroup = 0, lastEnd = end2;
      while (cursor2.pos > endPos) {
        if (localInRepeat >= 0 && cursor2.id == localInRepeat && cursor2.size >= 0) {
          if (cursor2.end <= lastEnd - maxBufferLength) {
            makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, cursor2.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
            lastGroup = localChildren.length;
            lastEnd = cursor2.end;
          }
          cursor2.next();
        } else if (depth > 2500) {
          takeFlatNode(start2, endPos, localChildren, localPositions);
        } else {
          takeNode(start2, endPos, localChildren, localPositions, localInRepeat, depth + 1);
        }
      }
      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
        makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, start2, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && lastGroup > 0) {
        let make = makeBalanced(type7, contextAtStart);
        node = balanceRange(type7, localChildren, localPositions, 0, localChildren.length, 0, end2 - start2, make, make);
      } else {
        node = makeTree(type7, localChildren, localPositions, end2 - start2, lookAheadAtStart - end2, contextAtStart);
      }
    }
    children2.push(node);
    positions2.push(startPos);
  }
  function takeFlatNode(parentStart, minPos, children2, positions2) {
    let nodes = [];
    let nodeCount = 0, stopAt = -1;
    while (cursor2.pos > minPos) {
      let { id: id3, start: start2, end: end2, size } = cursor2;
      if (size > 4) {
        cursor2.next();
      } else if (stopAt > -1 && start2 < stopAt) {
        break;
      } else {
        if (stopAt < 0)
          stopAt = end2 - maxBufferLength;
        nodes.push(id3, start2, end2);
        nodeCount++;
        cursor2.next();
      }
    }
    if (nodeCount) {
      let buffer2 = new Uint16Array(nodeCount * 4);
      let start2 = nodes[nodes.length - 2];
      for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
        buffer2[j++] = nodes[i];
        buffer2[j++] = nodes[i + 1] - start2;
        buffer2[j++] = nodes[i + 2] - start2;
        buffer2[j++] = j;
      }
      children2.push(new TreeBuffer(buffer2, nodes[2] - start2, nodeSet2));
      positions2.push(start2 - parentStart);
    }
  }
  function makeBalanced(type7, contextHash2) {
    return (children2, positions2, length2) => {
      let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
      if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
        if (!lastI && last.type == type7 && last.length == length2)
          return last;
        if (lookAheadProp = last.prop(NodeProp.lookAhead))
          lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
      }
      return makeTree(type7, children2, positions2, length2, lookAhead2, contextHash2);
    };
  }
  function makeRepeatLeaf(children2, positions2, base5, i, from3, to, type7, lookAhead2, contextHash2) {
    let localChildren = [], localPositions = [];
    while (children2.length > i) {
      localChildren.push(children2.pop());
      localPositions.push(positions2.pop() + base5 - from3);
    }
    children2.push(makeTree(nodeSet2.types[type7], localChildren, localPositions, to - from3, lookAhead2 - to, contextHash2));
    positions2.push(from3 - base5);
  }
  function makeTree(type7, children2, positions2, length2, lookAhead2, contextHash2, props2) {
    if (contextHash2) {
      let pair2 = [NodeProp.contextHash, contextHash2];
      props2 = props2 ? [pair2].concat(props2) : [pair2];
    }
    if (lookAhead2 > 25) {
      let pair2 = [NodeProp.lookAhead, lookAhead2];
      props2 = props2 ? [pair2].concat(props2) : [pair2];
    }
    return new Tree(type7, children2, positions2, length2, props2);
  }
  function findBufferSize(maxSize, inRepeat) {
    let fork = cursor2.fork();
    let size = 0, start2 = 0, skip = 0, minStart = fork.end - maxBufferLength;
    let result = { size: 0, start: 0, skip: 0 };
    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
      let nodeSize2 = fork.size;
      if (fork.id == inRepeat && nodeSize2 >= 0) {
        result.size = size;
        result.start = start2;
        result.skip = skip;
        skip += 4;
        size += 4;
        fork.next();
        continue;
      }
      let startPos = fork.pos - nodeSize2;
      if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
        break;
      let localSkipped = fork.id >= minRepeatType ? 4 : 0;
      let nodeStart2 = fork.start;
      fork.next();
      while (fork.pos > startPos) {
        if (fork.size < 0) {
          if (fork.size == -3)
            localSkipped += 4;
          else
            break scan;
        } else if (fork.id >= minRepeatType) {
          localSkipped += 4;
        }
        fork.next();
      }
      start2 = nodeStart2;
      size += nodeSize2;
      skip += localSkipped;
    }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start2;
      result.skip = skip;
    }
    return result.size > 4 ? result : void 0;
  }
  function copyToBuffer(bufferStart, buffer2, index) {
    let { id: id3, start: start2, end: end2, size } = cursor2;
    cursor2.next();
    if (size >= 0 && id3 < minRepeatType) {
      let startIndex = index;
      if (size > 4) {
        let endPos = cursor2.pos - (size - 4);
        while (cursor2.pos > endPos)
          index = copyToBuffer(bufferStart, buffer2, index);
      }
      buffer2[--index] = startIndex;
      buffer2[--index] = end2 - bufferStart;
      buffer2[--index] = start2 - bufferStart;
      buffer2[--index] = id3;
    } else if (size == -3) {
      contextHash = id3;
    } else if (size == -4) {
      lookAhead = id3;
    }
    return index;
  }
  let children = [], positions = [];
  while (cursor2.pos > 0)
    takeNode(data2.start || 0, data2.bufferStart || 0, children, positions, -1, 0);
  let length = (_a2 = data2.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types8[data2.topID], children.reverse(), positions.reverse(), length);
}
function nodeSize(balanceType, node) {
  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
    return 1;
  let size = nodeSizeCache.get(node);
  if (size == null) {
    size = 1;
    for (let child of node.children) {
      if (child.type != balanceType || !(child instanceof Tree)) {
        size = 1;
        break;
      }
      size += nodeSize(balanceType, child);
    }
    nodeSizeCache.set(node, size);
  }
  return size;
}
function balanceRange(balanceType, children, positions, from3, to, start2, length, mkTop, mkTree) {
  let total = 0;
  for (let i = from3; i < to; i++)
    total += nodeSize(balanceType, children[i]);
  let maxChild = Math.ceil(
    total * 1.5 / 8
    /* Balance.BranchFactor */
  );
  let localChildren = [], localPositions = [];
  function divide(children2, positions2, from4, to2, offset) {
    for (let i = from4; i < to2; ) {
      let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children2[i]);
      i++;
      for (; i < to2; i++) {
        let nextSize = nodeSize(balanceType, children2[i]);
        if (groupSize + nextSize >= maxChild)
          break;
        groupSize += nextSize;
      }
      if (i == groupFrom + 1) {
        if (groupSize > maxChild) {
          let only = children2[groupFrom];
          divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset);
          continue;
        }
        localChildren.push(children2[groupFrom]);
      } else {
        let length2 = positions2[i - 1] + children2[i - 1].length - groupStart;
        localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i, groupStart, length2, null, mkTree));
      }
      localPositions.push(groupStart + offset - start2);
    }
  }
  divide(children, positions, from3, to, 0);
  return (mkTop || mkTree)(localChildren, localPositions, length);
}
function parseMixed(nest) {
  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
}
function checkRanges(ranges) {
  if (!ranges.length || ranges.some((r2) => r2.from >= r2.to))
    throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
}
function checkCover(covered, from3, to) {
  for (let range of covered) {
    if (range.from >= to)
      break;
    if (range.to > from3)
      return range.from <= from3 && range.to >= to ? 2 : 1;
  }
  return 0;
}
function sliceBuf(buf, startI, endI, nodes, positions, off) {
  if (startI < endI) {
    let from3 = buf.buffer[startI + 1];
    nodes.push(buf.slice(startI, endI, from3));
    positions.push(from3 - off);
  }
}
function materialize(cursor2) {
  let { node } = cursor2, stack = [];
  let buffer = node.context.buffer;
  do {
    stack.push(cursor2.index);
    cursor2.parent();
  } while (!cursor2.tree);
  let base5 = cursor2.tree, i = base5.children.indexOf(buffer);
  let buf = base5.children[i], b = buf.buffer, newStack = [i];
  function split(startI, endI, type7, innerOffset, length, stackPos) {
    let targetI = stack[stackPos];
    let children = [], positions = [];
    sliceBuf(buf, startI, targetI, children, positions, innerOffset);
    let from3 = b[targetI + 1], to = b[targetI + 2];
    newStack.push(children.length);
    let child = stackPos ? split(targetI + 4, b[targetI + 3], buf.set.types[b[targetI]], from3, to - from3, stackPos - 1) : node.toTree();
    children.push(child);
    positions.push(from3 - innerOffset);
    sliceBuf(buf, b[targetI + 3], endI, children, positions, innerOffset);
    return new Tree(type7, children, positions, length);
  }
  base5.children[i] = split(0, b.length, NodeType.none, 0, buf.length, stack.length - 1);
  for (let index of newStack) {
    let tree = cursor2.tree.children[index], pos = cursor2.tree.positions[index];
    cursor2.yield(new TreeNode(tree, pos + cursor2.from, index, cursor2._tree));
  }
}
function punchRanges(outer, ranges) {
  let copy = null, current = ranges;
  for (let i = 1, j = 0; i < outer.length; i++) {
    let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
    for (; j < current.length; j++) {
      let r2 = current[j];
      if (r2.from >= gapTo)
        break;
      if (r2.to <= gapFrom)
        continue;
      if (!copy)
        current = copy = ranges.slice();
      if (r2.from < gapFrom) {
        copy[j] = new Range(r2.from, gapFrom);
        if (r2.to > gapTo)
          copy.splice(j + 1, 0, new Range(gapTo, r2.to));
      } else if (r2.to > gapTo) {
        copy[j--] = new Range(gapTo, r2.to);
      } else {
        copy.splice(j--, 1);
      }
    }
  }
  return current;
}
function findCoverChanges(a2, b, from3, to) {
  let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
  let result = [];
  for (; ; ) {
    let nextA = iA == a2.length ? 1e9 : inA ? a2[iA].to : a2[iA].from;
    let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
    if (inA != inB) {
      let start2 = Math.max(pos, from3), end2 = Math.min(nextA, nextB, to);
      if (start2 < end2)
        result.push(new Range(start2, end2));
    }
    pos = Math.min(nextA, nextB);
    if (pos == 1e9)
      break;
    if (nextA == pos) {
      if (!inA)
        inA = true;
      else {
        inA = false;
        iA++;
      }
    }
    if (nextB == pos) {
      if (!inB)
        inB = true;
      else {
        inB = false;
        iB++;
      }
    }
  }
  return result;
}
function enterFragments(mounts, ranges) {
  let result = [];
  for (let { pos, mount, frag } of mounts) {
    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
    let from3 = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
    if (mount.overlay) {
      let overlay = mount.overlay.map((r2) => new Range(r2.from + pos, r2.to + pos));
      let changes = findCoverChanges(ranges, overlay, from3, to);
      for (let i = 0, pos2 = from3; ; i++) {
        let last = i == changes.length, end2 = last ? to : changes[i].from;
        if (end2 > pos2)
          result.push(new TreeFragment(pos2, end2, mount.tree, -startPos, frag.from >= pos2 || frag.openStart, frag.to <= end2 || frag.openEnd));
        if (last)
          break;
        pos2 = changes[i].to;
      }
    } else {
      result.push(new TreeFragment(from3, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
    }
  }
  return result;
}
var DefaultBufferLength, nextPropID, Range, NodeProp, MountedTree, noProps, NodeType, NodeSet, CachedNode, CachedInnerNode, IterMode, Tree, FlatBufferCursor, TreeBuffer, BaseNode, TreeNode, BufferContext, BufferNode, StackIterator, TreeCursor, nodeSizeCache, NodeWeakMap, TreeFragment, Parser, StringInput, InnerParse, ActiveOverlay, stoppedInner, MixedParse, StructureCursor, FragmentCursor;
var init_dist = __esm({
  "../../node_modules/@lezer/common/dist/index.js"() {
    DefaultBufferLength = 1024;
    nextPropID = 0;
    Range = class {
      constructor(from3, to) {
        this.from = from3;
        this.to = to;
      }
    };
    NodeProp = class {
      /**
      Create a new node prop type.
      */
      constructor(config2 = {}) {
        this.id = nextPropID++;
        this.perNode = !!config2.perNode;
        this.deserialize = config2.deserialize || (() => {
          throw new Error("This node type doesn't define a deserialize function");
        });
      }
      /**
      This is meant to be used with
      [`NodeSet.extend`](#common.NodeSet.extend) or
      [`LRParser.configure`](#lr.ParserConfig.props) to compute
      prop values for each node type in the set. Takes a [match
      object](#common.NodeType^match) or function that returns undefined
      if the node type doesn't get this prop, and the prop's value if
      it does.
      */
      add(match2) {
        if (this.perNode)
          throw new RangeError("Can't add per-node props to node types");
        if (typeof match2 != "function")
          match2 = NodeType.match(match2);
        return (type7) => {
          let result = match2(type7);
          return result === void 0 ? null : [this, result];
        };
      }
    };
    NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
    NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
    NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
    NodeProp.isolate = new NodeProp({ deserialize: (value) => {
      if (value && value != "rtl" && value != "ltr" && value != "auto")
        throw new RangeError("Invalid value for isolate: " + value);
      return value || "auto";
    } });
    NodeProp.contextHash = new NodeProp({ perNode: true });
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    NodeProp.mounted = new NodeProp({ perNode: true });
    MountedTree = class {
      constructor(tree, overlay, parser29) {
        this.tree = tree;
        this.overlay = overlay;
        this.parser = parser29;
      }
      /**
      @internal
      */
      static get(tree) {
        return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
    };
    noProps = /* @__PURE__ */ Object.create(null);
    NodeType = class _NodeType {
      /**
      @internal
      */
      constructor(name2, props2, id3, flags = 0) {
        this.name = name2;
        this.props = props2;
        this.id = id3;
        this.flags = flags;
      }
      /**
      Define a node type.
      */
      static define(spec) {
        let props2 = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
        let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
        let type7 = new _NodeType(spec.name || "", props2, spec.id, flags);
        if (spec.props)
          for (let src of spec.props) {
            if (!Array.isArray(src))
              src = src(type7);
            if (src) {
              if (src[0].perNode)
                throw new RangeError("Can't store a per-node prop on a node type");
              props2[src[0].id] = src[1];
            }
          }
        return type7;
      }
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      prop(prop) {
        return this.props[prop.id];
      }
      /**
      True when this is the top node of a grammar.
      */
      get isTop() {
        return (this.flags & 1) > 0;
      }
      /**
      True when this node is produced by a skip rule.
      */
      get isSkipped() {
        return (this.flags & 2) > 0;
      }
      /**
      Indicates whether this is an error node.
      */
      get isError() {
        return (this.flags & 4) > 0;
      }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
      get isAnonymous() {
        return (this.flags & 8) > 0;
      }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
      is(name2) {
        if (typeof name2 == "string") {
          if (this.name == name2)
            return true;
          let group = this.prop(NodeProp.group);
          return group ? group.indexOf(name2) > -1 : false;
        }
        return this.id == name2;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
      static match(map) {
        let direct = /* @__PURE__ */ Object.create(null);
        for (let prop in map)
          for (let name2 of prop.split(" "))
            direct[name2] = map[prop];
        return (node) => {
          for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
            let found = direct[i < 0 ? node.name : groups[i]];
            if (found)
              return found;
          }
        };
      }
    };
    NodeType.none = new NodeType(
      "",
      /* @__PURE__ */ Object.create(null),
      0,
      8
      /* NodeFlag.Anonymous */
    );
    NodeSet = class _NodeSet {
      /**
      Create a set with the given types. The `id` property of each
      type should correspond to its position within the array.
      */
      constructor(types8) {
        this.types = types8;
        for (let i = 0; i < types8.length; i++)
          if (types8[i].id != i)
            throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /**
      Create a copy of this set with some node properties added. The
      arguments to this method can be created with
      [`NodeProp.add`](#common.NodeProp.add).
      */
      extend(...props2) {
        let newTypes = [];
        for (let type7 of this.types) {
          let newProps = null;
          for (let source of props2) {
            let add3 = source(type7);
            if (add3) {
              if (!newProps)
                newProps = Object.assign({}, type7.props);
              newProps[add3[0].id] = add3[1];
            }
          }
          newTypes.push(newProps ? new NodeType(type7.name, newProps, type7.id, type7.flags) : type7);
        }
        return new _NodeSet(newTypes);
      }
    };
    CachedNode = /* @__PURE__ */ new WeakMap();
    CachedInnerNode = /* @__PURE__ */ new WeakMap();
    (function(IterMode2) {
      IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
      IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    Tree = class _Tree {
      /**
      Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      */
      constructor(type7, children, positions, length, props2) {
        this.type = type7;
        this.children = children;
        this.positions = positions;
        this.length = length;
        this.props = null;
        if (props2 && props2.length) {
          this.props = /* @__PURE__ */ Object.create(null);
          for (let [prop, value] of props2)
            this.props[typeof prop == "number" ? prop : prop.id] = value;
        }
      }
      /**
      @internal
      */
      toString() {
        let mounted = MountedTree.get(this);
        if (mounted && !mounted.overlay)
          return mounted.tree.toString();
        let children = "";
        for (let ch2 of this.children) {
          let str = ch2.toString();
          if (str) {
            if (children)
              children += ",";
            children += str;
          }
        }
        return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
      cursor(mode = 0) {
        return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
      cursorAt(pos, side = 0, mode = 0) {
        let scope = CachedNode.get(this) || this.topNode;
        let cursor2 = new TreeCursor(scope);
        cursor2.moveTo(pos, side);
        CachedNode.set(this, cursor2._tree);
        return cursor2;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
      get topNode() {
        return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
      resolve(pos, side = 0) {
        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
        CachedNode.set(this, node);
        return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
      resolveInner(pos, side = 0) {
        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
        CachedInnerNode.set(this, node);
        return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
      resolveStack(pos, side = 0) {
        return stackIterator(this, pos, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
      iterate(spec) {
        let { enter, leave, from: from3 = 0, to = this.length } = spec;
        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
        for (let c2 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
          let entered = false;
          if (c2.from <= to && c2.to >= from3 && (!anon && c2.type.isAnonymous || enter(c2) !== false)) {
            if (c2.firstChild())
              continue;
            entered = true;
          }
          for (; ; ) {
            if (entered && leave && (anon || !c2.type.isAnonymous))
              leave(c2);
            if (c2.nextSibling())
              break;
            if (!c2.parent())
              return;
            entered = true;
          }
        }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
      prop(prop) {
        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
      get propValues() {
        let result = [];
        if (this.props)
          for (let id3 in this.props)
            result.push([+id3, this.props[id3]]);
        return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
      balance(config2 = {}) {
        return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new _Tree(this.type, children, positions, length, this.propValues), config2.makeTree || ((children, positions, length) => new _Tree(NodeType.none, children, positions, length)));
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
      static build(data2) {
        return buildTree(data2);
      }
    };
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    FlatBufferCursor = class _FlatBufferCursor {
      constructor(buffer, index) {
        this.buffer = buffer;
        this.index = index;
      }
      get id() {
        return this.buffer[this.index - 4];
      }
      get start() {
        return this.buffer[this.index - 3];
      }
      get end() {
        return this.buffer[this.index - 2];
      }
      get size() {
        return this.buffer[this.index - 1];
      }
      get pos() {
        return this.index;
      }
      next() {
        this.index -= 4;
      }
      fork() {
        return new _FlatBufferCursor(this.buffer, this.index);
      }
    };
    TreeBuffer = class _TreeBuffer {
      /**
      Create a tree buffer.
      */
      constructor(buffer, length, set2) {
        this.buffer = buffer;
        this.length = length;
        this.set = set2;
      }
      /**
      @internal
      */
      get type() {
        return NodeType.none;
      }
      /**
      @internal
      */
      toString() {
        let result = [];
        for (let index = 0; index < this.buffer.length; ) {
          result.push(this.childString(index));
          index = this.buffer[index + 3];
        }
        return result.join(",");
      }
      /**
      @internal
      */
      childString(index) {
        let id3 = this.buffer[index], endIndex = this.buffer[index + 3];
        let type7 = this.set.types[id3], result = type7.name;
        if (/\W/.test(result) && !type7.isError)
          result = JSON.stringify(result);
        index += 4;
        if (endIndex == index)
          return result;
        let children = [];
        while (index < endIndex) {
          children.push(this.childString(index));
          index = this.buffer[index + 3];
        }
        return result + "(" + children.join(",") + ")";
      }
      /**
      @internal
      */
      findChild(startIndex, endIndex, dir, pos, side) {
        let { buffer } = this, pick = -1;
        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
          if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
            pick = i;
            if (dir > 0)
              break;
          }
        }
        return pick;
      }
      /**
      @internal
      */
      slice(startI, endI, from3) {
        let b = this.buffer;
        let copy = new Uint16Array(endI - startI), len = 0;
        for (let i = startI, j = 0; i < endI; ) {
          copy[j++] = b[i++];
          copy[j++] = b[i++] - from3;
          let to = copy[j++] = b[i++] - from3;
          copy[j++] = b[i++] - startI;
          len = Math.max(len, to);
        }
        return new _TreeBuffer(copy, len, this.set);
      }
    };
    BaseNode = class {
      cursor(mode = 0) {
        return new TreeCursor(this, mode);
      }
      getChild(type7, before = null, after = null) {
        let r2 = getChildren(this, type7, before, after);
        return r2.length ? r2[0] : null;
      }
      getChildren(type7, before = null, after = null) {
        return getChildren(this, type7, before, after);
      }
      resolve(pos, side = 0) {
        return resolveNode(this, pos, side, false);
      }
      resolveInner(pos, side = 0) {
        return resolveNode(this, pos, side, true);
      }
      matchContext(context) {
        return matchNodeContext(this.parent, context);
      }
      enterUnfinishedNodesBefore(pos) {
        let scan = this.childBefore(pos), node = this;
        while (scan) {
          let last = scan.lastChild;
          if (!last || last.to != scan.to)
            break;
          if (last.type.isError && last.from == last.to) {
            node = scan;
            scan = last.prevSibling;
          } else {
            scan = last;
          }
        }
        return node;
      }
      get node() {
        return this;
      }
      get next() {
        return this.parent;
      }
    };
    TreeNode = class _TreeNode extends BaseNode {
      constructor(_tree, from3, index, _parent) {
        super();
        this._tree = _tree;
        this.from = from3;
        this.index = index;
        this._parent = _parent;
      }
      get type() {
        return this._tree.type;
      }
      get name() {
        return this._tree.type.name;
      }
      get to() {
        return this.from + this._tree.length;
      }
      nextChild(i, dir, pos, side, mode = 0) {
        for (let parent = this; ; ) {
          for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
            let next2 = children[i], start2 = positions[i] + parent.from;
            if (!checkSide(side, pos, start2, start2 + next2.length))
              continue;
            if (next2 instanceof TreeBuffer) {
              if (mode & IterMode.ExcludeBuffers)
                continue;
              let index = next2.findChild(0, next2.buffer.length, dir, pos - start2, side);
              if (index > -1)
                return new BufferNode(new BufferContext(parent, next2, i, start2), null, index);
            } else if (mode & IterMode.IncludeAnonymous || (!next2.type.isAnonymous || hasChild(next2))) {
              let mounted;
              if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next2)) && !mounted.overlay)
                return new _TreeNode(mounted.tree, start2, i, parent);
              let inner = new _TreeNode(next2, start2, i, parent);
              return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next2.children.length - 1 : 0, dir, pos, side);
            }
          }
          if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
            return null;
          if (parent.index >= 0)
            i = parent.index + dir;
          else
            i = dir < 0 ? -1 : parent._parent._tree.children.length;
          parent = parent._parent;
          if (!parent)
            return null;
        }
      }
      get firstChild() {
        return this.nextChild(
          0,
          1,
          0,
          4
          /* Side.DontCare */
        );
      }
      get lastChild() {
        return this.nextChild(
          this._tree.children.length - 1,
          -1,
          0,
          4
          /* Side.DontCare */
        );
      }
      childAfter(pos) {
        return this.nextChild(
          0,
          1,
          pos,
          2
          /* Side.After */
        );
      }
      childBefore(pos) {
        return this.nextChild(
          this._tree.children.length - 1,
          -1,
          pos,
          -2
          /* Side.Before */
        );
      }
      enter(pos, side, mode = 0) {
        let mounted;
        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
          let rPos = pos - this.from;
          for (let { from: from3, to } of mounted.overlay) {
            if ((side > 0 ? from3 <= rPos : from3 < rPos) && (side < 0 ? to >= rPos : to > rPos))
              return new _TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
          }
        }
        return this.nextChild(0, 1, pos, side, mode);
      }
      nextSignificantParent() {
        let val = this;
        while (val.type.isAnonymous && val._parent)
          val = val._parent;
        return val;
      }
      get parent() {
        return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(
          this.index + 1,
          1,
          0,
          4
          /* Side.DontCare */
        ) : null;
      }
      get prevSibling() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(
          this.index - 1,
          -1,
          0,
          4
          /* Side.DontCare */
        ) : null;
      }
      get tree() {
        return this._tree;
      }
      toTree() {
        return this._tree;
      }
      /**
      @internal
      */
      toString() {
        return this._tree.toString();
      }
    };
    BufferContext = class {
      constructor(parent, buffer, index, start2) {
        this.parent = parent;
        this.buffer = buffer;
        this.index = index;
        this.start = start2;
      }
    };
    BufferNode = class _BufferNode extends BaseNode {
      get name() {
        return this.type.name;
      }
      get from() {
        return this.context.start + this.context.buffer.buffer[this.index + 1];
      }
      get to() {
        return this.context.start + this.context.buffer.buffer[this.index + 2];
      }
      constructor(context, _parent, index) {
        super();
        this.context = context;
        this._parent = _parent;
        this.index = index;
        this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      child(dir, pos, side) {
        let { buffer } = this.context;
        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
        return index < 0 ? null : new _BufferNode(this.context, this, index);
      }
      get firstChild() {
        return this.child(
          1,
          0,
          4
          /* Side.DontCare */
        );
      }
      get lastChild() {
        return this.child(
          -1,
          0,
          4
          /* Side.DontCare */
        );
      }
      childAfter(pos) {
        return this.child(
          1,
          pos,
          2
          /* Side.After */
        );
      }
      childBefore(pos) {
        return this.child(
          -1,
          pos,
          -2
          /* Side.Before */
        );
      }
      enter(pos, side, mode = 0) {
        if (mode & IterMode.ExcludeBuffers)
          return null;
        let { buffer } = this.context;
        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
        return index < 0 ? null : new _BufferNode(this.context, this, index);
      }
      get parent() {
        return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
        return this._parent ? null : this.context.parent.nextChild(
          this.context.index + dir,
          dir,
          0,
          4
          /* Side.DontCare */
        );
      }
      get nextSibling() {
        let { buffer } = this.context;
        let after = buffer.buffer[this.index + 3];
        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
          return new _BufferNode(this.context, this._parent, after);
        return this.externalSibling(1);
      }
      get prevSibling() {
        let { buffer } = this.context;
        let parentStart = this._parent ? this._parent.index + 4 : 0;
        if (this.index == parentStart)
          return this.externalSibling(-1);
        return new _BufferNode(this.context, this._parent, buffer.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
      }
      get tree() {
        return null;
      }
      toTree() {
        let children = [], positions = [];
        let { buffer } = this.context;
        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
        if (endI > startI) {
          let from3 = buffer.buffer[this.index + 1];
          children.push(buffer.slice(startI, endI, from3));
          positions.push(0);
        }
        return new Tree(this.type, children, positions, this.to - this.from);
      }
      /**
      @internal
      */
      toString() {
        return this.context.buffer.childString(this.index);
      }
    };
    StackIterator = class {
      constructor(heads, node) {
        this.heads = heads;
        this.node = node;
      }
      get next() {
        return iterStack(this.heads);
      }
    };
    TreeCursor = class {
      /**
      Shorthand for `.type.name`.
      */
      get name() {
        return this.type.name;
      }
      /**
      @internal
      */
      constructor(node, mode = 0) {
        this.mode = mode;
        this.buffer = null;
        this.stack = [];
        this.index = 0;
        this.bufferNode = null;
        if (node instanceof TreeNode) {
          this.yieldNode(node);
        } else {
          this._tree = node.context.parent;
          this.buffer = node.context;
          for (let n = node._parent; n; n = n._parent)
            this.stack.unshift(n.index);
          this.bufferNode = node;
          this.yieldBuf(node.index);
        }
      }
      yieldNode(node) {
        if (!node)
          return false;
        this._tree = node;
        this.type = node.type;
        this.from = node.from;
        this.to = node.to;
        return true;
      }
      yieldBuf(index, type7) {
        this.index = index;
        let { start: start2, buffer } = this.buffer;
        this.type = type7 || buffer.set.types[buffer.buffer[index]];
        this.from = start2 + buffer.buffer[index + 1];
        this.to = start2 + buffer.buffer[index + 2];
        return true;
      }
      /**
      @internal
      */
      yield(node) {
        if (!node)
          return false;
        if (node instanceof TreeNode) {
          this.buffer = null;
          return this.yieldNode(node);
        }
        this.buffer = node.context;
        return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
      toString() {
        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
      enterChild(dir, pos, side) {
        if (!this.buffer)
          return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
        let { buffer } = this.buffer;
        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
        if (index < 0)
          return false;
        this.stack.push(this.index);
        return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
      firstChild() {
        return this.enterChild(
          1,
          0,
          4
          /* Side.DontCare */
        );
      }
      /**
      Move the cursor to this node's last child.
      */
      lastChild() {
        return this.enterChild(
          -1,
          0,
          4
          /* Side.DontCare */
        );
      }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
      childAfter(pos) {
        return this.enterChild(
          1,
          pos,
          2
          /* Side.After */
        );
      }
      /**
      Move to the last child that starts before `pos`.
      */
      childBefore(pos) {
        return this.enterChild(
          -1,
          pos,
          -2
          /* Side.Before */
        );
      }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
      enter(pos, side, mode = this.mode) {
        if (!this.buffer)
          return this.yield(this._tree.enter(pos, side, mode));
        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
      parent() {
        if (!this.buffer)
          return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
        if (this.stack.length)
          return this.yieldBuf(this.stack.pop());
        let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
        this.buffer = null;
        return this.yieldNode(parent);
      }
      /**
      @internal
      */
      sibling(dir) {
        if (!this.buffer)
          return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
        let { buffer } = this.buffer, d3 = this.stack.length - 1;
        if (dir < 0) {
          let parentStart = d3 < 0 ? 0 : this.stack[d3] + 4;
          if (this.index != parentStart)
            return this.yieldBuf(buffer.findChild(
              parentStart,
              this.index,
              -1,
              0,
              4
              /* Side.DontCare */
            ));
        } else {
          let after = buffer.buffer[this.index + 3];
          if (after < (d3 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d3] + 3]))
            return this.yieldBuf(after);
        }
        return d3 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
      nextSibling() {
        return this.sibling(1);
      }
      /**
      Move to this node's previous sibling, if any.
      */
      prevSibling() {
        return this.sibling(-1);
      }
      atLastNode(dir) {
        let index, parent, { buffer } = this;
        if (buffer) {
          if (dir > 0) {
            if (this.index < buffer.buffer.buffer.length)
              return false;
          } else {
            for (let i = 0; i < this.index; i++)
              if (buffer.buffer.buffer[i + 3] < this.index)
                return false;
          }
          ({ index, parent } = buffer);
        } else {
          ({ index, _parent: parent } = this._tree);
        }
        for (; parent; { index, _parent: parent } = parent) {
          if (index > -1)
            for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
              let child = parent._tree.children[i];
              if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
                return false;
            }
        }
        return true;
      }
      move(dir, enter) {
        if (enter && this.enterChild(
          dir,
          0,
          4
          /* Side.DontCare */
        ))
          return true;
        for (; ; ) {
          if (this.sibling(dir))
            return true;
          if (this.atLastNode(dir) || !this.parent())
            return false;
        }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
      next(enter = true) {
        return this.move(1, enter);
      }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
      prev(enter = true) {
        return this.move(-1, enter);
      }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
      moveTo(pos, side = 0) {
        while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
          if (!this.parent())
            break;
        while (this.enterChild(1, pos, side)) {
        }
        return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
      get node() {
        if (!this.buffer)
          return this._tree;
        let cache4 = this.bufferNode, result = null, depth = 0;
        if (cache4 && cache4.context == this.buffer) {
          scan: for (let index = this.index, d3 = this.stack.length; d3 >= 0; ) {
            for (let c2 = cache4; c2; c2 = c2._parent)
              if (c2.index == index) {
                if (index == this.index)
                  return c2;
                result = c2;
                depth = d3 + 1;
                break scan;
              }
            index = this.stack[--d3];
          }
        }
        for (let i = depth; i < this.stack.length; i++)
          result = new BufferNode(this.buffer, result, this.stack[i]);
        return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
      get tree() {
        return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
      iterate(enter, leave) {
        for (let depth = 0; ; ) {
          let mustLeave = false;
          if (this.type.isAnonymous || enter(this) !== false) {
            if (this.firstChild()) {
              depth++;
              continue;
            }
            if (!this.type.isAnonymous)
              mustLeave = true;
          }
          for (; ; ) {
            if (mustLeave && leave)
              leave(this);
            mustLeave = this.type.isAnonymous;
            if (!depth)
              return;
            if (this.nextSibling())
              break;
            this.parent();
            depth--;
            mustLeave = true;
          }
        }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
      matchContext(context) {
        if (!this.buffer)
          return matchNodeContext(this.node.parent, context);
        let { buffer } = this.buffer, { types: types8 } = buffer.set;
        for (let i = context.length - 1, d3 = this.stack.length - 1; i >= 0; d3--) {
          if (d3 < 0)
            return matchNodeContext(this._tree, context, i);
          let type7 = types8[buffer.buffer[this.stack[d3]]];
          if (!type7.isAnonymous) {
            if (context[i] && context[i] != type7.name)
              return false;
            i--;
          }
        }
        return true;
      }
    };
    nodeSizeCache = /* @__PURE__ */ new WeakMap();
    NodeWeakMap = class {
      constructor() {
        this.map = /* @__PURE__ */ new WeakMap();
      }
      setBuffer(buffer, index, value) {
        let inner = this.map.get(buffer);
        if (!inner)
          this.map.set(buffer, inner = /* @__PURE__ */ new Map());
        inner.set(index, value);
      }
      getBuffer(buffer, index) {
        let inner = this.map.get(buffer);
        return inner && inner.get(index);
      }
      /**
      Set the value for this syntax node.
      */
      set(node, value) {
        if (node instanceof BufferNode)
          this.setBuffer(node.context.buffer, node.index, value);
        else if (node instanceof TreeNode)
          this.map.set(node.tree, value);
      }
      /**
      Retrieve value for this syntax node, if it exists in the map.
      */
      get(node) {
        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : void 0;
      }
      /**
      Set the value for the node that a cursor currently points to.
      */
      cursorSet(cursor2, value) {
        if (cursor2.buffer)
          this.setBuffer(cursor2.buffer.buffer, cursor2.index, value);
        else
          this.map.set(cursor2.tree, value);
      }
      /**
      Retrieve the value for the node that a cursor currently points
      to.
      */
      cursorGet(cursor2) {
        return cursor2.buffer ? this.getBuffer(cursor2.buffer.buffer, cursor2.index) : this.map.get(cursor2.tree);
      }
    };
    TreeFragment = class _TreeFragment {
      /**
      Construct a tree fragment. You'll usually want to use
      [`addTree`](#common.TreeFragment^addTree) and
      [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      calling this directly.
      */
      constructor(from3, to, tree, offset, openStart = false, openEnd = false) {
        this.from = from3;
        this.to = to;
        this.tree = tree;
        this.offset = offset;
        this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
      }
      /**
      Whether the start of the fragment represents the start of a
      parse, or the end of a change. (In the second case, it may not
      be safe to reuse some nodes at the start, depending on the
      parsing algorithm.)
      */
      get openStart() {
        return (this.open & 1) > 0;
      }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
      get openEnd() {
        return (this.open & 2) > 0;
      }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
      static addTree(tree, fragments = [], partial = false) {
        let result = [new _TreeFragment(0, tree.length, tree, 0, false, partial)];
        for (let f of fragments)
          if (f.to > tree.length)
            result.push(f);
        return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
      static applyChanges(fragments, changes, minGap = 128) {
        if (!changes.length)
          return fragments;
        let result = [];
        let fI = 1, nextF = fragments.length ? fragments[0] : null;
        for (let cI = 0, pos = 0, off = 0; ; cI++) {
          let nextC = cI < changes.length ? changes[cI] : null;
          let nextPos = nextC ? nextC.fromA : 1e9;
          if (nextPos - pos >= minGap)
            while (nextF && nextF.from < nextPos) {
              let cut = nextF;
              if (pos >= cut.from || nextPos <= cut.to || off) {
                let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                cut = fFrom >= fTo ? null : new _TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
              }
              if (cut)
                result.push(cut);
              if (nextF.to > nextPos)
                break;
              nextF = fI < fragments.length ? fragments[fI++] : null;
            }
          if (!nextC)
            break;
          pos = nextC.toA;
          off = nextC.toA - nextC.toB;
        }
        return result;
      }
    };
    Parser = class {
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      startParse(input, fragments, ranges) {
        if (typeof input == "string")
          input = new StringInput(input);
        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map((r2) => new Range(r2.from, r2.to)) : [new Range(0, 0)];
        return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
      parse(input, fragments, ranges) {
        let parse = this.startParse(input, fragments, ranges);
        for (; ; ) {
          let done = parse.advance();
          if (done)
            return done;
        }
      }
    };
    StringInput = class {
      constructor(string3) {
        this.string = string3;
      }
      get length() {
        return this.string.length;
      }
      chunk(from3) {
        return this.string.slice(from3);
      }
      get lineChunks() {
        return false;
      }
      read(from3, to) {
        return this.string.slice(from3, to);
      }
    };
    InnerParse = class {
      constructor(parser29, parse, overlay, target, from3) {
        this.parser = parser29;
        this.parse = parse;
        this.overlay = overlay;
        this.target = target;
        this.from = from3;
      }
    };
    ActiveOverlay = class {
      constructor(parser29, predicate, mounts, index, start2, target, prev) {
        this.parser = parser29;
        this.predicate = predicate;
        this.mounts = mounts;
        this.index = index;
        this.start = start2;
        this.target = target;
        this.prev = prev;
        this.depth = 0;
        this.ranges = [];
      }
    };
    stoppedInner = new NodeProp({ perNode: true });
    MixedParse = class {
      constructor(base5, nest, input, fragments, ranges) {
        this.nest = nest;
        this.input = input;
        this.fragments = fragments;
        this.ranges = ranges;
        this.inner = [];
        this.innerDone = 0;
        this.baseTree = null;
        this.stoppedAt = null;
        this.baseParse = base5;
      }
      advance() {
        if (this.baseParse) {
          let done2 = this.baseParse.advance();
          if (!done2)
            return null;
          this.baseParse = null;
          this.baseTree = done2;
          this.startInner();
          if (this.stoppedAt != null)
            for (let inner2 of this.inner)
              inner2.parse.stopAt(this.stoppedAt);
        }
        if (this.innerDone == this.inner.length) {
          let result = this.baseTree;
          if (this.stoppedAt != null)
            result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
          return result;
        }
        let inner = this.inner[this.innerDone], done = inner.parse.advance();
        if (done) {
          this.innerDone++;
          let props2 = Object.assign(/* @__PURE__ */ Object.create(null), inner.target.props);
          props2[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
          inner.target.props = props2;
        }
        return null;
      }
      get parsedPos() {
        if (this.baseParse)
          return 0;
        let pos = this.input.length;
        for (let i = this.innerDone; i < this.inner.length; i++) {
          if (this.inner[i].from < pos)
            pos = Math.min(pos, this.inner[i].parse.parsedPos);
        }
        return pos;
      }
      stopAt(pos) {
        this.stoppedAt = pos;
        if (this.baseParse)
          this.baseParse.stopAt(pos);
        else
          for (let i = this.innerDone; i < this.inner.length; i++)
            this.inner[i].parse.stopAt(pos);
      }
      startInner() {
        let fragmentCursor = new FragmentCursor(this.fragments);
        let overlay = null;
        let covered = null;
        let cursor2 = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
        scan: for (let nest, isCovered; ; ) {
          let enter = true, range;
          if (this.stoppedAt != null && cursor2.from >= this.stoppedAt) {
            enter = false;
          } else if (fragmentCursor.hasNode(cursor2)) {
            if (overlay) {
              let match2 = overlay.mounts.find((m) => m.frag.from <= cursor2.from && m.frag.to >= cursor2.to && m.mount.overlay);
              if (match2)
                for (let r2 of match2.mount.overlay) {
                  let from3 = r2.from + match2.pos, to = r2.to + match2.pos;
                  if (from3 >= cursor2.from && to <= cursor2.to && !overlay.ranges.some((r3) => r3.from < to && r3.to > from3))
                    overlay.ranges.push({ from: from3, to });
                }
            }
            enter = false;
          } else if (covered && (isCovered = checkCover(covered.ranges, cursor2.from, cursor2.to))) {
            enter = isCovered != 2;
          } else if (!cursor2.type.isAnonymous && (nest = this.nest(cursor2, this.input)) && (cursor2.from < cursor2.to || !nest.overlay)) {
            if (!cursor2.tree)
              materialize(cursor2);
            let oldMounts = fragmentCursor.findMounts(cursor2.from, nest.parser);
            if (typeof nest.overlay == "function") {
              overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor2.from, cursor2.tree, overlay);
            } else {
              let ranges = punchRanges(this.ranges, nest.overlay || (cursor2.from < cursor2.to ? [new Range(cursor2.from, cursor2.to)] : []));
              if (ranges.length)
                checkRanges(ranges);
              if (ranges.length || !nest.overlay)
                this.inner.push(new InnerParse(nest.parser, ranges.length ? nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges) : nest.parser.startParse(""), nest.overlay ? nest.overlay.map((r2) => new Range(r2.from - cursor2.from, r2.to - cursor2.from)) : null, cursor2.tree, ranges.length ? ranges[0].from : cursor2.from));
              if (!nest.overlay)
                enter = false;
              else if (ranges.length)
                covered = { ranges, depth: 0, prev: covered };
            }
          } else if (overlay && (range = overlay.predicate(cursor2))) {
            if (range === true)
              range = new Range(cursor2.from, cursor2.to);
            if (range.from < range.to) {
              let last = overlay.ranges.length - 1;
              if (last >= 0 && overlay.ranges[last].to == range.from)
                overlay.ranges[last] = { from: overlay.ranges[last].from, to: range.to };
              else
                overlay.ranges.push(range);
            }
          }
          if (enter && cursor2.firstChild()) {
            if (overlay)
              overlay.depth++;
            if (covered)
              covered.depth++;
          } else {
            for (; ; ) {
              if (cursor2.nextSibling())
                break;
              if (!cursor2.parent())
                break scan;
              if (overlay && !--overlay.depth) {
                let ranges = punchRanges(this.ranges, overlay.ranges);
                if (ranges.length) {
                  checkRanges(ranges);
                  this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map((r2) => new Range(r2.from - overlay.start, r2.to - overlay.start)), overlay.target, ranges[0].from));
                }
                overlay = overlay.prev;
              }
              if (covered && !--covered.depth)
                covered = covered.prev;
            }
          }
        }
      }
    };
    StructureCursor = class {
      constructor(root, offset) {
        this.offset = offset;
        this.done = false;
        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
      }
      // Move to the first node (in pre-order) that starts at or after `pos`.
      moveTo(pos) {
        let { cursor: cursor2 } = this, p = pos - this.offset;
        while (!this.done && cursor2.from < p) {
          if (cursor2.to >= pos && cursor2.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
          else if (!cursor2.next(false))
            this.done = true;
        }
      }
      hasNode(cursor2) {
        this.moveTo(cursor2.from);
        if (!this.done && this.cursor.from + this.offset == cursor2.from && this.cursor.tree) {
          for (let tree = this.cursor.tree; ; ) {
            if (tree == cursor2.tree)
              return true;
            if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
              tree = tree.children[0];
            else
              break;
          }
        }
        return false;
      }
    };
    FragmentCursor = class {
      constructor(fragments) {
        var _a2;
        this.fragments = fragments;
        this.curTo = 0;
        this.fragI = 0;
        if (fragments.length) {
          let first = this.curFrag = fragments[0];
          this.curTo = (_a2 = first.tree.prop(stoppedInner)) !== null && _a2 !== void 0 ? _a2 : first.to;
          this.inner = new StructureCursor(first.tree, -first.offset);
        } else {
          this.curFrag = this.inner = null;
        }
      }
      hasNode(node) {
        while (this.curFrag && node.from >= this.curTo)
          this.nextFrag();
        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
      }
      nextFrag() {
        var _a2;
        this.fragI++;
        if (this.fragI == this.fragments.length) {
          this.curFrag = this.inner = null;
        } else {
          let frag = this.curFrag = this.fragments[this.fragI];
          this.curTo = (_a2 = frag.tree.prop(stoppedInner)) !== null && _a2 !== void 0 ? _a2 : frag.to;
          this.inner = new StructureCursor(frag.tree, -frag.offset);
        }
      }
      findMounts(pos, parser29) {
        var _a2;
        let result = [];
        if (this.inner) {
          this.inner.cursor.moveTo(pos, 1);
          for (let pos2 = this.inner.cursor.node; pos2; pos2 = pos2.parent) {
            let mount = (_a2 = pos2.tree) === null || _a2 === void 0 ? void 0 : _a2.prop(NodeProp.mounted);
            if (mount && mount.parser == parser29) {
              for (let i = this.fragI; i < this.fragments.length; i++) {
                let frag = this.fragments[i];
                if (frag.from >= pos2.to)
                  break;
                if (frag.tree == this.curFrag.tree)
                  result.push({
                    frag,
                    pos: pos2.from - frag.offset,
                    mount
                  });
              }
            }
          }
        }
        return result;
      }
    };
  }
});

// ../../node_modules/@marijn/find-cluster-break/src/index.js
function isExtendingChar(code2) {
  if (code2 < 768) return false;
  for (let from3 = 0, to = rangeFrom.length; ; ) {
    let mid = from3 + to >> 1;
    if (code2 < rangeFrom[mid]) to = mid;
    else if (code2 >= rangeTo[mid]) from3 = mid + 1;
    else return true;
    if (from3 == to) return false;
  }
}
function isRegionalIndicator(code2) {
  return code2 >= 127462 && code2 <= 127487;
}
function findClusterBreak(str, pos, forward = true, includeExtending = true) {
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
}
function nextClusterBreak(str, pos, includeExtending) {
  if (pos == str.length) return pos;
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
  let prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    let next2 = codePointAt(str, pos);
    if (prev == ZWJ || next2 == ZWJ || includeExtending && isExtendingChar(next2)) {
      pos += codePointSize(next2);
      prev = next2;
    } else if (isRegionalIndicator(next2)) {
      let countBefore = 0, i = pos - 2;
      while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
        countBefore++;
        i -= 2;
      }
      if (countBefore % 2 == 0) break;
      else pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos, includeExtending) {
  while (pos > 0) {
    let found = nextClusterBreak(str, pos - 2, includeExtending);
    if (found < pos) return found;
    pos--;
  }
  return 0;
}
function codePointAt(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1)) return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function surrogateLow(ch2) {
  return ch2 >= 56320 && ch2 < 57344;
}
function surrogateHigh(ch2) {
  return ch2 >= 55296 && ch2 < 56320;
}
function codePointSize(code2) {
  return code2 < 65536 ? 1 : 2;
}
var rangeFrom, rangeTo, ZWJ;
var init_src = __esm({
  "../../node_modules/@marijn/find-cluster-break/src/index.js"() {
    rangeFrom = [];
    rangeTo = [];
    (() => {
      let numbers2 = "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s) => s ? parseInt(s, 36) : 1);
      for (let i = 0, n = 0; i < numbers2.length; i++)
        (i % 2 ? rangeTo : rangeFrom).push(n = n + numbers2[i]);
    })();
    ZWJ = 8205;
  }
});

// ../../node_modules/@codemirror/state/dist/index.js
function textLength(text5) {
  let length = -1;
  for (let line of text5)
    length += line.length + 1;
  return length;
}
function appendText(text5, target, from3 = 0, to = 1e9) {
  for (let pos = 0, i = 0, first = true; i < text5.length && pos <= to; i++) {
    let line = text5[i], end2 = pos + line.length;
    if (end2 >= from3) {
      if (end2 > to)
        line = line.slice(0, to - pos);
      if (pos < from3)
        line = line.slice(from3 - pos);
      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else
        target.push(line);
    }
    pos = end2 + 1;
  }
  return target;
}
function sliceText(text5, from3, to) {
  return appendText(text5, [""], from3, to);
}
function clip(text5, from3, to) {
  from3 = Math.max(0, Math.min(text5.length, from3));
  return [from3, Math.max(from3, Math.min(text5.length, to))];
}
function findClusterBreak2(str, pos, forward = true, includeExtending = true) {
  return findClusterBreak(str, pos, forward, includeExtending);
}
function surrogateLow2(ch2) {
  return ch2 >= 56320 && ch2 < 57344;
}
function surrogateHigh2(ch2) {
  return ch2 >= 55296 && ch2 < 56320;
}
function codePointAt2(str, pos) {
  let code0 = str.charCodeAt(pos);
  if (!surrogateHigh2(code0) || pos + 1 == str.length)
    return code0;
  let code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow2(code1))
    return code0;
  return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
}
function fromCodePoint(code2) {
  if (code2 <= 65535)
    return String.fromCharCode(code2);
  code2 -= 65536;
  return String.fromCharCode((code2 >> 10) + 55296, (code2 & 1023) + 56320);
}
function codePointSize2(code2) {
  return code2 < 65536 ? 1 : 2;
}
function addSection(sections, len, ins, forceJoin = false) {
  if (len == 0 && ins <= 0)
    return;
  let last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1])
    sections[last] += len;
  else if (last >= 0 && len == 0 && sections[last] == 0)
    sections[last + 1] += ins;
  else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else
    sections.push(len, ins);
}
function addInsert(values2, sections, value) {
  if (value.length == 0)
    return;
  let index = sections.length - 2 >> 1;
  if (index < values2.length) {
    values2[values2.length - 1] = values2[values2.length - 1].append(value);
  } else {
    while (values2.length < index)
      values2.push(Text.empty);
    values2.push(value);
  }
}
function iterChanges(desc, f, individual) {
  let inserted = desc.inserted;
  for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
    let len = desc.sections[i++], ins = desc.sections[i++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      let endA = posA, endB = posB, text5 = Text.empty;
      for (; ; ) {
        endA += len;
        endB += ins;
        if (ins && inserted)
          text5 = text5.append(inserted[i - 2 >> 1]);
        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
          break;
        len = desc.sections[i++];
        ins = desc.sections[i++];
      }
      f(posA, endA, posB, endB, text5);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before, mkSet = false) {
  let sections = [], insert2 = mkSet ? [] : null;
  let a2 = new SectionIter(setA), b = new SectionIter(setB);
  for (let inserted = -1; ; ) {
    if (a2.done && b.len || b.done && a2.len) {
      throw new Error("Mismatched change set lengths");
    } else if (a2.ins == -1 && b.ins == -1) {
      let len = Math.min(a2.len, b.len);
      addSection(sections, len, -1);
      a2.forward(len);
      b.forward(len);
    } else if (b.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b.len < a2.len || b.len == a2.len && !before))) {
      let len = b.len;
      addSection(sections, b.ins, -1);
      while (len) {
        let piece = Math.min(a2.len, len);
        if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
          addSection(sections, 0, a2.ins);
          if (insert2)
            addInsert(insert2, sections, a2.text);
          inserted = a2.i;
        }
        a2.forward(piece);
        len -= piece;
      }
      b.next();
    } else if (a2.ins >= 0) {
      let len = 0, left = a2.len;
      while (left) {
        if (b.ins == -1) {
          let piece = Math.min(left, b.len);
          len += piece;
          left -= piece;
          b.forward(piece);
        } else if (b.ins == 0 && b.len < left) {
          left -= b.len;
          b.next();
        } else {
          break;
        }
      }
      addSection(sections, len, inserted < a2.i ? a2.ins : 0);
      if (insert2 && inserted < a2.i)
        addInsert(insert2, sections, a2.text);
      inserted = a2.i;
      a2.forward(a2.len - left);
    } else if (a2.done && b.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB, mkSet = false) {
  let sections = [];
  let insert2 = mkSet ? [] : null;
  let a2 = new SectionIter(setA), b = new SectionIter(setB);
  for (let open = false; ; ) {
    if (a2.done && b.done) {
      return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
    } else if (a2.ins == 0) {
      addSection(sections, a2.len, 0, open);
      a2.next();
    } else if (b.len == 0 && !b.done) {
      addSection(sections, 0, b.ins, open);
      if (insert2)
        addInsert(insert2, sections, b.text);
      b.next();
    } else if (a2.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      let len = Math.min(a2.len2, b.len), sectionLen = sections.length;
      if (a2.ins == -1) {
        let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert2 && insB)
          addInsert(insert2, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a2.off ? 0 : a2.len, len, open);
        if (insert2)
          addInsert(insert2, sections, a2.textBit(len));
      } else {
        addSection(sections, a2.off ? 0 : a2.len, b.off ? 0 : b.ins, open);
        if (insert2 && !b.off)
          addInsert(insert2, sections, b.text);
      }
      open = (a2.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a2.forward2(len);
      b.forward(len);
    }
  }
}
function checkSelection(selection2, docLength) {
  for (let range of selection2.ranges)
    if (range.to > docLength)
      throw new RangeError("Selection points outside of document");
}
function sameArray(a2, b) {
  return a2 == b || a2.length == b.length && a2.every((e, i) => e === b[i]);
}
function compareArray(a2, b, compare2) {
  if (a2.length != b.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (!compare2(a2[i], b[i]))
      return false;
  return true;
}
function ensureAll(state, addrs) {
  let changed = false;
  for (let addr of addrs)
    if (ensureAddr(state, addr) & 1)
      changed = true;
  return changed;
}
function dynamicFacetSlot(addresses, facet, providers) {
  let providerAddrs = providers.map((p) => addresses[p.id]);
  let providerTypes = providers.map((p) => p.type);
  let dynamic = providerAddrs.filter((p) => !(p & 1));
  let idx = addresses[facet.id] >> 1;
  function get(state) {
    let values2 = [];
    for (let i = 0; i < providerAddrs.length; i++) {
      let value = getAddr(state, providerAddrs[i]);
      if (providerTypes[i] == 2)
        for (let val of value)
          values2.push(val);
      else
        values2.push(value);
    }
    return facet.combine(values2);
  }
  return {
    create(state) {
      for (let addr of providerAddrs)
        ensureAddr(state, addr);
      state.values[idx] = get(state);
      return 1;
    },
    update(state, tr) {
      if (!ensureAll(state, dynamic))
        return 0;
      let value = get(state);
      if (facet.compare(value, state.values[idx]))
        return 0;
      state.values[idx] = value;
      return 1;
    },
    reconfigure(state, oldState) {
      let depChanged = ensureAll(state, providerAddrs);
      let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
      if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
        state.values[idx] = oldValue;
        return 0;
      }
      let value = get(state);
      if (facet.compare(value, oldValue)) {
        state.values[idx] = oldValue;
        return 0;
      }
      state.values[idx] = value;
      return 1;
    }
  };
}
function prec(value) {
  return (ext) => new PrecExtension(ext, value);
}
function flatten(extension, compartments, newCompartments) {
  let result = [[], [], [], [], []];
  let seen = /* @__PURE__ */ new Map();
  function inner(ext, prec2) {
    let known = seen.get(ext);
    if (known != null) {
      if (known <= prec2)
        return;
      let found = result[known].indexOf(ext);
      if (found > -1)
        result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance)
        newCompartments.delete(ext.compartment);
    }
    seen.set(ext, prec2);
    if (Array.isArray(ext)) {
      for (let e of ext)
        inner(e, prec2);
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment))
        throw new RangeError(`Duplicate use of compartment in extensions`);
      let content3 = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content3);
      inner(content3, prec2);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec2].push(ext);
      if (ext.provides)
        inner(ext.provides, prec2);
    } else if (ext instanceof FacetProvider) {
      result[prec2].push(ext);
      if (ext.facet.extensions)
        inner(ext.facet.extensions, Prec_.default);
    } else {
      let content3 = ext.extension;
      if (!content3)
        throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
      inner(content3, prec2);
    }
  }
  inner(extension, Prec_.default);
  return result.reduce((a2, b) => a2.concat(b));
}
function ensureAddr(state, addr) {
  if (addr & 1)
    return 2;
  let idx = addr >> 1;
  let status = state.status[idx];
  if (status == 4)
    throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2)
    return status;
  state.status[idx] = 4;
  let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
  return state.status[idx] = 2 | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
function joinRanges(a2, b) {
  let result = [];
  for (let iA = 0, iB = 0; ; ) {
    let from3, to;
    if (iA < a2.length && (iB == b.length || b[iB] >= a2[iA])) {
      from3 = a2[iA++];
      to = a2[iA++];
    } else if (iB < b.length) {
      from3 = b[iB++];
      to = b[iB++];
    } else
      return result;
    if (!result.length || result[result.length - 1] < from3)
      result.push(from3, to);
    else if (result[result.length - 1] < to)
      result[result.length - 1] = to;
  }
}
function mergeTransaction(a2, b, sequential) {
  var _a2;
  let mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a2.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a2.changes);
    mapForB = a2.changes.mapDesc(b.changes, true);
    changes = a2.changes.compose(mapForA);
  }
  return {
    changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a2 = a2.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
    effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a2.annotations.length ? a2.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a2.scrollIntoView || b.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  let sel = spec.selection, annotations = asArray(spec.annotations);
  if (spec.userEvent)
    annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations,
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter2) {
  let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false)
    filter2 = false;
  for (let i = 1; i < specs.length; i++) {
    if (specs[i].filter === false)
      filter2 = false;
    let seq = !!specs[i].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
  }
  let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter2 ? filterTransaction(tr) : tr);
}
function filterTransaction(tr) {
  let state = tr.startState;
  let result = true;
  for (let filter2 of state.facet(changeFilter)) {
    let value = filter2(tr);
    if (value === false) {
      result = false;
      break;
    }
    if (Array.isArray(value))
      result = result === true ? value : joinRanges(result, value);
  }
  if (result !== true) {
    let changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      let filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
    }
    tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  let filters = state.facet(transactionFilter);
  for (let i = filters.length - 1; i >= 0; i--) {
    let filtered = filters[i](tr);
    if (filtered instanceof Transaction)
      tr = filtered;
    else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
      tr = filtered[0];
    else
      tr = resolveTransaction(state, asArray(filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
  for (let i = extenders.length - 1; i >= 0; i--) {
    let extension = extenders[i](tr);
    if (extension && Object.keys(extension).length)
      spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}
function hasWordChar(str) {
  if (wordChar)
    return wordChar.test(str);
  for (let i = 0; i < str.length; i++) {
    let ch2 = str[i];
    if (/\w/.test(ch2) || ch2 > "\x80" && (ch2.toUpperCase() != ch2.toLowerCase() || nonASCIISingleCaseWordChar.test(ch2)))
      return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return (char) => {
    if (!/\S/.test(char))
      return CharCategory.Space;
    if (hasWordChar(char))
      return CharCategory.Word;
    for (let i = 0; i < wordChars.length; i++)
      if (char.indexOf(wordChars[i]) > -1)
        return CharCategory.Word;
    return CharCategory.Other;
  };
}
function combineConfig(configs, defaults6, combine = {}) {
  let result = {};
  for (let config2 of configs)
    for (let key of Object.keys(config2)) {
      let value = config2[key], current = result[key];
      if (current === void 0)
        result[key] = value;
      else if (current === value || value === void 0) ;
      else if (Object.hasOwnProperty.call(combine, key))
        result[key] = combine[key](current, value);
      else
        throw new Error("Config merge conflict for field " + key);
    }
  for (let key in defaults6)
    if (result[key] === void 0)
      result[key] = defaults6[key];
  return result;
}
function cmpRange(a2, b) {
  return a2.from - b.from || a2.value.startSide - b.value.startSide;
}
function lazySort(ranges) {
  if (ranges.length > 1)
    for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
      let cur2 = ranges[i];
      if (cmpRange(prev, cur2) > 0)
        return ranges.slice().sort(cmpRange);
      prev = cur2;
    }
  return ranges;
}
function findSharedChunks(a2, b, textDiff) {
  let inA = /* @__PURE__ */ new Map();
  for (let set2 of a2)
    for (let i = 0; i < set2.chunk.length; i++)
      if (set2.chunk[i].maxPoint <= 0)
        inA.set(set2.chunk[i], set2.chunkPos[i]);
  let shared = /* @__PURE__ */ new Set();
  for (let set2 of b)
    for (let i = 0; i < set2.chunk.length; i++) {
      let known = inA.get(set2.chunk[i]);
      if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set2.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set2.chunk[i].length)))
        shared.add(set2.chunk[i]);
    }
  return shared;
}
function heapBubble(heap, index) {
  for (let cur2 = heap[index]; ; ) {
    let childIndex = (index << 1) + 1;
    if (childIndex >= heap.length)
      break;
    let child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur2.compare(child) < 0)
      break;
    heap[childIndex] = cur2;
    heap[index] = child;
    index = childIndex;
  }
}
function compare(a2, startA, b, startB, length, comparator) {
  a2.goto(startA);
  b.goto(startB);
  let endB = startB + length;
  let pos = startB, dPos = startB - startA;
  for (; ; ) {
    let dEnd = a2.to + dPos - b.to, diff2 = dEnd || a2.endSide - b.endSide;
    let end2 = diff2 < 0 ? a2.to + dPos : b.to, clipEnd = Math.min(end2, endB);
    if (a2.point || b.point) {
      if (!(a2.point && b.point && (a2.point == b.point || a2.point.eq(b.point)) && sameValues(a2.activeForPoint(a2.to), b.activeForPoint(b.to))))
        comparator.comparePoint(pos, clipEnd, a2.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a2.active, b.active))
        comparator.compareRange(pos, clipEnd, a2.active, b.active);
    }
    if (end2 > endB)
      break;
    if ((dEnd || a2.openEnd != b.openEnd) && comparator.boundChange)
      comparator.boundChange(end2);
    pos = end2;
    if (diff2 <= 0)
      a2.next();
    if (diff2 >= 0)
      b.next();
  }
}
function sameValues(a2, b) {
  if (a2.length != b.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (a2[i] != b[i] && !a2[i].eq(b[i]))
      return false;
  return true;
}
function remove(array2, index) {
  for (let i = index, e = array2.length - 1; i < e; i++)
    array2[i] = array2[i + 1];
  array2.pop();
}
function insert(array2, index, value) {
  for (let i = array2.length - 1; i >= index; i--)
    array2[i + 1] = array2[i];
  array2[index] = value;
}
function findMinIndex(value, array2) {
  let found = -1, foundPos = 1e9;
  for (let i = 0; i < array2.length; i++)
    if ((array2[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array2[i];
    }
  return found;
}
function countColumn(string3, tabSize, to = string3.length) {
  let n = 0;
  for (let i = 0; i < to && i < string3.length; ) {
    if (string3.charCodeAt(i) == 9) {
      n += tabSize - n % tabSize;
      i++;
    } else {
      n++;
      i = findClusterBreak2(string3, i);
    }
  }
  return n;
}
function findColumn(string3, col, tabSize, strict) {
  for (let i = 0, n = 0; ; ) {
    if (n >= col)
      return i;
    if (i == string3.length)
      break;
    n += string3.charCodeAt(i) == 9 ? tabSize - n % tabSize : 1;
    i = findClusterBreak2(string3, i);
  }
  return strict === true ? -1 : string3.length;
}
var Text, TextLeaf, TextNode, RawTextCursor, PartialTextCursor, LineCursor, Line, DefaultSplit, MapMode, ChangeDesc, ChangeSet, SectionIter, SelectionRange, EditorSelection, nextID, Facet, FacetProvider, initField, StateField, Prec_, Prec, PrecExtension, Compartment, CompartmentInstance, Configuration, languageData, allowMultipleSelections, lineSeparator, changeFilter, transactionFilter, transactionExtender, readOnly, Annotation, AnnotationType, StateEffectType, StateEffect, Transaction, none, CharCategory, nonASCIISingleCaseWordChar, wordChar, EditorState, RangeValue, Range2, Chunk, RangeSet, RangeSetBuilder, LayerCursor, HeapCursor, SpanCursor;
var init_dist2 = __esm({
  "../../node_modules/@codemirror/state/dist/index.js"() {
    init_src();
    Text = class _Text {
      /**
      Get the line description around the given position.
      */
      lineAt(pos) {
        if (pos < 0 || pos > this.length)
          throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
        return this.lineInner(pos, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
      line(n) {
        if (n < 1 || n > this.lines)
          throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
        return this.lineInner(n, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
      replace(from3, to, text5) {
        [from3, to] = clip(this, from3, to);
        let parts = [];
        this.decompose(
          0,
          from3,
          parts,
          2
          /* Open.To */
        );
        if (text5.length)
          text5.decompose(
            0,
            text5.length,
            parts,
            1 | 2
            /* Open.To */
          );
        this.decompose(
          to,
          this.length,
          parts,
          1
          /* Open.From */
        );
        return TextNode.from(parts, this.length - (to - from3) + text5.length);
      }
      /**
      Append another document to this one.
      */
      append(other) {
        return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
      slice(from3, to = this.length) {
        [from3, to] = clip(this, from3, to);
        let parts = [];
        this.decompose(from3, to, parts, 0);
        return TextNode.from(parts, to - from3);
      }
      /**
      Test whether this text is equal to another instance.
      */
      eq(other) {
        if (other == this)
          return true;
        if (other.length != this.length || other.lines != this.lines)
          return false;
        let start2 = this.scanIdentical(other, 1), end2 = this.length - this.scanIdentical(other, -1);
        let a2 = new RawTextCursor(this), b = new RawTextCursor(other);
        for (let skip = start2, pos = start2; ; ) {
          a2.next(skip);
          b.next(skip);
          skip = 0;
          if (a2.lineBreak != b.lineBreak || a2.done != b.done || a2.value != b.value)
            return false;
          pos += a2.value.length;
          if (a2.done || pos >= end2)
            return true;
        }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
      iter(dir = 1) {
        return new RawTextCursor(this, dir);
      }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
      iterRange(from3, to = this.length) {
        return new PartialTextCursor(this, from3, to);
      }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
      iterLines(from3, to) {
        let inner;
        if (from3 == null) {
          inner = this.iter();
        } else {
          if (to == null)
            to = this.lines + 1;
          let start2 = this.line(from3).from;
          inner = this.iterRange(start2, Math.max(start2, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
        }
        return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
      toString() {
        return this.sliceString(0);
      }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
      toJSON() {
        let lines = [];
        this.flatten(lines);
        return lines;
      }
      /**
      @internal
      */
      constructor() {
      }
      /**
      Create a `Text` instance for the given array of lines.
      */
      static of(text5) {
        if (text5.length == 0)
          throw new RangeError("A document must have at least one line");
        if (text5.length == 1 && !text5[0])
          return _Text.empty;
        return text5.length <= 32 ? new TextLeaf(text5) : TextNode.from(TextLeaf.split(text5, []));
      }
    };
    TextLeaf = class _TextLeaf extends Text {
      constructor(text5, length = textLength(text5)) {
        super();
        this.text = text5;
        this.length = length;
      }
      get lines() {
        return this.text.length;
      }
      get children() {
        return null;
      }
      lineInner(target, isLine, line, offset) {
        for (let i = 0; ; i++) {
          let string3 = this.text[i], end2 = offset + string3.length;
          if ((isLine ? line : end2) >= target)
            return new Line(offset, end2, line, string3);
          offset = end2 + 1;
          line++;
        }
      }
      decompose(from3, to, target, open) {
        let text5 = from3 <= 0 && to >= this.length ? this : new _TextLeaf(sliceText(this.text, from3, to), Math.min(to, this.length) - Math.max(0, from3));
        if (open & 1) {
          let prev = target.pop();
          let joined = appendText(text5.text, prev.text.slice(), 0, text5.length);
          if (joined.length <= 32) {
            target.push(new _TextLeaf(joined, prev.length + text5.length));
          } else {
            let mid = joined.length >> 1;
            target.push(new _TextLeaf(joined.slice(0, mid)), new _TextLeaf(joined.slice(mid)));
          }
        } else {
          target.push(text5);
        }
      }
      replace(from3, to, text5) {
        if (!(text5 instanceof _TextLeaf))
          return super.replace(from3, to, text5);
        [from3, to] = clip(this, from3, to);
        let lines = appendText(this.text, appendText(text5.text, sliceText(this.text, 0, from3)), to);
        let newLen = this.length + text5.length - (to - from3);
        if (lines.length <= 32)
          return new _TextLeaf(lines, newLen);
        return TextNode.from(_TextLeaf.split(lines, []), newLen);
      }
      sliceString(from3, to = this.length, lineSep = "\n") {
        [from3, to] = clip(this, from3, to);
        let result = "";
        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
          let line = this.text[i], end2 = pos + line.length;
          if (pos > from3 && i)
            result += lineSep;
          if (from3 < end2 && to > pos)
            result += line.slice(Math.max(0, from3 - pos), to - pos);
          pos = end2 + 1;
        }
        return result;
      }
      flatten(target) {
        for (let line of this.text)
          target.push(line);
      }
      scanIdentical() {
        return 0;
      }
      static split(text5, target) {
        let part = [], len = -1;
        for (let line of text5) {
          part.push(line);
          len += line.length + 1;
          if (part.length == 32) {
            target.push(new _TextLeaf(part, len));
            part = [];
            len = -1;
          }
        }
        if (len > -1)
          target.push(new _TextLeaf(part, len));
        return target;
      }
    };
    TextNode = class _TextNode extends Text {
      constructor(children, length) {
        super();
        this.children = children;
        this.length = length;
        this.lines = 0;
        for (let child of children)
          this.lines += child.lines;
      }
      lineInner(target, isLine, line, offset) {
        for (let i = 0; ; i++) {
          let child = this.children[i], end2 = offset + child.length, endLine = line + child.lines - 1;
          if ((isLine ? endLine : end2) >= target)
            return child.lineInner(target, isLine, line, offset);
          offset = end2 + 1;
          line = endLine + 1;
        }
      }
      decompose(from3, to, target, open) {
        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
          let child = this.children[i], end2 = pos + child.length;
          if (from3 <= end2 && to >= pos) {
            let childOpen = open & ((pos <= from3 ? 1 : 0) | (end2 >= to ? 2 : 0));
            if (pos >= from3 && end2 <= to && !childOpen)
              target.push(child);
            else
              child.decompose(from3 - pos, to - pos, target, childOpen);
          }
          pos = end2 + 1;
        }
      }
      replace(from3, to, text5) {
        [from3, to] = clip(this, from3, to);
        if (text5.lines < this.lines)
          for (let i = 0, pos = 0; i < this.children.length; i++) {
            let child = this.children[i], end2 = pos + child.length;
            if (from3 >= pos && to <= end2) {
              let updated = child.replace(from3 - pos, to - pos, text5);
              let totalLines = this.lines - child.lines + updated.lines;
              if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
                let copy = this.children.slice();
                copy[i] = updated;
                return new _TextNode(copy, this.length - (to - from3) + text5.length);
              }
              return super.replace(pos, end2, updated);
            }
            pos = end2 + 1;
          }
        return super.replace(from3, to, text5);
      }
      sliceString(from3, to = this.length, lineSep = "\n") {
        [from3, to] = clip(this, from3, to);
        let result = "";
        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
          let child = this.children[i], end2 = pos + child.length;
          if (pos > from3 && i)
            result += lineSep;
          if (from3 < end2 && to > pos)
            result += child.sliceString(from3 - pos, to - pos, lineSep);
          pos = end2 + 1;
        }
        return result;
      }
      flatten(target) {
        for (let child of this.children)
          child.flatten(target);
      }
      scanIdentical(other, dir) {
        if (!(other instanceof _TextNode))
          return 0;
        let length = 0;
        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
        for (; ; iA += dir, iB += dir) {
          if (iA == eA || iB == eB)
            return length;
          let chA = this.children[iA], chB = other.children[iB];
          if (chA != chB)
            return length + chA.scanIdentical(chB, dir);
          length += chA.length + 1;
        }
      }
      static from(children, length = children.reduce((l, ch2) => l + ch2.length + 1, -1)) {
        let lines = 0;
        for (let ch2 of children)
          lines += ch2.lines;
        if (lines < 32) {
          let flat = [];
          for (let ch2 of children)
            ch2.flatten(flat);
          return new TextLeaf(flat, length);
        }
        let chunk = Math.max(
          32,
          lines >> 5
          /* Tree.BranchShift */
        ), maxChunk = chunk << 1, minChunk = chunk >> 1;
        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
        function add3(child) {
          let last;
          if (child.lines > maxChunk && child instanceof _TextNode) {
            for (let node of child.children)
              add3(node);
          } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
            flush();
            chunked.push(child);
          } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
          } else {
            if (currentLines + child.lines > chunk)
              flush();
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk.push(child);
          }
        }
        function flush() {
          if (currentLines == 0)
            return;
          chunked.push(currentChunk.length == 1 ? currentChunk[0] : _TextNode.from(currentChunk, currentLen));
          currentLen = -1;
          currentLines = currentChunk.length = 0;
        }
        for (let child of children)
          add3(child);
        flush();
        return chunked.length == 1 ? chunked[0] : new _TextNode(chunked, length);
      }
    };
    Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
    RawTextCursor = class {
      constructor(text5, dir = 1) {
        this.dir = dir;
        this.done = false;
        this.lineBreak = false;
        this.value = "";
        this.nodes = [text5];
        this.offsets = [dir > 0 ? 1 : (text5 instanceof TextLeaf ? text5.text.length : text5.children.length) << 1];
      }
      nextInner(skip, dir) {
        this.done = this.lineBreak = false;
        for (; ; ) {
          let last = this.nodes.length - 1;
          let top3 = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
          let size = top3 instanceof TextLeaf ? top3.text.length : top3.children.length;
          if (offset == (dir > 0 ? size : 0)) {
            if (last == 0) {
              this.done = true;
              this.value = "";
              return this;
            }
            if (dir > 0)
              this.offsets[last - 1]++;
            this.nodes.pop();
            this.offsets.pop();
          } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
            this.offsets[last] += dir;
            if (skip == 0) {
              this.lineBreak = true;
              this.value = "\n";
              return this;
            }
            skip--;
          } else if (top3 instanceof TextLeaf) {
            let next2 = top3.text[offset + (dir < 0 ? -1 : 0)];
            this.offsets[last] += dir;
            if (next2.length > Math.max(0, skip)) {
              this.value = skip == 0 ? next2 : dir > 0 ? next2.slice(skip) : next2.slice(0, next2.length - skip);
              return this;
            }
            skip -= next2.length;
          } else {
            let next2 = top3.children[offset + (dir < 0 ? -1 : 0)];
            if (skip > next2.length) {
              skip -= next2.length;
              this.offsets[last] += dir;
            } else {
              if (dir < 0)
                this.offsets[last]--;
              this.nodes.push(next2);
              this.offsets.push(dir > 0 ? 1 : (next2 instanceof TextLeaf ? next2.text.length : next2.children.length) << 1);
            }
          }
        }
      }
      next(skip = 0) {
        if (skip < 0) {
          this.nextInner(-skip, -this.dir);
          skip = this.value.length;
        }
        return this.nextInner(skip, this.dir);
      }
    };
    PartialTextCursor = class {
      constructor(text5, start2, end2) {
        this.value = "";
        this.done = false;
        this.cursor = new RawTextCursor(text5, start2 > end2 ? -1 : 1);
        this.pos = start2 > end2 ? text5.length : 0;
        this.from = Math.min(start2, end2);
        this.to = Math.max(start2, end2);
      }
      nextInner(skip, dir) {
        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
          this.value = "";
          this.done = true;
          return this;
        }
        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
        if (skip > limit)
          skip = limit;
        limit -= skip;
        let { value } = this.cursor.next(skip);
        this.pos += (value.length + skip) * dir;
        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
        this.done = !this.value;
        return this;
      }
      next(skip = 0) {
        if (skip < 0)
          skip = Math.max(skip, this.from - this.pos);
        else if (skip > 0)
          skip = Math.min(skip, this.to - this.pos);
        return this.nextInner(skip, this.cursor.dir);
      }
      get lineBreak() {
        return this.cursor.lineBreak && this.value != "";
      }
    };
    LineCursor = class {
      constructor(inner) {
        this.inner = inner;
        this.afterBreak = true;
        this.value = "";
        this.done = false;
      }
      next(skip = 0) {
        let { done, lineBreak, value } = this.inner.next(skip);
        if (done && this.afterBreak) {
          this.value = "";
          this.afterBreak = false;
        } else if (done) {
          this.done = true;
          this.value = "";
        } else if (lineBreak) {
          if (this.afterBreak) {
            this.value = "";
          } else {
            this.afterBreak = true;
            this.next();
          }
        } else {
          this.value = value;
          this.afterBreak = false;
        }
        return this;
      }
      get lineBreak() {
        return false;
      }
    };
    if (typeof Symbol != "undefined") {
      Text.prototype[Symbol.iterator] = function() {
        return this.iter();
      };
      RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
        return this;
      };
    }
    Line = class {
      /**
      @internal
      */
      constructor(from3, to, number3, text5) {
        this.from = from3;
        this.to = to;
        this.number = number3;
        this.text = text5;
      }
      /**
      The length of the line (not including any line break after it).
      */
      get length() {
        return this.to - this.from;
      }
    };
    DefaultSplit = /\r\n?|\n/;
    MapMode = /* @__PURE__ */ function(MapMode2) {
      MapMode2[MapMode2["Simple"] = 0] = "Simple";
      MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
      MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
      MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
      return MapMode2;
    }(MapMode || (MapMode = {}));
    ChangeDesc = class _ChangeDesc {
      // Sections are encoded as pairs of integers. The first is the
      // length in the current document, and the second is -1 for
      // unaffected sections, and the length of the replacement content
      // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
      // 0), and a replacement two positive numbers.
      /**
      @internal
      */
      constructor(sections) {
        this.sections = sections;
      }
      /**
      The length of the document before the change.
      */
      get length() {
        let result = 0;
        for (let i = 0; i < this.sections.length; i += 2)
          result += this.sections[i];
        return result;
      }
      /**
      The length of the document after the change.
      */
      get newLength() {
        let result = 0;
        for (let i = 0; i < this.sections.length; i += 2) {
          let ins = this.sections[i + 1];
          result += ins < 0 ? this.sections[i] : ins;
        }
        return result;
      }
      /**
      False when there are actual changes in this set.
      */
      get empty() {
        return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
      }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
      iterGaps(f) {
        for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
          let len = this.sections[i++], ins = this.sections[i++];
          if (ins < 0) {
            f(posA, posB, len);
            posB += len;
          } else {
            posB += ins;
          }
          posA += len;
        }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
      iterChangedRanges(f, individual = false) {
        iterChanges(this, f, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
      get invertedDesc() {
        let sections = [];
        for (let i = 0; i < this.sections.length; ) {
          let len = this.sections[i++], ins = this.sections[i++];
          if (ins < 0)
            sections.push(len, ins);
          else
            sections.push(ins, len);
        }
        return new _ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
      composeDesc(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other);
      }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `this` happened before the ones in `other`.
      */
      mapDesc(other, before = false) {
        return other.empty ? this : mapSet(this, other, before);
      }
      mapPos(pos, assoc = -1, mode = MapMode.Simple) {
        let posA = 0, posB = 0;
        for (let i = 0; i < this.sections.length; ) {
          let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
          if (ins < 0) {
            if (endA > pos)
              return posB + (pos - posA);
            posB += len;
          } else {
            if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
              return null;
            if (endA > pos || endA == pos && assoc < 0 && !len)
              return pos == posA || assoc < 0 ? posB : posB + ins;
            posB += ins;
          }
          posA = endA;
        }
        if (pos > posA)
          throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
        return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
      touchesRange(from3, to = from3) {
        for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
          let len = this.sections[i++], ins = this.sections[i++], end2 = pos + len;
          if (ins >= 0 && pos <= to && end2 >= from3)
            return pos < from3 && end2 > to ? "cover" : true;
          pos = end2;
        }
        return false;
      }
      /**
      @internal
      */
      toString() {
        let result = "";
        for (let i = 0; i < this.sections.length; ) {
          let len = this.sections[i++], ins = this.sections[i++];
          result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
        }
        return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
      toJSON() {
        return this.sections;
      }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
      static fromJSON(json3) {
        if (!Array.isArray(json3) || json3.length % 2 || json3.some((a2) => typeof a2 != "number"))
          throw new RangeError("Invalid JSON representation of ChangeDesc");
        return new _ChangeDesc(json3);
      }
      /**
      @internal
      */
      static create(sections) {
        return new _ChangeDesc(sections);
      }
    };
    ChangeSet = class _ChangeSet extends ChangeDesc {
      constructor(sections, inserted) {
        super(sections);
        this.inserted = inserted;
      }
      /**
      Apply the changes to a document, returning the modified
      document.
      */
      apply(doc2) {
        if (this.length != doc2.length)
          throw new RangeError("Applying change set to a document with the wrong length");
        iterChanges(this, (fromA, toA, fromB, _toB, text5) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text5), false);
        return doc2;
      }
      mapDesc(other, before = false) {
        return mapSet(this, other, before, true);
      }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
      invert(doc2) {
        let sections = this.sections.slice(), inserted = [];
        for (let i = 0, pos = 0; i < sections.length; i += 2) {
          let len = sections[i], ins = sections[i + 1];
          if (ins >= 0) {
            sections[i] = ins;
            sections[i + 1] = len;
            let index = i >> 1;
            while (inserted.length < index)
              inserted.push(Text.empty);
            inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
          }
          pos += len;
        }
        return new _ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
      compose(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other, true);
      }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
      map(other, before = false) {
        return other.empty ? this : mapSet(this, other, before, true);
      }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
      iterChanges(f, individual = false) {
        iterChanges(this, f, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
      get desc() {
        return ChangeDesc.create(this.sections);
      }
      /**
      @internal
      */
      filter(ranges) {
        let resultSections = [], resultInserted = [], filteredSections = [];
        let iter = new SectionIter(this);
        done: for (let i = 0, pos = 0; ; ) {
          let next2 = i == ranges.length ? 1e9 : ranges[i++];
          while (pos < next2 || pos == next2 && iter.len == 0) {
            if (iter.done)
              break done;
            let len = Math.min(iter.len, next2 - pos);
            addSection(filteredSections, len, -1);
            let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
            addSection(resultSections, len, ins);
            if (ins > 0)
              addInsert(resultInserted, resultSections, iter.text);
            iter.forward(len);
            pos += len;
          }
          let end2 = ranges[i++];
          while (pos < end2) {
            if (iter.done)
              break done;
            let len = Math.min(iter.len, end2 - pos);
            addSection(resultSections, len, -1);
            addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
            iter.forward(len);
            pos += len;
          }
        }
        return {
          changes: new _ChangeSet(resultSections, resultInserted),
          filtered: ChangeDesc.create(filteredSections)
        };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
      toJSON() {
        let parts = [];
        for (let i = 0; i < this.sections.length; i += 2) {
          let len = this.sections[i], ins = this.sections[i + 1];
          if (ins < 0)
            parts.push(len);
          else if (ins == 0)
            parts.push([len]);
          else
            parts.push([len].concat(this.inserted[i >> 1].toJSON()));
        }
        return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
      static of(changes, length, lineSep) {
        let sections = [], inserted = [], pos = 0;
        let total = null;
        function flush(force = false) {
          if (!force && !sections.length)
            return;
          if (pos < length)
            addSection(sections, length - pos, -1);
          let set2 = new _ChangeSet(sections, inserted);
          total = total ? total.compose(set2.map(total)) : set2;
          sections = [];
          inserted = [];
          pos = 0;
        }
        function process2(spec) {
          if (Array.isArray(spec)) {
            for (let sub of spec)
              process2(sub);
          } else if (spec instanceof _ChangeSet) {
            if (spec.length != length)
              throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
            flush();
            total = total ? total.compose(spec.map(total)) : spec;
          } else {
            let { from: from3, to = from3, insert: insert2 } = spec;
            if (from3 > to || from3 < 0 || to > length)
              throw new RangeError(`Invalid change range ${from3} to ${to} (in doc of length ${length})`);
            let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
            let insLen = insText.length;
            if (from3 == to && insLen == 0)
              return;
            if (from3 < pos)
              flush();
            if (from3 > pos)
              addSection(sections, from3 - pos, -1);
            addSection(sections, to - from3, insLen);
            addInsert(inserted, sections, insText);
            pos = to;
          }
        }
        process2(changes);
        flush(!total);
        return total;
      }
      /**
      Create an empty changeset of the given length.
      */
      static empty(length) {
        return new _ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
      static fromJSON(json3) {
        if (!Array.isArray(json3))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        let sections = [], inserted = [];
        for (let i = 0; i < json3.length; i++) {
          let part = json3[i];
          if (typeof part == "number") {
            sections.push(part, -1);
          } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
            throw new RangeError("Invalid JSON representation of ChangeSet");
          } else if (part.length == 1) {
            sections.push(part[0], 0);
          } else {
            while (inserted.length < i)
              inserted.push(Text.empty);
            inserted[i] = Text.of(part.slice(1));
            sections.push(part[0], inserted[i].length);
          }
        }
        return new _ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
      static createSet(sections, inserted) {
        return new _ChangeSet(sections, inserted);
      }
    };
    SectionIter = class {
      constructor(set2) {
        this.set = set2;
        this.i = 0;
        this.next();
      }
      next() {
        let { sections } = this.set;
        if (this.i < sections.length) {
          this.len = sections[this.i++];
          this.ins = sections[this.i++];
        } else {
          this.len = 0;
          this.ins = -2;
        }
        this.off = 0;
      }
      get done() {
        return this.ins == -2;
      }
      get len2() {
        return this.ins < 0 ? this.len : this.ins;
      }
      get text() {
        let { inserted } = this.set, index = this.i - 2 >> 1;
        return index >= inserted.length ? Text.empty : inserted[index];
      }
      textBit(len) {
        let { inserted } = this.set, index = this.i - 2 >> 1;
        return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
      }
      forward(len) {
        if (len == this.len)
          this.next();
        else {
          this.len -= len;
          this.off += len;
        }
      }
      forward2(len) {
        if (this.ins == -1)
          this.forward(len);
        else if (len == this.ins)
          this.next();
        else {
          this.ins -= len;
          this.off += len;
        }
      }
    };
    SelectionRange = class _SelectionRange {
      constructor(from3, to, flags) {
        this.from = from3;
        this.to = to;
        this.flags = flags;
      }
      /**
      The anchor of the range—the side that doesn't move when you
      extend it.
      */
      get anchor() {
        return this.flags & 32 ? this.to : this.from;
      }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
      get head() {
        return this.flags & 32 ? this.from : this.to;
      }
      /**
      True when `anchor` and `head` are at the same position.
      */
      get empty() {
        return this.from == this.to;
      }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
      get assoc() {
        return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
      }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
      get bidiLevel() {
        let level = this.flags & 7;
        return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
      get goalColumn() {
        let value = this.flags >> 6;
        return value == 16777215 ? void 0 : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
      map(change, assoc = -1) {
        let from3, to;
        if (this.empty) {
          from3 = to = change.mapPos(this.from, assoc);
        } else {
          from3 = change.mapPos(this.from, 1);
          to = change.mapPos(this.to, -1);
        }
        return from3 == this.from && to == this.to ? this : new _SelectionRange(from3, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
      extend(from3, to = from3) {
        if (from3 <= this.anchor && to >= this.anchor)
          return EditorSelection.range(from3, to);
        let head = Math.abs(from3 - this.anchor) > Math.abs(to - this.anchor) ? from3 : to;
        return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
      eq(other, includeAssoc = false) {
        return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
      toJSON() {
        return { anchor: this.anchor, head: this.head };
      }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
      static fromJSON(json3) {
        if (!json3 || typeof json3.anchor != "number" || typeof json3.head != "number")
          throw new RangeError("Invalid JSON representation for SelectionRange");
        return EditorSelection.range(json3.anchor, json3.head);
      }
      /**
      @internal
      */
      static create(from3, to, flags) {
        return new _SelectionRange(from3, to, flags);
      }
    };
    EditorSelection = class _EditorSelection {
      constructor(ranges, mainIndex) {
        this.ranges = ranges;
        this.mainIndex = mainIndex;
      }
      /**
      Map a selection through a change. Used to adjust the selection
      position for changes.
      */
      map(change, assoc = -1) {
        if (change.empty)
          return this;
        return _EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
      eq(other, includeAssoc = false) {
        if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
          return false;
        for (let i = 0; i < this.ranges.length; i++)
          if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
            return false;
        return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
      get main() {
        return this.ranges[this.mainIndex];
      }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
      asSingle() {
        return this.ranges.length == 1 ? this : new _EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
      addRange(range, main = true) {
        return _EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
      replaceRange(range, which = this.mainIndex) {
        let ranges = this.ranges.slice();
        ranges[which] = range;
        return _EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
      toJSON() {
        return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
      }
      /**
      Create a selection from a JSON representation.
      */
      static fromJSON(json3) {
        if (!json3 || !Array.isArray(json3.ranges) || typeof json3.main != "number" || json3.main >= json3.ranges.length)
          throw new RangeError("Invalid JSON representation for EditorSelection");
        return new _EditorSelection(json3.ranges.map((r2) => SelectionRange.fromJSON(r2)), json3.main);
      }
      /**
      Create a selection holding a single range.
      */
      static single(anchor, head = anchor) {
        return new _EditorSelection([_EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
      static create(ranges, mainIndex = 0) {
        if (ranges.length == 0)
          throw new RangeError("A selection needs at least one range");
        for (let pos = 0, i = 0; i < ranges.length; i++) {
          let range = ranges[i];
          if (range.empty ? range.from <= pos : range.from < pos)
            return _EditorSelection.normalized(ranges.slice(), mainIndex);
          pos = range.to;
        }
        return new _EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
      static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
      }
      /**
      Create a selection range.
      */
      static range(anchor, head, goalColumn, bidiLevel) {
        let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
        return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
      }
      /**
      @internal
      */
      static normalized(ranges, mainIndex = 0) {
        let main = ranges[mainIndex];
        ranges.sort((a2, b) => a2.from - b.from);
        mainIndex = ranges.indexOf(main);
        for (let i = 1; i < ranges.length; i++) {
          let range = ranges[i], prev = ranges[i - 1];
          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            let from3 = prev.from, to = Math.max(range.to, prev.to);
            if (i <= mainIndex)
              mainIndex--;
            ranges.splice(--i, 2, range.anchor > range.head ? _EditorSelection.range(to, from3) : _EditorSelection.range(from3, to));
          }
        }
        return new _EditorSelection(ranges, mainIndex);
      }
    };
    nextID = 0;
    Facet = class _Facet {
      constructor(combine, compareInput, compare2, isStatic, enables) {
        this.combine = combine;
        this.compareInput = compareInput;
        this.compare = compare2;
        this.isStatic = isStatic;
        this.id = nextID++;
        this.default = combine([]);
        this.extensions = typeof enables == "function" ? enables(this) : enables;
      }
      /**
      Returns a facet reader for this facet, which can be used to
      [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
      */
      get reader() {
        return this;
      }
      /**
      Define a new facet.
      */
      static define(config2 = {}) {
        return new _Facet(config2.combine || ((a2) => a2), config2.compareInput || ((a2, b) => a2 === b), config2.compare || (!config2.combine ? sameArray : (a2, b) => a2 === b), !!config2.static, config2.enables);
      }
      /**
      Returns an extension that adds the given value to this facet.
      */
      of(value) {
        return new FacetProvider([], this, 0, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
      compute(deps, get) {
        if (this.isStatic)
          throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 1, get);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
      computeN(deps, get) {
        if (this.isStatic)
          throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 2, get);
      }
      from(field, get) {
        if (!get)
          get = (x) => x;
        return this.compute([field], (state) => get(state.field(field)));
      }
    };
    FacetProvider = class {
      constructor(dependencies, facet, type7, value) {
        this.dependencies = dependencies;
        this.facet = facet;
        this.type = type7;
        this.value = value;
        this.id = nextID++;
      }
      dynamicSlot(addresses) {
        var _a2;
        let getter = this.value;
        let compare2 = this.facet.compareInput;
        let id3 = this.id, idx = addresses[id3] >> 1, multi = this.type == 2;
        let depDoc = false, depSel = false, depAddrs = [];
        for (let dep of this.dependencies) {
          if (dep == "doc")
            depDoc = true;
          else if (dep == "selection")
            depSel = true;
          else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
            depAddrs.push(addresses[dep.id]);
        }
        return {
          create(state) {
            state.values[idx] = getter(state);
            return 1;
          },
          update(state, tr) {
            if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
              let newVal = getter(state);
              if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
                state.values[idx] = newVal;
                return 1;
              }
            }
            return 0;
          },
          reconfigure: (state, oldState) => {
            let newVal, oldAddr = oldState.config.address[id3];
            if (oldAddr != null) {
              let oldVal = getAddr(oldState, oldAddr);
              if (this.dependencies.every((dep) => {
                return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
              }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
                state.values[idx] = oldVal;
                return 0;
              }
            } else {
              newVal = getter(state);
            }
            state.values[idx] = newVal;
            return 1;
          }
        };
      }
    };
    initField = /* @__PURE__ */ Facet.define({ static: true });
    StateField = class _StateField {
      constructor(id3, createF, updateF, compareF, spec) {
        this.id = id3;
        this.createF = createF;
        this.updateF = updateF;
        this.compareF = compareF;
        this.spec = spec;
        this.provides = void 0;
      }
      /**
      Define a state field.
      */
      static define(config2) {
        let field = new _StateField(nextID++, config2.create, config2.update, config2.compare || ((a2, b) => a2 === b), config2);
        if (config2.provide)
          field.provides = config2.provide(field);
        return field;
      }
      create(state) {
        let init = state.facet(initField).find((i) => i.field == this);
        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
      slot(addresses) {
        let idx = addresses[this.id] >> 1;
        return {
          create: (state) => {
            state.values[idx] = this.create(state);
            return 1;
          },
          update: (state, tr) => {
            let oldVal = state.values[idx];
            let value = this.updateF(oldVal, tr);
            if (this.compareF(oldVal, value))
              return 0;
            state.values[idx] = value;
            return 1;
          },
          reconfigure: (state, oldState) => {
            let init = state.facet(initField), oldInit = oldState.facet(initField), reInit;
            if ((reInit = init.find((i) => i.field == this)) && reInit != oldInit.find((i) => i.field == this)) {
              state.values[idx] = reInit.create(state);
              return 1;
            }
            if (oldState.config.address[this.id] != null) {
              state.values[idx] = oldState.field(this);
              return 0;
            }
            state.values[idx] = this.create(state);
            return 1;
          }
        };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
      init(create) {
        return [this, initField.of({ field: this, create })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
      get extension() {
        return this;
      }
    };
    Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    Prec = {
      /**
      The highest precedence level, for extensions that should end up
      near the start of the precedence ordering.
      */
      highest: /* @__PURE__ */ prec(Prec_.highest),
      /**
      A higher-than-default precedence, for extensions that should
      come before those with default precedence.
      */
      high: /* @__PURE__ */ prec(Prec_.high),
      /**
      The default precedence, which is also used for extensions
      without an explicit precedence.
      */
      default: /* @__PURE__ */ prec(Prec_.default),
      /**
      A lower-than-default precedence.
      */
      low: /* @__PURE__ */ prec(Prec_.low),
      /**
      The lowest precedence level. Meant for things that should end up
      near the end of the extension order.
      */
      lowest: /* @__PURE__ */ prec(Prec_.lowest)
    };
    PrecExtension = class {
      constructor(inner, prec2) {
        this.inner = inner;
        this.prec = prec2;
      }
    };
    Compartment = class _Compartment {
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      of(ext) {
        return new CompartmentInstance(this, ext);
      }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
      reconfigure(content3) {
        return _Compartment.reconfigure.of({ compartment: this, extension: content3 });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
      get(state) {
        return state.config.compartments.get(this);
      }
    };
    CompartmentInstance = class {
      constructor(compartment, inner) {
        this.compartment = compartment;
        this.inner = inner;
      }
    };
    Configuration = class _Configuration {
      constructor(base5, compartments, dynamicSlots, address, staticValues, facets) {
        this.base = base5;
        this.compartments = compartments;
        this.dynamicSlots = dynamicSlots;
        this.address = address;
        this.staticValues = staticValues;
        this.facets = facets;
        this.statusTemplate = [];
        while (this.statusTemplate.length < dynamicSlots.length)
          this.statusTemplate.push(
            0
            /* SlotStatus.Unresolved */
          );
      }
      staticFacet(facet) {
        let addr = this.address[facet.id];
        return addr == null ? facet.default : this.staticValues[addr >> 1];
      }
      static resolve(base5, compartments, oldState) {
        let fields = [];
        let facets = /* @__PURE__ */ Object.create(null);
        let newCompartments = /* @__PURE__ */ new Map();
        for (let ext of flatten(base5, compartments, newCompartments)) {
          if (ext instanceof StateField)
            fields.push(ext);
          else
            (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
        }
        let address = /* @__PURE__ */ Object.create(null);
        let staticValues = [];
        let dynamicSlots = [];
        for (let field of fields) {
          address[field.id] = dynamicSlots.length << 1;
          dynamicSlots.push((a2) => field.slot(a2));
        }
        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
        for (let id3 in facets) {
          let providers = facets[id3], facet = providers[0].facet;
          let oldProviders = oldFacets && oldFacets[id3] || [];
          if (providers.every(
            (p) => p.type == 0
            /* Provider.Static */
          )) {
            address[facet.id] = staticValues.length << 1 | 1;
            if (sameArray(oldProviders, providers)) {
              staticValues.push(oldState.facet(facet));
            } else {
              let value = facet.combine(providers.map((p) => p.value));
              staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
            }
          } else {
            for (let p of providers) {
              if (p.type == 0) {
                address[p.id] = staticValues.length << 1 | 1;
                staticValues.push(p.value);
              } else {
                address[p.id] = dynamicSlots.length << 1;
                dynamicSlots.push((a2) => p.dynamicSlot(a2));
              }
            }
            address[facet.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet, providers));
          }
        }
        let dynamic = dynamicSlots.map((f) => f(address));
        return new _Configuration(base5, newCompartments, dynamic, address, staticValues, facets);
      }
    };
    languageData = /* @__PURE__ */ Facet.define();
    allowMultipleSelections = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.some((v) => v),
      static: true
    });
    lineSeparator = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.length ? values2[0] : void 0,
      static: true
    });
    changeFilter = /* @__PURE__ */ Facet.define();
    transactionFilter = /* @__PURE__ */ Facet.define();
    transactionExtender = /* @__PURE__ */ Facet.define();
    readOnly = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.length ? values2[0] : false
    });
    Annotation = class {
      /**
      @internal
      */
      constructor(type7, value) {
        this.type = type7;
        this.value = value;
      }
      /**
      Define a new type of annotation.
      */
      static define() {
        return new AnnotationType();
      }
    };
    AnnotationType = class {
      /**
      Create an instance of this annotation.
      */
      of(value) {
        return new Annotation(this, value);
      }
    };
    StateEffectType = class {
      /**
      @internal
      */
      constructor(map) {
        this.map = map;
      }
      /**
      Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
      type.
      */
      of(value) {
        return new StateEffect(this, value);
      }
    };
    StateEffect = class _StateEffect {
      /**
      @internal
      */
      constructor(type7, value) {
        this.type = type7;
        this.value = value;
      }
      /**
      Map this effect through a position mapping. Will return
      `undefined` when that ends up deleting the effect.
      */
      map(mapping) {
        let mapped = this.type.map(this.value, mapping);
        return mapped === void 0 ? void 0 : mapped == this.value ? this : new _StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
      is(type7) {
        return this.type == type7;
      }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
      static define(spec = {}) {
        return new StateEffectType(spec.map || ((v) => v));
      }
      /**
      Map an array of effects through a change set.
      */
      static mapEffects(effects, mapping) {
        if (!effects.length)
          return effects;
        let result = [];
        for (let effect of effects) {
          let mapped = effect.map(mapping);
          if (mapped)
            result.push(mapped);
        }
        return result;
      }
    };
    StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
    StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
    Transaction = class _Transaction {
      constructor(startState2, changes, selection2, effects, annotations, scrollIntoView3) {
        this.startState = startState2;
        this.changes = changes;
        this.selection = selection2;
        this.effects = effects;
        this.annotations = annotations;
        this.scrollIntoView = scrollIntoView3;
        this._doc = null;
        this._state = null;
        if (selection2)
          checkSelection(selection2, changes.newLength);
        if (!annotations.some((a2) => a2.type == _Transaction.time))
          this.annotations = annotations.concat(_Transaction.time.of(Date.now()));
      }
      /**
      @internal
      */
      static create(startState2, changes, selection2, effects, annotations, scrollIntoView3) {
        return new _Transaction(startState2, changes, selection2, effects, annotations, scrollIntoView3);
      }
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      get newDoc() {
        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
      get newSelection() {
        return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
      get state() {
        if (!this._state)
          this.startState.applyTransaction(this);
        return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
      annotation(type7) {
        for (let ann of this.annotations)
          if (ann.type == type7)
            return ann.value;
        return void 0;
      }
      /**
      Indicates whether the transaction changed the document.
      */
      get docChanged() {
        return !this.changes.empty;
      }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
      get reconfigured() {
        return this.startState.config != this.state.config;
      }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
      isUserEvent(event) {
        let e = this.annotation(_Transaction.userEvent);
        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
      }
    };
    Transaction.time = /* @__PURE__ */ Annotation.define();
    Transaction.userEvent = /* @__PURE__ */ Annotation.define();
    Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
    Transaction.remote = /* @__PURE__ */ Annotation.define();
    none = [];
    CharCategory = /* @__PURE__ */ function(CharCategory2) {
      CharCategory2[CharCategory2["Word"] = 0] = "Word";
      CharCategory2[CharCategory2["Space"] = 1] = "Space";
      CharCategory2[CharCategory2["Other"] = 2] = "Other";
      return CharCategory2;
    }(CharCategory || (CharCategory = {}));
    nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    try {
      wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    } catch (_) {
    }
    EditorState = class _EditorState {
      constructor(config2, doc2, selection2, values2, computeSlot, tr) {
        this.config = config2;
        this.doc = doc2;
        this.selection = selection2;
        this.values = values2;
        this.status = config2.statusTemplate.slice();
        this.computeSlot = computeSlot;
        if (tr)
          tr._state = this;
        for (let i = 0; i < this.config.dynamicSlots.length; i++)
          ensureAddr(this, i << 1);
        this.computeSlot = null;
      }
      field(field, require2 = true) {
        let addr = this.config.address[field.id];
        if (addr == null) {
          if (require2)
            throw new RangeError("Field is not present in this state");
          return void 0;
        }
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
      update(...specs) {
        return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
      applyTransaction(tr) {
        let conf = this.config, { base: base5, compartments } = conf;
        for (let effect of tr.effects) {
          if (effect.is(Compartment.reconfigure)) {
            if (conf) {
              compartments = /* @__PURE__ */ new Map();
              conf.compartments.forEach((val, key) => compartments.set(key, val));
              conf = null;
            }
            compartments.set(effect.value.compartment, effect.value.extension);
          } else if (effect.is(StateEffect.reconfigure)) {
            conf = null;
            base5 = effect.value;
          } else if (effect.is(StateEffect.appendConfig)) {
            conf = null;
            base5 = asArray(base5).concat(effect.value);
          }
        }
        let startValues;
        if (!conf) {
          conf = Configuration.resolve(base5, compartments, this);
          let intermediateState = new _EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
          startValues = intermediateState.values;
        } else {
          startValues = tr.startState.values.slice();
        }
        let selection2 = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
        new _EditorState(conf, tr.newDoc, selection2, startValues, (state, slot) => slot.update(state, tr), tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
      replaceSelection(text5) {
        if (typeof text5 == "string")
          text5 = this.toText(text5);
        return this.changeByRange((range) => ({
          changes: { from: range.from, to: range.to, insert: text5 },
          range: EditorSelection.cursor(range.from + text5.length)
        }));
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
      changeByRange(f) {
        let sel = this.selection;
        let result1 = f(sel.ranges[0]);
        let changes = this.changes(result1.changes), ranges = [result1.range];
        let effects = asArray(result1.effects);
        for (let i = 1; i < sel.ranges.length; i++) {
          let result = f(sel.ranges[i]);
          let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
          for (let j = 0; j < i; j++)
            ranges[j] = ranges[j].map(newMapped);
          let mapBy = changes.mapDesc(newChanges, true);
          ranges.push(result.range.map(mapBy));
          changes = changes.compose(newMapped);
          effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
        }
        return {
          changes,
          selection: EditorSelection.create(ranges, sel.mainIndex),
          effects
        };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
      changes(spec = []) {
        if (spec instanceof ChangeSet)
          return spec;
        return ChangeSet.of(spec, this.doc.length, this.facet(_EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
      toText(string3) {
        return Text.of(string3.split(this.facet(_EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
      sliceDoc(from3 = 0, to = this.doc.length) {
        return this.doc.sliceString(from3, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
      facet(facet) {
        let addr = this.config.address[facet.id];
        if (addr == null)
          return facet.default;
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
      toJSON(fields) {
        let result = {
          doc: this.sliceDoc(),
          selection: this.selection.toJSON()
        };
        if (fields)
          for (let prop in fields) {
            let value = fields[prop];
            if (value instanceof StateField && this.config.address[value.id] != null)
              result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
          }
        return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
      static fromJSON(json3, config2 = {}, fields) {
        if (!json3 || typeof json3.doc != "string")
          throw new RangeError("Invalid JSON representation for EditorState");
        let fieldInit = [];
        if (fields)
          for (let prop in fields) {
            if (Object.prototype.hasOwnProperty.call(json3, prop)) {
              let field = fields[prop], value = json3[prop];
              fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
            }
          }
        return _EditorState.create({
          doc: json3.doc,
          selection: EditorSelection.fromJSON(json3.selection),
          extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
        });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
      static create(config2 = {}) {
        let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
        let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration.staticFacet(_EditorState.lineSeparator) || DefaultSplit));
        let selection2 = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
        checkSelection(selection2, doc2.length);
        if (!configuration.staticFacet(allowMultipleSelections))
          selection2 = selection2.asSingle();
        return new _EditorState(configuration, doc2, selection2, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
      }
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      get tabSize() {
        return this.facet(_EditorState.tabSize);
      }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
      get lineBreak() {
        return this.facet(_EditorState.lineSeparator) || "\n";
      }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
      get readOnly() {
        return this.facet(readOnly);
      }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
      phrase(phrase2, ...insert2) {
        for (let map of this.facet(_EditorState.phrases))
          if (Object.prototype.hasOwnProperty.call(map, phrase2)) {
            phrase2 = map[phrase2];
            break;
          }
        if (insert2.length)
          phrase2 = phrase2.replace(/\$(\$|\d*)/g, (m, i) => {
            if (i == "$")
              return "$";
            let n = +(i || 1);
            return !n || n > insert2.length ? m : insert2[n - 1];
          });
        return phrase2;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
      languageDataAt(name2, pos, side = -1) {
        let values2 = [];
        for (let provider of this.facet(languageData)) {
          for (let result of provider(this, pos, side)) {
            if (Object.prototype.hasOwnProperty.call(result, name2))
              values2.push(result[name2]);
          }
        }
        return values2;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
      charCategorizer(at2) {
        return makeCategorizer(this.languageDataAt("wordChars", at2).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
      wordAt(pos) {
        let { text: text5, from: from3, length } = this.doc.lineAt(pos);
        let cat = this.charCategorizer(pos);
        let start2 = pos - from3, end2 = pos - from3;
        while (start2 > 0) {
          let prev = findClusterBreak2(text5, start2, false);
          if (cat(text5.slice(prev, start2)) != CharCategory.Word)
            break;
          start2 = prev;
        }
        while (end2 < length) {
          let next2 = findClusterBreak2(text5, end2);
          if (cat(text5.slice(end2, next2)) != CharCategory.Word)
            break;
          end2 = next2;
        }
        return start2 == end2 ? null : EditorSelection.range(start2 + from3, end2 + from3);
      }
    };
    EditorState.allowMultipleSelections = allowMultipleSelections;
    EditorState.tabSize = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.length ? values2[0] : 4
    });
    EditorState.lineSeparator = lineSeparator;
    EditorState.readOnly = readOnly;
    EditorState.phrases = /* @__PURE__ */ Facet.define({
      compare(a2, b) {
        let kA = Object.keys(a2), kB = Object.keys(b);
        return kA.length == kB.length && kA.every((k) => a2[k] == b[k]);
      }
    });
    EditorState.languageData = languageData;
    EditorState.changeFilter = changeFilter;
    EditorState.transactionFilter = transactionFilter;
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
    RangeValue = class {
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      eq(other) {
        return this == other;
      }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
      range(from3, to = from3) {
        return Range2.create(from3, to, this);
      }
    };
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    Range2 = class _Range {
      constructor(from3, to, value) {
        this.from = from3;
        this.to = to;
        this.value = value;
      }
      /**
      @internal
      */
      static create(from3, to, value) {
        return new _Range(from3, to, value);
      }
    };
    Chunk = class _Chunk {
      constructor(from3, to, value, maxPoint) {
        this.from = from3;
        this.to = to;
        this.value = value;
        this.maxPoint = maxPoint;
      }
      get length() {
        return this.to[this.to.length - 1];
      }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
      findIndex(pos, side, end2, startAt = 0) {
        let arr = end2 ? this.to : this.from;
        for (let lo = startAt, hi = arr.length; ; ) {
          if (lo == hi)
            return lo;
          let mid = lo + hi >> 1;
          let diff2 = arr[mid] - pos || (end2 ? this.value[mid].endSide : this.value[mid].startSide) - side;
          if (mid == lo)
            return diff2 >= 0 ? lo : hi;
          if (diff2 >= 0)
            hi = mid;
          else
            lo = mid + 1;
        }
      }
      between(offset, from3, to, f) {
        for (let i = this.findIndex(from3, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
          if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
            return false;
      }
      map(offset, changes) {
        let value = [], from3 = [], to = [], newPos = -1, maxPoint = -1;
        for (let i = 0; i < this.value.length; i++) {
          let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
          if (curFrom == curTo) {
            let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
            if (mapped == null)
              continue;
            newFrom = newTo = mapped;
            if (val.startSide != val.endSide) {
              newTo = changes.mapPos(curFrom, val.endSide);
              if (newTo < newFrom)
                continue;
            }
          } else {
            newFrom = changes.mapPos(curFrom, val.startSide);
            newTo = changes.mapPos(curTo, val.endSide);
            if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
              continue;
          }
          if ((newTo - newFrom || val.endSide - val.startSide) < 0)
            continue;
          if (newPos < 0)
            newPos = newFrom;
          if (val.point)
            maxPoint = Math.max(maxPoint, newTo - newFrom);
          value.push(val);
          from3.push(newFrom - newPos);
          to.push(newTo - newPos);
        }
        return { mapped: value.length ? new _Chunk(from3, to, value, maxPoint) : null, pos: newPos };
      }
    };
    RangeSet = class _RangeSet {
      constructor(chunkPos, chunk, nextLayer, maxPoint) {
        this.chunkPos = chunkPos;
        this.chunk = chunk;
        this.nextLayer = nextLayer;
        this.maxPoint = maxPoint;
      }
      /**
      @internal
      */
      static create(chunkPos, chunk, nextLayer, maxPoint) {
        return new _RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
      /**
      @internal
      */
      get length() {
        let last = this.chunk.length - 1;
        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
      get size() {
        if (this.isEmpty)
          return 0;
        let size = this.nextLayer.size;
        for (let chunk of this.chunk)
          size += chunk.value.length;
        return size;
      }
      /**
      @internal
      */
      chunkEnd(index) {
        return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
      update(updateSpec) {
        let { add: add3 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
        let filter2 = updateSpec.filter;
        if (add3.length == 0 && !filter2)
          return this;
        if (sort)
          add3 = add3.slice().sort(cmpRange);
        if (this.isEmpty)
          return add3.length ? _RangeSet.of(add3) : this;
        let cur2 = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
        let builder = new RangeSetBuilder();
        while (cur2.value || i < add3.length) {
          if (i < add3.length && (cur2.from - add3[i].from || cur2.startSide - add3[i].value.startSide) >= 0) {
            let range = add3[i++];
            if (!builder.addInner(range.from, range.to, range.value))
              spill.push(range);
          } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i == add3.length || this.chunkEnd(cur2.chunkIndex) < add3[i].from) && (!filter2 || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
            cur2.nextChunk();
          } else {
            if (!filter2 || filterFrom > cur2.to || filterTo < cur2.from || filter2(cur2.from, cur2.to, cur2.value)) {
              if (!builder.addInner(cur2.from, cur2.to, cur2.value))
                spill.push(Range2.create(cur2.from, cur2.to, cur2.value));
            }
            cur2.next();
          }
        }
        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? _RangeSet.empty : this.nextLayer.update({ add: spill, filter: filter2, filterFrom, filterTo }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
      map(changes) {
        if (changes.empty || this.isEmpty)
          return this;
        let chunks = [], chunkPos = [], maxPoint = -1;
        for (let i = 0; i < this.chunk.length; i++) {
          let start2 = this.chunkPos[i], chunk = this.chunk[i];
          let touch = changes.touchesRange(start2, start2 + chunk.length);
          if (touch === false) {
            maxPoint = Math.max(maxPoint, chunk.maxPoint);
            chunks.push(chunk);
            chunkPos.push(changes.mapPos(start2));
          } else if (touch === true) {
            let { mapped, pos } = chunk.map(start2, changes);
            if (mapped) {
              maxPoint = Math.max(maxPoint, mapped.maxPoint);
              chunks.push(mapped);
              chunkPos.push(pos);
            }
          }
        }
        let next2 = this.nextLayer.map(changes);
        return chunks.length == 0 ? next2 : new _RangeSet(chunkPos, chunks, next2 || _RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
      between(from3, to, f) {
        if (this.isEmpty)
          return;
        for (let i = 0; i < this.chunk.length; i++) {
          let start2 = this.chunkPos[i], chunk = this.chunk[i];
          if (to >= start2 && from3 <= start2 + chunk.length && chunk.between(start2, from3 - start2, to - start2, f) === false)
            return;
        }
        this.nextLayer.between(from3, to, f);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
      iter(from3 = 0) {
        return HeapCursor.from([this]).goto(from3);
      }
      /**
      @internal
      */
      get isEmpty() {
        return this.nextLayer == this;
      }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
      static iter(sets, from3 = 0) {
        return HeapCursor.from(sets).goto(from3);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
      static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
        let a2 = oldSets.filter((set2) => set2.maxPoint > 0 || !set2.isEmpty && set2.maxPoint >= minPointSize);
        let b = newSets.filter((set2) => set2.maxPoint > 0 || !set2.isEmpty && set2.maxPoint >= minPointSize);
        let sharedChunks = findSharedChunks(a2, b, textDiff);
        let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
        let sideB = new SpanCursor(b, sharedChunks, minPointSize);
        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
        if (textDiff.empty && textDiff.length == 0)
          compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
      static eq(oldSets, newSets, from3 = 0, to) {
        if (to == null)
          to = 1e9 - 1;
        let a2 = oldSets.filter((set2) => !set2.isEmpty && newSets.indexOf(set2) < 0);
        let b = newSets.filter((set2) => !set2.isEmpty && oldSets.indexOf(set2) < 0);
        if (a2.length != b.length)
          return false;
        if (!a2.length)
          return true;
        let sharedChunks = findSharedChunks(a2, b);
        let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from3), sideB = new SpanCursor(b, sharedChunks, 0).goto(from3);
        for (; ; ) {
          if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
            return false;
          if (sideA.to > to)
            return true;
          sideA.next();
          sideB.next();
        }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
      static spans(sets, from3, to, iterator, minPointSize = -1) {
        let cursor2 = new SpanCursor(sets, null, minPointSize).goto(from3), pos = from3;
        let openRanges = cursor2.openStart;
        for (; ; ) {
          let curTo = Math.min(cursor2.to, to);
          if (cursor2.point) {
            let active = cursor2.activeForPoint(cursor2.to);
            let openCount = cursor2.pointFrom < from3 ? active.length + 1 : cursor2.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
            iterator.point(pos, curTo, cursor2.point, active, openCount, cursor2.pointRank);
            openRanges = Math.min(cursor2.openEnd(curTo), active.length);
          } else if (curTo > pos) {
            iterator.span(pos, curTo, cursor2.active, openRanges);
            openRanges = cursor2.openEnd(curTo);
          }
          if (cursor2.to > to)
            return openRanges + (cursor2.point && cursor2.to > to ? 1 : 0);
          pos = cursor2.to;
          cursor2.next();
        }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
      static of(ranges, sort = false) {
        let build = new RangeSetBuilder();
        for (let range of ranges instanceof Range2 ? [ranges] : sort ? lazySort(ranges) : ranges)
          build.add(range.from, range.to, range.value);
        return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
      static join(sets) {
        if (!sets.length)
          return _RangeSet.empty;
        let result = sets[sets.length - 1];
        for (let i = sets.length - 2; i >= 0; i--) {
          for (let layer2 = sets[i]; layer2 != _RangeSet.empty; layer2 = layer2.nextLayer)
            result = new _RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
        }
        return result;
      }
    };
    RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
    RangeSet.empty.nextLayer = RangeSet.empty;
    RangeSetBuilder = class _RangeSetBuilder {
      finishChunk(newArrays) {
        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
        this.chunkPos.push(this.chunkStart);
        this.chunkStart = -1;
        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
        this.maxPoint = -1;
        if (newArrays) {
          this.from = [];
          this.to = [];
          this.value = [];
        }
      }
      /**
      Create an empty builder.
      */
      constructor() {
        this.chunks = [];
        this.chunkPos = [];
        this.chunkStart = -1;
        this.last = null;
        this.lastFrom = -1e9;
        this.lastTo = -1e9;
        this.from = [];
        this.to = [];
        this.value = [];
        this.maxPoint = -1;
        this.setMaxPoint = -1;
        this.nextLayer = null;
      }
      /**
      Add a range. Ranges should be added in sorted (by `from` and
      `value.startSide`) order.
      */
      add(from3, to, value) {
        if (!this.addInner(from3, to, value))
          (this.nextLayer || (this.nextLayer = new _RangeSetBuilder())).add(from3, to, value);
      }
      /**
      @internal
      */
      addInner(from3, to, value) {
        let diff2 = from3 - this.lastTo || value.startSide - this.last.endSide;
        if (diff2 <= 0 && (from3 - this.lastFrom || value.startSide - this.last.startSide) < 0)
          throw new Error("Ranges must be added sorted by `from` position and `startSide`");
        if (diff2 < 0)
          return false;
        if (this.from.length == 250)
          this.finishChunk(true);
        if (this.chunkStart < 0)
          this.chunkStart = from3;
        this.from.push(from3 - this.chunkStart);
        this.to.push(to - this.chunkStart);
        this.last = value;
        this.lastFrom = from3;
        this.lastTo = to;
        this.value.push(value);
        if (value.point)
          this.maxPoint = Math.max(this.maxPoint, to - from3);
        return true;
      }
      /**
      @internal
      */
      addChunk(from3, chunk) {
        if ((from3 - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
          return false;
        if (this.from.length)
          this.finishChunk(true);
        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
        this.chunks.push(chunk);
        this.chunkPos.push(from3);
        let last = chunk.value.length - 1;
        this.last = chunk.value[last];
        this.lastFrom = chunk.from[last] + from3;
        this.lastTo = chunk.to[last] + from3;
        return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
      finish() {
        return this.finishInner(RangeSet.empty);
      }
      /**
      @internal
      */
      finishInner(next2) {
        if (this.from.length)
          this.finishChunk(false);
        if (this.chunks.length == 0)
          return next2;
        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next2) : next2, this.setMaxPoint);
        this.from = null;
        return result;
      }
    };
    LayerCursor = class {
      constructor(layer2, skip, minPoint, rank = 0) {
        this.layer = layer2;
        this.skip = skip;
        this.minPoint = minPoint;
        this.rank = rank;
      }
      get startSide() {
        return this.value ? this.value.startSide : 0;
      }
      get endSide() {
        return this.value ? this.value.endSide : 0;
      }
      goto(pos, side = -1e9) {
        this.chunkIndex = this.rangeIndex = 0;
        this.gotoInner(pos, side, false);
        return this;
      }
      gotoInner(pos, side, forward) {
        while (this.chunkIndex < this.layer.chunk.length) {
          let next2 = this.layer.chunk[this.chunkIndex];
          if (!(this.skip && this.skip.has(next2) || this.layer.chunkEnd(this.chunkIndex) < pos || next2.maxPoint < this.minPoint))
            break;
          this.chunkIndex++;
          forward = false;
        }
        if (this.chunkIndex < this.layer.chunk.length) {
          let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
          if (!forward || this.rangeIndex < rangeIndex)
            this.setRangeIndex(rangeIndex);
        }
        this.next();
      }
      forward(pos, side) {
        if ((this.to - pos || this.endSide - side) < 0)
          this.gotoInner(pos, side, true);
      }
      next() {
        for (; ; ) {
          if (this.chunkIndex == this.layer.chunk.length) {
            this.from = this.to = 1e9;
            this.value = null;
            break;
          } else {
            let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
            let from3 = chunkPos + chunk.from[this.rangeIndex];
            this.from = from3;
            this.to = chunkPos + chunk.to[this.rangeIndex];
            this.value = chunk.value[this.rangeIndex];
            this.setRangeIndex(this.rangeIndex + 1);
            if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
              break;
          }
        }
      }
      setRangeIndex(index) {
        if (index == this.layer.chunk[this.chunkIndex].value.length) {
          this.chunkIndex++;
          if (this.skip) {
            while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
              this.chunkIndex++;
          }
          this.rangeIndex = 0;
        } else {
          this.rangeIndex = index;
        }
      }
      nextChunk() {
        this.chunkIndex++;
        this.rangeIndex = 0;
        this.next();
      }
      compare(other) {
        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
      }
    };
    HeapCursor = class _HeapCursor {
      constructor(heap) {
        this.heap = heap;
      }
      static from(sets, skip = null, minPoint = -1) {
        let heap = [];
        for (let i = 0; i < sets.length; i++) {
          for (let cur2 = sets[i]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
            if (cur2.maxPoint >= minPoint)
              heap.push(new LayerCursor(cur2, skip, minPoint, i));
          }
        }
        return heap.length == 1 ? heap[0] : new _HeapCursor(heap);
      }
      get startSide() {
        return this.value ? this.value.startSide : 0;
      }
      goto(pos, side = -1e9) {
        for (let cur2 of this.heap)
          cur2.goto(pos, side);
        for (let i = this.heap.length >> 1; i >= 0; i--)
          heapBubble(this.heap, i);
        this.next();
        return this;
      }
      forward(pos, side) {
        for (let cur2 of this.heap)
          cur2.forward(pos, side);
        for (let i = this.heap.length >> 1; i >= 0; i--)
          heapBubble(this.heap, i);
        if ((this.to - pos || this.value.endSide - side) < 0)
          this.next();
      }
      next() {
        if (this.heap.length == 0) {
          this.from = this.to = 1e9;
          this.value = null;
          this.rank = -1;
        } else {
          let top3 = this.heap[0];
          this.from = top3.from;
          this.to = top3.to;
          this.value = top3.value;
          this.rank = top3.rank;
          if (top3.value)
            top3.next();
          heapBubble(this.heap, 0);
        }
      }
    };
    SpanCursor = class {
      constructor(sets, skip, minPoint) {
        this.minPoint = minPoint;
        this.active = [];
        this.activeTo = [];
        this.activeRank = [];
        this.minActive = -1;
        this.point = null;
        this.pointFrom = 0;
        this.pointRank = 0;
        this.to = -1e9;
        this.endSide = 0;
        this.openStart = -1;
        this.cursor = HeapCursor.from(sets, skip, minPoint);
      }
      goto(pos, side = -1e9) {
        this.cursor.goto(pos, side);
        this.active.length = this.activeTo.length = this.activeRank.length = 0;
        this.minActive = -1;
        this.to = pos;
        this.endSide = side;
        this.openStart = -1;
        this.next();
        return this;
      }
      forward(pos, side) {
        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
          this.removeActive(this.minActive);
        this.cursor.forward(pos, side);
      }
      removeActive(index) {
        remove(this.active, index);
        remove(this.activeTo, index);
        remove(this.activeRank, index);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
      addActive(trackOpen) {
        let i = 0, { value, to, rank } = this.cursor;
        while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
          i++;
        insert(this.active, i, value);
        insert(this.activeTo, i, to);
        insert(this.activeRank, i, rank);
        if (trackOpen)
          insert(trackOpen, i, this.cursor.from);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
      next() {
        let from3 = this.to, wasPoint = this.point;
        this.point = null;
        let trackOpen = this.openStart < 0 ? [] : null;
        for (; ; ) {
          let a2 = this.minActive;
          if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
            if (this.activeTo[a2] > from3) {
              this.to = this.activeTo[a2];
              this.endSide = this.active[a2].endSide;
              break;
            }
            this.removeActive(a2);
            if (trackOpen)
              remove(trackOpen, a2);
          } else if (!this.cursor.value) {
            this.to = this.endSide = 1e9;
            break;
          } else if (this.cursor.from > from3) {
            this.to = this.cursor.from;
            this.endSide = this.cursor.startSide;
            break;
          } else {
            let nextVal = this.cursor.value;
            if (!nextVal.point) {
              this.addActive(trackOpen);
              this.cursor.next();
            } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
              this.cursor.next();
            } else {
              this.point = nextVal;
              this.pointFrom = this.cursor.from;
              this.pointRank = this.cursor.rank;
              this.to = this.cursor.to;
              this.endSide = nextVal.endSide;
              this.cursor.next();
              this.forward(this.to, this.endSide);
              break;
            }
          }
        }
        if (trackOpen) {
          this.openStart = 0;
          for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from3; i--)
            this.openStart++;
        }
      }
      activeForPoint(to) {
        if (!this.active.length)
          return this.active;
        let active = [];
        for (let i = this.active.length - 1; i >= 0; i--) {
          if (this.activeRank[i] < this.pointRank)
            break;
          if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
            active.push(this.active[i]);
        }
        return active.reverse();
      }
      openEnd(to) {
        let open = 0;
        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
          open++;
        return open;
      }
    };
  }
});

// ../../node_modules/style-mod/src/style-mod.js
var C, COUNT, SET, top, StyleModule, adoptedSet, StyleSet;
var init_style_mod = __esm({
  "../../node_modules/style-mod/src/style-mod.js"() {
    C = "\u037C";
    COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
    StyleModule = class {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let { finish } = options || {};
        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
        }
        function render(selectors, spec2, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec2 == null) return target.push(selectors[0] + ";");
          for (let prop in spec2) {
            let value = spec2[prop];
            if (/&/.test(prop)) {
              render(
                prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b) => a2.concat(b)),
                value,
                target
              );
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l) => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
          }
        }
        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }
      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() {
        return this.rules.join("\n");
      }
      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id3 = top[COUNT] || 1;
        top[COUNT] = id3 + 1;
        return C + id3.toString(36);
      }
      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
      static mount(root, modules, options) {
        let set2 = root[SET], nonce = options && options.nonce;
        if (!set2) set2 = new StyleSet(root, nonce);
        else if (nonce) set2.setNonce(nonce);
        set2.mount(Array.isArray(modules) ? modules : [modules], root);
      }
    };
    adoptedSet = /* @__PURE__ */ new Map();
    StyleSet = class {
      constructor(root, nonce) {
        let doc2 = root.ownerDocument || root, win = doc2.defaultView;
        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc2);
          if (adopted) return root[SET] = adopted;
          this.sheet = new win.CSSStyleSheet();
          adoptedSet.set(doc2, this);
        } else {
          this.styleTag = doc2.createElement("style");
          if (nonce) this.styleTag.setAttribute("nonce", nonce);
        }
        this.modules = [];
        root[SET] = this;
      }
      mount(modules, root) {
        let sheet = this.sheet;
        let pos = 0, j = 0;
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) {
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }
        if (sheet) {
          if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
            root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
        } else {
          let text5 = "";
          for (let i = 0; i < this.modules.length; i++)
            text5 += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text5;
          let target = root.head || root;
          if (this.styleTag.parentNode != target)
            target.insertBefore(this.styleTag, target.firstChild);
        }
      }
      setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
    };
  }
});

// ../../node_modules/w3c-keyname/index.js
function keyName(event) {
  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name2 == "Esc") name2 = "Escape";
  if (name2 == "Del") name2 = "Delete";
  if (name2 == "Left") name2 = "ArrowLeft";
  if (name2 == "Up") name2 = "ArrowUp";
  if (name2 == "Right") name2 = "ArrowRight";
  if (name2 == "Down") name2 = "ArrowDown";
  return name2;
}
var base, shift, mac, ie, i, i, i, code2;
var init_w3c_keyname = __esm({
  "../../node_modules/w3c-keyname/index.js"() {
    base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };
    shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: '"'
    };
    mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    for (i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);
    for (i = 1; i <= 24; i++) base[i + 111] = "F" + i;
    for (i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }
    for (code2 in base) if (!shift.hasOwnProperty(code2)) shift[code2] = base[code2];
  }
});

// ../../node_modules/@codemirror/view/dist/index.js
function getSelection(root) {
  let target;
  if (root.nodeType == 11) {
    target = root.getSelection ? root : root.ownerDocument;
  } else {
    target = root;
  }
  return target.getSelection();
}
function contains(dom, node) {
  return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function hasSelection(dom, selection2) {
  if (!selection2.anchorNode)
    return false;
  try {
    return contains(dom, selection2.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3)
    return textRange(dom, 0, dom.nodeValue.length).getClientRects();
  else if (dom.nodeType == 1)
    return dom.getClientRects();
  else
    return [];
}
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0; ; index++) {
    node = node.previousSibling;
    if (!node)
      return index;
  }
}
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV")
        return false;
      let parent = node.parentNode;
      if (!parent || parent.nodeType != 1)
        return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false")
        return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
function flattenRect(rect2, left) {
  let x = left ? rect2.left : rect2.right;
  return { left: x, right: x, top: rect2.top, bottom: rect2.bottom };
}
function windowRect(win) {
  let vp = win.visualViewport;
  if (vp)
    return {
      left: 0,
      right: vp.width,
      top: 0,
      bottom: vp.height
    };
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
function getScale(elt2, rect2) {
  let scaleX = rect2.width / elt2.offsetWidth;
  let scaleY = rect2.height / elt2.offsetHeight;
  if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect2.width - elt2.offsetWidth) < 1)
    scaleX = 1;
  if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect2.height - elt2.offsetHeight) < 1)
    scaleY = 1;
  return { scaleX, scaleY };
}
function scrollRectIntoView(dom, rect2, side, x, y, xMargin, yMargin, ltr) {
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  for (let cur2 = dom, stop = false; cur2 && !stop; ) {
    if (cur2.nodeType == 1) {
      let bounding, top3 = cur2 == doc2.body;
      let scaleX = 1, scaleY = 1;
      if (top3) {
        bounding = windowRect(win);
      } else {
        if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
          stop = true;
        if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
          cur2 = cur2.assignedSlot || cur2.parentNode;
          continue;
        }
        let rect3 = cur2.getBoundingClientRect();
        ({ scaleX, scaleY } = getScale(cur2, rect3));
        bounding = {
          left: rect3.left,
          right: rect3.left + cur2.clientWidth * scaleX,
          top: rect3.top,
          bottom: rect3.top + cur2.clientHeight * scaleY
        };
      }
      let moveX = 0, moveY = 0;
      if (y == "nearest") {
        if (rect2.top < bounding.top) {
          moveY = rect2.top - (bounding.top + yMargin);
          if (side > 0 && rect2.bottom > bounding.bottom + moveY)
            moveY = rect2.bottom - bounding.bottom + yMargin;
        } else if (rect2.bottom > bounding.bottom) {
          moveY = rect2.bottom - bounding.bottom + yMargin;
          if (side < 0 && rect2.top - moveY < bounding.top)
            moveY = rect2.top - (bounding.top + yMargin);
        }
      } else {
        let rectHeight = rect2.bottom - rect2.top, boundingHeight = bounding.bottom - bounding.top;
        let targetTop = y == "center" && rectHeight <= boundingHeight ? rect2.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect2.top - yMargin : rect2.bottom - boundingHeight + yMargin;
        moveY = targetTop - bounding.top;
      }
      if (x == "nearest") {
        if (rect2.left < bounding.left) {
          moveX = rect2.left - (bounding.left + xMargin);
          if (side > 0 && rect2.right > bounding.right + moveX)
            moveX = rect2.right - bounding.right + xMargin;
        } else if (rect2.right > bounding.right) {
          moveX = rect2.right - bounding.right + xMargin;
          if (side < 0 && rect2.left < bounding.left + moveX)
            moveX = rect2.left - (bounding.left + xMargin);
        }
      } else {
        let targetLeft = x == "center" ? rect2.left + (rect2.right - rect2.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect2.left - xMargin : rect2.right - (bounding.right - bounding.left) + xMargin;
        moveX = targetLeft - bounding.left;
      }
      if (moveX || moveY) {
        if (top3) {
          win.scrollBy(moveX, moveY);
        } else {
          let movedX = 0, movedY = 0;
          if (moveY) {
            let start2 = cur2.scrollTop;
            cur2.scrollTop += moveY / scaleY;
            movedY = (cur2.scrollTop - start2) * scaleY;
          }
          if (moveX) {
            let start2 = cur2.scrollLeft;
            cur2.scrollLeft += moveX / scaleX;
            movedX = (cur2.scrollLeft - start2) * scaleX;
          }
          rect2 = {
            left: rect2.left - movedX,
            top: rect2.top - movedY,
            right: rect2.right - movedX,
            bottom: rect2.bottom - movedY
          };
          if (movedX && Math.abs(movedX - moveX) < 1)
            x = "nearest";
          if (movedY && Math.abs(movedY - moveY) < 1)
            y = "nearest";
        }
      }
      if (top3)
        break;
      if (rect2.top < bounding.top || rect2.bottom > bounding.bottom || rect2.left < bounding.left || rect2.right > bounding.right)
        rect2 = {
          left: Math.max(rect2.left, bounding.left),
          right: Math.min(rect2.right, bounding.right),
          top: Math.max(rect2.top, bounding.top),
          bottom: Math.min(rect2.bottom, bounding.bottom)
        };
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
}
function scrollableParents(dom) {
  let doc2 = dom.ownerDocument, x, y;
  for (let cur2 = dom.parentNode; cur2; ) {
    if (cur2 == doc2.body || x && y) {
      break;
    } else if (cur2.nodeType == 1) {
      if (!y && cur2.scrollHeight > cur2.clientHeight)
        y = cur2;
      if (!x && cur2.scrollWidth > cur2.clientWidth)
        x = cur2;
      cur2 = cur2.assignedSlot || cur2.parentNode;
    } else if (cur2.nodeType == 11) {
      cur2 = cur2.host;
    } else {
      break;
    }
  }
  return { x, y };
}
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stack = [];
  for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
    stack.push(cur2, cur2.scrollTop, cur2.scrollLeft);
    if (cur2 == cur2.ownerDocument)
      break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (let i = 0; i < stack.length; ) {
      let elt2 = stack[i++], top3 = stack[i++], left = stack[i++];
      if (elt2.scrollTop != top3)
        elt2.scrollTop = top3;
      if (elt2.scrollLeft != left)
        elt2.scrollLeft = left;
    }
  }
}
function textRange(node, from3, to = from3) {
  let range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to);
  range.setStart(node, from3);
  return range;
}
function dispatchKey(elt2, name2, code2, mods) {
  let options = { key: name2, code: name2, keyCode: code2, which: code2, cancelable: true };
  if (mods)
    ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
  let down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt2.dispatchEvent(down);
  let up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt2.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
function getRoot(node) {
  while (node) {
    if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
      return node;
    node = node.assignedSlot || node.parentNode;
  }
  return null;
}
function clearAttributes(node) {
  while (node.attributes.length)
    node.removeAttributeNode(node.attributes[0]);
}
function atElementStart(doc2, selection2) {
  let node = selection2.focusNode, offset = selection2.focusOffset;
  if (!node || selection2.anchorNode != node || selection2.anchorOffset != offset)
    return false;
  offset = Math.min(offset, maxOffset(node));
  for (; ; ) {
    if (offset) {
      if (node.nodeType != 1)
        return false;
      let prev = node.childNodes[offset - 1];
      if (prev.contentEditable == "false")
        offset--;
      else {
        node = prev;
        offset = maxOffset(node);
      }
    } else if (node == doc2) {
      return true;
    } else {
      offset = domIndex(node);
      node = node.parentNode;
    }
  }
}
function isScrolledToBottom(elt2) {
  return elt2.scrollTop > Math.max(1, elt2.scrollHeight - elt2.clientHeight - 4);
}
function textNodeBefore(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset > 0) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset > 0) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node);
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
function textNodeAfter(startNode, startOffset) {
  for (let node = startNode, offset = startOffset; ; ) {
    if (node.nodeType == 3 && offset < node.nodeValue.length) {
      return { node, offset };
    } else if (node.nodeType == 1 && offset < node.childNodes.length) {
      if (node.contentEditable == "false")
        return null;
      node = node.childNodes[offset];
      offset = 0;
    } else if (node.parentNode && !isBlockElement(node)) {
      offset = domIndex(node) + 1;
      node = node.parentNode;
    } else {
      return null;
    }
  }
}
function rm$1(dom) {
  let next2 = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next2;
}
function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
  let { children } = parent;
  let before = children.length ? children[fromI] : null;
  let last = insert2.length ? insert2[insert2.length - 1] : null;
  let breakAtEnd = last ? last.breakAfter : breakAtStart;
  if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
    return;
  if (toI < children.length) {
    let after = children[toI];
    if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
      if (fromI == toI) {
        after = after.split(toOff);
        toOff = 0;
      }
      if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
        insert2[insert2.length - 1] = after;
      } else {
        if (toOff || after.children.length && !after.children[0].length)
          after.merge(0, toOff, null, false, 0, openEnd);
        insert2.push(after);
      }
    } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
      if (last)
        last.breakAfter = 1;
      else
        breakAtStart = 1;
    }
    toI++;
  }
  if (before) {
    before.breakAfter = breakAtStart;
    if (fromOff > 0) {
      if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
        before.breakAfter = insert2.shift().breakAfter;
      } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
        before.merge(fromOff, before.length, null, false, openStart, 0);
      }
      fromI++;
    }
  }
  while (fromI < toI && insert2.length) {
    if (children[toI - 1].become(insert2[insert2.length - 1])) {
      toI--;
      insert2.pop();
      openEnd = insert2.length ? 0 : openStart;
    } else if (children[fromI].become(insert2[0])) {
      fromI++;
      insert2.shift();
      openStart = insert2.length ? 0 : openEnd;
    } else {
      break;
    }
  }
  if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
    fromI--;
  if (fromI < toI || insert2.length)
    parent.replaceChildren(fromI, toI, insert2);
}
function mergeChildrenInto(parent, from3, to, insert2, openStart, openEnd) {
  let cur2 = parent.childCursor();
  let { i: toI, off: toOff } = cur2.findPos(to, 1);
  let { i: fromI, off: fromOff } = cur2.findPos(from3, -1);
  let dLen = from3 - to;
  for (let view of insert2)
    dLen += view.length;
  parent.length += dLen;
  replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
}
function textCoords(text5, pos, side) {
  let length = text5.nodeValue.length;
  if (pos > length)
    pos = length;
  let from3 = pos, to = pos, flatten2 = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      if (pos) {
        from3--;
        flatten2 = 1;
      } else if (to < length) {
        to++;
        flatten2 = -1;
      }
    }
  } else {
    if (side < 0)
      from3--;
    else if (to < length)
      to++;
  }
  let rects = textRange(text5, from3, to).getClientRects();
  if (!rects.length)
    return null;
  let rect2 = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten2 && rect2.width == 0)
    rect2 = Array.prototype.find.call(rects, (r2) => r2.width) || rect2;
  return flatten2 ? flattenRect(rect2, flatten2 < 0) : rect2 || null;
}
function inlineDOMAtPos(parent, pos) {
  let dom = parent.dom, { children } = parent, i = 0;
  for (let off = 0; i < children.length; i++) {
    let child = children[i], end2 = off + child.length;
    if (end2 == off && child.getSide() <= 0)
      continue;
    if (pos > off && pos < end2 && child.dom.parentNode == dom)
      return child.domAtPos(pos - off);
    if (pos <= off)
      break;
    off = end2;
  }
  for (let j = i; j > 0; j--) {
    let prev = children[j - 1];
    if (prev.dom.parentNode == dom)
      return prev.domAtPos(prev.length);
  }
  for (let j = i; j < children.length; j++) {
    let next2 = children[j];
    if (next2.dom.parentNode == dom)
      return next2.domAtPos(0);
  }
  return new DOMPos(dom, 0);
}
function joinInlineInto(parent, view, open) {
  let last, { children } = parent;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  let before = null, beforePos = -1, after = null, afterPos = -1;
  function scan(view2, pos2) {
    for (let i = 0, off = 0; i < view2.children.length && off <= pos2; i++) {
      let child = view2.children[i], end2 = off + child.length;
      if (end2 >= pos2) {
        if (child.children.length) {
          scan(child, pos2 - off);
        } else if ((!after || after.isHidden && (side > 0 || onSameLine(after, child))) && (end2 > pos2 || off == end2 && child.getSide() > 0)) {
          after = child;
          afterPos = pos2 - off;
        } else if (off < pos2 || off == end2 && child.getSide() < 0 && !child.isHidden) {
          before = child;
          beforePos = pos2 - off;
        }
      }
      off = end2;
    }
  }
  scan(view, pos);
  let target = (side < 0 ? before : after) || before || after;
  if (target)
    return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
  return fallbackRect(view);
}
function fallbackRect(view) {
  let last = view.dom.lastChild;
  if (!last)
    return view.dom.getBoundingClientRect();
  let rects = clientRectsFor(last);
  return rects[rects.length - 1] || null;
}
function onSameLine(a2, b) {
  let posA = a2.coordsAt(0, 1), posB = b.coordsAt(0, 1);
  return posA && posB && posB.top < posA.bottom;
}
function combineAttrs(source, target) {
  for (let name2 in source) {
    if (name2 == "class" && target.class)
      target.class += " " + source.class;
    else if (name2 == "style" && target.style)
      target.style += ";" + source.style;
    else
      target[name2] = source[name2];
  }
  return target;
}
function attrsEq(a2, b, ignore) {
  if (a2 == b)
    return true;
  if (!a2)
    a2 = noAttrs;
  if (!b)
    b = noAttrs;
  let keysA = Object.keys(a2), keysB = Object.keys(b);
  if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
    return false;
  for (let key of keysA) {
    if (key != ignore && (keysB.indexOf(key) == -1 || a2[key] !== b[key]))
      return false;
  }
  return true;
}
function updateAttrs(dom, prev, attrs2) {
  let changed = false;
  if (prev) {
    for (let name2 in prev)
      if (!(attrs2 && name2 in attrs2)) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = "";
        else
          dom.removeAttribute(name2);
      }
  }
  if (attrs2) {
    for (let name2 in attrs2)
      if (!(prev && prev[name2] == attrs2[name2])) {
        changed = true;
        if (name2 == "style")
          dom.style.cssText = attrs2[name2];
        else
          dom.setAttribute(name2, attrs2[name2]);
      }
  }
  return changed;
}
function getAttrs(dom) {
  let attrs2 = /* @__PURE__ */ Object.create(null);
  for (let i = 0; i < dom.attributes.length; i++) {
    let attr = dom.attributes[i];
    attrs2[attr.name] = attr.value;
  }
  return attrs2;
}
function getInclusive(spec, block3 = false) {
  let { inclusiveStart: start2, inclusiveEnd: end2 } = spec;
  if (start2 == null)
    start2 = spec.inclusive;
  if (end2 == null)
    end2 = spec.inclusive;
  return { start: start2 !== null && start2 !== void 0 ? start2 : block3, end: end2 !== null && end2 !== void 0 ? end2 : block3 };
}
function widgetsEq(a2, b) {
  return a2 == b || !!(a2 && b && a2.compare(b));
}
function addRange(from3, to, ranges, margin = 0) {
  let last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin >= from3)
    ranges[last] = Math.max(ranges[last], to);
  else
    ranges.push(from3, to);
}
function wrapMarks(view, active) {
  for (let mark of active)
    view = new MarkView(mark, [view], view.length);
  return view;
}
function dec(str) {
  let result = [];
  for (let i = 0; i < str.length; i++)
    result.push(1 << +str[i]);
  return result;
}
function charType(ch2) {
  return ch2 <= 247 ? LowTypes[ch2] : 1424 <= ch2 && ch2 <= 1524 ? 2 : 1536 <= ch2 && ch2 <= 1785 ? ArabicTypes[ch2 - 1536] : 1774 <= ch2 && ch2 <= 2220 ? 4 : 8192 <= ch2 && ch2 <= 8204 ? 256 : 64336 <= ch2 && ch2 <= 65023 ? 4 : 1;
}
function isolatesEq(a2, b) {
  if (a2.length != b.length)
    return false;
  for (let i = 0; i < a2.length; i++) {
    let iA = a2[i], iB = b[i];
    if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
      return false;
  }
  return true;
}
function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
  for (let iI = 0; iI <= isolates.length; iI++) {
    let from3 = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    let prevType = iI ? 256 : outerType;
    for (let i = from3, prev = prevType, prevStrong = prevType; i < to; i++) {
      let type7 = charType(line.charCodeAt(i));
      if (type7 == 512)
        type7 = prev;
      else if (type7 == 8 && prevStrong == 4)
        type7 = 16;
      types[i] = type7 == 4 ? 2 : type7;
      if (type7 & 7)
        prevStrong = type7;
      prev = type7;
    }
    for (let i = from3, prev = prevType, prevStrong = prevType; i < to; i++) {
      let type7 = types[i];
      if (type7 == 128) {
        if (i < to - 1 && prev == types[i + 1] && prev & 24)
          type7 = types[i] = prev;
        else
          types[i] = 256;
      } else if (type7 == 64) {
        let end2 = i + 1;
        while (end2 < to && types[end2] == 64)
          end2++;
        let replace2 = i && prev == 8 || end2 < rTo && types[end2] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
        for (let j = i; j < end2; j++)
          types[j] = replace2;
        i = end2 - 1;
      } else if (type7 == 8 && prevStrong == 1) {
        types[i] = 1;
      }
      prev = type7;
      if (type7 & 7)
        prevStrong = type7;
    }
  }
}
function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
  let oppositeType = outerType == 1 ? 2 : 1;
  for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
    let from3 = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i = from3, ch2, br, type7; i < to; i++) {
      if (br = Brackets[ch2 = line.charCodeAt(i)]) {
        if (br < 0) {
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br) {
              let flags = BracketStack[sJ + 2];
              let type8 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
              if (type8)
                types[i] = types[BracketStack[sJ]] = type8;
              sI = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189) {
          break;
        } else {
          BracketStack[sI++] = i;
          BracketStack[sI++] = ch2;
          BracketStack[sI++] = context;
        }
      } else if ((type7 = types[i]) == 2 || type7 == 1) {
        let embed = type7 == outerType;
        context = embed ? 0 : 1;
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          let cur2 = BracketStack[sJ + 2];
          if (cur2 & 2)
            break;
          if (embed) {
            BracketStack[sJ + 2] |= 2;
          } else {
            if (cur2 & 4)
              break;
            BracketStack[sJ + 2] |= 4;
          }
        }
      }
    }
  }
}
function processNeutrals(rFrom, rTo, isolates, outerType) {
  for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
    let from3 = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
    for (let i = from3; i < to; ) {
      let type7 = types[i];
      if (type7 == 256) {
        let end2 = i + 1;
        for (; ; ) {
          if (end2 == to) {
            if (iI == isolates.length)
              break;
            end2 = isolates[iI++].to;
            to = iI < isolates.length ? isolates[iI].from : rTo;
          } else if (types[end2] == 256) {
            end2++;
          } else {
            break;
          }
        }
        let beforeL = prev == 1;
        let afterL = (end2 < rTo ? types[end2] : outerType) == 1;
        let replace2 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
        for (let j = end2, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i; ) {
          if (j == fromJ) {
            j = isolates[--jI].from;
            fromJ = jI ? isolates[jI - 1].to : rFrom;
          }
          types[--j] = replace2;
        }
        i = end2;
      } else {
        prev = type7;
        i++;
      }
    }
  }
}
function emitSpans(line, from3, to, level, baseLevel, isolates, order) {
  let ourType = level % 2 ? 2 : 1;
  if (level % 2 == baseLevel % 2) {
    for (let iCh = from3, iI = 0; iCh < to; ) {
      let sameDir = true, isNum2 = false;
      if (iI == isolates.length || iCh < isolates[iI].from) {
        let next2 = types[iCh];
        if (next2 != ourType) {
          sameDir = false;
          isNum2 = next2 == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run: for (; ; ) {
        if (iI < isolates.length && iScan == isolates[iI].from) {
          if (isNum2)
            break run;
          let iso = isolates[iI];
          if (!sameDir)
            for (let upto = iso.to, jI = iI + 1; ; ) {
              if (upto == to)
                break run;
              if (jI < isolates.length && isolates[jI].from == upto)
                upto = isolates[jI++].to;
              else if (types[upto] == ourType)
                break run;
              else
                break;
            }
          iI++;
          if (recurse) {
            recurse.push(iso);
          } else {
            if (iso.from > iCh)
              order.push(new BidiSpan(iCh, iso.from, localLevel));
            let dirSwap = iso.direction == LTR != !(localLevel % 2);
            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
            iCh = iso.to;
          }
          iScan = iso.to;
        } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
          break;
        } else {
          iScan++;
        }
      }
      if (recurse)
        emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
      else if (iCh < iScan)
        order.push(new BidiSpan(iCh, iScan, localLevel));
      iCh = iScan;
    }
  } else {
    for (let iCh = to, iI = isolates.length; iCh > from3; ) {
      let sameDir = true, isNum2 = false;
      if (!iI || iCh > isolates[iI - 1].to) {
        let next2 = types[iCh - 1];
        if (next2 != ourType) {
          sameDir = false;
          isNum2 = next2 == 16;
        }
      }
      let recurse = !sameDir && ourType == 1 ? [] : null;
      let localLevel = sameDir ? level : level + 1;
      let iScan = iCh;
      run: for (; ; ) {
        if (iI && iScan == isolates[iI - 1].to) {
          if (isNum2)
            break run;
          let iso = isolates[--iI];
          if (!sameDir)
            for (let upto = iso.from, jI = iI; ; ) {
              if (upto == from3)
                break run;
              if (jI && isolates[jI - 1].to == upto)
                upto = isolates[--jI].from;
              else if (types[upto - 1] == ourType)
                break run;
              else
                break;
            }
          if (recurse) {
            recurse.push(iso);
          } else {
            if (iso.to < iCh)
              order.push(new BidiSpan(iso.to, iCh, localLevel));
            let dirSwap = iso.direction == LTR != !(localLevel % 2);
            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
            iCh = iso.from;
          }
          iScan = iso.from;
        } else if (iScan == from3 || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
          break;
        } else {
          iScan--;
        }
      }
      if (recurse)
        emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
      else if (iScan < iCh)
        order.push(new BidiSpan(iScan, iCh, localLevel));
      iCh = iScan;
    }
  }
}
function computeSectionOrder(line, level, baseLevel, isolates, from3, to, order) {
  let outerType = level % 2 ? 2 : 1;
  computeCharTypes(line, from3, to, isolates, outerType);
  processBracketPairs(line, from3, to, isolates, outerType);
  processNeutrals(from3, to, isolates, outerType);
  emitSpans(line, from3, to, level, baseLevel, isolates, order);
}
function computeOrder(line, direction, isolates) {
  if (!line)
    return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
  if (direction == LTR && !isolates.length && !BidiRE.test(line))
    return trivialOrder(line.length);
  if (isolates.length)
    while (line.length > types.length)
      types[types.length] = 256;
  let order = [], level = direction == LTR ? 0 : 1;
  computeSectionOrder(line, level, level, isolates, 0, line.length, order);
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
function moveVisually(line, order, dir, start2, forward) {
  var _a2;
  let startIndex = start2.head - line.from;
  let spanI = BidiSpan.find(order, startIndex, (_a2 = start2.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start2.assoc);
  let span = order[spanI], spanEnd = span.side(forward, dir);
  if (startIndex == spanEnd) {
    let nextI = spanI += forward ? 1 : -1;
    if (nextI < 0 || nextI >= order.length)
      return null;
    span = order[spanI = nextI];
    startIndex = span.side(!forward, dir);
    spanEnd = span.side(forward, dir);
  }
  let nextIndex = findClusterBreak2(line.text, startIndex, span.forward(forward, dir));
  if (nextIndex < span.from || nextIndex > span.to)
    nextIndex = spanEnd;
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
    return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
  return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
}
function autoDirection(text5, from3, to) {
  for (let i = from3; i < to; i++) {
    let type7 = charType(text5.charCodeAt(i));
    if (type7 == 1)
      return LTR;
    if (type7 == 2 || type7 == 4)
      return RTL;
  }
  return LTR;
}
function logException(state, exception, context) {
  let handler = state.facet(exceptionSink);
  if (handler.length)
    handler[0](exception);
  else if (window.onerror)
    window.onerror(String(exception), context, void 0, void 0, exception);
  else if (context)
    console.error(context + ":", exception);
  else
    console.error(exception);
}
function getIsolatedRanges(view, line) {
  let isolates = view.state.facet(bidiIsolatedRanges);
  if (!isolates.length)
    return isolates;
  let sets = isolates.map((i) => i instanceof Function ? i(view) : i);
  let result = [];
  RangeSet.spans(sets, line.from, line.to, {
    point() {
    },
    span(fromDoc, toDoc, active, open) {
      let from3 = fromDoc - line.from, to = toDoc - line.from;
      let level = result;
      for (let i = active.length - 1; i >= 0; i--, open--) {
        let direction = active[i].spec.bidiIsolate, update;
        if (direction == null)
          direction = autoDirection(line.text, from3, to);
        if (open > 0 && level.length && (update = level[level.length - 1]).to == from3 && update.direction == direction) {
          update.to = to;
          level = update.inner;
        } else {
          let add3 = { from: from3, to, direction, inner: [] };
          level.push(add3);
          level = add3.inner;
        }
      }
    }
  });
  return result;
}
function getScrollMargins(view) {
  let left = 0, right = 0, top3 = 0, bottom = 0;
  for (let source of view.state.facet(scrollMargins)) {
    let m = source(view);
    if (m) {
      if (m.left != null)
        left = Math.max(left, m.left);
      if (m.right != null)
        right = Math.max(right, m.right);
      if (m.top != null)
        top3 = Math.max(top3, m.top);
      if (m.bottom != null)
        bottom = Math.max(bottom, m.bottom);
    }
  }
  return { left, right, top: top3, bottom };
}
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
function findCompositionNode(view, headPos) {
  let sel = view.observer.selectionRange;
  if (!sel.focusNode)
    return null;
  let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
  let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
  let textNode = textBefore || textAfter;
  if (textAfter && textBefore && textAfter.node != textBefore.node) {
    let descAfter = ContentView.get(textAfter.node);
    if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
      textNode = textAfter;
    } else if (view.docView.lastCompositionAfterCursor) {
      let descBefore = ContentView.get(textBefore.node);
      if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
        textNode = textAfter;
    }
  }
  view.docView.lastCompositionAfterCursor = textNode != textBefore;
  if (!textNode)
    return null;
  let from3 = headPos - textNode.offset;
  return { from: from3, to: from3 + textNode.node.nodeValue.length, node: textNode.node };
}
function findCompositionRange(view, changes, headPos) {
  let found = findCompositionNode(view, headPos);
  if (!found)
    return null;
  let { node: textNode, from: from3, to } = found, text5 = textNode.nodeValue;
  if (/[\n\r]/.test(text5))
    return null;
  if (view.state.doc.sliceString(found.from, found.to) != text5)
    return null;
  let inv = changes.invertedDesc;
  let range = new ChangedRange(inv.mapPos(from3), inv.mapPos(to), from3, to);
  let marks2 = [];
  for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
    let parentView = ContentView.get(parent);
    if (parentView instanceof MarkView)
      marks2.push({ node: parent, deco: parentView.mark });
    else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
      return { range, text: textNode, marks: marks2, line: parent };
    else if (parent != view.contentDOM)
      marks2.push({ node: parent, deco: new MarkDecoration({
        inclusive: true,
        attributes: getAttrs(parent),
        tagName: parent.tagName.toLowerCase()
      }) });
    else
      return null;
  }
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1)
    return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 : 0);
}
function findChangedDeco(a2, b, diff2) {
  let comp = new DecorationComparator$1();
  RangeSet.compare(a2, b, diff2, comp);
  return comp.changes;
}
function inUneditable(node, inside2) {
  for (let cur2 = node; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
    if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
      return true;
    }
  }
  return false;
}
function touchesComposition(changes, composition) {
  let touched = false;
  if (composition)
    changes.iterChangedRanges((from3, to) => {
      if (from3 < composition.to && to > composition.from)
        touched = true;
    });
  return touched;
}
function groupAt(state, pos, bias = 1) {
  let categorize = state.charCategorizer(pos);
  let line = state.doc.lineAt(pos), linePos = pos - line.from;
  if (line.length == 0)
    return EditorSelection.cursor(pos);
  if (linePos == 0)
    bias = 1;
  else if (linePos == line.length)
    bias = -1;
  let from3 = linePos, to = linePos;
  if (bias < 0)
    from3 = findClusterBreak2(line.text, linePos, false);
  else
    to = findClusterBreak2(line.text, linePos);
  let cat = categorize(line.text.slice(from3, to));
  while (from3 > 0) {
    let prev = findClusterBreak2(line.text, from3, false);
    if (categorize(line.text.slice(prev, from3)) != cat)
      break;
    from3 = prev;
  }
  while (to < line.length) {
    let next2 = findClusterBreak2(line.text, to);
    if (categorize(line.text.slice(to, next2)) != cat)
      break;
    to = next2;
  }
  return EditorSelection.range(from3 + line.from, to + line.from);
}
function getdx(x, rect2) {
  return rect2.left > x ? rect2.left - x : Math.max(0, x - rect2.right);
}
function getdy(y, rect2) {
  return rect2.top > y ? rect2.top - y : Math.max(0, y - rect2.bottom);
}
function yOverlap(a2, b) {
  return a2.top < b.bottom - 1 && a2.bottom > b.top + 1;
}
function upTop(rect2, top3) {
  return top3 < rect2.top ? { top: top3, left: rect2.left, right: rect2.right, bottom: rect2.bottom } : rect2;
}
function upBot(rect2, bottom) {
  return bottom > rect2.bottom ? { top: rect2.top, left: rect2.left, right: rect2.right, bottom } : rect2;
}
function domPosAtCoords(parent, x, y) {
  let closest, closestRect, closestX, closestY, closestOverlap = false;
  let above, below, aboveRect, belowRect;
  for (let child = parent.firstChild; child; child = child.nextSibling) {
    let rects = clientRectsFor(child);
    for (let i = 0; i < rects.length; i++) {
      let rect2 = rects[i];
      if (closestRect && yOverlap(closestRect, rect2))
        rect2 = upTop(upBot(rect2, closestRect.bottom), closestRect.top);
      let dx = getdx(x, rect2), dy = getdy(y, rect2);
      if (dx == 0 && dy == 0)
        return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect2;
        closestX = dx;
        closestY = dy;
        let side = dy ? y < rect2.top ? -1 : 1 : dx ? x < rect2.left ? -1 : 1 : 0;
        closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
      }
      if (dx == 0) {
        if (y > rect2.bottom && (!aboveRect || aboveRect.bottom < rect2.bottom)) {
          above = child;
          aboveRect = rect2;
        } else if (y < rect2.top && (!belowRect || belowRect.top > rect2.top)) {
          below = child;
          belowRect = rect2;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect2)) {
        aboveRect = upBot(aboveRect, rect2.bottom);
      } else if (belowRect && yOverlap(belowRect, rect2)) {
        belowRect = upTop(belowRect, rect2.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest)
    return { node: parent, offset: 0 };
  let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
  if (closest.nodeType == 3)
    return domPosInText(closest, clipX, y);
  if (closestOverlap && closest.contentEditable != "false")
    return domPosAtCoords(closest, clipX, y);
  let offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return { node: parent, offset };
}
function domPosInText(node, x, y) {
  let len = node.nodeValue.length;
  let closestOffset = -1, closestDY = 1e9, generalSide = 0;
  for (let i = 0; i < len; i++) {
    let rects = textRange(node, i, i + 1).getClientRects();
    for (let j = 0; j < rects.length; j++) {
      let rect2 = rects[j];
      if (rect2.top == rect2.bottom)
        continue;
      if (!generalSide)
        generalSide = x - rect2.left;
      let dy = (rect2.top > y ? rect2.top - y : y - rect2.bottom) - 1;
      if (rect2.left - 1 <= x && rect2.right + 1 >= x && dy < closestDY) {
        let right = x >= (rect2.left + rect2.right) / 2, after = right;
        if (browser.chrome || browser.gecko) {
          let rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect2.right)
            after = !right;
        }
        if (dy <= 0)
          return { node, offset: i + (after ? 1 : 0) };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
}
function posAtCoords(view, coords, precise, bias = -1) {
  var _a2, _b2;
  let content3 = view.contentDOM.getBoundingClientRect(), docTop = content3.top + view.viewState.paddingTop;
  let block3, { docHeight } = view.viewState;
  let { x, y } = coords, yOffset = y - docTop;
  if (yOffset < 0)
    return 0;
  if (yOffset > docHeight)
    return view.state.doc.length;
  for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
    block3 = view.elementAtHeight(yOffset);
    if (block3.type == BlockType.Text)
      break;
    for (; ; ) {
      yOffset = bias > 0 ? block3.bottom + halfLine : block3.top - halfLine;
      if (yOffset >= 0 && yOffset <= docHeight)
        break;
      if (bounced)
        return precise ? null : 0;
      bounced = true;
      bias = -bias;
    }
  }
  y = docTop + yOffset;
  let lineStart = block3.from;
  if (lineStart < view.viewport.from)
    return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content3, block3, x, y);
  if (lineStart > view.viewport.to)
    return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content3, block3, x, y);
  let doc2 = view.dom.ownerDocument;
  let root = view.root.elementFromPoint ? view.root : doc2;
  let element2 = root.elementFromPoint(x, y);
  if (element2 && !view.contentDOM.contains(element2))
    element2 = null;
  if (!element2) {
    x = Math.max(content3.left + 1, Math.min(content3.right - 1, x));
    element2 = root.elementFromPoint(x, y);
    if (element2 && !view.contentDOM.contains(element2))
      element2 = null;
  }
  let node, offset = -1;
  if (element2 && ((_a2 = view.docView.nearest(element2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
    if (doc2.caretPositionFromPoint) {
      let pos = doc2.caretPositionFromPoint(x, y);
      if (pos)
        ({ offsetNode: node, offset } = pos);
    } else if (doc2.caretRangeFromPoint) {
      let range = doc2.caretRangeFromPoint(x, y);
      if (range) {
        ({ startContainer: node, startOffset: offset } = range);
        if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
          node = void 0;
      }
    }
    if (node)
      offset = Math.min(maxOffset(node), offset);
  }
  if (!node || !view.docView.dom.contains(node)) {
    let line = LineView.find(view.docView, lineStart);
    if (!line)
      return yOffset > block3.top + block3.height / 2 ? block3.to : block3.from;
    ({ node, offset } = domPosAtCoords(line.dom, x, y));
  }
  let nearest = view.docView.nearest(node);
  if (!nearest)
    return null;
  if (nearest.isWidget && ((_b2 = nearest.dom) === null || _b2 === void 0 ? void 0 : _b2.nodeType) == 1) {
    let rect2 = nearest.dom.getBoundingClientRect();
    return coords.y < rect2.top || coords.y <= rect2.bottom && coords.x <= (rect2.left + rect2.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
  } else {
    return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
  }
}
function posAtCoordsImprecise(view, contentRect, block3, x, y) {
  let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block3.height > view.defaultLineHeight * 1.5) {
    let textHeight = view.viewState.heightOracle.textHeight;
    let line = Math.floor((y - block3.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  let content3 = view.state.sliceDoc(block3.from, block3.to);
  return block3.from + findColumn(content3, into, view.state.tabSize);
}
function isSuspiciousSafariCaretResult(node, offset, x) {
  let len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
    return false;
  for (let next2 = node.nextSibling; next2; next2 = next2.nextSibling)
    if (next2.nodeType != 1 || next2.nodeName != "BR")
      return false;
  return textRange(node, len - 1, len).getBoundingClientRect().left > x;
}
function isSuspiciousChromeCaretResult(node, offset, x) {
  if (offset != 0)
    return false;
  for (let cur2 = node; ; ) {
    let parent = cur2.parentNode;
    if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
      return false;
    if (parent.classList.contains("cm-line"))
      break;
    cur2 = parent;
  }
  let rect2 = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
  return x - rect2.left > 5;
}
function blockAt(view, pos, side) {
  let line = view.lineBlockAt(pos);
  if (Array.isArray(line.type)) {
    let best;
    for (let l of line.type) {
      if (l.from > pos)
        break;
      if (l.to < pos)
        continue;
      if (l.from < pos && l.to > pos)
        return l;
      if (!best || l.type == BlockType.Text && (best.type != l.type || (side < 0 ? l.from < pos : l.to > pos)))
        best = l;
    }
    return best || line;
  }
  return line;
}
function moveToLineBoundary(view, start2, forward, includeWrap) {
  let line = blockAt(view, start2.head, start2.assoc || -1);
  let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null : view.coordsAtPos(start2.assoc < 0 && start2.head > line.from ? start2.head - 1 : start2.head);
  if (coords) {
    let editorRect = view.dom.getBoundingClientRect();
    let direction = view.textDirectionAt(line.from);
    let pos = view.posAtCoords({
      x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null)
      return EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
}
function moveByChar(view, start2, forward, by) {
  let line = view.state.doc.lineAt(start2.head), spans = view.bidiSpans(line);
  let direction = view.textDirectionAt(line.from);
  for (let cur2 = start2, check = null; ; ) {
    let next2 = moveVisually(line, spans, direction, cur2, forward), char = movedOver;
    if (!next2) {
      if (line.number == (forward ? view.state.doc.lines : 1))
        return cur2;
      char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next2 = view.visualLineSide(line, !forward);
    }
    if (!check) {
      if (!by)
        return next2;
      check = by(char);
    } else if (!check(char)) {
      return cur2;
    }
    cur2 = next2;
  }
}
function byGroup(view, pos, start2) {
  let categorize = view.state.charCategorizer(pos);
  let cat = categorize(start2);
  return (next2) => {
    let nextCat = categorize(next2);
    if (cat == CharCategory.Space)
      cat = nextCat;
    return cat == nextCat;
  };
}
function moveVertically(view, start2, forward, distance) {
  let startPos = start2.head, dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0))
    return EditorSelection.cursor(startPos, start2.assoc);
  let goal = start2.goalColumn, startY;
  let rect2 = view.contentDOM.getBoundingClientRect();
  let startCoords = view.coordsAtPos(startPos, start2.assoc || -1), docTop = view.documentTop;
  if (startCoords) {
    if (goal == null)
      goal = startCoords.left - rect2.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    let line = view.viewState.lineBlockAt(startPos);
    if (goal == null)
      goal = Math.min(rect2.right - rect2.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = (dir < 0 ? line.top : line.bottom) + docTop;
  }
  let resolvedGoal = rect2.left + goal;
  let dist2 = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
  for (let extra = 0; ; extra += 10) {
    let curY = startY + (dist2 + extra) * dir;
    let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
    if (curY < rect2.top || curY > rect2.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
      let charRect = view.docView.coordsForChar(pos);
      let assoc = !charRect || curY < charRect.top ? -1 : 1;
      return EditorSelection.cursor(pos, assoc, void 0, goal);
    }
  }
}
function skipAtomicRanges(atoms18, pos, bias) {
  for (; ; ) {
    let moved = 0;
    for (let set2 of atoms18) {
      set2.between(pos - 1, pos + 1, (from3, to, value) => {
        if (pos > from3 && pos < to) {
          let side = moved || bias || (pos - from3 < to - pos ? -1 : 1);
          pos = side < 0 ? from3 : to;
          moved = side;
        }
      });
    }
    if (!moved)
      return pos;
  }
}
function skipAtoms(view, oldPos, pos) {
  let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f) => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
  return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
}
function isAtEnd(parent, node, offset) {
  for (; ; ) {
    if (!node || offset < maxOffset(node))
      return false;
    if (node == parent)
      return true;
    offset = domIndex(node) + 1;
    node = node.parentNode;
  }
}
function applyDOMChange(view, domChange) {
  let change;
  let { newSel } = domChange, sel = view.state.selection.main;
  let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
  if (domChange.bounds) {
    let { from: from3, to } = domChange.bounds;
    let preferredPos = sel.from, preferredSide = null;
    if (lastKey === 8 || browser.android && domChange.text.length < to - from3) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    let diff2 = findDiff(view.state.doc.sliceString(from3, to, LineBreakPlaceholder), domChange.text, preferredPos - from3, preferredSide);
    if (diff2) {
      if (browser.chrome && lastKey == 13 && diff2.toB == diff2.from + 2 && domChange.text.slice(diff2.from, diff2.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
        diff2.toB--;
      change = {
        from: from3 + diff2.from,
        to: from3 + diff2.toA,
        insert: Text.of(domChange.text.slice(diff2.from, diff2.toB).split(LineBreakPlaceholder))
      };
    }
  } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
    newSel = null;
  }
  if (!change && !newSel)
    return false;
  if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
    change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
  } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
    if (newSel && change.insert.length == 2)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: change.from, to: change.to, insert: Text.of([change.insert.toString().replace(".", " ")]) };
  } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
    change = {
      from: sel.from,
      to: sel.to,
      insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
    };
  } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
    if (newSel)
      newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
    change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
  }
  if (change) {
    return applyDOMChangeInner(view, change, newSel, lastKey);
  } else if (newSel && !newSel.main.eq(sel)) {
    let scrollIntoView3 = false, userEvent = "select";
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "select")
        scrollIntoView3 = true;
      userEvent = view.inputState.lastSelectionOrigin;
    }
    view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView3, userEvent });
    return true;
  } else {
    return false;
  }
}
function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
  if (browser.ios && view.inputState.flushIOSKey(change))
    return true;
  let sel = view.state.selection.main;
  if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
  // after a completion when you press enter
  (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
    return true;
  let text5 = change.insert.toString();
  if (view.inputState.composing >= 0)
    view.inputState.composing++;
  let defaultTr;
  let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
  if (!view.state.facet(inputHandler).some((h) => h(view, change.from, change.to, text5, defaultInsert)))
    view.dispatch(defaultInsert());
  return true;
}
function applyDefaultInsert(view, change, newSel) {
  let tr, startState2 = view.state, sel = startState2.selection.main;
  if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
    let before = sel.from < change.from ? startState2.sliceDoc(sel.from, change.from) : "";
    let after = sel.to > change.to ? startState2.sliceDoc(change.to, sel.to) : "";
    tr = startState2.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
  } else {
    let changes = startState2.changes(change);
    let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
    if (startState2.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
      let replaced = view.state.sliceDoc(change.from, change.to);
      let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
      if (composition) {
        let dLen = change.insert.length - (change.to - change.from);
        compositionRange = { from: composition.from, to: composition.to - dLen };
      } else {
        compositionRange = view.state.doc.lineAt(sel.head);
      }
      let offset = sel.to - change.to, size = sel.to - sel.from;
      tr = startState2.changeByRange((range) => {
        if (range.from == sel.from && range.to == sel.to)
          return { changes, range: mainSel || range.map(changes) };
        let to = range.to - offset, from3 = to - replaced.length;
        if (range.to - range.from != size || view.state.sliceDoc(from3, to) != replaced || // Unfortunately, there's no way to make multiple
        // changes in the same node work without aborting
        // composition, so cursors in the composition range are
        // ignored.
        range.to >= compositionRange.from && range.from <= compositionRange.to)
          return { range };
        let rangeChanges = startState2.changes({ from: from3, to, insert: change.insert }), selOff = range.to - sel.to;
        return {
          changes: rangeChanges,
          range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
        };
      });
    } else {
      tr = {
        changes,
        selection: mainSel && startState2.selection.replaceRange(mainSel)
      };
    }
  }
  let userEvent = "input.type";
  if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
    view.inputState.compositionPendingChange = false;
    userEvent += ".compose";
    if (view.inputState.compositionFirstChange) {
      userEvent += ".start";
      view.inputState.compositionFirstChange = false;
    }
  }
  return startState2.update(tr, { userEvent, scrollIntoView: true });
}
function findDiff(a2, b, preferredPos, preferredSide) {
  let minLen = Math.min(a2.length, b.length);
  let from3 = 0;
  while (from3 < minLen && a2.charCodeAt(from3) == b.charCodeAt(from3))
    from3++;
  if (from3 == minLen && a2.length == b.length)
    return null;
  let toA = a2.length, toB = b.length;
  while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    let adjust = Math.max(0, from3 - Math.min(toA, toB));
    preferredPos -= toA + adjust - from3;
  }
  if (toA < from3 && a2.length < b.length) {
    let move = preferredPos <= from3 && preferredPos >= toA ? from3 - preferredPos : 0;
    from3 -= move;
    toB = from3 + (toB - toA);
    toA = from3;
  } else if (toB < from3) {
    let move = preferredPos <= from3 && preferredPos >= toB ? from3 - preferredPos : 0;
    from3 -= move;
    toA = from3 + (toA - toB);
    toB = from3;
  }
  return { from: from3, toA, toB };
}
function selectionPoints(view) {
  let result = [];
  if (view.root.activeElement != view.contentDOM)
    return result;
  let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset)
      result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base5) {
  if (points.length == 0)
    return null;
  let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base5, head + base5) : null;
}
function bindHandler(plugin, handler) {
  return (view, event) => {
    try {
      return handler.call(plugin, event, view);
    } catch (e) {
      logException(view.state, e);
    }
  };
}
function computeHandlers(plugins) {
  let result = /* @__PURE__ */ Object.create(null);
  function record(type7) {
    return result[type7] || (result[type7] = { observers: [], handlers: [] });
  }
  for (let plugin of plugins) {
    let spec = plugin.spec;
    if (spec && spec.domEventHandlers)
      for (let type7 in spec.domEventHandlers) {
        let f = spec.domEventHandlers[type7];
        if (f)
          record(type7).handlers.push(bindHandler(plugin.value, f));
      }
    if (spec && spec.domEventObservers)
      for (let type7 in spec.domEventObservers) {
        let f = spec.domEventObservers[type7];
        if (f)
          record(type7).observers.push(bindHandler(plugin.value, f));
      }
  }
  for (let type7 in handlers)
    record(type7).handlers.push(handlers[type7]);
  for (let type7 in observers)
    record(type7).observers.push(observers[type7]);
  return result;
}
function dragScrollSpeed(dist2) {
  return Math.max(0, dist2) * 0.7 + 8;
}
function dist(a2, b) {
  return Math.max(Math.abs(a2.clientX - b.clientX), Math.abs(a2.clientY - b.clientY));
}
function addsSelectionRange(view, event) {
  let facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  let facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  let { main } = view.state.selection;
  if (main.empty)
    return false;
  let sel = getSelection(view.root);
  if (!sel || sel.rangeCount == 0)
    return true;
  let rects = sel.getRangeAt(0).getClientRects();
  for (let i = 0; i < rects.length; i++) {
    let rect2 = rects[i];
    if (rect2.left <= event.clientX && rect2.right >= event.clientX && rect2.top <= event.clientY && rect2.bottom >= event.clientY)
      return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
    if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
      return false;
  return true;
}
function capturePaste(view) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function textFilter(state, facet, text5) {
  for (let filter2 of state.facet(facet))
    text5 = filter2(text5, state);
  return text5;
}
function doPaste(view, input) {
  input = textFilter(view.state, clipboardInputFilter, input);
  let { state } = view, changes, i = 1, text5 = state.toText(input);
  let byLine = text5.lines == state.selection.ranges.length;
  let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text5.toString();
  if (linewise) {
    let lastLine = -1;
    changes = state.changeByRange((range) => {
      let line = state.doc.lineAt(range.from);
      if (line.from == lastLine)
        return { range };
      lastLine = line.from;
      let insert2 = state.toText((byLine ? text5.line(i++).text : input) + state.lineBreak);
      return {
        changes: { from: line.from, insert: insert2 },
        range: EditorSelection.cursor(range.from + insert2.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange((range) => {
      let line = text5.line(i++);
      return {
        changes: { from: range.from, to: range.to, insert: line.text },
        range: EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text5);
  }
  view.dispatch(changes, {
    userEvent: "input.paste",
    scrollIntoView: true
  });
}
function rangeForClick(view, pos, bias, type7) {
  if (type7 == 1) {
    return EditorSelection.cursor(pos, bias);
  } else if (type7 == 2) {
    return groupAt(view.state, pos, bias);
  } else {
    let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    let from3 = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to)
      to++;
    return EditorSelection.range(from3, to);
  }
}
function findPositionSide(view, pos, x, y) {
  let line = LineView.find(view.docView, pos);
  if (!line)
    return 1;
  let off = pos - line.posAtStart;
  if (off == 0)
    return 1;
  if (off == line.length)
    return -1;
  let before = line.coordsAt(off, -1);
  if (before && inside(x, y, before))
    return -1;
  let after = line.coordsAt(off, 1);
  if (after && inside(x, y, after))
    return 1;
  return before && before.bottom >= y ? -1 : 1;
}
function queryPos(view, event) {
  let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
}
function getClickType(event) {
  if (!BadMouseDetail)
    return event.detail;
  let last = lastMouseDown, lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  let start2 = queryPos(view, event), type7 = getClickType(event);
  let startSel = view.state.selection;
  return {
    update(update) {
      if (update.docChanged) {
        start2.pos = update.changes.mapPos(start2.pos);
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, extend, multiple) {
      let cur2 = queryPos(view, event2), removed;
      let range = rangeForClick(view, cur2.pos, cur2.bias, type7);
      if (start2.pos != cur2.pos && !extend) {
        let startRange = rangeForClick(view, start2.pos, start2.bias, type7);
        let from3 = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
        range = from3 < range.from ? EditorSelection.range(from3, to) : EditorSelection.range(to, from3);
      }
      if (extend)
        return startSel.replaceRange(startSel.main.extend(range.from, range.to));
      else if (multiple && type7 == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
        return removed;
      else if (multiple)
        return startSel.addRange(range);
      else
        return EditorSelection.create([range]);
    }
  };
}
function removeRangeAround(sel, pos) {
  for (let i = 0; i < sel.ranges.length; i++) {
    let { from: from3, to } = sel.ranges[i];
    if (from3 <= pos && to >= pos)
      return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
  }
  return null;
}
function dropText(view, event, text5, direct) {
  text5 = textFilter(view.state, clipboardInputFilter, text5);
  if (!text5)
    return;
  let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let { draggedContent } = view.inputState;
  let del = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
  let ins = { from: dropPos, insert: text5 };
  let changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes,
    selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
    userEvent: del ? "move.drop" : "input.drop"
  });
  view.inputState.draggedContent = null;
}
function captureCopy(view, text5) {
  let parent = view.dom.parentNode;
  if (!parent)
    return;
  let target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text5;
  target.focus();
  target.selectionEnd = text5.length;
  target.selectionStart = 0;
  setTimeout(() => {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  let content3 = [], ranges = [], linewise = false;
  for (let range of state.selection.ranges)
    if (!range.empty) {
      content3.push(state.sliceDoc(range.from, range.to));
      ranges.push(range);
    }
  if (!content3.length) {
    let upto = -1;
    for (let { from: from3 } of state.selection.ranges) {
      let line = state.doc.lineAt(from3);
      if (line.number > upto) {
        content3.push(line.text);
        ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
      }
      upto = line.number;
    }
    linewise = true;
  }
  return { text: textFilter(state, clipboardOutputFilter, content3.join(state.lineBreak)), ranges, linewise };
}
function focusChangeTransaction(state, focus) {
  let effects = [];
  for (let getEffect of state.facet(focusChangeEffect)) {
    let effect = getEffect(state, focus);
    if (effect)
      effects.push(effect);
  }
  return effects.length ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
}
function updateForFocusChange(view) {
  setTimeout(() => {
    let focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      let tr = focusChangeTransaction(view.state, focus);
      if (tr)
        view.dispatch(tr);
      else
        view.update([]);
    }
  }, 10);
}
function firefoxCopyCutHack(doc2) {
  if (!appliedFirefoxHack.has(doc2)) {
    appliedFirefoxHack.add(doc2);
    doc2.addEventListener("copy", () => {
    });
    doc2.addEventListener("cut", () => {
    });
  }
}
function clearHeightChangeFlag() {
  heightChangeFlag = false;
}
function replace(old, val) {
  if (old == val)
    return old;
  if (old.constructor != val.constructor)
    heightChangeFlag = true;
  return val;
}
function mergeGaps(nodes, around) {
  let before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
    nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
function heightRelevantDecoChanges(a2, b, diff2) {
  let comp = new DecorationComparator2();
  RangeSet.compare(a2, b, diff2, comp, 0);
  return comp.changes;
}
function visiblePixelRange(dom, paddingTop) {
  let rect2 = dom.getBoundingClientRect();
  let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
  let left = Math.max(0, rect2.left), right = Math.min(win.innerWidth, rect2.right);
  let top3 = Math.max(0, rect2.top), bottom = Math.min(win.innerHeight, rect2.bottom);
  for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
    if (parent.nodeType == 1) {
      let elt2 = parent;
      let style2 = window.getComputedStyle(elt2);
      if ((elt2.scrollHeight > elt2.clientHeight || elt2.scrollWidth > elt2.clientWidth) && style2.overflow != "visible") {
        let parentRect = elt2.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top3 = Math.max(top3, parentRect.top);
        bottom = Math.min(parent == dom.parentNode ? win.innerHeight : bottom, parentRect.bottom);
      }
      parent = style2.position == "absolute" || style2.position == "fixed" ? elt2.offsetParent : elt2.parentNode;
    } else if (parent.nodeType == 11) {
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect2.left,
    right: Math.max(left, right) - rect2.left,
    top: top3 - (rect2.top + paddingTop),
    bottom: Math.max(top3, bottom) - (rect2.top + paddingTop)
  };
}
function inWindow(elt2) {
  let rect2 = elt2.getBoundingClientRect(), win = elt2.ownerDocument.defaultView || window;
  return rect2.left < win.innerWidth && rect2.right > 0 && rect2.top < win.innerHeight && rect2.bottom > 0;
}
function fullPixelRange(dom, paddingTop) {
  let rect2 = dom.getBoundingClientRect();
  return {
    left: 0,
    right: rect2.right - rect2.left,
    top: paddingTop,
    bottom: rect2.bottom - (rect2.top + paddingTop)
  };
}
function lineStructure(from3, to, stateDeco) {
  let ranges = [], pos = from3, total = 0;
  RangeSet.spans(stateDeco, from3, to, {
    span() {
    },
    point(from4, to2) {
      if (from4 > pos) {
        ranges.push({ from: pos, to: from4 });
        total += from4 - pos;
      }
      pos = to2;
    }
  }, 20);
  if (pos < to) {
    ranges.push({ from: pos, to });
    total += to - pos;
  }
  return { total, ranges };
}
function findPosition({ total, ranges }, ratio) {
  if (ratio <= 0)
    return ranges[0].from;
  if (ratio >= 1)
    return ranges[ranges.length - 1].to;
  let dist2 = Math.floor(total * ratio);
  for (let i = 0; ; i++) {
    let { from: from3, to } = ranges[i], size = to - from3;
    if (dist2 <= size)
      return from3 + dist2;
    dist2 -= size;
  }
}
function findFraction(structure, pos) {
  let counted = 0;
  for (let { from: from3, to } of structure.ranges) {
    if (pos <= to) {
      counted += pos - from3;
      break;
    }
    counted += to - from3;
  }
  return counted / structure.total;
}
function find(array2, f) {
  for (let val of array2)
    if (f(val))
      return val;
  return void 0;
}
function scaleBlock(block3, scaler) {
  if (scaler.scale == 1)
    return block3;
  let bTop = scaler.toDOM(block3.top), bBottom = scaler.toDOM(block3.bottom);
  return new BlockInfo(block3.from, block3.length, bTop, bBottom - bTop, Array.isArray(block3._content) ? block3._content.map((b) => scaleBlock(b, scaler)) : block3._content);
}
function buildTheme(main, spec, scopes) {
  return new StyleModule(spec, {
    finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, (m) => {
        if (m == "&")
          return main;
        if (!scopes || !scopes[m])
          throw new RangeError(`Unsupported selector: ${m}`);
        return scopes[m];
      }) : main + " " + sel;
    }
  });
}
function findChild(cView, dom, dir) {
  while (dom) {
    let curView = ContentView.get(dom);
    if (curView && curView.parent == cView)
      return curView;
    let parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function buildSelectionRangeFromRange(view, range) {
  let anchorNode = range.startContainer, anchorOffset = range.startOffset;
  let focusNode = range.endContainer, focusOffset = range.endOffset;
  let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function safariSelectionRangeHack(view, selection2) {
  if (selection2.getComposedRanges) {
    let range = selection2.getComposedRanges(view.root)[0];
    if (range)
      return buildSelectionRangeFromRange(view, range);
  }
  let found = null;
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  view.dom.ownerDocument.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  return found ? buildSelectionRangeFromRange(view, found) : null;
}
function attrsFromFacet(view, facet, base5) {
  for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
    let source = sources[i], value = typeof source == "function" ? source(view) : source;
    if (value)
      combineAttrs(value, base5);
  }
  return base5;
}
function normalizeKeyName(name2, platform) {
  const parts = name2.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt2, ctrl, shift2, meta2;
  for (let i = 0; i < parts.length - 1; ++i) {
    const mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt2 = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift2 = true;
    else if (/^mod$/i.test(mod)) {
      if (platform == "mac")
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt2)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift2)
    result = "Shift-" + result;
  return result;
}
function modifiers(name2, event, shift2) {
  if (event.altKey)
    name2 = "Alt-" + name2;
  if (event.ctrlKey)
    name2 = "Ctrl-" + name2;
  if (event.metaKey)
    name2 = "Meta-" + name2;
  if (shift2 !== false && event.shiftKey)
    name2 = "Shift-" + name2;
  return name2;
}
function getKeymap(state) {
  let bindings = state.facet(keymap);
  let map = Keymaps.get(bindings);
  if (!map)
    Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a2, b) => a2.concat(b), [])));
  return map;
}
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
function buildKeymap(bindings, platform = currentPlatform) {
  let bound = /* @__PURE__ */ Object.create(null);
  let isPrefix = /* @__PURE__ */ Object.create(null);
  let checkPrefix = (name2, is2) => {
    let current = isPrefix[name2];
    if (current == null)
      isPrefix[name2] = is2;
    else if (current != is2)
      throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
  };
  let add3 = (scope, key, command3, preventDefault, stopPropagation) => {
    var _a2, _b2;
    let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
    let parts = key.split(/ (?!$)/).map((k) => normalizeKeyName(k, platform));
    for (let i = 1; i < parts.length; i++) {
      let prefix2 = parts.slice(0, i).join(" ");
      checkPrefix(prefix2, true);
      if (!scopeObj[prefix2])
        scopeObj[prefix2] = {
          preventDefault: true,
          stopPropagation: false,
          run: [(view) => {
            let ourObj = storedPrefix = { view, prefix: prefix2, scope };
            setTimeout(() => {
              if (storedPrefix == ourObj)
                storedPrefix = null;
            }, PrefixTimeout);
            return true;
          }]
        };
    }
    let full = parts.join(" ");
    checkPrefix(full, false);
    let binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      stopPropagation: false,
      run: ((_b2 = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b2 === void 0 ? void 0 : _b2.slice()) || []
    });
    if (command3)
      binding.run.push(command3);
    if (preventDefault)
      binding.preventDefault = true;
    if (stopPropagation)
      binding.stopPropagation = true;
  };
  for (let b of bindings) {
    let scopes = b.scope ? b.scope.split(" ") : ["editor"];
    if (b.any)
      for (let scope of scopes) {
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        if (!scopeObj._any)
          scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
        let { any } = b;
        for (let key in scopeObj)
          scopeObj[key].run.push((view) => any(view, currentKeyEvent));
      }
    let name2 = b[platform] || b.key;
    if (!name2)
      continue;
    for (let scope of scopes) {
      add3(scope, name2, b.run, b.preventDefault, b.stopPropagation);
      if (b.shift)
        add3(scope, "Shift-" + name2, b.shift, b.preventDefault, b.stopPropagation);
    }
  }
  return bound;
}
function runHandlers(map, event, view, scope) {
  currentKeyEvent = event;
  let name2 = keyName(event);
  let charCode = codePointAt2(name2, 0), isChar = codePointSize2(charCode) == name2.length && name2 != " ";
  let prefix2 = "", handled = false, prevented = false, stopPropagation = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix2 = storedPrefix.prefix + " ";
    if (modifierCodes.indexOf(event.keyCode) < 0) {
      prevented = true;
      storedPrefix = null;
    }
  }
  let ran = /* @__PURE__ */ new Set();
  let runFor = (binding) => {
    if (binding) {
      for (let cmd2 of binding.run)
        if (!ran.has(cmd2)) {
          ran.add(cmd2);
          if (cmd2(view)) {
            if (binding.stopPropagation)
              stopPropagation = true;
            return true;
          }
        }
      if (binding.preventDefault) {
        if (binding.stopPropagation)
          stopPropagation = true;
        prevented = true;
      }
    }
    return false;
  };
  let scopeObj = map[scope], baseName, shiftName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix2 + modifiers(name2, event, !isChar)])) {
      handled = true;
    } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
    !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
      if (runFor(scopeObj[prefix2 + modifiers(baseName, event, true)])) {
        handled = true;
      } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix2 + modifiers(shiftName, event, false)])) {
        handled = true;
      }
    } else if (isChar && event.shiftKey && runFor(scopeObj[prefix2 + modifiers(name2, event, true)])) {
      handled = true;
    }
    if (!handled && runFor(scopeObj._any))
      handled = true;
  }
  if (prevented)
    handled = true;
  if (handled && stopPropagation)
    event.stopPropagation();
  currentKeyEvent = null;
  return handled;
}
function getBase(view) {
  let rect2 = view.scrollDOM.getBoundingClientRect();
  let left = view.textDirection == Direction.LTR ? rect2.left : rect2.right - view.scrollDOM.clientWidth * view.scaleX;
  return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect2.top - view.scrollDOM.scrollTop * view.scaleY };
}
function wrappedLine(view, pos, side, inside2) {
  let coords = view.coordsAtPos(pos, side * 2);
  if (!coords)
    return inside2;
  let editorRect = view.dom.getBoundingClientRect();
  let y = (coords.top + coords.bottom) / 2;
  let left = view.posAtCoords({ x: editorRect.left + 1, y });
  let right = view.posAtCoords({ x: editorRect.right - 1, y });
  if (left == null || right == null)
    return inside2;
  return { from: Math.max(inside2.from, Math.min(left, right)), to: Math.min(inside2.to, Math.max(left, right)) };
}
function rectanglesForRange(view, className2, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to)
    return [];
  let from3 = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
  let ltr = view.textDirection == Direction.LTR;
  let content3 = view.contentDOM, contentRect = content3.getBoundingClientRect(), base5 = getBase(view);
  let lineElt = content3.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
  let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
  let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
  let startBlock = blockAt(view, from3, 1), endBlock = blockAt(view, to, -1);
  let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
    visualStart = wrappedLine(view, from3, 1, visualStart);
  if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
    visualEnd = wrappedLine(view, to, -1, visualEnd);
  if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    let top3 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    let between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top3.bottom + view.defaultLineHeight / 2 < bottom.top)
      between.push(piece(leftSide, top3.bottom, rightSide, bottom.top));
    else if (top3.bottom < bottom.top && view.elementAtHeight((top3.bottom + bottom.top) / 2).type == BlockType.Text)
      top3.bottom = bottom.top = (top3.bottom + bottom.top) / 2;
    return pieces(top3).concat(between).concat(pieces(bottom));
  }
  function piece(left, top3, right, bottom) {
    return new RectangleMarker(className2, left - base5.left, top3 - base5.top, right - left, bottom - top3);
  }
  function pieces({ top: top3, bottom, horizontal }) {
    let pieces2 = [];
    for (let i = 0; i < horizontal.length; i += 2)
      pieces2.push(piece(horizontal[i], top3, horizontal[i + 1], bottom));
    return pieces2;
  }
  function drawForLine(from4, to2, line) {
    let top3 = 1e9, bottom = -1e9, horizontal = [];
    function addSpan(from5, fromOpen, to3, toOpen, dir) {
      let fromCoords = view.coordsAtPos(from5, from5 == line.to ? -2 : 2);
      let toCoords = view.coordsAtPos(to3, to3 == line.from ? 2 : -2);
      if (!fromCoords || !toCoords)
        return;
      top3 = Math.min(fromCoords.top, toCoords.top, top3);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR)
        horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
      else
        horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    let start2 = from4 !== null && from4 !== void 0 ? from4 : line.from, end2 = to2 !== null && to2 !== void 0 ? to2 : line.to;
    for (let r2 of view.visibleRanges)
      if (r2.to > start2 && r2.from < end2) {
        for (let pos = Math.max(r2.from, start2), endPos = Math.min(r2.to, end2); ; ) {
          let docLine = view.state.doc.lineAt(pos);
          for (let span of view.bidiSpans(docLine)) {
            let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
            if (spanFrom >= endPos)
              break;
            if (spanTo > pos)
              addSpan(Math.max(spanFrom, pos), from4 == null && spanFrom <= start2, Math.min(spanTo, endPos), to2 == null && spanTo >= end2, span.dir);
          }
          pos = docLine.to + 1;
          if (pos >= endPos)
            break;
        }
      }
    if (horizontal.length == 0)
      addSpan(start2, from4 == null, end2, to2 == null, view.textDirection);
    return { top: top3, bottom, horizontal };
  }
  function drawForWidget(block3, top3) {
    let y = contentRect.top + (top3 ? block3.top : block3.bottom);
    return { top: y, bottom: y, horizontal: [] };
  }
}
function sameMarker(a2, b) {
  return a2.constructor == b.constructor && a2.eq(b);
}
function layer(config2) {
  return [
    ViewPlugin.define((v) => new LayerView(v, config2)),
    layerOrder.of(config2)
  ];
}
function drawSelection(config2 = {}) {
  return [
    selectionConfig.of(config2),
    cursorLayer,
    selectionLayer,
    hideNativeSelection,
    nativeSelectionHidden.of(true)
  ];
}
function configChanged(update) {
  return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
}
function setBlinkRate(state, dom) {
  dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
}
function dropCursor() {
  return [dropCursorPos, drawDropCursor];
}
function iterMatches(doc2, re, from3, to, f) {
  re.lastIndex = 0;
  for (let cursor2 = doc2.iterRange(from3, to), pos = from3, m; !cursor2.next().done; pos += cursor2.value.length) {
    if (!cursor2.lineBreak)
      while (m = re.exec(cursor2.value))
        f(pos + m.index, m);
  }
}
function matchRanges(view, maxLength) {
  let visible = view.visibleRanges;
  if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
    return visible;
  let result = [];
  for (let { from: from3, to } of visible) {
    from3 = Math.max(view.state.doc.lineAt(from3).from, from3 - maxLength);
    to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
    if (result.length && result[result.length - 1].to >= from3)
      result[result.length - 1].to = to;
    else
      result.push({ from: from3, to });
  }
  return result;
}
function supportsTabSize() {
  var _a2;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    let styles2 = document.body.style;
    _supportsTabSize = ((_a2 = styles2.tabSize) !== null && _a2 !== void 0 ? _a2 : styles2.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
function highlightSpecialChars(config2 = {}) {
  return [specialCharConfig.of(config2), specialCharPlugin()];
}
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = /* @__PURE__ */ Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    makeDecorator(conf) {
      return new MatchDecorator({
        regexp: conf.specialChars,
        decoration: (m, view, pos) => {
          let { doc: doc2 } = view.state;
          let code2 = codePointAt2(m[0], 0);
          if (code2 == 9) {
            let line = doc2.lineAt(pos);
            let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
            return Decoration.replace({
              widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
            });
          }
          return this.decorationCache[code2] || (this.decorationCache[code2] = Decoration.replace({ widget: new SpecialCharWidget(conf, code2) }));
        },
        boundary: conf.replaceTabs ? void 0 : /[^]/
      });
    }
    update(update) {
      let conf = update.state.facet(specialCharConfig);
      if (update.startState.facet(specialCharConfig) != conf) {
        this.decorator = this.makeDecorator(conf);
        this.decorations = this.decorator.createDeco(update.view);
      } else {
        this.decorations = this.decorator.updateDeco(update, this.decorations);
      }
    }
  }, {
    decorations: (v) => v.decorations
  }));
}
function placeholder$1(code2) {
  if (code2 >= 32)
    return DefaultPlaceholder;
  if (code2 == 10)
    return "\u2424";
  return String.fromCharCode(9216 + code2);
}
function highlightActiveLine() {
  return activeLineHighlighter;
}
function placeholder(content3) {
  return ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.placeholder = content3 ? Decoration.set([Decoration.widget({ widget: new Placeholder(content3), side: 1 }).range(0)]) : Decoration.none;
    }
    get decorations() {
      return this.view.state.doc.length ? Decoration.none : this.placeholder;
    }
  }, { decorations: (v) => v.decorations });
}
function rectangleFor(state, a2, b) {
  let startLine = Math.min(a2.line, b.line), endLine = Math.max(a2.line, b.line);
  let ranges = [];
  if (a2.off > MaxOff || b.off > MaxOff || a2.col < 0 || b.col < 0) {
    let startOff = Math.min(a2.off, b.off), endOff = Math.max(a2.off, b.off);
    for (let i = startLine; i <= endLine; i++) {
      let line = state.doc.line(i);
      if (line.length <= endOff)
        ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    let startCol = Math.min(a2.col, b.col), endCol = Math.max(a2.col, b.col);
    for (let i = startLine; i <= endLine; i++) {
      let line = state.doc.line(i);
      let start2 = findColumn(line.text, startCol, state.tabSize, true);
      if (start2 < 0) {
        ranges.push(EditorSelection.cursor(line.to));
      } else {
        let end2 = findColumn(line.text, endCol, state.tabSize);
        ranges.push(EditorSelection.range(line.from + start2, line.from + end2));
      }
    }
  }
  return ranges;
}
function absoluteColumn(view, x) {
  let ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
  let line = view.state.doc.lineAt(offset), off = offset - line.from;
  let col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : countColumn(line.text, view.state.tabSize, offset - line.from);
  return { line: line.number, col, off };
}
function rectangleSelectionStyle(view, event) {
  let start2 = getPos(view, event), startSel = view.state.selection;
  if (!start2)
    return null;
  return {
    update(update) {
      if (update.docChanged) {
        let newStart = update.changes.mapPos(update.startState.doc.line(start2.line).from);
        let newLine = update.state.doc.lineAt(newStart);
        start2 = { line: newLine.number, col: start2.col, off: Math.min(start2.off, newLine.length) };
        startSel = startSel.map(update.changes);
      }
    },
    get(event2, _extend, multiple) {
      let cur2 = getPos(view, event2);
      if (!cur2)
        return startSel;
      let ranges = rectangleFor(view.state, start2, cur2);
      if (!ranges.length)
        return startSel;
      if (multiple)
        return EditorSelection.create(ranges.concat(startSel.ranges));
      else
        return EditorSelection.create(ranges);
    }
  };
}
function rectangularSelection(options) {
  let filter2 = (options === null || options === void 0 ? void 0 : options.eventFilter) || ((e) => e.altKey && e.button == 0);
  return EditorView.mouseSelectionStyle.of((view, event) => filter2(event) ? rectangleSelectionStyle(view, event) : null);
}
function crosshairCursor(options = {}) {
  let [code2, getter] = keys[options.key || "Alt"];
  let plugin = ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.isDown = false;
    }
    set(isDown) {
      if (this.isDown != isDown) {
        this.isDown = isDown;
        this.view.update([]);
      }
    }
  }, {
    eventObservers: {
      keydown(e) {
        this.set(e.keyCode == code2 || getter(e));
      },
      keyup(e) {
        if (e.keyCode == code2 || !getter(e))
          this.set(false);
      },
      mousemove(e) {
        this.set(getter(e));
      }
    }
  });
  return [
    plugin,
    EditorView.contentAttributes.of((view) => {
      var _a2;
      return ((_a2 = view.plugin(plugin)) === null || _a2 === void 0 ? void 0 : _a2.isDown) ? showCrosshair : null;
    })
  ];
}
function windowSpace(view) {
  let docElt = view.dom.ownerDocument.documentElement;
  return { top: 0, left: 0, bottom: docElt.clientHeight, right: docElt.clientWidth };
}
function setLeftStyle(elt2, value) {
  let current = parseInt(elt2.style.left, 10);
  if (isNaN(current) || Math.abs(value - current) > 1)
    elt2.style.left = value + "px";
}
function isInTooltip(tooltip, event) {
  let { left, right, top: top3, bottom } = tooltip.getBoundingClientRect(), arrow;
  if (arrow = tooltip.querySelector(".cm-tooltip-arrow")) {
    let arrowRect = arrow.getBoundingClientRect();
    top3 = Math.min(arrowRect.top, top3);
    bottom = Math.max(arrowRect.bottom, bottom);
  }
  return event.clientX >= left - tooltipMargin && event.clientX <= right + tooltipMargin && event.clientY >= top3 - tooltipMargin && event.clientY <= bottom + tooltipMargin;
}
function isOverRange(view, from3, to, x, y, margin) {
  let rect2 = view.scrollDOM.getBoundingClientRect();
  let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
  if (rect2.left > x || rect2.right < x || rect2.top > y || Math.min(rect2.bottom, docBottom) < y)
    return false;
  let pos = view.posAtCoords({ x, y }, false);
  return pos >= from3 && pos <= to;
}
function hoverTooltip(source, options = {}) {
  let setHover = StateEffect.define();
  let hoverState = StateField.define({
    create() {
      return [];
    },
    update(value, tr) {
      if (value.length) {
        if (options.hideOnChange && (tr.docChanged || tr.selection))
          value = [];
        else if (options.hideOn)
          value = value.filter((v) => !options.hideOn(tr, v));
        if (tr.docChanged) {
          let mapped = [];
          for (let tooltip of value) {
            let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
            if (newPos != null) {
              let copy = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
              copy.pos = newPos;
              if (copy.end != null)
                copy.end = tr.changes.mapPos(copy.end);
              mapped.push(copy);
            }
          }
          value = mapped;
        }
      }
      for (let effect of tr.effects) {
        if (effect.is(setHover))
          value = effect.value;
        if (effect.is(closeHoverTooltipEffect))
          value = [];
      }
      return value;
    },
    provide: (f) => showHoverTooltip.from(f)
  });
  return {
    active: hoverState,
    extension: [
      hoverState,
      ViewPlugin.define((view) => new HoverPlugin(
        view,
        source,
        hoverState,
        setHover,
        options.hoverTime || 300
        /* Hover.Time */
      )),
      showHoverTooltipHost
    ]
  };
}
function getTooltip(view, tooltip) {
  let plugin = view.plugin(tooltipPlugin);
  if (!plugin)
    return null;
  let found = plugin.manager.tooltips.indexOf(tooltip);
  return found < 0 ? null : plugin.manager.tooltipViews[found];
}
function getPanel(view, panel) {
  let plugin = view.plugin(panelPlugin);
  let index = plugin ? plugin.specs.indexOf(panel) : -1;
  return index > -1 ? plugin.panels[index] : null;
}
function rm(node) {
  let next2 = node.nextSibling;
  node.remove();
  return next2;
}
function gutter(config2) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config2))];
}
function gutters(config2) {
  let result = [
    gutterView
  ];
  if (config2 && config2.fixed === false)
    result.push(unfixGutters.of(true));
  return result;
}
function asArray2(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor2, collect, pos) {
  while (cursor2.value && cursor2.from <= pos) {
    if (cursor2.from == pos)
      collect.push(cursor2.value);
    cursor2.next();
  }
}
function sameMarkers(a2, b) {
  if (a2.length != b.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (!a2[i].compare(b[i]))
      return false;
  return true;
}
function formatNumber(view, number3) {
  return view.state.facet(lineNumberConfig).formatNumber(number3, view.state);
}
function lineNumbers(config2 = {}) {
  return [
    lineNumberConfig.of(config2),
    gutters(),
    lineNumberGutter
  ];
}
function maxLineNumber(lines) {
  let last = 9;
  while (last < lines)
    last = last * 10 + 9;
  return last;
}
function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}
var DOMSelectionState, preventScrollSupported, scratchRange, DOMPos, noChildren, ContentView, ChildCursor, nav, doc, ie_edge, ie_upto10, ie_11up, ie2, gecko, chrome, webkit, safari, ios, browser, MaxJoinLen, TextView, MarkView, WidgetView, WidgetBufferView, noAttrs, WidgetType, BlockType, Decoration, MarkDecoration, LineDecoration, PointDecoration, LineView, BlockWidgetView, BlockGapWidget, ContentBuilder, NullWidget, Direction, LTR, RTL, LowTypes, ArabicTypes, Brackets, BracketStack, BidiRE, BidiSpan, types, movedOver, clickAddsSelectionRange, dragMovesSelection$1, mouseSelectionStyle, exceptionSink, updateListener, inputHandler, focusChangeEffect, clipboardInputFilter, clipboardOutputFilter, perLineTextDirection, nativeSelectionHidden, scrollHandler, ScrollTarget, scrollIntoView, setEditContextFormatting, editable, nextPluginID, viewPlugin, ViewPlugin, PluginInstance, editorAttributes, contentAttributes, decorations, outerDecorations, atomicRanges, bidiIsolatedRanges, scrollMargins, styleModule, ChangedRange, ViewUpdate, DocView, DecorationComparator$1, LineBreakPlaceholder, DOMReader, DOMPoint, DOMChange, InputState, PendingKeys, EmacsyPendingKeys, modifierCodes, dragScrollMargin, MouseSelection, handlers, observers, brokenClipboardAPI, inside, BadMouseDetail, lastMouseDown, lastMouseDownCount, lastMouseDownTime, lastLinewiseCopy, isFocusChange, appliedFirefoxHack, wrappingWhiteSpace, heightChangeFlag, HeightOracle, MeasuredHeights, BlockInfo, QueryType, Epsilon, HeightMap, HeightMapBlock, HeightMapText, HeightMapGap, HeightMapBranch, relevantWidgetHeight, NodeBuilder, DecorationComparator2, LineGap, LineGapWidget, ViewState, Viewport, IdScaler, BigScaler, theme, darkTheme, baseThemeID, baseLightID, baseDarkID, lightDarkIDs, baseTheme$1, observeOptions, useCharData, DOMObserver, EditContextManager, EditorView, MaxBidiLine, BadMeasure, CachedOrder, currentPlatform, handleKeyEvents, keymap, Keymaps, storedPrefix, PrefixTimeout, currentKeyEvent, RectangleMarker, LayerView, layerOrder, selectionConfig, cursorLayer, selectionLayer, hideNativeSelection, setDropCursorPos, dropCursorPos, drawDropCursor, MatchDecorator, UnicodeRegexpSupport, Specials, Names, _supportsTabSize, specialCharConfig, _plugin, DefaultPlaceholder, SpecialCharWidget, TabWidget, lineDeco, activeLineHighlighter, Placeholder, MaxOff, keys, showCrosshair, Outside, TooltipViewManager, tooltipConfig, knownHeight, tooltipPlugin, baseTheme, noOffset, showTooltip, showHoverTooltip, HoverTooltipHost, showHoverTooltipHost, HoverPlugin, tooltipMargin, closeHoverTooltipEffect, panelConfig, panelPlugin, PanelGroup, showPanel, GutterMarker, gutterLineClass, gutterWidgetClass, defaults, activeGutters, unfixGutters, gutterView, UpdateContext, SingleGutterView, GutterElement, lineNumberMarkers, lineNumberWidgetMarker, lineNumberConfig, NumberMarker, lineNumberGutter, activeLineGutterMarker, activeLineGutterHighlighter;
var init_dist3 = __esm({
  "../../node_modules/@codemirror/view/dist/index.js"() {
    init_dist2();
    init_style_mod();
    init_w3c_keyname();
    DOMSelectionState = class {
      constructor() {
        this.anchorNode = null;
        this.anchorOffset = 0;
        this.focusNode = null;
        this.focusOffset = 0;
      }
      eq(domSel) {
        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
      setRange(range) {
        let { anchorNode, focusNode } = range;
        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
      set(anchorNode, anchorOffset, focusNode, focusOffset) {
        this.anchorNode = anchorNode;
        this.anchorOffset = anchorOffset;
        this.focusNode = focusNode;
        this.focusOffset = focusOffset;
      }
    };
    preventScrollSupported = null;
    DOMPos = class _DOMPos {
      constructor(node, offset, precise = true) {
        this.node = node;
        this.offset = offset;
        this.precise = precise;
      }
      static before(dom, precise) {
        return new _DOMPos(dom.parentNode, domIndex(dom), precise);
      }
      static after(dom, precise) {
        return new _DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
      }
    };
    noChildren = [];
    ContentView = class _ContentView {
      constructor() {
        this.parent = null;
        this.dom = null;
        this.flags = 2;
      }
      get overrideDOMText() {
        return null;
      }
      get posAtStart() {
        return this.parent ? this.parent.posBefore(this) : 0;
      }
      get posAtEnd() {
        return this.posAtStart + this.length;
      }
      posBefore(view) {
        let pos = this.posAtStart;
        for (let child of this.children) {
          if (child == view)
            return pos;
          pos += child.length + child.breakAfter;
        }
        throw new RangeError("Invalid child in posBefore");
      }
      posAfter(view) {
        return this.posBefore(view) + view.length;
      }
      sync(view, track) {
        if (this.flags & 2) {
          let parent = this.dom;
          let prev = null, next2;
          for (let child of this.children) {
            if (child.flags & 7) {
              if (!child.dom && (next2 = prev ? prev.nextSibling : parent.firstChild)) {
                let contentView = _ContentView.get(next2);
                if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                  child.reuseDOM(next2);
              }
              child.sync(view, track);
              child.flags &= ~7;
            }
            next2 = prev ? prev.nextSibling : parent.firstChild;
            if (track && !track.written && track.node == parent && next2 != child.dom)
              track.written = true;
            if (child.dom.parentNode == parent) {
              while (next2 && next2 != child.dom)
                next2 = rm$1(next2);
            } else {
              parent.insertBefore(child.dom, next2);
            }
            prev = child.dom;
          }
          next2 = prev ? prev.nextSibling : parent.firstChild;
          if (next2 && track && track.node == parent)
            track.written = true;
          while (next2)
            next2 = rm$1(next2);
        } else if (this.flags & 1) {
          for (let child of this.children)
            if (child.flags & 7) {
              child.sync(view, track);
              child.flags &= ~7;
            }
        }
      }
      reuseDOM(_dom) {
      }
      localPosFromDOM(node, offset) {
        let after;
        if (node == this.dom) {
          after = this.dom.childNodes[offset];
        } else {
          let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
          for (; ; ) {
            let parent = node.parentNode;
            if (parent == this.dom)
              break;
            if (bias == 0 && parent.firstChild != parent.lastChild) {
              if (node == parent.firstChild)
                bias = -1;
              else
                bias = 1;
            }
            node = parent;
          }
          if (bias < 0)
            after = node;
          else
            after = node.nextSibling;
        }
        if (after == this.dom.firstChild)
          return 0;
        while (after && !_ContentView.get(after))
          after = after.nextSibling;
        if (!after)
          return this.length;
        for (let i = 0, pos = 0; ; i++) {
          let child = this.children[i];
          if (child.dom == after)
            return pos;
          pos += child.length + child.breakAfter;
        }
      }
      domBoundsAround(from3, to, offset = 0) {
        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
          let child = this.children[i], end2 = pos + child.length;
          if (pos < from3 && end2 > to)
            return child.domBoundsAround(from3, to, pos);
          if (end2 >= from3 && fromI == -1) {
            fromI = i;
            fromStart = pos;
          }
          if (pos > to && child.dom.parentNode == this.dom) {
            toI = i;
            toEnd = prevEnd;
            break;
          }
          prevEnd = end2;
          pos = end2 + child.breakAfter;
        }
        return {
          from: fromStart,
          to: toEnd < 0 ? offset + this.length : toEnd,
          startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
          endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
        };
      }
      markDirty(andParent = false) {
        this.flags |= 2;
        this.markParentsDirty(andParent);
      }
      markParentsDirty(childList) {
        for (let parent = this.parent; parent; parent = parent.parent) {
          if (childList)
            parent.flags |= 2;
          if (parent.flags & 1)
            return;
          parent.flags |= 1;
          childList = false;
        }
      }
      setParent(parent) {
        if (this.parent != parent) {
          this.parent = parent;
          if (this.flags & 7)
            this.markParentsDirty(true);
        }
      }
      setDOM(dom) {
        if (this.dom == dom)
          return;
        if (this.dom)
          this.dom.cmView = null;
        this.dom = dom;
        dom.cmView = this;
      }
      get rootView() {
        for (let v = this; ; ) {
          let parent = v.parent;
          if (!parent)
            return v;
          v = parent;
        }
      }
      replaceChildren(from3, to, children = noChildren) {
        this.markDirty();
        for (let i = from3; i < to; i++) {
          let child = this.children[i];
          if (child.parent == this && children.indexOf(child) < 0)
            child.destroy();
        }
        if (children.length < 250)
          this.children.splice(from3, to - from3, ...children);
        else
          this.children = [].concat(this.children.slice(0, from3), children, this.children.slice(to));
        for (let i = 0; i < children.length; i++)
          children[i].setParent(this);
      }
      ignoreMutation(_rec) {
        return false;
      }
      ignoreEvent(_event) {
        return false;
      }
      childCursor(pos = this.length) {
        return new ChildCursor(this.children, pos, this.children.length);
      }
      childPos(pos, bias = 1) {
        return this.childCursor().findPos(pos, bias);
      }
      toString() {
        let name2 = this.constructor.name.replace("View", "");
        return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
      }
      static get(node) {
        return node.cmView;
      }
      get isEditable() {
        return true;
      }
      get isWidget() {
        return false;
      }
      get isHidden() {
        return false;
      }
      merge(from3, to, source, hasStart, openStart, openEnd) {
        return false;
      }
      become(other) {
        return false;
      }
      canReuseDOM(other) {
        return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
      getSide() {
        return 0;
      }
      destroy() {
        for (let child of this.children)
          if (child.parent == this)
            child.destroy();
        this.parent = null;
      }
    };
    ContentView.prototype.breakAfter = 0;
    ChildCursor = class {
      constructor(children, pos, i) {
        this.children = children;
        this.pos = pos;
        this.i = i;
        this.off = 0;
      }
      findPos(pos, bias = 1) {
        for (; ; ) {
          if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
            this.off = pos - this.pos;
            return this;
          }
          let next2 = this.children[--this.i];
          this.pos -= next2.length + next2.breakAfter;
        }
      }
    };
    nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
    ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
    ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    ie2 = !!(ie_upto10 || ie_11up || ie_edge);
    gecko = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
    chrome = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
    webkit = "webkitFontSmoothing" in doc.documentElement.style;
    safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
    ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    browser = {
      mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
      windows: /* @__PURE__ */ /Win/.test(nav.platform),
      linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
      ie: ie2,
      ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
      gecko,
      gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      chrome: !!chrome,
      chrome_version: chrome ? +chrome[1] : 0,
      ios,
      android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
      webkit,
      safari,
      webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };
    MaxJoinLen = 256;
    TextView = class _TextView extends ContentView {
      constructor(text5) {
        super();
        this.text = text5;
      }
      get length() {
        return this.text.length;
      }
      createDOM(textDOM) {
        this.setDOM(textDOM || document.createTextNode(this.text));
      }
      sync(view, track) {
        if (!this.dom)
          this.createDOM();
        if (this.dom.nodeValue != this.text) {
          if (track && track.node == this.dom)
            track.written = true;
          this.dom.nodeValue = this.text;
        }
      }
      reuseDOM(dom) {
        if (dom.nodeType == 3)
          this.createDOM(dom);
      }
      merge(from3, to, source) {
        if (this.flags & 8 || source && (!(source instanceof _TextView) || this.length - (to - from3) + source.length > MaxJoinLen || source.flags & 8))
          return false;
        this.text = this.text.slice(0, from3) + (source ? source.text : "") + this.text.slice(to);
        this.markDirty();
        return true;
      }
      split(from3) {
        let result = new _TextView(this.text.slice(from3));
        this.text = this.text.slice(0, from3);
        this.markDirty();
        result.flags |= this.flags & 8;
        return result;
      }
      localPosFromDOM(node, offset) {
        return node == this.dom ? offset : offset ? this.text.length : 0;
      }
      domAtPos(pos) {
        return new DOMPos(this.dom, pos);
      }
      domBoundsAround(_from, _to, offset) {
        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
      }
      coordsAt(pos, side) {
        return textCoords(this.dom, pos, side);
      }
    };
    MarkView = class _MarkView extends ContentView {
      constructor(mark, children = [], length = 0) {
        super();
        this.mark = mark;
        this.children = children;
        this.length = length;
        for (let ch2 of children)
          ch2.setParent(this);
      }
      setAttrs(dom) {
        clearAttributes(dom);
        if (this.mark.class)
          dom.className = this.mark.class;
        if (this.mark.attrs)
          for (let name2 in this.mark.attrs)
            dom.setAttribute(name2, this.mark.attrs[name2]);
        return dom;
      }
      canReuseDOM(other) {
        return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
      }
      reuseDOM(node) {
        if (node.nodeName == this.mark.tagName.toUpperCase()) {
          this.setDOM(node);
          this.flags |= 4 | 2;
        }
      }
      sync(view, track) {
        if (!this.dom)
          this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
        else if (this.flags & 4)
          this.setAttrs(this.dom);
        super.sync(view, track);
      }
      merge(from3, to, source, _hasStart, openStart, openEnd) {
        if (source && (!(source instanceof _MarkView && source.mark.eq(this.mark)) || from3 && openStart <= 0 || to < this.length && openEnd <= 0))
          return false;
        mergeChildrenInto(this, from3, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
        this.markDirty();
        return true;
      }
      split(from3) {
        let result = [], off = 0, detachFrom = -1, i = 0;
        for (let elt2 of this.children) {
          let end2 = off + elt2.length;
          if (end2 > from3)
            result.push(off < from3 ? elt2.split(from3 - off) : elt2);
          if (detachFrom < 0 && off >= from3)
            detachFrom = i;
          off = end2;
          i++;
        }
        let length = this.length - from3;
        this.length = from3;
        if (detachFrom > -1) {
          this.children.length = detachFrom;
          this.markDirty();
        }
        return new _MarkView(this.mark, result, length);
      }
      domAtPos(pos) {
        return inlineDOMAtPos(this, pos);
      }
      coordsAt(pos, side) {
        return coordsInChildren(this, pos, side);
      }
    };
    WidgetView = class _WidgetView extends ContentView {
      static create(widget, length, side) {
        return new _WidgetView(widget, length, side);
      }
      constructor(widget, length, side) {
        super();
        this.widget = widget;
        this.length = length;
        this.side = side;
        this.prevWidget = null;
      }
      split(from3) {
        let result = _WidgetView.create(this.widget, this.length - from3, this.side);
        this.length -= from3;
        return result;
      }
      sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget)
            this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable)
            this.dom.contentEditable = "false";
        }
      }
      getSide() {
        return this.side;
      }
      merge(from3, to, source, hasStart, openStart, openEnd) {
        if (source && (!(source instanceof _WidgetView) || !this.widget.compare(source.widget) || from3 > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
          return false;
        this.length = from3 + (source ? source.length : 0) + (this.length - to);
        return true;
      }
      become(other) {
        if (other instanceof _WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
          if (!this.widget.compare(other.widget))
            this.markDirty(true);
          if (this.dom && !this.prevWidget)
            this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          return true;
        }
        return false;
      }
      ignoreMutation() {
        return true;
      }
      ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
      get overrideDOMText() {
        if (this.length == 0)
          return Text.empty;
        let top3 = this;
        while (top3.parent)
          top3 = top3.parent;
        let { view } = top3, text5 = view && view.state.doc, start2 = this.posAtStart;
        return text5 ? text5.slice(start2, start2 + this.length) : Text.empty;
      }
      domAtPos(pos) {
        return (this.length ? pos == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      domBoundsAround() {
        return null;
      }
      coordsAt(pos, side) {
        let custom = this.widget.coordsAt(this.dom, pos, side);
        if (custom)
          return custom;
        let rects = this.dom.getClientRects(), rect2 = null;
        if (!rects.length)
          return null;
        let fromBack = this.side ? this.side < 0 : pos > 0;
        for (let i = fromBack ? rects.length - 1 : 0; ; i += fromBack ? -1 : 1) {
          rect2 = rects[i];
          if (pos > 0 ? i == 0 : i == rects.length - 1 || rect2.top < rect2.bottom)
            break;
        }
        return flattenRect(rect2, !fromBack);
      }
      get isEditable() {
        return false;
      }
      get isWidget() {
        return true;
      }
      get isHidden() {
        return this.widget.isHidden;
      }
      destroy() {
        super.destroy();
        if (this.dom)
          this.widget.destroy(this.dom);
      }
    };
    WidgetBufferView = class _WidgetBufferView extends ContentView {
      constructor(side) {
        super();
        this.side = side;
      }
      get length() {
        return 0;
      }
      merge() {
        return false;
      }
      become(other) {
        return other instanceof _WidgetBufferView && other.side == this.side;
      }
      split() {
        return new _WidgetBufferView(this.side);
      }
      sync() {
        if (!this.dom) {
          let dom = document.createElement("img");
          dom.className = "cm-widgetBuffer";
          dom.setAttribute("aria-hidden", "true");
          this.setDOM(dom);
        }
      }
      getSide() {
        return this.side;
      }
      domAtPos(pos) {
        return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
      }
      localPosFromDOM() {
        return 0;
      }
      domBoundsAround() {
        return null;
      }
      coordsAt(pos) {
        return this.dom.getBoundingClientRect();
      }
      get overrideDOMText() {
        return Text.empty;
      }
      get isHidden() {
        return true;
      }
    };
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    noAttrs = /* @__PURE__ */ Object.create(null);
    WidgetType = class {
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      eq(widget) {
        return false;
      }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
      updateDOM(dom, view) {
        return false;
      }
      /**
      @internal
      */
      compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
      get estimatedHeight() {
        return -1;
      }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
      get lineBreaks() {
        return 0;
      }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
      ignoreEvent(event) {
        return true;
      }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
      coordsAt(dom, pos, side) {
        return null;
      }
      /**
      @internal
      */
      get isHidden() {
        return false;
      }
      /**
      @internal
      */
      get editable() {
        return false;
      }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
      destroy(dom) {
      }
    };
    BlockType = /* @__PURE__ */ function(BlockType2) {
      BlockType2[BlockType2["Text"] = 0] = "Text";
      BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
      BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
      BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
      return BlockType2;
    }(BlockType || (BlockType = {}));
    Decoration = class extends RangeValue {
      constructor(startSide, endSide, widget, spec) {
        super();
        this.startSide = startSide;
        this.endSide = endSide;
        this.widget = widget;
        this.spec = spec;
      }
      /**
      @internal
      */
      get heightRelevant() {
        return false;
      }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
      static mark(spec) {
        return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
      static widget(spec) {
        let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block3 = !!spec.block;
        side += block3 && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
        return new PointDecoration(spec, side, side, block3, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
      static replace(spec) {
        let block3 = !!spec.block, startSide, endSide;
        if (spec.isBlockGap) {
          startSide = -5e8;
          endSide = 4e8;
        } else {
          let { start: start2, end: end2 } = getInclusive(spec, block3);
          startSide = (start2 ? block3 ? -3e8 : -1 : 5e8) - 1;
          endSide = (end2 ? block3 ? 2e8 : 1 : -6e8) + 1;
        }
        return new PointDecoration(spec, startSide, endSide, block3, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
      static line(spec) {
        return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
      static set(of, sort = false) {
        return RangeSet.of(of, sort);
      }
      /**
      @internal
      */
      hasHeight() {
        return this.widget ? this.widget.estimatedHeight > -1 : false;
      }
    };
    Decoration.none = RangeSet.empty;
    MarkDecoration = class _MarkDecoration extends Decoration {
      constructor(spec) {
        let { start: start2, end: end2 } = getInclusive(spec);
        super(start2 ? -1 : 5e8, end2 ? 1 : -6e8, null, spec);
        this.tagName = spec.tagName || "span";
        this.class = spec.class || "";
        this.attrs = spec.attributes || null;
      }
      eq(other) {
        var _a2, _b2;
        return this == other || other instanceof _MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b2 = other.attrs) === null || _b2 === void 0 ? void 0 : _b2.class)) && attrsEq(this.attrs, other.attrs, "class");
      }
      range(from3, to = from3) {
        if (from3 >= to)
          throw new RangeError("Mark decorations may not be empty");
        return super.range(from3, to);
      }
    };
    MarkDecoration.prototype.point = false;
    LineDecoration = class _LineDecoration extends Decoration {
      constructor(spec) {
        super(-2e8, -2e8, null, spec);
      }
      eq(other) {
        return other instanceof _LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
      }
      range(from3, to = from3) {
        if (to != from3)
          throw new RangeError("Line decoration ranges must be zero-length");
        return super.range(from3, to);
      }
    };
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    PointDecoration = class _PointDecoration extends Decoration {
      constructor(spec, startSide, endSide, block3, widget, isReplace) {
        super(startSide, endSide, widget, spec);
        this.block = block3;
        this.isReplace = isReplace;
        this.mapMode = !block3 ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      }
      // Only relevant when this.block == true
      get type() {
        return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
      get heightRelevant() {
        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
      eq(other) {
        return other instanceof _PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
      }
      range(from3, to = from3) {
        if (this.isReplace && (from3 > to || from3 == to && this.startSide > 0 && this.endSide <= 0))
          throw new RangeError("Invalid range for replacement decoration");
        if (!this.isReplace && to != from3)
          throw new RangeError("Widget decorations can only have zero-length ranges");
        return super.range(from3, to);
      }
    };
    PointDecoration.prototype.point = true;
    LineView = class _LineView extends ContentView {
      constructor() {
        super(...arguments);
        this.children = [];
        this.length = 0;
        this.prevAttrs = void 0;
        this.attrs = null;
        this.breakAfter = 0;
      }
      // Consumes source
      merge(from3, to, source, hasStart, openStart, openEnd) {
        if (source) {
          if (!(source instanceof _LineView))
            return false;
          if (!this.dom)
            source.transferDOM(this);
        }
        if (hasStart)
          this.setDeco(source ? source.attrs : null);
        mergeChildrenInto(this, from3, to, source ? source.children.slice() : [], openStart, openEnd);
        return true;
      }
      split(at2) {
        let end2 = new _LineView();
        end2.breakAfter = this.breakAfter;
        if (this.length == 0)
          return end2;
        let { i, off } = this.childPos(at2);
        if (off) {
          end2.append(this.children[i].split(off), 0);
          this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
          i++;
        }
        for (let j = i; j < this.children.length; j++)
          end2.append(this.children[j], 0);
        while (i > 0 && this.children[i - 1].length == 0)
          this.children[--i].destroy();
        this.children.length = i;
        this.markDirty();
        this.length = at2;
        return end2;
      }
      transferDOM(other) {
        if (!this.dom)
          return;
        this.markDirty();
        other.setDOM(this.dom);
        other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
        this.prevAttrs = void 0;
        this.dom = null;
      }
      setDeco(attrs2) {
        if (!attrsEq(this.attrs, attrs2)) {
          if (this.dom) {
            this.prevAttrs = this.attrs;
            this.markDirty();
          }
          this.attrs = attrs2;
        }
      }
      append(child, openStart) {
        joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
      addLineDeco(deco) {
        let attrs2 = deco.spec.attributes, cls = deco.spec.class;
        if (attrs2)
          this.attrs = combineAttrs(attrs2, this.attrs || {});
        if (cls)
          this.attrs = combineAttrs({ class: cls }, this.attrs || {});
      }
      domAtPos(pos) {
        return inlineDOMAtPos(this, pos);
      }
      reuseDOM(node) {
        if (node.nodeName == "DIV") {
          this.setDOM(node);
          this.flags |= 4 | 2;
        }
      }
      sync(view, track) {
        var _a2;
        if (!this.dom) {
          this.setDOM(document.createElement("div"));
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : void 0;
        } else if (this.flags & 4) {
          clearAttributes(this.dom);
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : void 0;
        }
        if (this.prevAttrs !== void 0) {
          updateAttrs(this.dom, this.prevAttrs, this.attrs);
          this.dom.classList.add("cm-line");
          this.prevAttrs = void 0;
        }
        super.sync(view, track);
        let last = this.dom.lastChild;
        while (last && ContentView.get(last) instanceof MarkView)
          last = last.lastChild;
        if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch2) => ch2 instanceof TextView))) {
          let hack = document.createElement("BR");
          hack.cmIgnore = true;
          this.dom.appendChild(hack);
        }
      }
      measureTextSize() {
        if (this.children.length == 0 || this.length > 20)
          return null;
        let totalWidth = 0, textHeight;
        for (let child of this.children) {
          if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
            return null;
          let rects = clientRectsFor(child.dom);
          if (rects.length != 1)
            return null;
          totalWidth += rects[0].width;
          textHeight = rects[0].height;
        }
        return !totalWidth ? null : {
          lineHeight: this.dom.getBoundingClientRect().height,
          charWidth: totalWidth / this.length,
          textHeight
        };
      }
      coordsAt(pos, side) {
        let rect2 = coordsInChildren(this, pos, side);
        if (!this.children.length && rect2 && this.parent) {
          let { heightOracle } = this.parent.view.viewState, height = rect2.bottom - rect2.top;
          if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
            let dist2 = (height - heightOracle.textHeight) / 2;
            return { top: rect2.top + dist2, bottom: rect2.bottom - dist2, left: rect2.left, right: rect2.left };
          }
        }
        return rect2;
      }
      become(other) {
        return other instanceof _LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
      covers() {
        return true;
      }
      static find(docView, pos) {
        for (let i = 0, off = 0; i < docView.children.length; i++) {
          let block3 = docView.children[i], end2 = off + block3.length;
          if (end2 >= pos) {
            if (block3 instanceof _LineView)
              return block3;
            if (end2 > pos)
              break;
          }
          off = end2 + block3.breakAfter;
        }
        return null;
      }
    };
    BlockWidgetView = class _BlockWidgetView extends ContentView {
      constructor(widget, length, deco) {
        super();
        this.widget = widget;
        this.length = length;
        this.deco = deco;
        this.breakAfter = 0;
        this.prevWidget = null;
      }
      merge(from3, to, source, _takeDeco, openStart, openEnd) {
        if (source && (!(source instanceof _BlockWidgetView) || !this.widget.compare(source.widget) || from3 > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
          return false;
        this.length = from3 + (source ? source.length : 0) + (this.length - to);
        return true;
      }
      domAtPos(pos) {
        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
      }
      split(at2) {
        let len = this.length - at2;
        this.length = at2;
        let end2 = new _BlockWidgetView(this.widget, len, this.deco);
        end2.breakAfter = this.breakAfter;
        return end2;
      }
      get children() {
        return noChildren;
      }
      sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget)
            this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable)
            this.dom.contentEditable = "false";
        }
      }
      get overrideDOMText() {
        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
      domBoundsAround() {
        return null;
      }
      become(other) {
        if (other instanceof _BlockWidgetView && other.widget.constructor == this.widget.constructor) {
          if (!other.widget.compare(this.widget))
            this.markDirty(true);
          if (this.dom && !this.prevWidget)
            this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          this.deco = other.deco;
          this.breakAfter = other.breakAfter;
          return true;
        }
        return false;
      }
      ignoreMutation() {
        return true;
      }
      ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
      get isEditable() {
        return false;
      }
      get isWidget() {
        return true;
      }
      coordsAt(pos, side) {
        let custom = this.widget.coordsAt(this.dom, pos, side);
        if (custom)
          return custom;
        if (this.widget instanceof BlockGapWidget)
          return null;
        return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos == 0 : side <= 0);
      }
      destroy() {
        super.destroy();
        if (this.dom)
          this.widget.destroy(this.dom);
      }
      covers(side) {
        let { startSide, endSide } = this.deco;
        return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
    };
    BlockGapWidget = class extends WidgetType {
      constructor(height) {
        super();
        this.height = height;
      }
      toDOM() {
        let elt2 = document.createElement("div");
        elt2.className = "cm-gap";
        this.updateDOM(elt2);
        return elt2;
      }
      eq(other) {
        return other.height == this.height;
      }
      updateDOM(elt2) {
        elt2.style.height = this.height + "px";
        return true;
      }
      get editable() {
        return true;
      }
      get estimatedHeight() {
        return this.height;
      }
      ignoreEvent() {
        return false;
      }
    };
    ContentBuilder = class _ContentBuilder {
      constructor(doc2, pos, end2, disallowBlockEffectsFor) {
        this.doc = doc2;
        this.pos = pos;
        this.end = end2;
        this.disallowBlockEffectsFor = disallowBlockEffectsFor;
        this.content = [];
        this.curLine = null;
        this.breakAtStart = 0;
        this.pendingBuffer = 0;
        this.bufferMarks = [];
        this.atCursorPos = true;
        this.openStart = -1;
        this.openEnd = -1;
        this.text = "";
        this.textOff = 0;
        this.cursor = doc2.iter();
        this.skip = pos;
      }
      posCovered() {
        if (this.content.length == 0)
          return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
        let last = this.content[this.content.length - 1];
        return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
      getLine() {
        if (!this.curLine) {
          this.content.push(this.curLine = new LineView());
          this.atCursorPos = true;
        }
        return this.curLine;
      }
      flushBuffer(active = this.bufferMarks) {
        if (this.pendingBuffer) {
          this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
          this.pendingBuffer = 0;
        }
      }
      addBlockWidget(view) {
        this.flushBuffer();
        this.curLine = null;
        this.content.push(view);
      }
      finish(openEnd) {
        if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
          this.flushBuffer();
        else
          this.pendingBuffer = 0;
        if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
          this.getLine();
      }
      buildText(length, active, openStart) {
        while (length > 0) {
          if (this.textOff == this.text.length) {
            let { value, lineBreak, done } = this.cursor.next(this.skip);
            this.skip = 0;
            if (done)
              throw new Error("Ran out of text content when drawing inline views");
            if (lineBreak) {
              if (!this.posCovered())
                this.getLine();
              if (this.content.length)
                this.content[this.content.length - 1].breakAfter = 1;
              else
                this.breakAtStart = 1;
              this.flushBuffer();
              this.curLine = null;
              this.atCursorPos = true;
              length--;
              continue;
            } else {
              this.text = value;
              this.textOff = 0;
            }
          }
          let take = Math.min(
            this.text.length - this.textOff,
            length,
            512
            /* T.Chunk */
          );
          this.flushBuffer(active.slice(active.length - openStart));
          this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
          this.atCursorPos = true;
          this.textOff += take;
          length -= take;
          openStart = 0;
        }
      }
      span(from3, to, active, openStart) {
        this.buildText(to - from3, active, openStart);
        this.pos = to;
        if (this.openStart < 0)
          this.openStart = openStart;
      }
      point(from3, to, deco, active, openStart, index) {
        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
          if (deco.block)
            throw new RangeError("Block decorations may not be specified via plugins");
          if (to > this.doc.lineAt(this.pos).to)
            throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
        }
        let len = to - from3;
        if (deco instanceof PointDecoration) {
          if (deco.block) {
            if (deco.startSide > 0 && !this.posCovered())
              this.getLine();
            this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
          } else {
            let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
            let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from3 < to || deco.startSide > 0);
            let cursorAfter = !view.isEditable && (from3 < to || openStart > active.length || deco.startSide <= 0);
            let line = this.getLine();
            if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
              this.pendingBuffer = 0;
            this.flushBuffer(active);
            if (cursorBefore) {
              line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
              openStart = active.length + Math.max(0, openStart - active.length);
            }
            line.append(wrapMarks(view, active), openStart);
            this.atCursorPos = cursorAfter;
            this.pendingBuffer = !cursorAfter ? 0 : from3 < to || openStart > active.length ? 1 : 2;
            if (this.pendingBuffer)
              this.bufferMarks = active.slice();
          }
        } else if (this.doc.lineAt(this.pos).from == this.pos) {
          this.getLine().addLineDeco(deco);
        }
        if (len) {
          if (this.textOff + len <= this.text.length) {
            this.textOff += len;
          } else {
            this.skip += len - (this.text.length - this.textOff);
            this.text = "";
            this.textOff = 0;
          }
          this.pos = to;
        }
        if (this.openStart < 0)
          this.openStart = openStart;
      }
      static build(text5, from3, to, decorations2, dynamicDecorationMap) {
        let builder = new _ContentBuilder(text5, from3, to, dynamicDecorationMap);
        builder.openEnd = RangeSet.spans(decorations2, from3, to, builder);
        if (builder.openStart < 0)
          builder.openStart = builder.openEnd;
        builder.finish(builder.openEnd);
        return builder;
      }
    };
    NullWidget = class extends WidgetType {
      constructor(tag2) {
        super();
        this.tag = tag2;
      }
      eq(other) {
        return other.tag == this.tag;
      }
      toDOM() {
        return document.createElement(this.tag);
      }
      updateDOM(elt2) {
        return elt2.nodeName.toLowerCase() == this.tag;
      }
      get isHidden() {
        return true;
      }
    };
    NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
    NullWidget.block = /* @__PURE__ */ new NullWidget("div");
    Direction = /* @__PURE__ */ function(Direction2) {
      Direction2[Direction2["LTR"] = 0] = "LTR";
      Direction2[Direction2["RTL"] = 1] = "RTL";
      return Direction2;
    }(Direction || (Direction = {}));
    LTR = Direction.LTR;
    RTL = Direction.RTL;
    LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    Brackets = /* @__PURE__ */ Object.create(null);
    BracketStack = [];
    for (let p of ["()", "[]", "{}"]) {
      let l = /* @__PURE__ */ p.charCodeAt(0), r2 = /* @__PURE__ */ p.charCodeAt(1);
      Brackets[l] = r2;
      Brackets[r2] = -l;
    }
    BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    BidiSpan = class {
      /**
      The direction of this span.
      */
      get dir() {
        return this.level % 2 ? RTL : LTR;
      }
      /**
      @internal
      */
      constructor(from3, to, level) {
        this.from = from3;
        this.to = to;
        this.level = level;
      }
      /**
      @internal
      */
      side(end2, dir) {
        return this.dir == dir == end2 ? this.to : this.from;
      }
      /**
      @internal
      */
      forward(forward, dir) {
        return forward == (this.dir == dir);
      }
      /**
      @internal
      */
      static find(order, index, level, assoc) {
        let maybe = -1;
        for (let i = 0; i < order.length; i++) {
          let span = order[i];
          if (span.from <= index && span.to >= index) {
            if (span.level == level)
              return i;
            if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
              maybe = i;
          }
        }
        if (maybe < 0)
          throw new RangeError("Index out of range");
        return maybe;
      }
    };
    types = [];
    movedOver = "";
    clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
    dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
    mouseSelectionStyle = /* @__PURE__ */ Facet.define();
    exceptionSink = /* @__PURE__ */ Facet.define();
    updateListener = /* @__PURE__ */ Facet.define();
    inputHandler = /* @__PURE__ */ Facet.define();
    focusChangeEffect = /* @__PURE__ */ Facet.define();
    clipboardInputFilter = /* @__PURE__ */ Facet.define();
    clipboardOutputFilter = /* @__PURE__ */ Facet.define();
    perLineTextDirection = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.some((x) => x)
    });
    nativeSelectionHidden = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.some((x) => x)
    });
    scrollHandler = /* @__PURE__ */ Facet.define();
    ScrollTarget = class _ScrollTarget {
      constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
        this.range = range;
        this.y = y;
        this.x = x;
        this.yMargin = yMargin;
        this.xMargin = xMargin;
        this.isSnapshot = isSnapshot;
      }
      map(changes) {
        return changes.empty ? this : new _ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
      clip(state) {
        return this.range.to <= state.doc.length ? this : new _ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
    };
    scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t2, ch2) => t2.map(ch2) });
    setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
    editable = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : true });
    nextPluginID = 0;
    viewPlugin = /* @__PURE__ */ Facet.define();
    ViewPlugin = class _ViewPlugin {
      constructor(id3, create, domEventHandlers, domEventObservers, buildExtensions) {
        this.id = id3;
        this.create = create;
        this.domEventHandlers = domEventHandlers;
        this.domEventObservers = domEventObservers;
        this.extension = buildExtensions(this);
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
      static define(create, spec) {
        const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
        return new _ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, (plugin) => {
          let ext = [viewPlugin.of(plugin)];
          if (deco)
            ext.push(decorations.of((view) => {
              let pluginInst = view.plugin(plugin);
              return pluginInst ? deco(pluginInst) : Decoration.none;
            }));
          if (provide)
            ext.push(provide(plugin));
          return ext;
        });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
      static fromClass(cls, spec) {
        return _ViewPlugin.define((view) => new cls(view), spec);
      }
    };
    PluginInstance = class {
      constructor(spec) {
        this.spec = spec;
        this.mustUpdate = null;
        this.value = null;
      }
      update(view) {
        if (!this.value) {
          if (this.spec) {
            try {
              this.value = this.spec.create(view);
            } catch (e) {
              logException(view.state, e, "CodeMirror plugin crashed");
              this.deactivate();
            }
          }
        } else if (this.mustUpdate) {
          let update = this.mustUpdate;
          this.mustUpdate = null;
          if (this.value.update) {
            try {
              this.value.update(update);
            } catch (e) {
              logException(update.state, e, "CodeMirror plugin crashed");
              if (this.value.destroy)
                try {
                  this.value.destroy();
                } catch (_) {
                }
              this.deactivate();
            }
          }
        }
        return this;
      }
      destroy(view) {
        var _a2;
        if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
          try {
            this.value.destroy();
          } catch (e) {
            logException(view.state, e, "CodeMirror plugin crashed");
          }
        }
      }
      deactivate() {
        this.spec = this.value = null;
      }
    };
    editorAttributes = /* @__PURE__ */ Facet.define();
    contentAttributes = /* @__PURE__ */ Facet.define();
    decorations = /* @__PURE__ */ Facet.define();
    outerDecorations = /* @__PURE__ */ Facet.define();
    atomicRanges = /* @__PURE__ */ Facet.define();
    bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
    scrollMargins = /* @__PURE__ */ Facet.define();
    styleModule = /* @__PURE__ */ Facet.define();
    ChangedRange = class _ChangedRange {
      constructor(fromA, toA, fromB, toB) {
        this.fromA = fromA;
        this.toA = toA;
        this.fromB = fromB;
        this.toB = toB;
      }
      join(other) {
        return new _ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
      addToSet(set2) {
        let i = set2.length, me = this;
        for (; i > 0; i--) {
          let range = set2[i - 1];
          if (range.fromA > me.toA)
            continue;
          if (range.toA < me.fromA)
            break;
          me = me.join(range);
          set2.splice(i - 1, 1);
        }
        set2.splice(i, 0, me);
        return set2;
      }
      static extendWithRanges(diff2, ranges) {
        if (ranges.length == 0)
          return diff2;
        let result = [];
        for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
          let next2 = dI == diff2.length ? null : diff2[dI], off = posA - posB;
          let end2 = next2 ? next2.fromB : 1e9;
          while (rI < ranges.length && ranges[rI] < end2) {
            let from3 = ranges[rI], to = ranges[rI + 1];
            let fromB = Math.max(posB, from3), toB = Math.min(end2, to);
            if (fromB <= toB)
              new _ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
            if (to > end2)
              break;
            else
              rI += 2;
          }
          if (!next2)
            return result;
          new _ChangedRange(next2.fromA, next2.toA, next2.fromB, next2.toB).addToSet(result);
          posA = next2.toA;
          posB = next2.toB;
        }
      }
    };
    ViewUpdate = class _ViewUpdate {
      constructor(view, state, transactions) {
        this.view = view;
        this.state = state;
        this.transactions = transactions;
        this.flags = 0;
        this.startState = view.state;
        this.changes = ChangeSet.empty(this.startState.doc.length);
        for (let tr of transactions)
          this.changes = this.changes.compose(tr.changes);
        let changedRanges = [];
        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
        this.changedRanges = changedRanges;
      }
      /**
      @internal
      */
      static create(view, state, transactions) {
        return new _ViewUpdate(view, state, transactions);
      }
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      get viewportChanged() {
        return (this.flags & 4) > 0;
      }
      /**
      Returns true when
      [`viewportChanged`](https://codemirror.net/6/docs/ref/#view.ViewUpdate.viewportChanged) is true
      and the viewport change is not just the result of mapping it in
      response to document changes.
      */
      get viewportMoved() {
        return (this.flags & 8) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
      get heightChanged() {
        return (this.flags & 2) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
      get geometryChanged() {
        return this.docChanged || (this.flags & (16 | 2)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
      get focusChanged() {
        return (this.flags & 1) > 0;
      }
      /**
      Whether the document changed in this update.
      */
      get docChanged() {
        return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
      get selectionSet() {
        return this.transactions.some((tr) => tr.selection);
      }
      /**
      @internal
      */
      get empty() {
        return this.flags == 0 && this.transactions.length == 0;
      }
    };
    DocView = class extends ContentView {
      get length() {
        return this.view.state.doc.length;
      }
      constructor(view) {
        super();
        this.view = view;
        this.decorations = [];
        this.dynamicDecorationMap = [false];
        this.domChanged = null;
        this.hasComposition = null;
        this.markedForComposition = /* @__PURE__ */ new Set();
        this.editContextFormatting = Decoration.none;
        this.lastCompositionAfterCursor = false;
        this.minWidth = 0;
        this.minWidthFrom = 0;
        this.minWidthTo = 0;
        this.impreciseAnchor = null;
        this.impreciseHead = null;
        this.forceSelection = false;
        this.lastUpdate = Date.now();
        this.setDOM(view.contentDOM);
        this.children = [new LineView()];
        this.children[0].setParent(this);
        this.updateDeco();
        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      }
      // Update the document view to a given state.
      update(update) {
        var _a2;
        let changedRanges = update.changedRanges;
        if (this.minWidth > 0 && changedRanges.length) {
          if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
            this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
          } else {
            this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
            this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
          }
        }
        this.updateEditContextFormatting(update);
        let readCompositionAt = -1;
        if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
          if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
            readCompositionAt = this.domChanged.newSel.head;
          else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
            readCompositionAt = update.state.selection.main.head;
        }
        let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
        this.domChanged = null;
        if (this.hasComposition) {
          this.markedForComposition.clear();
          let { from: from3, to } = this.hasComposition;
          changedRanges = new ChangedRange(from3, to, update.changes.mapPos(from3, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
        }
        this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
        if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
          this.forceSelection = true;
        let prevDeco = this.decorations, deco = this.updateDeco();
        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
        if (!(this.flags & 7) && changedRanges.length == 0) {
          return false;
        } else {
          this.updateInner(changedRanges, update.startState.doc.length, composition);
          if (update.transactions.length)
            this.lastUpdate = Date.now();
          return true;
        }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
      updateInner(changes, oldLength, composition) {
        this.view.viewState.mustMeasureContent = true;
        this.updateChildren(changes, oldLength, composition);
        let { observer } = this.view;
        observer.ignore(() => {
          this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
          this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
          let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
          this.sync(this.view, track);
          this.flags &= ~7;
          if (track && (track.written || observer.selectionRange.focusNode != track.node))
            this.forceSelection = true;
          this.dom.style.height = "";
        });
        this.markedForComposition.forEach(
          (cView) => cView.flags &= ~8
          /* ViewFlag.Composition */
        );
        let gaps = [];
        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
          for (let child of this.children)
            if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
              gaps.push(child.dom);
        }
        observer.updateGaps(gaps);
      }
      updateChildren(changes, oldLength, composition) {
        let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
        let cursor2 = this.childCursor(oldLength);
        for (let i = ranges.length - 1; ; i--) {
          let next2 = i >= 0 ? ranges[i] : null;
          if (!next2)
            break;
          let { fromA, toA, fromB, toB } = next2, content3, breakAtStart, openStart, openEnd;
          if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
            let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
            let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
            breakAtStart = before.breakAtStart;
            openStart = before.openStart;
            openEnd = after.openEnd;
            let compLine = this.compositionView(composition);
            if (after.breakAtStart) {
              compLine.breakAfter = 1;
            } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
              compLine.breakAfter = after.content[0].breakAfter;
              after.content.shift();
            }
            if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
              before.content.pop();
            }
            content3 = before.content.concat(compLine).concat(after.content);
          } else {
            ({ content: content3, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
          }
          let { i: toI, off: toOff } = cursor2.findPos(toA, 1);
          let { i: fromI, off: fromOff } = cursor2.findPos(fromA, -1);
          replaceRange(this, fromI, fromOff, toI, toOff, content3, breakAtStart, openStart, openEnd);
        }
        if (composition)
          this.fixCompositionDOM(composition);
      }
      updateEditContextFormatting(update) {
        this.editContextFormatting = this.editContextFormatting.map(update.changes);
        for (let tr of update.transactions)
          for (let effect of tr.effects)
            if (effect.is(setEditContextFormatting)) {
              this.editContextFormatting = effect.value;
            }
      }
      compositionView(composition) {
        let cur2 = new TextView(composition.text.nodeValue);
        cur2.flags |= 8;
        for (let { deco } of composition.marks)
          cur2 = new MarkView(deco, [cur2], cur2.length);
        let line = new LineView();
        line.append(cur2, 0);
        return line;
      }
      fixCompositionDOM(composition) {
        let fix = (dom, cView2) => {
          cView2.flags |= 8 | (cView2.children.some(
            (c2) => c2.flags & 7
            /* ViewFlag.Dirty */
          ) ? 1 : 0);
          this.markedForComposition.add(cView2);
          let prev = ContentView.get(dom);
          if (prev && prev != cView2)
            prev.dom = null;
          cView2.setDOM(dom);
        };
        let pos = this.childPos(composition.range.fromB, 1);
        let cView = this.children[pos.i];
        fix(composition.line, cView);
        for (let i = composition.marks.length - 1; i >= -1; i--) {
          pos = cView.childPos(pos.off, 1);
          cView = cView.children[pos.i];
          fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
        }
      }
      // Sync the DOM selection to this.state.selection
      updateSelection(mustRead = false, fromPointer = false) {
        if (mustRead || !this.view.observer.selectionRange.focusNode)
          this.view.observer.readSelectionRange();
        let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
        let selectionNotFocus = !focused && !(this.view.state.facet(editable) || this.dom.tabIndex > -1) && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
        if (!(focused || fromPointer || selectionNotFocus))
          return;
        let force = this.forceSelection;
        this.forceSelection = false;
        let main = this.view.state.selection.main;
        let anchor = this.moveToLine(this.domAtPos(main.anchor));
        let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
        if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
          let dummy = document.createTextNode("");
          this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
          anchor = head = new DOMPos(dummy, 0);
          force = true;
        }
        let domSel = this.view.observer.selectionRange;
        if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
          this.view.observer.ignore(() => {
            if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
              this.dom.blur();
              this.dom.focus({ preventScroll: true });
            }
            let rawSel = getSelection(this.view.root);
            if (!rawSel) ;
            else if (main.empty) {
              if (browser.gecko) {
                let nextTo = nextToUneditable(anchor.node, anchor.offset);
                if (nextTo && nextTo != (1 | 2)) {
                  let text5 = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                  if (text5)
                    anchor = new DOMPos(text5.node, text5.offset);
                }
              }
              rawSel.collapse(anchor.node, anchor.offset);
              if (main.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
                rawSel.caretBidiLevel = main.bidiLevel;
            } else if (rawSel.extend) {
              rawSel.collapse(anchor.node, anchor.offset);
              try {
                rawSel.extend(head.node, head.offset);
              } catch (_) {
              }
            } else {
              let range = document.createRange();
              if (main.anchor > main.head)
                [anchor, head] = [head, anchor];
              range.setEnd(head.node, head.offset);
              range.setStart(anchor.node, anchor.offset);
              rawSel.removeAllRanges();
              rawSel.addRange(range);
            }
            if (selectionNotFocus && this.view.root.activeElement == this.dom) {
              this.dom.blur();
              if (activeElt)
                activeElt.focus();
            }
          });
          this.view.observer.setSelectionRange(anchor, head);
        }
        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
      suppressWidgetCursorChange(sel, cursor2) {
        return this.hasComposition && cursor2.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor2.head;
      }
      enforceCursorAssoc() {
        if (this.hasComposition)
          return;
        let { view } = this, cursor2 = view.state.selection.main;
        let sel = getSelection(view.root);
        let { anchorNode, anchorOffset } = view.observer.selectionRange;
        if (!sel || !cursor2.empty || !cursor2.assoc || !sel.modify)
          return;
        let line = LineView.find(this, cursor2.head);
        if (!line)
          return;
        let lineStart = line.posAtStart;
        if (cursor2.head == lineStart || cursor2.head == lineStart + line.length)
          return;
        let before = this.coordsAt(cursor2.head, -1), after = this.coordsAt(cursor2.head, 1);
        if (!before || !after || before.bottom > after.top)
          return;
        let dom = this.domAtPos(cursor2.head + cursor2.assoc);
        sel.collapse(dom.node, dom.offset);
        sel.modify("move", cursor2.assoc < 0 ? "forward" : "backward", "lineboundary");
        view.observer.readSelectionRange();
        let newRange = view.observer.selectionRange;
        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor2.from)
          sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
      moveToLine(pos) {
        let dom = this.dom, newPos;
        if (pos.node != dom)
          return pos;
        for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
          let view = ContentView.get(dom.childNodes[i]);
          if (view instanceof LineView)
            newPos = view.domAtPos(0);
        }
        for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
          let view = ContentView.get(dom.childNodes[i]);
          if (view instanceof LineView)
            newPos = view.domAtPos(view.length);
        }
        return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
      }
      nearest(dom) {
        for (let cur2 = dom; cur2; ) {
          let domView = ContentView.get(cur2);
          if (domView && domView.rootView == this)
            return domView;
          cur2 = cur2.parentNode;
        }
        return null;
      }
      posFromDOM(node, offset) {
        let view = this.nearest(node);
        if (!view)
          throw new RangeError("Trying to find position for a DOM position outside of the document");
        return view.localPosFromDOM(node, offset) + view.posAtStart;
      }
      domAtPos(pos) {
        let { i, off } = this.childCursor().findPos(pos, -1);
        for (; i < this.children.length - 1; ) {
          let child = this.children[i];
          if (off < child.length || child instanceof LineView)
            break;
          i++;
          off = 0;
        }
        return this.children[i].domAtPos(off);
      }
      coordsAt(pos, side) {
        let best = null, bestPos = 0;
        for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
          let child = this.children[i], end2 = off - child.breakAfter, start2 = end2 - child.length;
          if (end2 < pos)
            break;
          if (start2 <= pos && (start2 < pos || child.covers(-1)) && (end2 > pos || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
            best = child;
            bestPos = start2;
          } else if (best && start2 == pos && end2 == pos && child instanceof BlockWidgetView && Math.abs(side) < 2) {
            if (child.deco.startSide < 0)
              break;
            else if (i)
              best = null;
          }
          off = start2;
        }
        return best ? best.coordsAt(pos - bestPos, side) : null;
      }
      coordsForChar(pos) {
        let { i, off } = this.childPos(pos, 1), child = this.children[i];
        if (!(child instanceof LineView))
          return null;
        while (child.children.length) {
          let { i: i2, off: childOff } = child.childPos(off, 1);
          for (; ; i2++) {
            if (i2 == child.children.length)
              return null;
            if ((child = child.children[i2]).length)
              break;
          }
          off = childOff;
        }
        if (!(child instanceof TextView))
          return null;
        let end2 = findClusterBreak2(child.text, off);
        if (end2 == off)
          return null;
        let rects = textRange(child.dom, off, end2).getClientRects();
        for (let i2 = 0; i2 < rects.length; i2++) {
          let rect2 = rects[i2];
          if (i2 == rects.length - 1 || rect2.top < rect2.bottom && rect2.left < rect2.right)
            return rect2;
        }
        return null;
      }
      measureVisibleLineHeights(viewport) {
        let result = [], { from: from3, to } = viewport;
        let contentWidth = this.view.contentDOM.clientWidth;
        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
        let widest = -1, ltr = this.view.textDirection == Direction.LTR;
        for (let pos = 0, i = 0; i < this.children.length; i++) {
          let child = this.children[i], end2 = pos + child.length;
          if (end2 > to)
            break;
          if (pos >= from3) {
            let childRect = child.dom.getBoundingClientRect();
            result.push(childRect.height);
            if (isWider) {
              let last = child.dom.lastChild;
              let rects = last ? clientRectsFor(last) : [];
              if (rects.length) {
                let rect2 = rects[rects.length - 1];
                let width = ltr ? rect2.right - childRect.left : childRect.right - rect2.left;
                if (width > widest) {
                  widest = width;
                  this.minWidth = contentWidth;
                  this.minWidthFrom = pos;
                  this.minWidthTo = end2;
                }
              }
            }
          }
          pos = end2 + child.breakAfter;
        }
        return result;
      }
      textDirectionAt(pos) {
        let { i } = this.childPos(pos, 1);
        return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
      measureTextSize() {
        for (let child of this.children) {
          if (child instanceof LineView) {
            let measure = child.measureTextSize();
            if (measure)
              return measure;
          }
        }
        let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
        dummy.className = "cm-line";
        dummy.style.width = "99999px";
        dummy.style.position = "absolute";
        dummy.textContent = "abc def ghi jkl mno pqr stu";
        this.view.observer.ignore(() => {
          this.dom.appendChild(dummy);
          let rect2 = clientRectsFor(dummy.firstChild)[0];
          lineHeight = dummy.getBoundingClientRect().height;
          charWidth = rect2 ? rect2.width / 27 : 7;
          textHeight = rect2 ? rect2.height : lineHeight;
          dummy.remove();
        });
        return { lineHeight, charWidth, textHeight };
      }
      childCursor(pos = this.length) {
        let i = this.children.length;
        if (i)
          pos -= this.children[--i].length;
        return new ChildCursor(this.children, pos, i);
      }
      computeBlockGapDeco() {
        let deco = [], vs = this.view.viewState;
        for (let pos = 0, i = 0; ; i++) {
          let next2 = i == vs.viewports.length ? null : vs.viewports[i];
          let end2 = next2 ? next2.from - 1 : this.length;
          if (end2 > pos) {
            let height = (vs.lineBlockAt(end2).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
            deco.push(Decoration.replace({
              widget: new BlockGapWidget(height),
              block: true,
              inclusive: true,
              isBlockGap: true
            }).range(pos, end2));
          }
          if (!next2)
            break;
          pos = next2.to + 1;
        }
        return Decoration.set(deco);
      }
      updateDeco() {
        let i = 1;
        let allDeco = this.view.state.facet(decorations).map((d3) => {
          let dynamic = this.dynamicDecorationMap[i++] = typeof d3 == "function";
          return dynamic ? d3(this.view) : d3;
        });
        let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d3, i2) => {
          let dynamic = typeof d3 == "function";
          if (dynamic)
            dynamicOuter = true;
          return dynamic ? d3(this.view) : d3;
        });
        if (outerDeco.length) {
          this.dynamicDecorationMap[i++] = dynamicOuter;
          allDeco.push(RangeSet.join(outerDeco));
        }
        this.decorations = [
          this.editContextFormatting,
          ...allDeco,
          this.computeBlockGapDeco(),
          this.view.viewState.lineGapDeco
        ];
        while (i < this.decorations.length)
          this.dynamicDecorationMap[i++] = false;
        return this.decorations;
      }
      scrollIntoView(target) {
        if (target.isSnapshot) {
          let ref = this.view.viewState.lineBlockAt(target.range.head);
          this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
          this.view.scrollDOM.scrollLeft = target.xMargin;
          return;
        }
        for (let handler of this.view.state.facet(scrollHandler)) {
          try {
            if (handler(this.view, target.range, target))
              return true;
          } catch (e) {
            logException(this.view.state, e, "scroll handler");
          }
        }
        let { range } = target;
        let rect2 = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
        if (!rect2)
          return;
        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
          rect2 = {
            left: Math.min(rect2.left, other.left),
            top: Math.min(rect2.top, other.top),
            right: Math.max(rect2.right, other.right),
            bottom: Math.max(rect2.bottom, other.bottom)
          };
        let margins = getScrollMargins(this.view);
        let targetRect = {
          left: rect2.left - margins.left,
          top: rect2.top - margins.top,
          right: rect2.right + margins.right,
          bottom: rect2.bottom + margins.bottom
        };
        let { offsetWidth, offsetHeight } = this.view.scrollDOM;
        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
      }
    };
    DecorationComparator$1 = class DecorationComparator {
      constructor() {
        this.changes = [];
      }
      compareRange(from3, to) {
        addRange(from3, to, this.changes);
      }
      comparePoint(from3, to) {
        addRange(from3, to, this.changes);
      }
      boundChange(pos) {
        addRange(pos, pos, this.changes);
      }
    };
    LineBreakPlaceholder = "\uFFFF";
    DOMReader = class {
      constructor(points, state) {
        this.points = points;
        this.text = "";
        this.lineSeparator = state.facet(EditorState.lineSeparator);
      }
      append(text5) {
        this.text += text5;
      }
      lineBreak() {
        this.text += LineBreakPlaceholder;
      }
      readRange(start2, end2) {
        if (!start2)
          return this;
        let parent = start2.parentNode;
        for (let cur2 = start2; ; ) {
          this.findPointBefore(parent, cur2);
          let oldLen = this.text.length;
          this.readNode(cur2);
          let next2 = cur2.nextSibling;
          if (next2 == end2)
            break;
          let view = ContentView.get(cur2), nextView = ContentView.get(next2);
          if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next2) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
            this.lineBreak();
          cur2 = next2;
        }
        this.findPointBefore(parent, end2);
        return this;
      }
      readTextNode(node) {
        let text5 = node.nodeValue;
        for (let point of this.points)
          if (point.node == node)
            point.pos = this.text.length + Math.min(point.offset, text5.length);
        for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
          let nextBreak = -1, breakSize = 1, m;
          if (this.lineSeparator) {
            nextBreak = text5.indexOf(this.lineSeparator, off);
            breakSize = this.lineSeparator.length;
          } else if (m = re.exec(text5)) {
            nextBreak = m.index;
            breakSize = m[0].length;
          }
          this.append(text5.slice(off, nextBreak < 0 ? text5.length : nextBreak));
          if (nextBreak < 0)
            break;
          this.lineBreak();
          if (breakSize > 1) {
            for (let point of this.points)
              if (point.node == node && point.pos > this.text.length)
                point.pos -= breakSize - 1;
          }
          off = nextBreak + breakSize;
        }
      }
      readNode(node) {
        if (node.cmIgnore)
          return;
        let view = ContentView.get(node);
        let fromView = view && view.overrideDOMText;
        if (fromView != null) {
          this.findPointInside(node, fromView.length);
          for (let i = fromView.iter(); !i.next().done; ) {
            if (i.lineBreak)
              this.lineBreak();
            else
              this.append(i.value);
          }
        } else if (node.nodeType == 3) {
          this.readTextNode(node);
        } else if (node.nodeName == "BR") {
          if (node.nextSibling)
            this.lineBreak();
        } else if (node.nodeType == 1) {
          this.readRange(node.firstChild, null);
        }
      }
      findPointBefore(node, next2) {
        for (let point of this.points)
          if (point.node == node && node.childNodes[point.offset] == next2)
            point.pos = this.text.length;
      }
      findPointInside(node, length) {
        for (let point of this.points)
          if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
            point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
      }
    };
    DOMPoint = class {
      constructor(node, offset) {
        this.node = node;
        this.offset = offset;
        this.pos = -1;
      }
    };
    DOMChange = class {
      constructor(view, start2, end2, typeOver) {
        this.typeOver = typeOver;
        this.bounds = null;
        this.text = "";
        this.domChanged = start2 > -1;
        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
        if (view.state.readOnly && start2 > -1) {
          this.newSel = null;
        } else if (start2 > -1 && (this.bounds = view.docView.domBoundsAround(start2, end2, 0))) {
          let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
          let reader = new DOMReader(selPoints, view.state);
          reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
          this.text = reader.text;
          this.newSel = selectionFromPoints(selPoints, this.bounds.from);
        } else {
          let domSel = view.observer.selectionRange;
          let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
          let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
          let vp = view.viewport;
          if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
            let from3 = Math.min(head, anchor), to = Math.max(head, anchor);
            let offFrom = vp.from - from3, offTo = vp.to - to;
            if ((offFrom == 0 || offFrom == 1 || from3 == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
              head = 0;
              anchor = view.state.doc.length;
            }
          }
          this.newSel = EditorSelection.single(anchor, head);
        }
      }
    };
    InputState = class {
      setSelectionOrigin(origin) {
        this.lastSelectionOrigin = origin;
        this.lastSelectionTime = Date.now();
      }
      constructor(view) {
        this.view = view;
        this.lastKeyCode = 0;
        this.lastKeyTime = 0;
        this.lastTouchTime = 0;
        this.lastFocusTime = 0;
        this.lastScrollTop = 0;
        this.lastScrollLeft = 0;
        this.pendingIOSKey = void 0;
        this.tabFocusMode = -1;
        this.lastSelectionOrigin = null;
        this.lastSelectionTime = 0;
        this.lastContextMenu = 0;
        this.scrollHandlers = [];
        this.handlers = /* @__PURE__ */ Object.create(null);
        this.composing = -1;
        this.compositionFirstChange = null;
        this.compositionEndedAt = 0;
        this.compositionPendingKey = false;
        this.compositionPendingChange = false;
        this.mouseSelection = null;
        this.draggedContent = null;
        this.handleEvent = this.handleEvent.bind(this);
        this.notifiedFocused = view.hasFocus;
        if (browser.safari)
          view.contentDOM.addEventListener("input", () => null);
        if (browser.gecko)
          firefoxCopyCutHack(view.contentDOM.ownerDocument);
      }
      handleEvent(event) {
        if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
          return;
        if (event.type == "keydown" && this.keydown(event))
          return;
        if (this.view.updateState != 0)
          Promise.resolve().then(() => this.runHandlers(event.type, event));
        else
          this.runHandlers(event.type, event);
      }
      runHandlers(type7, event) {
        let handlers2 = this.handlers[type7];
        if (handlers2) {
          for (let observer of handlers2.observers)
            observer(this.view, event);
          for (let handler of handlers2.handlers) {
            if (event.defaultPrevented)
              break;
            if (handler(this.view, event)) {
              event.preventDefault();
              break;
            }
          }
        }
      }
      ensureHandlers(plugins) {
        let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
        for (let type7 in handlers2)
          if (type7 != "scroll") {
            let passive = !handlers2[type7].handlers.length;
            let exists = prev[type7];
            if (exists && passive != !exists.handlers.length) {
              dom.removeEventListener(type7, this.handleEvent);
              exists = null;
            }
            if (!exists)
              dom.addEventListener(type7, this.handleEvent, { passive });
          }
        for (let type7 in prev)
          if (type7 != "scroll" && !handlers2[type7])
            dom.removeEventListener(type7, this.handleEvent);
        this.handlers = handlers2;
      }
      keydown(event) {
        this.lastKeyCode = event.keyCode;
        this.lastKeyTime = Date.now();
        if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
          return true;
        if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
          this.tabFocusMode = -1;
        if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
          this.view.observer.delayAndroidKey(event.key, event.keyCode);
          return true;
        }
        let pending;
        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
          this.pendingIOSKey = pending || event;
          setTimeout(() => this.flushIOSKey(), 250);
          return true;
        }
        if (event.keyCode != 229)
          this.view.observer.forceFlush();
        return false;
      }
      flushIOSKey(change) {
        let key = this.pendingIOSKey;
        if (!key)
          return false;
        if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
          return false;
        this.pendingIOSKey = void 0;
        return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : void 0);
      }
      ignoreDuringComposition(event) {
        if (!/^key/.test(event.type))
          return false;
        if (this.composing > 0)
          return true;
        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
          this.compositionPendingKey = false;
          return true;
        }
        return false;
      }
      startMouseSelection(mouseSelection) {
        if (this.mouseSelection)
          this.mouseSelection.destroy();
        this.mouseSelection = mouseSelection;
      }
      update(update) {
        this.view.observer.update(update);
        if (this.mouseSelection)
          this.mouseSelection.update(update);
        if (this.draggedContent && update.docChanged)
          this.draggedContent = this.draggedContent.map(update.changes);
        if (update.transactions.length)
          this.lastKeyCode = this.lastSelectionTime = 0;
      }
      destroy() {
        if (this.mouseSelection)
          this.mouseSelection.destroy();
      }
    };
    PendingKeys = [
      { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
      { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
      { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
      { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    EmacsyPendingKeys = "dthko";
    modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    dragScrollMargin = 6;
    MouseSelection = class {
      constructor(view, startEvent, style2, mustSelect) {
        this.view = view;
        this.startEvent = startEvent;
        this.style = style2;
        this.mustSelect = mustSelect;
        this.scrollSpeed = { x: 0, y: 0 };
        this.scrolling = -1;
        this.lastEvent = startEvent;
        this.scrollParents = scrollableParents(view.contentDOM);
        this.atoms = view.state.facet(atomicRanges).map((f) => f(view));
        let doc2 = view.contentDOM.ownerDocument;
        doc2.addEventListener("mousemove", this.move = this.move.bind(this));
        doc2.addEventListener("mouseup", this.up = this.up.bind(this));
        this.extend = startEvent.shiftKey;
        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
      }
      start(event) {
        if (this.dragging === false)
          this.select(event);
      }
      move(event) {
        if (event.buttons == 0)
          return this.destroy();
        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
          return;
        this.select(this.lastEvent = event);
        let sx = 0, sy = 0;
        let left = 0, top3 = 0, right = this.view.win.innerWidth, bottom = this.view.win.innerHeight;
        if (this.scrollParents.x)
          ({ left, right } = this.scrollParents.x.getBoundingClientRect());
        if (this.scrollParents.y)
          ({ top: top3, bottom } = this.scrollParents.y.getBoundingClientRect());
        let margins = getScrollMargins(this.view);
        if (event.clientX - margins.left <= left + dragScrollMargin)
          sx = -dragScrollSpeed(left - event.clientX);
        else if (event.clientX + margins.right >= right - dragScrollMargin)
          sx = dragScrollSpeed(event.clientX - right);
        if (event.clientY - margins.top <= top3 + dragScrollMargin)
          sy = -dragScrollSpeed(top3 - event.clientY);
        else if (event.clientY + margins.bottom >= bottom - dragScrollMargin)
          sy = dragScrollSpeed(event.clientY - bottom);
        this.setScrollSpeed(sx, sy);
      }
      up(event) {
        if (this.dragging == null)
          this.select(this.lastEvent);
        if (!this.dragging)
          event.preventDefault();
        this.destroy();
      }
      destroy() {
        this.setScrollSpeed(0, 0);
        let doc2 = this.view.contentDOM.ownerDocument;
        doc2.removeEventListener("mousemove", this.move);
        doc2.removeEventListener("mouseup", this.up);
        this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
      setScrollSpeed(sx, sy) {
        this.scrollSpeed = { x: sx, y: sy };
        if (sx || sy) {
          if (this.scrolling < 0)
            this.scrolling = setInterval(() => this.scroll(), 50);
        } else if (this.scrolling > -1) {
          clearInterval(this.scrolling);
          this.scrolling = -1;
        }
      }
      scroll() {
        let { x, y } = this.scrollSpeed;
        if (x && this.scrollParents.x) {
          this.scrollParents.x.scrollLeft += x;
          x = 0;
        }
        if (y && this.scrollParents.y) {
          this.scrollParents.y.scrollTop += y;
          y = 0;
        }
        if (x || y)
          this.view.win.scrollBy(x, y);
        if (this.dragging === false)
          this.select(this.lastEvent);
      }
      skipAtoms(sel) {
        let ranges = null;
        for (let i = 0; i < sel.ranges.length; i++) {
          let range = sel.ranges[i], updated = null;
          if (range.empty) {
            let pos = skipAtomicRanges(this.atoms, range.from, 0);
            if (pos != range.from)
              updated = EditorSelection.cursor(pos, -1);
          } else {
            let from3 = skipAtomicRanges(this.atoms, range.from, -1);
            let to = skipAtomicRanges(this.atoms, range.to, 1);
            if (from3 != range.from || to != range.to)
              updated = EditorSelection.range(range.from == range.anchor ? from3 : to, range.from == range.head ? from3 : to);
          }
          if (updated) {
            if (!ranges)
              ranges = sel.ranges.slice();
            ranges[i] = updated;
          }
        }
        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
      select(event) {
        let { view } = this, selection2 = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
        if (this.mustSelect || !selection2.eq(view.state.selection, this.dragging === false))
          this.view.dispatch({
            selection: selection2,
            userEvent: "select.pointer"
          });
        this.mustSelect = false;
      }
      update(update) {
        if (update.transactions.some((tr) => tr.isUserEvent("input.type")))
          this.destroy();
        else if (this.style.update(update))
          setTimeout(() => this.select(this.lastEvent), 20);
      }
    };
    handlers = /* @__PURE__ */ Object.create(null);
    observers = /* @__PURE__ */ Object.create(null);
    brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
    observers.scroll = (view) => {
      view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
      view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
    };
    handlers.keydown = (view, event) => {
      view.inputState.setSelectionOrigin("select");
      if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
        view.inputState.tabFocusMode = Date.now() + 2e3;
      return false;
    };
    observers.touchstart = (view, e) => {
      view.inputState.lastTouchTime = Date.now();
      view.inputState.setSelectionOrigin("select.pointer");
    };
    observers.touchmove = (view) => {
      view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
      view.observer.flush();
      if (view.inputState.lastTouchTime > Date.now() - 2e3)
        return false;
      let style2 = null;
      for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
        style2 = makeStyle(view, event);
        if (style2)
          break;
      }
      if (!style2 && event.button == 0)
        style2 = basicMouseSelection(view, event);
      if (style2) {
        let mustFocus = !view.hasFocus;
        view.inputState.startMouseSelection(new MouseSelection(view, event, style2, mustFocus));
        if (mustFocus)
          view.observer.ignore(() => {
            focusPreventScroll(view.contentDOM);
            let active = view.root.activeElement;
            if (active && !active.contains(view.contentDOM))
              active.blur();
          });
        let mouseSel = view.inputState.mouseSelection;
        if (mouseSel) {
          mouseSel.start(event);
          return mouseSel.dragging === false;
        }
      }
      return false;
    };
    inside = (x, y, rect2) => y >= rect2.top && y <= rect2.bottom && x >= rect2.left && x <= rect2.right;
    BadMouseDetail = browser.ie && browser.ie_version <= 11;
    lastMouseDown = null;
    lastMouseDownCount = 0;
    lastMouseDownTime = 0;
    handlers.dragstart = (view, event) => {
      let { selection: { main: range } } = view.state;
      if (event.target.draggable) {
        let cView = view.docView.nearest(event.target);
        if (cView && cView.isWidget) {
          let from3 = cView.posAtStart, to = from3 + cView.length;
          if (from3 >= range.to || to <= range.from)
            range = EditorSelection.range(from3, to);
        }
      }
      let { inputState } = view;
      if (inputState.mouseSelection)
        inputState.mouseSelection.dragging = true;
      inputState.draggedContent = range;
      if (event.dataTransfer) {
        event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
        event.dataTransfer.effectAllowed = "copyMove";
      }
      return false;
    };
    handlers.dragend = (view) => {
      view.inputState.draggedContent = null;
      return false;
    };
    handlers.drop = (view, event) => {
      if (!event.dataTransfer)
        return false;
      if (view.state.readOnly)
        return true;
      let files = event.dataTransfer.files;
      if (files && files.length) {
        let text5 = Array(files.length), read = 0;
        let finishFile = () => {
          if (++read == files.length)
            dropText(view, event, text5.filter((s) => s != null).join(view.state.lineBreak), false);
        };
        for (let i = 0; i < files.length; i++) {
          let reader = new FileReader();
          reader.onerror = finishFile;
          reader.onload = () => {
            if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
              text5[i] = reader.result;
            finishFile();
          };
          reader.readAsText(files[i]);
        }
        return true;
      } else {
        let text5 = event.dataTransfer.getData("Text");
        if (text5) {
          dropText(view, event, text5, true);
          return true;
        }
      }
      return false;
    };
    handlers.paste = (view, event) => {
      if (view.state.readOnly)
        return true;
      view.observer.flush();
      let data2 = brokenClipboardAPI ? null : event.clipboardData;
      if (data2) {
        doPaste(view, data2.getData("text/plain") || data2.getData("text/uri-list"));
        return true;
      } else {
        capturePaste(view);
        return false;
      }
    };
    lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
      let { text: text5, ranges, linewise } = copiedRange(view.state);
      if (!text5 && !linewise)
        return false;
      lastLinewiseCopy = linewise ? text5 : null;
      if (event.type == "cut" && !view.state.readOnly)
        view.dispatch({
          changes: ranges,
          scrollIntoView: true,
          userEvent: "delete.cut"
        });
      let data2 = brokenClipboardAPI ? null : event.clipboardData;
      if (data2) {
        data2.clearData();
        data2.setData("text/plain", text5);
        return true;
      } else {
        captureCopy(view, text5);
        return false;
      }
    };
    isFocusChange = /* @__PURE__ */ Annotation.define();
    observers.focus = (view) => {
      view.inputState.lastFocusTime = Date.now();
      if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
      }
      updateForFocusChange(view);
    };
    observers.blur = (view) => {
      view.observer.clearSelectionRange();
      updateForFocusChange(view);
    };
    observers.compositionstart = observers.compositionupdate = (view) => {
      if (view.observer.editContext)
        return;
      if (view.inputState.compositionFirstChange == null)
        view.inputState.compositionFirstChange = true;
      if (view.inputState.composing < 0) {
        view.inputState.composing = 0;
      }
    };
    observers.compositionend = (view) => {
      if (view.observer.editContext)
        return;
      view.inputState.composing = -1;
      view.inputState.compositionEndedAt = Date.now();
      view.inputState.compositionPendingKey = true;
      view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
      view.inputState.compositionFirstChange = null;
      if (browser.chrome && browser.android) {
        view.observer.flushSoon();
      } else if (view.inputState.compositionPendingChange) {
        Promise.resolve().then(() => view.observer.flush());
      } else {
        setTimeout(() => {
          if (view.inputState.composing < 0 && view.docView.hasComposition)
            view.update([]);
        }, 50);
      }
    };
    observers.contextmenu = (view) => {
      view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
      var _a2, _b2;
      if (event.inputType == "insertReplacementText" && view.observer.editContext) {
        let text5 = (_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.getData("text/plain"), ranges = event.getTargetRanges();
        if (text5 && ranges.length) {
          let r2 = ranges[0];
          let from3 = view.posAtDOM(r2.startContainer, r2.startOffset), to = view.posAtDOM(r2.endContainer, r2.endOffset);
          applyDOMChangeInner(view, { from: from3, to, insert: view.state.toText(text5) }, null);
          return true;
        }
      }
      let pending;
      if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
        view.observer.delayAndroidKey(pending.key, pending.keyCode);
        if (pending.key == "Backspace" || pending.key == "Delete") {
          let startViewHeight = ((_b2 = window.visualViewport) === null || _b2 === void 0 ? void 0 : _b2.height) || 0;
          setTimeout(() => {
            var _a3;
            if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
              view.contentDOM.blur();
              view.focus();
            }
          }, 100);
        }
      }
      if (browser.ios && event.inputType == "deleteContentForward") {
        view.observer.flushSoon();
      }
      if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
        setTimeout(() => observers.compositionend(view, event), 20);
      }
      return false;
    };
    appliedFirefoxHack = /* @__PURE__ */ new Set();
    wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    heightChangeFlag = false;
    HeightOracle = class {
      constructor(lineWrapping) {
        this.lineWrapping = lineWrapping;
        this.doc = Text.empty;
        this.heightSamples = {};
        this.lineHeight = 14;
        this.charWidth = 7;
        this.textHeight = 14;
        this.lineLength = 30;
      }
      heightForGap(from3, to) {
        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from3).number + 1;
        if (this.lineWrapping)
          lines += Math.max(0, Math.ceil((to - from3 - lines * this.lineLength * 0.5) / this.lineLength));
        return this.lineHeight * lines;
      }
      heightForLine(length) {
        if (!this.lineWrapping)
          return this.lineHeight;
        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
        return lines * this.lineHeight;
      }
      setDoc(doc2) {
        this.doc = doc2;
        return this;
      }
      mustRefreshForWrapping(whiteSpace) {
        return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
      }
      mustRefreshForHeights(lineHeights) {
        let newHeight = false;
        for (let i = 0; i < lineHeights.length; i++) {
          let h = lineHeights[i];
          if (h < 0) {
            i++;
          } else if (!this.heightSamples[Math.floor(h * 10)]) {
            newHeight = true;
            this.heightSamples[Math.floor(h * 10)] = true;
          }
        }
        return newHeight;
      }
      refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
        this.lineWrapping = lineWrapping;
        this.lineHeight = lineHeight;
        this.charWidth = charWidth;
        this.textHeight = textHeight;
        this.lineLength = lineLength;
        if (changed) {
          this.heightSamples = {};
          for (let i = 0; i < knownHeights.length; i++) {
            let h = knownHeights[i];
            if (h < 0)
              i++;
            else
              this.heightSamples[Math.floor(h * 10)] = true;
          }
        }
        return changed;
      }
    };
    MeasuredHeights = class {
      constructor(from3, heights) {
        this.from = from3;
        this.heights = heights;
        this.index = 0;
      }
      get more() {
        return this.index < this.heights.length;
      }
    };
    BlockInfo = class _BlockInfo {
      /**
      @internal
      */
      constructor(from3, length, top3, height, _content) {
        this.from = from3;
        this.length = length;
        this.top = top3;
        this.height = height;
        this._content = _content;
      }
      /**
      The type of element this is. When querying lines, this may be
      an array of all the blocks that make up the line.
      */
      get type() {
        return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
      get to() {
        return this.from + this.length;
      }
      /**
      The bottom position of the element.
      */
      get bottom() {
        return this.top + this.height;
      }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
      get widget() {
        return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
      get widgetLineBreaks() {
        return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
      join(other) {
        let content3 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
        return new _BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content3);
      }
    };
    QueryType = /* @__PURE__ */ function(QueryType3) {
      QueryType3[QueryType3["ByPos"] = 0] = "ByPos";
      QueryType3[QueryType3["ByHeight"] = 1] = "ByHeight";
      QueryType3[QueryType3["ByPosNoHeight"] = 2] = "ByPosNoHeight";
      return QueryType3;
    }(QueryType || (QueryType = {}));
    Epsilon = 1e-3;
    HeightMap = class _HeightMap {
      constructor(length, height, flags = 2) {
        this.length = length;
        this.height = height;
        this.flags = flags;
      }
      get outdated() {
        return (this.flags & 2) > 0;
      }
      set outdated(value) {
        this.flags = (value ? 2 : 0) | this.flags & ~2;
      }
      setHeight(height) {
        if (this.height != height) {
          if (Math.abs(this.height - height) > Epsilon)
            heightChangeFlag = true;
          this.height = height;
        }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
      replace(_from, _to, nodes) {
        return _HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
      decomposeLeft(_to, result) {
        result.push(this);
      }
      decomposeRight(_from, result) {
        result.push(this);
      }
      applyChanges(decorations2, oldDoc, oracle, changes) {
        let me = this, doc2 = oracle.doc;
        for (let i = changes.length - 1; i >= 0; i--) {
          let { fromA, toA, fromB, toB } = changes[i];
          let start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
          let end2 = start2.to >= toA ? start2 : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
          toB += end2.to - toA;
          toA = end2.to;
          while (i > 0 && start2.from <= changes[i - 1].toA) {
            fromA = changes[i - 1].fromA;
            fromB = changes[i - 1].fromB;
            i--;
            if (fromA < start2.from)
              start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
          }
          fromB += start2.from - fromA;
          fromA = start2.from;
          let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
          me = replace(me, me.replace(fromA, toA, nodes));
        }
        return me.updateHeight(oracle, 0);
      }
      static empty() {
        return new HeightMapText(0, 0);
      }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
      static of(nodes) {
        if (nodes.length == 1)
          return nodes[0];
        let i = 0, j = nodes.length, before = 0, after = 0;
        for (; ; ) {
          if (i == j) {
            if (before > after * 2) {
              let split = nodes[i - 1];
              if (split.break)
                nodes.splice(--i, 1, split.left, null, split.right);
              else
                nodes.splice(--i, 1, split.left, split.right);
              j += 1 + split.break;
              before -= split.size;
            } else if (after > before * 2) {
              let split = nodes[j];
              if (split.break)
                nodes.splice(j, 1, split.left, null, split.right);
              else
                nodes.splice(j, 1, split.left, split.right);
              j += 2 + split.break;
              after -= split.size;
            } else {
              break;
            }
          } else if (before < after) {
            let next2 = nodes[i++];
            if (next2)
              before += next2.size;
          } else {
            let next2 = nodes[--j];
            if (next2)
              after += next2.size;
          }
        }
        let brk = 0;
        if (nodes[i - 1] == null) {
          brk = 1;
          i--;
        } else if (nodes[i] == null) {
          brk = 1;
          j++;
        }
        return new HeightMapBranch(_HeightMap.of(nodes.slice(0, i)), brk, _HeightMap.of(nodes.slice(j)));
      }
    };
    HeightMap.prototype.size = 1;
    HeightMapBlock = class extends HeightMap {
      constructor(length, height, deco) {
        super(length, height);
        this.deco = deco;
      }
      blockAt(_height, _oracle, top3, offset) {
        return new BlockInfo(offset, this.length, top3, this.height, this.deco || 0);
      }
      lineAt(_value, _type, oracle, top3, offset) {
        return this.blockAt(0, oracle, top3, offset);
      }
      forEachLine(from3, to, oracle, top3, offset, f) {
        if (from3 <= offset + this.length && to >= offset)
          f(this.blockAt(0, oracle, top3, offset));
      }
      updateHeight(oracle, offset = 0, _force = false, measured) {
        if (measured && measured.from <= offset && measured.more)
          this.setHeight(measured.heights[measured.index++]);
        this.outdated = false;
        return this;
      }
      toString() {
        return `block(${this.length})`;
      }
    };
    HeightMapText = class _HeightMapText extends HeightMapBlock {
      constructor(length, height) {
        super(length, height, null);
        this.collapsed = 0;
        this.widgetHeight = 0;
        this.breaks = 0;
      }
      blockAt(_height, _oracle, top3, offset) {
        return new BlockInfo(offset, this.length, top3, this.height, this.breaks);
      }
      replace(_from, _to, nodes) {
        let node = nodes[0];
        if (nodes.length == 1 && (node instanceof _HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
          if (node instanceof HeightMapGap)
            node = new _HeightMapText(node.length, this.height);
          else
            node.height = this.height;
          if (!this.outdated)
            node.outdated = false;
          return node;
        } else {
          return HeightMap.of(nodes);
        }
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
        if (measured && measured.from <= offset && measured.more)
          this.setHeight(measured.heights[measured.index++]);
        else if (force || this.outdated)
          this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
        this.outdated = false;
        return this;
      }
      toString() {
        return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
      }
    };
    HeightMapGap = class _HeightMapGap extends HeightMap {
      constructor(length) {
        super(length, 0);
      }
      heightMetrics(oracle, offset) {
        let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
        let lines = lastLine - firstLine + 1;
        let perLine, perChar = 0;
        if (oracle.lineWrapping) {
          let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
          perLine = totalPerLine / lines;
          if (this.length > lines + 1)
            perChar = (this.height - totalPerLine) / (this.length - lines - 1);
        } else {
          perLine = this.height / lines;
        }
        return { firstLine, lastLine, perLine, perChar };
      }
      blockAt(height, oracle, top3, offset) {
        let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
        if (oracle.lineWrapping) {
          let guess = offset + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top3) / this.height)) * this.length));
          let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
          let lineTop = Math.max(top3, height - lineHeight / 2);
          return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
        } else {
          let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top3) / perLine)));
          let { from: from3, length } = oracle.doc.line(firstLine + line);
          return new BlockInfo(from3, length, top3 + perLine * line, perLine, 0);
        }
      }
      lineAt(value, type7, oracle, top3, offset) {
        if (type7 == QueryType.ByHeight)
          return this.blockAt(value, oracle, top3, offset);
        if (type7 == QueryType.ByPosNoHeight) {
          let { from: from3, to } = oracle.doc.lineAt(value);
          return new BlockInfo(from3, to - from3, 0, 0, 0);
        }
        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
        let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
        let linesAbove = line.number - firstLine;
        let lineTop = top3 + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
        return new BlockInfo(line.from, line.length, Math.max(top3, Math.min(lineTop, top3 + this.height - lineHeight)), lineHeight, 0);
      }
      forEachLine(from3, to, oracle, top3, offset, f) {
        from3 = Math.max(from3, offset);
        to = Math.min(to, offset + this.length);
        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
        for (let pos = from3, lineTop = top3; pos <= to; ) {
          let line = oracle.doc.lineAt(pos);
          if (pos == from3) {
            let linesAbove = line.number - firstLine;
            lineTop += perLine * linesAbove + perChar * (from3 - offset - linesAbove);
          }
          let lineHeight = perLine + perChar * line.length;
          f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
          lineTop += lineHeight;
          pos = line.to + 1;
        }
      }
      replace(from3, to, nodes) {
        let after = this.length - to;
        if (after > 0) {
          let last = nodes[nodes.length - 1];
          if (last instanceof _HeightMapGap)
            nodes[nodes.length - 1] = new _HeightMapGap(last.length + after);
          else
            nodes.push(null, new _HeightMapGap(after - 1));
        }
        if (from3 > 0) {
          let first = nodes[0];
          if (first instanceof _HeightMapGap)
            nodes[0] = new _HeightMapGap(from3 + first.length);
          else
            nodes.unshift(new _HeightMapGap(from3 - 1), null);
        }
        return HeightMap.of(nodes);
      }
      decomposeLeft(to, result) {
        result.push(new _HeightMapGap(to - 1), null);
      }
      decomposeRight(from3, result) {
        result.push(null, new _HeightMapGap(this.length - from3 - 1));
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
        let end2 = offset + this.length;
        if (measured && measured.from <= offset + this.length && measured.more) {
          let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
          if (measured.from > offset)
            nodes.push(new _HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
          while (pos <= end2 && measured.more) {
            let len = oracle.doc.lineAt(pos).length;
            if (nodes.length)
              nodes.push(null);
            let height = measured.heights[measured.index++];
            if (singleHeight == -1)
              singleHeight = height;
            else if (Math.abs(height - singleHeight) >= Epsilon)
              singleHeight = -2;
            let line = new HeightMapText(len, height);
            line.outdated = false;
            nodes.push(line);
            pos += len + 1;
          }
          if (pos <= end2)
            nodes.push(null, new _HeightMapGap(end2 - pos).updateHeight(oracle, pos));
          let result = HeightMap.of(nodes);
          if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
            heightChangeFlag = true;
          return replace(this, result);
        } else if (force || this.outdated) {
          this.setHeight(oracle.heightForGap(offset, offset + this.length));
          this.outdated = false;
        }
        return this;
      }
      toString() {
        return `gap(${this.length})`;
      }
    };
    HeightMapBranch = class extends HeightMap {
      constructor(left, brk, right) {
        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
        this.left = left;
        this.right = right;
        this.size = left.size + right.size;
      }
      get break() {
        return this.flags & 1;
      }
      blockAt(height, oracle, top3, offset) {
        let mid = top3 + this.left.height;
        return height < mid ? this.left.blockAt(height, oracle, top3, offset) : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
      }
      lineAt(value, type7, oracle, top3, offset) {
        let rightTop = top3 + this.left.height, rightOffset = offset + this.left.length + this.break;
        let left = type7 == QueryType.ByHeight ? value < rightTop : value < rightOffset;
        let base5 = left ? this.left.lineAt(value, type7, oracle, top3, offset) : this.right.lineAt(value, type7, oracle, rightTop, rightOffset);
        if (this.break || (left ? base5.to < rightOffset : base5.from > rightOffset))
          return base5;
        let subQuery = type7 == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
        if (left)
          return base5.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
        else
          return this.left.lineAt(rightOffset, subQuery, oracle, top3, offset).join(base5);
      }
      forEachLine(from3, to, oracle, top3, offset, f) {
        let rightTop = top3 + this.left.height, rightOffset = offset + this.left.length + this.break;
        if (this.break) {
          if (from3 < rightOffset)
            this.left.forEachLine(from3, to, oracle, top3, offset, f);
          if (to >= rightOffset)
            this.right.forEachLine(from3, to, oracle, rightTop, rightOffset, f);
        } else {
          let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top3, offset);
          if (from3 < mid.from)
            this.left.forEachLine(from3, mid.from - 1, oracle, top3, offset, f);
          if (mid.to >= from3 && mid.from <= to)
            f(mid);
          if (to > mid.to)
            this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
        }
      }
      replace(from3, to, nodes) {
        let rightStart = this.left.length + this.break;
        if (to < rightStart)
          return this.balanced(this.left.replace(from3, to, nodes), this.right);
        if (from3 > this.left.length)
          return this.balanced(this.left, this.right.replace(from3 - rightStart, to - rightStart, nodes));
        let result = [];
        if (from3 > 0)
          this.decomposeLeft(from3, result);
        let left = result.length;
        for (let node of nodes)
          result.push(node);
        if (from3 > 0)
          mergeGaps(result, left - 1);
        if (to < this.length) {
          let right = result.length;
          this.decomposeRight(to, result);
          mergeGaps(result, right);
        }
        return HeightMap.of(result);
      }
      decomposeLeft(to, result) {
        let left = this.left.length;
        if (to <= left)
          return this.left.decomposeLeft(to, result);
        result.push(this.left);
        if (this.break) {
          left++;
          if (to >= left)
            result.push(null);
        }
        if (to > left)
          this.right.decomposeLeft(to - left, result);
      }
      decomposeRight(from3, result) {
        let left = this.left.length, right = left + this.break;
        if (from3 >= right)
          return this.right.decomposeRight(from3 - right, result);
        if (from3 < left)
          this.left.decomposeRight(from3, result);
        if (this.break && from3 < right)
          result.push(null);
        result.push(this.right);
      }
      balanced(left, right) {
        if (left.size > 2 * right.size || right.size > 2 * left.size)
          return HeightMap.of(this.break ? [left, null, right] : [left, right]);
        this.left = replace(this.left, left);
        this.right = replace(this.right, right);
        this.setHeight(left.height + right.height);
        this.outdated = left.outdated || right.outdated;
        this.size = left.size + right.size;
        this.length = left.length + this.break + right.length;
        return this;
      }
      updateHeight(oracle, offset = 0, force = false, measured) {
        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
        if (measured && measured.from <= offset + left.length && measured.more)
          rebalance = left = left.updateHeight(oracle, offset, force, measured);
        else
          left.updateHeight(oracle, offset, force);
        if (measured && measured.from <= rightStart + right.length && measured.more)
          rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
        else
          right.updateHeight(oracle, rightStart, force);
        if (rebalance)
          return this.balanced(left, right);
        this.height = this.left.height + this.right.height;
        this.outdated = false;
        return this;
      }
      toString() {
        return this.left + (this.break ? " " : "-") + this.right;
      }
    };
    relevantWidgetHeight = 5;
    NodeBuilder = class _NodeBuilder {
      constructor(pos, oracle) {
        this.pos = pos;
        this.oracle = oracle;
        this.nodes = [];
        this.lineStart = -1;
        this.lineEnd = -1;
        this.covering = null;
        this.writtenTo = pos;
      }
      get isCovered() {
        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
      span(_from, to) {
        if (this.lineStart > -1) {
          let end2 = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
          if (last instanceof HeightMapText)
            last.length += end2 - this.pos;
          else if (end2 > this.pos || !this.isCovered)
            this.nodes.push(new HeightMapText(end2 - this.pos, -1));
          this.writtenTo = end2;
          if (to > end2) {
            this.nodes.push(null);
            this.writtenTo++;
            this.lineStart = -1;
          }
        }
        this.pos = to;
      }
      point(from3, to, deco) {
        if (from3 < to || deco.heightRelevant) {
          let height = deco.widget ? deco.widget.estimatedHeight : 0;
          let breaks = deco.widget ? deco.widget.lineBreaks : 0;
          if (height < 0)
            height = this.oracle.lineHeight;
          let len = to - from3;
          if (deco.block) {
            this.addBlock(new HeightMapBlock(len, height, deco));
          } else if (len || breaks || height >= relevantWidgetHeight) {
            this.addLineDeco(height, breaks, len);
          }
        } else if (to > from3) {
          this.span(from3, to);
        }
        if (this.lineEnd > -1 && this.lineEnd < this.pos)
          this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
      enterLine() {
        if (this.lineStart > -1)
          return;
        let { from: from3, to } = this.oracle.doc.lineAt(this.pos);
        this.lineStart = from3;
        this.lineEnd = to;
        if (this.writtenTo < from3) {
          if (this.writtenTo < from3 - 1 || this.nodes[this.nodes.length - 1] == null)
            this.nodes.push(this.blankContent(this.writtenTo, from3 - 1));
          this.nodes.push(null);
        }
        if (this.pos > from3)
          this.nodes.push(new HeightMapText(this.pos - from3, -1));
        this.writtenTo = this.pos;
      }
      blankContent(from3, to) {
        let gap = new HeightMapGap(to - from3);
        if (this.oracle.doc.lineAt(from3).to == to)
          gap.flags |= 4;
        return gap;
      }
      ensureLine() {
        this.enterLine();
        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
        if (last instanceof HeightMapText)
          return last;
        let line = new HeightMapText(0, -1);
        this.nodes.push(line);
        return line;
      }
      addBlock(block3) {
        this.enterLine();
        let deco = block3.deco;
        if (deco && deco.startSide > 0 && !this.isCovered)
          this.ensureLine();
        this.nodes.push(block3);
        this.writtenTo = this.pos = this.pos + block3.length;
        if (deco && deco.endSide > 0)
          this.covering = block3;
      }
      addLineDeco(height, breaks, length) {
        let line = this.ensureLine();
        line.length += length;
        line.collapsed += length;
        line.widgetHeight = Math.max(line.widgetHeight, height);
        line.breaks += breaks;
        this.writtenTo = this.pos = this.pos + length;
      }
      finish(from3) {
        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
          this.nodes.push(new HeightMapText(0, -1));
        else if (this.writtenTo < this.pos || last == null)
          this.nodes.push(this.blankContent(this.writtenTo, this.pos));
        let pos = from3;
        for (let node of this.nodes) {
          if (node instanceof HeightMapText)
            node.updateHeight(this.oracle, pos);
          pos += node ? node.length : 1;
        }
        return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
      static build(oracle, decorations2, from3, to) {
        let builder = new _NodeBuilder(from3, oracle);
        RangeSet.spans(decorations2, from3, to, builder, 0);
        return builder.finish(from3);
      }
    };
    DecorationComparator2 = class {
      constructor() {
        this.changes = [];
      }
      compareRange() {
      }
      comparePoint(from3, to, a2, b) {
        if (from3 < to || a2 && a2.heightRelevant || b && b.heightRelevant)
          addRange(from3, to, this.changes, 5);
      }
    };
    LineGap = class {
      constructor(from3, to, size, displaySize) {
        this.from = from3;
        this.to = to;
        this.size = size;
        this.displaySize = displaySize;
      }
      static same(a2, b) {
        if (a2.length != b.length)
          return false;
        for (let i = 0; i < a2.length; i++) {
          let gA = a2[i], gB = b[i];
          if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
            return false;
        }
        return true;
      }
      draw(viewState, wrapping) {
        return Decoration.replace({
          widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
        }).range(this.from, this.to);
      }
    };
    LineGapWidget = class extends WidgetType {
      constructor(size, vertical) {
        super();
        this.size = size;
        this.vertical = vertical;
      }
      eq(other) {
        return other.size == this.size && other.vertical == this.vertical;
      }
      toDOM() {
        let elt2 = document.createElement("div");
        if (this.vertical) {
          elt2.style.height = this.size + "px";
        } else {
          elt2.style.width = this.size + "px";
          elt2.style.height = "2px";
          elt2.style.display = "inline-block";
        }
        return elt2;
      }
      get estimatedHeight() {
        return this.vertical ? this.size : -1;
      }
    };
    ViewState = class {
      constructor(state) {
        this.state = state;
        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
        this.inView = true;
        this.paddingTop = 0;
        this.paddingBottom = 0;
        this.contentDOMWidth = 0;
        this.contentDOMHeight = 0;
        this.editorHeight = 0;
        this.editorWidth = 0;
        this.scrollTop = 0;
        this.scrolledToBottom = false;
        this.scaleX = 1;
        this.scaleY = 1;
        this.scrollAnchorPos = 0;
        this.scrollAnchorHeight = -1;
        this.scaler = IdScaler;
        this.scrollTarget = null;
        this.printing = false;
        this.mustMeasureContent = true;
        this.defaultTextDirection = Direction.LTR;
        this.visibleRanges = [];
        this.mustEnforceCursorAssoc = false;
        let guessWrapping = state.facet(contentAttributes).some((v) => typeof v != "function" && v.class == "cm-lineWrapping");
        this.heightOracle = new HeightOracle(guessWrapping);
        this.stateDeco = state.facet(decorations).filter((d3) => typeof d3 != "function");
        this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
        for (let i = 0; i < 2; i++) {
          this.viewport = this.getViewport(0, null);
          if (!this.updateForViewport())
            break;
        }
        this.updateViewportLines();
        this.lineGaps = this.ensureLineGaps([]);
        this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
        this.computeVisibleRanges();
      }
      updateForViewport() {
        let viewports = [this.viewport], { main } = this.state.selection;
        for (let i = 0; i <= 1; i++) {
          let pos = i ? main.head : main.anchor;
          if (!viewports.some(({ from: from3, to }) => pos >= from3 && pos <= to)) {
            let { from: from3, to } = this.lineBlockAt(pos);
            viewports.push(new Viewport(from3, to));
          }
        }
        this.viewports = viewports.sort((a2, b) => a2.from - b.from);
        return this.updateScaler();
      }
      updateScaler() {
        let scaler = this.scaler;
        this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        return scaler.eq(this.scaler) ? 0 : 2;
      }
      updateViewportLines() {
        this.viewportLines = [];
        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block3) => {
          this.viewportLines.push(scaleBlock(block3, this.scaler));
        });
      }
      update(update, scrollTarget = null) {
        this.state = update.state;
        let prevDeco = this.stateDeco;
        this.stateDeco = this.state.facet(decorations).filter((d3) => typeof d3 != "function");
        let contentChanges = update.changedRanges;
        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
        let prevHeight = this.heightMap.height;
        let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
        clearHeightChangeFlag();
        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
        if (this.heightMap.height != prevHeight || heightChangeFlag)
          update.flags |= 2;
        if (scrollAnchor) {
          this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
          this.scrollAnchorHeight = scrollAnchor.top;
        } else {
          this.scrollAnchorPos = -1;
          this.scrollAnchorHeight = prevHeight;
        }
        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
          viewport = this.getViewport(0, scrollTarget);
        let viewportChange = viewport.from != this.viewport.from || viewport.to != this.viewport.to;
        this.viewport = viewport;
        update.flags |= this.updateForViewport();
        if (viewportChange || !update.changes.empty || update.flags & 2)
          this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
          this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
        update.flags |= this.computeVisibleRanges(update.changes);
        if (scrollTarget)
          this.scrollTarget = scrollTarget;
        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
          this.mustEnforceCursorAssoc = true;
      }
      measure(view) {
        let dom = view.contentDOM, style2 = window.getComputedStyle(dom);
        let oracle = this.heightOracle;
        let whiteSpace = style2.whiteSpace;
        this.defaultTextDirection = style2.direction == "rtl" ? Direction.RTL : Direction.LTR;
        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
        let domRect = dom.getBoundingClientRect();
        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
        this.contentDOMHeight = domRect.height;
        this.mustMeasureContent = false;
        let result = 0, bias = 0;
        if (domRect.width && domRect.height) {
          let { scaleX, scaleY } = getScale(dom, domRect);
          if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
            this.scaleX = scaleX;
            this.scaleY = scaleY;
            result |= 16;
            refresh = measureContent = true;
          }
        }
        let paddingTop = (parseInt(style2.paddingTop) || 0) * this.scaleY;
        let paddingBottom = (parseInt(style2.paddingBottom) || 0) * this.scaleY;
        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
          this.paddingTop = paddingTop;
          this.paddingBottom = paddingBottom;
          result |= 16 | 2;
        }
        if (this.editorWidth != view.scrollDOM.clientWidth) {
          if (oracle.lineWrapping)
            measureContent = true;
          this.editorWidth = view.scrollDOM.clientWidth;
          result |= 16;
        }
        let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
        if (this.scrollTop != scrollTop) {
          this.scrollAnchorHeight = -1;
          this.scrollTop = scrollTop;
        }
        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
        this.pixelViewport = pixelViewport;
        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
        if (inView != this.inView) {
          this.inView = inView;
          if (inView)
            measureContent = true;
        }
        if (!this.inView && !this.scrollTarget && !inWindow(view.dom))
          return 0;
        let contentWidth = domRect.width;
        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
          this.contentDOMWidth = domRect.width;
          this.editorHeight = view.scrollDOM.clientHeight;
          result |= 16;
        }
        if (measureContent) {
          let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
          if (oracle.mustRefreshForHeights(lineHeights))
            refresh = true;
          if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
            let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
            refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
            if (refresh) {
              view.docView.minWidth = 0;
              result |= 16;
            }
          }
          if (dTop > 0 && dBottom > 0)
            bias = Math.max(dTop, dBottom);
          else if (dTop < 0 && dBottom < 0)
            bias = Math.min(dTop, dBottom);
          clearHeightChangeFlag();
          for (let vp of this.viewports) {
            let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
            this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
          }
          if (heightChangeFlag)
            result |= 2;
        }
        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
        if (viewportChange) {
          if (result & 2)
            result |= this.updateScaler();
          this.viewport = this.getViewport(bias, this.scrollTarget);
          result |= this.updateForViewport();
        }
        if (result & 2 || viewportChange)
          this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
          this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
        result |= this.computeVisibleRanges();
        if (this.mustEnforceCursorAssoc) {
          this.mustEnforceCursorAssoc = false;
          view.docView.enforceCursorAssoc();
        }
        return result;
      }
      get visibleTop() {
        return this.scaler.fromDOM(this.pixelViewport.top);
      }
      get visibleBottom() {
        return this.scaler.fromDOM(this.pixelViewport.bottom);
      }
      getViewport(bias, scrollTarget) {
        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
        let map = this.heightMap, oracle = this.heightOracle;
        let { visibleTop, visibleBottom } = this;
        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
        if (scrollTarget) {
          let { head } = scrollTarget.range;
          if (head < viewport.from || head > viewport.to) {
            let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
            let block3 = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
            if (scrollTarget.y == "center")
              topPos = (block3.top + block3.bottom) / 2 - viewHeight / 2;
            else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
              topPos = block3.top;
            else
              topPos = block3.bottom - viewHeight;
            viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
          }
        }
        return viewport;
      }
      mapViewport(viewport, changes) {
        let from3 = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
        return new Viewport(this.heightMap.lineAt(from3, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
      viewportIsAppropriate({ from: from3, to }, bias = 0) {
        if (!this.inView)
          return true;
        let { top: top3 } = this.heightMap.lineAt(from3, QueryType.ByPos, this.heightOracle, 0, 0);
        let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
        let { visibleTop, visibleBottom } = this;
        return (from3 == 0 || top3 <= visibleTop - Math.max(10, Math.min(
          -bias,
          250
          /* VP.MaxCoverMargin */
        ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
          bias,
          250
          /* VP.MaxCoverMargin */
        ))) && (top3 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
      }
      mapLineGaps(gaps, changes) {
        if (!gaps.length || changes.empty)
          return gaps;
        let mapped = [];
        for (let gap of gaps)
          if (!changes.touchesRange(gap.from, gap.to))
            mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
        return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
      ensureLineGaps(current, mayMeasure) {
        let wrapping = this.heightOracle.lineWrapping;
        let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
        if (this.defaultTextDirection != Direction.LTR && !wrapping)
          return [];
        let gaps = [];
        let addGap = (from3, to, line, structure) => {
          if (to - from3 < halfMargin)
            return;
          let sel = this.state.selection.main, avoid = [sel.from];
          if (!sel.empty)
            avoid.push(sel.to);
          for (let pos of avoid) {
            if (pos > from3 && pos < to) {
              addGap(from3, pos - 10, line, structure);
              addGap(pos + 10, to, line, structure);
              return;
            }
          }
          let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from3) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
          if (!gap) {
            if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to && r2.to >= to)) {
              let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
              if (lineStart > from3)
                to = lineStart;
            }
            let size = this.gapSize(line, from3, to, structure);
            let displaySize = wrapping || size < 2e6 ? size : 2e6;
            gap = new LineGap(from3, to, size, displaySize);
          }
          gaps.push(gap);
        };
        let checkLine = (line) => {
          if (line.length < doubleMargin || line.type != BlockType.Text)
            return;
          let structure = lineStructure(line.from, line.to, this.stateDeco);
          if (structure.total < doubleMargin)
            return;
          let target = this.scrollTarget ? this.scrollTarget.range.head : null;
          let viewFrom, viewTo;
          if (wrapping) {
            let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
            let top3, bot;
            if (target != null) {
              let targetFrac = findFraction(structure, target);
              let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
              top3 = targetFrac - spaceFrac;
              bot = targetFrac + spaceFrac;
            } else {
              top3 = (this.visibleTop - line.top - marginHeight) / line.height;
              bot = (this.visibleBottom - line.top + marginHeight) / line.height;
            }
            viewFrom = findPosition(structure, top3);
            viewTo = findPosition(structure, bot);
          } else {
            let totalWidth = structure.total * this.heightOracle.charWidth;
            let marginWidth = margin * this.heightOracle.charWidth;
            let horizOffset = 0;
            if (totalWidth > 2e6)
              for (let old of current) {
                if (old.from >= line.from && old.from < line.to && old.size != old.displaySize && old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                  horizOffset = old.size - old.displaySize;
              }
            let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
            let left, right;
            if (target != null) {
              let targetFrac = findFraction(structure, target);
              let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
              left = targetFrac - spaceFrac;
              right = targetFrac + spaceFrac;
            } else {
              left = (pxLeft - marginWidth) / totalWidth;
              right = (pxRight + marginWidth) / totalWidth;
            }
            viewFrom = findPosition(structure, left);
            viewTo = findPosition(structure, right);
          }
          if (viewFrom > line.from)
            addGap(line.from, viewFrom, line, structure);
          if (viewTo < line.to)
            addGap(viewTo, line.to, line, structure);
        };
        for (let line of this.viewportLines) {
          if (Array.isArray(line.type))
            line.type.forEach(checkLine);
          else
            checkLine(line);
        }
        return gaps;
      }
      gapSize(line, from3, to, structure) {
        let fraction = findFraction(structure, to) - findFraction(structure, from3);
        if (this.heightOracle.lineWrapping) {
          return line.height * fraction;
        } else {
          return structure.total * this.heightOracle.charWidth * fraction;
        }
      }
      updateLineGaps(gaps) {
        if (!LineGap.same(gaps, this.lineGaps)) {
          this.lineGaps = gaps;
          this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
        }
      }
      computeVisibleRanges(changes) {
        let deco = this.stateDeco;
        if (this.lineGaps.length)
          deco = deco.concat(this.lineGapDeco);
        let ranges = [];
        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
          span(from3, to) {
            ranges.push({ from: from3, to });
          },
          point() {
          }
        }, 20);
        let changed = 0;
        if (ranges.length != this.visibleRanges.length) {
          changed = 8 | 4;
        } else {
          for (let i = 0; i < ranges.length && !(changed & 8); i++) {
            let old = this.visibleRanges[i], nw = ranges[i];
            if (old.from != nw.from || old.to != nw.to) {
              changed |= 4;
              if (!(changes && changes.mapPos(old.from, -1) == nw.from && changes.mapPos(old.to, 1) == nw.to))
                changed |= 8;
            }
          }
        }
        this.visibleRanges = ranges;
        return changed;
      }
      lineBlockAt(pos) {
        return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
      lineBlockAtHeight(height) {
        return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l) => l.top <= height && l.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
      scrollAnchorAt(scrollTop) {
        let block3 = this.lineBlockAtHeight(scrollTop + 8);
        return block3.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block3 : this.viewportLines[0];
      }
      elementAtHeight(height) {
        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
      get docHeight() {
        return this.scaler.toDOM(this.heightMap.height);
      }
      get contentHeight() {
        return this.docHeight + this.paddingTop + this.paddingBottom;
      }
    };
    Viewport = class {
      constructor(from3, to) {
        this.from = from3;
        this.to = to;
      }
    };
    IdScaler = {
      toDOM(n) {
        return n;
      },
      fromDOM(n) {
        return n;
      },
      scale: 1,
      eq(other) {
        return other == this;
      }
    };
    BigScaler = class _BigScaler {
      constructor(oracle, heightMap, viewports) {
        let vpHeight = 0, base5 = 0, domBase = 0;
        this.viewports = viewports.map(({ from: from3, to }) => {
          let top3 = heightMap.lineAt(from3, QueryType.ByPos, oracle, 0, 0).top;
          let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
          vpHeight += bottom - top3;
          return { from: from3, to, top: top3, bottom, domTop: 0, domBottom: 0 };
        });
        this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
        for (let obj of this.viewports) {
          obj.domTop = domBase + (obj.top - base5) * this.scale;
          domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
          base5 = obj.bottom;
        }
      }
      toDOM(n) {
        for (let i = 0, base5 = 0, domBase = 0; ; i++) {
          let vp = i < this.viewports.length ? this.viewports[i] : null;
          if (!vp || n < vp.top)
            return domBase + (n - base5) * this.scale;
          if (n <= vp.bottom)
            return vp.domTop + (n - vp.top);
          base5 = vp.bottom;
          domBase = vp.domBottom;
        }
      }
      fromDOM(n) {
        for (let i = 0, base5 = 0, domBase = 0; ; i++) {
          let vp = i < this.viewports.length ? this.viewports[i] : null;
          if (!vp || n < vp.domTop)
            return base5 + (n - domBase) / this.scale;
          if (n <= vp.domBottom)
            return vp.top + (n - vp.domTop);
          base5 = vp.bottom;
          domBase = vp.domBottom;
        }
      }
      eq(other) {
        if (!(other instanceof _BigScaler))
          return false;
        return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp, i) => vp.from == other.viewports[i].from && vp.to == other.viewports[i].to);
      }
    };
    theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
    darkTheme = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.indexOf(true) > -1 });
    baseThemeID = /* @__PURE__ */ StyleModule.newName();
    baseLightID = /* @__PURE__ */ StyleModule.newName();
    baseDarkID = /* @__PURE__ */ StyleModule.newName();
    lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
      "&": {
        position: "relative !important",
        boxSizing: "border-box",
        "&.cm-focused": {
          // Provide a simple default outline to make sure a focused
          // editor is visually distinct. Can't leave the default behavior
          // because that will apply to the content element, which is
          // inside the scrollable container and doesn't include the
          // gutters. We also can't use an 'auto' outline, since those
          // are, for some reason, drawn behind the element content, which
          // will cause things like the active line background to cover
          // the outline (#297).
          outline: "1px dotted #212121"
        },
        display: "flex !important",
        flexDirection: "column"
      },
      ".cm-scroller": {
        display: "flex !important",
        alignItems: "flex-start !important",
        fontFamily: "monospace",
        lineHeight: 1.4,
        height: "100%",
        overflowX: "auto",
        position: "relative",
        zIndex: 0,
        overflowAnchor: "none"
      },
      ".cm-content": {
        margin: 0,
        flexGrow: 2,
        flexShrink: 0,
        display: "block",
        whiteSpace: "pre",
        wordWrap: "normal",
        // https://github.com/codemirror/dev/issues/456
        boxSizing: "border-box",
        minHeight: "100%",
        padding: "4px 0",
        outline: "none",
        "&[contenteditable=true]": {
          WebkitUserModify: "read-write-plaintext-only"
        }
      },
      ".cm-lineWrapping": {
        whiteSpace_fallback: "pre-wrap",
        // For IE
        whiteSpace: "break-spaces",
        wordBreak: "break-word",
        // For Safari, which doesn't support overflow-wrap: anywhere
        overflowWrap: "anywhere",
        flexShrink: 1
      },
      "&light .cm-content": { caretColor: "black" },
      "&dark .cm-content": { caretColor: "white" },
      ".cm-line": {
        display: "block",
        padding: "0 2px 0 6px"
      },
      ".cm-layer": {
        position: "absolute",
        left: 0,
        top: 0,
        contain: "size style",
        "& > *": {
          position: "absolute"
        }
      },
      "&light .cm-selectionBackground": {
        background: "#d9d9d9"
      },
      "&dark .cm-selectionBackground": {
        background: "#222"
      },
      "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
        background: "#d7d4f0"
      },
      "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
        background: "#233"
      },
      ".cm-cursorLayer": {
        pointerEvents: "none"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
        animation: "steps(1) cm-blink 1.2s infinite"
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      ".cm-cursor, .cm-dropCursor": {
        borderLeft: "1.2px solid black",
        marginLeft: "-0.6px",
        pointerEvents: "none"
      },
      ".cm-cursor": {
        display: "none"
      },
      "&dark .cm-cursor": {
        borderLeftColor: "#ddd"
      },
      ".cm-dropCursor": {
        position: "absolute"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
        display: "block"
      },
      ".cm-iso": {
        unicodeBidi: "isolate"
      },
      ".cm-announced": {
        position: "fixed",
        top: "-10000px"
      },
      "@media print": {
        ".cm-announced": { display: "none" }
      },
      "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
      "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
      "&light .cm-specialChar": { color: "red" },
      "&dark .cm-specialChar": { color: "#f78" },
      ".cm-gutters": {
        flexShrink: 0,
        display: "flex",
        height: "100%",
        boxSizing: "border-box",
        insetInlineStart: 0,
        zIndex: 200
      },
      "&light .cm-gutters": {
        backgroundColor: "#f5f5f5",
        color: "#6c6c6c",
        borderRight: "1px solid #ddd"
      },
      "&dark .cm-gutters": {
        backgroundColor: "#333338",
        color: "#ccc"
      },
      ".cm-gutter": {
        display: "flex !important",
        // Necessary -- prevents margin collapsing
        flexDirection: "column",
        flexShrink: 0,
        boxSizing: "border-box",
        minHeight: "100%",
        overflow: "hidden"
      },
      ".cm-gutterElement": {
        boxSizing: "border-box"
      },
      ".cm-lineNumbers .cm-gutterElement": {
        padding: "0 3px 0 5px",
        minWidth: "20px",
        textAlign: "right",
        whiteSpace: "nowrap"
      },
      "&light .cm-activeLineGutter": {
        backgroundColor: "#e2f2ff"
      },
      "&dark .cm-activeLineGutter": {
        backgroundColor: "#222227"
      },
      ".cm-panels": {
        boxSizing: "border-box",
        position: "sticky",
        left: 0,
        right: 0,
        zIndex: 300
      },
      "&light .cm-panels": {
        backgroundColor: "#f5f5f5",
        color: "black"
      },
      "&light .cm-panels-top": {
        borderBottom: "1px solid #ddd"
      },
      "&light .cm-panels-bottom": {
        borderTop: "1px solid #ddd"
      },
      "&dark .cm-panels": {
        backgroundColor: "#333338",
        color: "white"
      },
      ".cm-tab": {
        display: "inline-block",
        overflow: "hidden",
        verticalAlign: "bottom"
      },
      ".cm-widgetBuffer": {
        verticalAlign: "text-top",
        height: "1em",
        width: 0,
        display: "inline"
      },
      ".cm-placeholder": {
        color: "#888",
        display: "inline-block",
        verticalAlign: "top",
        userSelect: "none"
      },
      ".cm-highlightSpace": {
        backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
        backgroundPosition: "center"
      },
      ".cm-highlightTab": {
        backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
        backgroundSize: "auto 100%",
        backgroundPosition: "right 90%",
        backgroundRepeat: "no-repeat"
      },
      ".cm-trailingSpace": {
        backgroundColor: "#ff332255"
      },
      ".cm-button": {
        verticalAlign: "middle",
        color: "inherit",
        fontSize: "70%",
        padding: ".2em 1em",
        borderRadius: "1px"
      },
      "&light .cm-button": {
        backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
        border: "1px solid #888",
        "&:active": {
          backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
        }
      },
      "&dark .cm-button": {
        backgroundImage: "linear-gradient(#393939, #111)",
        border: "1px solid #888",
        "&:active": {
          backgroundImage: "linear-gradient(#111, #333)"
        }
      },
      ".cm-textfield": {
        verticalAlign: "middle",
        color: "inherit",
        fontSize: "70%",
        border: "1px solid silver",
        padding: ".2em .5em"
      },
      "&light .cm-textfield": {
        backgroundColor: "white"
      },
      "&dark .cm-textfield": {
        border: "1px solid #555",
        backgroundColor: "inherit"
      }
    }, lightDarkIDs);
    observeOptions = {
      childList: true,
      characterData: true,
      subtree: true,
      attributes: true,
      characterDataOldValue: true
    };
    useCharData = browser.ie && browser.ie_version <= 11;
    DOMObserver = class {
      constructor(view) {
        this.view = view;
        this.active = false;
        this.editContext = null;
        this.selectionRange = new DOMSelectionState();
        this.selectionChanged = false;
        this.delayedFlush = -1;
        this.resizeTimeout = -1;
        this.queue = [];
        this.delayedAndroidKey = null;
        this.flushingAndroidKey = -1;
        this.lastChange = 0;
        this.scrollTargets = [];
        this.intersection = null;
        this.resizeScroll = null;
        this.intersecting = false;
        this.gapIntersection = null;
        this.gaps = [];
        this.printQuery = null;
        this.parentCheck = -1;
        this.dom = view.contentDOM;
        this.observer = new MutationObserver((mutations) => {
          for (let mut of mutations)
            this.queue.push(mut);
          if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
            this.flushSoon();
          else
            this.flush();
        });
        if (window.EditContext && view.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
        !(browser.chrome && browser.chrome_version < 126)) {
          this.editContext = new EditContextManager(view);
          if (view.state.facet(editable))
            view.contentDOM.editContext = this.editContext.editContext;
        }
        if (useCharData)
          this.onCharData = (event) => {
            this.queue.push({
              target: event.target,
              type: "characterData",
              oldValue: event.prevValue
            });
            this.flushSoon();
          };
        this.onSelectionChange = this.onSelectionChange.bind(this);
        this.onResize = this.onResize.bind(this);
        this.onPrint = this.onPrint.bind(this);
        this.onScroll = this.onScroll.bind(this);
        if (window.matchMedia)
          this.printQuery = window.matchMedia("print");
        if (typeof ResizeObserver == "function") {
          this.resizeScroll = new ResizeObserver(() => {
            var _a2;
            if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
              this.onResize();
          });
          this.resizeScroll.observe(view.scrollDOM);
        }
        this.addWindowListeners(this.win = view.win);
        this.start();
        if (typeof IntersectionObserver == "function") {
          this.intersection = new IntersectionObserver((entries) => {
            if (this.parentCheck < 0)
              this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
            if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
              this.intersecting = !this.intersecting;
              if (this.intersecting != this.view.inView)
                this.onScrollChanged(document.createEvent("Event"));
            }
          }, { threshold: [0, 1e-3] });
          this.intersection.observe(this.dom);
          this.gapIntersection = new IntersectionObserver((entries) => {
            if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
              this.onScrollChanged(document.createEvent("Event"));
          }, {});
        }
        this.listenForScroll();
        this.readSelectionRange();
      }
      onScrollChanged(e) {
        this.view.inputState.runHandlers("scroll", e);
        if (this.intersecting)
          this.view.measure();
      }
      onScroll(e) {
        if (this.intersecting)
          this.flush(false);
        if (this.editContext)
          this.view.requestMeasure(this.editContext.measureReq);
        this.onScrollChanged(e);
      }
      onResize() {
        if (this.resizeTimeout < 0)
          this.resizeTimeout = setTimeout(() => {
            this.resizeTimeout = -1;
            this.view.requestMeasure();
          }, 50);
      }
      onPrint(event) {
        if ((event.type == "change" || !event.type) && !event.matches)
          return;
        this.view.viewState.printing = true;
        this.view.measure();
        setTimeout(() => {
          this.view.viewState.printing = false;
          this.view.requestMeasure();
        }, 500);
      }
      updateGaps(gaps) {
        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
          this.gapIntersection.disconnect();
          for (let gap of gaps)
            this.gapIntersection.observe(gap);
          this.gaps = gaps;
        }
      }
      onSelectionChange(event) {
        let wasChanged = this.selectionChanged;
        if (!this.readSelectionRange() || this.delayedAndroidKey)
          return;
        let { view } = this, sel = this.selectionRange;
        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
          return;
        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
        if (context && context.ignoreEvent(event)) {
          if (!wasChanged)
            this.selectionChanged = false;
          return;
        }
        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
        sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
          this.flushSoon();
        else
          this.flush(false);
      }
      readSelectionRange() {
        let { view } = this;
        let selection2 = getSelection(view.root);
        if (!selection2)
          return false;
        let range = browser.safari && view.root.nodeType == 11 && view.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection2) || selection2;
        if (!range || this.selectionRange.eq(range))
          return false;
        let local = hasSelection(this.dom, range);
        if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
          this.view.inputState.lastFocusTime = 0;
          view.docView.updateSelection();
          return false;
        }
        this.selectionRange.setRange(range);
        if (local)
          this.selectionChanged = true;
        return true;
      }
      setSelectionRange(anchor, head) {
        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
        this.selectionChanged = false;
      }
      clearSelectionRange() {
        this.selectionRange.set(null, 0, null, 0);
      }
      listenForScroll() {
        this.parentCheck = -1;
        let i = 0, changed = null;
        for (let dom = this.dom; dom; ) {
          if (dom.nodeType == 1) {
            if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
              i++;
            else if (!changed)
              changed = this.scrollTargets.slice(0, i);
            if (changed)
              changed.push(dom);
            dom = dom.assignedSlot || dom.parentNode;
          } else if (dom.nodeType == 11) {
            dom = dom.host;
          } else {
            break;
          }
        }
        if (i < this.scrollTargets.length && !changed)
          changed = this.scrollTargets.slice(0, i);
        if (changed) {
          for (let dom of this.scrollTargets)
            dom.removeEventListener("scroll", this.onScroll);
          for (let dom of this.scrollTargets = changed)
            dom.addEventListener("scroll", this.onScroll);
        }
      }
      ignore(f) {
        if (!this.active)
          return f();
        try {
          this.stop();
          return f();
        } finally {
          this.start();
          this.clear();
        }
      }
      start() {
        if (this.active)
          return;
        this.observer.observe(this.dom, observeOptions);
        if (useCharData)
          this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
        this.active = true;
      }
      stop() {
        if (!this.active)
          return;
        this.active = false;
        this.observer.disconnect();
        if (useCharData)
          this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
      clear() {
        this.processRecords();
        this.queue.length = 0;
        this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
      delayAndroidKey(key, keyCode) {
        var _a2;
        if (!this.delayedAndroidKey) {
          let flush = () => {
            let key2 = this.delayedAndroidKey;
            if (key2) {
              this.clearDelayedAndroidKey();
              this.view.inputState.lastKeyCode = key2.keyCode;
              this.view.inputState.lastKeyTime = Date.now();
              let flushed = this.flush();
              if (!flushed && key2.force)
                dispatchKey(this.dom, key2.key, key2.keyCode);
            }
          };
          this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
        }
        if (!this.delayedAndroidKey || key == "Enter")
          this.delayedAndroidKey = {
            key,
            keyCode,
            // Only run the key handler when no changes are detected if
            // this isn't coming right after another change, in which case
            // it is probably part of a weird chain of updates, and should
            // be ignored if it returns the DOM to its previous state.
            force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
          };
      }
      clearDelayedAndroidKey() {
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        this.delayedAndroidKey = null;
        this.flushingAndroidKey = -1;
      }
      flushSoon() {
        if (this.delayedFlush < 0)
          this.delayedFlush = this.view.win.requestAnimationFrame(() => {
            this.delayedFlush = -1;
            this.flush();
          });
      }
      forceFlush() {
        if (this.delayedFlush >= 0) {
          this.view.win.cancelAnimationFrame(this.delayedFlush);
          this.delayedFlush = -1;
        }
        this.flush();
      }
      pendingRecords() {
        for (let mut of this.observer.takeRecords())
          this.queue.push(mut);
        return this.queue;
      }
      processRecords() {
        let records = this.pendingRecords();
        if (records.length)
          this.queue = [];
        let from3 = -1, to = -1, typeOver = false;
        for (let record of records) {
          let range = this.readMutation(record);
          if (!range)
            continue;
          if (range.typeOver)
            typeOver = true;
          if (from3 == -1) {
            ({ from: from3, to } = range);
          } else {
            from3 = Math.min(range.from, from3);
            to = Math.max(range.to, to);
          }
        }
        return { from: from3, to, typeOver };
      }
      readChange() {
        let { from: from3, to, typeOver } = this.processRecords();
        let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
        if (from3 < 0 && !newSel)
          return null;
        if (from3 > -1)
          this.lastChange = Date.now();
        this.view.inputState.lastFocusTime = 0;
        this.selectionChanged = false;
        let change = new DOMChange(this.view, from3, to, typeOver);
        this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
        return change;
      }
      // Apply pending changes, if any
      flush(readSelection = true) {
        if (this.delayedFlush >= 0 || this.delayedAndroidKey)
          return false;
        if (readSelection)
          this.readSelectionRange();
        let domChange = this.readChange();
        if (!domChange) {
          this.view.requestMeasure();
          return false;
        }
        let startState2 = this.view.state;
        let handled = applyDOMChange(this.view, domChange);
        if (this.view.state == startState2 && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
          this.view.update([]);
        return handled;
      }
      readMutation(rec) {
        let cView = this.view.docView.nearest(rec.target);
        if (!cView || cView.ignoreMutation(rec))
          return null;
        cView.markDirty(rec.type == "attributes");
        if (rec.type == "attributes")
          cView.flags |= 4;
        if (rec.type == "childList") {
          let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
          let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
          return {
            from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
            to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
            typeOver: false
          };
        } else if (rec.type == "characterData") {
          return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
        } else {
          return null;
        }
      }
      setWindow(win) {
        if (win != this.win) {
          this.removeWindowListeners(this.win);
          this.win = win;
          this.addWindowListeners(this.win);
        }
      }
      addWindowListeners(win) {
        win.addEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.addEventListener)
            this.printQuery.addEventListener("change", this.onPrint);
          else
            this.printQuery.addListener(this.onPrint);
        } else
          win.addEventListener("beforeprint", this.onPrint);
        win.addEventListener("scroll", this.onScroll);
        win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
      removeWindowListeners(win) {
        win.removeEventListener("scroll", this.onScroll);
        win.removeEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.removeEventListener)
            this.printQuery.removeEventListener("change", this.onPrint);
          else
            this.printQuery.removeListener(this.onPrint);
        } else
          win.removeEventListener("beforeprint", this.onPrint);
        win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
      update(update) {
        if (this.editContext) {
          this.editContext.update(update);
          if (update.startState.facet(editable) != update.state.facet(editable))
            update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
        }
      }
      destroy() {
        var _a2, _b2, _c;
        this.stop();
        (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
        (_b2 = this.gapIntersection) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
        for (let dom of this.scrollTargets)
          dom.removeEventListener("scroll", this.onScroll);
        this.removeWindowListeners(this.win);
        clearTimeout(this.parentCheck);
        clearTimeout(this.resizeTimeout);
        this.win.cancelAnimationFrame(this.delayedFlush);
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        if (this.editContext) {
          this.view.contentDOM.editContext = null;
          this.editContext.destroy();
        }
      }
    };
    EditContextManager = class {
      constructor(view) {
        this.from = 0;
        this.to = 0;
        this.pendingContextChange = null;
        this.handlers = /* @__PURE__ */ Object.create(null);
        this.composing = null;
        this.resetRange(view.state);
        let context = this.editContext = new window.EditContext({
          text: view.state.doc.sliceString(this.from, this.to),
          selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
          selectionEnd: this.toContextPos(view.state.selection.main.head)
        });
        this.handlers.textupdate = (e) => {
          let main = view.state.selection.main, { anchor, head } = main;
          let from3 = this.toEditorPos(e.updateRangeStart), to = this.toEditorPos(e.updateRangeEnd);
          if (view.inputState.composing >= 0 && !this.composing)
            this.composing = { contextBase: e.updateRangeStart, editorBase: from3, drifted: false };
          let change = { from: from3, to, insert: Text.of(e.text.split("\n")) };
          if (change.from == this.from && anchor < this.from)
            change.from = anchor;
          else if (change.to == this.to && anchor > this.to)
            change.to = anchor;
          if (change.from == change.to && !change.insert.length) {
            let newSel = EditorSelection.single(this.toEditorPos(e.selectionStart), this.toEditorPos(e.selectionEnd));
            if (!newSel.main.eq(main))
              view.dispatch({ selection: newSel, userEvent: "select" });
            return;
          }
          if ((browser.mac || browser.android) && change.from == head - 1 && /^\. ?$/.test(e.text) && view.contentDOM.getAttribute("autocorrect") == "off")
            change = { from: from3, to, insert: Text.of([e.text.replace(".", " ")]) };
          this.pendingContextChange = change;
          if (!view.state.readOnly) {
            let newLen = this.to - this.from + (change.to - change.from + change.insert.length);
            applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e.selectionStart, newLen), this.toEditorPos(e.selectionEnd, newLen)));
          }
          if (this.pendingContextChange) {
            this.revertPending(view.state);
            this.setSelection(view.state);
          }
        };
        this.handlers.characterboundsupdate = (e) => {
          let rects = [], prev = null;
          for (let i = this.toEditorPos(e.rangeStart), end2 = this.toEditorPos(e.rangeEnd); i < end2; i++) {
            let rect2 = view.coordsForChar(i);
            prev = rect2 && new DOMRect(rect2.left, rect2.top, rect2.right - rect2.left, rect2.bottom - rect2.top) || prev || new DOMRect();
            rects.push(prev);
          }
          context.updateCharacterBounds(e.rangeStart, rects);
        };
        this.handlers.textformatupdate = (e) => {
          let deco = [];
          for (let format of e.getTextFormats()) {
            let lineStyle = format.underlineStyle, thickness = format.underlineThickness;
            if (lineStyle != "None" && thickness != "None") {
              let from3 = this.toEditorPos(format.rangeStart), to = this.toEditorPos(format.rangeEnd);
              if (from3 < to) {
                let style2 = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
                deco.push(Decoration.mark({ attributes: { style: style2 } }).range(from3, to));
              }
            }
          }
          view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
        };
        this.handlers.compositionstart = () => {
          if (view.inputState.composing < 0) {
            view.inputState.composing = 0;
            view.inputState.compositionFirstChange = true;
          }
        };
        this.handlers.compositionend = () => {
          view.inputState.composing = -1;
          view.inputState.compositionFirstChange = null;
          if (this.composing) {
            let { drifted } = this.composing;
            this.composing = null;
            if (drifted)
              this.reset(view.state);
          }
        };
        for (let event in this.handlers)
          context.addEventListener(event, this.handlers[event]);
        this.measureReq = { read: (view2) => {
          this.editContext.updateControlBounds(view2.contentDOM.getBoundingClientRect());
          let sel = getSelection(view2.root);
          if (sel && sel.rangeCount)
            this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
        } };
      }
      applyEdits(update) {
        let off = 0, abort = false, pending = this.pendingContextChange;
        update.changes.iterChanges((fromA, toA, _fromB, _toB, insert2) => {
          if (abort)
            return;
          let dLen = insert2.length - (toA - fromA);
          if (pending && toA >= pending.to) {
            if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert2)) {
              pending = this.pendingContextChange = null;
              off += dLen;
              this.to += dLen;
              return;
            } else {
              pending = null;
              this.revertPending(update.state);
            }
          }
          fromA += off;
          toA += off;
          if (toA <= this.from) {
            this.from += dLen;
            this.to += dLen;
          } else if (fromA < this.to) {
            if (fromA < this.from || toA > this.to || this.to - this.from + insert2.length > 3e4) {
              abort = true;
              return;
            }
            this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert2.toString());
            this.to += dLen;
          }
          off += dLen;
        });
        if (pending && !abort)
          this.revertPending(update.state);
        return !abort;
      }
      update(update) {
        let reverted = this.pendingContextChange, startSel = update.startState.selection.main;
        if (this.composing && (this.composing.drifted || !update.changes.touchesRange(startSel.from, startSel.to) && update.transactions.some((tr) => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to)))) {
          this.composing.drifted = true;
          this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
        } else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
          this.pendingContextChange = null;
          this.reset(update.state);
        } else if (update.docChanged || update.selectionSet || reverted) {
          this.setSelection(update.state);
        }
        if (update.geometryChanged || update.docChanged || update.selectionSet)
          update.view.requestMeasure(this.measureReq);
      }
      resetRange(state) {
        let { head } = state.selection.main;
        this.from = Math.max(
          0,
          head - 1e4
          /* CxVp.Margin */
        );
        this.to = Math.min(
          state.doc.length,
          head + 1e4
          /* CxVp.Margin */
        );
      }
      reset(state) {
        this.resetRange(state);
        this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
        this.setSelection(state);
      }
      revertPending(state) {
        let pending = this.pendingContextChange;
        this.pendingContextChange = null;
        this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
      setSelection(state) {
        let { main } = state.selection;
        let start2 = this.toContextPos(Math.max(this.from, Math.min(this.to, main.anchor)));
        let end2 = this.toContextPos(main.head);
        if (this.editContext.selectionStart != start2 || this.editContext.selectionEnd != end2)
          this.editContext.updateSelection(start2, end2);
      }
      rangeIsValid(state) {
        let { head } = state.selection.main;
        return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
      }
      toEditorPos(contextPos, clipLen = this.to - this.from) {
        contextPos = Math.min(contextPos, clipLen);
        let c2 = this.composing;
        return c2 && c2.drifted ? c2.editorBase + (contextPos - c2.contextBase) : contextPos + this.from;
      }
      toContextPos(editorPos) {
        let c2 = this.composing;
        return c2 && c2.drifted ? c2.contextBase + (editorPos - c2.editorBase) : editorPos - this.from;
      }
      destroy() {
        for (let event in this.handlers)
          this.editContext.removeEventListener(event, this.handlers[event]);
      }
    };
    EditorView = class _EditorView {
      /**
      The current editor state.
      */
      get state() {
        return this.viewState.state;
      }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
      get viewport() {
        return this.viewState.viewport;
      }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
      get visibleRanges() {
        return this.viewState.visibleRanges;
      }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
      get inView() {
        return this.viewState.inView;
      }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
      get composing() {
        return this.inputState.composing > 0;
      }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
      get compositionStarted() {
        return this.inputState.composing >= 0;
      }
      /**
      The document or shadow root that the view lives in.
      */
      get root() {
        return this._root;
      }
      /**
      @internal
      */
      get win() {
        return this.dom.ownerDocument.defaultView || window;
      }
      /**
      Construct a new view. You'll want to either provide a `parent`
      option, or put `view.dom` into your document after creating a
      view, so that the user can see the editor.
      */
      constructor(config2 = {}) {
        var _a2;
        this.plugins = [];
        this.pluginMap = /* @__PURE__ */ new Map();
        this.editorAttrs = {};
        this.contentAttrs = {};
        this.bidiCache = [];
        this.destroyed = false;
        this.updateState = 2;
        this.measureScheduled = -1;
        this.measureRequests = [];
        this.contentDOM = document.createElement("div");
        this.scrollDOM = document.createElement("div");
        this.scrollDOM.tabIndex = -1;
        this.scrollDOM.className = "cm-scroller";
        this.scrollDOM.appendChild(this.contentDOM);
        this.announceDOM = document.createElement("div");
        this.announceDOM.className = "cm-announced";
        this.announceDOM.setAttribute("aria-live", "polite");
        this.dom = document.createElement("div");
        this.dom.appendChild(this.announceDOM);
        this.dom.appendChild(this.scrollDOM);
        if (config2.parent)
          config2.parent.appendChild(this.dom);
        let { dispatch } = config2;
        this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));
        this.dispatch = this.dispatch.bind(this);
        this._root = config2.root || getRoot(config2.parent) || document;
        this.viewState = new ViewState(config2.state || EditorState.create(config2));
        if (config2.scrollTo && config2.scrollTo.is(scrollIntoView))
          this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
        this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
        for (let plugin of this.plugins)
          plugin.update(this);
        this.observer = new DOMObserver(this);
        this.inputState = new InputState(this);
        this.inputState.ensureHandlers(this.plugins);
        this.docView = new DocView(this);
        this.mountStyles();
        this.updateAttrs();
        this.updateState = 0;
        this.requestMeasure();
        if ((_a2 = document.fonts) === null || _a2 === void 0 ? void 0 : _a2.ready)
          document.fonts.ready.then(() => this.requestMeasure());
      }
      dispatch(...input) {
        let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
        this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
      update(transactions) {
        if (this.updateState != 0)
          throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
        let redrawn = false, attrsChanged = false, update;
        let state = this.state;
        for (let tr of transactions) {
          if (tr.startState != state)
            throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
          state = tr.state;
        }
        if (this.destroyed) {
          this.viewState.state = state;
          return;
        }
        let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
        if (transactions.some((tr) => tr.annotation(isFocusChange))) {
          this.inputState.notifiedFocused = focus;
          focusFlag = 1;
        } else if (focus != this.inputState.notifiedFocused) {
          this.inputState.notifiedFocused = focus;
          dispatchFocus = focusChangeTransaction(state, focus);
          if (!dispatchFocus)
            focusFlag = 1;
        }
        let pendingKey = this.observer.delayedAndroidKey, domChange = null;
        if (pendingKey) {
          this.observer.clearDelayedAndroidKey();
          domChange = this.observer.readChange();
          if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
            domChange = null;
        } else {
          this.observer.clear();
        }
        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
          return this.setState(state);
        update = ViewUpdate.create(this, state, transactions);
        update.flags |= focusFlag;
        let scrollTarget = this.viewState.scrollTarget;
        try {
          this.updateState = 2;
          for (let tr of transactions) {
            if (scrollTarget)
              scrollTarget = scrollTarget.map(tr.changes);
            if (tr.scrollIntoView) {
              let { main } = tr.state.selection;
              scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
            }
            for (let e of tr.effects)
              if (e.is(scrollIntoView))
                scrollTarget = e.value.clip(this.state);
          }
          this.viewState.update(update, scrollTarget);
          this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
          }
          redrawn = this.docView.update(update);
          if (this.state.facet(styleModule) != this.styleModules)
            this.mountStyles();
          attrsChanged = this.updateAttrs();
          this.showAnnouncements(transactions);
          this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
        } finally {
          this.updateState = 0;
        }
        if (update.startState.facet(theme) != update.state.facet(theme))
          this.viewState.mustMeasureContent = true;
        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
          this.requestMeasure();
        if (redrawn)
          this.docViewUpdate();
        if (!update.empty)
          for (let listener of this.state.facet(updateListener)) {
            try {
              listener(update);
            } catch (e) {
              logException(this.state, e, "update listener");
            }
          }
        if (dispatchFocus || domChange)
          Promise.resolve().then(() => {
            if (dispatchFocus && this.state == dispatchFocus.startState)
              this.dispatch(dispatchFocus);
            if (domChange) {
              if (!applyDOMChange(this, domChange) && pendingKey.force)
                dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
            }
          });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
      setState(newState) {
        if (this.updateState != 0)
          throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
        if (this.destroyed) {
          this.viewState.state = newState;
          return;
        }
        this.updateState = 2;
        let hadFocus = this.hasFocus;
        try {
          for (let plugin of this.plugins)
            plugin.destroy(this);
          this.viewState = new ViewState(newState);
          this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
          this.pluginMap.clear();
          for (let plugin of this.plugins)
            plugin.update(this);
          this.docView.destroy();
          this.docView = new DocView(this);
          this.inputState.ensureHandlers(this.plugins);
          this.mountStyles();
          this.updateAttrs();
          this.bidiCache = [];
        } finally {
          this.updateState = 0;
        }
        if (hadFocus)
          this.focus();
        this.requestMeasure();
      }
      updatePlugins(update) {
        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
        if (prevSpecs != specs) {
          let newPlugins = [];
          for (let spec of specs) {
            let found = prevSpecs.indexOf(spec);
            if (found < 0) {
              newPlugins.push(new PluginInstance(spec));
            } else {
              let plugin = this.plugins[found];
              plugin.mustUpdate = update;
              newPlugins.push(plugin);
            }
          }
          for (let plugin of this.plugins)
            if (plugin.mustUpdate != update)
              plugin.destroy(this);
          this.plugins = newPlugins;
          this.pluginMap.clear();
        } else {
          for (let p of this.plugins)
            p.mustUpdate = update;
        }
        for (let i = 0; i < this.plugins.length; i++)
          this.plugins[i].update(this);
        if (prevSpecs != specs)
          this.inputState.ensureHandlers(this.plugins);
      }
      docViewUpdate() {
        for (let plugin of this.plugins) {
          let val = plugin.value;
          if (val && val.docViewUpdate) {
            try {
              val.docViewUpdate(this);
            } catch (e) {
              logException(this.state, e, "doc view update listener");
            }
          }
        }
      }
      /**
      @internal
      */
      measure(flush = true) {
        if (this.destroyed)
          return;
        if (this.measureScheduled > -1)
          this.win.cancelAnimationFrame(this.measureScheduled);
        if (this.observer.delayedAndroidKey) {
          this.measureScheduled = -1;
          this.requestMeasure();
          return;
        }
        this.measureScheduled = 0;
        if (flush)
          this.observer.forceFlush();
        let updated = null;
        let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
        let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
        if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
          scrollAnchorHeight = -1;
        this.viewState.scrollAnchorHeight = -1;
        try {
          for (let i = 0; ; i++) {
            if (scrollAnchorHeight < 0) {
              if (isScrolledToBottom(sDOM)) {
                scrollAnchorPos = -1;
                scrollAnchorHeight = this.viewState.heightMap.height;
              } else {
                let block3 = this.viewState.scrollAnchorAt(scrollTop);
                scrollAnchorPos = block3.from;
                scrollAnchorHeight = block3.top;
              }
            }
            this.updateState = 1;
            let changed = this.viewState.measure(this);
            if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
              break;
            if (i > 5) {
              console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
              break;
            }
            let measuring = [];
            if (!(changed & 4))
              [this.measureRequests, measuring] = [measuring, this.measureRequests];
            let measured = measuring.map((m) => {
              try {
                return m.read(this);
              } catch (e) {
                logException(this.state, e);
                return BadMeasure;
              }
            });
            let update = ViewUpdate.create(this, this.state, []), redrawn = false;
            update.flags |= changed;
            if (!updated)
              updated = update;
            else
              updated.flags |= changed;
            this.updateState = 2;
            if (!update.empty) {
              this.updatePlugins(update);
              this.inputState.update(update);
              this.updateAttrs();
              redrawn = this.docView.update(update);
              if (redrawn)
                this.docViewUpdate();
            }
            for (let i2 = 0; i2 < measuring.length; i2++)
              if (measured[i2] != BadMeasure) {
                try {
                  let m = measuring[i2];
                  if (m.write)
                    m.write(measured[i2], this);
                } catch (e) {
                  logException(this.state, e);
                }
              }
            if (redrawn)
              this.docView.updateSelection(true);
            if (!update.viewportChanged && this.measureRequests.length == 0) {
              if (this.viewState.editorHeight) {
                if (this.viewState.scrollTarget) {
                  this.docView.scrollIntoView(this.viewState.scrollTarget);
                  this.viewState.scrollTarget = null;
                  scrollAnchorHeight = -1;
                  continue;
                } else {
                  let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                  let diff2 = newAnchorHeight - scrollAnchorHeight;
                  if (diff2 > 1 || diff2 < -1) {
                    scrollTop = scrollTop + diff2;
                    sDOM.scrollTop = scrollTop / this.scaleY;
                    scrollAnchorHeight = -1;
                    continue;
                  }
                }
              }
              break;
            }
          }
        } finally {
          this.updateState = 0;
          this.measureScheduled = -1;
        }
        if (updated && !updated.empty)
          for (let listener of this.state.facet(updateListener))
            listener(updated);
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
      get themeClasses() {
        return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
      }
      updateAttrs() {
        let editorAttrs = attrsFromFacet(this, editorAttributes, {
          class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
        });
        let contentAttrs = {
          spellcheck: "false",
          autocorrect: "off",
          autocapitalize: "off",
          writingsuggestions: "false",
          translate: "no",
          contenteditable: !this.state.facet(editable) ? "false" : "true",
          class: "cm-content",
          style: `${browser.tabSize}: ${this.state.tabSize}`,
          role: "textbox",
          "aria-multiline": "true"
        };
        if (this.state.readOnly)
          contentAttrs["aria-readonly"] = "true";
        attrsFromFacet(this, contentAttributes, contentAttrs);
        let changed = this.observer.ignore(() => {
          let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
          let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
          return changedContent || changedEditor;
        });
        this.editorAttrs = editorAttrs;
        this.contentAttrs = contentAttrs;
        return changed;
      }
      showAnnouncements(trs) {
        let first = true;
        for (let tr of trs)
          for (let effect of tr.effects)
            if (effect.is(_EditorView.announce)) {
              if (first)
                this.announceDOM.textContent = "";
              first = false;
              let div = this.announceDOM.appendChild(document.createElement("div"));
              div.textContent = effect.value;
            }
      }
      mountStyles() {
        this.styleModules = this.state.facet(styleModule);
        let nonce = this.state.facet(_EditorView.cspNonce);
        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : void 0);
      }
      readMeasured() {
        if (this.updateState == 2)
          throw new Error("Reading the editor layout isn't allowed during an update");
        if (this.updateState == 0 && this.measureScheduled > -1)
          this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
      requestMeasure(request) {
        if (this.measureScheduled < 0)
          this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
        if (request) {
          if (this.measureRequests.indexOf(request) > -1)
            return;
          if (request.key != null)
            for (let i = 0; i < this.measureRequests.length; i++) {
              if (this.measureRequests[i].key === request.key) {
                this.measureRequests[i] = request;
                return;
              }
            }
          this.measureRequests.push(request);
        }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
      plugin(plugin) {
        let known = this.pluginMap.get(plugin);
        if (known === void 0 || known && known.spec != plugin)
          this.pluginMap.set(plugin, known = this.plugins.find((p) => p.spec == plugin) || null);
        return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
      get documentTop() {
        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
      get documentPadding() {
        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
      get scaleX() {
        return this.viewState.scaleX;
      }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
      get scaleY() {
        return this.viewState.scaleY;
      }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
      elementAtHeight(height) {
        this.readMeasured();
        return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
      lineBlockAtHeight(height) {
        this.readMeasured();
        return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
      get viewportLineBlocks() {
        return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
      lineBlockAt(pos) {
        return this.viewState.lineBlockAt(pos);
      }
      /**
      The editor's total content height.
      */
      get contentHeight() {
        return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
      moveByChar(start2, forward, by) {
        return skipAtoms(this, start2, moveByChar(this, start2, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
      moveByGroup(start2, forward) {
        return skipAtoms(this, start2, moveByChar(this, start2, forward, (initial) => byGroup(this, start2.head, initial)));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
      visualLineSide(line, end2) {
        let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
        let span = order[end2 ? order.length - 1 : 0];
        return EditorSelection.cursor(span.side(end2, dir) + line.from, span.forward(!end2, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
      moveToLineBoundary(start2, forward, includeWrap = true) {
        return moveToLineBoundary(this, start2, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
      moveVertically(start2, forward, distance) {
        return skipAtoms(this, start2, moveVertically(this, start2, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
      domAtPos(pos) {
        return this.docView.domAtPos(pos);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
      posAtDOM(node, offset = 0) {
        return this.docView.posFromDOM(node, offset);
      }
      posAtCoords(coords, precise = true) {
        this.readMeasured();
        return posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
      coordsAtPos(pos, side = 1) {
        this.readMeasured();
        let rect2 = this.docView.coordsAt(pos, side);
        if (!rect2 || rect2.left == rect2.right)
          return rect2;
        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
        let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
        return flattenRect(rect2, span.dir == Direction.LTR == side > 0);
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
      coordsForChar(pos) {
        this.readMeasured();
        return this.docView.coordsForChar(pos);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
      get defaultCharacterWidth() {
        return this.viewState.heightOracle.charWidth;
      }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
      get defaultLineHeight() {
        return this.viewState.heightOracle.lineHeight;
      }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
      get textDirection() {
        return this.viewState.defaultTextDirection;
      }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
      textDirectionAt(pos) {
        let perLine = this.state.facet(perLineTextDirection);
        if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
          return this.textDirection;
        this.readMeasured();
        return this.docView.textDirectionAt(pos);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
      get lineWrapping() {
        return this.viewState.heightOracle.lineWrapping;
      }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
      bidiSpans(line) {
        if (line.length > MaxBidiLine)
          return trivialOrder(line.length);
        let dir = this.textDirectionAt(line.from), isolates;
        for (let entry of this.bidiCache) {
          if (entry.from == line.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
            return entry.order;
        }
        if (!isolates)
          isolates = getIsolatedRanges(this, line);
        let order = computeOrder(line.text, dir, isolates);
        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
        return order;
      }
      /**
      Check whether the editor has focus.
      */
      get hasFocus() {
        var _a2;
        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
      focus() {
        this.observer.ignore(() => {
          focusPreventScroll(this.contentDOM);
          this.docView.updateSelection();
        });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
      setRoot(root) {
        if (this._root != root) {
          this._root = root;
          this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
          this.mountStyles();
        }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
      destroy() {
        if (this.root.activeElement == this.contentDOM)
          this.contentDOM.blur();
        for (let plugin of this.plugins)
          plugin.destroy(this);
        this.plugins = [];
        this.inputState.destroy();
        this.docView.destroy();
        this.dom.remove();
        this.observer.destroy();
        if (this.measureScheduled > -1)
          this.win.cancelAnimationFrame(this.measureScheduled);
        this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
      static scrollIntoView(pos, options = {}) {
        return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
      }
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      scrollSnapshot() {
        let { scrollTop, scrollLeft } = this.scrollDOM;
        let ref = this.viewState.scrollAnchorAt(scrollTop);
        return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
      setTabFocusMode(to) {
        if (to == null)
          this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
        else if (typeof to == "boolean")
          this.inputState.tabFocusMode = to ? 0 : -1;
        else if (this.inputState.tabFocusMode != 0)
          this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
      static domEventHandlers(handlers2) {
        return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
      static domEventObservers(observers2) {
        return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
      static theme(spec, options) {
        let prefix2 = StyleModule.newName();
        let result = [theme.of(prefix2), styleModule.of(buildTheme(`.${prefix2}`, spec))];
        if (options && options.dark)
          result.push(darkTheme.of(true));
        return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
      static baseTheme(spec) {
        return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
      static findFromDOM(dom) {
        var _a2;
        let content3 = dom.querySelector(".cm-content");
        let cView = content3 && ContentView.get(content3) || ContentView.get(dom);
        return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
      }
    };
    EditorView.styleModule = styleModule;
    EditorView.inputHandler = inputHandler;
    EditorView.clipboardInputFilter = clipboardInputFilter;
    EditorView.clipboardOutputFilter = clipboardOutputFilter;
    EditorView.scrollHandler = scrollHandler;
    EditorView.focusChangeEffect = focusChangeEffect;
    EditorView.perLineTextDirection = perLineTextDirection;
    EditorView.exceptionSink = exceptionSink;
    EditorView.updateListener = updateListener;
    EditorView.editable = editable;
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    EditorView.dragMovesSelection = dragMovesSelection$1;
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    EditorView.decorations = decorations;
    EditorView.outerDecorations = outerDecorations;
    EditorView.atomicRanges = atomicRanges;
    EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
    EditorView.scrollMargins = scrollMargins;
    EditorView.darkTheme = darkTheme;
    EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : "" });
    EditorView.contentAttributes = contentAttributes;
    EditorView.editorAttributes = editorAttributes;
    EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    EditorView.announce = /* @__PURE__ */ StateEffect.define();
    MaxBidiLine = 4096;
    BadMeasure = {};
    CachedOrder = class _CachedOrder {
      constructor(from3, to, dir, isolates, fresh, order) {
        this.from = from3;
        this.to = to;
        this.dir = dir;
        this.isolates = isolates;
        this.fresh = fresh;
        this.order = order;
      }
      static update(cache4, changes) {
        if (changes.empty && !cache4.some((c2) => c2.fresh))
          return cache4;
        let result = [], lastDir = cache4.length ? cache4[cache4.length - 1].dir : Direction.LTR;
        for (let i = Math.max(0, cache4.length - 10); i < cache4.length; i++) {
          let entry = cache4[i];
          if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
            result.push(new _CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
        }
        return result;
      }
    };
    currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
      keydown(event, view) {
        return runHandlers(getKeymap(view.state), event, view, "editor");
      }
    }));
    keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
    Keymaps = /* @__PURE__ */ new WeakMap();
    storedPrefix = null;
    PrefixTimeout = 4e3;
    currentKeyEvent = null;
    RectangleMarker = class _RectangleMarker {
      /**
      Create a marker with the given class and dimensions. If `width`
      is null, the DOM element will get no width style.
      */
      constructor(className2, left, top3, width, height) {
        this.className = className2;
        this.left = left;
        this.top = top3;
        this.width = width;
        this.height = height;
      }
      draw() {
        let elt2 = document.createElement("div");
        elt2.className = this.className;
        this.adjust(elt2);
        return elt2;
      }
      update(elt2, prev) {
        if (prev.className != this.className)
          return false;
        this.adjust(elt2);
        return true;
      }
      adjust(elt2) {
        elt2.style.left = this.left + "px";
        elt2.style.top = this.top + "px";
        if (this.width != null)
          elt2.style.width = this.width + "px";
        elt2.style.height = this.height + "px";
      }
      eq(p) {
        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
      static forRange(view, className2, range) {
        if (range.empty) {
          let pos = view.coordsAtPos(range.head, range.assoc || 1);
          if (!pos)
            return [];
          let base5 = getBase(view);
          return [new _RectangleMarker(className2, pos.left - base5.left, pos.top - base5.top, null, pos.bottom - pos.top)];
        } else {
          return rectanglesForRange(view, className2, range);
        }
      }
    };
    LayerView = class {
      constructor(view, layer2) {
        this.view = view;
        this.layer = layer2;
        this.drawn = [];
        this.scaleX = 1;
        this.scaleY = 1;
        this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
        this.dom = view.scrollDOM.appendChild(document.createElement("div"));
        this.dom.classList.add("cm-layer");
        if (layer2.above)
          this.dom.classList.add("cm-layer-above");
        if (layer2.class)
          this.dom.classList.add(layer2.class);
        this.scale();
        this.dom.setAttribute("aria-hidden", "true");
        this.setOrder(view.state);
        view.requestMeasure(this.measureReq);
        if (layer2.mount)
          layer2.mount(this.dom, view);
      }
      update(update) {
        if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
          this.setOrder(update.state);
        if (this.layer.update(update, this.dom) || update.geometryChanged) {
          this.scale();
          update.view.requestMeasure(this.measureReq);
        }
      }
      docViewUpdate(view) {
        if (this.layer.updateOnDocViewUpdate !== false)
          view.requestMeasure(this.measureReq);
      }
      setOrder(state) {
        let pos = 0, order = state.facet(layerOrder);
        while (pos < order.length && order[pos] != this.layer)
          pos++;
        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
      }
      measure() {
        return this.layer.markers(this.view);
      }
      scale() {
        let { scaleX, scaleY } = this.view;
        if (scaleX != this.scaleX || scaleY != this.scaleY) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
        }
      }
      draw(markers) {
        if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
          let old = this.dom.firstChild, oldI = 0;
          for (let marker of markers) {
            if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
              old = old.nextSibling;
              oldI++;
            } else {
              this.dom.insertBefore(marker.draw(), old);
            }
          }
          while (old) {
            let next2 = old.nextSibling;
            old.remove();
            old = next2;
          }
          this.drawn = markers;
        }
      }
      destroy() {
        if (this.layer.destroy)
          this.layer.destroy(this.dom, this.view);
        this.dom.remove();
      }
    };
    layerOrder = /* @__PURE__ */ Facet.define();
    selectionConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          cursorBlinkRate: 1200,
          drawRangeCursor: true
        }, {
          cursorBlinkRate: (a2, b) => Math.min(a2, b),
          drawRangeCursor: (a2, b) => a2 || b
        });
      }
    });
    cursorLayer = /* @__PURE__ */ layer({
      above: true,
      markers(view) {
        let { state } = view, conf = state.facet(selectionConfig);
        let cursors = [];
        for (let r2 of state.selection.ranges) {
          let prim = r2 == state.selection.main;
          if (r2.empty || conf.drawRangeCursor) {
            let className2 = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
            let cursor2 = r2.empty ? r2 : EditorSelection.cursor(r2.head, r2.head > r2.anchor ? -1 : 1);
            for (let piece of RectangleMarker.forRange(view, className2, cursor2))
              cursors.push(piece);
          }
        }
        return cursors;
      },
      update(update, dom) {
        if (update.transactions.some((tr) => tr.selection))
          dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
        let confChange = configChanged(update);
        if (confChange)
          setBlinkRate(update.state, dom);
        return update.docChanged || update.selectionSet || confChange;
      },
      mount(dom, view) {
        setBlinkRate(view.state, dom);
      },
      class: "cm-cursorLayer"
    });
    selectionLayer = /* @__PURE__ */ layer({
      above: false,
      markers(view) {
        return view.state.selection.ranges.map((r2) => r2.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r2)).reduce((a2, b) => a2.concat(b));
      },
      update(update, dom) {
        return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
      },
      class: "cm-selectionLayer"
    });
    hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme({
      ".cm-line": {
        "& ::selection, &::selection": { backgroundColor: "transparent !important" },
        caretColor: "transparent !important"
      },
      ".cm-content": {
        caretColor: "transparent !important",
        "& :focus": {
          caretColor: "initial !important",
          "&::selection, & ::selection": {
            backgroundColor: "Highlight !important"
          }
        }
      }
    }));
    setDropCursorPos = /* @__PURE__ */ StateEffect.define({
      map(pos, mapping) {
        return pos == null ? null : mapping.mapPos(pos);
      }
    });
    dropCursorPos = /* @__PURE__ */ StateField.define({
      create() {
        return null;
      },
      update(pos, tr) {
        if (pos != null)
          pos = tr.changes.mapPos(pos);
        return tr.effects.reduce((pos2, e) => e.is(setDropCursorPos) ? e.value : pos2, pos);
      }
    });
    drawDropCursor = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.cursor = null;
        this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
      }
      update(update) {
        var _a2;
        let cursorPos = update.state.field(dropCursorPos);
        if (cursorPos == null) {
          if (this.cursor != null) {
            (_a2 = this.cursor) === null || _a2 === void 0 ? void 0 : _a2.remove();
            this.cursor = null;
          }
        } else {
          if (!this.cursor) {
            this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
            this.cursor.className = "cm-dropCursor";
          }
          if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
            this.view.requestMeasure(this.measureReq);
        }
      }
      readPos() {
        let { view } = this;
        let pos = view.state.field(dropCursorPos);
        let rect2 = pos != null && view.coordsAtPos(pos);
        if (!rect2)
          return null;
        let outer = view.scrollDOM.getBoundingClientRect();
        return {
          left: rect2.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
          top: rect2.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
          height: rect2.bottom - rect2.top
        };
      }
      drawCursor(pos) {
        if (this.cursor) {
          let { scaleX, scaleY } = this.view;
          if (pos) {
            this.cursor.style.left = pos.left / scaleX + "px";
            this.cursor.style.top = pos.top / scaleY + "px";
            this.cursor.style.height = pos.height / scaleY + "px";
          } else {
            this.cursor.style.left = "-100000px";
          }
        }
      }
      destroy() {
        if (this.cursor)
          this.cursor.remove();
      }
      setDropPos(pos) {
        if (this.view.state.field(dropCursorPos) != pos)
          this.view.dispatch({ effects: setDropCursorPos.of(pos) });
      }
    }, {
      eventObservers: {
        dragover(event) {
          this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
        },
        dragleave(event) {
          if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
            this.setDropPos(null);
        },
        dragend() {
          this.setDropPos(null);
        },
        drop() {
          this.setDropPos(null);
        }
      }
    });
    MatchDecorator = class {
      /**
      Create a decorator.
      */
      constructor(config2) {
        const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
        if (!regexp.global)
          throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
        this.regexp = regexp;
        if (decorate) {
          this.addMatch = (match2, view, from3, add3) => decorate(add3, from3, from3 + match2[0].length, match2, view);
        } else if (typeof decoration == "function") {
          this.addMatch = (match2, view, from3, add3) => {
            let deco = decoration(match2, view, from3);
            if (deco)
              add3(from3, from3 + match2[0].length, deco);
          };
        } else if (decoration) {
          this.addMatch = (match2, _view, from3, add3) => add3(from3, from3 + match2[0].length, decoration);
        } else {
          throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
        }
        this.boundary = boundary;
        this.maxLength = maxLength;
      }
      /**
      Compute the full set of decorations for matches in the given
      view's viewport. You'll want to call this when initializing your
      plugin.
      */
      createDeco(view) {
        let build = new RangeSetBuilder(), add3 = build.add.bind(build);
        for (let { from: from3, to } of matchRanges(view, this.maxLength))
          iterMatches(view.state.doc, this.regexp, from3, to, (from4, m) => this.addMatch(m, view, from4, add3));
        return build.finish();
      }
      /**
      Update a set of decorations for a view update. `deco` _must_ be
      the set of decorations produced by _this_ `MatchDecorator` for
      the view state before the update.
      */
      updateDeco(update, deco) {
        let changeFrom = 1e9, changeTo = -1;
        if (update.docChanged)
          update.changes.iterChanges((_f2, _t, from3, to) => {
            if (to >= update.view.viewport.from && from3 <= update.view.viewport.to) {
              changeFrom = Math.min(from3, changeFrom);
              changeTo = Math.max(to, changeTo);
            }
          });
        if (update.viewportMoved || changeTo - changeFrom > 1e3)
          return this.createDeco(update.view);
        if (changeTo > -1)
          return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
        return deco;
      }
      updateRange(view, deco, updateFrom, updateTo) {
        for (let r2 of view.visibleRanges) {
          let from3 = Math.max(r2.from, updateFrom), to = Math.min(r2.to, updateTo);
          if (to > from3) {
            let fromLine = view.state.doc.lineAt(from3), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
            let start2 = Math.max(r2.from, fromLine.from), end2 = Math.min(r2.to, toLine.to);
            if (this.boundary) {
              for (; from3 > fromLine.from; from3--)
                if (this.boundary.test(fromLine.text[from3 - 1 - fromLine.from])) {
                  start2 = from3;
                  break;
                }
              for (; to < toLine.to; to++)
                if (this.boundary.test(toLine.text[to - toLine.from])) {
                  end2 = to;
                  break;
                }
            }
            let ranges = [], m;
            let add3 = (from4, to2, deco2) => ranges.push(deco2.range(from4, to2));
            if (fromLine == toLine) {
              this.regexp.lastIndex = start2 - fromLine.from;
              while ((m = this.regexp.exec(fromLine.text)) && m.index < end2 - fromLine.from)
                this.addMatch(m, view, m.index + fromLine.from, add3);
            } else {
              iterMatches(view.state.doc, this.regexp, start2, end2, (from4, m2) => this.addMatch(m2, view, from4, add3));
            }
            deco = deco.update({ filterFrom: start2, filterTo: end2, filter: (from4, to2) => from4 < start2 || to2 > end2, add: ranges });
          }
        }
        return deco;
      }
    };
    UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    Specials = /* @__PURE__ */ new RegExp("[\0-\b\n-\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\u202D\u202E\u2066\u2067\u2069\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
    Names = {
      0: "null",
      7: "bell",
      8: "backspace",
      10: "newline",
      11: "vertical tab",
      13: "carriage return",
      27: "escape",
      8203: "zero width space",
      8204: "zero width non-joiner",
      8205: "zero width joiner",
      8206: "left-to-right mark",
      8207: "right-to-left mark",
      8232: "line separator",
      8237: "left-to-right override",
      8238: "right-to-left override",
      8294: "left-to-right isolate",
      8295: "right-to-left isolate",
      8297: "pop directional isolate",
      8233: "paragraph separator",
      65279: "zero width no-break space",
      65532: "object replacement"
    };
    _supportsTabSize = null;
    specialCharConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        let config2 = combineConfig(configs, {
          render: null,
          specialChars: Specials,
          addSpecialChars: null
        });
        if (config2.replaceTabs = !supportsTabSize())
          config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
        if (config2.addSpecialChars)
          config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
        return config2;
      }
    });
    _plugin = null;
    DefaultPlaceholder = "\u2022";
    SpecialCharWidget = class extends WidgetType {
      constructor(options, code2) {
        super();
        this.options = options;
        this.code = code2;
      }
      eq(other) {
        return other.code == this.code;
      }
      toDOM(view) {
        let ph = placeholder$1(this.code);
        let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
        let custom = this.options.render && this.options.render(this.code, desc, ph);
        if (custom)
          return custom;
        let span = document.createElement("span");
        span.textContent = ph;
        span.title = desc;
        span.setAttribute("aria-label", desc);
        span.className = "cm-specialChar";
        return span;
      }
      ignoreEvent() {
        return false;
      }
    };
    TabWidget = class extends WidgetType {
      constructor(width) {
        super();
        this.width = width;
      }
      eq(other) {
        return other.width == this.width;
      }
      toDOM() {
        let span = document.createElement("span");
        span.textContent = "	";
        span.className = "cm-tab";
        span.style.width = this.width + "px";
        return span;
      }
      ignoreEvent() {
        return false;
      }
    };
    lineDeco = /* @__PURE__ */ Decoration.line({ class: "cm-activeLine" });
    activeLineHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.decorations = this.getDeco(view);
      }
      update(update) {
        if (update.docChanged || update.selectionSet)
          this.decorations = this.getDeco(update.view);
      }
      getDeco(view) {
        let lastLineStart = -1, deco = [];
        for (let r2 of view.state.selection.ranges) {
          let line = view.lineBlockAt(r2.head);
          if (line.from > lastLineStart) {
            deco.push(lineDeco.range(line.from));
            lastLineStart = line.from;
          }
        }
        return Decoration.set(deco);
      }
    }, {
      decorations: (v) => v.decorations
    });
    Placeholder = class extends WidgetType {
      constructor(content3) {
        super();
        this.content = content3;
      }
      toDOM(view) {
        let wrap = document.createElement("span");
        wrap.className = "cm-placeholder";
        wrap.style.pointerEvents = "none";
        wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : typeof this.content == "function" ? this.content(view) : this.content.cloneNode(true));
        if (typeof this.content == "string")
          wrap.setAttribute("aria-label", "placeholder " + this.content);
        else
          wrap.setAttribute("aria-hidden", "true");
        return wrap;
      }
      coordsAt(dom) {
        let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];
        if (!rects.length)
          return null;
        let style2 = window.getComputedStyle(dom.parentNode);
        let rect2 = flattenRect(rects[0], style2.direction != "rtl");
        let lineHeight = parseInt(style2.lineHeight);
        if (rect2.bottom - rect2.top > lineHeight * 1.5)
          return { left: rect2.left, right: rect2.right, top: rect2.top, bottom: rect2.top + lineHeight };
        return rect2;
      }
      ignoreEvent() {
        return false;
      }
    };
    MaxOff = 2e3;
    keys = {
      Alt: [18, (e) => !!e.altKey],
      Control: [17, (e) => !!e.ctrlKey],
      Shift: [16, (e) => !!e.shiftKey],
      Meta: [91, (e) => !!e.metaKey]
    };
    showCrosshair = { style: "cursor: crosshair" };
    Outside = "-10000px";
    TooltipViewManager = class {
      constructor(view, facet, createTooltipView, removeTooltipView) {
        this.facet = facet;
        this.createTooltipView = createTooltipView;
        this.removeTooltipView = removeTooltipView;
        this.input = view.state.facet(facet);
        this.tooltips = this.input.filter((t2) => t2);
        let prev = null;
        this.tooltipViews = this.tooltips.map((t2) => prev = createTooltipView(t2, prev));
      }
      update(update, above) {
        var _a2;
        let input = update.state.facet(this.facet);
        let tooltips = input.filter((x) => x);
        if (input === this.input) {
          for (let t2 of this.tooltipViews)
            if (t2.update)
              t2.update(update);
          return false;
        }
        let tooltipViews = [], newAbove = above ? [] : null;
        for (let i = 0; i < tooltips.length; i++) {
          let tip = tooltips[i], known = -1;
          if (!tip)
            continue;
          for (let i2 = 0; i2 < this.tooltips.length; i2++) {
            let other = this.tooltips[i2];
            if (other && other.create == tip.create)
              known = i2;
          }
          if (known < 0) {
            tooltipViews[i] = this.createTooltipView(tip, i ? tooltipViews[i - 1] : null);
            if (newAbove)
              newAbove[i] = !!tip.above;
          } else {
            let tooltipView = tooltipViews[i] = this.tooltipViews[known];
            if (newAbove)
              newAbove[i] = above[known];
            if (tooltipView.update)
              tooltipView.update(update);
          }
        }
        for (let t2 of this.tooltipViews)
          if (tooltipViews.indexOf(t2) < 0) {
            this.removeTooltipView(t2);
            (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
          }
        if (above) {
          newAbove.forEach((val, i) => above[i] = val);
          above.length = newAbove.length;
        }
        this.input = input;
        this.tooltips = tooltips;
        this.tooltipViews = tooltipViews;
        return true;
      }
    };
    tooltipConfig = /* @__PURE__ */ Facet.define({
      combine: (values2) => {
        var _a2, _b2, _c;
        return {
          position: browser.ios ? "absolute" : ((_a2 = values2.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
          parent: ((_b2 = values2.find((conf) => conf.parent)) === null || _b2 === void 0 ? void 0 : _b2.parent) || null,
          tooltipSpace: ((_c = values2.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
        };
      }
    });
    knownHeight = /* @__PURE__ */ new WeakMap();
    tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.above = [];
        this.inView = true;
        this.madeAbsolute = false;
        this.lastTransaction = 0;
        this.measureTimeout = -1;
        let config2 = view.state.facet(tooltipConfig);
        this.position = config2.position;
        this.parent = config2.parent;
        this.classes = view.themeClasses;
        this.createContainer();
        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
        this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
        this.manager = new TooltipViewManager(view, showTooltip, (t2, p) => this.createTooltip(t2, p), (t2) => {
          if (this.resizeObserver)
            this.resizeObserver.unobserve(t2.dom);
          t2.dom.remove();
        });
        this.above = this.manager.tooltips.map((t2) => !!t2.above);
        this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
          if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
            this.measureSoon();
        }, { threshold: [1] }) : null;
        this.observeIntersection();
        view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
        this.maybeMeasure();
      }
      createContainer() {
        if (this.parent) {
          this.container = document.createElement("div");
          this.container.style.position = "relative";
          this.container.className = this.view.themeClasses;
          this.parent.appendChild(this.container);
        } else {
          this.container = this.view.dom;
        }
      }
      observeIntersection() {
        if (this.intersectionObserver) {
          this.intersectionObserver.disconnect();
          for (let tooltip of this.manager.tooltipViews)
            this.intersectionObserver.observe(tooltip.dom);
        }
      }
      measureSoon() {
        if (this.measureTimeout < 0)
          this.measureTimeout = setTimeout(() => {
            this.measureTimeout = -1;
            this.maybeMeasure();
          }, 50);
      }
      update(update) {
        if (update.transactions.length)
          this.lastTransaction = Date.now();
        let updated = this.manager.update(update, this.above);
        if (updated)
          this.observeIntersection();
        let shouldMeasure = updated || update.geometryChanged;
        let newConfig = update.state.facet(tooltipConfig);
        if (newConfig.position != this.position && !this.madeAbsolute) {
          this.position = newConfig.position;
          for (let t2 of this.manager.tooltipViews)
            t2.dom.style.position = this.position;
          shouldMeasure = true;
        }
        if (newConfig.parent != this.parent) {
          if (this.parent)
            this.container.remove();
          this.parent = newConfig.parent;
          this.createContainer();
          for (let t2 of this.manager.tooltipViews)
            this.container.appendChild(t2.dom);
          shouldMeasure = true;
        } else if (this.parent && this.view.themeClasses != this.classes) {
          this.classes = this.container.className = this.view.themeClasses;
        }
        if (shouldMeasure)
          this.maybeMeasure();
      }
      createTooltip(tooltip, prev) {
        let tooltipView = tooltip.create(this.view);
        let before = prev ? prev.dom : null;
        tooltipView.dom.classList.add("cm-tooltip");
        if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
          let arrow = document.createElement("div");
          arrow.className = "cm-tooltip-arrow";
          tooltipView.dom.appendChild(arrow);
        }
        tooltipView.dom.style.position = this.position;
        tooltipView.dom.style.top = Outside;
        tooltipView.dom.style.left = "0px";
        this.container.insertBefore(tooltipView.dom, before);
        if (tooltipView.mount)
          tooltipView.mount(this.view);
        if (this.resizeObserver)
          this.resizeObserver.observe(tooltipView.dom);
        return tooltipView;
      }
      destroy() {
        var _a2, _b2, _c;
        this.view.win.removeEventListener("resize", this.measureSoon);
        for (let tooltipView of this.manager.tooltipViews) {
          tooltipView.dom.remove();
          (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
        }
        if (this.parent)
          this.container.remove();
        (_b2 = this.resizeObserver) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
        (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
        clearTimeout(this.measureTimeout);
      }
      readMeasure() {
        let scaleX = 1, scaleY = 1, makeAbsolute = false;
        if (this.position == "fixed" && this.manager.tooltipViews.length) {
          let { dom } = this.manager.tooltipViews[0];
          if (browser.gecko) {
            makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
          } else if (dom.style.top == Outside && dom.style.left == "0px") {
            let rect2 = dom.getBoundingClientRect();
            makeAbsolute = Math.abs(rect2.top + 1e4) > 1 || Math.abs(rect2.left) > 1;
          }
        }
        if (makeAbsolute || this.position == "absolute") {
          if (this.parent) {
            let rect2 = this.parent.getBoundingClientRect();
            if (rect2.width && rect2.height) {
              scaleX = rect2.width / this.parent.offsetWidth;
              scaleY = rect2.height / this.parent.offsetHeight;
            }
          } else {
            ({ scaleX, scaleY } = this.view.viewState);
          }
        }
        let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
        return {
          visible: {
            left: visible.left + margins.left,
            top: visible.top + margins.top,
            right: visible.right - margins.right,
            bottom: visible.bottom - margins.bottom
          },
          parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
          pos: this.manager.tooltips.map((t2, i) => {
            let tv = this.manager.tooltipViews[i];
            return tv.getCoords ? tv.getCoords(t2.pos) : this.view.coordsAtPos(t2.pos);
          }),
          size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
          space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
          scaleX,
          scaleY,
          makeAbsolute
        };
      }
      writeMeasure(measured) {
        var _a2;
        if (measured.makeAbsolute) {
          this.madeAbsolute = true;
          this.position = "absolute";
          for (let t2 of this.manager.tooltipViews)
            t2.dom.style.position = "absolute";
        }
        let { visible, space: space10, scaleX, scaleY } = measured;
        let others2 = [];
        for (let i = 0; i < this.manager.tooltips.length; i++) {
          let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
          let pos = measured.pos[i], size = measured.size[i];
          if (!pos || tooltip.clip !== false && (pos.bottom <= Math.max(visible.top, space10.top) || pos.top >= Math.min(visible.bottom, space10.bottom) || pos.right < Math.max(visible.left, space10.left) - 0.1 || pos.left > Math.min(visible.right, space10.right) + 0.1)) {
            dom.style.top = Outside;
            continue;
          }
          let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
          let arrowHeight = arrow ? 7 : 0;
          let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
          let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
          let left = size.width > space10.right - space10.left ? ltr ? space10.left : space10.right - size.width : ltr ? Math.max(space10.left, Math.min(pos.left - (arrow ? 14 : 0) + offset.x, space10.right - width)) : Math.min(Math.max(space10.left, pos.left - width + (arrow ? 14 : 0) - offset.x), space10.right - width);
          let above = this.above[i];
          if (!tooltip.strictSide && (above ? pos.top - height - arrowHeight - offset.y < space10.top : pos.bottom + height + arrowHeight + offset.y > space10.bottom) && above == space10.bottom - pos.bottom > pos.top - space10.top)
            above = this.above[i] = !above;
          let spaceVert = (above ? pos.top - space10.top : space10.bottom - pos.bottom) - arrowHeight;
          if (spaceVert < height && tView.resize !== false) {
            if (spaceVert < this.view.defaultLineHeight) {
              dom.style.top = Outside;
              continue;
            }
            knownHeight.set(tView, height);
            dom.style.height = (height = spaceVert) / scaleY + "px";
          } else if (dom.style.height) {
            dom.style.height = "";
          }
          let top3 = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
          let right = left + width;
          if (tView.overlap !== true) {
            for (let r2 of others2)
              if (r2.left < right && r2.right > left && r2.top < top3 + height && r2.bottom > top3)
                top3 = above ? r2.top - height - 2 - arrowHeight : r2.bottom + arrowHeight + 2;
          }
          if (this.position == "absolute") {
            dom.style.top = (top3 - measured.parent.top) / scaleY + "px";
            setLeftStyle(dom, (left - measured.parent.left) / scaleX);
          } else {
            dom.style.top = top3 / scaleY + "px";
            setLeftStyle(dom, left / scaleX);
          }
          if (arrow) {
            let arrowLeft = pos.left + (ltr ? offset.x : -offset.x) - (left + 14 - 7);
            arrow.style.left = arrowLeft / scaleX + "px";
          }
          if (tView.overlap !== true)
            others2.push({ left, top: top3, right, bottom: top3 + height });
          dom.classList.toggle("cm-tooltip-above", above);
          dom.classList.toggle("cm-tooltip-below", !above);
          if (tView.positioned)
            tView.positioned(measured.space);
        }
      }
      maybeMeasure() {
        if (this.manager.tooltips.length) {
          if (this.view.inView)
            this.view.requestMeasure(this.measureReq);
          if (this.inView != this.view.inView) {
            this.inView = this.view.inView;
            if (!this.inView)
              for (let tv of this.manager.tooltipViews)
                tv.dom.style.top = Outside;
          }
        }
      }
    }, {
      eventObservers: {
        scroll() {
          this.maybeMeasure();
        }
      }
    });
    baseTheme = /* @__PURE__ */ EditorView.baseTheme({
      ".cm-tooltip": {
        zIndex: 500,
        boxSizing: "border-box"
      },
      "&light .cm-tooltip": {
        border: "1px solid #bbb",
        backgroundColor: "#f5f5f5"
      },
      "&light .cm-tooltip-section:not(:first-child)": {
        borderTop: "1px solid #bbb"
      },
      "&dark .cm-tooltip": {
        backgroundColor: "#333338",
        color: "white"
      },
      ".cm-tooltip-arrow": {
        height: `${7}px`,
        width: `${7 * 2}px`,
        position: "absolute",
        zIndex: -1,
        overflow: "hidden",
        "&:before, &:after": {
          content: "''",
          position: "absolute",
          width: 0,
          height: 0,
          borderLeft: `${7}px solid transparent`,
          borderRight: `${7}px solid transparent`
        },
        ".cm-tooltip-above &": {
          bottom: `-${7}px`,
          "&:before": {
            borderTop: `${7}px solid #bbb`
          },
          "&:after": {
            borderTop: `${7}px solid #f5f5f5`,
            bottom: "1px"
          }
        },
        ".cm-tooltip-below &": {
          top: `-${7}px`,
          "&:before": {
            borderBottom: `${7}px solid #bbb`
          },
          "&:after": {
            borderBottom: `${7}px solid #f5f5f5`,
            top: "1px"
          }
        }
      },
      "&dark .cm-tooltip .cm-tooltip-arrow": {
        "&:before": {
          borderTopColor: "#333338",
          borderBottomColor: "#333338"
        },
        "&:after": {
          borderTopColor: "transparent",
          borderBottomColor: "transparent"
        }
      }
    });
    noOffset = { x: 0, y: 0 };
    showTooltip = /* @__PURE__ */ Facet.define({
      enables: [tooltipPlugin, baseTheme]
    });
    showHoverTooltip = /* @__PURE__ */ Facet.define({
      combine: (inputs) => inputs.reduce((a2, i) => a2.concat(i), [])
    });
    HoverTooltipHost = class _HoverTooltipHost {
      // Needs to be static so that host tooltip instances always match
      static create(view) {
        return new _HoverTooltipHost(view);
      }
      constructor(view) {
        this.view = view;
        this.mounted = false;
        this.dom = document.createElement("div");
        this.dom.classList.add("cm-tooltip-hover");
        this.manager = new TooltipViewManager(view, showHoverTooltip, (t2, p) => this.createHostedView(t2, p), (t2) => t2.dom.remove());
      }
      createHostedView(tooltip, prev) {
        let hostedView = tooltip.create(this.view);
        hostedView.dom.classList.add("cm-tooltip-section");
        this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
        if (this.mounted && hostedView.mount)
          hostedView.mount(this.view);
        return hostedView;
      }
      mount(view) {
        for (let hostedView of this.manager.tooltipViews) {
          if (hostedView.mount)
            hostedView.mount(view);
        }
        this.mounted = true;
      }
      positioned(space10) {
        for (let hostedView of this.manager.tooltipViews) {
          if (hostedView.positioned)
            hostedView.positioned(space10);
        }
      }
      update(update) {
        this.manager.update(update);
      }
      destroy() {
        var _a2;
        for (let t2 of this.manager.tooltipViews)
          (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
      }
      passProp(name2) {
        let value = void 0;
        for (let view of this.manager.tooltipViews) {
          let given = view[name2];
          if (given !== void 0) {
            if (value === void 0)
              value = given;
            else if (value !== given)
              return void 0;
          }
        }
        return value;
      }
      get offset() {
        return this.passProp("offset");
      }
      get getCoords() {
        return this.passProp("getCoords");
      }
      get overlap() {
        return this.passProp("overlap");
      }
      get resize() {
        return this.passProp("resize");
      }
    };
    showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
      let tooltips = state.facet(showHoverTooltip);
      if (tooltips.length === 0)
        return null;
      return {
        pos: Math.min(...tooltips.map((t2) => t2.pos)),
        end: Math.max(...tooltips.map((t2) => {
          var _a2;
          return (_a2 = t2.end) !== null && _a2 !== void 0 ? _a2 : t2.pos;
        })),
        create: HoverTooltipHost.create,
        above: tooltips[0].above,
        arrow: tooltips.some((t2) => t2.arrow)
      };
    });
    HoverPlugin = class {
      constructor(view, source, field, setHover, hoverTime) {
        this.view = view;
        this.source = source;
        this.field = field;
        this.setHover = setHover;
        this.hoverTime = hoverTime;
        this.hoverTimeout = -1;
        this.restartTimeout = -1;
        this.pending = null;
        this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
        this.checkHover = this.checkHover.bind(this);
        view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
        view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
      }
      update() {
        if (this.pending) {
          this.pending = null;
          clearTimeout(this.restartTimeout);
          this.restartTimeout = setTimeout(() => this.startHover(), 20);
        }
      }
      get active() {
        return this.view.state.field(this.field);
      }
      checkHover() {
        this.hoverTimeout = -1;
        if (this.active.length)
          return;
        let hovered = Date.now() - this.lastMove.time;
        if (hovered < this.hoverTime)
          this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
        else
          this.startHover();
      }
      startHover() {
        clearTimeout(this.restartTimeout);
        let { view, lastMove } = this;
        let desc = view.docView.nearest(lastMove.target);
        if (!desc)
          return;
        let pos, side = 1;
        if (desc instanceof WidgetView) {
          pos = desc.posAtStart;
        } else {
          pos = view.posAtCoords(lastMove);
          if (pos == null)
            return;
          let posCoords = view.coordsAtPos(pos);
          if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
            return;
          let bidi = view.bidiSpans(view.state.doc.lineAt(pos)).find((s) => s.from <= pos && s.to >= pos);
          let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
          side = lastMove.x < posCoords.left ? -rtl : rtl;
        }
        let open = this.source(view, pos, side);
        if (open === null || open === void 0 ? void 0 : open.then) {
          let pending = this.pending = { pos };
          open.then((result) => {
            if (this.pending == pending) {
              this.pending = null;
              if (result && !(Array.isArray(result) && !result.length))
                view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
            }
          }, (e) => logException(view.state, e, "hover tooltip"));
        } else if (open && !(Array.isArray(open) && !open.length)) {
          view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
        }
      }
      get tooltip() {
        let plugin = this.view.plugin(tooltipPlugin);
        let index = plugin ? plugin.manager.tooltips.findIndex((t2) => t2.create == HoverTooltipHost.create) : -1;
        return index > -1 ? plugin.manager.tooltipViews[index] : null;
      }
      mousemove(event) {
        var _a2, _b2;
        this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
        if (this.hoverTimeout < 0)
          this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
        let { active, tooltip } = this;
        if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
          let { pos } = active[0] || this.pending, end2 = (_b2 = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b2 !== void 0 ? _b2 : pos;
          if (pos == end2 ? this.view.posAtCoords(this.lastMove) != pos : !isOverRange(this.view, pos, end2, event.clientX, event.clientY)) {
            this.view.dispatch({ effects: this.setHover.of([]) });
            this.pending = null;
          }
        }
      }
      mouseleave(event) {
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = -1;
        let { active } = this;
        if (active.length) {
          let { tooltip } = this;
          let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
          if (!inTooltip)
            this.view.dispatch({ effects: this.setHover.of([]) });
          else
            this.watchTooltipLeave(tooltip.dom);
        }
      }
      watchTooltipLeave(tooltip) {
        let watch = (event) => {
          tooltip.removeEventListener("mouseleave", watch);
          if (this.active.length && !this.view.dom.contains(event.relatedTarget))
            this.view.dispatch({ effects: this.setHover.of([]) });
        };
        tooltip.addEventListener("mouseleave", watch);
      }
      destroy() {
        clearTimeout(this.hoverTimeout);
        this.view.dom.removeEventListener("mouseleave", this.mouseleave);
        this.view.dom.removeEventListener("mousemove", this.mousemove);
      }
    };
    tooltipMargin = 4;
    closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
    panelConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        let topContainer, bottomContainer;
        for (let c2 of configs) {
          topContainer = topContainer || c2.topContainer;
          bottomContainer = bottomContainer || c2.bottomContainer;
        }
        return { topContainer, bottomContainer };
      }
    });
    panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.input = view.state.facet(showPanel);
        this.specs = this.input.filter((s) => s);
        this.panels = this.specs.map((spec) => spec(view));
        let conf = view.state.facet(panelConfig);
        this.top = new PanelGroup(view, true, conf.topContainer);
        this.bottom = new PanelGroup(view, false, conf.bottomContainer);
        this.top.sync(this.panels.filter((p) => p.top));
        this.bottom.sync(this.panels.filter((p) => !p.top));
        for (let p of this.panels) {
          p.dom.classList.add("cm-panel");
          if (p.mount)
            p.mount();
        }
      }
      update(update) {
        let conf = update.state.facet(panelConfig);
        if (this.top.container != conf.topContainer) {
          this.top.sync([]);
          this.top = new PanelGroup(update.view, true, conf.topContainer);
        }
        if (this.bottom.container != conf.bottomContainer) {
          this.bottom.sync([]);
          this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
        }
        this.top.syncClasses();
        this.bottom.syncClasses();
        let input = update.state.facet(showPanel);
        if (input != this.input) {
          let specs = input.filter((x) => x);
          let panels = [], top3 = [], bottom = [], mount = [];
          for (let spec of specs) {
            let known = this.specs.indexOf(spec), panel;
            if (known < 0) {
              panel = spec(update.view);
              mount.push(panel);
            } else {
              panel = this.panels[known];
              if (panel.update)
                panel.update(update);
            }
            panels.push(panel);
            (panel.top ? top3 : bottom).push(panel);
          }
          this.specs = specs;
          this.panels = panels;
          this.top.sync(top3);
          this.bottom.sync(bottom);
          for (let p of mount) {
            p.dom.classList.add("cm-panel");
            if (p.mount)
              p.mount();
          }
        } else {
          for (let p of this.panels)
            if (p.update)
              p.update(update);
        }
      }
      destroy() {
        this.top.sync([]);
        this.bottom.sync([]);
      }
    }, {
      provide: (plugin) => EditorView.scrollMargins.of((view) => {
        let value = view.plugin(plugin);
        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
      })
    });
    PanelGroup = class {
      constructor(view, top3, container) {
        this.view = view;
        this.top = top3;
        this.container = container;
        this.dom = void 0;
        this.classes = "";
        this.panels = [];
        this.syncClasses();
      }
      sync(panels) {
        for (let p of this.panels)
          if (p.destroy && panels.indexOf(p) < 0)
            p.destroy();
        this.panels = panels;
        this.syncDOM();
      }
      syncDOM() {
        if (this.panels.length == 0) {
          if (this.dom) {
            this.dom.remove();
            this.dom = void 0;
          }
          return;
        }
        if (!this.dom) {
          this.dom = document.createElement("div");
          this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
          this.dom.style[this.top ? "top" : "bottom"] = "0";
          let parent = this.container || this.view.dom;
          parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
        }
        let curDOM = this.dom.firstChild;
        for (let panel of this.panels) {
          if (panel.dom.parentNode == this.dom) {
            while (curDOM != panel.dom)
              curDOM = rm(curDOM);
            curDOM = curDOM.nextSibling;
          } else {
            this.dom.insertBefore(panel.dom, curDOM);
          }
        }
        while (curDOM)
          curDOM = rm(curDOM);
      }
      scrollMargin() {
        return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
      }
      syncClasses() {
        if (!this.container || this.classes == this.view.themeClasses)
          return;
        for (let cls of this.classes.split(" "))
          if (cls)
            this.container.classList.remove(cls);
        for (let cls of (this.classes = this.view.themeClasses).split(" "))
          if (cls)
            this.container.classList.add(cls);
      }
    };
    showPanel = /* @__PURE__ */ Facet.define({
      enables: panelPlugin
    });
    GutterMarker = class extends RangeValue {
      /**
      @internal
      */
      compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
      eq(other) {
        return false;
      }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
      destroy(dom) {
      }
    };
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = void 0;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    gutterLineClass = /* @__PURE__ */ Facet.define();
    gutterWidgetClass = /* @__PURE__ */ Facet.define();
    defaults = {
      class: "",
      renderEmptyElements: false,
      elementStyle: "",
      markers: () => RangeSet.empty,
      lineMarker: () => null,
      widgetMarker: () => null,
      lineMarkerChange: null,
      initialSpacer: null,
      updateSpacer: null,
      domEventHandlers: {}
    };
    activeGutters = /* @__PURE__ */ Facet.define();
    unfixGutters = /* @__PURE__ */ Facet.define({
      combine: (values2) => values2.some((x) => x)
    });
    gutterView = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.prevViewport = view.viewport;
        this.dom = document.createElement("div");
        this.dom.className = "cm-gutters";
        this.dom.setAttribute("aria-hidden", "true");
        this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
        this.gutters = view.state.facet(activeGutters).map((conf) => new SingleGutterView(view, conf));
        for (let gutter2 of this.gutters)
          this.dom.appendChild(gutter2.dom);
        this.fixed = !view.state.facet(unfixGutters);
        if (this.fixed) {
          this.dom.style.position = "sticky";
        }
        this.syncGutters(false);
        view.scrollDOM.insertBefore(this.dom, view.contentDOM);
      }
      update(update) {
        if (this.updateGutters(update)) {
          let vpA = this.prevViewport, vpB = update.view.viewport;
          let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
          this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
        }
        if (update.geometryChanged) {
          this.dom.style.minHeight = this.view.contentHeight / this.view.scaleY + "px";
        }
        if (this.view.state.facet(unfixGutters) != !this.fixed) {
          this.fixed = !this.fixed;
          this.dom.style.position = this.fixed ? "sticky" : "";
        }
        this.prevViewport = update.view.viewport;
      }
      syncGutters(detach) {
        let after = this.dom.nextSibling;
        if (detach)
          this.dom.remove();
        let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
        let classSet = [];
        let contexts = this.gutters.map((gutter2) => new UpdateContext(gutter2, this.view.viewport, -this.view.documentPadding.top));
        for (let line of this.view.viewportLineBlocks) {
          if (classSet.length)
            classSet = [];
          if (Array.isArray(line.type)) {
            let first = true;
            for (let b of line.type) {
              if (b.type == BlockType.Text && first) {
                advanceCursor(lineClasses, classSet, b.from);
                for (let cx2 of contexts)
                  cx2.line(this.view, b, classSet);
                first = false;
              } else if (b.widget) {
                for (let cx2 of contexts)
                  cx2.widget(this.view, b);
              }
            }
          } else if (line.type == BlockType.Text) {
            advanceCursor(lineClasses, classSet, line.from);
            for (let cx2 of contexts)
              cx2.line(this.view, line, classSet);
          } else if (line.widget) {
            for (let cx2 of contexts)
              cx2.widget(this.view, line);
          }
        }
        for (let cx2 of contexts)
          cx2.finish();
        if (detach)
          this.view.scrollDOM.insertBefore(this.dom, after);
      }
      updateGutters(update) {
        let prev = update.startState.facet(activeGutters), cur2 = update.state.facet(activeGutters);
        let change = update.docChanged || update.heightChanged || update.viewportChanged || !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
        if (prev == cur2) {
          for (let gutter2 of this.gutters)
            if (gutter2.update(update))
              change = true;
        } else {
          change = true;
          let gutters2 = [];
          for (let conf of cur2) {
            let known = prev.indexOf(conf);
            if (known < 0) {
              gutters2.push(new SingleGutterView(this.view, conf));
            } else {
              this.gutters[known].update(update);
              gutters2.push(this.gutters[known]);
            }
          }
          for (let g of this.gutters) {
            g.dom.remove();
            if (gutters2.indexOf(g) < 0)
              g.destroy();
          }
          for (let g of gutters2)
            this.dom.appendChild(g.dom);
          this.gutters = gutters2;
        }
        return change;
      }
      destroy() {
        for (let view of this.gutters)
          view.destroy();
        this.dom.remove();
      }
    }, {
      provide: (plugin) => EditorView.scrollMargins.of((view) => {
        let value = view.plugin(plugin);
        if (!value || value.gutters.length == 0 || !value.fixed)
          return null;
        return view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth * view.scaleX } : { right: value.dom.offsetWidth * view.scaleX };
      })
    });
    UpdateContext = class {
      constructor(gutter2, viewport, height) {
        this.gutter = gutter2;
        this.height = height;
        this.i = 0;
        this.cursor = RangeSet.iter(gutter2.markers, viewport.from);
      }
      addElement(view, block3, markers) {
        let { gutter: gutter2 } = this, above = (block3.top - this.height) / view.scaleY, height = block3.height / view.scaleY;
        if (this.i == gutter2.elements.length) {
          let newElt = new GutterElement(view, height, above, markers);
          gutter2.elements.push(newElt);
          gutter2.dom.appendChild(newElt.dom);
        } else {
          gutter2.elements[this.i].update(view, height, above, markers);
        }
        this.height = block3.bottom;
        this.i++;
      }
      line(view, line, extraMarkers) {
        let localMarkers = [];
        advanceCursor(this.cursor, localMarkers, line.from);
        if (extraMarkers.length)
          localMarkers = localMarkers.concat(extraMarkers);
        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
        if (forLine)
          localMarkers.unshift(forLine);
        let gutter2 = this.gutter;
        if (localMarkers.length == 0 && !gutter2.config.renderEmptyElements)
          return;
        this.addElement(view, line, localMarkers);
      }
      widget(view, block3) {
        let marker = this.gutter.config.widgetMarker(view, block3.widget, block3), markers = marker ? [marker] : null;
        for (let cls of view.state.facet(gutterWidgetClass)) {
          let marker2 = cls(view, block3.widget, block3);
          if (marker2)
            (markers || (markers = [])).push(marker2);
        }
        if (markers)
          this.addElement(view, block3, markers);
      }
      finish() {
        let gutter2 = this.gutter;
        while (gutter2.elements.length > this.i) {
          let last = gutter2.elements.pop();
          gutter2.dom.removeChild(last.dom);
          last.destroy();
        }
      }
    };
    SingleGutterView = class {
      constructor(view, config2) {
        this.view = view;
        this.config = config2;
        this.elements = [];
        this.spacer = null;
        this.dom = document.createElement("div");
        this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
        for (let prop in config2.domEventHandlers) {
          this.dom.addEventListener(prop, (event) => {
            let target = event.target, y;
            if (target != this.dom && this.dom.contains(target)) {
              while (target.parentNode != this.dom)
                target = target.parentNode;
              let rect2 = target.getBoundingClientRect();
              y = (rect2.top + rect2.bottom) / 2;
            } else {
              y = event.clientY;
            }
            let line = view.lineBlockAtHeight(y - view.documentTop);
            if (config2.domEventHandlers[prop](view, line, event))
              event.preventDefault();
          });
        }
        this.markers = asArray2(config2.markers(view));
        if (config2.initialSpacer) {
          this.spacer = new GutterElement(view, 0, 0, [config2.initialSpacer(view)]);
          this.dom.appendChild(this.spacer.dom);
          this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
        }
      }
      update(update) {
        let prevMarkers = this.markers;
        this.markers = asArray2(this.config.markers(update.view));
        if (this.spacer && this.config.updateSpacer) {
          let updated = this.config.updateSpacer(this.spacer.markers[0], update);
          if (updated != this.spacer.markers[0])
            this.spacer.update(update.view, 0, 0, [updated]);
        }
        let vp = update.view.viewport;
        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) || (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
      }
      destroy() {
        for (let elt2 of this.elements)
          elt2.destroy();
      }
    };
    GutterElement = class {
      constructor(view, height, above, markers) {
        this.height = -1;
        this.above = 0;
        this.markers = [];
        this.dom = document.createElement("div");
        this.dom.className = "cm-gutterElement";
        this.update(view, height, above, markers);
      }
      update(view, height, above, markers) {
        if (this.height != height) {
          this.height = height;
          this.dom.style.height = height + "px";
        }
        if (this.above != above)
          this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
        if (!sameMarkers(this.markers, markers))
          this.setMarkers(view, markers);
      }
      setMarkers(view, markers) {
        let cls = "cm-gutterElement", domPos = this.dom.firstChild;
        for (let iNew = 0, iOld = 0; ; ) {
          let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
          if (marker) {
            let c2 = marker.elementClass;
            if (c2)
              cls += " " + c2;
            for (let i = iOld; i < this.markers.length; i++)
              if (this.markers[i].compare(marker)) {
                skipTo = i;
                matched = true;
                break;
              }
          } else {
            skipTo = this.markers.length;
          }
          while (iOld < skipTo) {
            let next2 = this.markers[iOld++];
            if (next2.toDOM) {
              next2.destroy(domPos);
              let after = domPos.nextSibling;
              domPos.remove();
              domPos = after;
            }
          }
          if (!marker)
            break;
          if (marker.toDOM) {
            if (matched)
              domPos = domPos.nextSibling;
            else
              this.dom.insertBefore(marker.toDOM(view), domPos);
          }
          if (matched)
            iOld++;
        }
        this.dom.className = cls;
        this.markers = markers;
      }
      destroy() {
        this.setMarkers(null, []);
      }
    };
    lineNumberMarkers = /* @__PURE__ */ Facet.define();
    lineNumberWidgetMarker = /* @__PURE__ */ Facet.define();
    lineNumberConfig = /* @__PURE__ */ Facet.define({
      combine(values2) {
        return combineConfig(values2, { formatNumber: String, domEventHandlers: {} }, {
          domEventHandlers(a2, b) {
            let result = Object.assign({}, a2);
            for (let event in b) {
              let exists = result[event], add3 = b[event];
              result[event] = exists ? (view, line, event2) => exists(view, line, event2) || add3(view, line, event2) : add3;
            }
            return result;
          }
        });
      }
    });
    NumberMarker = class extends GutterMarker {
      constructor(number3) {
        super();
        this.number = number3;
      }
      eq(other) {
        return this.number == other.number;
      }
      toDOM() {
        return document.createTextNode(this.number);
      }
    };
    lineNumberGutter = /* @__PURE__ */ activeGutters.compute([lineNumberConfig], (state) => ({
      class: "cm-lineNumbers",
      renderEmptyElements: false,
      markers(view) {
        return view.state.facet(lineNumberMarkers);
      },
      lineMarker(view, line, others2) {
        if (others2.some((m) => m.toDOM))
          return null;
        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
      },
      widgetMarker: (view, widget, block3) => {
        for (let m of view.state.facet(lineNumberWidgetMarker)) {
          let result = m(view, widget, block3);
          if (result)
            return result;
        }
        return null;
      },
      lineMarkerChange: (update) => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
      initialSpacer(view) {
        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
      },
      updateSpacer(spacer, update) {
        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
        return max == spacer.number ? spacer : new NumberMarker(max);
      },
      domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    }));
    activeLineGutterMarker = /* @__PURE__ */ new class extends GutterMarker {
      constructor() {
        super(...arguments);
        this.elementClass = "cm-activeLineGutter";
      }
    }();
    activeLineGutterHighlighter = /* @__PURE__ */ gutterLineClass.compute(["selection"], (state) => {
      let marks2 = [], last = -1;
      for (let range of state.selection.ranges) {
        let linePos = state.doc.lineAt(range.head).from;
        if (linePos > last) {
          last = linePos;
          marks2.push(activeLineGutterMarker.range(linePos));
        }
      }
      return RangeSet.of(marks2);
    });
  }
});

// ../../node_modules/@lezer/highlight/dist/index.js
function sameArray2(a2, b) {
  return a2.length == b.length && a2.every((x, i) => x == b[i]);
}
function powerSet(array2) {
  let sets = [[]];
  for (let i = 0; i < array2.length; i++) {
    for (let j = 0, e = sets.length; j < e; j++) {
      sets.push(sets[j].concat(array2[i]));
    }
  }
  return sets.sort((a2, b) => b.length - a2.length);
}
function styleTags(spec) {
  let byName = /* @__PURE__ */ Object.create(null);
  for (let prop in spec) {
    let tags3 = spec[prop];
    if (!Array.isArray(tags3))
      tags3 = [tags3];
    for (let part of prop.split(" "))
      if (part) {
        let pieces = [], mode = 2, rest = part;
        for (let pos = 0; ; ) {
          if (rest == "..." && pos > 0 && pos + 3 == part.length) {
            mode = 1;
            break;
          }
          let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
          if (!m)
            throw new RangeError("Invalid path: " + part);
          pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
          pos += m[0].length;
          if (pos == part.length)
            break;
          let next2 = part[pos++];
          if (pos == part.length && next2 == "!") {
            mode = 0;
            break;
          }
          if (next2 != "/")
            throw new RangeError("Invalid path: " + part);
          rest = part.slice(pos);
        }
        let last = pieces.length - 1, inner = pieces[last];
        if (!inner)
          throw new RangeError("Invalid path: " + part);
        let rule = new Rule(tags3, mode, last > 0 ? pieces.slice(0, last) : null);
        byName[inner] = rule.sort(byName[inner]);
      }
  }
  return ruleNodeProp.add(byName);
}
function tagHighlighter(tags3, options) {
  let map = /* @__PURE__ */ Object.create(null);
  for (let style2 of tags3) {
    if (!Array.isArray(style2.tag))
      map[style2.tag.id] = style2.class;
    else
      for (let tag2 of style2.tag)
        map[tag2.id] = style2.class;
  }
  let { scope, all = null } = options || {};
  return {
    style: (tags4) => {
      let cls = all;
      for (let tag2 of tags4) {
        for (let sub of tag2.set) {
          let tagClass = map[sub.id];
          if (tagClass) {
            cls = cls ? cls + " " + tagClass : tagClass;
            break;
          }
        }
      }
      return cls;
    },
    scope
  };
}
function highlightTags(highlighters, tags3) {
  let result = null;
  for (let highlighter of highlighters) {
    let value = highlighter.style(tags3);
    if (value)
      result = result ? result + " " + value : value;
  }
  return result;
}
function highlightTree(tree, highlighter, putStyle, from3 = 0, to = tree.length) {
  let builder = new HighlightBuilder(from3, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
  builder.highlightRange(tree.cursor(), from3, to, "", builder.highlighters);
  builder.flush(to);
}
function getStyleTags(node) {
  let rule = node.type.prop(ruleNodeProp);
  while (rule && rule.context && !node.matchContext(rule.context))
    rule = rule.next;
  return rule || null;
}
var nextTagID, Tag, nextModifierID, Modifier, ruleNodeProp, Rule, HighlightBuilder, t, comment, name, typeName, propertyName, literal, string, number, content, heading, keyword, operator, punctuation, bracket, meta, tags, classHighlighter;
var init_dist4 = __esm({
  "../../node_modules/@lezer/highlight/dist/index.js"() {
    init_dist();
    nextTagID = 0;
    Tag = class _Tag {
      /**
      @internal
      */
      constructor(name2, set2, base5, modified) {
        this.name = name2;
        this.set = set2;
        this.base = base5;
        this.modified = modified;
        this.id = nextTagID++;
      }
      toString() {
        let { name: name2 } = this;
        for (let mod of this.modified)
          if (mod.name)
            name2 = `${mod.name}(${name2})`;
        return name2;
      }
      static define(nameOrParent, parent) {
        let name2 = typeof nameOrParent == "string" ? nameOrParent : "?";
        if (nameOrParent instanceof _Tag)
          parent = nameOrParent;
        if (parent === null || parent === void 0 ? void 0 : parent.base)
          throw new Error("Can not derive from a modified tag");
        let tag2 = new _Tag(name2, [], null, []);
        tag2.set.push(tag2);
        if (parent)
          for (let t2 of parent.set)
            tag2.set.push(t2);
        return tag2;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
      static defineModifier(name2) {
        let mod = new Modifier(name2);
        return (tag2) => {
          if (tag2.modified.indexOf(mod) > -1)
            return tag2;
          return Modifier.get(tag2.base || tag2, tag2.modified.concat(mod).sort((a2, b) => a2.id - b.id));
        };
      }
    };
    nextModifierID = 0;
    Modifier = class _Modifier {
      constructor(name2) {
        this.name = name2;
        this.instances = [];
        this.id = nextModifierID++;
      }
      static get(base5, mods) {
        if (!mods.length)
          return base5;
        let exists = mods[0].instances.find((t2) => t2.base == base5 && sameArray2(mods, t2.modified));
        if (exists)
          return exists;
        let set2 = [], tag2 = new Tag(base5.name, set2, base5, mods);
        for (let m of mods)
          m.instances.push(tag2);
        let configs = powerSet(mods);
        for (let parent of base5.set)
          if (!parent.modified.length)
            for (let config2 of configs)
              set2.push(_Modifier.get(parent, config2));
        return tag2;
      }
    };
    ruleNodeProp = new NodeProp();
    Rule = class {
      constructor(tags3, mode, context, next2) {
        this.tags = tags3;
        this.mode = mode;
        this.context = context;
        this.next = next2;
      }
      get opaque() {
        return this.mode == 0;
      }
      get inherit() {
        return this.mode == 1;
      }
      sort(other) {
        if (!other || other.depth < this.depth) {
          this.next = other;
          return this;
        }
        other.next = this.sort(other.next);
        return other;
      }
      get depth() {
        return this.context ? this.context.length : 0;
      }
    };
    Rule.empty = new Rule([], 2, null);
    HighlightBuilder = class {
      constructor(at2, highlighters, span) {
        this.at = at2;
        this.highlighters = highlighters;
        this.span = span;
        this.class = "";
      }
      startSpan(at2, cls) {
        if (cls != this.class) {
          this.flush(at2);
          if (at2 > this.at)
            this.at = at2;
          this.class = cls;
        }
      }
      flush(to) {
        if (to > this.at && this.class)
          this.span(this.at, to, this.class);
      }
      highlightRange(cursor2, from3, to, inheritedClass, highlighters) {
        let { type: type7, from: start2, to: end2 } = cursor2;
        if (start2 >= to || end2 <= from3)
          return;
        if (type7.isTop)
          highlighters = this.highlighters.filter((h) => !h.scope || h.scope(type7));
        let cls = inheritedClass;
        let rule = getStyleTags(cursor2) || Rule.empty;
        let tagCls = highlightTags(highlighters, rule.tags);
        if (tagCls) {
          if (cls)
            cls += " ";
          cls += tagCls;
          if (rule.mode == 1)
            inheritedClass += (inheritedClass ? " " : "") + tagCls;
        }
        this.startSpan(Math.max(from3, start2), cls);
        if (rule.opaque)
          return;
        let mounted = cursor2.tree && cursor2.tree.prop(NodeProp.mounted);
        if (mounted && mounted.overlay) {
          let inner = cursor2.node.enter(mounted.overlay[0].from + start2, 1);
          let innerHighlighters = this.highlighters.filter((h) => !h.scope || h.scope(mounted.tree.type));
          let hasChild2 = cursor2.firstChild();
          for (let i = 0, pos = start2; ; i++) {
            let next2 = i < mounted.overlay.length ? mounted.overlay[i] : null;
            let nextPos = next2 ? next2.from + start2 : end2;
            let rangeFrom2 = Math.max(from3, pos), rangeTo2 = Math.min(to, nextPos);
            if (rangeFrom2 < rangeTo2 && hasChild2) {
              while (cursor2.from < rangeTo2) {
                this.highlightRange(cursor2, rangeFrom2, rangeTo2, inheritedClass, highlighters);
                this.startSpan(Math.min(rangeTo2, cursor2.to), cls);
                if (cursor2.to >= nextPos || !cursor2.nextSibling())
                  break;
              }
            }
            if (!next2 || nextPos > to)
              break;
            pos = next2.to + start2;
            if (pos > from3) {
              this.highlightRange(inner.cursor(), Math.max(from3, next2.from + start2), Math.min(to, pos), "", innerHighlighters);
              this.startSpan(Math.min(to, pos), cls);
            }
          }
          if (hasChild2)
            cursor2.parent();
        } else if (cursor2.firstChild()) {
          if (mounted)
            inheritedClass = "";
          do {
            if (cursor2.to <= from3)
              continue;
            if (cursor2.from >= to)
              break;
            this.highlightRange(cursor2, from3, to, inheritedClass, highlighters);
            this.startSpan(Math.min(to, cursor2.to), cls);
          } while (cursor2.nextSibling());
          cursor2.parent();
        }
      }
    };
    t = Tag.define;
    comment = t();
    name = t();
    typeName = t(name);
    propertyName = t(name);
    literal = t();
    string = t(literal);
    number = t(literal);
    content = t();
    heading = t(content);
    keyword = t();
    operator = t();
    punctuation = t();
    bracket = t(punctuation);
    meta = t();
    tags = {
      /**
      A comment.
      */
      comment,
      /**
      A line [comment](#highlight.tags.comment).
      */
      lineComment: t(comment),
      /**
      A block [comment](#highlight.tags.comment).
      */
      blockComment: t(comment),
      /**
      A documentation [comment](#highlight.tags.comment).
      */
      docComment: t(comment),
      /**
      Any kind of identifier.
      */
      name,
      /**
      The [name](#highlight.tags.name) of a variable.
      */
      variableName: t(name),
      /**
      A type [name](#highlight.tags.name).
      */
      typeName,
      /**
      A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      */
      tagName: t(typeName),
      /**
      A property or field [name](#highlight.tags.name).
      */
      propertyName,
      /**
      An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      */
      attributeName: t(propertyName),
      /**
      The [name](#highlight.tags.name) of a class.
      */
      className: t(name),
      /**
      A label [name](#highlight.tags.name).
      */
      labelName: t(name),
      /**
      A namespace [name](#highlight.tags.name).
      */
      namespace: t(name),
      /**
      The [name](#highlight.tags.name) of a macro.
      */
      macroName: t(name),
      /**
      A literal value.
      */
      literal,
      /**
      A string [literal](#highlight.tags.literal).
      */
      string,
      /**
      A documentation [string](#highlight.tags.string).
      */
      docString: t(string),
      /**
      A character literal (subtag of [string](#highlight.tags.string)).
      */
      character: t(string),
      /**
      An attribute value (subtag of [string](#highlight.tags.string)).
      */
      attributeValue: t(string),
      /**
      A number [literal](#highlight.tags.literal).
      */
      number,
      /**
      An integer [number](#highlight.tags.number) literal.
      */
      integer: t(number),
      /**
      A floating-point [number](#highlight.tags.number) literal.
      */
      float: t(number),
      /**
      A boolean [literal](#highlight.tags.literal).
      */
      bool: t(literal),
      /**
      Regular expression [literal](#highlight.tags.literal).
      */
      regexp: t(literal),
      /**
      An escape [literal](#highlight.tags.literal), for example a
      backslash escape in a string.
      */
      escape: t(literal),
      /**
      A color [literal](#highlight.tags.literal).
      */
      color: t(literal),
      /**
      A URL [literal](#highlight.tags.literal).
      */
      url: t(literal),
      /**
      A language keyword.
      */
      keyword,
      /**
      The [keyword](#highlight.tags.keyword) for the self or this
      object.
      */
      self: t(keyword),
      /**
      The [keyword](#highlight.tags.keyword) for null.
      */
      null: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) denoting some atomic value.
      */
      atom: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that represents a unit.
      */
      unit: t(keyword),
      /**
      A modifier [keyword](#highlight.tags.keyword).
      */
      modifier: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that acts as an operator.
      */
      operatorKeyword: t(keyword),
      /**
      A control-flow related [keyword](#highlight.tags.keyword).
      */
      controlKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that defines something.
      */
      definitionKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) related to defining or
      interfacing with modules.
      */
      moduleKeyword: t(keyword),
      /**
      An operator.
      */
      operator,
      /**
      An [operator](#highlight.tags.operator) that dereferences something.
      */
      derefOperator: t(operator),
      /**
      Arithmetic-related [operator](#highlight.tags.operator).
      */
      arithmeticOperator: t(operator),
      /**
      Logical [operator](#highlight.tags.operator).
      */
      logicOperator: t(operator),
      /**
      Bit [operator](#highlight.tags.operator).
      */
      bitwiseOperator: t(operator),
      /**
      Comparison [operator](#highlight.tags.operator).
      */
      compareOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that updates its operand.
      */
      updateOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that defines something.
      */
      definitionOperator: t(operator),
      /**
      Type-related [operator](#highlight.tags.operator).
      */
      typeOperator: t(operator),
      /**
      Control-flow [operator](#highlight.tags.operator).
      */
      controlOperator: t(operator),
      /**
      Program or markup punctuation.
      */
      punctuation,
      /**
      [Punctuation](#highlight.tags.punctuation) that separates
      things.
      */
      separator: t(punctuation),
      /**
      Bracket-style [punctuation](#highlight.tags.punctuation).
      */
      bracket,
      /**
      Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      tokens).
      */
      angleBracket: t(bracket),
      /**
      Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      tokens).
      */
      squareBracket: t(bracket),
      /**
      Parentheses (usually `(` and `)` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      paren: t(bracket),
      /**
      Braces (usually `{` and `}` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      brace: t(bracket),
      /**
      Content, for example plain text in XML or markup documents.
      */
      content,
      /**
      [Content](#highlight.tags.content) that represents a heading.
      */
      heading,
      /**
      A level 1 [heading](#highlight.tags.heading).
      */
      heading1: t(heading),
      /**
      A level 2 [heading](#highlight.tags.heading).
      */
      heading2: t(heading),
      /**
      A level 3 [heading](#highlight.tags.heading).
      */
      heading3: t(heading),
      /**
      A level 4 [heading](#highlight.tags.heading).
      */
      heading4: t(heading),
      /**
      A level 5 [heading](#highlight.tags.heading).
      */
      heading5: t(heading),
      /**
      A level 6 [heading](#highlight.tags.heading).
      */
      heading6: t(heading),
      /**
      A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
      */
      contentSeparator: t(content),
      /**
      [Content](#highlight.tags.content) that represents a list.
      */
      list: t(content),
      /**
      [Content](#highlight.tags.content) that represents a quote.
      */
      quote: t(content),
      /**
      [Content](#highlight.tags.content) that is emphasized.
      */
      emphasis: t(content),
      /**
      [Content](#highlight.tags.content) that is styled strong.
      */
      strong: t(content),
      /**
      [Content](#highlight.tags.content) that is part of a link.
      */
      link: t(content),
      /**
      [Content](#highlight.tags.content) that is styled as code or
      monospace.
      */
      monospace: t(content),
      /**
      [Content](#highlight.tags.content) that has a strike-through
      style.
      */
      strikethrough: t(content),
      /**
      Inserted text in a change-tracking format.
      */
      inserted: t(),
      /**
      Deleted text.
      */
      deleted: t(),
      /**
      Changed text.
      */
      changed: t(),
      /**
      An invalid or unsyntactic element.
      */
      invalid: t(),
      /**
      Metadata or meta-instruction.
      */
      meta,
      /**
      [Metadata](#highlight.tags.meta) that applies to the entire
      document.
      */
      documentMeta: t(meta),
      /**
      [Metadata](#highlight.tags.meta) that annotates or adds
      attributes to a given syntactic element.
      */
      annotation: t(meta),
      /**
      Processing instruction or preprocessor directive. Subtag of
      [meta](#highlight.tags.meta).
      */
      processingInstruction: t(meta),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that a
      given element is being defined. Expected to be used with the
      various [name](#highlight.tags.name) tags.
      */
      definition: Tag.defineModifier("definition"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that
      something is constant. Mostly expected to be used with
      [variable names](#highlight.tags.variableName).
      */
      constant: Tag.defineModifier("constant"),
      /**
      [Modifier](#highlight.Tag^defineModifier) used to indicate that
      a [variable](#highlight.tags.variableName) or [property
      name](#highlight.tags.propertyName) is being called or defined
      as a function.
      */
      function: Tag.defineModifier("function"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that can be applied to
      [names](#highlight.tags.name) to indicate that they belong to
      the language's standard environment.
      */
      standard: Tag.defineModifier("standard"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates a given
      [names](#highlight.tags.name) is local to some scope.
      */
      local: Tag.defineModifier("local"),
      /**
      A generic variant [modifier](#highlight.Tag^defineModifier) that
      can be used to tag language-specific alternative variants of
      some common tag. It is recommended for themes to define special
      forms of at least the [string](#highlight.tags.string) and
      [variable name](#highlight.tags.variableName) tags, since those
      come up a lot.
      */
      special: Tag.defineModifier("special")
    };
    for (let name2 in tags) {
      let val = tags[name2];
      if (val instanceof Tag)
        val.name = name2;
    }
    classHighlighter = tagHighlighter([
      { tag: tags.link, class: "tok-link" },
      { tag: tags.heading, class: "tok-heading" },
      { tag: tags.emphasis, class: "tok-emphasis" },
      { tag: tags.strong, class: "tok-strong" },
      { tag: tags.keyword, class: "tok-keyword" },
      { tag: tags.atom, class: "tok-atom" },
      { tag: tags.bool, class: "tok-bool" },
      { tag: tags.url, class: "tok-url" },
      { tag: tags.labelName, class: "tok-labelName" },
      { tag: tags.inserted, class: "tok-inserted" },
      { tag: tags.deleted, class: "tok-deleted" },
      { tag: tags.literal, class: "tok-literal" },
      { tag: tags.string, class: "tok-string" },
      { tag: tags.number, class: "tok-number" },
      { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
      { tag: tags.variableName, class: "tok-variableName" },
      { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
      { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
      { tag: tags.special(tags.variableName), class: "tok-variableName2" },
      { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags.typeName, class: "tok-typeName" },
      { tag: tags.namespace, class: "tok-namespace" },
      { tag: tags.className, class: "tok-className" },
      { tag: tags.macroName, class: "tok-macroName" },
      { tag: tags.propertyName, class: "tok-propertyName" },
      { tag: tags.operator, class: "tok-operator" },
      { tag: tags.comment, class: "tok-comment" },
      { tag: tags.meta, class: "tok-meta" },
      { tag: tags.invalid, class: "tok-invalid" },
      { tag: tags.punctuation, class: "tok-punctuation" }
    ]);
  }
});

// ../../node_modules/@codemirror/language/dist/index.js
function defineLanguageFacet(baseData) {
  return Facet.define({
    combine: baseData ? (values2) => values2.concat(baseData) : void 0
  });
}
function topNodeAt(state, pos, side) {
  let topLang = state.facet(language), tree = syntaxTree(state).topNode;
  if (!topLang || topLang.allowsNesting) {
    for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
      if (node.type.isTop)
        tree = node;
  }
  return tree;
}
function syntaxTree(state) {
  let field = state.field(Language.state, false);
  return field ? field.tree : Tree.empty;
}
function cutFragments(fragments, from3, to) {
  return TreeFragment.applyChanges(fragments, [{ fromA: from3, toA: to, fromB: from3, toB: to }]);
}
function getIndentUnit(state) {
  let unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
function indentString(state, cols) {
  let result = "", ts = state.tabSize, ch2 = state.facet(indentUnit)[0];
  if (ch2 == "	") {
    while (cols >= ts) {
      result += "	";
      cols -= ts;
    }
    ch2 = " ";
  }
  for (let i = 0; i < cols; i++)
    result += ch2;
  return result;
}
function getIndentation(context, pos) {
  if (context instanceof EditorState)
    context = new IndentContext(context);
  for (let service of context.state.facet(indentService)) {
    let result = service(context, pos);
    if (result !== void 0)
      return result;
  }
  let tree = syntaxTree(context.state);
  return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
}
function syntaxIndentation(cx2, ast, pos) {
  let stack = ast.resolveStack(pos);
  let inner = ast.resolveInner(pos, -1).resolve(pos, 0).enterUnfinishedNodesBefore(pos);
  if (inner != stack.node) {
    let add3 = [];
    for (let cur2 = inner; cur2 && !(cur2.from == stack.node.from && cur2.type == stack.node.type); cur2 = cur2.parent)
      add3.push(cur2);
    for (let i = add3.length - 1; i >= 0; i--)
      stack = { node: add3[i], next: stack };
  }
  return indentFor(stack, cx2, pos);
}
function indentFor(stack, cx2, pos) {
  for (let cur2 = stack; cur2; cur2 = cur2.next) {
    let strategy = indentStrategy(cur2.node);
    if (strategy)
      return strategy(TreeIndentContext.create(cx2, pos, cur2));
  }
  return 0;
}
function ignoreClosed(cx2) {
  return cx2.pos == cx2.options.simulateBreak && cx2.options.simulateDoubleBreak;
}
function indentStrategy(tree) {
  let strategy = tree.type.prop(indentNodeProp);
  if (strategy)
    return strategy;
  let first = tree.firstChild, close;
  if (first && (close = first.type.prop(NodeProp.closedBy))) {
    let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
    return (cx2) => delimitedStrategy(cx2, true, 1, void 0, closed && !ignoreClosed(cx2) ? last.from : void 0);
  }
  return tree.parent == null ? topIndent : null;
}
function topIndent() {
  return 0;
}
function isParent(parent, of) {
  for (let cur2 = of; cur2; cur2 = cur2.parent)
    if (parent == cur2)
      return true;
  return false;
}
function bracketedAligned(context) {
  let tree = context.node;
  let openToken = tree.childAfter(tree.from), last = tree.lastChild;
  if (!openToken)
    return null;
  let sim = context.options.simulateBreak;
  let openLine = context.state.doc.lineAt(openToken.from);
  let lineEnd2 = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (let pos = openToken.to; ; ) {
    let next2 = tree.childAfter(pos);
    if (!next2 || next2 == last)
      return null;
    if (!next2.type.isSkipped) {
      if (next2.from >= lineEnd2)
        return null;
      let space10 = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
      return { from: openToken.from, to: openToken.to + space10 };
    }
    pos = next2.to;
  }
}
function delimitedIndent({ closing: closing4, align = true, units = 1 }) {
  return (context) => delimitedStrategy(context, align, units, closing4);
}
function delimitedStrategy(context, align, units, closing4, closedAt) {
  let after = context.textAfter, space10 = after.match(/^\s*/)[0].length;
  let closed = closing4 && after.slice(space10, space10 + closing4.length) == closing4 || closedAt == context.pos + space10;
  let aligned = align ? bracketedAligned(context) : null;
  if (aligned)
    return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
function continuedIndent({ except, units = 1 } = {}) {
  return (context) => {
    let matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
function indentOnInput() {
  return EditorState.transactionFilter.of((tr) => {
    if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
      return tr;
    let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
    if (!rules.length)
      return tr;
    let doc2 = tr.newDoc, { head } = tr.newSelection.main, line = doc2.lineAt(head);
    if (head > line.from + DontIndentBeyond)
      return tr;
    let lineStart = doc2.sliceString(line.from, head);
    if (!rules.some((r2) => r2.test(lineStart)))
      return tr;
    let { state } = tr, last = -1, changes = [];
    for (let { head: head2 } of state.selection.ranges) {
      let line2 = state.doc.lineAt(head2);
      if (line2.from == last)
        continue;
      last = line2.from;
      let indent7 = getIndentation(state, line2.from);
      if (indent7 == null)
        continue;
      let cur2 = /^\s*/.exec(line2.text)[0];
      let norm = indentString(state, indent7);
      if (cur2 != norm)
        changes.push({ from: line2.from, to: line2.from + cur2.length, insert: norm });
    }
    return changes.length ? [tr, { changes, sequential: true }] : tr;
  });
}
function foldInside(node) {
  let first = node.firstChild, last = node.lastChild;
  return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
}
function syntaxFolding(state, start2, end2) {
  let tree = syntaxTree(state);
  if (tree.length < end2)
    return null;
  let stack = tree.resolveStack(end2, 1);
  let found = null;
  for (let iter = stack; iter; iter = iter.next) {
    let cur2 = iter.node;
    if (cur2.to <= end2 || cur2.from > end2)
      continue;
    if (found && cur2.from < start2)
      break;
    let prop = cur2.type.prop(foldNodeProp);
    if (prop && (cur2.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur2))) {
      let value = prop(cur2, state);
      if (value && value.from <= end2 && value.from >= start2 && value.to > end2)
        found = value;
    }
  }
  return found;
}
function isUnfinished(node) {
  let ch2 = node.lastChild;
  return ch2 && ch2.to == node.to && ch2.type.isError;
}
function foldable(state, lineStart, lineEnd2) {
  for (let service of state.facet(foldService)) {
    let result = service(state, lineStart, lineEnd2);
    if (result)
      return result;
  }
  return syntaxFolding(state, lineStart, lineEnd2);
}
function mapRange(range, mapping) {
  let from3 = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
  return from3 >= to ? void 0 : { from: from3, to };
}
function selectedLines(view) {
  let lines = [];
  for (let { head } of view.state.selection.ranges) {
    if (lines.some((l) => l.from <= head && l.to >= head))
      continue;
    lines.push(view.lineBlockAt(head));
  }
  return lines;
}
function findFold(state, from3, to) {
  var _a2;
  let found = null;
  (_a2 = state.field(foldState, false)) === null || _a2 === void 0 ? void 0 : _a2.between(from3, to, (from4, to2) => {
    if (!found || found.from > from4)
      found = { from: from4, to: to2 };
  });
  return found;
}
function foldExists(folded, from3, to) {
  let found = false;
  folded.between(from3, from3, (a2, b) => {
    if (a2 == from3 && b == to)
      found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
}
function announceFold(view, range, fold = true) {
  let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
  return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
}
function codeFolding(config2) {
  let result = [foldState, baseTheme$12];
  if (config2)
    result.push(foldConfig.of(config2));
  return result;
}
function widgetToDOM(view, prepared) {
  let { state } = view, conf = state.facet(foldConfig);
  let onclick = (event) => {
    let line = view.lineBlockAt(view.posAtDOM(event.target));
    let folded = findFold(view.state, line.from, line.to);
    if (folded)
      view.dispatch({ effects: unfoldEffect.of(folded) });
    event.preventDefault();
  };
  if (conf.placeholderDOM)
    return conf.placeholderDOM(view, onclick, prepared);
  let element2 = document.createElement("span");
  element2.textContent = conf.placeholderText;
  element2.setAttribute("aria-label", state.phrase("folded code"));
  element2.title = state.phrase("unfold");
  element2.className = "cm-foldPlaceholder";
  element2.onclick = onclick;
  return element2;
}
function foldGutter(config2 = {}) {
  let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config2);
  let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
  let markers = ViewPlugin.fromClass(class {
    constructor(view) {
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged || update.startState.facet(language) != update.state.facet(language) || update.startState.field(foldState, false) != update.state.field(foldState, false) || syntaxTree(update.startState) != syntaxTree(update.state) || fullConfig.foldingChanged(update))
        this.markers = this.buildMarkers(update.view);
    }
    buildMarkers(view) {
      let builder = new RangeSetBuilder();
      for (let line of view.viewportLineBlocks) {
        let mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;
        if (mark)
          builder.add(line.from, line.from, mark);
      }
      return builder.finish();
    }
  });
  let { domEventHandlers } = fullConfig;
  return [
    markers,
    gutter({
      class: "cm-foldGutter",
      markers(view) {
        var _a2;
        return ((_a2 = view.plugin(markers)) === null || _a2 === void 0 ? void 0 : _a2.markers) || RangeSet.empty;
      },
      initialSpacer() {
        return new FoldMarker(fullConfig, false);
      },
      domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
        if (domEventHandlers.click && domEventHandlers.click(view, line, event))
          return true;
        let folded = findFold(view.state, line.from, line.to);
        if (folded) {
          view.dispatch({ effects: unfoldEffect.of(folded) });
          return true;
        }
        let range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({ effects: foldEffect.of(range) });
          return true;
        }
        return false;
      } })
    }),
    codeFolding()
  ];
}
function getHighlighters(state) {
  let main = state.facet(highlighterFacet);
  return main.length ? main : state.facet(fallbackHighlighter);
}
function syntaxHighlighting(highlighter, options) {
  let ext = [treeHighlighter], themeType;
  if (highlighter instanceof HighlightStyle) {
    if (highlighter.module)
      ext.push(EditorView.styleModule.of(highlighter.module));
    themeType = highlighter.themeType;
  }
  if (options === null || options === void 0 ? void 0 : options.fallback)
    ext.push(fallbackHighlighter.of(highlighter));
  else if (themeType)
    ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
      return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
    }));
  else
    ext.push(highlighterFacet.of(highlighter));
  return ext;
}
function defaultRenderMatch(match2) {
  let decorations2 = [];
  let mark = match2.matched ? matchingMark : nonmatchingMark;
  decorations2.push(mark.range(match2.start.from, match2.start.to));
  if (match2.end)
    decorations2.push(mark.range(match2.end.from, match2.end.to));
  return decorations2;
}
function bracketMatching(config2 = {}) {
  return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
}
function matchingNodes(node, dir, brackets2) {
  let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
  if (byProp)
    return byProp;
  if (node.name.length == 1) {
    let index = brackets2.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
      return [brackets2[index + dir]];
  }
  return null;
}
function findHandle(node) {
  let hasHandle = node.type.prop(bracketMatchingHandle);
  return hasHandle ? hasHandle(node.node) : node;
}
function matchBrackets(state, pos, dir, config2 = {}) {
  let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets2 = config2.brackets || DefaultBrackets;
  let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
  for (let cur2 = node; cur2; cur2 = cur2.parent) {
    let matches = matchingNodes(cur2.type, dir, brackets2);
    if (matches && cur2.from < cur2.to) {
      let handle = findHandle(cur2);
      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
        return matchMarkedBrackets(state, pos, dir, cur2, handle, matches, brackets2);
    }
  }
  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets2);
}
function matchMarkedBrackets(_state, _pos, dir, token, handle, matching2, brackets2) {
  let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
  let depth = 0, cursor2 = parent === null || parent === void 0 ? void 0 : parent.cursor();
  if (cursor2 && (dir < 0 ? cursor2.childBefore(token.from) : cursor2.childAfter(token.to)))
    do {
      if (dir < 0 ? cursor2.to <= token.from : cursor2.from >= token.to) {
        if (depth == 0 && matching2.indexOf(cursor2.type.name) > -1 && cursor2.from < cursor2.to) {
          let endHandle = findHandle(cursor2);
          return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
        } else if (matchingNodes(cursor2.type, dir, brackets2)) {
          depth++;
        } else if (matchingNodes(cursor2.type, -dir, brackets2)) {
          if (depth == 0) {
            let endHandle = findHandle(cursor2);
            return {
              start: firstToken,
              end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
              matched: false
            };
          }
          depth--;
        }
      }
    } while (dir < 0 ? cursor2.prevSibling() : cursor2.nextSibling());
  return { start: firstToken, matched: false };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets2) {
  let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  let bracket2 = brackets2.indexOf(startCh);
  if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
    return null;
  let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
  let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
  for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
    let text5 = iter.value;
    if (dir < 0)
      distance += text5.length;
    let basePos = pos + distance * dir;
    for (let pos2 = dir > 0 ? 0 : text5.length - 1, end2 = dir > 0 ? text5.length : -1; pos2 != end2; pos2 += dir) {
      let found = brackets2.indexOf(text5[pos2]);
      if (found < 0 || tree.resolveInner(basePos + pos2, 1).type != tokenType)
        continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        return { start: startToken, end: { from: basePos + pos2, to: basePos + pos2 + 1 }, matched: found >> 1 == bracket2 >> 1 };
      } else {
        depth--;
      }
    }
    if (dir > 0)
      distance += text5.length;
  }
  return iter.done ? { start: startToken, matched: false } : null;
}
function countCol(string3, end2, tabSize, startIndex = 0, startValue = 0) {
  if (end2 == null) {
    end2 = string3.search(/[^\s\u00a0]/);
    if (end2 == -1)
      end2 = string3.length;
  }
  let n = startValue;
  for (let i = startIndex; i < end2; i++) {
    if (string3.charCodeAt(i) == 9)
      n += tabSize - n % tabSize;
    else
      n++;
  }
  return n;
}
function fullParser(spec) {
  return {
    name: spec.name || "",
    token: spec.token,
    blankLine: spec.blankLine || (() => {
    }),
    startState: spec.startState || (() => true),
    copyState: spec.copyState || defaultCopyState,
    indent: spec.indent || (() => null),
    languageData: spec.languageData || {},
    tokenTable: spec.tokenTable || noTokens,
    mergeTokens: spec.mergeTokens !== false
  };
}
function defaultCopyState(state) {
  if (typeof state != "object")
    return state;
  let newState = {};
  for (let prop in state) {
    let val = state[prop];
    newState[prop] = val instanceof Array ? val.slice() : val;
  }
  return newState;
}
function findState(lang, tree, off, startPos, before) {
  let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
  if (state)
    return { state: lang.streamParser.copyState(state), pos: off + tree.length };
  for (let i = tree.children.length - 1; i >= 0; i--) {
    let child = tree.children[i], pos = off + tree.positions[i];
    let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
    if (found)
      return found;
  }
  return null;
}
function cutTree(lang, tree, from3, to, inside2) {
  if (inside2 && from3 <= 0 && to >= tree.length)
    return tree;
  if (!inside2 && from3 == 0 && tree.type == lang.topNode)
    inside2 = true;
  for (let i = tree.children.length - 1; i >= 0; i--) {
    let pos = tree.positions[i], child = tree.children[i], inner;
    if (pos < to && child instanceof Tree) {
      if (!(inner = cutTree(lang, child, from3 - pos, to - pos, inside2)))
        break;
      return !inside2 ? inner : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
    }
  }
  return null;
}
function findStartInFragments(lang, fragments, startPos, endPos, editorState) {
  for (let f of fragments) {
    let from3 = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
    let found = from3 <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
    if (found && found.pos <= endPos && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
      return { state: found.state, tree };
  }
  return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
}
function readToken(token, stream, state) {
  stream.start = stream.pos;
  for (let i = 0; i < 10; i++) {
    let result = token(stream, state);
    if (stream.pos > stream.start)
      return result;
  }
  throw new Error("Stream parser failed to advance stream.");
}
function warnForPart(part, msg) {
  if (warned.indexOf(part) > -1)
    return;
  warned.push(part);
  console.warn(msg);
}
function createTokenType(extra, tagStr) {
  let tags$1 = [];
  for (let name3 of tagStr.split(" ")) {
    let found = [];
    for (let part of name3.split(".")) {
      let value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!found.length)
          warnForPart(part, `Modifier ${part} used at start of tag`);
        else
          found = found.map(value);
      } else {
        if (found.length)
          warnForPart(part, `Tag ${part} used as modifier`);
        else
          found = Array.isArray(value) ? value : [value];
      }
    }
    for (let tag2 of found)
      tags$1.push(tag2);
  }
  if (!tags$1.length)
    return 0;
  let name2 = tagStr.replace(/ /g, "_"), key = name2 + " " + tags$1.map((t2) => t2.id);
  let known = byTag[key];
  if (known)
    return known.id;
  let type7 = byTag[key] = NodeType.define({
    id: typeArray.length,
    name: name2,
    props: [styleTags({ [name2]: tags$1 })]
  });
  typeArray.push(type7);
  return type7.id;
}
function docID(data2, lang) {
  let type7 = NodeType.define({ id: typeArray.length, name: "Document", props: [
    languageDataProp.add(() => data2),
    indentNodeProp.add(() => (cx2) => lang.getIndent(cx2))
  ], top: true });
  typeArray.push(type7);
  return type7;
}
var _a, languageDataProp, sublanguageProp, Language, LRLanguage, DocInput, currentContext, ParseContext, LanguageState, requestIdle, isInputPending, parseWorker, language, LanguageSupport, LanguageDescription, indentService, indentUnit, IndentContext, indentNodeProp, TreeIndentContext, flatIndent, DontIndentBeyond, foldService, foldNodeProp, foldEffect, unfoldEffect, foldState, foldCode, unfoldCode, foldAll, unfoldAll, foldKeymap, defaultConfig, foldConfig, foldWidget, PreparedFoldWidget, foldGutterDefaults, FoldMarker, baseTheme$12, HighlightStyle, highlighterFacet, fallbackHighlighter, TreeHighlighter, treeHighlighter, defaultHighlightStyle, baseTheme2, DefaultScanDist, DefaultBrackets, bracketMatchingConfig, matchingMark, nonmatchingMark, bracketMatchingState, bracketMatchingUnique, bracketMatchingHandle, StringStream, IndentedFrom, StreamLanguage, Parse, noTokens, typeArray, nodeSet, warned, byTag, defaultTable, TokenTable, defaultTokenTable, marks;
var init_dist5 = __esm({
  "../../node_modules/@codemirror/language/dist/index.js"() {
    init_dist();
    init_dist2();
    init_dist3();
    init_dist4();
    init_style_mod();
    languageDataProp = /* @__PURE__ */ new NodeProp();
    sublanguageProp = /* @__PURE__ */ new NodeProp();
    Language = class {
      /**
      Construct a language object. If you need to invoke this
      directly, first define a data facet with
      [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
      configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
      to the language's outer syntax node.
      */
      constructor(data2, parser29, extraExtensions = [], name2 = "") {
        this.data = data2;
        this.name = name2;
        if (!EditorState.prototype.hasOwnProperty("tree"))
          Object.defineProperty(EditorState.prototype, "tree", { get() {
            return syntaxTree(this);
          } });
        this.parser = parser29;
        this.extension = [
          language.of(this),
          EditorState.languageData.of((state, pos, side) => {
            let top3 = topNodeAt(state, pos, side), data3 = top3.type.prop(languageDataProp);
            if (!data3)
              return [];
            let base5 = state.facet(data3), sub = top3.type.prop(sublanguageProp);
            if (sub) {
              let innerNode = top3.resolve(pos - top3.from, side);
              for (let sublang of sub)
                if (sublang.test(innerNode, state)) {
                  let data4 = state.facet(sublang.facet);
                  return sublang.type == "replace" ? data4 : data4.concat(base5);
                }
            }
            return base5;
          })
        ].concat(extraExtensions);
      }
      /**
      Query whether this language is active at the given position.
      */
      isActiveAt(state, pos, side = -1) {
        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
      findRegions(state) {
        let lang = state.facet(language);
        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
          return [{ from: 0, to: state.doc.length }];
        if (!lang || !lang.allowsNesting)
          return [];
        let result = [];
        let explore = (tree, from3) => {
          if (tree.prop(languageDataProp) == this.data) {
            result.push({ from: from3, to: from3 + tree.length });
            return;
          }
          let mount = tree.prop(NodeProp.mounted);
          if (mount) {
            if (mount.tree.prop(languageDataProp) == this.data) {
              if (mount.overlay)
                for (let r2 of mount.overlay)
                  result.push({ from: r2.from + from3, to: r2.to + from3 });
              else
                result.push({ from: from3, to: from3 + tree.length });
              return;
            } else if (mount.overlay) {
              let size = result.length;
              explore(mount.tree, mount.overlay[0].from + from3);
              if (result.length > size)
                return;
            }
          }
          for (let i = 0; i < tree.children.length; i++) {
            let ch2 = tree.children[i];
            if (ch2 instanceof Tree)
              explore(ch2, tree.positions[i] + from3);
          }
        };
        explore(syntaxTree(state), 0);
        return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
      get allowsNesting() {
        return true;
      }
    };
    Language.setState = /* @__PURE__ */ StateEffect.define();
    LRLanguage = class _LRLanguage extends Language {
      constructor(data2, parser29, name2) {
        super(data2, parser29, [], name2);
        this.parser = parser29;
      }
      /**
      Define a language from a parser.
      */
      static define(spec) {
        let data2 = defineLanguageFacet(spec.languageData);
        return new _LRLanguage(data2, spec.parser.configure({
          props: [languageDataProp.add((type7) => type7.isTop ? data2 : void 0)]
        }), spec.name);
      }
      /**
      Create a new instance of this language with a reconfigured
      version of its parser and optionally a new name.
      */
      configure(options, name2) {
        return new _LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
      }
      get allowsNesting() {
        return this.parser.hasWrappers();
      }
    };
    DocInput = class {
      /**
      Create an input object for the given document.
      */
      constructor(doc2) {
        this.doc = doc2;
        this.cursorPos = 0;
        this.string = "";
        this.cursor = doc2.iter();
      }
      get length() {
        return this.doc.length;
      }
      syncTo(pos) {
        this.string = this.cursor.next(pos - this.cursorPos).value;
        this.cursorPos = pos + this.string.length;
        return this.cursorPos - this.string.length;
      }
      chunk(pos) {
        this.syncTo(pos);
        return this.string;
      }
      get lineChunks() {
        return true;
      }
      read(from3, to) {
        let stringStart2 = this.cursorPos - this.string.length;
        if (from3 < stringStart2 || to >= this.cursorPos)
          return this.doc.sliceString(from3, to);
        else
          return this.string.slice(from3 - stringStart2, to - stringStart2);
      }
    };
    currentContext = null;
    ParseContext = class _ParseContext {
      constructor(parser29, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
        this.parser = parser29;
        this.state = state;
        this.fragments = fragments;
        this.tree = tree;
        this.treeLen = treeLen;
        this.viewport = viewport;
        this.skipped = skipped;
        this.scheduleOn = scheduleOn;
        this.parse = null;
        this.tempSkipped = [];
      }
      /**
      @internal
      */
      static create(parser29, state, viewport) {
        return new _ParseContext(parser29, state, [], Tree.empty, 0, viewport, [], null);
      }
      startParse() {
        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
      work(until, upto) {
        if (upto != null && upto >= this.state.doc.length)
          upto = void 0;
        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
          this.takeTree();
          return true;
        }
        return this.withContext(() => {
          var _a2;
          if (typeof until == "number") {
            let endTime = Date.now() + until;
            until = () => Date.now() > endTime;
          }
          if (!this.parse)
            this.parse = this.startParse();
          if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
            this.parse.stopAt(upto);
          for (; ; ) {
            let done = this.parse.advance();
            if (done) {
              this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
              this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
              this.tree = done;
              this.parse = null;
              if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                this.parse = this.startParse();
              else
                return true;
            }
            if (until())
              return false;
          }
        });
      }
      /**
      @internal
      */
      takeTree() {
        let pos, tree;
        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
          if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
            this.parse.stopAt(pos);
          this.withContext(() => {
            while (!(tree = this.parse.advance())) {
            }
          });
          this.treeLen = pos;
          this.tree = tree;
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
          this.parse = null;
        }
      }
      withContext(f) {
        let prev = currentContext;
        currentContext = this;
        try {
          return f();
        } finally {
          currentContext = prev;
        }
      }
      withoutTempSkipped(fragments) {
        for (let r2; r2 = this.tempSkipped.pop(); )
          fragments = cutFragments(fragments, r2.from, r2.to);
        return fragments;
      }
      /**
      @internal
      */
      changes(changes, newState) {
        let { fragments, tree, treeLen, viewport, skipped } = this;
        this.takeTree();
        if (!changes.empty) {
          let ranges = [];
          changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
          fragments = TreeFragment.applyChanges(fragments, ranges);
          tree = Tree.empty;
          treeLen = 0;
          viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
          if (this.skipped.length) {
            skipped = [];
            for (let r2 of this.skipped) {
              let from3 = changes.mapPos(r2.from, 1), to = changes.mapPos(r2.to, -1);
              if (from3 < to)
                skipped.push({ from: from3, to });
            }
          }
        }
        return new _ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
      updateViewport(viewport) {
        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
          return false;
        this.viewport = viewport;
        let startLen = this.skipped.length;
        for (let i = 0; i < this.skipped.length; i++) {
          let { from: from3, to } = this.skipped[i];
          if (from3 < viewport.to && to > viewport.from) {
            this.fragments = cutFragments(this.fragments, from3, to);
            this.skipped.splice(i--, 1);
          }
        }
        if (this.skipped.length >= startLen)
          return false;
        this.reset();
        return true;
      }
      /**
      @internal
      */
      reset() {
        if (this.parse) {
          this.takeTree();
          this.parse = null;
        }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
      skipUntilInView(from3, to) {
        this.skipped.push({ from: from3, to });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
      static getSkippingParser(until) {
        return new class extends Parser {
          createParse(input, fragments, ranges) {
            let from3 = ranges[0].from, to = ranges[ranges.length - 1].to;
            let parser29 = {
              parsedPos: from3,
              advance() {
                let cx2 = currentContext;
                if (cx2) {
                  for (let r2 of ranges)
                    cx2.tempSkipped.push(r2);
                  if (until)
                    cx2.scheduleOn = cx2.scheduleOn ? Promise.all([cx2.scheduleOn, until]) : until;
                }
                this.parsedPos = to;
                return new Tree(NodeType.none, [], [], to - from3);
              },
              stoppedAt: null,
              stopAt() {
              }
            };
            return parser29;
          }
        }();
      }
      /**
      @internal
      */
      isDone(upto) {
        upto = Math.min(upto, this.state.doc.length);
        let frags = this.fragments;
        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
      static get() {
        return currentContext;
      }
    };
    LanguageState = class _LanguageState {
      constructor(context) {
        this.context = context;
        this.tree = context.tree;
      }
      apply(tr) {
        if (!tr.docChanged && this.tree == this.context.tree)
          return this;
        let newCx = this.context.changes(tr.changes, tr.state);
        let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
        if (!newCx.work(20, upto))
          newCx.takeTree();
        return new _LanguageState(newCx);
      }
      static init(state) {
        let vpTo = Math.min(3e3, state.doc.length);
        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
        if (!parseState.work(20, vpTo))
          parseState.takeTree();
        return new _LanguageState(parseState);
      }
    };
    Language.state = /* @__PURE__ */ StateField.define({
      create: LanguageState.init,
      update(value, tr) {
        for (let e of tr.effects)
          if (e.is(Language.setState))
            return e.value;
        if (tr.startState.facet(language) != tr.state.facet(language))
          return LanguageState.init(tr.state);
        return value.apply(tr);
      }
    });
    requestIdle = (callback) => {
      let timeout = setTimeout(
        () => callback(),
        500
        /* Work.MaxPause */
      );
      return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
      requestIdle = (callback) => {
        let idle = -1, timeout = setTimeout(
          () => {
            idle = requestIdleCallback(callback, {
              timeout: 500 - 100
              /* Work.MinPause */
            });
          },
          100
          /* Work.MinPause */
        );
        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
      };
    isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
    parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
      constructor(view) {
        this.view = view;
        this.working = null;
        this.workScheduled = 0;
        this.chunkEnd = -1;
        this.chunkBudget = -1;
        this.work = this.work.bind(this);
        this.scheduleWork();
      }
      update(update) {
        let cx2 = this.view.state.field(Language.state).context;
        if (cx2.updateViewport(update.view.viewport) || this.view.viewport.to > cx2.treeLen)
          this.scheduleWork();
        if (update.docChanged || update.selectionSet) {
          if (this.view.hasFocus)
            this.chunkBudget += 50;
          this.scheduleWork();
        }
        this.checkAsyncSchedule(cx2);
      }
      scheduleWork() {
        if (this.working)
          return;
        let { state } = this.view, field = state.field(Language.state);
        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
          this.working = requestIdle(this.work);
      }
      work(deadline) {
        this.working = null;
        let now = Date.now();
        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
          this.chunkEnd = now + 3e4;
          this.chunkBudget = 3e3;
        }
        if (this.chunkBudget <= 0)
          return;
        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
        if (field.tree == field.context.tree && field.context.isDone(
          vpTo + 1e5
          /* Work.MaxParseAhead */
        ))
          return;
        let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
        let done = field.context.work(() => {
          return isInputPending && isInputPending() || Date.now() > endTime;
        }, vpTo + (viewportFirst ? 0 : 1e5));
        this.chunkBudget -= Date.now() - now;
        if (done || this.chunkBudget <= 0) {
          field.context.takeTree();
          this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
        }
        if (this.chunkBudget > 0 && !(done && !viewportFirst))
          this.scheduleWork();
        this.checkAsyncSchedule(field.context);
      }
      checkAsyncSchedule(cx2) {
        if (cx2.scheduleOn) {
          this.workScheduled++;
          cx2.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
          cx2.scheduleOn = null;
        }
      }
      destroy() {
        if (this.working)
          this.working();
      }
      isWorking() {
        return !!(this.working || this.workScheduled > 0);
      }
    }, {
      eventHandlers: { focus() {
        this.scheduleWork();
      } }
    });
    language = /* @__PURE__ */ Facet.define({
      combine(languages2) {
        return languages2.length ? languages2[0] : null;
      },
      enables: (language2) => [
        Language.state,
        parseWorker,
        EditorView.contentAttributes.compute([language2], (state) => {
          let lang = state.facet(language2);
          return lang && lang.name ? { "data-language": lang.name } : {};
        })
      ]
    });
    LanguageSupport = class {
      /**
      Create a language support object.
      */
      constructor(language2, support = []) {
        this.language = language2;
        this.support = support;
        this.extension = [language2, support];
      }
    };
    LanguageDescription = class _LanguageDescription {
      constructor(name2, alias, extensions, filename, loadFunc, support = void 0) {
        this.name = name2;
        this.alias = alias;
        this.extensions = extensions;
        this.filename = filename;
        this.loadFunc = loadFunc;
        this.support = support;
        this.loading = null;
      }
      /**
      Start loading the the language. Will return a promise that
      resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
      object when the language successfully loads.
      */
      load() {
        return this.loading || (this.loading = this.loadFunc().then((support) => this.support = support, (err) => {
          this.loading = null;
          throw err;
        }));
      }
      /**
      Create a language description.
      */
      static of(spec) {
        let { load, support } = spec;
        if (!load) {
          if (!support)
            throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
          load = () => Promise.resolve(support);
        }
        return new _LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map((s) => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
      }
      /**
      Look for a language in the given array of descriptions that
      matches the filename. Will first match
      [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
      and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
      and return the first language that matches.
      */
      static matchFilename(descs, filename) {
        for (let d3 of descs)
          if (d3.filename && d3.filename.test(filename))
            return d3;
        let ext = /\.([^.]+)$/.exec(filename);
        if (ext) {
          for (let d3 of descs)
            if (d3.extensions.indexOf(ext[1]) > -1)
              return d3;
        }
        return null;
      }
      /**
      Look for a language whose name or alias matches the the given
      name (case-insensitively). If `fuzzy` is true, and no direct
      matchs is found, this'll also search for a language whose name
      or alias occurs in the string (for names shorter than three
      characters, only when surrounded by non-word characters).
      */
      static matchLanguageName(descs, name2, fuzzy = true) {
        name2 = name2.toLowerCase();
        for (let d3 of descs)
          if (d3.alias.some((a2) => a2 == name2))
            return d3;
        if (fuzzy)
          for (let d3 of descs)
            for (let a2 of d3.alias) {
              let found = name2.indexOf(a2);
              if (found > -1 && (a2.length > 2 || !/\w/.test(name2[found - 1]) && !/\w/.test(name2[found + a2.length])))
                return d3;
            }
        return null;
      }
    };
    indentService = /* @__PURE__ */ Facet.define();
    indentUnit = /* @__PURE__ */ Facet.define({
      combine: (values2) => {
        if (!values2.length)
          return "  ";
        let unit = values2[0];
        if (!unit || /\S/.test(unit) || Array.from(unit).some((e) => e != unit[0]))
          throw new Error("Invalid indent unit: " + JSON.stringify(values2[0]));
        return unit;
      }
    });
    IndentContext = class {
      /**
      Create an indent context.
      */
      constructor(state, options = {}) {
        this.state = state;
        this.options = options;
        this.unit = getIndentUnit(state);
      }
      /**
      Get a description of the line at the given position, taking
      [simulated line
      breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      into account. If there is such a break at `pos`, the `bias`
      argument determines whether the part of the line line before or
      after the break is used.
      */
      lineAt(pos, bias = 1) {
        let line = this.state.doc.lineAt(pos);
        let { simulateBreak, simulateDoubleBreak } = this.options;
        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
          if (simulateDoubleBreak && simulateBreak == pos)
            return { text: "", from: pos };
          else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
            return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
          else
            return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
        }
        return line;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      textAfterPos(pos, bias = 1) {
        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
          return "";
        let { text: text5, from: from3 } = this.lineAt(pos, bias);
        return text5.slice(pos - from3, Math.min(text5.length, pos + 100 - from3));
      }
      /**
      Find the column for the given position.
      */
      column(pos, bias = 1) {
        let { text: text5, from: from3 } = this.lineAt(pos, bias);
        let result = this.countColumn(text5, pos - from3);
        let override2 = this.options.overrideIndentation ? this.options.overrideIndentation(from3) : -1;
        if (override2 > -1)
          result += override2 - this.countColumn(text5, text5.search(/\S|$/));
        return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
      countColumn(line, pos = line.length) {
        return countColumn(line, this.state.tabSize, pos);
      }
      /**
      Find the indentation column of the line at the given point.
      */
      lineIndent(pos, bias = 1) {
        let { text: text5, from: from3 } = this.lineAt(pos, bias);
        let override2 = this.options.overrideIndentation;
        if (override2) {
          let overriden = override2(from3);
          if (overriden > -1)
            return overriden;
        }
        return this.countColumn(text5, text5.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
      get simulatedBreak() {
        return this.options.simulateBreak || null;
      }
    };
    indentNodeProp = /* @__PURE__ */ new NodeProp();
    TreeIndentContext = class _TreeIndentContext extends IndentContext {
      constructor(base5, pos, context) {
        super(base5.state, base5.options);
        this.base = base5;
        this.pos = pos;
        this.context = context;
      }
      /**
      The syntax tree node to which the indentation strategy
      applies.
      */
      get node() {
        return this.context.node;
      }
      /**
      @internal
      */
      static create(base5, pos, context) {
        return new _TreeIndentContext(base5, pos, context);
      }
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      get textAfter() {
        return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
      get baseIndent() {
        return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
      baseIndentFor(node) {
        let line = this.state.doc.lineAt(node.from);
        for (; ; ) {
          let atBreak = node.resolve(line.from);
          while (atBreak.parent && atBreak.parent.from == atBreak.from)
            atBreak = atBreak.parent;
          if (isParent(atBreak, node))
            break;
          line = this.state.doc.lineAt(atBreak.from);
        }
        return this.lineIndent(line.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
      continue() {
        return indentFor(this.context.next, this.base, this.pos);
      }
    };
    flatIndent = (context) => context.baseIndent;
    DontIndentBeyond = 200;
    foldService = /* @__PURE__ */ Facet.define();
    foldNodeProp = /* @__PURE__ */ new NodeProp();
    foldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
    unfoldEffect = /* @__PURE__ */ StateEffect.define({ map: mapRange });
    foldState = /* @__PURE__ */ StateField.define({
      create() {
        return Decoration.none;
      },
      update(folded, tr) {
        folded = folded.map(tr.changes);
        for (let e of tr.effects) {
          if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
            let { preparePlaceholder } = tr.state.facet(foldConfig);
            let widget = !preparePlaceholder ? foldWidget : Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
            folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
          } else if (e.is(unfoldEffect)) {
            folded = folded.update({
              filter: (from3, to) => e.value.from != from3 || e.value.to != to,
              filterFrom: e.value.from,
              filterTo: e.value.to
            });
          }
        }
        if (tr.selection) {
          let onSelection = false, { head } = tr.selection.main;
          folded.between(head, head, (a2, b) => {
            if (a2 < head && b > head)
              onSelection = true;
          });
          if (onSelection)
            folded = folded.update({
              filterFrom: head,
              filterTo: head,
              filter: (a2, b) => b <= head || a2 >= head
            });
        }
        return folded;
      },
      provide: (f) => EditorView.decorations.from(f),
      toJSON(folded, state) {
        let ranges = [];
        folded.between(0, state.doc.length, (from3, to) => {
          ranges.push(from3, to);
        });
        return ranges;
      },
      fromJSON(value) {
        if (!Array.isArray(value) || value.length % 2)
          throw new RangeError("Invalid JSON for fold state");
        let ranges = [];
        for (let i = 0; i < value.length; ) {
          let from3 = value[i++], to = value[i++];
          if (typeof from3 != "number" || typeof to != "number")
            throw new RangeError("Invalid JSON for fold state");
          ranges.push(foldWidget.range(from3, to));
        }
        return Decoration.set(ranges, true);
      }
    });
    foldCode = (view) => {
      for (let line of selectedLines(view)) {
        let range = foldable(view.state, line.from, line.to);
        if (range) {
          view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
          return true;
        }
      }
      return false;
    };
    unfoldCode = (view) => {
      if (!view.state.field(foldState, false))
        return false;
      let effects = [];
      for (let line of selectedLines(view)) {
        let folded = findFold(view.state, line.from, line.to);
        if (folded)
          effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
      }
      if (effects.length)
        view.dispatch({ effects });
      return effects.length > 0;
    };
    foldAll = (view) => {
      let { state } = view, effects = [];
      for (let pos = 0; pos < state.doc.length; ) {
        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
        if (range)
          effects.push(foldEffect.of(range));
        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
      }
      if (effects.length)
        view.dispatch({ effects: maybeEnable(view.state, effects) });
      return !!effects.length;
    };
    unfoldAll = (view) => {
      let field = view.state.field(foldState, false);
      if (!field || !field.size)
        return false;
      let effects = [];
      field.between(0, view.state.doc.length, (from3, to) => {
        effects.push(unfoldEffect.of({ from: from3, to }));
      });
      view.dispatch({ effects });
      return true;
    };
    foldKeymap = [
      { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
      { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
      { key: "Ctrl-Alt-[", run: foldAll },
      { key: "Ctrl-Alt-]", run: unfoldAll }
    ];
    defaultConfig = {
      placeholderDOM: null,
      preparePlaceholder: null,
      placeholderText: "\u2026"
    };
    foldConfig = /* @__PURE__ */ Facet.define({
      combine(values2) {
        return combineConfig(values2, defaultConfig);
      }
    });
    foldWidget = /* @__PURE__ */ Decoration.replace({ widget: /* @__PURE__ */ new class extends WidgetType {
      toDOM(view) {
        return widgetToDOM(view, null);
      }
    }() });
    PreparedFoldWidget = class extends WidgetType {
      constructor(value) {
        super();
        this.value = value;
      }
      eq(other) {
        return this.value == other.value;
      }
      toDOM(view) {
        return widgetToDOM(view, this.value);
      }
    };
    foldGutterDefaults = {
      openText: "\u2304",
      closedText: "\u203A",
      markerDOM: null,
      domEventHandlers: {},
      foldingChanged: () => false
    };
    FoldMarker = class extends GutterMarker {
      constructor(config2, open) {
        super();
        this.config = config2;
        this.open = open;
      }
      eq(other) {
        return this.config == other.config && this.open == other.open;
      }
      toDOM(view) {
        if (this.config.markerDOM)
          return this.config.markerDOM(this.open);
        let span = document.createElement("span");
        span.textContent = this.open ? this.config.openText : this.config.closedText;
        span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
        return span;
      }
    };
    baseTheme$12 = /* @__PURE__ */ EditorView.baseTheme({
      ".cm-foldPlaceholder": {
        backgroundColor: "#eee",
        border: "1px solid #ddd",
        color: "#888",
        borderRadius: ".2em",
        margin: "0 1px",
        padding: "0 1px",
        cursor: "pointer"
      },
      ".cm-foldGutter span": {
        padding: "0 1px",
        cursor: "pointer"
      }
    });
    HighlightStyle = class _HighlightStyle {
      constructor(specs, options) {
        this.specs = specs;
        let modSpec;
        function def(spec) {
          let cls = StyleModule.newName();
          (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
          return cls;
        }
        const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
        const scopeOpt = options.scope;
        this.scope = scopeOpt instanceof Language ? (type7) => type7.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type7) => type7 == scopeOpt : void 0;
        this.style = tagHighlighter(specs.map((style2) => ({
          tag: style2.tag,
          class: style2.class || def(Object.assign({}, style2, { tag: null }))
        })), {
          all
        }).style;
        this.module = modSpec ? new StyleModule(modSpec) : null;
        this.themeType = options.themeType;
      }
      /**
      Create a highlighter style that associates the given styles to
      the given tags. The specs must be objects that hold a style tag
      or array of tags in their `tag` property, and either a single
      `class` property providing a static CSS class (for highlighter
      that rely on external styling), or a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
      set of CSS properties (which define the styling for those tags).
      
      The CSS rules created for a highlighter will be emitted in the
      order of the spec's properties. That means that for elements that
      have multiple tags associated with them, styles defined further
      down in the list will have a higher CSS precedence than styles
      defined earlier.
      */
      static define(specs, options) {
        return new _HighlightStyle(specs, options || {});
      }
    };
    highlighterFacet = /* @__PURE__ */ Facet.define();
    fallbackHighlighter = /* @__PURE__ */ Facet.define({
      combine(values2) {
        return values2.length ? [values2[0]] : null;
      }
    });
    TreeHighlighter = class {
      constructor(view) {
        this.markCache = /* @__PURE__ */ Object.create(null);
        this.tree = syntaxTree(view.state);
        this.decorations = this.buildDeco(view, getHighlighters(view.state));
        this.decoratedTo = view.viewport.to;
      }
      update(update) {
        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
        let styleChange = highlighters != getHighlighters(update.startState);
        let { viewport } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
        if (tree.length < viewport.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport.to) {
          this.decorations = this.decorations.map(update.changes);
          this.decoratedTo = decoratedToMapped;
        } else if (tree != this.tree || update.viewportChanged || styleChange) {
          this.tree = tree;
          this.decorations = this.buildDeco(update.view, highlighters);
          this.decoratedTo = viewport.to;
        }
      }
      buildDeco(view, highlighters) {
        if (!highlighters || !this.tree.length)
          return Decoration.none;
        let builder = new RangeSetBuilder();
        for (let { from: from3, to } of view.visibleRanges) {
          highlightTree(this.tree, highlighters, (from4, to2, style2) => {
            builder.add(from4, to2, this.markCache[style2] || (this.markCache[style2] = Decoration.mark({ class: style2 })));
          }, from3, to);
        }
        return builder.finish();
      }
    };
    treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
      decorations: (v) => v.decorations
    }));
    defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
      {
        tag: tags.meta,
        color: "#404740"
      },
      {
        tag: tags.link,
        textDecoration: "underline"
      },
      {
        tag: tags.heading,
        textDecoration: "underline",
        fontWeight: "bold"
      },
      {
        tag: tags.emphasis,
        fontStyle: "italic"
      },
      {
        tag: tags.strong,
        fontWeight: "bold"
      },
      {
        tag: tags.strikethrough,
        textDecoration: "line-through"
      },
      {
        tag: tags.keyword,
        color: "#708"
      },
      {
        tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
        color: "#219"
      },
      {
        tag: [tags.literal, tags.inserted],
        color: "#164"
      },
      {
        tag: [tags.string, tags.deleted],
        color: "#a11"
      },
      {
        tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
        color: "#e40"
      },
      {
        tag: /* @__PURE__ */ tags.definition(tags.variableName),
        color: "#00f"
      },
      {
        tag: /* @__PURE__ */ tags.local(tags.variableName),
        color: "#30a"
      },
      {
        tag: [tags.typeName, tags.namespace],
        color: "#085"
      },
      {
        tag: tags.className,
        color: "#167"
      },
      {
        tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
        color: "#256"
      },
      {
        tag: /* @__PURE__ */ tags.definition(tags.propertyName),
        color: "#00c"
      },
      {
        tag: tags.comment,
        color: "#940"
      },
      {
        tag: tags.invalid,
        color: "#f00"
      }
    ]);
    baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
      "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
      "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
    });
    DefaultScanDist = 1e4;
    DefaultBrackets = "()[]{}";
    bracketMatchingConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          afterCursor: true,
          brackets: DefaultBrackets,
          maxScanDistance: DefaultScanDist,
          renderMatch: defaultRenderMatch
        });
      }
    });
    matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" });
    nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
    bracketMatchingState = /* @__PURE__ */ StateField.define({
      create() {
        return Decoration.none;
      },
      update(deco, tr) {
        if (!tr.docChanged && !tr.selection)
          return deco;
        let decorations2 = [];
        let config2 = tr.state.facet(bracketMatchingConfig);
        for (let range of tr.state.selection.ranges) {
          if (!range.empty)
            continue;
          let match2 = matchBrackets(tr.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr.state, range.head, 1, config2) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config2));
          if (match2)
            decorations2 = decorations2.concat(config2.renderMatch(match2, tr.state));
        }
        return Decoration.set(decorations2, true);
      },
      provide: (f) => EditorView.decorations.from(f)
    });
    bracketMatchingUnique = [
      bracketMatchingState,
      baseTheme2
    ];
    bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
    StringStream = class {
      /**
      Create a stream.
      */
      constructor(string3, tabSize, indentUnit2, overrideIndent) {
        this.string = string3;
        this.tabSize = tabSize;
        this.indentUnit = indentUnit2;
        this.overrideIndent = overrideIndent;
        this.pos = 0;
        this.start = 0;
        this.lastColumnPos = 0;
        this.lastColumnValue = 0;
      }
      /**
      True if we are at the end of the line.
      */
      eol() {
        return this.pos >= this.string.length;
      }
      /**
      True if we are at the start of the line.
      */
      sol() {
        return this.pos == 0;
      }
      /**
      Get the next code unit after the current position, or undefined
      if we're at the end of the line.
      */
      peek() {
        return this.string.charAt(this.pos) || void 0;
      }
      /**
      Read the next code unit and advance `this.pos`.
      */
      next() {
        if (this.pos < this.string.length)
          return this.string.charAt(this.pos++);
      }
      /**
      Match the next character against the given string, regular
      expression, or predicate. Consume and return it if it matches.
      */
      eat(match2) {
        let ch2 = this.string.charAt(this.pos);
        let ok;
        if (typeof match2 == "string")
          ok = ch2 == match2;
        else
          ok = ch2 && (match2 instanceof RegExp ? match2.test(ch2) : match2(ch2));
        if (ok) {
          ++this.pos;
          return ch2;
        }
      }
      /**
      Continue matching characters that match the given string,
      regular expression, or predicate function. Return true if any
      characters were consumed.
      */
      eatWhile(match2) {
        let start2 = this.pos;
        while (this.eat(match2)) {
        }
        return this.pos > start2;
      }
      /**
      Consume whitespace ahead of `this.pos`. Return true if any was
      found.
      */
      eatSpace() {
        let start2 = this.pos;
        while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
          ++this.pos;
        return this.pos > start2;
      }
      /**
      Move to the end of the line.
      */
      skipToEnd() {
        this.pos = this.string.length;
      }
      /**
      Move to directly before the given character, if found on the
      current line.
      */
      skipTo(ch2) {
        let found = this.string.indexOf(ch2, this.pos);
        if (found > -1) {
          this.pos = found;
          return true;
        }
      }
      /**
      Move back `n` characters.
      */
      backUp(n) {
        this.pos -= n;
      }
      /**
      Get the column position at `this.pos`.
      */
      column() {
        if (this.lastColumnPos < this.start) {
          this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
          this.lastColumnPos = this.start;
        }
        return this.lastColumnValue;
      }
      /**
      Get the indentation column of the current line.
      */
      indentation() {
        var _a2;
        return (_a2 = this.overrideIndent) !== null && _a2 !== void 0 ? _a2 : countCol(this.string, null, this.tabSize);
      }
      /**
      Match the input against the given string or regular expression
      (which should start with a `^`). Return true or the regexp match
      if it matches.
      
      Unless `consume` is set to `false`, this will move `this.pos`
      past the matched text.
      
      When matching a string `caseInsensitive` can be set to true to
      make the match case-insensitive.
      */
      match(pattern, consume, caseInsensitive) {
        if (typeof pattern == "string") {
          let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
          let substr = this.string.substr(this.pos, pattern.length);
          if (cased(substr) == cased(pattern)) {
            if (consume !== false)
              this.pos += pattern.length;
            return true;
          } else
            return null;
        } else {
          let match2 = this.string.slice(this.pos).match(pattern);
          if (match2 && match2.index > 0)
            return null;
          if (match2 && consume !== false)
            this.pos += match2[0].length;
          return match2;
        }
      }
      /**
      Get the current token.
      */
      current() {
        return this.string.slice(this.start, this.pos);
      }
    };
    IndentedFrom = /* @__PURE__ */ new WeakMap();
    StreamLanguage = class _StreamLanguage extends Language {
      constructor(parser29) {
        let data2 = defineLanguageFacet(parser29.languageData);
        let p = fullParser(parser29), self2;
        let impl = new class extends Parser {
          createParse(input, fragments, ranges) {
            return new Parse(self2, input, fragments, ranges);
          }
        }();
        super(data2, impl, [], parser29.name);
        this.topNode = docID(data2, this);
        self2 = this;
        this.streamParser = p;
        this.stateAfter = new NodeProp({ perNode: true });
        this.tokenTable = parser29.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
      }
      /**
      Define a stream language.
      */
      static define(spec) {
        return new _StreamLanguage(spec);
      }
      /**
      @internal
      */
      getIndent(cx2) {
        let from3 = void 0;
        let { overrideIndentation } = cx2.options;
        if (overrideIndentation) {
          from3 = IndentedFrom.get(cx2.state);
          if (from3 != null && from3 < cx2.pos - 1e4)
            from3 = void 0;
        }
        let start2 = findState(this, cx2.node.tree, cx2.node.from, cx2.node.from, from3 !== null && from3 !== void 0 ? from3 : cx2.pos), statePos, state;
        if (start2) {
          state = start2.state;
          statePos = start2.pos + 1;
        } else {
          state = this.streamParser.startState(cx2.unit);
          statePos = cx2.node.from;
        }
        if (cx2.pos - statePos > 1e4)
          return null;
        while (statePos < cx2.pos) {
          let line2 = cx2.state.doc.lineAt(statePos), end2 = Math.min(cx2.pos, line2.to);
          if (line2.length) {
            let indentation5 = overrideIndentation ? overrideIndentation(line2.from) : -1;
            let stream = new StringStream(line2.text, cx2.state.tabSize, cx2.unit, indentation5 < 0 ? void 0 : indentation5);
            while (stream.pos < end2 - line2.from)
              readToken(this.streamParser.token, stream, state);
          } else {
            this.streamParser.blankLine(state, cx2.unit);
          }
          if (end2 == cx2.pos)
            break;
          statePos = line2.to + 1;
        }
        let line = cx2.lineAt(cx2.pos);
        if (overrideIndentation && from3 == null)
          IndentedFrom.set(cx2.state, line.from);
        return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx2);
      }
      get allowsNesting() {
        return false;
      }
    };
    Parse = class {
      constructor(lang, input, fragments, ranges) {
        this.lang = lang;
        this.input = input;
        this.fragments = fragments;
        this.ranges = ranges;
        this.stoppedAt = null;
        this.chunks = [];
        this.chunkPos = [];
        this.chunk = [];
        this.chunkReused = void 0;
        this.rangeIndex = 0;
        this.to = ranges[ranges.length - 1].to;
        let context = ParseContext.get(), from3 = ranges[0].from;
        let { state, tree } = findStartInFragments(lang, fragments, from3, this.to, context === null || context === void 0 ? void 0 : context.state);
        this.state = state;
        this.parsedPos = this.chunkStart = from3 + tree.length;
        for (let i = 0; i < tree.children.length; i++) {
          this.chunks.push(tree.children[i]);
          this.chunkPos.push(tree.positions[i]);
        }
        if (context && this.parsedPos < context.viewport.from - 1e5 && ranges.some((r2) => r2.from <= context.viewport.from && r2.to >= context.viewport.from)) {
          this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
          context.skipUntilInView(this.parsedPos, context.viewport.from);
          this.parsedPos = context.viewport.from;
        }
        this.moveRangeIndex();
      }
      advance() {
        let context = ParseContext.get();
        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
        let end2 = Math.min(
          parseEnd,
          this.chunkStart + 2048
          /* C.ChunkSize */
        );
        if (context)
          end2 = Math.min(end2, context.viewport.to);
        while (this.parsedPos < end2)
          this.parseLine(context);
        if (this.chunkStart < this.parsedPos)
          this.finishChunk();
        if (this.parsedPos >= parseEnd)
          return this.finish();
        if (context && this.parsedPos >= context.viewport.to) {
          context.skipUntilInView(this.parsedPos, parseEnd);
          return this.finish();
        }
        return null;
      }
      stopAt(pos) {
        this.stoppedAt = pos;
      }
      lineAfter(pos) {
        let chunk = this.input.chunk(pos);
        if (!this.input.lineChunks) {
          let eol2 = chunk.indexOf("\n");
          if (eol2 > -1)
            chunk = chunk.slice(0, eol2);
        } else if (chunk == "\n") {
          chunk = "";
        }
        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
      }
      nextLine() {
        let from3 = this.parsedPos, line = this.lineAfter(from3), end2 = from3 + line.length;
        for (let index = this.rangeIndex; ; ) {
          let rangeEnd2 = this.ranges[index].to;
          if (rangeEnd2 >= end2)
            break;
          line = line.slice(0, rangeEnd2 - (end2 - line.length));
          index++;
          if (index == this.ranges.length)
            break;
          let rangeStart = this.ranges[index].from;
          let after = this.lineAfter(rangeStart);
          line += after;
          end2 = rangeStart + after.length;
        }
        return { line, end: end2 };
      }
      skipGapsTo(pos, offset, side) {
        for (; ; ) {
          let end2 = this.ranges[this.rangeIndex].to, offPos = pos + offset;
          if (side > 0 ? end2 > offPos : end2 >= offPos)
            break;
          let start2 = this.ranges[++this.rangeIndex].from;
          offset += start2 - end2;
        }
        return offset;
      }
      moveRangeIndex() {
        while (this.ranges[this.rangeIndex].to < this.parsedPos)
          this.rangeIndex++;
      }
      emitToken(id3, from3, to, offset) {
        let size = 4;
        if (this.ranges.length > 1) {
          offset = this.skipGapsTo(from3, offset, 1);
          from3 += offset;
          let len0 = this.chunk.length;
          offset = this.skipGapsTo(to, offset, -1);
          to += offset;
          size += this.chunk.length - len0;
        }
        let last = this.chunk.length - 4;
        if (this.lang.streamParser.mergeTokens && size == 4 && last >= 0 && this.chunk[last] == id3 && this.chunk[last + 2] == from3)
          this.chunk[last + 2] = to;
        else
          this.chunk.push(id3, from3, to, size);
        return offset;
      }
      parseLine(context) {
        let { line, end: end2 } = this.nextLine(), offset = 0, { streamParser } = this.lang;
        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
        if (stream.eol()) {
          streamParser.blankLine(this.state, stream.indentUnit);
        } else {
          while (!stream.eol()) {
            let token = readToken(streamParser.token, stream, this.state);
            if (token)
              offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, offset);
            if (stream.start > 1e4)
              break;
          }
        }
        this.parsedPos = end2;
        this.moveRangeIndex();
        if (this.parsedPos < this.to)
          this.parsedPos++;
      }
      finishChunk() {
        let tree = Tree.build({
          buffer: this.chunk,
          start: this.chunkStart,
          length: this.parsedPos - this.chunkStart,
          nodeSet,
          topID: 0,
          maxBufferLength: 2048,
          reused: this.chunkReused
        });
        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
        this.chunks.push(tree);
        this.chunkPos.push(this.chunkStart - this.ranges[0].from);
        this.chunk = [];
        this.chunkReused = void 0;
        this.chunkStart = this.parsedPos;
      }
      finish() {
        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
      }
    };
    noTokens = /* @__PURE__ */ Object.create(null);
    typeArray = [NodeType.none];
    nodeSet = /* @__PURE__ */ new NodeSet(typeArray);
    warned = [];
    byTag = /* @__PURE__ */ Object.create(null);
    defaultTable = /* @__PURE__ */ Object.create(null);
    for (let [legacyName, name2] of [
      ["variable", "variableName"],
      ["variable-2", "variableName.special"],
      ["string-2", "string.special"],
      ["def", "variableName.definition"],
      ["tag", "tagName"],
      ["attribute", "attributeName"],
      ["type", "typeName"],
      ["builtin", "variableName.standard"],
      ["qualifier", "modifier"],
      ["error", "invalid"],
      ["header", "heading"],
      ["property", "propertyName"]
    ])
      defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
    TokenTable = class {
      constructor(extra) {
        this.extra = extra;
        this.table = Object.assign(/* @__PURE__ */ Object.create(null), defaultTable);
      }
      resolve(tag2) {
        return !tag2 ? 0 : this.table[tag2] || (this.table[tag2] = createTokenType(this.extra, tag2));
      }
    };
    defaultTokenTable = /* @__PURE__ */ new TokenTable(noTokens);
    marks = {
      rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
      ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
      auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
    };
  }
});

// ../../node_modules/@lezer/lr/dist/index.js
function decodeArray(input, Type3 = Uint16Array) {
  if (typeof input != "string")
    return input;
  let array2 = null;
  for (let pos = 0, out = 0; pos < input.length; ) {
    let value = 0;
    for (; ; ) {
      let next2 = input.charCodeAt(pos++), stop = false;
      if (next2 == 126) {
        value = 65535;
        break;
      }
      if (next2 >= 92)
        next2--;
      if (next2 >= 34)
        next2--;
      let digit = next2 - 32;
      if (digit >= 46) {
        digit -= 46;
        stop = true;
      }
      value += digit;
      if (stop)
        break;
      value *= 46;
    }
    if (array2)
      array2[out++] = value;
    else
      array2 = new Type3(value);
  }
  return array2;
}
function readToken2(data2, input, stack, group, precTable, precOffset) {
  let state = 0, groupMask = 1 << group, { dialect: dialect2 } = stack.p.parser;
  scan: for (; ; ) {
    if ((groupMask & data2[state]) == 0)
      break;
    let accEnd = data2[state + 1];
    for (let i = state + 3; i < accEnd; i += 2)
      if ((data2[i + 1] & groupMask) > 0) {
        let term = data2[i];
        if (dialect2.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
          input.acceptToken(term);
          break;
        }
      }
    let next2 = input.next, low = 0, high = data2[state + 2];
    if (input.next < 0 && high > low && data2[accEnd + high * 3 - 3] == 65535) {
      state = data2[accEnd + high * 3 - 1];
      continue scan;
    }
    for (; low < high; ) {
      let mid = low + high >> 1;
      let index = accEnd + mid + (mid << 1);
      let from3 = data2[index], to = data2[index + 1] || 65536;
      if (next2 < from3)
        high = mid;
      else if (next2 >= to)
        low = mid + 1;
      else {
        state = data2[index + 2];
        input.advance();
        continue scan;
      }
    }
    break;
  }
}
function findOffset(data2, start2, term) {
  for (let i = start2, next2; (next2 = data2[i]) != 65535; i++)
    if (next2 == term)
      return i - start2;
  return -1;
}
function overrides(token, prev, tableData, tableOffset) {
  let iPrev = findOffset(tableData, tableOffset, prev);
  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
}
function cutAt(tree, pos, side) {
  let cursor2 = tree.cursor(IterMode.IncludeAnonymous);
  cursor2.moveTo(pos);
  for (; ; ) {
    if (!(side < 0 ? cursor2.childBefore(pos) : cursor2.childAfter(pos)))
      for (; ; ) {
        if ((side < 0 ? cursor2.to < pos : cursor2.from > pos) && !cursor2.type.isError)
          return side < 0 ? Math.max(0, Math.min(
            cursor2.to - 1,
            pos - 25
            /* Lookahead.Margin */
          )) : Math.min(tree.length, Math.max(
            cursor2.from + 1,
            pos + 25
            /* Lookahead.Margin */
          ));
        if (side < 0 ? cursor2.prevSibling() : cursor2.nextSibling())
          break;
        if (!cursor2.parent())
          return side < 0 ? 0 : tree.length;
      }
  }
}
function pushStackDedup(stack, newStacks) {
  for (let i = 0; i < newStacks.length; i++) {
    let other = newStacks[i];
    if (other.pos == stack.pos && other.sameState(stack)) {
      if (newStacks[i].score < stack.score)
        newStacks[i] = stack;
      return;
    }
  }
  newStacks.push(stack);
}
function pair(data2, off) {
  return data2[off] | data2[off + 1] << 16;
}
function findFinished(stacks) {
  let best = null;
  for (let stack of stacks) {
    let stopped = stack.p.stoppedAt;
    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
      stack.state,
      2
      /* StateFlag.Accepting */
    ) && (!best || best.score < stack.score))
      best = stack;
  }
  return best;
}
function getSpecializer(spec) {
  if (spec.external) {
    let mask = spec.extend ? 1 : 0;
    return (value, stack) => spec.external(value, stack) << 1 | mask;
  }
  return spec.get;
}
var Stack, StackContext, SimulatedStack, StackBufferCursor, CachedToken, nullToken, InputStream, TokenGroup, LocalTokenGroup, ExternalTokenizer, verbose, stackIDs, FragmentCursor2, TokenCache, Parse2, Dialect, id, ContextTracker, LRParser;
var init_dist6 = __esm({
  "../../node_modules/@lezer/lr/dist/index.js"() {
    init_dist();
    Stack = class _Stack {
      /**
      @internal
      */
      constructor(p, stack, state, reducePos, pos, score2, buffer, bufferBase, curContext, lookAhead = 0, parent) {
        this.p = p;
        this.stack = stack;
        this.state = state;
        this.reducePos = reducePos;
        this.pos = pos;
        this.score = score2;
        this.buffer = buffer;
        this.bufferBase = bufferBase;
        this.curContext = curContext;
        this.lookAhead = lookAhead;
        this.parent = parent;
      }
      /**
      @internal
      */
      toString() {
        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
      }
      // Start an empty stack
      /**
      @internal
      */
      static start(p, state, pos = 0) {
        let cx2 = p.parser.context;
        return new _Stack(p, [], state, pos, pos, 0, [], 0, cx2 ? new StackContext(cx2, cx2.start) : null, 0, null);
      }
      /**
      The stack's current [context](#lr.ContextTracker) value, if
      any. Its type will depend on the context tracker's type
      parameter, or it will be `null` if there is no context
      tracker.
      */
      get context() {
        return this.curContext ? this.curContext.context : null;
      }
      // Push a state onto the stack, tracking its start position as well
      // as the buffer base at that point.
      /**
      @internal
      */
      pushState(state, start2) {
        this.stack.push(this.state, start2, this.bufferBase + this.buffer.length);
        this.state = state;
      }
      // Apply a reduce action
      /**
      @internal
      */
      reduce(action) {
        var _a2;
        let depth = action >> 19, type7 = action & 65535;
        let { parser: parser29 } = this.p;
        let lookaheadRecord = this.reducePos < this.pos - 25;
        if (lookaheadRecord)
          this.setLookAhead(this.pos);
        let dPrec = parser29.dynamicPrecedence(type7);
        if (dPrec)
          this.score += dPrec;
        if (depth == 0) {
          this.pushState(parser29.getGoto(this.state, type7, true), this.reducePos);
          if (type7 < parser29.minRepeatTerm)
            this.storeNode(type7, this.reducePos, this.reducePos, lookaheadRecord ? 8 : 4, true);
          this.reduceContext(type7, this.reducePos);
          return;
        }
        let base5 = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
        let start2 = base5 ? this.stack[base5 - 2] : this.p.ranges[0].from, size = this.reducePos - start2;
        if (size >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type7]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
          if (start2 == this.p.lastBigReductionStart) {
            this.p.bigReductionCount++;
            this.p.lastBigReductionSize = size;
          } else if (this.p.lastBigReductionSize < size) {
            this.p.bigReductionCount = 1;
            this.p.lastBigReductionStart = start2;
            this.p.lastBigReductionSize = size;
          }
        }
        let bufferBase = base5 ? this.stack[base5 - 1] : 0, count2 = this.bufferBase + this.buffer.length - bufferBase;
        if (type7 < parser29.minRepeatTerm || action & 131072) {
          let pos = parser29.stateFlag(
            this.state,
            1
            /* StateFlag.Skipped */
          ) ? this.pos : this.reducePos;
          this.storeNode(type7, start2, pos, count2 + 4, true);
        }
        if (action & 262144) {
          this.state = this.stack[base5];
        } else {
          let baseStateID = this.stack[base5 - 3];
          this.state = parser29.getGoto(baseStateID, type7, true);
        }
        while (this.stack.length > base5)
          this.stack.pop();
        this.reduceContext(type7, start2);
      }
      // Shift a value into the buffer
      /**
      @internal
      */
      storeNode(term, start2, end2, size = 4, mustSink = false) {
        if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
          let cur2 = this, top3 = this.buffer.length;
          if (top3 == 0 && cur2.parent) {
            top3 = cur2.bufferBase - cur2.parent.bufferBase;
            cur2 = cur2.parent;
          }
          if (top3 > 0 && cur2.buffer[top3 - 4] == 0 && cur2.buffer[top3 - 1] > -1) {
            if (start2 == end2)
              return;
            if (cur2.buffer[top3 - 2] >= start2) {
              cur2.buffer[top3 - 2] = end2;
              return;
            }
          }
        }
        if (!mustSink || this.pos == end2) {
          this.buffer.push(term, start2, end2, size);
        } else {
          let index = this.buffer.length;
          if (index > 0 && this.buffer[index - 4] != 0) {
            let mustMove = false;
            for (let scan = index; scan > 0 && this.buffer[scan - 2] > end2; scan -= 4) {
              if (this.buffer[scan - 1] >= 0) {
                mustMove = true;
                break;
              }
            }
            if (mustMove)
              while (index > 0 && this.buffer[index - 2] > end2) {
                this.buffer[index] = this.buffer[index - 4];
                this.buffer[index + 1] = this.buffer[index - 3];
                this.buffer[index + 2] = this.buffer[index - 2];
                this.buffer[index + 3] = this.buffer[index - 1];
                index -= 4;
                if (size > 4)
                  size -= 4;
              }
          }
          this.buffer[index] = term;
          this.buffer[index + 1] = start2;
          this.buffer[index + 2] = end2;
          this.buffer[index + 3] = size;
        }
      }
      // Apply a shift action
      /**
      @internal
      */
      shift(action, type7, start2, end2) {
        if (action & 131072) {
          this.pushState(action & 65535, this.pos);
        } else if ((action & 262144) == 0) {
          let nextState = action, { parser: parser29 } = this.p;
          if (end2 > this.pos || type7 <= parser29.maxNode) {
            this.pos = end2;
            if (!parser29.stateFlag(
              nextState,
              1
              /* StateFlag.Skipped */
            ))
              this.reducePos = end2;
          }
          this.pushState(nextState, start2);
          this.shiftContext(type7, start2);
          if (type7 <= parser29.maxNode)
            this.buffer.push(type7, start2, end2, 4);
        } else {
          this.pos = end2;
          this.shiftContext(type7, start2);
          if (type7 <= this.p.parser.maxNode)
            this.buffer.push(type7, start2, end2, 4);
        }
      }
      // Apply an action
      /**
      @internal
      */
      apply(action, next2, nextStart, nextEnd) {
        if (action & 65536)
          this.reduce(action);
        else
          this.shift(action, next2, nextStart, nextEnd);
      }
      // Add a prebuilt (reused) node into the buffer.
      /**
      @internal
      */
      useNode(value, next2) {
        let index = this.p.reused.length - 1;
        if (index < 0 || this.p.reused[index] != value) {
          this.p.reused.push(value);
          index++;
        }
        let start2 = this.pos;
        this.reducePos = this.pos = start2 + value.length;
        this.pushState(next2, start2);
        this.buffer.push(
          index,
          start2,
          this.reducePos,
          -1
          /* size == -1 means this is a reused value */
        );
        if (this.curContext)
          this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
      }
      // Split the stack. Due to the buffer sharing and the fact
      // that `this.stack` tends to stay quite shallow, this isn't very
      // expensive.
      /**
      @internal
      */
      split() {
        let parent = this;
        let off = parent.buffer.length;
        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
          off -= 4;
        let buffer = parent.buffer.slice(off), base5 = parent.bufferBase + off;
        while (parent && base5 == parent.bufferBase)
          parent = parent.parent;
        return new _Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base5, this.curContext, this.lookAhead, parent);
      }
      // Try to recover from an error by 'deleting' (ignoring) one token.
      /**
      @internal
      */
      recoverByDelete(next2, nextEnd) {
        let isNode = next2 <= this.p.parser.maxNode;
        if (isNode)
          this.storeNode(next2, this.pos, nextEnd, 4);
        this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
        this.pos = this.reducePos = nextEnd;
        this.score -= 190;
      }
      /**
      Check if the given term would be able to be shifted (optionally
      after some reductions) on this stack. This can be useful for
      external tokenizers that want to make sure they only provide a
      given token when it applies.
      */
      canShift(term) {
        for (let sim = new SimulatedStack(this); ; ) {
          let action = this.p.parser.stateSlot(
            sim.state,
            4
            /* ParseState.DefaultReduce */
          ) || this.p.parser.hasAction(sim.state, term);
          if (action == 0)
            return false;
          if ((action & 65536) == 0)
            return true;
          sim.reduce(action);
        }
      }
      // Apply up to Recover.MaxNext recovery actions that conceptually
      // inserts some missing token or rule.
      /**
      @internal
      */
      recoverByInsert(next2) {
        if (this.stack.length >= 300)
          return [];
        let nextStates = this.p.parser.nextStates(this.state);
        if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
          let best = [];
          for (let i = 0, s; i < nextStates.length; i += 2) {
            if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next2))
              best.push(nextStates[i], s);
          }
          if (this.stack.length < 120)
            for (let i = 0; best.length < 4 << 1 && i < nextStates.length; i += 2) {
              let s = nextStates[i + 1];
              if (!best.some((v, i2) => i2 & 1 && v == s))
                best.push(nextStates[i], s);
            }
          nextStates = best;
        }
        let result = [];
        for (let i = 0; i < nextStates.length && result.length < 4; i += 2) {
          let s = nextStates[i + 1];
          if (s == this.state)
            continue;
          let stack = this.split();
          stack.pushState(s, this.pos);
          stack.storeNode(0, stack.pos, stack.pos, 4, true);
          stack.shiftContext(nextStates[i], this.pos);
          stack.reducePos = this.pos;
          stack.score -= 200;
          result.push(stack);
        }
        return result;
      }
      // Force a reduce, if possible. Return false if that can't
      // be done.
      /**
      @internal
      */
      forceReduce() {
        let { parser: parser29 } = this.p;
        let reduce = parser29.stateSlot(
          this.state,
          5
          /* ParseState.ForcedReduce */
        );
        if ((reduce & 65536) == 0)
          return false;
        if (!parser29.validAction(this.state, reduce)) {
          let depth = reduce >> 19, term = reduce & 65535;
          let target = this.stack.length - depth * 3;
          if (target < 0 || parser29.getGoto(this.stack[target], term, false) < 0) {
            let backup = this.findForcedReduction();
            if (backup == null)
              return false;
            reduce = backup;
          }
          this.storeNode(0, this.pos, this.pos, 4, true);
          this.score -= 100;
        }
        this.reducePos = this.pos;
        this.reduce(reduce);
        return true;
      }
      /**
      Try to scan through the automaton to find some kind of reduction
      that can be applied. Used when the regular ForcedReduce field
      isn't a valid action. @internal
      */
      findForcedReduction() {
        let { parser: parser29 } = this.p, seen = [];
        let explore = (state, depth) => {
          if (seen.includes(state))
            return;
          seen.push(state);
          return parser29.allActions(state, (action) => {
            if (action & (262144 | 131072)) ;
            else if (action & 65536) {
              let rDepth = (action >> 19) - depth;
              if (rDepth > 1) {
                let term = action & 65535, target = this.stack.length - rDepth * 3;
                if (target >= 0 && parser29.getGoto(this.stack[target], term, false) >= 0)
                  return rDepth << 19 | 65536 | term;
              }
            } else {
              let found = explore(action, depth + 1);
              if (found != null)
                return found;
            }
          });
        };
        return explore(this.state, 0);
      }
      /**
      @internal
      */
      forceAll() {
        while (!this.p.parser.stateFlag(
          this.state,
          2
          /* StateFlag.Accepting */
        )) {
          if (!this.forceReduce()) {
            this.storeNode(0, this.pos, this.pos, 4, true);
            break;
          }
        }
        return this;
      }
      /**
      Check whether this state has no further actions (assumed to be a direct descendant of the
      top state, since any other states must be able to continue
      somehow). @internal
      */
      get deadEnd() {
        if (this.stack.length != 3)
          return false;
        let { parser: parser29 } = this.p;
        return parser29.data[parser29.stateSlot(
          this.state,
          1
          /* ParseState.Actions */
        )] == 65535 && !parser29.stateSlot(
          this.state,
          4
          /* ParseState.DefaultReduce */
        );
      }
      /**
      Restart the stack (put it back in its start state). Only safe
      when this.stack.length == 3 (state is directly below the top
      state). @internal
      */
      restart() {
        this.storeNode(0, this.pos, this.pos, 4, true);
        this.state = this.stack[0];
        this.stack.length = 0;
      }
      /**
      @internal
      */
      sameState(other) {
        if (this.state != other.state || this.stack.length != other.stack.length)
          return false;
        for (let i = 0; i < this.stack.length; i += 3)
          if (this.stack[i] != other.stack[i])
            return false;
        return true;
      }
      /**
      Get the parser used by this stack.
      */
      get parser() {
        return this.p.parser;
      }
      /**
      Test whether a given dialect (by numeric ID, as exported from
      the terms file) is enabled.
      */
      dialectEnabled(dialectID) {
        return this.p.parser.dialect.flags[dialectID];
      }
      shiftContext(term, start2) {
        if (this.curContext)
          this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start2)));
      }
      reduceContext(term, start2) {
        if (this.curContext)
          this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start2)));
      }
      /**
      @internal
      */
      emitContext() {
        let last = this.buffer.length - 1;
        if (last < 0 || this.buffer[last] != -3)
          this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
      }
      /**
      @internal
      */
      emitLookAhead() {
        let last = this.buffer.length - 1;
        if (last < 0 || this.buffer[last] != -4)
          this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
      }
      updateContext(context) {
        if (context != this.curContext.context) {
          let newCx = new StackContext(this.curContext.tracker, context);
          if (newCx.hash != this.curContext.hash)
            this.emitContext();
          this.curContext = newCx;
        }
      }
      /**
      @internal
      */
      setLookAhead(lookAhead) {
        if (lookAhead > this.lookAhead) {
          this.emitLookAhead();
          this.lookAhead = lookAhead;
        }
      }
      /**
      @internal
      */
      close() {
        if (this.curContext && this.curContext.tracker.strict)
          this.emitContext();
        if (this.lookAhead > 0)
          this.emitLookAhead();
      }
    };
    StackContext = class {
      constructor(tracker, context) {
        this.tracker = tracker;
        this.context = context;
        this.hash = tracker.strict ? tracker.hash(context) : 0;
      }
    };
    SimulatedStack = class {
      constructor(start2) {
        this.start = start2;
        this.state = start2.state;
        this.stack = start2.stack;
        this.base = this.stack.length;
      }
      reduce(action) {
        let term = action & 65535, depth = action >> 19;
        if (depth == 0) {
          if (this.stack == this.start.stack)
            this.stack = this.stack.slice();
          this.stack.push(this.state, 0, 0);
          this.base += 3;
        } else {
          this.base -= (depth - 1) * 3;
        }
        let goto2 = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
        this.state = goto2;
      }
    };
    StackBufferCursor = class _StackBufferCursor {
      constructor(stack, pos, index) {
        this.stack = stack;
        this.pos = pos;
        this.index = index;
        this.buffer = stack.buffer;
        if (this.index == 0)
          this.maybeNext();
      }
      static create(stack, pos = stack.bufferBase + stack.buffer.length) {
        return new _StackBufferCursor(stack, pos, pos - stack.bufferBase);
      }
      maybeNext() {
        let next2 = this.stack.parent;
        if (next2 != null) {
          this.index = this.stack.bufferBase - next2.bufferBase;
          this.stack = next2;
          this.buffer = next2.buffer;
        }
      }
      get id() {
        return this.buffer[this.index - 4];
      }
      get start() {
        return this.buffer[this.index - 3];
      }
      get end() {
        return this.buffer[this.index - 2];
      }
      get size() {
        return this.buffer[this.index - 1];
      }
      next() {
        this.index -= 4;
        this.pos -= 4;
        if (this.index == 0)
          this.maybeNext();
      }
      fork() {
        return new _StackBufferCursor(this.stack, this.pos, this.index);
      }
    };
    CachedToken = class {
      constructor() {
        this.start = -1;
        this.value = -1;
        this.end = -1;
        this.extended = -1;
        this.lookAhead = 0;
        this.mask = 0;
        this.context = 0;
      }
    };
    nullToken = new CachedToken();
    InputStream = class {
      /**
      @internal
      */
      constructor(input, ranges) {
        this.input = input;
        this.ranges = ranges;
        this.chunk = "";
        this.chunkOff = 0;
        this.chunk2 = "";
        this.chunk2Pos = 0;
        this.next = -1;
        this.token = nullToken;
        this.rangeIndex = 0;
        this.pos = this.chunkPos = ranges[0].from;
        this.range = ranges[0];
        this.end = ranges[ranges.length - 1].to;
        this.readNext();
      }
      /**
      @internal
      */
      resolveOffset(offset, assoc) {
        let range = this.range, index = this.rangeIndex;
        let pos = this.pos + offset;
        while (pos < range.from) {
          if (!index)
            return null;
          let next2 = this.ranges[--index];
          pos -= range.from - next2.to;
          range = next2;
        }
        while (assoc < 0 ? pos > range.to : pos >= range.to) {
          if (index == this.ranges.length - 1)
            return null;
          let next2 = this.ranges[++index];
          pos += next2.from - range.to;
          range = next2;
        }
        return pos;
      }
      /**
      @internal
      */
      clipPos(pos) {
        if (pos >= this.range.from && pos < this.range.to)
          return pos;
        for (let range of this.ranges)
          if (range.to > pos)
            return Math.max(pos, range.from);
        return this.end;
      }
      /**
      Look at a code unit near the stream position. `.peek(0)` equals
      `.next`, `.peek(-1)` gives you the previous character, and so
      on.
      
      Note that looking around during tokenizing creates dependencies
      on potentially far-away content, which may reduce the
      effectiveness incremental parsing—when looking forward—or even
      cause invalid reparses when looking backward more than 25 code
      units, since the library does not track lookbehind.
      */
      peek(offset) {
        let idx = this.chunkOff + offset, pos, result;
        if (idx >= 0 && idx < this.chunk.length) {
          pos = this.pos + offset;
          result = this.chunk.charCodeAt(idx);
        } else {
          let resolved = this.resolveOffset(offset, 1);
          if (resolved == null)
            return -1;
          pos = resolved;
          if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
            result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
          } else {
            let i = this.rangeIndex, range = this.range;
            while (range.to <= pos)
              range = this.ranges[++i];
            this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
            if (pos + this.chunk2.length > range.to)
              this.chunk2 = this.chunk2.slice(0, range.to - pos);
            result = this.chunk2.charCodeAt(0);
          }
        }
        if (pos >= this.token.lookAhead)
          this.token.lookAhead = pos + 1;
        return result;
      }
      /**
      Accept a token. By default, the end of the token is set to the
      current stream position, but you can pass an offset (relative to
      the stream position) to change that.
      */
      acceptToken(token, endOffset = 0) {
        let end2 = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
        if (end2 == null || end2 < this.token.start)
          throw new RangeError("Token end out of bounds");
        this.token.value = token;
        this.token.end = end2;
      }
      /**
      Accept a token ending at a specific given position.
      */
      acceptTokenTo(token, endPos) {
        this.token.value = token;
        this.token.end = endPos;
      }
      getChunk() {
        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
          let { chunk, chunkPos } = this;
          this.chunk = this.chunk2;
          this.chunkPos = this.chunk2Pos;
          this.chunk2 = chunk;
          this.chunk2Pos = chunkPos;
          this.chunkOff = this.pos - this.chunkPos;
        } else {
          this.chunk2 = this.chunk;
          this.chunk2Pos = this.chunkPos;
          let nextChunk = this.input.chunk(this.pos);
          let end2 = this.pos + nextChunk.length;
          this.chunk = end2 > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
          this.chunkPos = this.pos;
          this.chunkOff = 0;
        }
      }
      readNext() {
        if (this.chunkOff >= this.chunk.length) {
          this.getChunk();
          if (this.chunkOff == this.chunk.length)
            return this.next = -1;
        }
        return this.next = this.chunk.charCodeAt(this.chunkOff);
      }
      /**
      Move the stream forward N (defaults to 1) code units. Returns
      the new value of [`next`](#lr.InputStream.next).
      */
      advance(n = 1) {
        this.chunkOff += n;
        while (this.pos + n >= this.range.to) {
          if (this.rangeIndex == this.ranges.length - 1)
            return this.setDone();
          n -= this.range.to - this.pos;
          this.range = this.ranges[++this.rangeIndex];
          this.pos = this.range.from;
        }
        this.pos += n;
        if (this.pos >= this.token.lookAhead)
          this.token.lookAhead = this.pos + 1;
        return this.readNext();
      }
      setDone() {
        this.pos = this.chunkPos = this.end;
        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
        this.chunk = "";
        return this.next = -1;
      }
      /**
      @internal
      */
      reset(pos, token) {
        if (token) {
          this.token = token;
          token.start = pos;
          token.lookAhead = pos + 1;
          token.value = token.extended = -1;
        } else {
          this.token = nullToken;
        }
        if (this.pos != pos) {
          this.pos = pos;
          if (pos == this.end) {
            this.setDone();
            return this;
          }
          while (pos < this.range.from)
            this.range = this.ranges[--this.rangeIndex];
          while (pos >= this.range.to)
            this.range = this.ranges[++this.rangeIndex];
          if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
            this.chunkOff = pos - this.chunkPos;
          } else {
            this.chunk = "";
            this.chunkOff = 0;
          }
          this.readNext();
        }
        return this;
      }
      /**
      @internal
      */
      read(from3, to) {
        if (from3 >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
          return this.chunk.slice(from3 - this.chunkPos, to - this.chunkPos);
        if (from3 >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
          return this.chunk2.slice(from3 - this.chunk2Pos, to - this.chunk2Pos);
        if (from3 >= this.range.from && to <= this.range.to)
          return this.input.read(from3, to);
        let result = "";
        for (let r2 of this.ranges) {
          if (r2.from >= to)
            break;
          if (r2.to > from3)
            result += this.input.read(Math.max(r2.from, from3), Math.min(r2.to, to));
        }
        return result;
      }
    };
    TokenGroup = class {
      constructor(data2, id3) {
        this.data = data2;
        this.id = id3;
      }
      token(input, stack) {
        let { parser: parser29 } = stack.p;
        readToken2(this.data, input, stack, this.id, parser29.data, parser29.tokenPrecTable);
      }
    };
    TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    LocalTokenGroup = class {
      constructor(data2, precTable, elseToken) {
        this.precTable = precTable;
        this.elseToken = elseToken;
        this.data = typeof data2 == "string" ? decodeArray(data2) : data2;
      }
      token(input, stack) {
        let start2 = input.pos, skipped = 0;
        for (; ; ) {
          let atEof = input.next < 0, nextPos = input.resolveOffset(1, 1);
          readToken2(this.data, input, stack, 0, this.data, this.precTable);
          if (input.token.value > -1)
            break;
          if (this.elseToken == null)
            return;
          if (!atEof)
            skipped++;
          if (nextPos == null)
            break;
          input.reset(nextPos, input.token);
        }
        if (skipped) {
          input.reset(start2, input.token);
          input.acceptToken(this.elseToken, skipped);
        }
      }
    };
    LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
    ExternalTokenizer = class {
      /**
      Create a tokenizer. The first argument is the function that,
      given an input stream, scans for the types of tokens it
      recognizes at the stream's position, and calls
      [`acceptToken`](#lr.InputStream.acceptToken) when it finds
      one.
      */
      constructor(token, options = {}) {
        this.token = token;
        this.contextual = !!options.contextual;
        this.fallback = !!options.fallback;
        this.extend = !!options.extend;
      }
    };
    verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
    stackIDs = null;
    FragmentCursor2 = class {
      constructor(fragments, nodeSet2) {
        this.fragments = fragments;
        this.nodeSet = nodeSet2;
        this.i = 0;
        this.fragment = null;
        this.safeFrom = -1;
        this.safeTo = -1;
        this.trees = [];
        this.start = [];
        this.index = [];
        this.nextFragment();
      }
      nextFragment() {
        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
        if (fr) {
          this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
          this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
          while (this.trees.length) {
            this.trees.pop();
            this.start.pop();
            this.index.pop();
          }
          this.trees.push(fr.tree);
          this.start.push(-fr.offset);
          this.index.push(0);
          this.nextStart = this.safeFrom;
        } else {
          this.nextStart = 1e9;
        }
      }
      // `pos` must be >= any previously given `pos` for this cursor
      nodeAt(pos) {
        if (pos < this.nextStart)
          return null;
        while (this.fragment && this.safeTo <= pos)
          this.nextFragment();
        if (!this.fragment)
          return null;
        for (; ; ) {
          let last = this.trees.length - 1;
          if (last < 0) {
            this.nextFragment();
            return null;
          }
          let top3 = this.trees[last], index = this.index[last];
          if (index == top3.children.length) {
            this.trees.pop();
            this.start.pop();
            this.index.pop();
            continue;
          }
          let next2 = top3.children[index];
          let start2 = this.start[last] + top3.positions[index];
          if (start2 > pos) {
            this.nextStart = start2;
            return null;
          }
          if (next2 instanceof Tree) {
            if (start2 == pos) {
              if (start2 < this.safeFrom)
                return null;
              let end2 = start2 + next2.length;
              if (end2 <= this.safeTo) {
                let lookAhead = next2.prop(NodeProp.lookAhead);
                if (!lookAhead || end2 + lookAhead < this.fragment.to)
                  return next2;
              }
            }
            this.index[last]++;
            if (start2 + next2.length >= Math.max(this.safeFrom, pos)) {
              this.trees.push(next2);
              this.start.push(start2);
              this.index.push(0);
            }
          } else {
            this.index[last]++;
            this.nextStart = start2 + next2.length;
          }
        }
      }
    };
    TokenCache = class {
      constructor(parser29, stream) {
        this.stream = stream;
        this.tokens = [];
        this.mainToken = null;
        this.actions = [];
        this.tokens = parser29.tokenizers.map((_) => new CachedToken());
      }
      getActions(stack) {
        let actionIndex = 0;
        let main = null;
        let { parser: parser29 } = stack.p, { tokenizers } = parser29;
        let mask = parser29.stateSlot(
          stack.state,
          3
          /* ParseState.TokenizerMask */
        );
        let context = stack.curContext ? stack.curContext.hash : 0;
        let lookAhead = 0;
        for (let i = 0; i < tokenizers.length; i++) {
          if ((1 << i & mask) == 0)
            continue;
          let tokenizer2 = tokenizers[i], token = this.tokens[i];
          if (main && !tokenizer2.fallback)
            continue;
          if (tokenizer2.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
            this.updateCachedToken(token, tokenizer2, stack);
            token.mask = mask;
            token.context = context;
          }
          if (token.lookAhead > token.end + 25)
            lookAhead = Math.max(token.lookAhead, lookAhead);
          if (token.value != 0) {
            let startIndex = actionIndex;
            if (token.extended > -1)
              actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
            actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
            if (!tokenizer2.extend) {
              main = token;
              if (actionIndex > startIndex)
                break;
            }
          }
        }
        while (this.actions.length > actionIndex)
          this.actions.pop();
        if (lookAhead)
          stack.setLookAhead(lookAhead);
        if (!main && stack.pos == this.stream.end) {
          main = new CachedToken();
          main.value = stack.p.parser.eofTerm;
          main.start = main.end = stack.pos;
          actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
        }
        this.mainToken = main;
        return this.actions;
      }
      getMainToken(stack) {
        if (this.mainToken)
          return this.mainToken;
        let main = new CachedToken(), { pos, p } = stack;
        main.start = pos;
        main.end = Math.min(pos + 1, p.stream.end);
        main.value = pos == p.stream.end ? p.parser.eofTerm : 0;
        return main;
      }
      updateCachedToken(token, tokenizer2, stack) {
        let start2 = this.stream.clipPos(stack.pos);
        tokenizer2.token(this.stream.reset(start2, token), stack);
        if (token.value > -1) {
          let { parser: parser29 } = stack.p;
          for (let i = 0; i < parser29.specialized.length; i++)
            if (parser29.specialized[i] == token.value) {
              let result = parser29.specializers[i](this.stream.read(token.start, token.end), stack);
              if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                if ((result & 1) == 0)
                  token.value = result >> 1;
                else
                  token.extended = result >> 1;
                break;
              }
            }
        } else {
          token.value = 0;
          token.end = this.stream.clipPos(start2 + 1);
        }
      }
      putAction(action, token, end2, index) {
        for (let i = 0; i < index; i += 3)
          if (this.actions[i] == action)
            return index;
        this.actions[index++] = action;
        this.actions[index++] = token;
        this.actions[index++] = end2;
        return index;
      }
      addActions(stack, token, end2, index) {
        let { state } = stack, { parser: parser29 } = stack.p, { data: data2 } = parser29;
        for (let set2 = 0; set2 < 2; set2++) {
          for (let i = parser29.stateSlot(
            state,
            set2 ? 2 : 1
            /* ParseState.Actions */
          ); ; i += 3) {
            if (data2[i] == 65535) {
              if (data2[i + 1] == 1) {
                i = pair(data2, i + 2);
              } else {
                if (index == 0 && data2[i + 1] == 2)
                  index = this.putAction(pair(data2, i + 2), token, end2, index);
                break;
              }
            }
            if (data2[i] == token)
              index = this.putAction(pair(data2, i + 1), token, end2, index);
          }
        }
        return index;
      }
    };
    Parse2 = class {
      constructor(parser29, input, fragments, ranges) {
        this.parser = parser29;
        this.input = input;
        this.ranges = ranges;
        this.recovering = 0;
        this.nextStackID = 9812;
        this.minStackPos = 0;
        this.reused = [];
        this.stoppedAt = null;
        this.lastBigReductionStart = -1;
        this.lastBigReductionSize = 0;
        this.bigReductionCount = 0;
        this.stream = new InputStream(input, ranges);
        this.tokens = new TokenCache(parser29, this.stream);
        this.topTerm = parser29.top[1];
        let { from: from3 } = ranges[0];
        this.stacks = [Stack.start(this, parser29.top[0], from3)];
        this.fragments = fragments.length && this.stream.end - from3 > parser29.bufferLength * 4 ? new FragmentCursor2(fragments, parser29.nodeSet) : null;
      }
      get parsedPos() {
        return this.minStackPos;
      }
      // Move the parser forward. This will process all parse stacks at
      // `this.pos` and try to advance them to a further position. If no
      // stack for such a position is found, it'll start error-recovery.
      //
      // When the parse is finished, this will return a syntax tree. When
      // not, it returns `null`.
      advance() {
        let stacks = this.stacks, pos = this.minStackPos;
        let newStacks = this.stacks = [];
        let stopped, stoppedTokens;
        if (this.bigReductionCount > 300 && stacks.length == 1) {
          let [s] = stacks;
          while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {
          }
          this.bigReductionCount = this.lastBigReductionSize = 0;
        }
        for (let i = 0; i < stacks.length; i++) {
          let stack = stacks[i];
          for (; ; ) {
            this.tokens.mainToken = null;
            if (stack.pos > pos) {
              newStacks.push(stack);
            } else if (this.advanceStack(stack, newStacks, stacks)) {
              continue;
            } else {
              if (!stopped) {
                stopped = [];
                stoppedTokens = [];
              }
              stopped.push(stack);
              let tok = this.tokens.getMainToken(stack);
              stoppedTokens.push(tok.value, tok.end);
            }
            break;
          }
        }
        if (!newStacks.length) {
          let finished = stopped && findFinished(stopped);
          if (finished) {
            if (verbose)
              console.log("Finish with " + this.stackID(finished));
            return this.stackToTree(finished);
          }
          if (this.parser.strict) {
            if (verbose && stopped)
              console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
            throw new SyntaxError("No parse at " + pos);
          }
          if (!this.recovering)
            this.recovering = 5;
        }
        if (this.recovering && stopped) {
          let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
          if (finished) {
            if (verbose)
              console.log("Force-finish " + this.stackID(finished));
            return this.stackToTree(finished.forceAll());
          }
        }
        if (this.recovering) {
          let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
          if (newStacks.length > maxRemaining) {
            newStacks.sort((a2, b) => b.score - a2.score);
            while (newStacks.length > maxRemaining)
              newStacks.pop();
          }
          if (newStacks.some((s) => s.reducePos > pos))
            this.recovering--;
        } else if (newStacks.length > 1) {
          outer: for (let i = 0; i < newStacks.length - 1; i++) {
            let stack = newStacks[i];
            for (let j = i + 1; j < newStacks.length; j++) {
              let other = newStacks[j];
              if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
                if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                  newStacks.splice(j--, 1);
                } else {
                  newStacks.splice(i--, 1);
                  continue outer;
                }
              }
            }
          }
          if (newStacks.length > 12)
            newStacks.splice(
              12,
              newStacks.length - 12
              /* Rec.MaxStackCount */
            );
        }
        this.minStackPos = newStacks[0].pos;
        for (let i = 1; i < newStacks.length; i++)
          if (newStacks[i].pos < this.minStackPos)
            this.minStackPos = newStacks[i].pos;
        return null;
      }
      stopAt(pos) {
        if (this.stoppedAt != null && this.stoppedAt < pos)
          throw new RangeError("Can't move stoppedAt forward");
        this.stoppedAt = pos;
      }
      // Returns an updated version of the given stack, or null if the
      // stack can't advance normally. When `split` and `stacks` are
      // given, stacks split off by ambiguous operations will be pushed to
      // `split`, or added to `stacks` if they move `pos` forward.
      advanceStack(stack, stacks, split) {
        let start2 = stack.pos, { parser: parser29 } = this;
        let base5 = verbose ? this.stackID(stack) + " -> " : "";
        if (this.stoppedAt != null && start2 > this.stoppedAt)
          return stack.forceReduce() ? stack : null;
        if (this.fragments) {
          let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
          for (let cached = this.fragments.nodeAt(start2); cached; ) {
            let match2 = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser29.getGoto(stack.state, cached.type.id) : -1;
            if (match2 > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
              stack.useNode(cached, match2);
              if (verbose)
                console.log(base5 + this.stackID(stack) + ` (via reuse of ${parser29.getName(cached.type.id)})`);
              return true;
            }
            if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
              break;
            let inner = cached.children[0];
            if (inner instanceof Tree && cached.positions[0] == 0)
              cached = inner;
            else
              break;
          }
        }
        let defaultReduce = parser29.stateSlot(
          stack.state,
          4
          /* ParseState.DefaultReduce */
        );
        if (defaultReduce > 0) {
          stack.reduce(defaultReduce);
          if (verbose)
            console.log(base5 + this.stackID(stack) + ` (via always-reduce ${parser29.getName(
              defaultReduce & 65535
              /* Action.ValueMask */
            )})`);
          return true;
        }
        if (stack.stack.length >= 8400) {
          while (stack.stack.length > 6e3 && stack.forceReduce()) {
          }
        }
        let actions = this.tokens.getActions(stack);
        for (let i = 0; i < actions.length; ) {
          let action = actions[i++], term = actions[i++], end2 = actions[i++];
          let last = i == actions.length || !split;
          let localStack = last ? stack : stack.split();
          let main = this.tokens.mainToken;
          localStack.apply(action, term, main ? main.start : localStack.pos, end2);
          if (verbose)
            console.log(base5 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser29.getName(
              action & 65535
              /* Action.ValueMask */
            )}`} for ${parser29.getName(term)} @ ${start2}${localStack == stack ? "" : ", split"})`);
          if (last)
            return true;
          else if (localStack.pos > start2)
            stacks.push(localStack);
          else
            split.push(localStack);
        }
        return false;
      }
      // Advance a given stack forward as far as it will go. Returns the
      // (possibly updated) stack if it got stuck, or null if it moved
      // forward and was given to `pushStackDedup`.
      advanceFully(stack, newStacks) {
        let pos = stack.pos;
        for (; ; ) {
          if (!this.advanceStack(stack, null, null))
            return false;
          if (stack.pos > pos) {
            pushStackDedup(stack, newStacks);
            return true;
          }
        }
      }
      runRecovery(stacks, tokens2, newStacks) {
        let finished = null, restarted = false;
        for (let i = 0; i < stacks.length; i++) {
          let stack = stacks[i], token = tokens2[i << 1], tokenEnd = tokens2[(i << 1) + 1];
          let base5 = verbose ? this.stackID(stack) + " -> " : "";
          if (stack.deadEnd) {
            if (restarted)
              continue;
            restarted = true;
            stack.restart();
            if (verbose)
              console.log(base5 + this.stackID(stack) + " (restarted)");
            let done = this.advanceFully(stack, newStacks);
            if (done)
              continue;
          }
          let force = stack.split(), forceBase = base5;
          for (let j = 0; force.forceReduce() && j < 10; j++) {
            if (verbose)
              console.log(forceBase + this.stackID(force) + " (via force-reduce)");
            let done = this.advanceFully(force, newStacks);
            if (done)
              break;
            if (verbose)
              forceBase = this.stackID(force) + " -> ";
          }
          for (let insert2 of stack.recoverByInsert(token)) {
            if (verbose)
              console.log(base5 + this.stackID(insert2) + " (via recover-insert)");
            this.advanceFully(insert2, newStacks);
          }
          if (this.stream.end > stack.pos) {
            if (tokenEnd == stack.pos) {
              tokenEnd++;
              token = 0;
            }
            stack.recoverByDelete(token, tokenEnd);
            if (verbose)
              console.log(base5 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
            pushStackDedup(stack, newStacks);
          } else if (!finished || finished.score < stack.score) {
            finished = stack;
          }
        }
        return finished;
      }
      // Convert the stack's buffer to a syntax tree.
      stackToTree(stack) {
        stack.close();
        return Tree.build({
          buffer: StackBufferCursor.create(stack),
          nodeSet: this.parser.nodeSet,
          topID: this.topTerm,
          maxBufferLength: this.parser.bufferLength,
          reused: this.reused,
          start: this.ranges[0].from,
          length: stack.pos - this.ranges[0].from,
          minRepeatType: this.parser.minRepeatTerm
        });
      }
      stackID(stack) {
        let id3 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
        if (!id3)
          stackIDs.set(stack, id3 = String.fromCodePoint(this.nextStackID++));
        return id3 + stack;
      }
    };
    Dialect = class {
      constructor(source, flags, disabled) {
        this.source = source;
        this.flags = flags;
        this.disabled = disabled;
      }
      allows(term) {
        return !this.disabled || this.disabled[term] == 0;
      }
    };
    id = (x) => x;
    ContextTracker = class {
      /**
      Define a context tracker.
      */
      constructor(spec) {
        this.start = spec.start;
        this.shift = spec.shift || id;
        this.reduce = spec.reduce || id;
        this.reuse = spec.reuse || id;
        this.hash = spec.hash || (() => 0);
        this.strict = spec.strict !== false;
      }
    };
    LRParser = class _LRParser extends Parser {
      /**
      @internal
      */
      constructor(spec) {
        super();
        this.wrappers = [];
        if (spec.version != 14)
          throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
        let nodeNames = spec.nodeNames.split(" ");
        this.minRepeatTerm = nodeNames.length;
        for (let i = 0; i < spec.repeatNodeCount; i++)
          nodeNames.push("");
        let topTerms = Object.keys(spec.topRules).map((r2) => spec.topRules[r2][1]);
        let nodeProps = [];
        for (let i = 0; i < nodeNames.length; i++)
          nodeProps.push([]);
        function setProp(nodeID, prop, value) {
          nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
        }
        if (spec.nodeProps)
          for (let propSpec of spec.nodeProps) {
            let prop = propSpec[0];
            if (typeof prop == "string")
              prop = NodeProp[prop];
            for (let i = 1; i < propSpec.length; ) {
              let next2 = propSpec[i++];
              if (next2 >= 0) {
                setProp(next2, prop, propSpec[i++]);
              } else {
                let value = propSpec[i + -next2];
                for (let j = -next2; j > 0; j--)
                  setProp(propSpec[i++], prop, value);
                i++;
              }
            }
          }
        this.nodeSet = new NodeSet(nodeNames.map((name2, i) => NodeType.define({
          name: i >= this.minRepeatTerm ? void 0 : name2,
          id: i,
          props: nodeProps[i],
          top: topTerms.indexOf(i) > -1,
          error: i == 0,
          skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
        })));
        if (spec.propSources)
          this.nodeSet = this.nodeSet.extend(...spec.propSources);
        this.strict = false;
        this.bufferLength = DefaultBufferLength;
        let tokenArray = decodeArray(spec.tokenData);
        this.context = spec.context;
        this.specializerSpecs = spec.specialized || [];
        this.specialized = new Uint16Array(this.specializerSpecs.length);
        for (let i = 0; i < this.specializerSpecs.length; i++)
          this.specialized[i] = this.specializerSpecs[i].term;
        this.specializers = this.specializerSpecs.map(getSpecializer);
        this.states = decodeArray(spec.states, Uint32Array);
        this.data = decodeArray(spec.stateData);
        this.goto = decodeArray(spec.goto);
        this.maxTerm = spec.maxTerm;
        this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
        this.topRules = spec.topRules;
        this.dialects = spec.dialects || {};
        this.dynamicPrecedences = spec.dynamicPrecedences || null;
        this.tokenPrecTable = spec.tokenPrec;
        this.termNames = spec.termNames || null;
        this.maxNode = this.nodeSet.types.length - 1;
        this.dialect = this.parseDialect();
        this.top = this.topRules[Object.keys(this.topRules)[0]];
      }
      createParse(input, fragments, ranges) {
        let parse = new Parse2(this, input, fragments, ranges);
        for (let w of this.wrappers)
          parse = w(parse, input, fragments, ranges);
        return parse;
      }
      /**
      Get a goto table entry @internal
      */
      getGoto(state, term, loose = false) {
        let table = this.goto;
        if (term >= table[0])
          return -1;
        for (let pos = table[term + 1]; ; ) {
          let groupTag = table[pos++], last = groupTag & 1;
          let target = table[pos++];
          if (last && loose)
            return target;
          for (let end2 = pos + (groupTag >> 1); pos < end2; pos++)
            if (table[pos] == state)
              return target;
          if (last)
            return -1;
        }
      }
      /**
      Check if this state has an action for a given terminal @internal
      */
      hasAction(state, terminal) {
        let data2 = this.data;
        for (let set2 = 0; set2 < 2; set2++) {
          for (let i = this.stateSlot(
            state,
            set2 ? 2 : 1
            /* ParseState.Actions */
          ), next2; ; i += 3) {
            if ((next2 = data2[i]) == 65535) {
              if (data2[i + 1] == 1)
                next2 = data2[i = pair(data2, i + 2)];
              else if (data2[i + 1] == 2)
                return pair(data2, i + 2);
              else
                break;
            }
            if (next2 == terminal || next2 == 0)
              return pair(data2, i + 1);
          }
        }
        return 0;
      }
      /**
      @internal
      */
      stateSlot(state, slot) {
        return this.states[state * 6 + slot];
      }
      /**
      @internal
      */
      stateFlag(state, flag2) {
        return (this.stateSlot(
          state,
          0
          /* ParseState.Flags */
        ) & flag2) > 0;
      }
      /**
      @internal
      */
      validAction(state, action) {
        return !!this.allActions(state, (a2) => a2 == action ? true : null);
      }
      /**
      @internal
      */
      allActions(state, action) {
        let deflt = this.stateSlot(
          state,
          4
          /* ParseState.DefaultReduce */
        );
        let result = deflt ? action(deflt) : void 0;
        for (let i = this.stateSlot(
          state,
          1
          /* ParseState.Actions */
        ); result == null; i += 3) {
          if (this.data[i] == 65535) {
            if (this.data[i + 1] == 1)
              i = pair(this.data, i + 2);
            else
              break;
          }
          result = action(pair(this.data, i + 1));
        }
        return result;
      }
      /**
      Get the states that can follow this one through shift actions or
      goto jumps. @internal
      */
      nextStates(state) {
        let result = [];
        for (let i = this.stateSlot(
          state,
          1
          /* ParseState.Actions */
        ); ; i += 3) {
          if (this.data[i] == 65535) {
            if (this.data[i + 1] == 1)
              i = pair(this.data, i + 2);
            else
              break;
          }
          if ((this.data[i + 2] & 65536 >> 16) == 0) {
            let value = this.data[i + 1];
            if (!result.some((v, i2) => i2 & 1 && v == value))
              result.push(this.data[i], value);
          }
        }
        return result;
      }
      /**
      Configure the parser. Returns a new parser instance that has the
      given settings modified. Settings not provided in `config` are
      kept from the original parser.
      */
      configure(config2) {
        let copy = Object.assign(Object.create(_LRParser.prototype), this);
        if (config2.props)
          copy.nodeSet = this.nodeSet.extend(...config2.props);
        if (config2.top) {
          let info = this.topRules[config2.top];
          if (!info)
            throw new RangeError(`Invalid top rule name ${config2.top}`);
          copy.top = info;
        }
        if (config2.tokenizers)
          copy.tokenizers = this.tokenizers.map((t2) => {
            let found = config2.tokenizers.find((r2) => r2.from == t2);
            return found ? found.to : t2;
          });
        if (config2.specializers) {
          copy.specializers = this.specializers.slice();
          copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
            let found = config2.specializers.find((r2) => r2.from == s.external);
            if (!found)
              return s;
            let spec = Object.assign(Object.assign({}, s), { external: found.to });
            copy.specializers[i] = getSpecializer(spec);
            return spec;
          });
        }
        if (config2.contextTracker)
          copy.context = config2.contextTracker;
        if (config2.dialect)
          copy.dialect = this.parseDialect(config2.dialect);
        if (config2.strict != null)
          copy.strict = config2.strict;
        if (config2.wrap)
          copy.wrappers = copy.wrappers.concat(config2.wrap);
        if (config2.bufferLength != null)
          copy.bufferLength = config2.bufferLength;
        return copy;
      }
      /**
      Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
      are registered for this parser.
      */
      hasWrappers() {
        return this.wrappers.length > 0;
      }
      /**
      Returns the name associated with a given term. This will only
      work for all terms when the parser was generated with the
      `--names` option. By default, only the names of tagged terms are
      stored.
      */
      getName(term) {
        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
      }
      /**
      The eof term id is always allocated directly after the node
      types. @internal
      */
      get eofTerm() {
        return this.maxNode + 1;
      }
      /**
      The type of top node produced by the parser.
      */
      get topNode() {
        return this.nodeSet.types[this.top[1]];
      }
      /**
      @internal
      */
      dynamicPrecedence(term) {
        let prec2 = this.dynamicPrecedences;
        return prec2 == null ? 0 : prec2[term] || 0;
      }
      /**
      @internal
      */
      parseDialect(dialect2) {
        let values2 = Object.keys(this.dialects), flags = values2.map(() => false);
        if (dialect2)
          for (let part of dialect2.split(" ")) {
            let id3 = values2.indexOf(part);
            if (id3 >= 0)
              flags[id3] = true;
          }
        let disabled = null;
        for (let i = 0; i < values2.length; i++)
          if (!flags[i]) {
            for (let j = this.dialects[values2[i]], id3; (id3 = this.data[j++]) != 65535; )
              (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id3] = 1;
          }
        return new Dialect(dialect2, flags, disabled);
      }
      /**
      Used by the output of the parser generator. Not available to
      user code. @hide
      */
      static deserialize(spec) {
        return new _LRParser(spec);
      }
    };
  }
});

// ../../node_modules/@codemirror/autocomplete/dist/index.js
function toSet(chars2) {
  let flat = Object.keys(chars2).join("");
  let words22 = /\w/.test(flat);
  if (words22)
    flat = flat.replace(/\w/g, "");
  return `[${words22 ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
}
function prefixMatch(options) {
  let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
  for (let { label } of options) {
    first[label[0]] = true;
    for (let i = 1; i < label.length; i++)
      rest[label[i]] = true;
  }
  let source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
function completeFromList(list2) {
  let options = list2.map((o) => typeof o == "string" ? { label: o } : o);
  let [validFor, match2] = options.every((o) => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
  return (context) => {
    let token = context.matchBefore(match2);
    return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
  };
}
function ifNotIn(nodes, source) {
  return (context) => {
    for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1)
        return null;
      if (pos.type.isTop)
        break;
    }
    return source(context);
  };
}
function cur(state) {
  return state.selection.main.from;
}
function ensureAnchor(expr, start2) {
  var _a2;
  let { source } = expr;
  let addStart = start2 && source[0] != "^", addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd)
    return expr;
  return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
}
function insertCompletionText(state, text5, from3, to) {
  let { main } = state.selection, fromOff = from3 - main.from, toOff = to - main.from;
  return Object.assign(Object.assign({}, state.changeByRange((range) => {
    if (range != main && from3 != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from3, to))
      return { range };
    let lines = state.toText(text5);
    return {
      changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: lines },
      range: EditorSelection.cursor(range.from + fromOff + lines.length)
    };
  })), { scrollIntoView: true, userEvent: "input.complete" });
}
function asSource(source) {
  if (!Array.isArray(source))
    return source;
  let known = SourceCache.get(source);
  if (!known)
    SourceCache.set(source, known = completeFromList(source));
  return known;
}
function joinClass(a2, b) {
  return a2 ? b ? a2 + " " + b : a2 : b;
}
function defaultPositionInfo(view, list2, option2, info, space10, tooltip) {
  let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
  let side = "top", offset, maxWidth;
  let spaceLeft = list2.left - space10.left, spaceRight = space10.right - list2.right;
  let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
  if (left && spaceLeft < Math.min(infoWidth, spaceRight))
    left = false;
  else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
    left = true;
  if (infoWidth <= (left ? spaceLeft : spaceRight)) {
    offset = Math.max(space10.top, Math.min(option2.top, space10.bottom - infoHeight)) - list2.top;
    maxWidth = Math.min(400, left ? spaceLeft : spaceRight);
  } else {
    narrow = true;
    maxWidth = Math.min(
      400,
      (rtl ? list2.right : space10.right - list2.left) - 30
      /* Info.Margin */
    );
    let spaceBelow = space10.bottom - list2.bottom;
    if (spaceBelow >= infoHeight || spaceBelow > list2.top) {
      offset = option2.bottom - list2.top;
    } else {
      side = "bottom";
      offset = list2.bottom - option2.top;
    }
  }
  let scaleY = (list2.bottom - list2.top) / tooltip.offsetHeight;
  let scaleX = (list2.right - list2.left) / tooltip.offsetWidth;
  return {
    style: `${side}: ${offset / scaleY}px; max-width: ${maxWidth / scaleX}px`,
    class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left ? "left" : "right")
  };
}
function optionContent(config2) {
  let content3 = config2.addToOptions.slice();
  if (config2.icons)
    content3.push({
      render(completion) {
        let icon = document.createElement("div");
        icon.classList.add("cm-completionIcon");
        if (completion.type)
          icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
        icon.setAttribute("aria-hidden", "true");
        return icon;
      },
      position: 20
    });
  content3.push({
    render(completion, _s, _v, match2) {
      let labelElt = document.createElement("span");
      labelElt.className = "cm-completionLabel";
      let label = completion.displayLabel || completion.label, off = 0;
      for (let j = 0; j < match2.length; ) {
        let from3 = match2[j++], to = match2[j++];
        if (from3 > off)
          labelElt.appendChild(document.createTextNode(label.slice(off, from3)));
        let span = labelElt.appendChild(document.createElement("span"));
        span.appendChild(document.createTextNode(label.slice(from3, to)));
        span.className = "cm-completionMatchedText";
        off = to;
      }
      if (off < label.length)
        labelElt.appendChild(document.createTextNode(label.slice(off)));
      return labelElt;
    },
    position: 50
  }, {
    render(completion) {
      if (!completion.detail)
        return null;
      let detailElt = document.createElement("span");
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = completion.detail;
      return detailElt;
    },
    position: 80
  });
  return content3.sort((a2, b) => a2.position - b.position).map((a2) => a2.render);
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max)
    return { from: 0, to: total };
  if (selected < 0)
    selected = 0;
  if (selected <= total >> 1) {
    let off2 = Math.floor(selected / max);
    return { from: off2 * max, to: (off2 + 1) * max };
  }
  let off = Math.floor((total - selected) / max);
  return { from: total - (off + 1) * max, to: total - off * max };
}
function completionTooltip(stateField, applyCompletion2) {
  return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
}
function scrollIntoView2(container, element2) {
  let parent = container.getBoundingClientRect();
  let self2 = element2.getBoundingClientRect();
  let scaleY = parent.height / container.offsetHeight;
  if (self2.top < parent.top)
    container.scrollTop -= (parent.top - self2.top) / scaleY;
  else if (self2.bottom > parent.bottom)
    container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
}
function score(option2) {
  return (option2.boost || 0) * 100 + (option2.apply ? 10 : 0) + (option2.info ? 5 : 0) + (option2.type ? 1 : 0);
}
function sortOptions(active, state) {
  let options = [];
  let sections = null;
  let addOption = (option2) => {
    options.push(option2);
    let { section: section2 } = option2.completion;
    if (section2) {
      if (!sections)
        sections = [];
      let name2 = typeof section2 == "string" ? section2 : section2.name;
      if (!sections.some((s) => s.name == name2))
        sections.push(typeof section2 == "string" ? { name: name2 } : section2);
    }
  };
  let conf = state.facet(completionConfig);
  for (let a2 of active)
    if (a2.hasResult()) {
      let getMatch = a2.result.getMatch;
      if (a2.result.filter === false) {
        for (let option2 of a2.result.options) {
          addOption(new Option(option2, a2.source, getMatch ? getMatch(option2) : [], 1e9 - options.length));
        }
      } else {
        let pattern = state.sliceDoc(a2.from, a2.to), match2;
        let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
        for (let option2 of a2.result.options)
          if (match2 = matcher.match(option2.label)) {
            let matched = !option2.displayLabel ? match2.matched : getMatch ? getMatch(option2, match2.matched) : [];
            addOption(new Option(option2, a2.source, matched, match2.score + (option2.boost || 0)));
          }
      }
    }
  if (sections) {
    let sectionOrder = /* @__PURE__ */ Object.create(null), pos = 0;
    let cmp = (a2, b) => {
      var _a2, _b2;
      return ((_a2 = a2.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b2 = b.rank) !== null && _b2 !== void 0 ? _b2 : 1e9) || (a2.name < b.name ? -1 : 1);
    };
    for (let s of sections.sort(cmp)) {
      pos -= 1e5;
      sectionOrder[s.name] = pos;
    }
    for (let option2 of options) {
      let { section: section2 } = option2.completion;
      if (section2)
        option2.score += sectionOrder[typeof section2 == "string" ? section2 : section2.name];
    }
  }
  let result = [], prev = null;
  let compare2 = conf.compareCompletions;
  for (let opt2 of options.sort((a2, b) => b.score - a2.score || compare2(a2.completion, b.completion))) {
    let cur2 = opt2.completion;
    if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
      result.push(opt2);
    else if (score(opt2.completion) > score(prev))
      result[result.length - 1] = opt2;
    prev = opt2.completion;
  }
  return result;
}
function sameResults(a2, b) {
  if (a2 == b)
    return true;
  for (let iA = 0, iB = 0; ; ) {
    while (iA < a2.length && !a2[iA].hasResult())
      iA++;
    while (iB < b.length && !b[iB].hasResult())
      iB++;
    let endA = iA == a2.length, endB = iB == b.length;
    if (endA || endB)
      return endA == endB;
    if (a2[iA++].result != b[iB++].result)
      return false;
  }
}
function makeAttrs(id3, selected) {
  let result = {
    "aria-autocomplete": "list",
    "aria-haspopup": "listbox",
    "aria-controls": id3
  };
  if (selected > -1)
    result["aria-activedescendant"] = id3 + "-" + selected;
  return result;
}
function getUpdateType(tr, conf) {
  if (tr.isUserEvent("input.complete")) {
    let completion = tr.annotation(pickedCompletion);
    if (completion && conf.activateOnCompletion(completion))
      return 4 | 8;
  }
  let typing = tr.isUserEvent("input.type");
  return typing && conf.activateOnTyping ? 4 | 1 : typing ? 1 : tr.isUserEvent("delete.backward") ? 2 : tr.selection ? 8 : tr.docChanged ? 16 : 0;
}
function checkValid(validFor, state, from3, to) {
  if (!validFor)
    return false;
  let text5 = state.sliceDoc(from3, to);
  return typeof validFor == "function" ? validFor(text5, from3, to, state) : ensureAnchor(validFor, true).test(text5);
}
function applyCompletion(view, option2) {
  const apply = option2.completion.apply || option2.completion.label;
  let result = view.state.field(completionState).active.find((a2) => a2.source == option2.source);
  if (!(result instanceof ActiveResult))
    return false;
  if (typeof apply == "string")
    view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option2.completion) }));
  else
    apply(view, option2.completion, result.from, result.to);
  return true;
}
function moveCompletionSelection(forward, by = "option") {
  return (view) => {
    let cState = view.state.field(completionState, false);
    if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
      return false;
    let step = 1, tooltip;
    if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
      step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
    let { length } = cState.open.options;
    let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
    if (selected < 0)
      selected = by == "page" ? 0 : length - 1;
    else if (selected >= length)
      selected = by == "page" ? length - 1 : 0;
    view.dispatch({ effects: setSelectedEffect.of(selected) });
    return true;
  };
}
function fieldSelection(ranges, field) {
  return EditorSelection.create(ranges.filter((r2) => r2.field == field).map((r2) => EditorSelection.range(r2.from, r2.to)));
}
function snippet(template) {
  let snippet2 = Snippet.parse(template);
  return (editor, completion, from3, to) => {
    let { text: text5, ranges } = snippet2.instantiate(editor.state, from3);
    let { main } = editor.state.selection;
    let spec = {
      changes: { from: from3, to: to == main.from ? main.to : to, insert: Text.of(text5) },
      scrollIntoView: true,
      annotations: completion ? [pickedCompletion.of(completion), Transaction.userEvent.of("input.complete")] : void 0
    };
    if (ranges.length)
      spec.selection = fieldSelection(ranges, 0);
    if (ranges.some((r2) => r2.field > 0)) {
      let active = new ActiveSnippet(ranges, 0);
      let effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === void 0)
        effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme3]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return ({ state, dispatch }) => {
    let active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0)
      return false;
    let next2 = active.active + dir, last = dir > 0 && !active.ranges.some((r2) => r2.field == next2 + dir);
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next2),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next2)),
      scrollIntoView: true
    }));
    return true;
  };
}
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
}
function closeBrackets() {
  return [inputHandler2, bracketState];
}
function closing(ch2) {
  for (let i = 0; i < definedClosing.length; i += 2)
    if (definedClosing.charCodeAt(i) == ch2)
      return definedClosing.charAt(i + 1);
  return fromCodePoint(ch2 < 128 ? ch2 : ch2 + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults2;
}
function insertBracket(state, bracket2) {
  let conf = config(state, state.selection.main.head);
  let tokens2 = conf.brackets || defaults2.brackets;
  for (let tok of tokens2) {
    let closed = closing(codePointAt2(tok, 0));
    if (bracket2 == tok)
      return closed == tok ? handleSame(state, tok, tokens2.indexOf(tok + tok + tok) > -1, conf) : handleOpen(state, tok, closed, conf.before || defaults2.before);
    if (bracket2 == closed && closedBracketAt(state, state.selection.main.from))
      return handleClose(state, tok, closed);
  }
  return null;
}
function closedBracketAt(state, pos) {
  let found = false;
  state.field(bracketState).between(0, state.doc.length, (from3) => {
    if (from3 == pos)
      found = true;
  });
  return found;
}
function nextChar(doc2, pos) {
  let next2 = doc2.sliceString(pos, pos + 2);
  return next2.slice(0, codePointSize2(codePointAt2(next2, 0)));
}
function prevChar(doc2, pos) {
  let prev = doc2.sliceString(pos - 2, pos);
  return codePointSize2(codePointAt2(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
    let next2 = nextChar(state.doc, range.head);
    if (!next2 || /\s/.test(next2) || closeBefore.indexOf(next2) > -1)
      return {
        changes: { insert: open + close, from: range.head },
        effects: closeBracketEffect.of(range.head + open.length),
        range: EditorSelection.cursor(range.head + open.length)
      };
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleClose(state, _open, close) {
  let dont = null, changes = state.changeByRange((range) => {
    if (range.empty && nextChar(state.doc, range.head) == close)
      return {
        changes: { from: range.head, to: range.head + close.length, insert: close },
        range: EditorSelection.cursor(range.head + close.length)
      };
    return dont = { range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function handleSame(state, token, allowTriple, config2) {
  let stringPrefixes4 = config2.stringPrefixes || defaults2.stringPrefixes;
  let dont = null, changes = state.changeByRange((range) => {
    if (!range.empty)
      return {
        changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
        effects: closeBracketEffect.of(range.to + token.length),
        range: EditorSelection.range(range.anchor + token.length, range.head + token.length)
      };
    let pos = range.head, next2 = nextChar(state.doc, pos), start2;
    if (next2 == token) {
      if (nodeStart(state, pos)) {
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
      } else if (closedBracketAt(state, pos)) {
        let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
        let content3 = isTriple ? token + token + token : token;
        return {
          changes: { from: pos, to: pos + content3.length, insert: content3 },
          range: EditorSelection.cursor(pos + content3.length)
        };
      }
    } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && (start2 = canStartStringAt(state, pos - 2 * token.length, stringPrefixes4)) > -1 && nodeStart(state, start2)) {
      return {
        changes: { insert: token + token + token + token, from: pos },
        effects: closeBracketEffect.of(pos + token.length),
        range: EditorSelection.cursor(pos + token.length)
      };
    } else if (state.charCategorizer(pos)(next2) != CharCategory.Word) {
      if (canStartStringAt(state, pos, stringPrefixes4) > -1 && !probablyInString(state, pos, token, stringPrefixes4))
        return {
          changes: { insert: token + token, from: pos },
          effects: closeBracketEffect.of(pos + token.length),
          range: EditorSelection.cursor(pos + token.length)
        };
    }
    return { range: dont = range };
  });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    userEvent: "input.type"
  });
}
function nodeStart(state, pos) {
  let tree = syntaxTree(state).resolveInner(pos + 1);
  return tree.parent && tree.from == pos;
}
function probablyInString(state, pos, quoteToken, prefixes2) {
  let node = syntaxTree(state).resolveInner(pos, -1);
  let maxPrefix = prefixes2.reduce((m, p) => Math.max(m, p.length), 0);
  for (let i = 0; i < 5; i++) {
    let start2 = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
    let quotePos = start2.indexOf(quoteToken);
    if (!quotePos || quotePos > -1 && prefixes2.indexOf(start2.slice(0, quotePos)) > -1) {
      let first = node.firstChild;
      while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
        if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
          return false;
        first = first.firstChild;
      }
      return true;
    }
    let parent = node.to == pos && node.parent;
    if (!parent)
      break;
    node = parent;
  }
  return false;
}
function canStartStringAt(state, pos, prefixes2) {
  let charCat = state.charCategorizer(pos);
  if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
    return pos;
  for (let prefix2 of prefixes2) {
    let start2 = pos - prefix2.length;
    if (state.sliceDoc(start2, pos) == prefix2 && charCat(state.sliceDoc(start2 - 1, start2)) != CharCategory.Word)
      return start2;
  }
  return -1;
}
function autocompletion(config2 = {}) {
  return [
    commitCharacters,
    completionState,
    completionConfig.of(config2),
    completionPlugin,
    completionKeymapExt,
    baseTheme3
  ];
}
var CompletionContext, Option, pickedCompletion, SourceCache, startCompletionEffect, closeCompletionEffect, FuzzyMatcher, StrictMatcher, completionConfig, CompletionTooltip, CompletionDialog, CompletionState, baseAttrs, noAttrs2, none2, ActiveSource, ActiveResult, setActiveEffect, setSelectedEffect, completionState, createTooltip, acceptCompletion, startCompletion, closeCompletion, RunningQuery, MaxUpdateCount, MinAbortTime, completionPlugin, windows, commitCharacters, baseTheme3, FieldPos, FieldRange, Snippet, fieldMarker, fieldRange, ActiveSnippet, setActive, moveToField, snippetState, clearSnippet, nextSnippetField, prevSnippetField, defaultSnippetKeymap, snippetKeymap, addSnippetKeymap, snippetPointerHandler, defaults2, closeBracketEffect, closedBracket, bracketState, definedClosing, android, inputHandler2, deleteBracketPair, closeBracketsKeymap, completionKeymap, completionKeymapExt;
var init_dist7 = __esm({
  "../../node_modules/@codemirror/autocomplete/dist/index.js"() {
    init_dist2();
    init_dist3();
    init_dist5();
    CompletionContext = class {
      /**
      Create a new completion context. (Mostly useful for testing
      completion sources—in the editor, the extension will create
      these for you.)
      */
      constructor(state, pos, explicit, view) {
        this.state = state;
        this.pos = pos;
        this.explicit = explicit;
        this.view = view;
        this.abortListeners = [];
        this.abortOnDocChange = false;
      }
      /**
      Get the extent, content, and (if there is a token) type of the
      token before `this.pos`.
      */
      tokenBefore(types8) {
        let token = syntaxTree(this.state).resolveInner(this.pos, -1);
        while (token && types8.indexOf(token.name) < 0)
          token = token.parent;
        return token ? {
          from: token.from,
          to: this.pos,
          text: this.state.sliceDoc(token.from, this.pos),
          type: token.type
        } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
      matchBefore(expr) {
        let line = this.state.doc.lineAt(this.pos);
        let start2 = Math.max(line.from, this.pos - 250);
        let str = line.text.slice(start2 - line.from, this.pos - line.from);
        let found = str.search(ensureAnchor(expr, false));
        return found < 0 ? null : { from: start2 + found, to: this.pos, text: str.slice(found) };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
      get aborted() {
        return this.abortListeners == null;
      }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      
      By default, running queries will not be aborted for regular
      typing or backspacing, on the assumption that they are likely to
      return a result with a
      [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
      allows the result to be used after all. Passing `onDocChange:
      true` will cause this query to be aborted for any document
      change.
      */
      addEventListener(type7, listener, options) {
        if (type7 == "abort" && this.abortListeners) {
          this.abortListeners.push(listener);
          if (options && options.onDocChange)
            this.abortOnDocChange = true;
        }
      }
    };
    Option = class {
      constructor(completion, source, match2, score2) {
        this.completion = completion;
        this.source = source;
        this.match = match2;
        this.score = score2;
      }
    };
    pickedCompletion = /* @__PURE__ */ Annotation.define();
    SourceCache = /* @__PURE__ */ new WeakMap();
    startCompletionEffect = /* @__PURE__ */ StateEffect.define();
    closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
    FuzzyMatcher = class {
      constructor(pattern) {
        this.pattern = pattern;
        this.chars = [];
        this.folded = [];
        this.any = [];
        this.precise = [];
        this.byWord = [];
        this.score = 0;
        this.matched = [];
        for (let p = 0; p < pattern.length; ) {
          let char = codePointAt2(pattern, p), size = codePointSize2(char);
          this.chars.push(char);
          let part = pattern.slice(p, p + size), upper = part.toUpperCase();
          this.folded.push(codePointAt2(upper == part ? part.toLowerCase() : upper, 0));
          p += size;
        }
        this.astral = pattern.length != this.chars.length;
      }
      ret(score2, matched) {
        this.score = score2;
        this.matched = matched;
        return this;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return a boolean indicating whether there was a match and,
      // on success, set `this.score` to the score, `this.matched` to an
      // array of `from, to` pairs indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
      match(word) {
        if (this.pattern.length == 0)
          return this.ret(-100, []);
        if (word.length < this.pattern.length)
          return null;
        let { chars: chars2, folded, any, precise, byWord } = this;
        if (chars2.length == 1) {
          let first = codePointAt2(word, 0), firstSize = codePointSize2(first);
          let score2 = firstSize == word.length ? 0 : -100;
          if (first == chars2[0]) ;
          else if (first == folded[0])
            score2 += -200;
          else
            return null;
          return this.ret(score2, [0, firstSize]);
        }
        let direct = word.indexOf(this.pattern);
        if (direct == 0)
          return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
        let len = chars2.length, anyTo = 0;
        if (direct < 0) {
          for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len; ) {
            let next2 = codePointAt2(word, i);
            if (next2 == chars2[anyTo] || next2 == folded[anyTo])
              any[anyTo++] = i;
            i += codePointSize2(next2);
          }
          if (anyTo < len)
            return null;
        }
        let preciseTo = 0;
        let byWordTo = 0, byWordFolded = false;
        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
        let hasLower = /[a-z]/.test(word), wordAdjacent = true;
        for (let i = 0, e = Math.min(word.length, 200), prevType = 0; i < e && byWordTo < len; ) {
          let next2 = codePointAt2(word, i);
          if (direct < 0) {
            if (preciseTo < len && next2 == chars2[preciseTo])
              precise[preciseTo++] = i;
            if (adjacentTo < len) {
              if (next2 == chars2[adjacentTo] || next2 == folded[adjacentTo]) {
                if (adjacentTo == 0)
                  adjacentStart = i;
                adjacentEnd = i + 1;
                adjacentTo++;
              } else {
                adjacentTo = 0;
              }
            }
          }
          let ch2, type7 = next2 < 255 ? next2 >= 48 && next2 <= 57 || next2 >= 97 && next2 <= 122 ? 2 : next2 >= 65 && next2 <= 90 ? 1 : 0 : (ch2 = fromCodePoint(next2)) != ch2.toLowerCase() ? 1 : ch2 != ch2.toUpperCase() ? 2 : 0;
          if (!i || type7 == 1 && hasLower || prevType == 0 && type7 != 0) {
            if (chars2[byWordTo] == next2 || folded[byWordTo] == next2 && (byWordFolded = true))
              byWord[byWordTo++] = i;
            else if (byWord.length)
              wordAdjacent = false;
          }
          prevType = type7;
          i += codePointSize2(next2);
        }
        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
          return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
        if (adjacentTo == len && adjacentStart == 0)
          return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
        if (direct > -1)
          return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
        if (adjacentTo == len)
          return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
        if (byWordTo == len)
          return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
        return chars2.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
      }
      result(score2, positions, word) {
        let result = [], i = 0;
        for (let pos of positions) {
          let to = pos + (this.astral ? codePointSize2(codePointAt2(word, pos)) : 1);
          if (i && result[i - 1] == pos)
            result[i - 1] = to;
          else {
            result[i++] = pos;
            result[i++] = to;
          }
        }
        return this.ret(score2 - word.length, result);
      }
    };
    StrictMatcher = class {
      constructor(pattern) {
        this.pattern = pattern;
        this.matched = [];
        this.score = 0;
        this.folded = pattern.toLowerCase();
      }
      match(word) {
        if (word.length < this.pattern.length)
          return null;
        let start2 = word.slice(0, this.pattern.length);
        let match2 = start2 == this.pattern ? 0 : start2.toLowerCase() == this.folded ? -200 : null;
        if (match2 == null)
          return null;
        this.matched = [0, start2.length];
        this.score = match2 + (word.length == this.pattern.length ? 0 : -100);
        return this;
      }
    };
    completionConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          activateOnTyping: true,
          activateOnCompletion: () => false,
          activateOnTypingDelay: 100,
          selectOnOpen: true,
          override: null,
          closeOnBlur: true,
          maxRenderedOptions: 100,
          defaultKeymap: true,
          tooltipClass: () => "",
          optionClass: () => "",
          aboveCursor: false,
          icons: true,
          addToOptions: [],
          positionInfo: defaultPositionInfo,
          filterStrict: false,
          compareCompletions: (a2, b) => a2.label.localeCompare(b.label),
          interactionDelay: 75,
          updateSyncTime: 100
        }, {
          defaultKeymap: (a2, b) => a2 && b,
          closeOnBlur: (a2, b) => a2 && b,
          icons: (a2, b) => a2 && b,
          tooltipClass: (a2, b) => (c2) => joinClass(a2(c2), b(c2)),
          optionClass: (a2, b) => (c2) => joinClass(a2(c2), b(c2)),
          addToOptions: (a2, b) => a2.concat(b),
          filterStrict: (a2, b) => a2 || b
        });
      }
    });
    CompletionTooltip = class {
      constructor(view, stateField, applyCompletion2) {
        this.view = view;
        this.stateField = stateField;
        this.applyCompletion = applyCompletion2;
        this.info = null;
        this.infoDestroy = null;
        this.placeInfoReq = {
          read: () => this.measureInfo(),
          write: (pos) => this.placeInfo(pos),
          key: this
        };
        this.space = null;
        this.currentClass = "";
        let cState = view.state.field(stateField);
        let { options, selected } = cState.open;
        let config2 = view.state.facet(completionConfig);
        this.optionContent = optionContent(config2);
        this.optionClass = config2.optionClass;
        this.tooltipClass = config2.tooltipClass;
        this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
        this.dom = document.createElement("div");
        this.dom.className = "cm-tooltip-autocomplete";
        this.updateTooltipClass(view.state);
        this.dom.addEventListener("mousedown", (e) => {
          let { options: options2 } = view.state.field(stateField).open;
          for (let dom = e.target, match2; dom && dom != this.dom; dom = dom.parentNode) {
            if (dom.nodeName == "LI" && (match2 = /-(\d+)$/.exec(dom.id)) && +match2[1] < options2.length) {
              this.applyCompletion(view, options2[+match2[1]]);
              e.preventDefault();
              return;
            }
          }
        });
        this.dom.addEventListener("focusout", (e) => {
          let state = view.state.field(this.stateField, false);
          if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e.relatedTarget != view.contentDOM)
            view.dispatch({ effects: closeCompletionEffect.of(null) });
        });
        this.showOptions(options, cState.id);
      }
      mount() {
        this.updateSel();
      }
      showOptions(options, id3) {
        if (this.list)
          this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(options, id3, this.range));
        this.list.addEventListener("scroll", () => {
          if (this.info)
            this.view.requestMeasure(this.placeInfoReq);
        });
      }
      update(update) {
        var _a2;
        let cState = update.state.field(this.stateField);
        let prevState = update.startState.field(this.stateField);
        this.updateTooltipClass(update.state);
        if (cState != prevState) {
          let { options, selected, disabled } = cState.open;
          if (!prevState.open || prevState.open.options != options) {
            this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
            this.showOptions(options, cState.id);
          }
          this.updateSel();
          if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
            this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
        }
      }
      updateTooltipClass(state) {
        let cls = this.tooltipClass(state);
        if (cls != this.currentClass) {
          for (let c2 of this.currentClass.split(" "))
            if (c2)
              this.dom.classList.remove(c2);
          for (let c2 of cls.split(" "))
            if (c2)
              this.dom.classList.add(c2);
          this.currentClass = cls;
        }
      }
      positioned(space10) {
        this.space = space10;
        if (this.info)
          this.view.requestMeasure(this.placeInfoReq);
      }
      updateSel() {
        let cState = this.view.state.field(this.stateField), open = cState.open;
        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
          this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(open.options, cState.id);
        }
        if (this.updateSelectedOption(open.selected)) {
          this.destroyInfo();
          let { completion } = open.options[open.selected];
          let { info } = completion;
          if (!info)
            return;
          let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
          if (!infoResult)
            return;
          if ("then" in infoResult) {
            infoResult.then((obj) => {
              if (obj && this.view.state.field(this.stateField, false) == cState)
                this.addInfoPane(obj, completion);
            }).catch((e) => logException(this.view.state, e, "completion info"));
          } else {
            this.addInfoPane(infoResult, completion);
          }
        }
      }
      addInfoPane(content3, completion) {
        this.destroyInfo();
        let wrap = this.info = document.createElement("div");
        wrap.className = "cm-tooltip cm-completionInfo";
        if (content3.nodeType != null) {
          wrap.appendChild(content3);
          this.infoDestroy = null;
        } else {
          let { dom, destroy } = content3;
          wrap.appendChild(dom);
          this.infoDestroy = destroy || null;
        }
        this.dom.appendChild(wrap);
        this.view.requestMeasure(this.placeInfoReq);
      }
      updateSelectedOption(selected) {
        let set2 = null;
        for (let opt2 = this.list.firstChild, i = this.range.from; opt2; opt2 = opt2.nextSibling, i++) {
          if (opt2.nodeName != "LI" || !opt2.id) {
            i--;
          } else if (i == selected) {
            if (!opt2.hasAttribute("aria-selected")) {
              opt2.setAttribute("aria-selected", "true");
              set2 = opt2;
            }
          } else {
            if (opt2.hasAttribute("aria-selected"))
              opt2.removeAttribute("aria-selected");
          }
        }
        if (set2)
          scrollIntoView2(this.list, set2);
        return set2;
      }
      measureInfo() {
        let sel = this.dom.querySelector("[aria-selected]");
        if (!sel || !this.info)
          return null;
        let listRect = this.dom.getBoundingClientRect();
        let infoRect = this.info.getBoundingClientRect();
        let selRect = sel.getBoundingClientRect();
        let space10 = this.space;
        if (!space10) {
          let docElt = this.dom.ownerDocument.documentElement;
          space10 = { left: 0, top: 0, right: docElt.clientWidth, bottom: docElt.clientHeight };
        }
        if (selRect.top > Math.min(space10.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space10.top, listRect.top) + 10)
          return null;
        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space10, this.dom);
      }
      placeInfo(pos) {
        if (this.info) {
          if (pos) {
            if (pos.style)
              this.info.style.cssText = pos.style;
            this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
          } else {
            this.info.style.cssText = "top: -1e6px";
          }
        }
      }
      createListBox(options, id3, range) {
        const ul = document.createElement("ul");
        ul.id = id3;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
        ul.addEventListener("mousedown", (e) => {
          if (e.target == ul)
            e.preventDefault();
        });
        let curSection = null;
        for (let i = range.from; i < range.to; i++) {
          let { completion, match: match2 } = options[i], { section: section2 } = completion;
          if (section2) {
            let name2 = typeof section2 == "string" ? section2 : section2.name;
            if (name2 != curSection && (i > range.from || range.from == 0)) {
              curSection = name2;
              if (typeof section2 != "string" && section2.header) {
                ul.appendChild(section2.header(section2));
              } else {
                let header3 = ul.appendChild(document.createElement("completion-section"));
                header3.textContent = name2;
              }
            }
          }
          const li = ul.appendChild(document.createElement("li"));
          li.id = id3 + "-" + i;
          li.setAttribute("role", "option");
          let cls = this.optionClass(completion);
          if (cls)
            li.className = cls;
          for (let source of this.optionContent) {
            let node = source(completion, this.view.state, this.view, match2);
            if (node)
              li.appendChild(node);
          }
        }
        if (range.from)
          ul.classList.add("cm-completionListIncompleteTop");
        if (range.to < options.length)
          ul.classList.add("cm-completionListIncompleteBottom");
        return ul;
      }
      destroyInfo() {
        if (this.info) {
          if (this.infoDestroy)
            this.infoDestroy();
          this.info.remove();
          this.info = null;
        }
      }
      destroy() {
        this.destroyInfo();
      }
    };
    CompletionDialog = class _CompletionDialog {
      constructor(options, attrs2, tooltip, timestamp, selected, disabled) {
        this.options = options;
        this.attrs = attrs2;
        this.tooltip = tooltip;
        this.timestamp = timestamp;
        this.selected = selected;
        this.disabled = disabled;
      }
      setSelected(selected, id3) {
        return selected == this.selected || selected >= this.options.length ? this : new _CompletionDialog(this.options, makeAttrs(id3, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
      static build(active, state, id3, prev, conf, didSetActive) {
        if (prev && !didSetActive && active.some((s) => s.isPending))
          return prev.setDisabled();
        let options = sortOptions(active, state);
        if (!options.length)
          return prev && active.some((a2) => a2.isPending) ? prev.setDisabled() : null;
        let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
        if (prev && prev.selected != selected && prev.selected != -1) {
          let selectedValue = prev.options[prev.selected].completion;
          for (let i = 0; i < options.length; i++)
            if (options[i].completion == selectedValue) {
              selected = i;
              break;
            }
        }
        return new _CompletionDialog(options, makeAttrs(id3, selected), {
          pos: active.reduce((a2, b) => b.hasResult() ? Math.min(a2, b.from) : a2, 1e8),
          create: createTooltip,
          above: conf.aboveCursor
        }, prev ? prev.timestamp : Date.now(), selected, false);
      }
      map(changes) {
        return new _CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
      }
      setDisabled() {
        return new _CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
      }
    };
    CompletionState = class _CompletionState {
      constructor(active, id3, open) {
        this.active = active;
        this.id = id3;
        this.open = open;
      }
      static start() {
        return new _CompletionState(none2, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
      update(tr) {
        let { state } = tr, conf = state.facet(completionConfig);
        let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
        let active = sources.map((source) => {
          let value = this.active.find((s) => s.source == source) || new ActiveSource(
            source,
            this.active.some(
              (a2) => a2.state != 0
              /* State.Inactive */
            ) ? 1 : 0
            /* State.Inactive */
          );
          return value.update(tr, conf);
        });
        if (active.length == this.active.length && active.every((a2, i) => a2 == this.active[i]))
          active = this.active;
        let open = this.open, didSet = tr.effects.some((e) => e.is(setActiveEffect));
        if (open && tr.docChanged)
          open = open.map(tr.changes);
        if (tr.selection || active.some((a2) => a2.hasResult() && tr.changes.touchesRange(a2.from, a2.to)) || !sameResults(active, this.active) || didSet)
          open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
        else if (open && open.disabled && !active.some((a2) => a2.isPending))
          open = null;
        if (!open && active.every((a2) => !a2.isPending) && active.some((a2) => a2.hasResult()))
          active = active.map((a2) => a2.hasResult() ? new ActiveSource(
            a2.source,
            0
            /* State.Inactive */
          ) : a2);
        for (let effect of tr.effects)
          if (effect.is(setSelectedEffect))
            open = open && open.setSelected(effect.value, this.id);
        return active == this.active && open == this.open ? this : new _CompletionState(active, this.id, open);
      }
      get tooltip() {
        return this.open ? this.open.tooltip : null;
      }
      get attrs() {
        return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs2;
      }
    };
    baseAttrs = {
      "aria-autocomplete": "list"
    };
    noAttrs2 = {};
    none2 = [];
    ActiveSource = class _ActiveSource {
      constructor(source, state, explicit = false) {
        this.source = source;
        this.state = state;
        this.explicit = explicit;
      }
      hasResult() {
        return false;
      }
      get isPending() {
        return this.state == 1;
      }
      update(tr, conf) {
        let type7 = getUpdateType(tr, conf), value = this;
        if (type7 & 8 || type7 & 16 && this.touches(tr))
          value = new _ActiveSource(
            value.source,
            0
            /* State.Inactive */
          );
        if (type7 & 4 && value.state == 0)
          value = new _ActiveSource(
            this.source,
            1
            /* State.Pending */
          );
        value = value.updateFor(tr, type7);
        for (let effect of tr.effects) {
          if (effect.is(startCompletionEffect))
            value = new _ActiveSource(value.source, 1, effect.value);
          else if (effect.is(closeCompletionEffect))
            value = new _ActiveSource(
              value.source,
              0
              /* State.Inactive */
            );
          else if (effect.is(setActiveEffect)) {
            for (let active of effect.value)
              if (active.source == value.source)
                value = active;
          }
        }
        return value;
      }
      updateFor(tr, type7) {
        return this.map(tr.changes);
      }
      map(changes) {
        return this;
      }
      touches(tr) {
        return tr.changes.touchesRange(cur(tr.state));
      }
    };
    ActiveResult = class _ActiveResult extends ActiveSource {
      constructor(source, explicit, limit, result, from3, to) {
        super(source, 3, explicit);
        this.limit = limit;
        this.result = result;
        this.from = from3;
        this.to = to;
      }
      hasResult() {
        return true;
      }
      updateFor(tr, type7) {
        var _a2;
        if (!(type7 & 3))
          return this.map(tr.changes);
        let result = this.result;
        if (result.map && !tr.changes.empty)
          result = result.map(result, tr.changes);
        let from3 = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
        let pos = cur(tr.state);
        if (pos > to || !result || type7 & 2 && (cur(tr.startState) == this.from || pos < this.limit))
          return new ActiveSource(
            this.source,
            type7 & 4 ? 1 : 0
            /* State.Inactive */
          );
        let limit = tr.changes.mapPos(this.limit);
        if (checkValid(result.validFor, tr.state, from3, to))
          return new _ActiveResult(this.source, this.explicit, limit, result, from3, to);
        if (result.update && (result = result.update(result, from3, to, new CompletionContext(tr.state, pos, false))))
          return new _ActiveResult(this.source, this.explicit, limit, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr.state));
        return new ActiveSource(this.source, 1, this.explicit);
      }
      map(mapping) {
        if (mapping.empty)
          return this;
        let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
        if (!result)
          return new ActiveSource(
            this.source,
            0
            /* State.Inactive */
          );
        return new _ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
      touches(tr) {
        return tr.changes.touchesRange(this.from, this.to);
      }
    };
    setActiveEffect = /* @__PURE__ */ StateEffect.define({
      map(sources, mapping) {
        return sources.map((s) => s.map(mapping));
      }
    });
    setSelectedEffect = /* @__PURE__ */ StateEffect.define();
    completionState = /* @__PURE__ */ StateField.define({
      create() {
        return CompletionState.start();
      },
      update(value, tr) {
        return value.update(tr);
      },
      provide: (f) => [
        showTooltip.from(f, (val) => val.tooltip),
        EditorView.contentAttributes.from(f, (state) => state.attrs)
      ]
    });
    createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
    acceptCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
        return false;
      return applyCompletion(view, cState.open.options[cState.open.selected]);
    };
    startCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState)
        return false;
      view.dispatch({ effects: startCompletionEffect.of(true) });
      return true;
    };
    closeCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.active.some(
        (a2) => a2.state != 0
        /* State.Inactive */
      ))
        return false;
      view.dispatch({ effects: closeCompletionEffect.of(null) });
      return true;
    };
    RunningQuery = class {
      constructor(active, context) {
        this.active = active;
        this.context = context;
        this.time = Date.now();
        this.updates = [];
        this.done = void 0;
      }
    };
    MaxUpdateCount = 50;
    MinAbortTime = 1e3;
    completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.debounceUpdate = -1;
        this.running = [];
        this.debounceAccept = -1;
        this.pendingStart = false;
        this.composing = 0;
        for (let active of view.state.field(completionState).active)
          if (active.isPending)
            this.startQuery(active);
      }
      update(update) {
        let cState = update.state.field(completionState);
        let conf = update.state.facet(completionConfig);
        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
          return;
        let doesReset = update.transactions.some((tr) => {
          let type7 = getUpdateType(tr, conf);
          return type7 & 8 || (tr.selection || tr.docChanged) && !(type7 & 3);
        });
        for (let i = 0; i < this.running.length; i++) {
          let query = this.running[i];
          if (doesReset || query.context.abortOnDocChange && update.docChanged || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
            for (let handler of query.context.abortListeners) {
              try {
                handler();
              } catch (e) {
                logException(this.view.state, e);
              }
            }
            query.context.abortListeners = null;
            this.running.splice(i--, 1);
          } else {
            query.updates.push(...update.transactions);
          }
        }
        if (this.debounceUpdate > -1)
          clearTimeout(this.debounceUpdate);
        if (update.transactions.some((tr) => tr.effects.some((e) => e.is(startCompletionEffect))))
          this.pendingStart = true;
        let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
        this.debounceUpdate = cState.active.some((a2) => a2.isPending && !this.running.some((q2) => q2.active.source == a2.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
        if (this.composing != 0)
          for (let tr of update.transactions) {
            if (tr.isUserEvent("input.type"))
              this.composing = 2;
            else if (this.composing == 2 && tr.selection)
              this.composing = 3;
          }
      }
      startUpdate() {
        this.debounceUpdate = -1;
        this.pendingStart = false;
        let { state } = this.view, cState = state.field(completionState);
        for (let active of cState.active) {
          if (active.isPending && !this.running.some((r2) => r2.active.source == active.source))
            this.startQuery(active);
        }
        if (this.running.length && cState.open && cState.open.disabled)
          this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      startQuery(active) {
        let { state } = this.view, pos = cur(state);
        let context = new CompletionContext(state, pos, active.explicit, this.view);
        let pending = new RunningQuery(active, context);
        this.running.push(pending);
        Promise.resolve(active.source(context)).then((result) => {
          if (!pending.context.aborted) {
            pending.done = result || null;
            this.scheduleAccept();
          }
        }, (err) => {
          this.view.dispatch({ effects: closeCompletionEffect.of(null) });
          logException(this.view.state, err);
        });
      }
      scheduleAccept() {
        if (this.running.every((q2) => q2.done !== void 0))
          this.accept();
        else if (this.debounceAccept < 0)
          this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
      accept() {
        var _a2;
        if (this.debounceAccept > -1)
          clearTimeout(this.debounceAccept);
        this.debounceAccept = -1;
        let updated = [];
        let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
        for (let i = 0; i < this.running.length; i++) {
          let query = this.running[i];
          if (query.done === void 0)
            continue;
          this.running.splice(i--, 1);
          if (query.done) {
            let pos = cur(query.updates.length ? query.updates[0].startState : this.view.state);
            let limit = Math.min(pos, query.done.from + (query.active.explicit ? 0 : 1));
            let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : pos);
            for (let tr of query.updates)
              active = active.update(tr, conf);
            if (active.hasResult()) {
              updated.push(active);
              continue;
            }
          }
          let current = cState.active.find((a2) => a2.source == query.active.source);
          if (current && current.isPending) {
            if (query.done == null) {
              let active = new ActiveSource(
                query.active.source,
                0
                /* State.Inactive */
              );
              for (let tr of query.updates)
                active = active.update(tr, conf);
              if (!active.isPending)
                updated.push(active);
            } else {
              this.startQuery(current);
            }
          }
        }
        if (updated.length || cState.open && cState.open.disabled)
          this.view.dispatch({ effects: setActiveEffect.of(updated) });
      }
    }, {
      eventHandlers: {
        blur(event) {
          let state = this.view.state.field(completionState, false);
          if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
            let dialog = state.open && getTooltip(this.view, state.open.tooltip);
            if (!dialog || !dialog.dom.contains(event.relatedTarget))
              setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
          }
        },
        compositionstart() {
          this.composing = 1;
        },
        compositionend() {
          if (this.composing == 3) {
            setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
          }
          this.composing = 0;
        }
      }
    });
    windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
    commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
      keydown(event, view) {
        let field = view.state.field(completionState, false);
        if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
          return false;
        let option2 = field.open.options[field.open.selected];
        let result = field.active.find((a2) => a2.source == option2.source);
        let commitChars = option2.completion.commitCharacters || result.result.commitCharacters;
        if (commitChars && commitChars.indexOf(event.key) > -1)
          applyCompletion(view, option2);
        return false;
      }
    }));
    baseTheme3 = /* @__PURE__ */ EditorView.baseTheme({
      ".cm-tooltip.cm-tooltip-autocomplete": {
        "& > ul": {
          fontFamily: "monospace",
          whiteSpace: "nowrap",
          overflow: "hidden auto",
          maxWidth_fallback: "700px",
          maxWidth: "min(700px, 95vw)",
          minWidth: "250px",
          maxHeight: "10em",
          height: "100%",
          listStyle: "none",
          margin: 0,
          padding: 0,
          "& > li, & > completion-section": {
            padding: "1px 3px",
            lineHeight: 1.2
          },
          "& > li": {
            overflowX: "hidden",
            textOverflow: "ellipsis",
            cursor: "pointer"
          },
          "& > completion-section": {
            display: "list-item",
            borderBottom: "1px solid silver",
            paddingLeft: "0.5em",
            opacity: 0.7
          }
        }
      },
      "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
        background: "#17c",
        color: "white"
      },
      "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
        background: "#777"
      },
      "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
        background: "#347",
        color: "white"
      },
      "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
        background: "#444"
      },
      ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
        content: '"\xB7\xB7\xB7"',
        opacity: 0.5,
        display: "block",
        textAlign: "center"
      },
      ".cm-tooltip.cm-completionInfo": {
        position: "absolute",
        padding: "3px 9px",
        width: "max-content",
        maxWidth: `${400}px`,
        boxSizing: "border-box",
        whiteSpace: "pre-line"
      },
      ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
      ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
      ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
      ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
      "&light .cm-snippetField": { backgroundColor: "#00000022" },
      "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
      ".cm-snippetFieldPosition": {
        verticalAlign: "text-top",
        width: 0,
        height: "1.15em",
        display: "inline-block",
        margin: "0 -0.7px -.7em",
        borderLeft: "1.4px dotted #888"
      },
      ".cm-completionMatchedText": {
        textDecoration: "underline"
      },
      ".cm-completionDetail": {
        marginLeft: "0.5em",
        fontStyle: "italic"
      },
      ".cm-completionIcon": {
        fontSize: "90%",
        width: ".8em",
        display: "inline-block",
        textAlign: "center",
        paddingRight: ".6em",
        opacity: "0.6",
        boxSizing: "content-box"
      },
      ".cm-completionIcon-function, .cm-completionIcon-method": {
        "&:after": { content: "'\u0192'" }
      },
      ".cm-completionIcon-class": {
        "&:after": { content: "'\u25CB'" }
      },
      ".cm-completionIcon-interface": {
        "&:after": { content: "'\u25CC'" }
      },
      ".cm-completionIcon-variable": {
        "&:after": { content: "'\u{1D465}'" }
      },
      ".cm-completionIcon-constant": {
        "&:after": { content: "'\u{1D436}'" }
      },
      ".cm-completionIcon-type": {
        "&:after": { content: "'\u{1D461}'" }
      },
      ".cm-completionIcon-enum": {
        "&:after": { content: "'\u222A'" }
      },
      ".cm-completionIcon-property": {
        "&:after": { content: "'\u25A1'" }
      },
      ".cm-completionIcon-keyword": {
        "&:after": { content: "'\u{1F511}\uFE0E'" }
        // Disable emoji rendering
      },
      ".cm-completionIcon-namespace": {
        "&:after": { content: "'\u25A2'" }
      },
      ".cm-completionIcon-text": {
        "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
      }
    });
    FieldPos = class {
      constructor(field, line, from3, to) {
        this.field = field;
        this.line = line;
        this.from = from3;
        this.to = to;
      }
    };
    FieldRange = class _FieldRange {
      constructor(field, from3, to) {
        this.field = field;
        this.from = from3;
        this.to = to;
      }
      map(changes) {
        let from3 = changes.mapPos(this.from, -1, MapMode.TrackDel);
        let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
        return from3 == null || to == null ? null : new _FieldRange(this.field, from3, to);
      }
    };
    Snippet = class _Snippet {
      constructor(lines, fieldPositions) {
        this.lines = lines;
        this.fieldPositions = fieldPositions;
      }
      instantiate(state, pos) {
        let text5 = [], lineStart = [pos];
        let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
        for (let line of this.lines) {
          if (text5.length) {
            let indent7 = baseIndent, tabs = /^\t*/.exec(line)[0].length;
            for (let i = 0; i < tabs; i++)
              indent7 += state.facet(indentUnit);
            lineStart.push(pos + indent7.length - tabs);
            line = indent7 + line.slice(tabs);
          }
          text5.push(line);
          pos += line.length + 1;
        }
        let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
        return { text: text5, ranges };
      }
      static parse(template) {
        let fields = [];
        let lines = [], positions = [], m;
        for (let line of template.split(/\r\n?|\n/)) {
          while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|((?:\\[{}]|[^}])*))\}/.exec(line)) {
            let seq = m[1] ? +m[1] : null, rawName = m[2] || m[3] || "", found = -1;
            let name2 = rawName.replace(/\\[{}]/g, (m2) => m2[1]);
            for (let i = 0; i < fields.length; i++) {
              if (seq != null ? fields[i].seq == seq : name2 ? fields[i].name == name2 : false)
                found = i;
            }
            if (found < 0) {
              let i = 0;
              while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq))
                i++;
              fields.splice(i, 0, { seq, name: name2 });
              found = i;
              for (let pos of positions)
                if (pos.field >= found)
                  pos.field++;
            }
            positions.push(new FieldPos(found, lines.length, m.index, m.index + name2.length));
            line = line.slice(0, m.index) + rawName + line.slice(m.index + m[0].length);
          }
          line = line.replace(/\\([{}])/g, (_, brace, index) => {
            for (let pos of positions)
              if (pos.line == lines.length && pos.from > index) {
                pos.from--;
                pos.to--;
              }
            return brace;
          });
          lines.push(line);
        }
        return new _Snippet(lines, positions);
      }
    };
    fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
      toDOM() {
        let span = document.createElement("span");
        span.className = "cm-snippetFieldPosition";
        return span;
      }
      ignoreEvent() {
        return false;
      }
    }() });
    fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
    ActiveSnippet = class _ActiveSnippet {
      constructor(ranges, active) {
        this.ranges = ranges;
        this.active = active;
        this.deco = Decoration.set(ranges.map((r2) => (r2.from == r2.to ? fieldMarker : fieldRange).range(r2.from, r2.to)));
      }
      map(changes) {
        let ranges = [];
        for (let r2 of this.ranges) {
          let mapped = r2.map(changes);
          if (!mapped)
            return null;
          ranges.push(mapped);
        }
        return new _ActiveSnippet(ranges, this.active);
      }
      selectionInsideField(sel) {
        return sel.ranges.every((range) => this.ranges.some((r2) => r2.field == this.active && r2.from <= range.from && r2.to >= range.to));
      }
    };
    setActive = /* @__PURE__ */ StateEffect.define({
      map(value, changes) {
        return value && value.map(changes);
      }
    });
    moveToField = /* @__PURE__ */ StateEffect.define();
    snippetState = /* @__PURE__ */ StateField.define({
      create() {
        return null;
      },
      update(value, tr) {
        for (let effect of tr.effects) {
          if (effect.is(setActive))
            return effect.value;
          if (effect.is(moveToField) && value)
            return new ActiveSnippet(value.ranges, effect.value);
        }
        if (value && tr.docChanged)
          value = value.map(tr.changes);
        if (value && tr.selection && !value.selectionInsideField(tr.selection))
          value = null;
        return value;
      },
      provide: (f) => EditorView.decorations.from(f, (val) => val ? val.deco : Decoration.none)
    });
    clearSnippet = ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active)
        return false;
      dispatch(state.update({ effects: setActive.of(null) }));
      return true;
    };
    nextSnippetField = /* @__PURE__ */ moveField(1);
    prevSnippetField = /* @__PURE__ */ moveField(-1);
    defaultSnippetKeymap = [
      { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
      { key: "Escape", run: clearSnippet }
    ];
    snippetKeymap = /* @__PURE__ */ Facet.define({
      combine(maps) {
        return maps.length ? maps[0] : defaultSnippetKeymap;
      }
    });
    addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
    snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
      mousedown(event, view) {
        let active = view.state.field(snippetState, false), pos;
        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
          return false;
        let match2 = active.ranges.find((r2) => r2.from <= pos && r2.to >= pos);
        if (!match2 || match2.field == active.active)
          return false;
        view.dispatch({
          selection: fieldSelection(active.ranges, match2.field),
          effects: setActive.of(active.ranges.some((r2) => r2.field > match2.field) ? new ActiveSnippet(active.ranges, match2.field) : null),
          scrollIntoView: true
        });
        return true;
      }
    });
    defaults2 = {
      brackets: ["(", "[", "{", "'", '"'],
      before: ")]}:;>",
      stringPrefixes: []
    };
    closeBracketEffect = /* @__PURE__ */ StateEffect.define({
      map(value, mapping) {
        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
        return mapped == null ? void 0 : mapped;
      }
    });
    closedBracket = /* @__PURE__ */ new class extends RangeValue {
    }();
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    bracketState = /* @__PURE__ */ StateField.define({
      create() {
        return RangeSet.empty;
      },
      update(value, tr) {
        value = value.map(tr.changes);
        if (tr.selection) {
          let line = tr.state.doc.lineAt(tr.selection.main.head);
          value = value.update({ filter: (from3) => from3 >= line.from && from3 <= line.to });
        }
        for (let effect of tr.effects)
          if (effect.is(closeBracketEffect))
            value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
        return value;
      }
    });
    definedClosing = "()[]{}<>\xAB\xBB\xBB\xAB\uFF3B\uFF3D\uFF5B\uFF5D";
    android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
    inputHandler2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, insert2) => {
      if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
        return false;
      let sel = view.state.selection.main;
      if (insert2.length > 2 || insert2.length == 2 && codePointSize2(codePointAt2(insert2, 0)) == 1 || from3 != sel.from || to != sel.to)
        return false;
      let tr = insertBracket(view.state, insert2);
      if (!tr)
        return false;
      view.dispatch(tr);
      return true;
    });
    deleteBracketPair = ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let conf = config(state, state.selection.main.head);
      let tokens2 = conf.brackets || defaults2.brackets;
      let dont = null, changes = state.changeByRange((range) => {
        if (range.empty) {
          let before = prevChar(state.doc, range.head);
          for (let token of tokens2) {
            if (token == before && nextChar(state.doc, range.head) == closing(codePointAt2(token, 0)))
              return {
                changes: { from: range.head - token.length, to: range.head + token.length },
                range: EditorSelection.cursor(range.head - token.length)
              };
          }
        }
        return { range: dont = range };
      });
      if (!dont)
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
      return !dont;
    };
    closeBracketsKeymap = [
      { key: "Backspace", run: deleteBracketPair }
    ];
    completionKeymap = [
      { key: "Ctrl-Space", run: startCompletion },
      { mac: "Alt-`", run: startCompletion },
      { key: "Escape", run: closeCompletion },
      { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
      { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
      { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
      { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
      { key: "Enter", run: acceptCompletion }
    ];
    completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
  }
});

// ../../node_modules/@codemirror/lang-sql/dist/index.js
var dist_exports = {};
__export(dist_exports, {
  Cassandra: () => Cassandra,
  MSSQL: () => MSSQL,
  MariaSQL: () => MariaSQL,
  MySQL: () => MySQL,
  PLSQL: () => PLSQL,
  PostgreSQL: () => PostgreSQL,
  SQLDialect: () => SQLDialect,
  SQLite: () => SQLite,
  StandardSQL: () => StandardSQL,
  keywordCompletionSource: () => keywordCompletionSource,
  schemaCompletionSource: () => schemaCompletionSource,
  sql: () => sql
});
function isAlpha(ch2) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 48 && ch2 <= 57;
}
function isHexDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57 || ch2 >= 97 && ch2 <= 102 || ch2 >= 65 && ch2 <= 70;
}
function readLiteral(input, endQuote, backslashEscapes) {
  for (let escaped = false; ; ) {
    if (input.next < 0)
      return;
    if (input.next == endQuote && !escaped) {
      input.advance();
      return;
    }
    escaped = backslashEscapes && !escaped && input.next == 92;
    input.advance();
  }
}
function readDoubleDollarLiteral(input, tag2) {
  scan: for (; ; ) {
    if (input.next < 0)
      return;
    if (input.next == 36) {
      input.advance();
      for (let i = 0; i < tag2.length; i++) {
        if (input.next != tag2.charCodeAt(i))
          continue scan;
        input.advance();
      }
      if (input.next == 36) {
        input.advance();
        return;
      }
    } else {
      input.advance();
    }
  }
}
function readPLSQLQuotedLiteral(input, openDelim) {
  let matchingDelim = "[{<(".indexOf(String.fromCharCode(openDelim));
  let closeDelim = matchingDelim < 0 ? openDelim : "]}>)".charCodeAt(matchingDelim);
  for (; ; ) {
    if (input.next < 0)
      return;
    if (input.next == closeDelim && input.peek(1) == 39) {
      input.advance(2);
      return;
    }
    input.advance();
  }
}
function readWord(input, result) {
  for (; ; ) {
    if (input.next != 95 && !isAlpha(input.next))
      break;
    if (result != null)
      result += String.fromCharCode(input.next);
    input.advance();
  }
  return result;
}
function readWordOrQuoted(input) {
  if (input.next == 39 || input.next == 34 || input.next == 96) {
    let quote4 = input.next;
    input.advance();
    readLiteral(input, quote4, false);
  } else {
    readWord(input);
  }
}
function readBits(input, endQuote) {
  while (input.next == 48 || input.next == 49)
    input.advance();
  if (endQuote && input.next == endQuote)
    input.advance();
}
function readNumber(input, sawDot) {
  for (; ; ) {
    if (input.next == 46) {
      if (sawDot)
        break;
      sawDot = true;
    } else if (input.next < 48 || input.next > 57) {
      break;
    }
    input.advance();
  }
  if (input.next == 69 || input.next == 101) {
    input.advance();
    if (input.next == 43 || input.next == 45)
      input.advance();
    while (input.next >= 48 && input.next <= 57)
      input.advance();
  }
}
function eol(input) {
  while (!(input.next < 0 || input.next == 10))
    input.advance();
}
function inString(ch2, str) {
  for (let i = 0; i < str.length; i++)
    if (str.charCodeAt(i) == ch2)
      return true;
  return false;
}
function keywords(keywords49, types8, builtin5) {
  let result = /* @__PURE__ */ Object.create(null);
  result["true"] = result["false"] = Bool;
  result["null"] = result["unknown"] = Null;
  for (let kw2 of keywords49.split(" "))
    if (kw2)
      result[kw2] = Keyword;
  for (let tp of types8.split(" "))
    if (tp)
      result[tp] = Type;
  for (let kw2 of (builtin5 || "").split(" "))
    if (kw2)
      result[kw2] = Builtin;
  return result;
}
function dialect(spec, kws, types8, builtin5) {
  let dialect2 = {};
  for (let prop in defaults3)
    dialect2[prop] = (spec.hasOwnProperty(prop) ? spec : defaults3)[prop];
  if (kws)
    dialect2.words = keywords(kws, types8 || "", builtin5);
  return dialect2;
}
function tokensFor(d3) {
  return new ExternalTokenizer((input) => {
    var _a2;
    let { next: next2 } = input;
    input.advance();
    if (inString(next2, Space)) {
      while (inString(input.next, Space))
        input.advance();
      input.acceptToken(whitespace);
    } else if (next2 == 36 && d3.doubleDollarQuotedStrings) {
      let tag2 = readWord(input, "");
      if (input.next == 36) {
        input.advance();
        readDoubleDollarLiteral(input, tag2);
        input.acceptToken(String$1);
      }
    } else if (next2 == 39 || next2 == 34 && d3.doubleQuotedStrings) {
      readLiteral(input, next2, d3.backslashEscapes);
      input.acceptToken(String$1);
    } else if (next2 == 35 && d3.hashComments || next2 == 47 && input.next == 47 && d3.slashComments) {
      eol(input);
      input.acceptToken(LineComment);
    } else if (next2 == 45 && input.next == 45 && (!d3.spaceAfterDashes || input.peek(1) == 32)) {
      eol(input);
      input.acceptToken(LineComment);
    } else if (next2 == 47 && input.next == 42) {
      input.advance();
      for (let depth = 1; ; ) {
        let cur2 = input.next;
        if (input.next < 0)
          break;
        input.advance();
        if (cur2 == 42 && input.next == 47) {
          depth--;
          input.advance();
          if (!depth)
            break;
        } else if (cur2 == 47 && input.next == 42) {
          depth++;
          input.advance();
        }
      }
      input.acceptToken(BlockComment);
    } else if ((next2 == 101 || next2 == 69) && input.next == 39) {
      input.advance();
      readLiteral(input, 39, true);
      input.acceptToken(String$1);
    } else if ((next2 == 110 || next2 == 78) && input.next == 39 && d3.charSetCasts) {
      input.advance();
      readLiteral(input, 39, d3.backslashEscapes);
      input.acceptToken(String$1);
    } else if (next2 == 95 && d3.charSetCasts) {
      for (let i = 0; ; i++) {
        if (input.next == 39 && i > 1) {
          input.advance();
          readLiteral(input, 39, d3.backslashEscapes);
          input.acceptToken(String$1);
          break;
        }
        if (!isAlpha(input.next))
          break;
        input.advance();
      }
    } else if (d3.plsqlQuotingMechanism && (next2 == 113 || next2 == 81) && input.next == 39 && input.peek(1) > 0 && !inString(input.peek(1), Space)) {
      let openDelim = input.peek(1);
      input.advance(2);
      readPLSQLQuotedLiteral(input, openDelim);
      input.acceptToken(String$1);
    } else if (next2 == 40) {
      input.acceptToken(ParenL);
    } else if (next2 == 41) {
      input.acceptToken(ParenR);
    } else if (next2 == 123) {
      input.acceptToken(BraceL);
    } else if (next2 == 125) {
      input.acceptToken(BraceR);
    } else if (next2 == 91) {
      input.acceptToken(BracketL);
    } else if (next2 == 93) {
      input.acceptToken(BracketR);
    } else if (next2 == 59) {
      input.acceptToken(Semi);
    } else if (d3.unquotedBitLiterals && next2 == 48 && input.next == 98) {
      input.advance();
      readBits(input);
      input.acceptToken(Bits);
    } else if ((next2 == 98 || next2 == 66) && (input.next == 39 || input.next == 34)) {
      const quoteStyle = input.next;
      input.advance();
      if (d3.treatBitsAsBytes) {
        readLiteral(input, quoteStyle, d3.backslashEscapes);
        input.acceptToken(Bytes);
      } else {
        readBits(input, quoteStyle);
        input.acceptToken(Bits);
      }
    } else if (next2 == 48 && (input.next == 120 || input.next == 88) || (next2 == 120 || next2 == 88) && input.next == 39) {
      let quoted = input.next == 39;
      input.advance();
      while (isHexDigit(input.next))
        input.advance();
      if (quoted && input.next == 39)
        input.advance();
      input.acceptToken(Number2);
    } else if (next2 == 46 && input.next >= 48 && input.next <= 57) {
      readNumber(input, true);
      input.acceptToken(Number2);
    } else if (next2 == 46) {
      input.acceptToken(Dot);
    } else if (next2 >= 48 && next2 <= 57) {
      readNumber(input, false);
      input.acceptToken(Number2);
    } else if (inString(next2, d3.operatorChars)) {
      while (inString(input.next, d3.operatorChars))
        input.advance();
      input.acceptToken(Operator);
    } else if (inString(next2, d3.specialVar)) {
      if (input.next == next2)
        input.advance();
      readWordOrQuoted(input);
      input.acceptToken(SpecialVar);
    } else if (inString(next2, d3.identifierQuotes)) {
      readLiteral(input, next2, false);
      input.acceptToken(QuotedIdentifier);
    } else if (next2 == 58 || next2 == 44) {
      input.acceptToken(Punctuation);
    } else if (isAlpha(next2)) {
      let word = readWord(input, String.fromCharCode(next2));
      input.acceptToken(input.next == 46 || input.peek(-word.length - 1) == 46 ? Identifier : (_a2 = d3.words[word.toLowerCase()]) !== null && _a2 !== void 0 ? _a2 : Identifier);
    }
  });
}
function tokenBefore(tree) {
  let cursor2 = tree.cursor().moveTo(tree.from, -1);
  while (/Comment/.test(cursor2.name))
    cursor2.moveTo(cursor2.from, -1);
  return cursor2.node;
}
function idName(doc2, node) {
  let text5 = doc2.sliceString(node.from, node.to);
  let quoted = /^([`'"])(.*)\1$/.exec(text5);
  return quoted ? quoted[2] : text5;
}
function plainID(node) {
  return node && (node.name == "Identifier" || node.name == "QuotedIdentifier");
}
function pathFor(doc2, id3) {
  if (id3.name == "CompositeIdentifier") {
    let path = [];
    for (let ch2 = id3.firstChild; ch2; ch2 = ch2.nextSibling)
      if (plainID(ch2))
        path.push(idName(doc2, ch2));
    return path;
  }
  return [idName(doc2, id3)];
}
function parentsFor(doc2, node) {
  for (let path = []; ; ) {
    if (!node || node.name != ".")
      return path;
    let name2 = tokenBefore(node);
    if (!plainID(name2))
      return path;
    path.unshift(idName(doc2, name2));
    node = tokenBefore(name2);
  }
}
function sourceContext(state, startPos) {
  let pos = syntaxTree(state).resolveInner(startPos, -1);
  let aliases = getAliases(state.doc, pos);
  if (pos.name == "Identifier" || pos.name == "QuotedIdentifier" || pos.name == "Keyword") {
    return {
      from: pos.from,
      quoted: pos.name == "QuotedIdentifier" ? state.doc.sliceString(pos.from, pos.from + 1) : null,
      parents: parentsFor(state.doc, tokenBefore(pos)),
      aliases
    };
  }
  if (pos.name == ".") {
    return { from: startPos, quoted: null, parents: parentsFor(state.doc, pos), aliases };
  } else {
    return { from: startPos, quoted: null, parents: [], empty: true, aliases };
  }
}
function getAliases(doc2, at2) {
  let statement2;
  for (let parent = at2; !statement2; parent = parent.parent) {
    if (!parent)
      return null;
    if (parent.name == "Statement")
      statement2 = parent;
  }
  let aliases = null;
  for (let scan = statement2.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling) {
    let kw2 = scan.name == "Keyword" ? doc2.sliceString(scan.from, scan.to).toLowerCase() : null;
    let alias = null;
    if (!sawFrom) {
      sawFrom = kw2 == "from";
    } else if (kw2 == "as" && prevID && plainID(scan.nextSibling)) {
      alias = idName(doc2, scan.nextSibling);
    } else if (kw2 && EndFrom.has(kw2)) {
      break;
    } else if (prevID && plainID(scan)) {
      alias = idName(doc2, scan);
    }
    if (alias) {
      if (!aliases)
        aliases = /* @__PURE__ */ Object.create(null);
      aliases[alias] = pathFor(doc2, prevID);
    }
    prevID = /Identifier$/.test(scan.name) ? scan : null;
  }
  return aliases;
}
function maybeQuoteCompletions(quote4, completions3) {
  if (!quote4)
    return completions3;
  return completions3.map((c2) => Object.assign(Object.assign({}, c2), { label: c2.label[0] == quote4 ? c2.label : quote4 + c2.label + quote4, apply: void 0 }));
}
function isSelfTag(namespace2) {
  return namespace2.self && typeof namespace2.self.label == "string";
}
function nameCompletion(label, type7, idQuote, idCaseInsensitive) {
  if (new RegExp("^[a-z_][a-z_\\d]*$", idCaseInsensitive ? "i" : "").test(label))
    return { label, type: type7 };
  return { label, type: type7, apply: idQuote + label + idQuote };
}
function completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName, dialect2) {
  var _a2;
  let idQuote = ((_a2 = dialect2 === null || dialect2 === void 0 ? void 0 : dialect2.spec.identifierQuotes) === null || _a2 === void 0 ? void 0 : _a2[0]) || '"';
  let top3 = new CompletionLevel(idQuote, !!(dialect2 === null || dialect2 === void 0 ? void 0 : dialect2.spec.caseInsensitiveIdentifiers));
  let defaultSchema = defaultSchemaName ? top3.child(defaultSchemaName) : null;
  top3.addNamespace(schema);
  if (tables)
    (defaultSchema || top3).addCompletions(tables);
  if (schemas)
    top3.addCompletions(schemas);
  if (defaultSchema)
    top3.addCompletions(defaultSchema.list);
  if (defaultTableName)
    top3.addCompletions((defaultSchema || top3).child(defaultTableName).list);
  return (context) => {
    let { parents, from: from3, quoted, empty: empty2, aliases } = sourceContext(context.state, context.pos);
    if (empty2 && !context.explicit)
      return null;
    if (aliases && parents.length == 1)
      parents = aliases[parents[0]] || parents;
    let level = top3;
    for (let name2 of parents) {
      while (!level.children || !level.children[name2]) {
        if (level == top3 && defaultSchema)
          level = defaultSchema;
        else if (level == defaultSchema && defaultTableName)
          level = level.child(defaultTableName);
        else
          return null;
      }
      let next2 = level.maybeChild(name2);
      if (!next2)
        return null;
      level = next2;
    }
    let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;
    let options = level.list;
    if (level == top3 && aliases)
      options = options.concat(Object.keys(aliases).map((name2) => ({ label: name2, type: "constant" })));
    return {
      from: from3,
      to: quoteAfter ? context.pos + 1 : void 0,
      options: maybeQuoteCompletions(quoted, options),
      validFor: quoted ? QuotedSpan : Span
    };
  };
}
function completionType(tokenType) {
  return tokenType == Type ? "type" : tokenType == Keyword ? "keyword" : "variable";
}
function completeKeywords(keywords49, upperCase, build) {
  let completions3 = Object.keys(keywords49).map((keyword3) => build(upperCase ? keyword3.toUpperCase() : keyword3, completionType(keywords49[keyword3])));
  return ifNotIn(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], completeFromList(completions3));
}
function defaultKeyword(label, type7) {
  return { label, type: type7, boost: -1 };
}
function keywordCompletionSource(dialect2, upperCase = false, build) {
  return completeKeywords(dialect2.dialect.words, upperCase, build || defaultKeyword);
}
function schemaCompletionSource(config2) {
  return config2.schema ? completeFromSchema(config2.schema, config2.tables, config2.schemas, config2.defaultTable, config2.defaultSchema, config2.dialect || StandardSQL) : () => null;
}
function schemaCompletion(config2) {
  return config2.schema ? (config2.dialect || StandardSQL).language.data.of({
    autocomplete: schemaCompletionSource(config2)
  }) : [];
}
function sql(config2 = {}) {
  let lang = config2.dialect || StandardSQL;
  return new LanguageSupport(lang.language, [
    schemaCompletion(config2),
    lang.language.data.of({
      autocomplete: keywordCompletionSource(lang, config2.upperCaseKeywords, config2.keywordCompletion)
    })
  ]);
}
var whitespace, LineComment, BlockComment, String$1, Number2, Bool, Null, ParenL, ParenR, BraceL, BraceR, BracketL, BracketR, Semi, Dot, Operator, Punctuation, SpecialVar, Identifier, QuotedIdentifier, Keyword, Type, Bits, Bytes, Builtin, Space, SQLTypes, SQLKeywords, defaults3, tokens, parser$1, EndFrom, Span, QuotedSpan, CompletionLevel, parser, SQLDialect, StandardSQL, PostgreSQL, MySQLKeywords, MySQLTypes, MySQLBuiltin, MySQL, MariaSQL, MSSQL, SQLite, Cassandra, PLSQL;
var init_dist8 = __esm({
  "../../node_modules/@codemirror/lang-sql/dist/index.js"() {
    init_dist5();
    init_dist4();
    init_dist6();
    init_dist7();
    whitespace = 36;
    LineComment = 1;
    BlockComment = 2;
    String$1 = 3;
    Number2 = 4;
    Bool = 5;
    Null = 6;
    ParenL = 7;
    ParenR = 8;
    BraceL = 9;
    BraceR = 10;
    BracketL = 11;
    BracketR = 12;
    Semi = 13;
    Dot = 14;
    Operator = 15;
    Punctuation = 16;
    SpecialVar = 17;
    Identifier = 18;
    QuotedIdentifier = 19;
    Keyword = 20;
    Type = 21;
    Bits = 22;
    Bytes = 23;
    Builtin = 24;
    Space = " 	\r\n";
    SQLTypes = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ";
    SQLKeywords = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ";
    defaults3 = {
      backslashEscapes: false,
      hashComments: false,
      spaceAfterDashes: false,
      slashComments: false,
      doubleQuotedStrings: false,
      doubleDollarQuotedStrings: false,
      unquotedBitLiterals: false,
      treatBitsAsBytes: false,
      charSetCasts: false,
      plsqlQuotingMechanism: false,
      operatorChars: "*+-%<>!=&|~^/",
      specialVar: "?",
      identifierQuotes: '"',
      caseInsensitiveIdentifiers: false,
      words: /* @__PURE__ */ keywords(SQLKeywords, SQLTypes)
    };
    tokens = /* @__PURE__ */ tokensFor(defaults3);
    parser$1 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
      stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
      goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
      nodeNames: "\u26A0 LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
      maxTerm: 38,
      nodeProps: [
        ["isolate", -4, 1, 2, 3, 19, ""]
      ],
      skippedNodes: [0, 1, 2],
      repeatNodeCount: 3,
      tokenData: "RORO",
      tokenizers: [0, tokens],
      topRules: { "Script": [0, 25] },
      tokenPrec: 0
    });
    EndFrom = /* @__PURE__ */ new Set(/* @__PURE__ */ "where group having order union intersect except all distinct limit offset fetch for".split(" "));
    Span = /^\w*$/;
    QuotedSpan = /^[`'"]?\w*[`'"]?$/;
    CompletionLevel = class _CompletionLevel {
      constructor(idQuote, idCaseInsensitive) {
        this.idQuote = idQuote;
        this.idCaseInsensitive = idCaseInsensitive;
        this.list = [];
        this.children = void 0;
      }
      child(name2) {
        let children = this.children || (this.children = /* @__PURE__ */ Object.create(null));
        let found = children[name2];
        if (found)
          return found;
        if (name2 && !this.list.some((c2) => c2.label == name2))
          this.list.push(nameCompletion(name2, "type", this.idQuote, this.idCaseInsensitive));
        return children[name2] = new _CompletionLevel(this.idQuote, this.idCaseInsensitive);
      }
      maybeChild(name2) {
        return this.children ? this.children[name2] : null;
      }
      addCompletion(option2) {
        let found = this.list.findIndex((o) => o.label == option2.label);
        if (found > -1)
          this.list[found] = option2;
        else
          this.list.push(option2);
      }
      addCompletions(completions3) {
        for (let option2 of completions3)
          this.addCompletion(typeof option2 == "string" ? nameCompletion(option2, "property", this.idQuote, this.idCaseInsensitive) : option2);
      }
      addNamespace(namespace2) {
        if (Array.isArray(namespace2)) {
          this.addCompletions(namespace2);
        } else if (isSelfTag(namespace2)) {
          this.addNamespace(namespace2.children);
        } else {
          this.addNamespaceObject(namespace2);
        }
      }
      addNamespaceObject(namespace2) {
        for (let name2 of Object.keys(namespace2)) {
          let children = namespace2[name2], self2 = null;
          let parts = name2.replace(/\\?\./g, (p) => p == "." ? "\0" : p).split("\0");
          let scope = this;
          if (isSelfTag(children)) {
            self2 = children.self;
            children = children.children;
          }
          for (let i = 0; i < parts.length; i++) {
            if (self2 && i == parts.length - 1)
              scope.addCompletion(self2);
            scope = scope.child(parts[i].replace(/\\\./g, "."));
          }
          scope.addNamespace(children);
        }
      }
    };
    parser = /* @__PURE__ */ parser$1.configure({
      props: [
        /* @__PURE__ */ indentNodeProp.add({
          Statement: /* @__PURE__ */ continuedIndent()
        }),
        /* @__PURE__ */ foldNodeProp.add({
          Statement(tree, state) {
            return { from: Math.min(tree.from + 100, state.doc.lineAt(tree.from).to), to: tree.to };
          },
          BlockComment(tree) {
            return { from: tree.from + 2, to: tree.to - 2 };
          }
        }),
        /* @__PURE__ */ styleTags({
          Keyword: tags.keyword,
          Type: tags.typeName,
          Builtin: /* @__PURE__ */ tags.standard(tags.name),
          Bits: tags.number,
          Bytes: tags.string,
          Bool: tags.bool,
          Null: tags.null,
          Number: tags.number,
          String: tags.string,
          Identifier: tags.name,
          QuotedIdentifier: /* @__PURE__ */ tags.special(tags.string),
          SpecialVar: /* @__PURE__ */ tags.special(tags.name),
          LineComment: tags.lineComment,
          BlockComment: tags.blockComment,
          Operator: tags.operator,
          "Semi Punctuation": tags.punctuation,
          "( )": tags.paren,
          "{ }": tags.brace,
          "[ ]": tags.squareBracket
        })
      ]
    });
    SQLDialect = class _SQLDialect {
      constructor(dialect2, language2, spec) {
        this.dialect = dialect2;
        this.language = language2;
        this.spec = spec;
      }
      /**
      Returns the language for this dialect as an extension.
      */
      get extension() {
        return this.language.extension;
      }
      /**
      Define a new dialect.
      */
      static define(spec) {
        let d3 = dialect(spec, spec.keywords, spec.types, spec.builtin);
        let language2 = LRLanguage.define({
          name: "sql",
          parser: parser.configure({
            tokenizers: [{ from: tokens, to: tokensFor(d3) }]
          }),
          languageData: {
            commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
            closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
          }
        });
        return new _SQLDialect(d3, language2, spec);
      }
    };
    StandardSQL = /* @__PURE__ */ SQLDialect.define({});
    PostgreSQL = /* @__PURE__ */ SQLDialect.define({
      charSetCasts: true,
      doubleDollarQuotedStrings: true,
      operatorChars: "+-*/<>=~!@#%^&|`?",
      specialVar: "",
      keywords: SQLKeywords + "abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes",
      types: SQLTypes + "bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml"
    });
    MySQLKeywords = "accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill";
    MySQLTypes = SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed";
    MySQLBuiltin = "charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee";
    MySQL = /* @__PURE__ */ SQLDialect.define({
      operatorChars: "*+-%<>!=&|^",
      charSetCasts: true,
      doubleQuotedStrings: true,
      unquotedBitLiterals: true,
      hashComments: true,
      spaceAfterDashes: true,
      specialVar: "@?",
      identifierQuotes: "`",
      keywords: SQLKeywords + "group_concat " + MySQLKeywords,
      types: MySQLTypes,
      builtin: MySQLBuiltin
    });
    MariaSQL = /* @__PURE__ */ SQLDialect.define({
      operatorChars: "*+-%<>!=&|^",
      charSetCasts: true,
      doubleQuotedStrings: true,
      unquotedBitLiterals: true,
      hashComments: true,
      spaceAfterDashes: true,
      specialVar: "@?",
      identifierQuotes: "`",
      keywords: SQLKeywords + "always generated groupby_concat hard persistent shutdown soft virtual " + MySQLKeywords,
      types: MySQLTypes,
      builtin: MySQLBuiltin
    });
    MSSQL = /* @__PURE__ */ SQLDialect.define({
      keywords: SQLKeywords + "trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock pivot readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx unpivot updlock with",
      types: SQLTypes + "bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image hierarchyid uniqueidentifier sql_variant xml",
      builtin: "binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id",
      operatorChars: "*+-%<>!=^&|/",
      specialVar: "@"
    });
    SQLite = /* @__PURE__ */ SQLDialect.define({
      keywords: SQLKeywords + "abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual",
      types: SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real",
      builtin: "auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width",
      operatorChars: "*+-%<>!=&|/~",
      identifierQuotes: '`"',
      specialVar: "@:?$"
    });
    Cassandra = /* @__PURE__ */ SQLDialect.define({
      keywords: "add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN",
      types: SQLTypes + "ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint",
      slashComments: true
    });
    PLSQL = /* @__PURE__ */ SQLDialect.define({
      keywords: SQLKeywords + "abort accept access add all alter and any arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body by case cast char_base check close cluster clusters colauth column comment commit compress connected constant constraint crash create current currval cursor data_base database dba deallocate debugoff debugon declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry exception exception_init exchange exclusive exists external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base of off offline on online only option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw rebuild record ref references refresh rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work",
      builtin: "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define echo editfile embedded feedback flagger flush heading headsep instance linesize lno loboffset logsource longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar repfooter repheader serveroutput shiftinout show showmode spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout timing trimout trimspool ttitle underline verify version wrap",
      types: SQLTypes + "ascii bfile bfilename bigserial bit blob dec long number nvarchar nvarchar2 serial smallint string text uid varchar2 xml",
      operatorChars: "*/+-%<>!=~",
      doubleQuotedStrings: true,
      charSetCasts: true,
      plsqlQuotingMechanism: true
    });
  }
});

// ../../node_modules/@lezer/cpp/dist/index.js
var RawString, templateArgsEndFallback, MacroName, R, L, u, U, a, z, A, Z, Underscore, Zero, Quote, ParenL2, ParenR2, Space2, GreaterThan, rawString, fallback, cppHighlighting, spec_identifier, spec_, spec_templateArgsEnd, spec_scopedIdentifier, parser2;
var init_dist9 = __esm({
  "../../node_modules/@lezer/cpp/dist/index.js"() {
    init_dist6();
    init_dist4();
    RawString = 1;
    templateArgsEndFallback = 2;
    MacroName = 3;
    R = 82;
    L = 76;
    u = 117;
    U = 85;
    a = 97;
    z = 122;
    A = 65;
    Z = 90;
    Underscore = 95;
    Zero = 48;
    Quote = 34;
    ParenL2 = 40;
    ParenR2 = 41;
    Space2 = 32;
    GreaterThan = 62;
    rawString = new ExternalTokenizer((input) => {
      if (input.next == L || input.next == U) {
        input.advance();
      } else if (input.next == u) {
        input.advance();
        if (input.next == Zero + 8) input.advance();
      }
      if (input.next != R) return;
      input.advance();
      if (input.next != Quote) return;
      input.advance();
      let marker = "";
      while (input.next != ParenL2) {
        if (input.next == Space2 || input.next <= 13 || input.next == ParenR2) return;
        marker += String.fromCharCode(input.next);
        input.advance();
      }
      input.advance();
      for (; ; ) {
        if (input.next < 0)
          return input.acceptToken(RawString);
        if (input.next == ParenR2) {
          let match2 = true;
          for (let i = 0; match2 && i < marker.length; i++)
            if (input.peek(i + 1) != marker.charCodeAt(i)) match2 = false;
          if (match2 && input.peek(marker.length + 1) == Quote)
            return input.acceptToken(RawString, 2 + marker.length);
        }
        input.advance();
      }
    });
    fallback = new ExternalTokenizer((input) => {
      if (input.next == GreaterThan) {
        if (input.peek(1) == GreaterThan)
          input.acceptToken(templateArgsEndFallback, 1);
      } else {
        let sawLetter = false, i = 0;
        for (; ; i++) {
          if (input.next >= A && input.next <= Z) sawLetter = true;
          else if (input.next >= a && input.next <= z) return;
          else if (input.next != Underscore && !(input.next >= Zero && input.next <= Zero + 9)) break;
          input.advance();
        }
        if (sawLetter && i > 1) input.acceptToken(MacroName);
      }
    }, { extend: true });
    cppHighlighting = styleTags({
      "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using requires concept import export module __attribute__ __declspec __based": tags.definitionKeyword,
      "extern MsCallModifier MsPointerModifier extern static register thread_local inline const volatile restrict _Atomic mutable constexpr constinit consteval virtual explicit VirtualSpecifier Access": tags.modifier,
      "if else switch for while do case default return break continue goto throw try catch": tags.controlKeyword,
      "co_return co_yield co_await": tags.controlKeyword,
      "new sizeof delete static_assert": tags.operatorKeyword,
      "NULL nullptr": tags.null,
      this: tags.self,
      "True False": tags.bool,
      "TypeSize PrimitiveType": tags.standard(tags.typeName),
      TypeIdentifier: tags.typeName,
      FieldIdentifier: tags.propertyName,
      "CallExpression/FieldExpression/FieldIdentifier": tags.function(tags.propertyName),
      "ModuleName/Identifier": tags.namespace,
      "PartitionName": tags.labelName,
      StatementIdentifier: tags.labelName,
      "Identifier DestructorName": tags.variableName,
      "CallExpression/Identifier": tags.function(tags.variableName),
      "CallExpression/ScopedIdentifier/Identifier": tags.function(tags.variableName),
      "FunctionDeclarator/Identifier FunctionDeclarator/DestructorName": tags.function(tags.definition(tags.variableName)),
      NamespaceIdentifier: tags.namespace,
      OperatorName: tags.operator,
      ArithOp: tags.arithmeticOperator,
      LogicOp: tags.logicOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      AssignOp: tags.definitionOperator,
      UpdateOp: tags.updateOperator,
      LineComment: tags.lineComment,
      BlockComment: tags.blockComment,
      Number: tags.number,
      String: tags.string,
      "RawString SystemLibString": tags.special(tags.string),
      CharLiteral: tags.character,
      EscapeSequence: tags.escape,
      "UserDefinedLiteral/Identifier": tags.literal,
      PreProcArg: tags.meta,
      "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": tags.processingInstruction,
      MacroName: tags.special(tags.name),
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace,
      "< >": tags.angleBracket,
      ". ->": tags.derefOperator,
      ", ;": tags.separator
    });
    spec_identifier = { __proto__: null, bool: 36, char: 36, int: 36, float: 36, double: 36, void: 36, size_t: 36, ssize_t: 36, intptr_t: 36, uintptr_t: 36, charptr_t: 36, int8_t: 36, int16_t: 36, int32_t: 36, int64_t: 36, uint8_t: 36, uint16_t: 36, uint32_t: 36, uint64_t: 36, char8_t: 36, char16_t: 36, char32_t: 36, char64_t: 36, const: 70, volatile: 72, restrict: 74, _Atomic: 76, mutable: 78, constexpr: 80, constinit: 82, consteval: 84, struct: 88, __declspec: 92, final: 148, override: 148, public: 152, private: 152, protected: 152, virtual: 154, extern: 160, static: 162, register: 164, inline: 166, thread_local: 168, __attribute__: 172, __based: 178, __restrict: 180, __uptr: 180, __sptr: 180, _unaligned: 180, __unaligned: 180, noexcept: 194, requires: 198, TRUE: 784, true: 784, FALSE: 786, false: 786, typename: 218, class: 220, template: 234, throw: 248, __cdecl: 256, __clrcall: 256, __stdcall: 256, __fastcall: 256, __thiscall: 256, __vectorcall: 256, try: 260, catch: 264, export: 282, import: 286, case: 296, default: 298, if: 308, else: 314, switch: 318, do: 322, while: 324, for: 330, return: 334, break: 338, continue: 342, goto: 346, co_return: 350, co_yield: 354, using: 362, typedef: 366, namespace: 380, new: 398, delete: 400, co_await: 402, concept: 406, enum: 410, static_assert: 414, friend: 422, union: 424, explicit: 430, operator: 444, module: 456, signed: 518, unsigned: 518, long: 518, short: 518, decltype: 528, auto: 530, sizeof: 566, NULL: 572, nullptr: 586, this: 588 };
    spec_ = { __proto__: null, "<": 131 };
    spec_templateArgsEnd = { __proto__: null, ">": 135 };
    spec_scopedIdentifier = { __proto__: null, operator: 388, new: 576, delete: 582 };
    parser2 = LRParser.deserialize({
      version: 14,
      states: "$:|Q!QQVOOP'gOUOOO(XOWO'#CdO,RQUO'#CgO,]QUO'#FjO-sQbO'#CxO.UQUO'#CxO0TQUO'#KZO0[QUO'#CwO0gOpO'#DvO0oQ!dO'#D]OOQR'#JO'#JOO5XQVO'#GUO5fQUO'#JVOOQQ'#JV'#JVO8zQUO'#KmO<eQUO'#KmO>{QVO'#E^O?]QUO'#E^OOQQ'#Ed'#EdOOQQ'#Ee'#EeO?bQVO'#EfO@XQVO'#EiOBUQUO'#FPOBvQUO'#FhOOQR'#Fj'#FjOB{QUO'#FjOOQR'#LQ'#LQOOQR'#LP'#LPOETQVO'#KQOFxQUO'#LVOGVQUO'#KqOGkQUO'#LVOH]QUO'#LXOOQR'#HU'#HUOOQR'#HV'#HVOOQR'#HW'#HWOOQR'#K|'#K|OOQR'#J_'#J_Q!QQVOOOHkQVO'#FOOIWQUO'#EhOI_QUOOOKZQVO'#HgOKkQUO'#HgONVQUO'#KqONaQUO'#KqOOQQ'#Kq'#KqO!!_QUO'#KqOOQQ'#Jq'#JqO!!lQUO'#HxOOQQ'#KZ'#KZO!&^QUO'#KZO!&zQUO'#KQO!(zQVO'#I]O!(zQVO'#I`OCQQUO'#KQOOQQ'#Ip'#IpOOQQ'#KQ'#KQO!,}QUO'#KZOOQR'#KY'#KYO!-UQUO'#DZO!/mQUO'#KnOOQQ'#Kn'#KnO!/tQUO'#KnO!/{QUO'#ETO!0QQUO'#EWO!0VQUO'#FRO8zQUO'#FPO!QQVO'#F^O!0[Q#vO'#F`O!0gQUO'#FkO!0oQUO'#FpO!0tQVO'#FrO!0oQUO'#FuO!3sQUO'#FvO!3xQVO'#FxO!4SQUO'#FzO!4XQUO'#F|O!4^QUO'#GOO!4cQVO'#GQO!(zQVO'#GSO!4jQUO'#GpO!4xQUO'#GYO!(zQVO'#FeO!6VQUO'#FeO!6[QVO'#G`O!6cQUO'#GaO!6nQUO'#GnO!6sQUO'#GrO!6xQUO'#GzO!7jQ&lO'#HiO!:mQUO'#GuO!:}QUO'#HXO!;YQUO'#HZO!;bQUO'#DXO!;bQUO'#HuO!;bQUO'#HvO!;yQUO'#HwO!<[QUO'#H|O!=PQUO'#H}O!>uQVO'#IbO!(zQVO'#IdO!?PQUO'#IgO!?WQVO'#IjP!@}{,UO'#CbP!6n{,UO'#CbP!AY{7[O'#CbP!6n{,UO'#CbP!A_{,UO'#CbP!AjOSO'#IzPOOO)CEn)CEnOOOO'#I|'#I|O!AtOWO,59OOOQR,59O,59OO!(zQVO,59VOOQQ,59X,59XO!(zQVO,5;ROOQR,5<U,5<UO!BPQUO,59ZO!(zQVO,5>qOOQR'#IX'#IXOOQR'#IY'#IYOOQR'#IZ'#IZOOQR'#I['#I[O!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!(zQVO,5>rO!DOQVO,5>zOOQQ,5?W,5?WO!EqQVO'#CjO!IjQUO'#CzOOQQ,59d,59dOOQQ,59c,59cOOQQ,5<},5<}O!IwQ&lO,5=mO!?PQUO,5?RO!LkQVO,5?UO!LrQbO,59dO!L}QVO'#FYOOQQ,5?P,5?PO!M_QVO,59WO!MfO`O,5:bO!MkQbO'#D^O!M|QbO'#K_O!N[QbO,59wO!NdQbO'#CxO!NuQUO'#CxO!NzQUO'#KZO# UQUO'#CwOOQR-E<|-E<|O# aQUO,5AoO# hQVO'#EfO@XQVO'#EiOBUQUO,5;kOOQR,5<p,5<pO#$aQUO'#KQO#$hQUO'#KQO!(zQVO'#IUO8zQUO,5;kO#${Q&lO'#HiO#(SQUO'#CtO#*wQbO'#CxO#*|QUO'#CwO#.jQUO'#KZOOQQ-E=T-E=TO#0}QUO,5AXO#1XQUO'#KZO#1cQUO,5AXOOQR,5Ao,5AoOOQQ,5>l,5>lO#3gQUO'#CgO#4]QUO,5>pO#6OQUO'#IeOOQR'#I}'#I}O#6WQUO,5:xO#6tQUO,5:xO#7eQUO,5:xO#8YQUO'#CuO!0QQUO'#CmOOQQ'#JW'#JWO#6tQUO,5:xO#8bQUO,5;QO!4xQUO'#DOO#9kQUO,5;QO#9pQUO,5>QO#:|QUO'#DOO#;dQUO,5>{O#;iQUO'#KwO#<rQUO,5;TO#<zQVO,5;TO#=UQUO,5;TOOQQ,5;T,5;TO#>}QUO'#L[O#?UQUO,5>UO#?ZQbO'#CxO#?fQUO'#GcO#?kQUO'#E^O#@[QUO,5;kO#@sQUO'#K}O#@{QUO,5;rOKkQUO'#HfOBUQUO'#HgO#AQQUO'#KqO!6nQUO'#HjO#AxQUO'#CuO!0tQVO,5<SOOQQ'#Cg'#CgOOQR'#Jh'#JhO#A}QVO,5=`OOQQ,5?Z,5?ZO#DWQbO'#CxO#DcQUO'#GcOOQQ'#Ji'#JiOOQQ-E=g-E=gOGVQUO,5AqOGkQUO,5AqO#DhQUO,5AsO#DsQUO'#G|OOQR,5Aq,5AqO#DhQUO,5AqO#EOQUO'#HOO#EWQUO,5AsOOQR,5As,5AsOOQR,5At,5AtO#EfQVO,5AtOOQR-E=]-E=]O#G`QVO,5;jOOQR,5;j,5;jO#IaQUO'#EjO#JfQUO'#EwO#K]QVO'#ExO#MoQUO'#EvO#MwQUO'#EyO#NvQUO'#EzOOQQ'#Kz'#KzO$ mQUO,5;SO$!sQUO'#EvOOQQ,5;S,5;SO$#pQUO,5;SO$%cQUO,5:yO$'|QVO,5>PO$(WQUO'#E[O$(eQUO,5>ROOQQ,5>S,5>SO$,RQVO'#C|OOQQ-E=o-E=oOOQQ,5>d,5>dOOQQ,59a,59aO$,]QUO,5>wO$.]QUO,5>zO!6nQUO,59uO$.pQUO,5;qO$.}QUO,5<{O!0QQUO,5:oOOQQ,5:r,5:rO$/YQUO,5;mO$/_QUO'#KmOBUQUO,5;kOOQR,5;x,5;xO$0OQUO'#FbO$0^QUO'#FbO$0cQUO,5;zO$3|QVO'#FmO!0tQVO,5<VO!0oQUO,5<VO!0VQUO,5<[O$4TQVO'#GUO$7PQUO,5<^O!0tQVO,5<aO$:gQVO,5<bO$:tQUO,5<dOOQR,5<d,5<dO$;}QUO,5<dOOQR,5<f,5<fOOQR,5<h,5<hOOQQ'#Fi'#FiO$<SQUO,5<jO$<XQUO,5<lOOQR,5<l,5<lO$=_QUO,5<nO$>eQUO,5<rO$>pQUO,5=[O$>uQUO,5=[O!4xQUO,5<tO$>}QUO,5<tO$?cQUO,5<PO$@iQVO,5<PO$BzQUO,5<zOOQR,5<z,5<zOOQR,5<{,5<{O$>uQUO,5<{O$DQQUO,5<{O$D]QUO,5=YO!(zQVO,5=^O!(zQVO,5=fO#NeQUO,5=mOOQQ,5>T,5>TO$FbQUO,5>TO$FlQUO,5>TO$FqQUO,5>TO$FvQUO,5>TO!6nQUO,5>TO$HtQUO'#KZO$H{QUO,5=oO$IWQUO,5=aOKkQUO,5=oO$JQQUO,5=sOOQR,5=s,5=sO$JYQUO,5=sO$LeQVO'#H[OOQQ,5=u,5=uO!;]QUO,5=uO%#`QUO'#KjO%#gQUO'#K[O%#{QUO'#KjO%$VQUO'#DyO%$hQUO'#D|O%'eQUO'#K[OOQQ'#K['#K[O%)WQUO'#K[O%#gQUO'#K[O%)]QUO'#K[OOQQ,59s,59sOOQQ,5>a,5>aOOQQ,5>b,5>bO%)eQUO'#HzO%)mQUO,5>cOOQQ,5>c,5>cO%-XQUO,5>cO%-dQUO,5>hO%1OQVO,5>iO%1VQUO,5>|O# hQVO'#EfO%4]QUO,5>|OOQQ,5>|,5>|O%4|QUO,5?OO%7QQUO,5?RO!<[QUO,5?RO%8|QUO,5?UO%<iQVO,5?UP!A_{,UO,58|P%<p{,UO,58|P%=O{7[O,58|P%=U{,UO,58|PO{O'#Ju'#JuP%=Z{,UO'#LcPOOO'#Lc'#LcP%=a{,UO'#LcPOOO,58|,58|POOO,5?f,5?fP%=fOSO,5?fOOOO-E<z-E<zOOQR1G.j1G.jO%=mQUO1G.qO%>sQUO1G0mOOQQ1G0m1G0mO%@PQUO'#CpO%B`QbO'#CxO%BkQUO'#CsO%BpQUO'#CsO%BuQUO1G.uO#AxQUO'#CrOOQQ1G.u1G.uO%DxQUO1G4]O%FOQUO1G4^O%GqQUO1G4^O%IdQUO1G4^O%KVQUO1G4^O%LxQUO1G4^O%NkQUO1G4^O&!^QUO1G4^O&$PQUO1G4^O&%rQUO1G4^O&'eQUO1G4^O&)WQUO1G4^O&*yQUO'#KPO&,SQUO'#KPO&,[QUO,59UOOQQ,5=P,5=PO&.dQUO,5=PO&.nQUO,5=PO&.sQUO,5=PO&.xQUO,5=PO!6nQUO,5=PO#NeQUO1G3XO&/SQUO1G4mO!<[QUO1G4mO&1OQUO1G4pO&2qQVO1G4pOOQQ1G/O1G/OOOQQ1G.}1G.}OOQQ1G2i1G2iO!IwQ&lO1G3XO&2xQUO'#LOO@XQVO'#EiO&4RQUO'#F]OOQQ'#Ja'#JaO&4WQUO'#FZO&4cQUO'#LOO&4kQUO,5;tO&4pQUO1G.rOOQQ1G.r1G.rOOQR1G/|1G/|O&6cQ!dO'#JPO&6hQbO,59xO&8yQ!eO'#D`O&9QQ!dO'#JRO&9VQbO,5@yO&9VQbO,5@yOOQR1G/c1G/cO&9bQbO1G/cO&9gQ&lO'#GeO&:eQbO,59dOOQR1G7Z1G7ZO#@[QUO1G1VO&:pQUO1G1^OBUQUO1G1VO&=RQUO'#CzO#*wQbO,59dO&@tQUO1G6sOOQR-E<{-E<{O&BWQUO1G0dO#6WQUO1G0dOOQQ-E=U-E=UO#6tQUO1G0dOOQQ1G0l1G0lO&B{QUO,59jOOQQ1G3l1G3lO&CcQUO,59jO&CyQUO,59jO!M_QVO1G4gO!(zQVO'#JYO&DeQUO,5AcOOQQ1G0o1G0oO!(zQVO1G0oO!6nQUO'#JnO&DmQUO,5AvOOQQ1G3p1G3pOOQR1G1V1G1VO&HjQVO'#FOO!M_QVO,5;sOOQQ,5;s,5;sOBUQUO'#JcO&JfQUO,5AiO&JnQVO'#E[OOQR1G1^1G1^O&M]QUO'#L[OOQR1G1n1G1nOOQR-E=f-E=fOOQR1G7]1G7]O#DhQUO1G7]OGVQUO1G7]O#DhQUO1G7_OOQR1G7_1G7_O&MeQUO'#G}O&MmQUO'#LWOOQQ,5=h,5=hO&M{QUO,5=jO&NQQUO,5=kOOQR1G7`1G7`O#EfQVO1G7`O&NVQUO1G7`O' ]QVO,5=kOOQR1G1U1G1UO$.vQUO'#E]O'!RQUO'#E]OOQQ'#Ky'#KyO'!lQUO'#KxO'!wQUO,5;UO'#PQUO'#ElO'#dQUO'#ElO'#wQUO'#EtOOQQ'#J['#J[O'#|QUO,5;cO'$sQUO,5;cO'%nQUO,5;dO'&tQVO,5;dOOQQ,5;d,5;dO''OQVO,5;dO'&tQVO,5;dO''VQUO,5;bO'(SQUO,5;eO'(_QUO'#KpO'(gQUO,5:vO'(lQUO,5;fOOQQ1G0n1G0nOOQQ'#J]'#J]O''VQUO,5;bO!4xQUO'#E}OOQQ,5;b,5;bO')gQUO'#E`O'+aQUO'#E{OHrQUO1G0nO'+fQUO'#EbOOQQ'#JX'#JXO'-OQUO'#KrOOQQ'#Kr'#KrO'-xQUO1G0eO'.pQUO1G3kO'/vQVO1G3kOOQQ1G3k1G3kO'0QQVO1G3kO'0XQUO'#L_O'1eQUO'#KXO'1sQUO'#KWO'2OQUO,59hO'2WQUO1G/aO'2]QUO'#FPOOQR1G1]1G1]OOQR1G2g1G2gO$>uQUO1G2gO'2gQUO1G2gO'2rQUO1G0ZOOQR'#J`'#J`O'2wQVO1G1XO'8pQUO'#FTO'8uQUO1G1VO!6nQUO'#JdO'9TQUO,5;|O$0^QUO,5;|OOQQ'#Fc'#FcOOQQ,5;|,5;|O'9cQUO1G1fOOQR1G1f1G1fO'9kQUO,5<XO$.vQUO'#FWOBUQUO'#FWO'9rQUO,5<XO!(zQVO,5<XO'9zQUO,5<XO':PQVO1G1qO!0tQVO1G1qOOQR1G1v1G1vO'?oQUO1G1xOOQR1G1{1G1{O'?tQUO1G1|OBUQUO1G2]O'@}QVO1G1|O'CcQUO1G1|O'ChQUO'#GWO8zQUO1G2]OOQR1G2O1G2OOOQR1G2U1G2UOOQR1G2W1G2WOOQR1G2Y1G2YO'CmQUO1G2^O!4xQUO1G2^OOQR1G2v1G2vO'CuQUO1G2vO$>}QUO1G2`OOQQ'#Cv'#CvO'CzQUO'#G[O'DuQUO'#G[O'DzQUO'#LRO'EYQUO'#G_OOQQ'#LS'#LSO'EhQUO1G2`O'EmQVO1G1kO'HOQVO'#GUOBUQUO'#FWOOQR'#Je'#JeO'EmQVO1G1kO'HYQUO'#FvOOQR1G2f1G2fO'H_QUO1G2gO'HdQUO'#JgO'2gQUO1G2gO!(zQVO1G2tO'HlQUO1G2xO'IuQUO1G3QO'J{QUO1G3XOOQQ1G3o1G3oO'KaQUO1G3oOOQR1G3Z1G3ZO'KfQUO'#KZO'2]QUO'#LTOGkQUO'#LVOOQR'#Gy'#GyO#DhQUO'#LXOOQR'#HQ'#HQO'KpQUO'#GvO'#wQUO'#GuOOQR1G2{1G2{O'LmQUO1G2{O'MdQUO1G3ZO'MoQUO1G3_O'MtQUO1G3_OOQR1G3_1G3_O'M|QUO'#H]OOQR'#H]'#H]O( VQUO'#H]O!(zQVO'#H`O!(zQVO'#H_OOQR'#LZ'#LZO( [QUO'#LZOOQR'#Jk'#JkO( aQVO,5=vOOQQ,5=v,5=vO( hQUO'#H^O( pQUO'#HZOOQQ1G3a1G3aO( zQUO,5@vOOQQ,5@v,5@vO%)WQUO,5@vO%)]QUO,5@vO%$VQUO,5:eO(%iQUO'#KkO(%wQUO'#KkOOQQ,5:e,5:eOOQQ'#JS'#JSO(&SQUO'#D}O(&^QUO'#KqOGkQUO'#LVO('YQUO'#D}OOQQ'#Hp'#HpOOQQ'#Hr'#HrOOQQ'#Hs'#HsOOQQ'#Kl'#KlOOQQ'#JU'#JUO('dQUO,5:hOOQQ,5:h,5:hO((aQUO'#LVO((nQUO'#HtO()UQUO,5@vO()]QUO'#H{O()hQUO'#L^O()pQUO,5>fO()uQUO'#L]OOQQ1G3}1G3}O(-lQUO1G3}O(-sQUO1G3}O(-zQUO1G4TO(/QQUO1G4TO(/VQUO,5A|O!6nQUO1G4hO!(zQVO'#IiOOQQ1G4m1G4mO(/[QUO1G4mO(1_QVO1G4pPOOO1G.h1G.hP!A_{,UO1G.hP(3_QUO'#LeP(3j{,UO1G.hP(3o{7[O1G.hPO{O-E=s-E=sPOOO,5A},5A}P(3w{,UO,5A}POOO1G5Q1G5QO!(zQVO7+$]O(3|QUO'#CzOOQQ,59_,59_O(4XQbO,59dO(4dQbO,59_OOQQ,59^,59^OOQQ7+)w7+)wO!M_QVO'#JtO(4oQUO,5@kOOQQ1G.p1G.pOOQQ1G2k1G2kO(4wQUO1G2kO(4|QUO7+(sOOQQ7+*X7+*XO(7bQUO7+*XO(7iQUO7+*XO(1_QVO7+*[O#NeQUO7+(sO(7vQVO'#JbO(8ZQUO,5AjO(8cQUO,5;vOOQQ'#Cp'#CpOOQQ,5;w,5;wO!(zQVO'#F[OOQQ-E=_-E=_O!M_QVO,5;uOOQQ1G1`1G1`OOQQ,5?k,5?kOOQQ-E<}-E<}OOQR'#Dg'#DgOOQR'#Di'#DiOOQR'#Dl'#DlO(9lQ!eO'#K`O(9sQMkO'#K`O(9zQ!eO'#K`OOQR'#K`'#K`OOQR'#JQ'#JQO(:RQ!eO,59zOOQQ,59z,59zO(:YQbO,5?mOOQQ-E=P-E=PO(:hQbO1G6eOOQR7+$}7+$}OOQR7+&q7+&qOOQR7+&x7+&xO'8uQUO7+&qO(:sQUO7+&OO#6WQUO7+&OO(;hQUO1G/UO(<OQUO1G/UO(<jQUO7+*ROOQQ7+*V7+*VO(>]QUO,5?tOOQQ-E=W-E=WO(?fQUO7+&ZOOQQ,5@Y,5@YOOQQ-E=l-E=lO(?kQUO'#LOO@XQVO'#EiO(@wQUO1G1_OOQQ1G1_1G1_O(BQQUO,5?}OOQQ,5?},5?}OOQQ-E=a-E=aO(BfQUO'#KpOOQR7+,w7+,wO#DhQUO7+,wOOQR7+,y7+,yO(BsQUO,5=iO#DsQUO'#JjO(CUQUO,5ArOOQR1G3U1G3UOOQR1G3V1G3VO(CdQUO7+,zOOQR7+,z7+,zO(E[QUO,5:wO(FyQUO'#EwO!(zQVO,5;VO(GlQUO,5:wO(GvQUO'#EpO(HXQUO'#EzOOQQ,5;Z,5;ZO#K]QVO'#ExO(HoQUO,5:wO(HvQUO'#EyO#GgQUO'#JZO(J`QUO,5AdOOQQ1G0p1G0pO(JkQUO,5;WO!<[QUO,5;^O(KUQUO,5;_O(KdQUO,5;WO(MvQUO,5;`OOQQ-E=Y-E=YO(NOQUO1G0}OOQQ1G1O1G1OO(NyQUO1G1OO)!PQVO1G1OO)!WQVO1G1OO)!bQUO1G0|OOQQ1G0|1G0|OOQQ1G1P1G1PO)#_QUO'#JoO)#iQUO,5A[OOQQ1G0b1G0bOOQQ-E=Z-E=ZO)#qQUO,5;iO!<[QUO,5;iO)$nQVO,5:zO)$uQUO,5;gO$ mQUO7+&YOOQQ7+&Y7+&YO!(zQVO'#EfO)$|QUO,5:|OOQQ'#Ks'#KsOOQQ-E=V-E=VOOQQ,5A^,5A^OOQQ'#Jl'#JlO)(qQUO7+&PPOQQ7+&P7+&POOQQ7+)V7+)VO))iQUO7+)VO)*oQVO7+)VOOQQ,5>m,5>mO$)YQVO'#JsO)*vQUO,5@rOOQQ1G/S1G/SOOQQ7+${7+${O)+RQUO7+(RO)+WQUO7+(ROOQR7+(R7+(RO$>uQUO7+(ROOQQ7+%u7+%uOOQR-E=^-E=^O!0VQUO,5;oOOQQ,5@O,5@OOOQQ-E=b-E=bO$0^QUO1G1hOOQQ1G1h1G1hOOQR7+'Q7+'QOOQR1G1s1G1sOBUQUO,5;rO)+tQUO,5<YO)+{QUO1G1sO)-UQUO1G1sO!0tQVO7+']O)-ZQVO7+']O)2yQUO7+'dO)3OQVO7+'hO)5dQUO7+'wO)5nQUO7+'hO)6tQVO7+'hOKkQUO7+'wO$>hQUO,5<rO!4xQUO7+'xO)6{QUO7+'xOOQR7+(b7+(bO)7QQUO7+'zO)7VQUO,5<vO'CzQUO,5<vO)7}QUO,5<vO'CzQUO,5<vOOQQ,5<w,5<wO)8`QVO,5<xO'EYQUO'#JfO)8jQUO,5AmO)8rQUO,5<yOOQR7+'z7+'zO)8}QVO7+'VO)5gQUO'#K}OOQR-E=c-E=cO);`QVO,5<bOOQQ,5@R,5@RO!6nQUO,5@ROOQQ-E=e-E=eO)=wQUO7+(`O)>}QUO7+(dO)?SQVO7+(dOOQQ7+(l7+(lOOQQ7+)Z7+)ZO)?[QUO'#KjO)?fQUO'#KjOOQR,5=b,5=bO)?sQUO,5=bO!;bQUO,5=bO!;bQUO,5=bO!;bQUO,5=bOOQR7+(g7+(gOOQR7+(u7+(uOOQR7+(y7+(yOOQR,5=w,5=wO)?xQUO,5=zO)AOQUO,5=yOOQR,5Au,5AuOOQR-E=i-E=iOOQQ1G3b1G3bO)BUQUO,5=xO)BZQVO'#EfOOQQ1G6b1G6bO%)WQUO1G6bO%)]QUO1G6bOOQQ1G0P1G0POOQQ-E=Q-E=QO)DrQUO,5AVO(%iQUO'#JTO)D}QUO,5AVO)D}QUO,5AVO)EVQUO,5:iO8zQUO,5:iOOQQ,5>],5>]O)EaQUO,5AqO)EhQUO'#EVO)FrQUO'#EVO)G]QUO,5:iO)GgQUO'#HlO)GgQUO'#HmOOQQ'#Ko'#KoO)HUQUO'#KoO!(zQVO'#HnOOQQ,5:i,5:iO)HvQUO,5:iO!M_QVO,5:iOOQQ-E=S-E=SOOQQ1G0S1G0SOOQQ,5>`,5>`O)H{QUO1G6bO!(zQVO,5>gO)LjQUO'#JrO)LuQUO,5AxOOQQ1G4Q1G4QO)L}QUO,5AwOOQQ,5Aw,5AwOOQQ7+)i7+)iO*!lQUO7+)iOOQQ7+)o7+)oO*'kQVO1G7hO*)mQUO7+*SO*)rQUO,5?TO**xQUO7+*[POOO7+$S7+$SP*,kQUO'#LfP*,sQUO,5BPP*,x{,UO7+$SPOOO1G7i1G7iO*,}QUO<<GwOOQQ1G.y1G.yOOQQ'#IT'#ITO*.pQUO,5@`OOQQ,5@`,5@`OOQQ-E=r-E=rOOQQ7+(V7+(VOOQQ<<Ms<<MsO*/yQUO<<MsO*1|QUO<<MvO*3oQUO<<L_O*4TQUO,5?|OOQQ,5?|,5?|OOQQ-E=`-E=`OOQQ1G1b1G1bO*5^QUO,5;vO*6dQUO1G1aOOQQ1G1a1G1aOOQR,5@z,5@zO*7mQ!eO,5@zO*7tQMkO,5@zO*7{Q!eO,5@zOOQR-E=O-E=OOOQQ1G/f1G/fO*8SQ!eO'#DwOOQQ1G5X1G5XOOQR<<J]<<J]O*8ZQUO<<IjO*9OQUO7+$pOOQQ<<Iu<<IuO(7vQVO,5;ROOQR<=!c<=!cOOQQ1G3T1G3TOOQQ,5@U,5@UOOQQ-E=h-E=hOOQR<=!f<=!fO*9{QUO1G0cO*:SQUO'#EzO*:dQUO1G0cO*:kQUO'#I}O*<RQUO1G0qO!(zQVO1G0qOOQQ,5;[,5;[OOQQ,5;],5;]OOQQ,5?u,5?uOOQQ-E=X-E=XO!<[QUO1G0xO*=bQUO1G0xOOQQ1G0y1G0yO*=sQUO'#ElOOQQ1G0z1G0zOOQQ7+&j7+&jO*>XQUO7+&jO*?_QVO7+&jOOQQ7+&h7+&hOOQQ,5@Z,5@ZOOQQ-E=m-E=mO*@ZQUO1G1TO*@eQUO1G1TO*AOQUO1G0fOOQQ1G0f1G0fO*BUQUO'#K{O*B^QUO1G1ROOQQ<<It<<ItOOQQ'#Hb'#HbO'+fQUO,5={OOQQ'#Hd'#HdO'+fQUO,5=}OOQQ-E=j-E=jPOQQ<<Ik<<IkPOQQ-E=k-E=kOOQQ<<Lq<<LqO*BcQUO'#LaO*CoQUO'#L`OOQQ,5@_,5@_OOQQ-E=q-E=qOOQR<<Km<<KmO$>uQUO<<KmO*C}QUO<<KmOOQR1G1Z1G1ZOOQQ7+'S7+'SO!M_QVO1G1tO*DSQUO1G1tOOQR7+'_7+'_OOQR<<Jw<<JwO!0tQVO<<JwOOQR<<KO<<KOO*D_QUO<<KSO*EeQVO<<KSOKkQUO<<KcO!M_QVO<<KcO*ElQUO<<KSO!0tQVO<<KSO*FuQUO<<KSO*FzQUO<<KcO*GVQUO<<KdOOQR<<Kd<<KdOOQR<<Kf<<KfO*G[QUO1G2bO)7VQUO1G2bO'CzQUO1G2bO*GmQUO1G2dO*HsQVO1G2dOOQQ1G2d1G2dO*H}QVO1G2dO*IUQUO,5@QOOQQ-E=d-E=dOOQQ1G2e1G2eO*IdQUO1G1|O*JmQVO1G1|O*JtQUO1G1|OOQQ1G5m1G5mOOQR<<Kz<<KzOOQR<<LO<<LOO*JyQVO<<LOO*KUQUO<<LOOOQR1G2|1G2|O*KZQUO1G2|O*KbQUO1G3eOOQR1G3d1G3dOOQQ7++|7++|O%)WQUO7++|O*KmQUO1G6qO*KmQUO1G6qO(%iQUO,5?oO*KuQUO,5?oOOQQ-E=R-E=RO*LQQUO1G0TOOQQ1G0T1G0TO*L[QUO1G0TO!M_QVO1G0TO*LaQUO1G0TOOQQ1G3w1G3wO*LkQUO,5:qO)EhQUO,5:qO*MXQUO,5:qO)EhQUO,5:qO$#uQUO,5:uO*MvQVO,5>VO)GgQUO'#JpO*NQQUO1G0TO*NcQVO1G0TOOQQ1G3u1G3uO*NjQUO,5>WO*NuQUO,5>XO+ dQUO,5>YO+!jQUO1G0TO%)]QUO7++|O+#pQUO1G4ROOQQ,5@^,5@^OOQQ-E=p-E=pOOQQ<<MT<<MTOOQQ<<Mn<<MnO+$yQUO1G4oP+&|QUO'#JvP+'UQUO,5BQPO{O1G7k1G7kPOOO<<Gn<<GnOOQQANC_ANC_OOQR1G6f1G6fO+'^Q!eO,5:cOOQQ,5:c,5:cO+'eQUO1G0mO+(qQUO7+&]O+*QQUO7+&dO+*cQUO,5;WOOQQ<<JU<<JUO+*qQUO7+&oOOQQ7+&Q7+&QO!4xQUO'#J^O++lQUO,5AgOOQQ7+&m7+&mOOQQ1G3g1G3gO++tQUO1G3iOOQQ,5>n,5>nO+/iQUOANAXOOQRANAXANAXO+/nQUO7+'`OOQRAN@cAN@cO+0zQVOAN@nO+1RQUOAN@nO!0tQVOAN@nO+2[QUOAN@nO+2aQUOAN@}O+2lQUOAN@}O+3rQUOAN@}OOQRAN@nAN@nO!M_QVOAN@}OOQRANAOANAOO+3wQUO7+'|O)7VQUO7+'|OOQQ7+(O7+(OO+4YQUO7+(OO+5`QVO7+(OO+5gQVO7+'hO+5nQUOANAjOOQR7+(h7+(hOOQR7+)P7+)PO+5sQUO7+)PO+5xQUO7+)POOQQ<= h<= hO+6QQUO7+,]O+6YQUO1G5ZOOQQ1G5Z1G5ZO+6eQUO7+%oOOQQ7+%o7+%oO+6vQUO7+%oO*NcQVO7+%oOOQQ7+)a7+)aO+6{QUO7+%oO+8RQUO7+%oO!M_QVO7+%oO+8]QUO1G0]O*LkQUO1G0]O)EhQUO1G0]OOQQ1G0a1G0aO+8zQUO1G3qO+:QQVO1G3qOOQQ1G3q1G3qO+:[QVO1G3qO+:cQUO,5@[OOQQ-E=n-E=nOOQQ1G3r1G3rO%)WQUO<= hOOQQ7+*Z7+*ZPOQQ,5@b,5@bPOQQ-E=t-E=tOOQQ1G/}1G/}OOQQ,5?x,5?xOOQQ-E=[-E=[OOQRG26sG26sO+:zQUOG26YO!0tQVOG26YO+<TQUOG26YOOQRG26YG26YO!M_QVOG26iO!0tQVOG26iO+<YQUOG26iO+=`QUOG26iO+=eQUO<<KhOOQQ<<Kj<<KjOOQRG27UG27UOOQR<<Lk<<LkO+=vQUO<<LkOOQQ7+*u7+*uOOQQ<<IZ<<IZO+={QUO<<IZO!M_QVO<<IZO+>QQUO<<IZO+?WQUO<<IZO*NcQVO<<IZOOQQ<<L{<<L{O+?iQUO7+%wO*LkQUO7+%wOOQQ7+)]7+)]O+@WQUO7+)]O+A^QVO7+)]OOQQANESANESO!0tQVOLD+tOOQRLD+tLD+tO+AeQUOLD,TO+BkQUOLD,TOOQRLD,TLD,TO!0tQVOLD,TOOQRANBVANBVOOQQAN>uAN>uO+BpQUOAN>uO+CvQUOAN>uO!M_QVOAN>uO+C{QUO<<IcOOQQ<<Lw<<LwOOQR!$( `!$( `O!0tQVO!$( oOOQR!$( o!$( oOOQQG24aG24aO+DjQUOG24aO+EpQUOG24aOOQR!)9EZ!)9EZOOQQLD){LD){O+EuQUO'#CgO(dQUO'#CgO+IrQUO'#CzO+LcQUO'#CzO!E{QUO'#CzO+M[QUO'#CzO+MoQUO'#CzO,#bQUO'#CzO,#rQUO'#CzO,$PQUO'#CzO,$[QbO,59dO,$gQbO,59dO,$rQbO,59dO,$}QbO'#CxO,%`QbO'#CxO,%qQbO'#CxO,&SQUO'#CgO,(gQUO'#CgO,(tQUO'#CgO,+iQUO'#CgO,.lQUO'#CgO,.|QUO'#CgO,2uQUO'#CgO,2|QUO'#CgO,3|QUO'#CgO,6VQUO,5:xO#?kQUO,5:xO#?kQUO,5:xO#=ZQUO'#L[O,6sQbO'#CxO,7OQbO'#CxO,7ZQbO'#CxO,7fQbO'#CxO#6tQUO'#E^O,7qQUO'#E^O,9OQUO'#HgO,9pQbO'#CxO,9{QbO'#CxO,:WQUO'#CwO,:]QUO'#CwO,:bQUO'#CpO,:pQbO,59dO,:{QbO,59dO,;WQbO,59dO,;cQbO,59dO,;nQbO,59dO,;yQbO,59dO,<UQbO,59dO,6VQUO1G0dO,<aQUO1G0dO#?kQUO1G0dO,7qQUO1G0dO,>nQUO'#KZO,?OQUO'#CzO,?^QbO,59dO,6VQUO7+&OO,<aQUO7+&OO,?iQUO'#EwO,@[QUO'#EzO,@{QUO'#E^O,AQQUO'#GcO,AVQUO'#CwO,A[QUO'#CxO,AaQUO'#CxO,AfQUO'#CwO,AkQUO'#GcO,ApQUO'#KZO,B^QUO'#KZO,BhQUO'#CwO,BsQUO'#CwO,COQUO'#CwO,<aQUO,5:xO,7qQUO,5:xO,7qQUO,5:xO,CZQUO'#KZO,CnQbO'#CxO,CyQUO'#CsO,DOQUO'#E^",
      stateData: ",Dt~O(nOSSOSTOSRPQVPQ'ePQ'gPQ'hPQ'iPQ'jPQ'kPQ'lPQ'mPQ~O*ZOS~OPmO]eOb!]Oe!POmTOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!TxO!VfO!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$R!gO$T!hO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO${!tO$}!uO%U!yO%_#ZO%`#[O%a#YO%c!zO%e#UO%g!{O%l#SO%o!|O%v!}O%|#PO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(rRO)QYO)TaO)V|O)W{O)XiO)Y!ZO)[XO)hcO)idO~OR#bOV#]O'e#^O'g#_O'h#`O'i#`O'j#aO'k#aO'l#_O'm#_O~OX#dO(o#fO(q#dO~O]ZX]jXejXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!TjX!VZX!VjX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX(uZX(v$]X(wZX(xZX)TZX)TjX)UZX)VZX)VjX)WZX)WjX)XZX)YZX)jZX~O)XjX!UZX~P(dO]#}O!V#lO!X#{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO(w#kO(x#kO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O~Oe$RO%Y$SO'[$TO'_$UO(y$OO~Om$VO~O!T$WO](}Xe(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)X(}X~Om$VO~P.ZOm$VO!g$YO)j$YO~OX$ZO)]$ZO~O!R$[O)P)RP)Y)RP~OPmO]$eOb!]Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!TxO!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~Om$_O#t$lO(rRO~P0zO](]Xb'yXe(]Xm'yXm(]Xs'yXs(]Xt'yXt(]Xu'yXu(]Xv'yXv(]Xw'yXw(]Xx'yXx(]Xy'yXy(]Xz'yXz(]X|'yX!O'yX!V(]X!o(]X!r'yX!r(]X!s'yX!s(]X!t'yX!t(]X!u'yX!u(]X!v'yX!v(]X!x'yX!x(]X!{(]X#a'yX#b'yX%e'yX%l'yX%o(]X%v(]X&m'yX&r'yX&s'yX(r'yX(r(]X)T(]X)V(]X)W(]X~Ob!TOm$oOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO&r#WO&s$wO])aXe)aXm)aX!V)aX!{)aX%v)aX(r)aX)T)aX)V)aX)W)aX~O)X$vO~P:nOPmO]eOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)TaO)V|O)W{O)Y!ZO)[XO)hcO)idO~Ob%QOm:zO!|%RO(r$xO~P<lO)T%SO~Ob!]Om$_O|#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r:}O~P<lOPmO]$eOb%QOm:zO!V$fO!W%_O!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W%]O)Y!ZO)[XO)hcO)idO)j%[O~O]%hOe!POm%bO!V%kO!{!dO%v$mO(r;OO)T%dO)V%iO)W%iO~O(v%mO~O)X#jO~O(r%nO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX!g(tX)j(tX[(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OP%oO(pQO~PCQO]%hOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO%o!|O%v!}O)T;`O)V|O)W|O~Om%rO!o%wO(r$xO~PE_O!TxO#v!eO(v%yO)j%|O])eX!V)eX~O]%hOe!POm%rO!V%kO!{!dO%v!}O(r$xO)T;`O)V|O)W|O~O!TxO#v!eO)X&PO)j&QO~O!U&TO~P!QO]&YO!TxO!V&WO)T&VO)V&ZO)W&ZO~Oq&UO~PHrO]&cO!V&bO~OPmO]eOe!PO!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%_#ZO%`#[O%a#YO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)TaO)V|O)W{O)Y!ZO)[XO)hcO)idO~Ob%QOm:zO%v$mO(r$xO~PIgO]%hOe!POm;[O!V%kO!{!dO%v$mO(r$xO)T;`O)V|O)W|O~Oq&fO](tX])eX!V(tX!V)eX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX[(tX[)eX!U(tX~O!g$YO)j$YO~PL]O!g(tX)j(tX~PL]O](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX!g(tX)j(tX[(tX!U(tX~O])eX!V)eX[)eX~PNkOb&hO&m!RO]&lXe&lXm&lXs&lXt&lXu&lXv&lXw&lXx&lXy&lXz&lX!O&lX!V&lX!r&lX!s&lX!t&lX!u&lX!v&lX!x&lX!{&lX%v&lX&r&lX&s&lX(r&lX)T&lX)V&lX)W&lX)X&lX[&lX!T&lX!X&lX!Y&lX![&lX!^&lX!_&lX!a&lX!b&lX!c&lX!e&lX!f&lX!h&lX(u&lX(w&lX(x&lX)U&lX)Y&lX!g&lX)j&lX!W&lXQ&lX!d&lX(v&lX!U&lX#v&lX~Oq&fOm(}X[(}XQ(}X!d(}X!h(}X)Y(}X)j(}X~P.ZO!g$YO)j$YO](tX!V(tX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX!h(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)X(tX)Y(tX[(tX!W(tX(v(tX!U(tXQ(tX!d(tX~OPmO]$eOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O](}Xe(}Xm(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)X(}X[(}XQ(}X!d(}X!h(}X)Y(}X)j(}X~O]#}O~P!*qO]&lO~O])bXb)bXe)bXm)bXs)bXt)bXu)bXv)bXw)bXx)bXy)bXz)bX|)bX!O)bX!V)bX!o)bX!r)bX!s)bX!t)bX!u)bX!v)bX!x)bX!{)bX#a)bX#b)bX%e)bX%l)bX%o)bX%v)bX&m)bX&r)bX&s)bX(r)bX)T)bX)V)bX)W)bX~O(pQO~P!-ZO%U&nO~P!-ZO]&oO~O]#}O~O!TxO~O$W&wO(r%nO(v&vO~O]&xOx&zO~O]&xO~OPmO]$eOb%QOm:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#p!xO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:mO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~O]'PO~O!T$WO)X'RO~P!(zO)X'TO~O)X'UO~O(r'VO~O)X'YO~P!(zOm;^O%U'^O%e'^O(r;PO~Ob!TOm$oOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O(v'bO~O)X'dO~P!(zO!TxO(r%nO)j'fO~O(r%nO~O]'iO~O]'jOe%nXm%nX!V%nX!{%nX%v%nX(r%nX)T%nX)V%nX)W%nX~O]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~P8zO]%hOb!TOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO)T;`O)V|O)W|O~Om;_Oq&UO%v$mO(r;QO~P!8jO(r%nO(v'vO)X'wO~O]&cO!T'yO~Om$oO!O!_O!T(QO!l(VO(r$nO(v(PO)QYO~Om$oO|(^O!T(ZO#b(^O(r$nO~Ob!TOm$oO|#RO#a#VO#b#TO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO~O](`O~OPmOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)[XO)hcO)idO~O](bO)Y(cO~P!=UO]#}O~P!<[OPmO]$eOb%QOm:zO!V(iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~OY(jO(pQO(r%nO~O'f(mO~OS(qOT(nO*W(pO~O]#}O(n(tO~Q'nXX#dO(o(vO(q#dO~Oe)QOm({O&r#WO(r(zO~O!Y'Sa!['Sa!^'Sa!_'Sa!a'Sa!b'Sa!c'Sa!e'Sa!f'Sa!h'Sa(u'Sa)T'Sa)U'Sa)V'Sa)W'Sa)X'Sa)Y'Sa!g'Sa)j'Sa['Sa!W'Sa(v'Sa!U'SaQ'Sa!d'Sa~OPmOb%QOm:zO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)[XO)hcO)idO]'Sa!V'Sa!X'Sa(w'Sa(x'Sa~P!B_O!T$WO[(sP~P!(zO]oX]%WXeoXmnXqoXq%WXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!ToX!VoX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gnX!h%WX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX(u%WX(w%WX(x%WX)ToX)T%WX)U%WX)VoX)V%WX)WoX)W%WX)X%WX)Y%WX)jnX[%WX~O)XoX[oX!U%WX~P!E{O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~P8zOPmO]$eOb%QOm:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O!V)lO~P!JwOe)oO%Y)pO(y$OO~O!T$WO!V)rO(w)sO!U)rP~P!JwO!T$WO~P!(zO)Z)zO~Om){O]!QX!h!QX)P!QX)Y!QX~O])}O!h*OO)P)RX)Y)RX~O)P*RO)Y*SO~Oe$RO%Y*TO'[$TO'_$UO(y$OO~Om*UO~Om*UO[(}X~P.ZOm*UO!g$YO)j$YO~O)X*VO~P:nOPmO]$eOb!]Om$_Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)T$kO)W$kO)Y!ZO)[XO)hcO)idO~Oq&fO~P!&zOq&fO!W(tX(v(tXQ(tX!d(tX~PNkO]'nO!V'oO!X'lO!g'lO%Z'lO%['lO%]'lO%^'lO%_'pO%`'pO%a'lO(x'mO)j'lO)x'qO~O]jXejXmhXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX!TjX!hjX)YjX)jjX[jX~O!ljX(vjX)XjX!XjX!YjX![jX!^jX!_jX!ajX!bjX!cjX!ejX!fjX(ujX(wjX(xjX)UjX!gjX!WjXQjX!djX!UjX#vjX#TjX#VjX#pjXbjX|jX!ojX#ajX#bjX#ijX#tjX${jX%cjX%ejX%kjX%ljX%ojX&mjX)QjX~P#%yO(y*ZO~Om*[O~O](}Xe(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)X(}X!T(}X!X(}X!Y(}X![(}X!^(}X!_(}X!a(}X!b(}X!c(}X!e(}X!f(}X!h(}X(u(}X(w(}X(x(}X)U(}X)Y(}X!g(}X)j(}X[(}X!W(}XQ(}X!d(}X(v(}X!U(}X#v(}X~Om*[O~P#+ROs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO])aae)aam)aa!V)aa!{)aa%v)aa(r)aa)T)aa)V)aa)W)aaQ)aa!d)aa!h)aa)Y)aa)j)aa[)aa!T)aa(v)aa)X)aa~O&r#WO&s$wO~P#.qOq&fOm(}X~P#+RO&r)aa~P#.qO]ZXmhXqZXqjX!TjX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(wZX(xZX)TZX)UZX)VZX)WZX)XZX)YZX)jZX[ZX~O!WZX(vZX!UZXQZX!dZX~P#1jO]#}O!V#lO!X#{O(w#kO(x#kO~O!Y&xa![&xa!^&xa!_&xa!a&xa!b&xa!c&xa!e&xa!f&xa!g&xa!h&xa(u&xa)T&xa)U&xa)V&xa)W&xa)X&xa)Y&xa)j&xa[&xa!W&xa(v&xa!U&xaQ&xa!d&xa~P#3zOm;hO!T$WO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~PKkOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!|%RO~PKkO]&cO!V&bO[#Qa!T#Qa!h#Qa#v#Qa)X#Qa)j#QaQ#Qa!d#Qa(v#Qa~Oq&fO!T$WO~O[*cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[*cO~O[*eO]&cO!V&bO~O]&YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V&WO&r#WO&s$wO)T&VO)V&ZO)W&ZO~O[rXQrX!drX!hrX)YrX)XrX~P#9{O[*hO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W)kX~P#3zO!W*kO!h*lO~O!W*kO!h*lO~P!(zO!W*kO~Oq&fO!g$YO!h*mO)j$YO](tX!V(tX!W(tX!W*OX!X(tX!Y(tX![(tX!^(tX!_(tX!a(tX!b(tX!c(tX!e(tX!f(tX(u(tX(w(tX(x(tX)T(tX)U(tX)V(tX)W(tX)Y(tX~O!h(tX~P#=ZO!W*oO~Oe$RO%Y*TO(y:rO~Om;kO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!|%RO~PBUO]*vO!T*qO!V&bO!h*tO#v!eO)j*rO)X)qX~O!h*tO)X)qX~O)X*wO~Oq&fO])eX!T)eX!V)eX!h)eX#v)eX)X)eX)j)eX[)eXQ)eX!d)eX(v)eX~Oq&fO~OP%oO(pQO]%ha!V%ha!X%ha!Y%ha![%ha!^%ha!_%ha!a%ha!b%ha!c%ha!e%ha!f%ha!h%ha(r%ha(u%ha(w%ha(x%ha)T%ha)U%ha)V%ha)W%ha)X%ha)Y%ha!g%ha)j%ha[%ha!W%ha(v%ha!U%haQ%ha!d%ha~Oe$RO%Y$SO(y:oO~Om:wO~O!TxO#v!eO)j%|O~Om<[O&r#WO(r;gO~O$Z+TO%`+UO~O!TxO#v!eO)X+VO)j+WO~OPmO]$eOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO$Z+TO%_#ZO%`+YO%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O!U+ZO~P!QOb!TOm$oOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a+aO#b+bO#i+cO%e#UO%l#SO&m!RO&r#WO&s!TO(r$nO)QYO~OQ)lP!d)lP~P#GgO]&YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V&WO)T&VO)V&ZO)W&ZO~O[#kX!T#kX#v#kX)X#kX)j#kXQ#kX!d#kX!h#kX)Y#kX!x#kX(v#kX~P#IkOPmO]$eOb%QOm:zOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V$fO!W+iO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T+jO)W$kO)Y!ZO)[XO)hcO)idO~O]&cO!V+kO~O]&YO!V&WO)QYO)T&VO)V&ZO)W&ZO)Y+nO[)dP~P8zO]&YO!V&WO)T&VO)V&ZO)W&ZO~O[#nX!T#nX#v#nX)X#nX)j#nXQ#nX!d#nX!h#nX)Y#nX!x#nX(v#nX~P#NeO!TxO])nX!V)nX~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O#T+vO#p+wO(x+tO)V+rO)W+rO~O]#jX!T#jX!V#jX[#jX#v#jX)X#jX)j#jXQ#jX!d#jX!h#jX)Y#jX!x#jX(v#jX~P$ xO#V+yO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!l+zO#T+vO#V+yO#p+wO(x+tO)V+zO)W+zO])fP!T)fP!V)fP#v)fP(v)fP)j)fP[)fP!h)fP)X)fP~O!x)fPQ)fP!d)fP~P$#uOPmO]$eOb%QOm:zOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)W$kO)Y!ZO)[XO)hcO)idO~O!W,QO)T,RO~P$%pO)QYO)Y+nO[)dP~P8zO]&cO!V&bO[&Za!T&Za!h&Za#v&Za)X&Za)j&ZaQ&Za!d&Za(v&Za~OPmO]$eOb!]Om:|Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r;RO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~OQ(zP!d(zP~P$)YO]#}O!V#lO(w#kO(x#kO!X'Pa!Y'Pa!['Pa!^'Pa!_'Pa!a'Pa!b'Pa!c'Pa!e'Pa!f'Pa!h'Pa(u'Pa)T'Pa)U'Pa)V'Pa)W'Pa)X'Pa)Y'Pa!g'Pa)j'Pa['Pa!W'Pa(v'Pa!U'PaQ'Pa!d'Pa~O]#}O!V#lO!X#{O(w#kO(x#kO~P!B_O!TxO#t!fO)QYO~P8zO!TxO(r%nO)j,[O~O#x,aO~OQ)aX!d)aX!h)aX)Y)aX)j)aX[)aX!T)aX(v)aX)X)aX~P:nO(v,eO(w,cO)Q$UX)X$UX~O(r,fO~O)QYO)X,iO~OPmO]$eOb!]Om:{Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~O(r;SO~P$0kOPmO]$eOb%QOm:zO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:mO)QYO)T$kO)W$kO)XiO)Y!ZO)[XO)hcO)idO~O$h,sO~OPmO]$eOb!]Om:{Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO$}!uO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)T$kO)W$kO)Y!ZO)[XO)hcO)idO~O${,yO(r:}O)X,wO~P$7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X,{O)Y#|O~P#3zO)X,{O~O)X,|O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X,}O)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X-OO)Y#|O~P#3zOq&fO)QYO)j-QO~O)X-RO~Om;^O(r;PO~O]-YO!{!dO&r#WO&s$wO(r-UO)T-VO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v-]O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOe$Xa!o$Xa!{$Xa#i$Xa#p$Xa#t$Xa#v$Xa$R$Xa$T$Xa$Y$Xa$Z$Xa${$Xa%U$Xa%c$Xa%g$Xa%o$Xa%|$Xa(k$Xa)V$Xa!U$Xa$c$Xa~P$0kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X-cO)Y#|O~P#3zOm-eO!TxO)j,[O~O)j-gO~O]&]a!X&]a!Y&]a![&]a!^&]a!_&]a!a&]a!b&]a!c&]a!e&]a!f&]a!h&]a(u&]a(w&]a(x&]a)U&]a)V&]a)W&]a)X&]a)Y&]a!g&]a)j&]a[&]a!W&]a!T&]a#v&]a(v&]a!U&]aQ&]a!d&]a~O)T-kO!V&]a~P$DbO[-kO~O!W-kO~O!V-lO)T&]a~P$DbO](}Xe(}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!V(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X~Om;mO~P$GQO]&cO!V&bO)X-mO~Om;cO!o-pO#V+yO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)QYO~P!8jO!n-yO(r,fO~O)QYO)X-{O~OPmO]$eOb%QOm:zO!T.QO!V$fO!X!XO!Y!WO!i!YO#V.XO#a.WO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO(x.PO)T$kO)W$kO)X-}O)Y!ZO)[XO)hcO)idO~O!U.VO~P$JbO])^Xe)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^Xz)^X!O)^X!T)^X!V)^X!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)T)^X)V)^X)W)^X)X)^X[)^X!h)^X)Y)^X!X)^X!Y)^X![)^X!^)^X!_)^X!a)^X!b)^X!c)^X!e)^X!f)^X(u)^X(w)^X(x)^X)U)^X!g)^X)j)^X!W)^XQ)^X!d)^X#T)^X#V)^X#p)^X#v)^Xb)^X|)^X!o)^X#a)^X#b)^X#i)^X#t)^X${)^X%c)^X%e)^X%k)^X%l)^X%o)^X&m)^X)Q)^X!U)^X~Om*[O~P$LlOm$oO!T(QO!l.^O(r$nO(v(PO)QYO~Oq&fOm)^X~P$LlOm$oO!n.cO!o.cO(r$nO)QYO~Om;dO!U.nO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)QYO~P!8jO!T(QO!l.^O(v(PO])OXe)OXm)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OXz)OX!O)OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%v)OX&r)OX&s)OX(r)OX)T)OX)V)OX)W)OX~O)X)OX[)OX!X)OX!Y)OX![)OX!^)OX!_)OX!a)OX!b)OX!c)OX!e)OX!f)OX!h)OX(u)OX(w)OX(x)OX)U)OX)Y)OX!g)OX)j)OX!W)OXQ)OX!d)OX!U)OX#v)OX~P%%eO!T(QO~O!T(QO(v(PO~O(r%nO!U*QP~O!T(ZO(v.uO]&kae&kam&kas&kat&kau&kav&kaw&kax&kay&kaz&ka!O&ka!V&ka!r&ka!s&ka!t&ka!u&ka!v&ka!x&ka!{&ka%v&ka&r&ka&s&ka(r&ka)T&ka)V&ka)W&ka)X&ka[&ka!X&ka!Y&ka![&ka!^&ka!_&ka!a&ka!b&ka!c&ka!e&ka!f&ka!h&ka(u&ka(w&ka(x&ka)U&ka)Y&ka!g&ka)j&ka!W&kaQ&ka!d&ka!U&ka#v&ka~Om$oO!T(ZO(r$nO~O&r#WO&s$wO]&pae&pam&pas&pat&pau&pav&paw&pax&pay&paz&pa!O&pa!V&pa!r&pa!s&pa!t&pa!u&pa!v&pa!x&pa!{&pa%v&pa(r&pa)T&pa)V&pa)W&pa)X&pa[&pa!T&pa!X&pa!Y&pa![&pa!^&pa!_&pa!a&pa!b&pa!c&pa!e&pa!f&pa!h&pa(u&pa(w&pa(x&pa)U&pa)Y&pa!g&pa)j&pa!W&paQ&pa!d&pa(v&pa!U&pa#v&pa~O&s.zO~P!(zO!Y#qO![#rO!f#zO)T#mO!^'Ua!_'Ua!a'Ua!b'Ua!c'Ua!e'Ua!h'Ua(u'Ua)U'Ua)V'Ua)W'Ua)X'Ua)Y'Ua!g'Ua)j'Ua['Ua!W'Ua(v'Ua!U'UaQ'Ua!d'Ua~P#3zO!V'dX!X'dX!Y'dX!['dX!^'dX!_'dX!a'dX!b'dX!c'dX!e'dX!f'dX!h'dX(u'dX(w'dX(x'dX)T'dX)U'dX)V'dX)W'dX)Y'dX['dX~O].|O)X'dX!g'dX)j'dX!W'dX(v'dX!U'dXQ'dX!d'dX~P%2xO!Y#qO![#rO!f#zO)T#mO!^'Wa!_'Wa!a'Wa!b'Wa!c'Wa!e'Wa!h'Wa(u'Wa)U'Wa)V'Wa)W'Wa)X'Wa)Y'Wa!g'Wa)j'Wa['Wa!W'Wa(v'Wa!U'WaQ'Wa!d'Wa~P#3zO]#}O!T$WO!V.}O&r#WO&s$wO~O!X'Za!Y'Za!['Za!^'Za!_'Za!a'Za!b'Za!c'Za!e'Za!f'Za!h'Za(u'Za(w'Za(x'Za)T'Za)U'Za)V'Za)W'Za)X'Za)Y'Za!g'Za)j'Za['Za!W'Za(v'Za!U'ZaQ'Za!d'Za~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^a)X'^a!g'^a)j'^a['^a!W'^a(v'^a!U'^aQ'^a!d'^a~P#3zOPmO]$eOb%QOm:zO!V$fO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)T$kO)W%]O)Y!ZO)[XO)hcO)idO)j%[O~O!W/QO~P%:oOS(qOT(nO]#}O*W(pO~O]/TO'f/UO*W/RO~OS/YOT(nO*W/XO~O]#}O~Q'na!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO(v/[O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X#Zi[#Zi~P#3zO]dXmhXqdXqjX!VdX!XdX!YdX![dX!^dX!_dX!adX!bdX!cdX!edX!fdX!gdX!hdX(udX(wdX(xdX)TdX)UdX)VdX)WdX)XdX)YdX)jdX[dX!WdX(vdX!TdX#vdX!UdXQdX!ddX~Oe/^O%Y*TO(y/]O~Om/_O~Om/`O~Oq&fO]ci!Vci!Xci!Yci![ci!^ci!_ci!aci!bci!cci!eci!fci!gci!hci(uci(wci(xci)Tci)Uci)Vci)Wci)Xci)Yci)jci[ci!Wci(vci!UciQci!dci~O!W/bO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO![#rO)T#mO!Y&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y&zi![&zi!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)T&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!h&zi(u&zi)U&zi)V&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)V#nO)W#pO!h&zi(u&zi)U&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&zi!h&zi(u&zi)U&zi)V&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&zi!_&zi!h&zi(u&zi)U&zi)V&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO!^&zi!_&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!b#yO!c#yO!e#yO!f#zO)T#mO!^&zi!_&zi!a&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!f#zO)T#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO)T#mO!^&zi!_&zi!a&zi!b&zi!c&zi!e&zi!f&zi!h&zi(u&zi)U&zi)V&zi)W&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO!h&zi(u&zi)X&zi)Y&zi!g&zi)j&zi[&zi!W&zi(v&zi!U&ziQ&zi!d&zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/cO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O[(sX~P#3zO!h/cO[(sX~O[/eO~O]%Xaq%Xa!X%Xa!Y%Xa![%Xa!^%Xa!_%Xa!a%Xa!b%Xa!c%Xa!e%Xa!f%Xa!h%Xa(u%Xa(w%Xa(x%Xa)U%Xa)V%Xa)W%Xa)X%Xa)Y%Xa!g%Xa)j%Xa[%Xa!W%Xa!T%Xa#v%Xa(v%Xa!U%XaQ%Xa!d%Xa~O)T/fO!V%Xa~P&,aO[/fO~O!W/fO~O!V/gO)T%Xa~P&,aO!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi)Y'Zi!g'Zi)j'Zi['Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~P%6oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^i)X'^i!g'^i)j'^i['^i!W'^i(v'^i!U'^iQ'^i!d'^i~P#3zO!W/lO~P%:oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/nO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U)rX~P#3zO(r/qO~O!V/sO(w)sO)j/uO~O!h/nO!U)rX~O!U/vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO)Y#|O!h`i(u`i)X`i!g`i)j`i[`i!W`i(v`i!U`iQ`i!d`i~P#3zO!R/wO~Om){O]!Qa!h!Qa)P!Qa)Y!Qa~OP0PO]0OOm0PO!R0PO!T/|O!V/}O!X0PO!Y0PO![0PO!^0PO!_0PO!a0PO!b0PO!c0PO!e0PO!f0PO!g0PO!h0PO!i0PO(pQO(v0PO(w0PO(x0PO)T/yO)U/zO)V/zO)W/{O)X0PO)Y0PO)[XO~O[0SO~P&6yO!R$[O~O!h*OO)P)Ra)Y)Ra~O)P0WO~O])dO!V)eO!X)bO!g)bO%Z)bO%[)bO%])bO%^)bO%_)fO%`)fO%a)bO(x)cO)j)bO)x)gO~Oe)oO%Y*TO(y$OO~O)X0YO~O]oXeoXmnXqoXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!VoX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX)ToX)VoX)WoX!ToX!hoX)YoX[oXQoX!doX~O!loX(voX)XoX!XoX!YoX![oX!^oX!_oX!aoX!boX!coX!eoX!foX(uoX(woX(xoX)UoX!goX)joX!WoX!UoX#voX#ToX#VoX#poXboX|oX!ooX#aoX#boX#ioX#toX${oX%coX%eoX%koX%loX%ooX&moX)QoX~P&:uOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!O!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO~O])aie)aim)ai!V)ai!{)ai%v)ai(r)ai)T)ai)V)ai)W)aiQ)ai!d)ai!h)ai)Y)ai)j)ai[)ai!T)ai&r)ai(v)ai)X)ai~P&?sO]&cO!V&bO[#Qi!T#Qi!h#Qi#v#Qi)X#Qi)j#QiQ#Qi!d#Qi(v#Qi~O[raQra!dra!hra)Yra)Xra~P#9{O[raQra!dra!hra)Yra)Xra~P#IkO]&cO!V+kO[raQra!dra!hra)Yra)Xra~O!h*iO!W)ka~O!h*mO!W*Oa~OPmOb!]Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O|#RO!O!_O!X!XO!Y!WO!i!YO!s!aO!t!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Y!vO$Z!wO$`!iO$e!jO$g!kO$h!lO$k!mO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO%_#ZO%`#[O%a#YO%e#UO%l#SO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO)QYO)XiO)Y!ZO)[XO)hcO)idO~O]eOe!POmTO!T*qO!U&TO!V0hO!opO!r!`O!u!bO!{!dO#i#OO#p!xO#t!fO$R!gO$T!hO${!tO$}!uO%U!yO%c!zO%g!{O%o!|O%v!}O%|#PO(rRO(w)sO)TaO)V|O)W{O~P&DuO!h*tO)X)qa~OPmO]$eOb!]Om:|O|#RO!T$WO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r;UO)QYO)T$kO)W$kO)Y0nO)[XO)hcO)idO[(sP[)dP~P&?sO!h*mO!W*OX~O]#}O!T$WO~O!h0sO!T)zX#v)zX)j)zX~O)X0uO~O)X0vO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X0xO)Y#|O~P#3zO)X0vO~P!?WO]1SOe!POm%bO!V1QO!{!dO%v$mO(r$xO)T0zO)Y0}O~O)V1OO)W1OO)j0{OQ#PX!d#PX!h#PX[#PX~P' dO!h1TOQ)lX!d)lX~OQ1VO!d1VO~O)Y1YO)j1XOQ#`X!d#`X!h#`X~P!<[O)Y1YO)j1XOQ#`X!d#`X!h#`X~P!;bOq&UO~O[#ka!T#ka#v#ka)X#ka)j#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(v#ka~P#IkO]&cO!V+kO[#ka!T#ka#v#ka)X#ka)j#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(v#ka~O!W1_O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1_O)T1aO~P$%pO!W1_O~P!(zO]#ja!T#ja!V#ja[#ja#v#ja)X#ja)j#jaQ#ja!d#ja!h#ja)Y#ja!x#ja(v#ja~P$ xO[1eO]&cO!V+kO~O!h1fO[)dX~O[1hO~O]&cO!V+kO[#na!T#na#v#na)X#na)j#naQ#na!d#na!h#na)Y#na!x#na(v#na~O]1lOs#SXt#SXu#SXv#SXw#SXx#SXy#SXz#SX!T#SX!V#SX#T#SX#p#SX(x#SX)V#SX)W#SX!l#SX!x#SX#V#SX#v#SX(v#SX)j#SX[#SX!h#SX)X#SXQ#SX!d#SX)Y#SX~O]1mO~O]1pOm$oO!V$fO#V#QO(r$nO)hcO)idO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!l+zO#T+vO#V+yO#p+wO(x+tO)V+zO)W+zO~O])fX!T)fX!V)fX!x)fX#v)fX(v)fX)j)fX[)fX!h)fX)X)fXQ)fX!d)fX~P'+}O!x!cO]#Ri!T#Ri!V#Ri#v#Ri(v#Ri)j#Ri[#Ri!h#Ri)X#RiQ#Ri!d#Ri~O!W1xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1xO)T1zO~P$%pO!W1xO~P!(zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*RX!d*RX!h*RX~P#3zO)Y1{OQ({X!d({X!h({X~O!h1|OQ(zX!d(zX~OQ2OO!d2OO~O[2PO~O#t$lO)QYO~P8zOm-eO!TxO)j2TO~O[2UO~O#x,aOP#ui]#uib#uie#uim#uis#uit#uiu#uiv#uiw#uix#uiy#uiz#ui|#ui!O#ui!T#ui!V#ui!X#ui!Y#ui!i#ui!o#ui!r#ui!s#ui!t#ui!u#ui!v#ui!x#ui!{#ui#V#ui#a#ui#b#ui#i#ui#p#ui#t#ui#v#ui$R#ui$T#ui$Y#ui$Z#ui$`#ui$e#ui$g#ui$h#ui$k#ui$m#ui$o#ui$q#ui$s#ui$u#ui$w#ui${#ui$}#ui%U#ui%_#ui%`#ui%a#ui%c#ui%e#ui%g#ui%l#ui%o#ui%v#ui%|#ui&m#ui&r#ui&s#ui'Q#ui'R#ui'V#ui'Y#ui'a#ui'b#ui(k#ui(p#ui(r#ui)Q#ui)T#ui)V#ui)W#ui)X#ui)Y#ui)[#ui)h#ui)i#ui!U#ui$c#ui!n#ui%k#ui~O]&cO~O]&cO!TxO!V&bO#v!eO~O(v2ZO(w,cO)Q$Ua)X$Ua~O)QYO)X2]O~O[2^O~P,]O[2^O)X#jO~O[2^O~O$c2cOP$_i]$_ib$_ie$_im$_is$_it$_iu$_iv$_iw$_ix$_iy$_iz$_i|$_i!O$_i!T$_i!V$_i!X$_i!Y$_i!i$_i!o$_i!r$_i!s$_i!t$_i!u$_i!v$_i!x$_i!{$_i#V$_i#a$_i#b$_i#i$_i#p$_i#t$_i#v$_i$R$_i$T$_i$Y$_i$Z$_i$`$_i$e$_i$g$_i$h$_i$k$_i$m$_i$o$_i$q$_i$s$_i$u$_i$w$_i${$_i$}$_i%U$_i%_$_i%`$_i%a$_i%c$_i%e$_i%g$_i%l$_i%o$_i%v$_i%|$_i&m$_i&r$_i&s$_i'Q$_i'R$_i'V$_i'Y$_i'a$_i'b$_i(k$_i(p$_i(r$_i)Q$_i)T$_i)V$_i)W$_i)X$_i)Y$_i)[$_i)h$_i)i$_i!U$_i~O]1pO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X2fO)Y#|O~P#3zOPmO]$eOb!]Om:{O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)T$kO)W$kO)X2iO)Y!ZO)[XO)hcO)idO~P&?sO)X2fO~O(r-UO~O)QYO)j2lO~O)X2nO~O]-YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!{!dO!|%RO(r-UO)T-VO~O)T2sO~O]&cO!V2uO!h2vO)X)uX~O]-YO!{!dO(r-UO)T-VO~O)X2yO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOe$Xi!o$Xi!{$Xi#i$Xi#p$Xi#t$Xi#v$Xi$R$Xi$T$Xi$Y$Xi$Z$Xi${$Xi%U$Xi%c$Xi%g$Xi%o$Xi%|$Xi(k$Xi)V$Xi!U$Xi$c$Xi~P$0kOm:{O(r:nO~P0zO]2}O~O)X2SO~O!u3PO(r%nO~O[3SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h3TO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[3UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO]&cO!V+kO!T%ui#v%ui)X%ui)j%ui~O!W3VO~Om:yO)X(}X~P$GQOb!TOm$oO|3]O#a#VO#b3[O#t!fO%e#UO%l3^O&m!RO&r#WO&s!TO(r$nO)QYO~P&?sOm;cO!o-pO#i-uO#t!fO${,yO%c!zO%k-tO%o!|O%v!}O(r;TO)QYO~P!8jO]&cO!V&bO)X3`O~O)X3aO~O)QYO)X3aO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X3bO)Y#|O~P#3zO)X3bO~O)X3eO~O!U3gO~P$JbOm$oO(r$nO~O]3iO!T'yO~P'+iO!T(QO!l3lO(v(PO])Oae)Oam)Oas)Oat)Oau)Oav)Oaw)Oax)Oay)Oaz)Oa!O)Oa!V)Oa!r)Oa!s)Oa!t)Oa!u)Oa!v)Oa!x)Oa!{)Oa%v)Oa&r)Oa&s)Oa(r)Oa)T)Oa)V)Oa)W)Oa)X)Oa[)Oa!X)Oa!Y)Oa![)Oa!^)Oa!_)Oa!a)Oa!b)Oa!c)Oa!e)Oa!f)Oa!h)Oa(u)Oa(w)Oa(x)Oa)U)Oa)Y)Oa!g)Oa)j)Oa!W)OaQ)Oa!d)Oa!U)Oa#v)Oa~Om$oO!n.cO!o.cO(r$nO~O!h3pO)Y3rO!T)_X~O!o3tO)QYO~P8zO)X3uO~PGVO]3zOm({O!T$WO!{!dO%v$mO&r#WO(r(zO(v4OO)T3wO)V3{O)W3{O~O)X4PO)j4RO~P(&eOm;dO!U4TO!n.pO!o.oO#i-uO${!tO$}!uO%g!{O%k-tO%o!|O%v!}O(r;VO)QYO~P!8jOm;dO%v!}O(r;VO~P!8jO(v4UO~Om$oO!T(QO(r$nO(v(PO)QYO~O!l3lO~P((sO)j4WO!U&oX!h&oX~O!h4XO!U*QX~O!U4ZO~Ob4]Om$oO&m!RO(r$nO~O!T(ZO]&kie&kim&kis&kit&kiu&kiv&kiw&kix&kiy&kiz&ki!O&ki!V&ki!r&ki!s&ki!t&ki!u&ki!v&ki!x&ki!{&ki%v&ki&r&ki&s&ki(r&ki)T&ki)V&ki)W&ki)X&ki[&ki!X&ki!Y&ki![&ki!^&ki!_&ki!a&ki!b&ki!c&ki!e&ki!f&ki!h&ki(u&ki(w&ki(x&ki)U&ki)Y&ki!g&ki)j&ki!W&kiQ&ki!d&ki!U&ki#v&ki~O(v&ki~P(*TO(v.uO~P(*TO[4`O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[4`O~O[4aO~O]#}O!T$WO!V'Zi!X'Zi!Y'Zi!['Zi!^'Zi!_'Zi!a'Zi!b'Zi!c'Zi!e'Zi!f'Zi!h'Zi(u'Zi(w'Zi(x'Zi)T'Zi)U'Zi)V'Zi)W'Zi)X'Zi)Y'Zi!g'Zi)j'Zi['Zi!W'Zi(v'Zi!U'ZiQ'Zi!d'Zi~OPmOb%QOm:zO!X!XO!Y!WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)Y!ZO)[XO)hcO)idO]#]aq#]a!T#]a!V#]a)T#]a)V#]a)W#]a~O(r%nO)Y4fO[*YP~O*W4eO~O'f4hO*W4eO~O*W4iO~OmnXqoXq&wX~Oe4kO%Y*TO(y/]O~Oe4kO%Y*TO(y4lO~O!h/cO[(sa~O!W4pO~O]&cO!V+kO!T%uq#v%uq)X%uq)j%uq~O]#}O!T$WO!X'Zq!Y'Zq!['Zq!^'Zq!_'Zq!a'Zq!b'Zq!c'Zq!e'Zq!f'Zq!h'Zq(u'Zq(w'Zq(x'Zq)T'Zq)U'Zq)V'Zq)W'Zq)X'Zq)Y'Zq!g'Zq)j'Zq['Zq!W'Zq(v'Zq!U'ZqQ'Zq!d'Zq~O!V'Zq~P(5bO!V.}O&r#WO&s$wO~P(5bO!T$WO!V)rO(w)sO!U(UX!h(UX~P!JwO!h/nO!U)ra~O!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!U4|O~P&6yO!W4|O~P&6yO[4|O~P&6yO[5RO~P&6yO]5SO!h'ua)P'ua)Y'ua~O!h*OO)P)Ri)Y)Ri~O]&cO!V&bO[#Qq!T#Qq!h#Qq#v#Qq)X#Qq)j#QqQ#Qq!d#Qq(v#Qq~O[riQri!dri!hri)Yri)Xri~P#IkO]&cO!V+kO[riQri!dri!hri)Yri)Xri~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'Tq)X'Tq!g'Tq)j'Tq['Tq!W'Tq(v'Tq!U'TqQ'Tq!d'Tq~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W'|a!h'|a~P#3zO!W5XO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h5YO(u#gO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O!U)rX~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h#{i)X#{i~P#3zO]*vO!T$WO!V&bO)j*rO!h(Va)X(Va~O!h1fO[)dX]'dX~P%2xO)Y5[O!T%qa!h%qa#v%qa)j%qa~O!h0sO!T)za#v)za)j)za~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X5_O)Y#|O~P#3zO]1SOe!POm;[O!V1QO!{!dO%v$mO(r$xO)T;xO)V5aO)W5aO~OQ#Pa!d#Pa!h#Pa[#Pa~P(DjO]1SOe!POs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V1QO!{!dO!|%RO%v$mO(r$xOQ#kX!d#kX!h#kX[#kX~Om%bO)T0zO)V;yO)W;yO~P(ElO]&cOQ#Pa!d#Pa!h#Pa[#Pa~O!V&bO)j5eO~P(GZO(r%nOQ#dX!d#dX!h#dX[#dX~O)V;yO)W;yOQ#nX!d#nX!h#nX[#nX~P' dO!V+kO~P(GZO]1SOb!TOe!POm;]O|#RO!V1QO!{!dO#a#VO#b#TO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO(r;QO)QYO)T;xO)V5aO)W5aO)Y+nO[)dP~P&?sO!h1TOQ)la!d)la~Oq&fO)j5jOQ#`am(}X!d#`a!h#`a)Y(}X~P$GQO(r-UOQ#ga!d#ga!h#ga~Oq&fO)j5jOQ#`a])^Xe)^Xm)^Xs)^Xt)^Xu)^Xv)^Xw)^Xx)^Xy)^Xz)^X!O)^X!T)^X!V)^X!d#`a!h#`a!l)^X!r)^X!s)^X!t)^X!u)^X!v)^X!x)^X!{)^X%v)^X&r)^X&s)^X(r)^X(v)^X)T)^X)V)^X)W)^X)Y)^X~O#a5mO#b5mO~O]&cO!V+kO[#ki!T#ki#v#ki)X#ki)j#kiQ#ki!d#ki!h#ki)Y#ki!x#ki(v#ki~O!W5oO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W5oO~P!(zO!W5oO)T5qO~P$%pO]#ji!T#ji!V#ji[#ji#v#ji)X#ji)j#jiQ#ji!d#ji!h#ji)Y#ji!x#ji(v#ji~P$ xO)QYO)Y5sO~P8zO!h1fO[)da~O&r#WO&s$wO!T#qa!x#qa#v#qa(v#qa)j#qa[#qa!h#qa)X#qaQ#qa!d#qa)Y#qa~P#NeO[5xO~P!(zO[)oP~P!4xO)U6OO)V5|O]#Ua!T#Ua!V#Ua)T#Ua)W#Uas#Uat#Uau#Uav#Uaw#Uax#Uay#Uaz#Ua!l#Ua!x#Ua#T#Ua#V#Ua#p#Ua#v#Ua(v#Ua(x#Ua)j#Uab#Uae#Uam#Ua|#Ua!O#Ua!o#Ua!r#Ua!s#Ua!t#Ua!u#Ua!v#Ua!{#Ua#a#Ua#b#Ua#i#Ua#t#Ua${#Ua%c#Ua%e#Ua%k#Ua%l#Ua%o#Ua%v#Ua&m#Ua&r#Ua&s#Ua(r#Ua)Q#Ua)X#Ua[#Ua!h#UaQ#Ua!d#Ua~O!x!cO]#Rq!T#Rq!V#Rq#v#Rq(v#Rq)j#Rq[#Rq!h#Rq)X#RqQ#Rq!d#Rq~O!W6TO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W6TO~P!(zO!h1|OQ(za!d(za~O)X6YO~Om-eO!TxO)j6ZO~O]*vO!T$WO!V&bO!h*tO)X)qX~O)j6_O~P)+cO[6aO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[6aO~O$c6cOP$_q]$_qb$_qe$_qm$_qs$_qt$_qu$_qv$_qw$_qx$_qy$_qz$_q|$_q!O$_q!T$_q!V$_q!X$_q!Y$_q!i$_q!o$_q!r$_q!s$_q!t$_q!u$_q!v$_q!x$_q!{$_q#V$_q#a$_q#b$_q#i$_q#p$_q#t$_q#v$_q$R$_q$T$_q$Y$_q$Z$_q$`$_q$e$_q$g$_q$h$_q$k$_q$m$_q$o$_q$q$_q$s$_q$u$_q$w$_q${$_q$}$_q%U$_q%_$_q%`$_q%a$_q%c$_q%e$_q%g$_q%l$_q%o$_q%v$_q%|$_q&m$_q&r$_q&s$_q'Q$_q'R$_q'V$_q'Y$_q'a$_q'b$_q(k$_q(p$_q(r$_q)Q$_q)T$_q)V$_q)W$_q)X$_q)Y$_q)[$_q)h$_q)i$_q!U$_q~O)X6dO~OPmO]$eOb!]Om:{O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)T$kO)W$kO)X6fO)Y!ZO)[XO)hcO)idO~P&?sO(v6hO)j*rO~P)+cO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X6fO)Y#|O~P#3zO[6jO~P!(zO)X6nO~O)X6oO~O]-YOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!{!dO(r-UO)T-VO~O]&cO!V2uO!h%Oa)X%Oa[%Oa~O!W6uO)T6vO~P$%pO!h2vO)X)ua~O[6yO]&cO!V2uO~O!TxO$`!iO$e!jO$g!kO$h!lO$k-bO$m!nO$o!oO$q!pO$s!qO$u!rO$w!sO$}!uO(r:nOe$Xq!o$Xq!{$Xq#i$Xq#p$Xq#t$Xq#v$Xq$R$Xq$T$Xq$Y$Xq$Z$Xq${$Xq%U$Xq%c$Xq%g$Xq%o$Xq%|$Xq(k$Xq)V$Xq!U$Xq$c$Xq~P$0kOPmO]$eOb!]Om:{O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r:}O)QYO)T$kO)W$kO)X6{O)Y!ZO)[XO)hcO)idO~P&?sO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X7OO)Y#|O~P#3zO)X7PO~OP7QO(pQO~Om*[O)X)^X~P$GQOq&fOm(}X)X)^X~P$GQO)X7SO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&Sa~P#3zO!U7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO)X7VO~OPmO]$eOb!]Om:|O|#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%_#ZO%`#[O%a#YO%e#UO%l#SO%v$mO&m!RO&r#WO&s!TO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r;UO)QYO)T$kO)W$kO)Y0nO)[XO)hcO)idO[)dP~P&?sO!h3pO)Y7ZO!T)_a~O!h3pO!T)_a~O)X7`O)j7bO~P(&eO)X7dO~PGVO]3zOm({Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!{!dO!|%RO%v$mO&r#WO(r(zO)T3wO)V3{O)W3{O~O)T7hO~O]&cO!T*qO!V7jO!h7kO#v!eO(v4OO~O)X7`O)j7mO~P)FwO]3zOm({O!{!dO%v$mO&r#WO(r(zO)T3wO)V3{O)W3{O~Oq&fO])cX!T)cX!V)cX!h)cX#v)cX(v)cX)X)cX)j)cX[)cX~O)X7`O~O!T(QO!l7sO(v(PO])Oie)Oim)Ois)Oit)Oiu)Oiv)Oiw)Oix)Oiy)Oiz)Oi!O)Oi!V)Oi!r)Oi!s)Oi!t)Oi!u)Oi!v)Oi!x)Oi!{)Oi%v)Oi&r)Oi&s)Oi(r)Oi)T)Oi)V)Oi)W)Oi)X)Oi[)Oi!X)Oi!Y)Oi![)Oi!^)Oi!_)Oi!a)Oi!b)Oi!c)Oi!e)Oi!f)Oi!h)Oi(u)Oi(w)Oi(x)Oi)U)Oi)Y)Oi!g)Oi)j)Oi!W)OiQ)Oi!d)Oi!U)Oi#v)Oi~O(r%nO!U(fX!h(fX~O!h4XO!U*Qa~Oq&fO]*Pae*Pam*Pas*Pat*Pau*Pav*Paw*Pax*Pay*Paz*Pa!O*Pa!T*Pa!V*Pa!r*Pa!s*Pa!t*Pa!u*Pa!v*Pa!x*Pa!{*Pa%v*Pa&r*Pa&s*Pa(r*Pa)T*Pa)V*Pa)W*Pa)X*Pa[*Pa!X*Pa!Y*Pa![*Pa!^*Pa!_*Pa!a*Pa!b*Pa!c*Pa!e*Pa!f*Pa!h*Pa(u*Pa(w*Pa(x*Pa)U*Pa)Y*Pa!g*Pa)j*Pa!W*PaQ*Pa!d*Pa(v*Pa!U*Pa#v*Pa~O!T(ZO]&kqe&kqm&kqs&kqt&kqu&kqv&kqw&kqx&kqy&kqz&kq!O&kq!V&kq!r&kq!s&kq!t&kq!u&kq!v&kq!x&kq!{&kq%v&kq&r&kq&s&kq(r&kq)T&kq)V&kq)W&kq)X&kq[&kq!X&kq!Y&kq![&kq!^&kq!_&kq!a&kq!b&kq!c&kq!e&kq!f&kq!h&kq(u&kq(w&kq(x&kq)U&kq)Y&kq!g&kq)j&kq!W&kqQ&kq!d&kq(v&kq!U&kq#v&kq~OPmOb%QOm:zO!T$WO!i!YO#V#QO%_#ZO%`#[O%a#YO%v$mO'Q!WO'R!WO'V#XO'Y![O'a![O'b![O(pQO(r$xO)[XO)hcO)idO~O]*Ui!V*Ui!X*Ui!Y*Ui![*Ui!^*Ui!_*Ui!a*Ui!b*Ui!c*Ui!e*Ui!f*Ui!h*Ui(u*Ui(w*Ui(x*Ui)T*Ui)U*Ui)V*Ui)W*Ui)X*Ui)Y*Ui!g*Ui)j*Ui[*Ui!W*Ui(v*Ui!U*UiQ*Ui!d*Ui~P*&WO[7xO~O!W7yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^q)X'^q!g'^q)j'^q['^q!W'^q(v'^q!U'^qQ'^q!d'^q~P#3zO!h7zO[*YX~O[7|O~O*W7}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h_y)X_y!g_y)j_y[_y!W_y(v_y!U_yQ_y!d_y~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O[(ha!h(ha~P#3zO]#}O!T$WO!V'Zy!X'Zy!Y'Zy!['Zy!^'Zy!_'Zy!a'Zy!b'Zy!c'Zy!e'Zy!f'Zy!h'Zy(u'Zy(w'Zy(x'Zy)T'Zy)U'Zy)V'Zy)W'Zy)X'Zy)Y'Zy!g'Zy)j'Zy['Zy!W'Zy(v'Zy!U'ZyQ'Zy!d'Zy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'^y)X'^y!g'^y)j'^y['^y!W'^y(v'^y!U'^yQ'^y!d'^y~P#3zO]&cO!V+kO!T%uy#v%uy)X%uy)j%uy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Ua!h(Ua~P#3zO!W4xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U#}i!h#}i~P#3zO!U8PO~P&6yO!W8PO~P&6yO[8PO~P&6yO[8RO~P&6yO]&cO!V&bO[#Qy!T#Qy!h#Qy#v#Qy)X#Qy)j#QyQ#Qy!d#Qy(v#Qy~O]&cO!V+kO[rqQrq!drq!hrq)Yrq)Xrq~O]&cOQ#Pi!d#Pi!h#Pi[#Pi~O!V+kO~P*9jOQ#nX!d#nX!h#nX[#nX~P(DjO!V&bO~P*9jOQ(OX](OXe'qXm'qXs(OXt(OXu(OXv(OXw(OXx(OXy(OXz(OX!V(OX!d(OX!h(OX!{'qX%v'qX(r'qX)T(OX)V(OX)W(OX[(OX~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_i!d#_i!h#_i[#_i~P#3zO&r#WO&s$wOQ#fi!d#fi!h#fi~O(r-UO)Y1YO)j1XOQ#`X!d#`X!h#`X~O!W8WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8WO~P!(zO!T#qi!x#qi#v#qi(v#qi)j#qi[#qi!h#qi)X#qiQ#qi!d#qi)Y#qi~O]&cO!V+kO~P*?fO]&YO!V&WO&r#WO&s$wO)T&VO)V&ZO)W&ZO~P*?fO[8YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!h8ZO[)oX~O[8]O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*TX!d*TX!h*TX~P#3zO)Y8`OQ*SX!d*SX!h*SX~O)X8bO~O[$bi!h#{a)X#{a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X8eO)Y#|O~P#3zO[8gO~P!(zO[8gO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[8gO~O]&cO!V&bO(v8mO~O)X8nO~O]&cO!V2uO!h%Oi)X%Oi[%Oi~O!W8qO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8qO)T8sO~P$%pO!W8qO~P!(zO]&cO!V2uO!h(Ya)X(Ya~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)X8tO)Y#|O~P#3zO)X2iO~P!(zO)X8tO~OP%oO[8uO(pQO~O[8uO~O)X8vO~P%%eO#T8yO(x.PO)X8wO~O!h3pO!T)_i~O)Y8}O!T'wa!h'wa~O)X9PO)j9RO~P)FwO)X9PO~O)X9PO)j9VO~P(&eOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~P)GgO]&cO!V7jO!T!ya!h!ya#v!ya(v!ya)X!ya)j!ya[!ya~O!W9^O)T9_O~P$%pO!T$WO!h7kO(v4OO)X9PO)j9VO~O!T$WO~P#EfO[9bO]&cO!V7jO~O]&cO!V7jO!T&aa!h&aa#v&aa(v&aa)X&aa)j&aa[&aa~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&ba~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X9PO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U&oi!h&oi~P#3zO!V.}O]']i!T']i!X']i!Y']i![']i!^']i!_']i!a']i!b']i!c']i!e']i!f']i!h']i(u']i(w']i(x']i)T']i)U']i)V']i)W']i)X']i)Y']i!g']i)j']i[']i!W']i(v']i!U']iQ']i!d']i~O(r%nO)Y9eO~O!h7zO[*Ya~O[9gO~P&6yO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Ua)X#Zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_q!d#_q!h#_q[#_q~P#3zO&r#WO&s$wOQ#fq!d#fq!h#fq~O)j5jOQ#`a!d#`a!h#`a~O]&cO!V+kO!T#qq!x#qq#v#qq(v#qq)j#qq[#qq!h#qq)X#qqQ#qq!d#qq)Y#qq~O!h8ZO[)oa~O)V5|O]&Vi!T&Vi!V&Vi)T&Vi)U&Vi)W&Vis&Vit&Viu&Viv&Viw&Vix&Viy&Viz&Vi!l&Vi!x&Vi#T&Vi#V&Vi#p&Vi#v&Vi(v&Vi(x&Vi)j&Vib&Vie&Vim&Vi|&Vi!O&Vi!o&Vi!r&Vi!s&Vi!t&Vi!u&Vi!v&Vi!{&Vi#a&Vi#b&Vi#i&Vi#t&Vi${&Vi%c&Vi%e&Vi%k&Vi%l&Vi%o&Vi%v&Vi&m&Vi&r&Vi&s&Vi(r&Vi)Q&Vi)X&Vi[&Vi!h&ViQ&Vi!d&Vi~O)X9jO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O[$bq!h#{i)X#{i~P#3zO[9lO~P!(zO[9lO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[9lO~O]&cO!V&bO(v9oO~O[9pO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[9pO~O]&cO!V2uO!h%Oq)X%Oq[%Oq~O!W9tO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W9tO~P!(zO)X6fO~P!(zO)X9uO~O)X9vO~O(x.PO)X9vO~O!h3pO!T)_q~O)Y9xO!T'wi!h'wi~O!T$WO!h7kO(v4OO)X9yO)j9{O~O)X9yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X9yO)Y#|O~P#3zO)X9yO)j:OO~P)FwO]&cO!V7jO!T!yi!h!yi#v!yi(v!yi)X!yi)j!yi[!yi~O!W:SO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:SO)T:UO~P$%pO!W:SO~P!(zO]&cO!V7jO!T(da!h(da(v(da)X(da)j(da~O[:WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[:WO~O[:]O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[:]O~O]&cO!V2uO!h%Oy)X%Oy[%Oy~O)X:^O~O)X:_O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X:_O)Y#|O~P#3zO!T$WO!h7kO(v4OO)X:_O)j:bO~O]&cO!V7jO!T!yq!h!yq#v!yq(v!yq)X!yq)j!yq[!yq~O!W:dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:dO~P!(zO[:fO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO[:fO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X:hO)Y#|O~P#3zO)X:hO~O]&cO!V7jO!T!yy!h!yy#v!yy(v!yy)X!yy)j!yy[!yy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(u#gO)T#mO)U#oO)V#nO)W#pO)X:lO)Y#|O~P#3zO)X:lO~O]ZXmhXqZXqjX!TjX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(uZX(v$]X(wZX(xZX)TZX)UZX)VZX)WZX)XZX)YZX)jZX~O]%WXmnXqoXq%WX!ToX!V%WX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!e%WX!f%WX!gnX!h%WX(u%WX(w%WX(x%WX)T%WX)U%WX)V%WX)W%WX)Y%WX)jnX[%WXQ%WX!d%WX~O)X%WX!W%WX(v%WX!U%WX~P+GrO]oX]%WXeoXmnXqoXq%WXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!VoX!V%WX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX)ToX)VoX)WoX[oX[%WX!hoX)YoX~O)XoX)joX~P+JSO]%WXmnXqoXq%WX!V%WX!h%WXQ%WX!d%WX[%WX~O!T%WX#v%WX)X%WX)j%WX(v%WX~P+LmOQoXQ%WX!ToX!X%WX!Y%WX![%WX!^%WX!_%WX!a%WX!b%WX!c%WX!doX!d%WX!e%WX!f%WX!gnX!h%WX(u%WX(w%WX(x%WX)T%WX)U%WX)V%WX)W%WX)Y%WX)jnX~P+JSO]oX]%WXmnXqoXq%WXsoXtoXuoXvoXwoXxoXyoXzoX!OoX!V%WX!roX!soX!toX!uoX!voX!xoX!{oX%voX&roX&soX(roX)ToX)VoX)WoX~O!ToX(voX)XoX)joX~P, eOeoX!VoX)X%WX~P, eOmnXqoX)X%WX~Oe)oO%Y)pO(y:oO~Oe)oO%Y)pO(y:tO~Oe)oO%Y)pO(y:pO~Oe$RO%Y*TO'[$TO'_$UO(y:oO~Oe$RO%Y*TO'[$TO'_$UO(y:qO~Oe$RO%Y*TO'[$TO'_$UO(y:sO~O[jX]jXsjXtjXujXvjXwjXxjXyjXzjX!VjX&rjX&sjX)TjX)VjX)WjXejX!OjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX(rjX~P#1jO]ZXmhXqZXqjX!VZX!hZX)XZX)jZX~O!TZX#vZX(vZX~P,'{OmhXqjX)QjX)XZX)jjX~O]ZX]jXejXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VZX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX[ZX[jX!hjX)YjX)jjX~O)XZX~P,)VO]ZX]jXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!TjX!VZX!VjX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!hjX&rjX&sjX(uZX(wZX(xZX)TZX)TjX)UZX)VZX)VjX)WZX)WjX)YZX)YjX)jZX~OQZXQjX!dZX!djX~P,+pO]jXejXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX~P#1jO]ZX]jXejXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!VZX!VjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX)TjX)VjX)WjX~O)XjX~P,0rO[ZX[jXejX!OjX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX(rjX)jjX~P,+pO]ZX]jXmhXqZXqjXsjXtjXujXvjXwjXxjXyjXzjX!OjX!TjX!VZX!rjX!sjX!tjX!ujX!vjX!xjX!{jX%vjX&rjX&sjX(rjX(vjX)TjX)VjX)WjX)XjX)jjX~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~PBUOe$RO%Y*TO(y:oO~Oe$RO%Y*TO(y:pO~Oe$RO%Y*TO(y:vO~Oe$RO%Y*TO(y:uO~O]%hOe!POm%bOs!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O!V%kO!{!dO!|%RO%v$mO(r$xO)T;aO)V;bO)W;bO~O]%hOe!POm%bO!V%kO!{!dO%v$mO(r$xO)T;aO)V;bO)W;bO~Oe$RO%Y$SO(y:pO~Oe$RO%Y$SO(y:tO~Om:yO~Om:xO~O]dXmhXqjX!TdX~Oe)oO%Y*TO(y:oO~Oe)oO%Y*TO(y:pO~Oe)oO%Y*TO(y:qO~Oe)oO%Y*TO(y:rO~Oe)oO%Y*TO(y:sO~Oe)oO%Y*TO(y:uO~Oe)oO%Y*TO(y:vO~Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^Oz!^O~P,9OO](}Xs(}Xt(}Xu(}Xv(}Xw(}Xx(}Xy(}Xz(}X!O(}X!r(}X!s(}X!t(}X!u(}X!v(}X!x(}X!{(}X%v(}X&r(}X&s(}X(r(}X)T(}X)V(}X)W(}X)j(}X~Om:xO!T(}X(v(}X)X(}X~P,<}O]&wXmnXqoX!T&wX~Oe4kO%Y*TO(y;tO~Om;[O)T;xO)V5aO)W5aO~P(ElOe!POm%bO!{!dO%v$mO(r$xO~O]1SO!V1QO)T0zO)V;yO)W;yOQ#nX!d#nX!h#nX[#nX~P,?yO)T;YO~Om;hO~Om;iO~Om;jO~Om;lO~Om;mO~Om;nO~Om;lO!T$WOQ(}X!d(}X!h(}X)Y(}X[(}X)j(}X~P$GQOm;jO!T$WO~P$GQOm;hO!g$YO)j$YO~Om;jO!g$YO)j$YO~Om;lO!g$YO)j$YO~Om;iO[(}X!h(}X)Y(}X)j(}X~P$GQOe/^O%Y*TO(y;tO~Om;uO~O)T<YO~OV'e'h'i'g(p)[!R(rST%Z!Y!['je%[!i'R!f]'f*Z'k(w!^!_'l'm'l~",
      goto: "%5]*ZPPPPPP*[P*_PP.TPP4i7j7j:tP:t>OP>i>{?aFXMX!&]!,sP!3m!4b!5VP!5qPPPPPPPP!6[P!7tP!9V!:oP!:uPPPPPP!:xP!:xPP!:xPPPPPPPPP!;U!>lP!>oPP!?]!@QPPPPP!@UP>l!AgPP>l!Cn!Eo!E}!Gd!ITP!I`P!Io!Io!MP#!`##v#'S#*^!Eo#*hPP!Eo#*o#*u#*h#*h#*xP#*|#+k#+k#+k#+k!ITP#,U#,g#.|P#/bP#0}P#1R#1Z#2O#2Z#4i#4q#4q#1RP#1RP#4x#5OP#5YPP#5u#6d#7U#5uP#7v#8SP#5uP#5uPP#5u#5uP#5uP#5uP#5uP#5uP#5uP#5uP#8V#5Y#8sP#9YP#9o#9o#9o#9o#9|#1RP#:d#?`#?}PPPPPPPP#@uP#ATP#ATP#Aa#Dn#9OPP#@}#EQP#Ee#Ep#Ev#Ev#@}#FlP#1R#1R#1R#1R#1RP!Io#GW#G_#G_#G_#Gc!Ly#Gm!Ly#Gq!E}!E}!E}#Gt#L^!E}>l>l>l$#V!@Q!@Q!@Q!@Q!@Q!@Q!6[!6[!6[$#jP$%V$%e!6[$%kPP!6[$'y$'|#@l$(P:t7j$+V$-Q$.q$0a7jPP7j$2T7jP7j7jP7jP$5Z7jP7jPP7j$5gPPPPPPPPP*[P$8o$8u$;^$=d$=j$>Q$>[$>g$>v$>|$@[$AZ$Ab$Ai$Ao$Aw$BR$BX$Bd$Bj$Bs$B{$CW$C^$Ch$Cn$Cx$DP$D`$Df$DlP$Dr$Dz$ER$Ea$F}$GT$GZ$Gb$GkPPPPPPPP$Gq$GuPPPPP$Nw$'y$Nz%$S%&[PP%&i%&lPPPPPPPPP%&x%'{%(R%(V%)|%+Z%+|%,T%.d%.jPPP%.t%/P%/S%/Y%0a%0d%0n%0x%0|%2Q%2s%2y#@uP%3d%3t%3w%4X%4e%4i%4o%4u$'y$'|$'|%4x%4{P%5V%5YR#cP'`mO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fU%om%p7QQ&m!`Q(j#]d0P)}/|/}0O0R4}5O5P5S8QR7Q3Tb}Oaewx{!g&S*q&v$i[!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0{1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fS%`f0h#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YS%qm!YS&u!h#PQ']!tQ'g!yQ'h!zQ(j#`Q(k#]Q(l#^Q*x%kQ,W&lQ,]&nQ-S'^Q-d'fQ-k'qS.r(Z4XQ/f)gQ0e*mQ2Q,[Q2X,cQ3O-eQ4b.|Q4f/TQ5f0}Q6[2TQ6}3PQ8a6ZQ9e7zR;Z1Q$|#hS!]$y%Q%T%Z&j&k'Q'X'Z'a'c(a(e(h(w(x)R)S)T)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:iQ&p!dQ(g#ZQ(s#bQ)j$T[*s%e*W0k2`2g2{Q,^&oQ/O(fQ/S(kQ/Z(tS/i)i/PQ0r+QS4q/j/kR8O4r'a![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f'a!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ)O#kS+Q%y0sQ/r)sk3}.g3s3w3z3{7c7e7f7h7k9X9Y:RQ)Q#kk3|.g3s3w3z3{7c7e7f7h7k9X9Y:Rl)P#k.g3s3w3z3{7c7e7f7h7k9X9Y:RT+Q%y0s[UOwx!g&S*qW$`[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.o&|;{af{|!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k$|$}%S%]%h%m&Q&W&b&y&|'O'i'j'u'y(`(i)l)r*`*b*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0]0h0y0{1Q1a1b1l1p1z2c2i2j2u4O4R4W4a5Y5a5e5q6_6c6f6g6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f;`;xQ;|1Sd;}&x'P'b,w-]-^-a2f2z2}W<O&f*v1|3iQ<P#O[<Q!t'^'f,[2T6ZT<]%y0s[VOwx!g&S*qW$a[e$e(bQ$p.u!j$q_!f!u!}#V#Z$S$T$l%U&U&Y&c&m'_(g)j)p+[+a+t,X,k,z-Q-o.d1T1X1f1k1m2l3t5j8Z&^$zaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fQ'r#O|'|#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[l(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS-n't-wQ3W-tU;s(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;x[<Q!t'^'f,[2T6ZW<R&f*v1|3id<S&x'P'b,w-]-^-a2f2z2}Q<Z1ST<]%y0s!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!v$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$Q%lgnp|#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ'[!tz(O#R#S#T#U'}(P(U(^+y.W.X._.`.q3[3]3^3p5}6P7[f-Z'`-T-V-Y2p2q2s2v6q6r8pQ1W+aQ1Z+bQ2k,yQ3X-tQ4[.uQ5l1YR8V5m!Q!UO[ewx!g$e&S&f&x'P'b(b*q*v,w-]-^-a1|2f2z2}3i!x$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'t(Q(g)j)p+[+a+t,X,k,z-Q-o-w.d.m.o1S1T1X1f1k1m2l3t5j8Z&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$S%lgnp|!t#k$g$|$}%S%d%h%i%w%y&s'^'f'u*Y*`*b*t+],[,l,v-_-p.f.g0]0s0y0z1O2T2_2j3s3w3z3{5a6Z6g7c7e7f7h7k9X9Y:R;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y|(O#R#S#T#U'}(P(U(^+b+y.W.X._.`.q3[3]3^3p5}6P7[Q3X-tR4[.u[WOwx!g&S*qW$b[e$e(b#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_'}(P(U(^(g)j)p+[+a+b+t+y,X,k,z-Q-o-t.W.X._.`.d.q.u1T1X1f1k1m2l3[3]3^3p3t5j5}6P7[8Z![%cg$g%d%i&s*Y*t+],l,v-_0z1O2_;W;X;Y;a;b;o;p;q;r;v;w;y<W<X<YY%snp%w-p.fl(|#k.g3s3w3z3{7c7e7f7h7k9X9Y:RS;e't-wU;f(Q.m.on;{|$|$}%S%h'u*`*b0]0y2j5a6g;`;xQ;|1SQ<P#O[<Q!t'^'f,[2T6Z&^<Taf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'i'j'y(`(i)l)r*h*i*l*r+W+Y+h+j+k,P,R,n,q-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z2c2i2u4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fd<U&x'P'b,w-]-^-a2f2z2}W<V&f*v1|3iT<]%y0sp$PT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)m$V*U*[/_:w:x:y;h;i;j;k;l;m;n;up$QT$_$o%b%r({:z:{:|;[;];^;_;c;d<[o)n$V*U*[/_:w:x:y;h;i;j;k;l;m;n;u^&e}!O$i$j%`%j;Zd&i!U$t%P%l'[(O1W1Z3X4[V/a)O)P3}S%Ye$eQ,T&fQ.{(bQ2m-QQ5y1mQ6V1|Q6m2lR9h8Z#}!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Z#[^O[_`wx!f!g!}#O$S$d$l$s$u&S&U&Y&c&m&r&x'P'b't(Q)p*]*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3t_(U#R#S#T+b3[3]3^#}ZO[wx!g!k#R#S#T%m&S&U&Y&c&m&w&x&y&|'O'P'['b't'x'}(P(Q(U*q*v+[+b,X,h,k,q-P-]-^-a-o-t-w-z._.d.m.q1S1T1f2c2k2z2}3[3]3^3i6c6j8g9l9p:W:]:fQ$]YR0T*OR*Q$]e0P)}/|/}0O0R4}5O5P5S8Q'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fe0P)}/|/}0O0R4}5O5P5S8QR5T0T^(T#R#S#T+b3[3]3^Y.]'}(R(U(V7TU3k.Z.^.qS7X3l4VR9c7s^(S#R#S#T+b3[3]3^[.['}(R(T(U(V7TW3j.Z.].^.qU7W3k3l4VS8z7X7sR:V9cT.k(Q.md]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tQ%tnT1u+}1v!jbOaenpwx{|!g#O$|$}%S%h%w&S't'u(Q*`*b*q-p-w.f.m.o0]0y1S2j5a6g;`;xf-W'`-T-V-Y2p2q2s2v6q6r8pj3x.g3s3w3z3{7c7e7f7h7k9X9Y:Rr;zg$g%d%i&s*Y*t,l,v-_2_;W;X;Y;o;q;vi<^+]0z1O;a;b;p;r;w;y<W<X<Y!O&^y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yz&az%O%W%e&d's*W*_,b-x0Z0[0k0|2`2g2{5V5b6l8iS'{#Q.Xn+l&X*g+f+m+p-j/h0_1R1^4t5W5`5u8XQ2W,a^2t-X2r2x6p6w8o9se7i3y7_7g7o7p9U9W9`:Q:cS+^&U1TY+n&Y&c*v1S3iR5s1f#w!POaegnpwx{|!g#O$g$|$}%S%d%h%i%w&S&s't'u(Q*Y*`*b*q*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Y`oOwx!g&S't*q-w#U!Paeg{|#O$g$|$}%S%d%h%i&s'u*Y*`*b*t+],l,v-_0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YU%vnp-pQ*}%wS.e(Q.mT3v.f.oW+r&^+l+s1cV+z&a+{7iQ+x&`U+z&a+{7iQ-w'tT.S'y.U'`![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'W!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fW1r+y.X5}6PR2e,s!WjO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fY%Ve$e(b1p3iQ'S!nS(y#i5YQ,m&xQ,x'PS.O'y.UQ2b,nQ6k2iQ6|2}Q8h6fR9m8e'W![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fX1r+y.X5}6P'ayO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k+y,P,R,n,q,w-]-^-a-g.P.Q.U.X.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q5}6P6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ&`yS't#O-uR1[+cS+^&U1TR5n1[Q1P+]R5g1OR1P+]T+^&U1Tz&[%X&V&Y&Z'k)h*d*f+]+e/m0^0y0z1O1S1j5a5v;x;yQ&]yR1n+x!P&[y%X&V&Y&Z'k)h*d*f+]+e+x/m0^0y0z1O1S1j5a5v;x;yQ+u&^S+|&a7iS1d+l+sQ1t+{R5r1c!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fS%zo.eS&Oq-rQ&_yQ&q!eQ'e!yQ*p%eU*{%v%{3vS+P%x%}Q+q&]Q,Y&mS,Z&n'gQ,r&{S0X*W,bS0o*|*}Q0q+OQ1o+xS2S,]-fQ5U0ZQ5Z0pQ5{1nQ6Y2RQ6]2WQ7n3yQ9S7_R:P9U[uOwx!g&S*qQ,Y&mQ-v'tQ3Y-tR3_-wxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^S%zo.eS&Oq-rQ*p%eU*{%v%{3vS+P%x%}S0X*W,bS0o*|*}Q0q+OQ5U0ZQ5Z0pQ7n3yQ9S7_R:P9UT,_&q,`]uOwx!g&S*q[uOwx!g&S*qQ,Y&mQ,n&xQ,w'PW-`'b-]-a2zQ-v'tQ3Y-tQ3_-wR6{2}[%fg$g,l,v-_2_R0l*t^$XV!U$a$z%P<R<SQ'S!nS)`#}*vS)v$W*qQ)y$YY*s%e*W0k2g2{Q/O(fS/i)i/PS0a*h4aS0j*r6_Q0r+QQ4Q.gQ4n/cS4q/j/kS4v/n5YQ4{/uQ6`2`U7a3s3y4RQ8O4rQ8k6hY9Q7_7b7c7l7mQ9r8mW9z9O9R9U9VQ:Z9oU:a9{9}:OR:j:bS)v$W*qT4v/n5YZ)t$W)u*q/n5YQ&w!hR'x#PS,g&v'vQ2[,eR6^2ZxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fV$h[&|-^!XkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:f!WhO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR'W!q!WkO[wx!g!k%m&S&y&|'O'b*q,q-]-^-a2c2z6c6j8g9l9p:W:]:fR,n&xQ&y!iQ&{!jQ'O!lR,q&zR,o&xxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fX-`'b-]-a2z[uOwx!g&S*qQ,z'PQ-v'tS.k(Q.mR3_-w[uOwx!g&S*qQ,z'PW-`'b-]-a2zT.k(Q.mg-Z'`-T-V-Y2p2q2s2v6q6r8pylOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fb!OOaewx{!g&S*q&|$j[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d%jgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<YQ']!tQ-S'^Q-d'fQ2Q,[Q6[2TR8a6Zj$RT$_%b%r:z:{:|;[;];^;_;c;di)o$V*U:w:x:y;h;i;j;k;l;m;nj$RT$_%b%r:z:{:|;[;];^;_;c;dh)o$V*U:w:x:y;h;i;j;k;l;m;nS/^({<[V4k/_/`;u[uOwx!g&S*qQ-v'tR3_-w[uOwx!g&S*qT.k(Q.m'`!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fR7R3T[uOwx!g&S*qQ-v'tS.k(Q.mR3_-w[pOwx!g&S*qQ%wnS-p't-wT.f(Q.mS%{o.eS*|%v3vR0p*}Q+R%yR5]0sS%zo.eS&Oq-rU*{%v%{3vS+P%x%}S0o*|*}Q0q+OQ5Z0pQ7n3yQ9S7_R:P9U`qOwx!g&S(Q*q.mS%xn-pU%}p.f.oQ+O%wT-r't-wS'z#Q.XR.Y'{T.R'y.US.S'y.UQ8x7UR9w8yT5}1q8_R6P1q#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&}![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f#d!Pgnp|#O$g$|$}%S%d%h%i%w&s't'u(Q*Y*`*b*t+],l,v-_-p-w.f.m.o0]0y0z1O1S2_2j5a6g;W;X;Y;`;a;b;o;p;q;r;v;w;x;y<W<X<Yb!QOaewx{!g&S*q&|![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W4a5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fk3|.g3s3w3z3{7c7e7f7h7k9X9Y:RQ4Q.gS7a3s3yU9Q7_7c7lS9z9O9UR:a9}#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR4].uQ(]#US.v([(^S4^.w.xR7w4_Q.s(ZR7u4X#|!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o1S1T1X1f1k1m1|2f2l2z2}3i3t5j8Zp$w`$d$s%X&r'`(_(f)i*d-T/k1j5k5v8Uq(}#k%y.g0s3s3w3z3{7c7e7f7h7k9X9Y:RR,U&fR6W1|'X!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:f$q#rS%T%Z'Q'X'Z'a'c(a(e(h(w(x)R)S)U)V)W)X)Y)Z)[)])^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$]#sS%T%Z'Q'X'Z'a'c(h(w(x)R)V)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$Z#tS%T%Z'Q'X'Z'a'c(h(w(x)R)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i$c#wS%T%Z'Q'X'Z'a'c(h(w(x)R)U)V)W)X)^)_)k)q)x+X+g,O,S,j,u-h-i-|.y/p0`0b0g0i0w1`1y2a2h3R3c3d4c4d4j4m4s4u4y4z5d5p5w6U6e6i6s6z7q7r7t8S8T8c8f8j8r9T9[9k9q9|:T:Y:`:i'X![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/[/c/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ/P(fQ/j)iQ4r/kR9d7y']![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'i'j'y(`(b(i)l)r*h*i*l*q*r*v+W+Y+h+j+k,P,R,n,q,w-]-^-a-g.P.Q.U.}/Q/[/c/l/n/s/u0h0{1Q1a1b1l1p1z1|2c2f2i2u2z2}3i4O4R4W5Y5e5q6_6c6f6h6j6t6v6{7b7j7m8e8g8m8s8t9R9V9]9_9l9o9p9{:O:U:W:]:b:fQ#eQR(u#eU$|a;`;xb%Ue$e&f(b-Q1m1|2l8ZQ'_!u!Q*^$|%U'_*`*f+h,P0]0^1b2p6q6t7e8p9X9]:R;W;o;p;v;w<WS*`$}%SQ*f%XS+h&W1QQ,P&bQ0]*bQ0^*dQ1b+kQ2p-VS6q2q2sQ6t2uQ7e3wQ8p6rS9X7f7hQ9]7jQ:R9YQ;W%dS;o;X;YS;p<X<YQ;v;qQ;w;rT<W0z;a[[Owx!g&S*ql$c[&|'}+[,X,h,k-P-^-o-z._.d.ql&|!k%m&y'O,q2c6c6j8g9l9p:W:]:f^'}#R#S#T+b3[3]3^`+[&U&Y&c*v1S1T1f3iS,X&m-tQ,h&wU,k&x'P2}S-P'[2kW-^'b-]-a2zS-o't-wQ-z'xQ._(PS.d(Q.mR.q(UQ)|$[R/x)|Q0R)}Q4}/|Q5O/}Q5P0OY5Q0R4}5O5P8QR8Q5SQ*P$]S0U*P0VR0V*QS.`(P._S3n.`7[R7[3pQ3q.aS7Y3o3rU7^3q7Y8{R8{7ZQ.m(QR4S.m!|_O[wx!f!g!}#O$S$l&S&U&Y&c&m&x'P'b't(Q)p*q*v+[,X,k,w,z-]-^-a-o-t-w.d.m.o1S1T1f2f2z2}3i3tU$r_$u*]U$u`$d&rR*]$sU$}a;`;xd*a$}*b2q6r7f9Y;X;q;r<XQ*b%SQ2q-VQ6r2sQ7f3wQ9Y7hQ;X%dQ;q;YQ;r<YT<X0z;aS+{&a7iR1s+{S*j%Z/pR0c*jQ1U+_R5i1UU+e&V0z;xR1]+eQ+s&^Q1c+lT1i+s1cQ8[5yR9i8[QwOS&Rw&ST&Sx*qQ,`&qR2V,`W)u$W*q/n5YR/t)uU/o)q)v0gR4w/o[*u%e%f*W2`2g2{R0m*uQ,d&uR2Y,dQ-a'bQ2z-]T2|-a2zQ2w-XR6x2wQ-f'gQ2R,]T3Q-f2RS%pm7QR*z%pdnOwx!g&S't(Q*q-w.mR%unQ0t+RR5^0tQ.U'yR3f.UQ1v+}R6Q1vU*n%`*x;ZR0f*nS1g+n0nR5t1gQ7l3yQ9O7_U9a7l9O9}R9}9U$O!SO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b't(Q(b(g)j)p*q*v+[+a+t,X,k,w,z-Q-]-^-a-o-t-w.d.m.o.u1S1T1X1f1k1m1|2f2l2z2}3i3t5j8ZR&g!SQ4Y.sR7v4YQ1},UR6X1}S/d)_)`R4o/dW(o#a(j(k/SR/W(oQ7{4fR9f7{T)a#}*v!USO[wx!g!k%m&S&y&|'O'b,q-]-^-a2c2z6c6j8g9l9p:W:]:fj$ya{$k%]+j,R1a1z5q6v8s9_:UY%Te$e(b1p3iY%Zf$f(i)l*lQ&j!WQ&k!XQ'Q!nQ'X!rQ'Z!sQ'a!vQ'c!xQ(a#XQ(e#YS(h#[+YQ(w#gQ(x#iQ)R#lQ)S#qQ)T#rQ)U#sQ)V#tQ)W#uQ)X#vQ)Y#wQ)Z#xQ)[#yQ)]#zQ)^#{S)_#}*vQ)k$UQ)q$WQ)x$YQ+X&QS+g&W1QQ,O&bQ,S&fQ,j&xQ,u'PQ-h'iQ-i'jS-|'y.UQ.y(`S/p)r0hS0`*h4aQ0b*iQ0g*qQ0i*rQ0w+WS1`+h+kQ1y,PQ2a,nS2h,w6{Q3R-gQ3c.PQ3d.QQ4c.}Q4d/QQ4j/[Q4m/cQ4s/lQ4u/nQ4y/sQ4z/uQ5d0{Q5p1bQ5w1lQ6U1|S6e2f8tQ6i2iQ6s2uQ6z2}Q7q4OQ7r4RQ7t4WQ8S5YQ8T5eQ8c6_Q8f6fQ8j6hQ8r6tS9T7b7mQ9[7jQ9k8eQ9q8mS9|9R9VQ:T9]Q:Y9oS:`9{:OR:i:bR,V&fd]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3t#r${ae!u$e$|$}%S%U%X%d&W&b&f'_(b*`*b*d*f+h+k,P-Q-V0]0^1Q1b1m1|2l2p2q2s2u3w6q6r6t7e7f7h7j8Z8p9X9Y9]:R;W;X;Y;`;a;o;p;q;r;v;w<W<X<YQ%tnS+d&V+eW+r&^+l+s1cU+z&a+{7iQ1k+tT5c0z;x``Owx!g&S't*q-wS$d[-oQ$s_b%Xe$e&f(b-Q1m1|2l8Z!h&r!f!}#O$S$l&U&Y&c&m&x'P'b(Q)p*v+[,X,k,w,z-]-^-a-t.d.m.o1S1T1f2f2z2}3i3tQ'`!uS(_#V+aQ(f#ZS)i$T(gQ*d%UQ-T'_Q/k)jQ1j+tQ5k1XQ5v1kR8U5jS(W#R3]S(X#S3^V(Y#T+b3[R$^Ye0Q)}/|/}0O0R4}5O5P5S8QW(R#R#S#T+bQ([#US.Z'}(US.a(P._Q.x(^W1r+y.X5}6PQ3Z-tQ3h.WQ3o.`Q4V.qU7T3[3]3^Q7]3pR8|7[Q.b(PR3m._T.l(Q.mdgOwx!g&S&m't*q-t-wU$g[,X-oQ&s!fQ'k!}Q'u#OQ)h$SQ*Y$l`+]&U&Y&c*v1S1T1f3iQ,l&xQ,v'PY-_'b-]-a2z2}S.g(Q.mQ/m)pQ0y+[S2_,k-^S2j,w,zS3s.d.oQ6g2fR7c3td]Owx!g&S't(Q*q-w.m!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)p*]*v+[,X,k,w,z-]-^-a-o-t.d.o1S1T1f2f2z2}3i3tR%tnQ3y.gQ7_3sQ7g3wQ7o3zQ7p3{Q9U7cU9W7e7f7hQ9`7kS:Q9X9YR:c:RZ+o&Y&c*v1S3ipzOnpwx!g%w&S't(Q*q-p-w.f.m.o[%Oa%d0z;`;a;xU%We%h1SQ%eg^&d{|%i1O5a;b;yQ's#OQ*W$gb*_$|$}%S;W;X;Y<W<X<YQ,b&sQ-x'uQ0Z*Y[0[*`*b;o;p;q;rQ0k*tQ0|+]Q2`,lQ2g,vS2{-_2_U5V0];v;wQ5b0yQ6l2jR8i6gQ+}&aR9Z7iS1q+y.XQ8^5}R8_6P[%^f$f(i)l)r0hR0d*lR+`&UQ+_&UR5h1TS&Xy+xQ*g%XU+f&V0z;xS+m&Y1SW+p&Z1O5a;yQ-j'kQ/h)hS0_*d*fQ1R+]Q1^+eQ4t/mQ5W0^Q5`0yQ5u1jR8X5vR5z1mYvOwx&S*qR&t!gW%gg,l,v-_T*X$g2_T)w$W*q[uOwx!g&S*qQ&}!kQ*y%mQ,p&yQ,t'OQ2d,qQ6b2cQ8d6cQ8l6jQ9n8gQ:X9lQ:[9pQ:e:WQ:g:]R:k:fxlOwx!g!k%m&S&y'O*q,q2c6c6j8g9l9p:W:]:fU$h[&|-^X-`'b-]-a2zQ-['`R2o-TS-X'`-TQ2r-VQ2x-YU6p2p2q2sQ6w2vS8o6q6rR9s8p[rOwx!g&S*qS-q't-wT.h(Q.mR+S%y[sOwx!g&S*qS-s't-wT.i(Q.m[tOwx!g&S*qT.j(Q.mT.T'y.UX%af%k0h1QQ.w([R4_.xR.t(ZR(d#XQ(r#aS/R(j(kR4e/SR/V(lR4g/T",
      nodeNames: "\u26A0 RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ) ( ArgumentList ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr constinit consteval StructSpecifier struct MsDeclspecModifier __declspec Attribute AttributeName Identifier AttributeArgs { } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp , Number CharLiteral AttributeArgs VirtualSpecifier BaseClassClause Access virtual FieldDeclarationList FieldDeclaration extern static register inline thread_local AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept RequiresClause requires True False ParenthesizedExpression CommaExpression LambdaExpression LambdaCaptureSpecifier TemplateParameterList OptionalParameterDeclaration TypeParameterDeclaration typename class VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration template AbstractFunctionDeclarator AbstractPointerDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ThrowSpecifier throw TrailingReturnType CompoundStatement FunctionDefinition MsCallModifier TryStatement try CatchClause catch LinkageSpecification Declaration InitDeclarator InitializerList InitializerPair SubscriptDesignator FieldDesignator ExportDeclaration export ImportDeclaration import ModuleName PartitionName HeaderName CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto CoReturnStatement co_return CoYieldStatement co_yield AttributeStatement ForRangeLoop AliasDeclaration using TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ThrowStatement NamespaceDefinition namespace ScopedIdentifier Identifier OperatorName operator ArithOp BitOp CompareOp LogicOp new delete co_await ConceptDefinition concept UsingDeclaration enum StaticAssertDeclaration static_assert ConcatenatedString TemplateDeclaration FriendDeclaration friend union FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause FunctionDefinition OperatorCast operator TemplateInstantiation FunctionDefinition FunctionDefinition Declaration ModuleDeclaration module RequiresExpression RequirementList SimpleRequirement TypeRequirement CompoundRequirement ReturnTypeRequirement ConstraintConjuction LogicOp ConstraintDisjunction LogicOp ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator TemplateFunction OperatorName StructuredBindingDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration AccessSpecifier UnionSpecifier ClassSpecifier EnumSpecifier SizedTypeSpecifier TypeSize EnumeratorList Enumerator DependentType Decltype decltype auto PlaceholderTypeSpecifier ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CoAwaitExpression CompoundLiteralExpression NULL NewExpression new NewDeclarator DeleteExpression delete ParameterPackExpansion nullptr this UserDefinedLiteral ParamPack #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
      maxTerm: 425,
      nodeProps: [
        ["group", -35, 1, 8, 11, 15, 16, 17, 19, 71, 72, 100, 101, 102, 104, 191, 208, 229, 242, 243, 270, 271, 272, 277, 280, 281, 282, 284, 285, 286, 287, 290, 292, 293, 294, 295, 296, "Expression", -13, 18, 25, 26, 27, 43, 255, 256, 257, 258, 262, 263, 265, 266, "Type", -19, 126, 129, 147, 150, 152, 153, 158, 160, 163, 164, 166, 168, 170, 172, 174, 176, 178, 179, 188, "Statement"],
        ["isolate", -4, 4, 5, 8, 10, ""],
        ["openedBy", 12, "(", 52, "{", 54, "["],
        ["closedBy", 13, ")", 51, "}", 53, "]"]
      ],
      propSources: [cppHighlighting],
      skippedNodes: [0, 3, 4, 5, 6, 7, 10, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 347, 348],
      repeatNodeCount: 41,
      tokenData: "&*r7ZR!UOX$eXY({YZ.gZ]$e]^+P^p$epq({qr.}rs0}st2ktu$euv!7dvw!9bwx!;exy!<Yyz!=Tz{!>O{|!?R|}!AV}!O!BQ!O!P!DX!P!Q#+y!Q!R#Az!R![$(x![!]$Ag!]!^$Cc!^!_$D^!_!`%1W!`!a%2X!a!b%5_!b!c$e!c!n%6Y!n!o%7q!o!w%6Y!w!x%7q!x!}%6Y!}#O%:n#O#P%<g#P#Q%Kz#Q#R%Ms#R#S%6Y#S#T$e#T#i%6Y#i#j%Nv#j#o%6Y#o#p&!e#p#q&#`#q#r&%f#r#s&&a#s;'S$e;'S;=`(u<%lO$e&t$nY)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&r%eW)]W'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^&j&SU'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j&kX'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j']V'f&jOY%}YZ%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j'uP;=`<%l%}&r'{P;=`<%l%^&l(VW(qQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O&l(rP;=`<%l(O&t(xP;=`<%l$e7Z)Y`)]W(qQ(n.o'f&j*Z)`OX$eXY({YZ*[Z]$e]^+P^p$epq({qr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e.o*aT(n.oXY*[YZ*[]^*[pq*[#O#P*p.o*sQYZ*[]^*y.o*|PYZ*[4e+[`)]W(qQ(n.o'f&jOX$eXY+PYZ*[Z]$e]^+P^p$epq+Pqr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e4Z,cX'f&jOY%}YZ-OZ]%}]^-{^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4Z-V[(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4Z.QV'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P.nT*W)`(n.oXY*[YZ*[]^*[pq*[#O#P*p3o/[[%^!b'QP)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o0_Y%]!b!a,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e6e1YY)]W(oQ(p/]'f&jOY%^Zr%^rs1xsw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^(U2RW)x!b)]W'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^4e2tf)]W(qQ'f&jOX$eXY2kZp$epq2kqr$ers%^sw$ewx(Ox!c$e!c!}4Y!}#O$e#O#P&f#P#T$e#T#W4Y#W#X5m#X#Y>u#Y#]4Y#]#^NZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e4eb)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e5xd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y7W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e7cd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z8q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e8|d)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^:[#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e:gd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#b4Y#b#c;u#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e<Qd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y=`#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e=mb)]W(qQ'e.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e?Qf)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a@f#a#b4Y#b#cHV#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e@qf)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^BV#^#g4Y#g#hEV#h#o4Y#o;'S$e;'S;=`(u<%lO$e4eBbd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZCp#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eC}b)]W(qQ'f&j'l.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eEbd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#YFp#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4eF}b)]W(qQ'j.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eHbd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#XIp#X#o4Y#o;'S$e;'S;=`(u<%lO$e4eI{d)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^KZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4eKfd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZLt#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eMRb)]W(qQ'f&j'k.o'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eNff)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z! z#Z#b4Y#b#c!.[#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!!Xf)]W(qQ'g.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!#m#X#b4Y#b#c!(W#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!#xd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!%W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!%cd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!&q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!'Ob)]W(qQ'h.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!(cd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!)q#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!)|d)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!+[#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!+gd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!,u#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!-Sb)]W(qQ'i.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!.gd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#V4Y#V#W!/u#W#o4Y#o;'S$e;'S;=`(u<%lO$e4e!0Qd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a!1`#a#o4Y#o;'S$e;'S;=`(u<%lO$e4e!1kd)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#i4Y#i#j!2y#j#o4Y#o;'S$e;'S;=`(u<%lO$e4e!3Ud)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!4d#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!4od)]W(qQ'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!5}#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!6[b)]W(qQV.o'f&j'm.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e3o!7q[)]W(qQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!8rY!g-y)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!9o])W,g)]W(qQ%[!b'f&jOY$eZr$ers%^sv$evw!:hwx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!:uY)V,g%^!b)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2X!;pW)ZS(qQ)[,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O6i!<eY)]W(qQ]6_'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V!=`Y[a)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!>][)T,g)]W(qQ%Z!b'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!?`^)]W(qQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|!@[|!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!@gY)]W!X-y(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!AbY!h,k)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!B__)]W(qQ%Z!b!Y,g'f&jOY$eZr$ers%^sw$ewx(Ox}$e}!O!@[!O!_$e!_!`!8g!`!a!C^!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!CiY(x-y)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Dd^)]W(qQ'f&j(w,gOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!E`!P!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Ei[)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!F_!P#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!FjY)Y,k)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]!Gen)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx!Icx!Q$e!Q![!GY![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T!IjY(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![!JY![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T!Jcn(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Icx!Q(O!Q![!JY![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ljl(qQ!i,g'f&jOY(OZr(Ors%}s{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ni^(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![# e![!c(O!c!i# e!i#O(O#O#P&f#P#T(O#T#Z# e#Z;'S(O;'S;=`(o<%lO(O2T# nj(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx!Nbx!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T##id(qQ!i,g'f&jOY(OZr(Ors%}s!h(O!h!i##`!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#Y(O#Y#Z##`#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]#%Sn)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#'Z`)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![#(]![!c$e!c!i#(]!i#O$e#O#P&f#P#T$e#T#Z#(]#Z;'S$e;'S;=`(u<%lO$e2]#(hj)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx!Nbx!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#*ef)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!h$e!h!i#*Y!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#Y$e#Y#Z#*Y#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e7Z#,W`)]W(qQ%Z!b![,g'f&jOY$eZr$ers%^sw$ewx(Oxz$ez{#-Y{!P$e!P!Q#:s!Q!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#-c])]W(qQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y1e#._TOz#.[z{#.n{;'S#.[;'S;=`#/]<%lO#.[1e#.qVOz#.[z{#.n{!P#.[!P!Q#/W!Q;'S#.[;'S;=`#/]<%lO#.[1e#/]OT1e1e#/`P;=`<%l#.[7X#/jZ)]W'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7P#0bX'f&jOY#0]YZ#.[Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1SZ'f&jOY#0]YZ#.[Zz#0]z{#0}{!P#0]!P!Q#1u!Q#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1|UT1e'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P#2eZ'f&jOY#0]YZ#0]Z]#0]]^#3W^z#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3]X'f&jOY#0]YZ#0]Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3{P;=`<%l#0]7X#4V])]W'f&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{!P#/c!P!Q#5O!Q#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7X#5XW)]WT1e'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^7X#5tP;=`<%l#/c7R#6OZ(qQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#6x](qQ'f&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{!P#5w!P!Q#7q!Q#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#7zW(qQT1e'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O7R#8gP;=`<%l#5w7Z#8s_)]W(qQ'f&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{!P#-Y!P!Q#9r!Q#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y7Z#9}Y)]W(qQT1e'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#:pP;=`<%l#-Y7Z#;OY)]W(qQS1e'f&jOY#:sZr#:srs#;nsw#:swx#@{x#O#:s#O#P#<z#P;'S#:s;'S;=`#At<%lO#:s7X#;wW)]WS1e'f&jOY#;nZw#;nwx#<ax#O#;n#O#P#<z#P;'S#;n;'S;=`#@u<%lO#;n7P#<hUS1e'f&jOY#<aZ#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#=RXS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P;'S#<a;'S;=`#>[<%lO#<a7P#=uVS1e'f&jOY#<aYZ%}Z#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#>_P;=`<%l#<a7P#>i]S1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c#f#<a#f#g#?b#g;'S#<a;'S;=`#>[<%lO#<a7P#?iUS1e'f&jOY#<aZ#O#<a#O#P#?{#P;'S#<a;'S;=`#>[<%lO#<a7P#@SZS1e'f&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c;'S#<a;'S;=`#>[<%lO#<a7X#@xP;=`<%l#;n7R#AUW(qQS1e'f&jOY#@{Zr#@{rs#<as#O#@{#O#P#<z#P;'S#@{;'S;=`#An<%lO#@{7R#AqP;=`<%l#@{7Z#AwP;=`<%l#:s2]#BVt)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$+X#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$=`#m;'S$e;'S;=`(u<%lO$e2T#DnY(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![#E^![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T#Egp(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx#Dgx!O(O!O!P#Gk!P!Q(O!Q![#E^![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#Gtn(qQ!i,g'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#I{p(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#LW^(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!i#Ir!i#O(O#O#P&f#P#T(O#T#Z#Ir#Z;'S(O;'S;=`(o<%lO(O2T#M]t(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx#LPx{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$ xp)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$$Xp)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$&ht)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#LPx{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$)Tp)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$+b_)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$-`!R![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$,j[)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$-kt)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$/{#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e2]$0U[)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$1T`)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$2br)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T$4s^(qQ'f&jOY(OZr(Ors%}s!Q(O!Q![$5o![!c(O!c!i$5o!i#O(O#O#P&f#P#T(O#T#Z$5o#Z;'S(O;'S;=`(o<%lO(O2T$5xr(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx!O(O!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T$8]u(qQ!i,g'f&jOY(OZr(Ors%}sw(Owx$4lx{(O{|!Nb|}(O}!O!Nb!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$:{u)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx{$e{|#'Q|}$e}!O#'Q!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$=ic)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$>t!R![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$?Pv)]W(qQ!i,g'f&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#U$2V#U#V$2V#V#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e4e$Ar[(v-X)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox![$e![!]$Bh!]#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3s$BsYm-})]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$CnY)X,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7V$Dk_q,g%]!b)]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!^$Ej!^!_%+w!_!`%.U!`!a%0]!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej*[$Es])]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ejp$FoTO!`$Fl!`!a$GO!a;'S$Fl;'S;=`$GT<%lO$Flp$GTO$Wpp$GWP;=`<%l$Fl*Y$GbZ)]W'f&jOY$GZYZ$FlZw$GZwx$HTx!`$GZ!`!a%(U!a#O$GZ#O#P$Ib#P;'S$GZ;'S;=`%(y<%lO$GZ*Q$HYX'f&jOY$HTYZ$FlZ!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q$IOU$WpY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}*Q$Ig['f&jOY$HTYZ$HTZ]$HT]^$J]^!`$HT!`!a$NO!a#O$HT#O#P%&n#P;'S$HT;'S;=`%'f;=`<%l%$z<%lO$HT*Q$JbX'f&jOY$HTYZ$J}Z!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT'[$KSX'f&jOY$J}YZ$FlZ!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$KvU$Wp'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}'[$L_Z'f&jOY$J}YZ$J}Z]$J}]^$MQ^!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MVX'f&jOY$J}YZ$J}Z!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MuP;=`<%l$J}*Q$M{P;=`<%l$HT*Q$NVW$Wp'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`$NtW'f&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`% eUY#t'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%})`% |Y'f&jOY$NoYZ$NoZ]$No]^%!l^#O$No#O#P%#d#P;'S$No;'S;=`%$[;=`<%l%$z<%lO$No)`%!qX'f&jOY$NoYZ%}Z!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%#aP;=`<%l$No)`%#iZ'f&jOY$NoYZ%}Z]$No]^%!l^!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%$_XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$No<%lO%$z#t%$}WOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h<%lO%$z#t%%lOY#t#t%%oRO;'S%$z;'S;=`%%x;=`O%$z#t%%{XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l%$z<%lO%$z#t%&kP;=`<%l%$z*Q%&sZ'f&jOY$HTYZ$J}Z]$HT]^$J]^!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q%'iXOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$HT<%lO%$z*Y%(aW$WpY#t)]W'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^*Y%(|P;=`<%l$GZ*S%)WZ(qQ'f&jOY%)PYZ$FlZr%)Prs$HTs!`%)P!`!a%)y!a#O%)P#O#P$Ib#P;'S%)P;'S;=`%*n<%lO%)P*S%*UW$WpY#t(qQ'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O*S%*qP;=`<%l%)P*[%+RY$WpY#t)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e*[%+tP;=`<%l$Ej7V%,U^)]W(qQ%[!b!f,g'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!_$Ej!_!`%-Q!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%-]]!g-y)]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%.c]%]!b!b,g)]W(qQ'f&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%/[!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%/mY%]!b!b,g$WpY#t)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e)j%0hYY#t)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%1c[)j!c)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%2f]%]!b)]W(qQ!d,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`%3_!`!a%4[!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%3lY%]!b!b,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%4i[)]W(qQ%[!b!f,g'f&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%5jY(uP)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z%6ib)]W(yS(qQ!R,f(r%y'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e7Z%8Qb)]W(yS(qQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e5P%9cW)]W(p/]'f&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^2T%:UW(qQ)[,g'f&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O3o%:yZ!V-y)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox!}$e!}#O%;l#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%;wY)QP)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e4e%<la'f&jOY%=qYZ%>[Z]%=q]^%?Z^!Q%=q!Q![%?w![!w%=q!w!x%AX!x#O%=q#O#P%H_#P#i%=q#i#j%Ds#j#l%=q#l#m%IR#m;'S%=q;'S;=`%Kt<%lO%=q&t%=xUXY'f&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4e%>e[XY(n.o'f&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4e%?bVXY'f&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@OWXY'f&jOY%}Z!Q%}!Q![%@h![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@oWXY'f&jOY%}Z!Q%}!Q![%=q![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%A^['f&jOY%}Z!Q%}!Q![%BS![!c%}!c!i%BS!i#O%}#O#P&f#P#T%}#T#Z%BS#Z;'S%};'S;=`'r<%lO%}&t%BX['f&jOY%}Z!Q%}!Q![%B}![!c%}!c!i%B}!i#O%}#O#P&f#P#T%}#T#Z%B}#Z;'S%};'S;=`'r<%lO%}&t%CS['f&jOY%}Z!Q%}!Q![%Cx![!c%}!c!i%Cx!i#O%}#O#P&f#P#T%}#T#Z%Cx#Z;'S%};'S;=`'r<%lO%}&t%C}['f&jOY%}Z!Q%}!Q![%Ds![!c%}!c!i%Ds!i#O%}#O#P&f#P#T%}#T#Z%Ds#Z;'S%};'S;=`'r<%lO%}&t%Dx['f&jOY%}Z!Q%}!Q![%En![!c%}!c!i%En!i#O%}#O#P&f#P#T%}#T#Z%En#Z;'S%};'S;=`'r<%lO%}&t%Es['f&jOY%}Z!Q%}!Q![%Fi![!c%}!c!i%Fi!i#O%}#O#P&f#P#T%}#T#Z%Fi#Z;'S%};'S;=`'r<%lO%}&t%Fn['f&jOY%}Z!Q%}!Q![%Gd![!c%}!c!i%Gd!i#O%}#O#P&f#P#T%}#T#Z%Gd#Z;'S%};'S;=`'r<%lO%}&t%Gi['f&jOY%}Z!Q%}!Q![%=q![!c%}!c!i%=q!i#O%}#O#P&f#P#T%}#T#Z%=q#Z;'S%};'S;=`'r<%lO%}&t%HfXXY'f&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%IW['f&jOY%}Z!Q%}!Q![%I|![!c%}!c!i%I|!i#O%}#O#P&f#P#T%}#T#Z%I|#Z;'S%};'S;=`'r<%lO%}&t%JR['f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KO[XY'f&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KwP;=`<%l%=q2a%LVZ!W,V)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P#Q%Lx#Q;'S$e;'S;=`(u<%lO$e'Y%MTY)Pd)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%NQ[)]W(qQ%[!b'f&j!_,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z& Vd)]W(yS(qQ!R,f(r%y'f&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q!Y%6Y!Y!Z%7q!Z![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e2]&!pY!T,g)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o&#m^)]W(qQ%[!b'f&j!^,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P#p$e#p#q&$i#q;'S$e;'S;=`(u<%lO$e3o&$vY)U,g%^!b)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V&%qY!Ua)]W(qQ'f&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e(]&&nc)]W(qQ%[!b'RP'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&(Sc)]W(qQ'f&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&)jb)]W(qQeT'f&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![&)_![!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e",
      tokenizers: [rawString, fallback, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
      topRules: { "Program": [0, 307] },
      dynamicPrecedences: { "87": 1, "94": 1, "119": 1, "184": 1, "187": -10, "240": -10, "241": 1, "244": -1, "246": -10, "247": 1, "262": -1, "267": 2, "268": 2, "306": -10, "365": 3, "417": 1, "418": 3, "419": 1, "420": 1 },
      specialized: [{ term: 356, get: (value) => spec_identifier[value] || -1 }, { term: 33, get: (value) => spec_[value] || -1 }, { term: 66, get: (value) => spec_templateArgsEnd[value] || -1 }, { term: 363, get: (value) => spec_scopedIdentifier[value] || -1 }],
      tokenPrec: 24891
    });
  }
});

// ../../node_modules/@codemirror/lang-cpp/dist/index.js
var dist_exports2 = {};
__export(dist_exports2, {
  cpp: () => cpp,
  cppLanguage: () => cppLanguage
});
function cpp() {
  return new LanguageSupport(cppLanguage);
}
var cppLanguage;
var init_dist10 = __esm({
  "../../node_modules/@codemirror/lang-cpp/dist/index.js"() {
    init_dist9();
    init_dist5();
    cppLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "cpp",
      parser: /* @__PURE__ */ parser2.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
            TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch)\b/ }),
            LabeledStatement: flatIndent,
            CaseStatement: (context) => context.baseIndent + context.unit,
            BlockComment: () => null,
            CompoundStatement: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            Statement: /* @__PURE__ */ continuedIndent({ except: /^{/ })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": foldInside,
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          })
        ]
      }),
      languageData: {
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:case |default:|\{|\})$/,
        closeBrackets: { stringPrefixes: ["L", "u", "U", "u8", "LR", "UR", "uR", "u8R", "R"] }
      }
    });
  }
});

// ../../node_modules/@lezer/css/dist/index.js
function isAlpha2(ch2) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isDigit(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
var descendantOp, Unit, callee, identifier, VariableName, space, colon, parenL, underscore, bracketL, dash, period, hash, percent, ampersand, backslash, newline, identifiers, descendant, unitToken, cssHighlighting, spec_callee, spec_AtKeyword, spec_identifier2, parser3;
var init_dist11 = __esm({
  "../../node_modules/@lezer/css/dist/index.js"() {
    init_dist6();
    init_dist4();
    descendantOp = 101;
    Unit = 1;
    callee = 102;
    identifier = 103;
    VariableName = 2;
    space = [
      9,
      10,
      11,
      12,
      13,
      32,
      133,
      160,
      5760,
      8192,
      8193,
      8194,
      8195,
      8196,
      8197,
      8198,
      8199,
      8200,
      8201,
      8202,
      8232,
      8233,
      8239,
      8287,
      12288
    ];
    colon = 58;
    parenL = 40;
    underscore = 95;
    bracketL = 91;
    dash = 45;
    period = 46;
    hash = 35;
    percent = 37;
    ampersand = 38;
    backslash = 92;
    newline = 10;
    identifiers = new ExternalTokenizer((input, stack) => {
      for (let inside2 = false, dashes = 0, i = 0; ; i++) {
        let { next: next2 } = input;
        if (isAlpha2(next2) || next2 == dash || next2 == underscore || inside2 && isDigit(next2)) {
          if (!inside2 && (next2 != dash || i > 0)) inside2 = true;
          if (dashes === i && next2 == dash) dashes++;
          input.advance();
        } else if (next2 == backslash && input.peek(1) != newline) {
          input.advance();
          if (input.next > -1) input.advance();
          inside2 = true;
        } else {
          if (inside2)
            input.acceptToken(next2 == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);
          break;
        }
      }
    });
    descendant = new ExternalTokenizer((input) => {
      if (space.includes(input.peek(-1))) {
        let { next: next2 } = input;
        if (isAlpha2(next2) || next2 == underscore || next2 == hash || next2 == period || next2 == bracketL || next2 == colon && isAlpha2(input.peek(1)) || next2 == dash || next2 == ampersand)
          input.acceptToken(descendantOp);
      }
    });
    unitToken = new ExternalTokenizer((input) => {
      if (!space.includes(input.peek(-1))) {
        let { next: next2 } = input;
        if (next2 == percent) {
          input.advance();
          input.acceptToken(Unit);
        }
        if (isAlpha2(next2)) {
          do {
            input.advance();
          } while (isAlpha2(input.next) || isDigit(input.next));
          input.acceptToken(Unit);
        }
      }
    });
    cssHighlighting = styleTags({
      "AtKeyword import charset namespace keyframes media supports": tags.definitionKeyword,
      "from to selector": tags.keyword,
      NamespaceName: tags.namespace,
      KeyframeName: tags.labelName,
      KeyframeRangeName: tags.operatorKeyword,
      TagName: tags.tagName,
      ClassName: tags.className,
      PseudoClassName: tags.constant(tags.className),
      IdName: tags.labelName,
      "FeatureName PropertyName": tags.propertyName,
      AttributeName: tags.attributeName,
      NumberLiteral: tags.number,
      KeywordQuery: tags.keyword,
      UnaryQueryOp: tags.operatorKeyword,
      "CallTag ValueName": tags.atom,
      VariableName: tags.variableName,
      Callee: tags.operatorKeyword,
      Unit: tags.unit,
      "UniversalSelector NestingSelector": tags.definitionOperator,
      MatchOp: tags.compareOperator,
      "ChildOp SiblingOp, LogicOp": tags.logicOperator,
      BinOp: tags.arithmeticOperator,
      Important: tags.modifier,
      Comment: tags.blockComment,
      ColorLiteral: tags.color,
      "ParenthesizedContent StringLiteral": tags.string,
      ":": tags.punctuation,
      "PseudoOp #": tags.derefOperator,
      "; ,": tags.separator,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });
    spec_callee = { __proto__: null, lang: 34, "nth-child": 34, "nth-last-child": 34, "nth-of-type": 34, "nth-last-of-type": 34, dir: 34, "host-context": 34, url: 62, "url-prefix": 62, domain: 62, regexp: 62, selector: 140 };
    spec_AtKeyword = { __proto__: null, "@import": 120, "@media": 144, "@charset": 148, "@namespace": 152, "@keyframes": 158, "@supports": 170 };
    spec_identifier2 = { __proto__: null, not: 134, only: 134 };
    parser3 = LRParser.deserialize({
      version: 14,
      states: ":|QYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$[QXO'#CaO$fQ[O'#CiO$qQ[O'#DUO$vQ[O'#DXOOQP'#Eo'#EoO${QdO'#DhO%jQ[O'#DuO${QdO'#DwO%{Q[O'#DyO&WQ[O'#D|O&`Q[O'#ESO&nQ[O'#EUOOQS'#En'#EnOOQS'#EX'#EXQYQ[OOO&uQXO'#CdO'jQWO'#DdO'oQWO'#EtO'zQ[O'#EtQOQWOOP(UO#tO'#C_POOO)C@^)C@^OOQP'#Ch'#ChOOQP,59Q,59QO#kQ[O,59QO(aQ[O,59TO$qQ[O,59pO$vQ[O,59sO(lQ[O,59vO(lQ[O,59xO(lQ[O,59yO(lQ[O'#E^O)WQWO,58{O)`Q[O'#DcOOQS,58{,58{OOQP'#Cl'#ClOOQO'#DS'#DSOOQP,59T,59TO)gQWO,59TO)lQWO,59TOOQP'#DW'#DWOOQP,59p,59pOOQO'#DY'#DYO)qQ`O,59sOOQS'#Cq'#CqO${QdO'#CrO)yQvO'#CtO+ZQtO,5:SOOQO'#Cy'#CyO)lQWO'#CxO+oQWO'#CzO+tQ[O'#DPOOQS'#Eq'#EqOOQO'#Dk'#DkO+|Q[O'#DrO,[QWO'#EuO&`Q[O'#DpO,jQWO'#DsOOQO'#Ev'#EvO)ZQWO,5:aO,oQpO,5:cOOQS'#D{'#D{O,wQWO,5:eO,|Q[O,5:eOOQO'#EO'#EOO-UQWO,5:hO-ZQWO,5:nO-cQWO,5:pOOQS-E8V-E8VO-kQdO,5:OO-{Q[O'#E`O.YQWO,5;`O.YQWO,5;`POOO'#EW'#EWP.eO#tO,58yPOOO,58y,58yOOQP1G.l1G.lOOQP1G.o1G.oO)gQWO1G.oO)lQWO1G.oOOQP1G/[1G/[O.pQ`O1G/_O/ZQXO1G/bO/qQXO1G/dO0XQXO1G/eO0oQXO,5:xOOQO-E8[-E8[OOQS1G.g1G.gO0yQWO,59}O1OQ[O'#DTO1VQdO'#CpOOQP1G/_1G/_O${QdO1G/_O1^QpO,59^OOQS,59`,59`O${QdO,59bO1fQWO1G/nOOQS,59d,59dO1kQ!bO,59fOOQS'#DQ'#DQOOQS'#EZ'#EZO1vQ[O,59kOOQS,59k,59kO2OQWO'#DkO2ZQWO,5:WO2`QWO,5:^O&`Q[O,5:YO2hQ[O'#EaO3PQWO,5;aO3[QWO,5:[O(lQ[O,5:_OOQS1G/{1G/{OOQS1G/}1G/}OOQS1G0P1G0PO3mQWO1G0PO3rQdO'#EPOOQS1G0S1G0SOOQS1G0Y1G0YOOQS1G0[1G0[O3}QtO1G/jOOQO1G/j1G/jOOQO,5:z,5:zO4eQ[O,5:zOOQO-E8^-E8^O4rQWO1G0zPOOO-E8U-E8UPOOO1G.e1G.eOOQP7+$Z7+$ZOOQP7+$y7+$yO${QdO7+$yOOQS1G/i1G/iO4}QXO'#EsO5XQWO,59oO5^QtO'#EYO6UQdO'#EpO6`QWO,59[O6eQpO7+$yOOQS1G.x1G.xOOQS1G.|1G.|OOQS7+%Y7+%YOOQS1G/Q1G/QO6mQWO1G/QOOQS-E8X-E8XOOQS1G/V1G/VO${QdO1G/rOOQO1G/x1G/xOOQO1G/t1G/tO6rQWO,5:{OOQO-E8_-E8_O7QQXO1G/yOOQS7+%k7+%kO7XQYO'#CtOOQO'#ER'#ERO7dQ`O'#EQOOQO'#EQ'#EQO7oQWO'#EbO7wQdO,5:kOOQS,5:k,5:kO8SQtO'#E_O${QdO'#E_O9TQdO7+%UOOQO7+%U7+%UOOQO1G0f1G0fO9hQpO<<HeO9pQ[O'#E]O9zQWO,5;_OOQP1G/Z1G/ZOOQS-E8W-E8WO:SQdO'#E[O:^QWO,5;[OOQT1G.v1G.vOOQP<<He<<HeOOQS7+$l7+$lO:fQdO7+%^OOQO7+%e7+%eOOQO,5:l,5:lO3uQdO'#EcO7oQWO,5:|OOQS,5:|,5:|OOQS-E8`-E8`OOQS1G0V1G0VO:mQtO,5:yOOQS-E8]-E8]OOQO<<Hp<<HpOOQPAN>PAN>PO;nQXO,5:wOOQO-E8Z-E8ZO;xQdO,5:vOOQO-E8Y-E8YOOQO<<Hx<<HxOOQO,5:},5:}OOQO-E8a-E8aOOQS1G0h1G0h",
      stateData: "<[~O#]OS#^QQ~OUYOXYOZTO^VO_VOrXOyWO!]aO!^ZO!j[O!l]O!n^O!q_O!w`O#ZRO~OQfOUYOXYOZTO^VO_VOrXOyWO!]aO!^ZO!j[O!l]O!n^O!q_O!w`O#ZeO~O#W#hP~P!ZO#^jO~O#ZlO~OZnO^oO_oOrqOypO!PrO!StO#XsO~OuuO!UwO~P#pOa}O#YzO#ZyO~O#Z!OO~O#Z!QO~OQ![Oc!TOg![Oi![Oo!YOr!ZO#Y!WO#Z!SO#f!UO~Oc!^O!e!`O!h!aO#Z!]O!U#iP~Oi!fOo!YO#Z!eO~Oi!hO#Z!hO~Oc!^O!e!`O!h!aO#Z!]O~O!Z#iP~P%jOZWX^WX^!XX_WXrWXuWXyWX!PWX!SWX!UWX#XWX~O^!mO~O!Z!nO#W#hX!T#hX~O#W#hX!T#hX~P!ZO#_!qO#`!qO#a!sO~Oa!wO#YzO#ZyO~OUYOXYOZTO^VO_VOrXOyWO#ZRO~OuuO!UwO~O!T#hP~P!ZOc#RO~Oc#SO~Oq#TO}#UO~OP#WOchXkhX!ZhX!ehX!hhX#ZhXbhXQhXghXihXohXrhXuhX!YhX#WhX#YhX#fhXqhX!ThX~Oc!^Ok#XO!e!`O!h!aO#Z!]O!Z#iP~Oc#[O~Oq#`O#Z#]O~Oc!^O!e!`O!h!aO#Z#aO~Ou#eO!c#dO!U#iX!Z#iX~Oc#hO~Ok#XO!Z#jO~O!Z#kO~Oi#lOo!YO~O!U#mO~O!UwO!c#dO~O!UwO!Z#pO~O!Y#rO!Z!Wa#W!Wa!T!Wa~P${O!Z#SX#W#SX!T#SX~P!ZO!Z!nO#W#ha!T#ha~O#_!qO#`!qO#a#xO~Oq#zO}#{O~OZnO^oO_oOrqOypO~Ou!Oi!P!Oi!S!Oi!U!Oi#X!Oib!Oi~P.xOu!Qi!P!Qi!S!Qi!U!Qi#X!Qib!Qi~P.xOu!Ri!P!Ri!S!Ri!U!Ri#X!Rib!Ri~P.xOu#Qa!U#Qa~P#pO!T#|O~Ob#gP~P(lOb#dP~P${Ob$TOk#XO~O!Z$VO~Ob$WOi$XOp$XO~Oq$ZO#Z#]O~O^!aXb!_X!c!_X~O^$[O~Ob$]O!c#dO~Oc!^O!e!`O!h!aO#Z!]Ou#TX!U#TX!Z#TX~Ou#eO!U#ia!Z#ia~O!c#dOu!da!U!da!Z!dab!da~O!Z$bO~O!T$iO#Z$dO#f$cO~Ok#XOu$kO!Y$mO!Z!Wi#W!Wi!T!Wi~P${O!Z#Sa#W#Sa!T#Sa~P!ZO!Z!nO#W#hi!T#hi~Ou$pOb#gX~P#pOb$rO~Ok#XOQ!|Xb!|Xc!|Xg!|Xi!|Xo!|Xr!|Xu!|X#Y!|X#Z!|X#f!|X~Ou$tOb#dX~P${Ob$vO~Ok#XOq$wO~Ob$xO~O!c#dOu#Ta!U#Ta!Z#Ta~Ob$zO~P#pOP#WOuhX!UhX~O#f$cOu!tX!U!tX~Ou$|O!UwO~O!T%QO#Z$dO#f$cO~Ok#XOQ#RXc#RXg#RXi#RXo#RXr#RXu#RX!Y#RX!Z#RX#W#RX#Y#RX#Z#RX#f#RX!T#RX~Ou$kO!Y%TO!Z!Wq#W!Wq!T!Wq~P${Ok#XOq%UO~Ob#PXu#PX~P(lOu$pOb#ga~Ob#OXu#OX~P${Ou$tOb#da~Ob%ZO~P${Ok#XOQ#Rac#Rag#Rai#Rao#Rar#Rau#Ra!Y#Ra!Z#Ra#W#Ra#Y#Ra#Z#Ra#f#Ra!T#Ra~Ob#Pau#Pa~P#pOb#Oau#Oa~P${O#]p#^#fk!S#f~",
      goto: "-o#kPPP#lP#oP#x$YP#xP$j#xPP$pPPP$v%P%PP%cP%PP%P%}&aPPPP%P&yP&}'T#xP'Z#x'aP#xP#x#xPPP'g'|(ZPP#oPP(b(b(l(bP(bP(b(bP#oP#oP#oP(o#oP(r(u(x)P#oP#oP)U)[)k)y*P*V*]*c*i*s*y+PPPPPPPPPPP+V+`,O,RP,w,z-Q-ZRkQ_bOPdhw!n#tmYOPdhrstuw!n#R#h#t$pmSOPdhrstuw!n#R#h#t$pQmTR!tnQ{VR!uoQ!u}Q#Z!XR#y!wq![Z]!T!m#S#U#X#q#{$Q$[$k$l$t$y%Xp![Z]!T!m#S#U#X#q#{$Q$[$k$l$t$y%XU$f#m$h$|R${$eq!XZ]!T!m#S#U#X#q#{$Q$[$k$l$t$y%Xp![Z]!T!m#S#U#X#q#{$Q$[$k$l$t$y%XQ!f^R#l!gT#^!Z#_Q|VR!voQ!u|R#y!vQ!PWR!xpQ!RXR!yqQxUQ#PvQ#i!cQ#o!jQ#p!kQ%O$gR%^$}SgPwQ!phQ#s!nR$n#tZfPhw!n#ta!b[`a!V!^!`#d#eR#b!^R!g^R!i_R#n!iS$g#m$hR%[$|V$e#m$h$|Q!rjR#w!rQdOShPwU!ldh#tR#t!nQ$Q#SU$s$Q$y%XQ$y$[R%X$tQ#_!ZR$Y#_Q$u$QR%Y$uQ$q#}R%W$qQvUR#OvQ$l#qR%S$lQ!ogS#u!o#vR#v!pQ#f!_R$`#fQ$h#mR%P$hQ$}$gR%]$}_cOPdhw!n#t^UOPdhw!n#tQ!zrQ!{sQ!|tQ!}uQ#}#RQ$a#hR%V$pR$R#SQ!VZQ!d]Q#V!TQ#q!m[$P#S$Q$[$t$y%XQ$S#UQ$U#XS$j#q$lQ$o#{R%R$kR$O#RQiPR#QwQ!c[Q!kaR#Y!VU!_[a!VQ!j`Q#c!^Q#g!`Q$^#dR$_#e",
      nodeNames: "\u26A0 Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector . ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent ] [ LineNames LineName , PseudoClassName ArgList IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
      maxTerm: 118,
      nodeProps: [
        ["isolate", -2, 3, 25, ""],
        ["openedBy", 18, "(", 33, "[", 51, "{"],
        ["closedBy", 19, ")", 34, "]", 52, "}"]
      ],
      propSources: [cssHighlighting],
      skippedNodes: [0, 3, 88],
      repeatNodeCount: 12,
      tokenData: "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSp`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#]~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#]~p`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUp`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Up`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUp`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Up`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUp`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Up`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUp`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Up`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!Y[p`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOi~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYyQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYp`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYp`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYg[p`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYg[p`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYp`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYg[p`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYp`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSg[p`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QS}Sp`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSc^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOb~n9{UUQkWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWkW!SQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUp`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYp`#f[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYp`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUp`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUp`#f[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[p`#f[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSu^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWkWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VUZQOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTkWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSp`#^~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#f[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU^QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S_Qp`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!Z^Oy%^z;'S%^;'S;=`%o<%lO%^dCoS}SOy%^z;'S%^;'S;=`%o<%lO%^bDQU!PQOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS!PQp`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[!]Qp`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^nFfSr^Oy%^z;'S%^;'S;=`%o<%lO%^nFwSq^Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUp`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!cQp`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!UUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!T^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!SQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
      tokenizers: [descendant, unitToken, identifiers, 1, 2, 3, 4, new LocalTokenGroup("m~RRYZ[z{a~~g~aO#`~~dP!P!Qg~lO#a~~", 28, 107)],
      topRules: { "StyleSheet": [0, 4], "Styles": [1, 87] },
      specialized: [{ term: 102, get: (value) => spec_callee[value] || -1 }, { term: 59, get: (value) => spec_AtKeyword[value] || -1 }, { term: 103, get: (value) => spec_identifier2[value] || -1 }],
      tokenPrec: 1246
    });
  }
});

// ../../node_modules/@codemirror/lang-css/dist/index.js
var dist_exports3 = {};
__export(dist_exports3, {
  css: () => css,
  cssCompletionSource: () => cssCompletionSource,
  cssLanguage: () => cssLanguage,
  defineCSSCompletionSource: () => defineCSSCompletionSource
});
function properties() {
  if (!_properties && typeof document == "object" && document.body) {
    let { style: style2 } = document.body, names = [], seen = /* @__PURE__ */ new Set();
    for (let prop in style2)
      if (prop != "cssText" && prop != "cssFloat") {
        if (typeof style2[prop] == "string") {
          if (/[A-Z]/.test(prop))
            prop = prop.replace(/[A-Z]/g, (ch2) => "-" + ch2.toLowerCase());
          if (!seen.has(prop)) {
            names.push(prop);
            seen.add(prop);
          }
        }
      }
    _properties = names.sort().map((name2) => ({ type: "property", label: name2, apply: name2 + ": " }));
  }
  return _properties || [];
}
function isVarArg(node, doc2) {
  var _a2;
  if (node.name == "(" || node.type.isError)
    node = node.parent || node;
  if (node.name != "ArgList")
    return false;
  let callee3 = (_a2 = node.parent) === null || _a2 === void 0 ? void 0 : _a2.firstChild;
  if ((callee3 === null || callee3 === void 0 ? void 0 : callee3.name) != "Callee")
    return false;
  return doc2.sliceString(callee3.from, callee3.to) == "var";
}
function astTop(node) {
  for (let cur2 = node; ; ) {
    if (cur2.type.isTop)
      return cur2;
    if (!(cur2 = cur2.parent))
      return node;
  }
}
function variableNames(doc2, node, isVariable) {
  if (node.to - node.from > 4096) {
    let known = VariablesByNode.get(node);
    if (known)
      return known;
    let result = [], seen = /* @__PURE__ */ new Set(), cursor2 = node.cursor(IterMode.IncludeAnonymous);
    if (cursor2.firstChild())
      do {
        for (let option2 of variableNames(doc2, cursor2.node, isVariable))
          if (!seen.has(option2.label)) {
            seen.add(option2.label);
            result.push(option2);
          }
      } while (cursor2.nextSibling());
    VariablesByNode.set(node, result);
    return result;
  } else {
    let result = [], seen = /* @__PURE__ */ new Set();
    node.cursor().iterate((node2) => {
      var _a2;
      if (isVariable(node2) && node2.matchContext(declSelector) && ((_a2 = node2.node.nextSibling) === null || _a2 === void 0 ? void 0 : _a2.name) == ":") {
        let name2 = doc2.sliceString(node2.from, node2.to);
        if (!seen.has(name2)) {
          seen.add(name2);
          result.push({ label: name2, type: "variable" });
        }
      }
    });
    return result;
  }
}
function css() {
  return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
}
var _properties, pseudoClasses, values, tags2, atRules, identifier2, variable, VariablesByNode, declSelector, defineCSSCompletionSource, cssCompletionSource, cssLanguage;
var init_dist12 = __esm({
  "../../node_modules/@codemirror/lang-css/dist/index.js"() {
    init_dist11();
    init_dist5();
    init_dist();
    _properties = null;
    pseudoClasses = /* @__PURE__ */ [
      "active",
      "after",
      "any-link",
      "autofill",
      "backdrop",
      "before",
      "checked",
      "cue",
      "default",
      "defined",
      "disabled",
      "empty",
      "enabled",
      "file-selector-button",
      "first",
      "first-child",
      "first-letter",
      "first-line",
      "first-of-type",
      "focus",
      "focus-visible",
      "focus-within",
      "fullscreen",
      "has",
      "host",
      "host-context",
      "hover",
      "in-range",
      "indeterminate",
      "invalid",
      "is",
      "lang",
      "last-child",
      "last-of-type",
      "left",
      "link",
      "marker",
      "modal",
      "not",
      "nth-child",
      "nth-last-child",
      "nth-last-of-type",
      "nth-of-type",
      "only-child",
      "only-of-type",
      "optional",
      "out-of-range",
      "part",
      "placeholder",
      "placeholder-shown",
      "read-only",
      "read-write",
      "required",
      "right",
      "root",
      "scope",
      "selection",
      "slotted",
      "target",
      "target-text",
      "valid",
      "visited",
      "where"
    ].map((name2) => ({ type: "class", label: name2 }));
    values = /* @__PURE__ */ [
      "above",
      "absolute",
      "activeborder",
      "additive",
      "activecaption",
      "after-white-space",
      "ahead",
      "alias",
      "all",
      "all-scroll",
      "alphabetic",
      "alternate",
      "always",
      "antialiased",
      "appworkspace",
      "asterisks",
      "attr",
      "auto",
      "auto-flow",
      "avoid",
      "avoid-column",
      "avoid-page",
      "avoid-region",
      "axis-pan",
      "background",
      "backwards",
      "baseline",
      "below",
      "bidi-override",
      "blink",
      "block",
      "block-axis",
      "bold",
      "bolder",
      "border",
      "border-box",
      "both",
      "bottom",
      "break",
      "break-all",
      "break-word",
      "bullets",
      "button",
      "button-bevel",
      "buttonface",
      "buttonhighlight",
      "buttonshadow",
      "buttontext",
      "calc",
      "capitalize",
      "caps-lock-indicator",
      "caption",
      "captiontext",
      "caret",
      "cell",
      "center",
      "checkbox",
      "circle",
      "cjk-decimal",
      "clear",
      "clip",
      "close-quote",
      "col-resize",
      "collapse",
      "color",
      "color-burn",
      "color-dodge",
      "column",
      "column-reverse",
      "compact",
      "condensed",
      "contain",
      "content",
      "contents",
      "content-box",
      "context-menu",
      "continuous",
      "copy",
      "counter",
      "counters",
      "cover",
      "crop",
      "cross",
      "crosshair",
      "currentcolor",
      "cursive",
      "cyclic",
      "darken",
      "dashed",
      "decimal",
      "decimal-leading-zero",
      "default",
      "default-button",
      "dense",
      "destination-atop",
      "destination-in",
      "destination-out",
      "destination-over",
      "difference",
      "disc",
      "discard",
      "disclosure-closed",
      "disclosure-open",
      "document",
      "dot-dash",
      "dot-dot-dash",
      "dotted",
      "double",
      "down",
      "e-resize",
      "ease",
      "ease-in",
      "ease-in-out",
      "ease-out",
      "element",
      "ellipse",
      "ellipsis",
      "embed",
      "end",
      "ethiopic-abegede-gez",
      "ethiopic-halehame-aa-er",
      "ethiopic-halehame-gez",
      "ew-resize",
      "exclusion",
      "expanded",
      "extends",
      "extra-condensed",
      "extra-expanded",
      "fantasy",
      "fast",
      "fill",
      "fill-box",
      "fixed",
      "flat",
      "flex",
      "flex-end",
      "flex-start",
      "footnotes",
      "forwards",
      "from",
      "geometricPrecision",
      "graytext",
      "grid",
      "groove",
      "hand",
      "hard-light",
      "help",
      "hidden",
      "hide",
      "higher",
      "highlight",
      "highlighttext",
      "horizontal",
      "hsl",
      "hsla",
      "hue",
      "icon",
      "ignore",
      "inactiveborder",
      "inactivecaption",
      "inactivecaptiontext",
      "infinite",
      "infobackground",
      "infotext",
      "inherit",
      "initial",
      "inline",
      "inline-axis",
      "inline-block",
      "inline-flex",
      "inline-grid",
      "inline-table",
      "inset",
      "inside",
      "intrinsic",
      "invert",
      "italic",
      "justify",
      "keep-all",
      "landscape",
      "large",
      "larger",
      "left",
      "level",
      "lighter",
      "lighten",
      "line-through",
      "linear",
      "linear-gradient",
      "lines",
      "list-item",
      "listbox",
      "listitem",
      "local",
      "logical",
      "loud",
      "lower",
      "lower-hexadecimal",
      "lower-latin",
      "lower-norwegian",
      "lowercase",
      "ltr",
      "luminosity",
      "manipulation",
      "match",
      "matrix",
      "matrix3d",
      "medium",
      "menu",
      "menutext",
      "message-box",
      "middle",
      "min-intrinsic",
      "mix",
      "monospace",
      "move",
      "multiple",
      "multiple_mask_images",
      "multiply",
      "n-resize",
      "narrower",
      "ne-resize",
      "nesw-resize",
      "no-close-quote",
      "no-drop",
      "no-open-quote",
      "no-repeat",
      "none",
      "normal",
      "not-allowed",
      "nowrap",
      "ns-resize",
      "numbers",
      "numeric",
      "nw-resize",
      "nwse-resize",
      "oblique",
      "opacity",
      "open-quote",
      "optimizeLegibility",
      "optimizeSpeed",
      "outset",
      "outside",
      "outside-shape",
      "overlay",
      "overline",
      "padding",
      "padding-box",
      "painted",
      "page",
      "paused",
      "perspective",
      "pinch-zoom",
      "plus-darker",
      "plus-lighter",
      "pointer",
      "polygon",
      "portrait",
      "pre",
      "pre-line",
      "pre-wrap",
      "preserve-3d",
      "progress",
      "push-button",
      "radial-gradient",
      "radio",
      "read-only",
      "read-write",
      "read-write-plaintext-only",
      "rectangle",
      "region",
      "relative",
      "repeat",
      "repeating-linear-gradient",
      "repeating-radial-gradient",
      "repeat-x",
      "repeat-y",
      "reset",
      "reverse",
      "rgb",
      "rgba",
      "ridge",
      "right",
      "rotate",
      "rotate3d",
      "rotateX",
      "rotateY",
      "rotateZ",
      "round",
      "row",
      "row-resize",
      "row-reverse",
      "rtl",
      "run-in",
      "running",
      "s-resize",
      "sans-serif",
      "saturation",
      "scale",
      "scale3d",
      "scaleX",
      "scaleY",
      "scaleZ",
      "screen",
      "scroll",
      "scrollbar",
      "scroll-position",
      "se-resize",
      "self-start",
      "self-end",
      "semi-condensed",
      "semi-expanded",
      "separate",
      "serif",
      "show",
      "single",
      "skew",
      "skewX",
      "skewY",
      "skip-white-space",
      "slide",
      "slider-horizontal",
      "slider-vertical",
      "sliderthumb-horizontal",
      "sliderthumb-vertical",
      "slow",
      "small",
      "small-caps",
      "small-caption",
      "smaller",
      "soft-light",
      "solid",
      "source-atop",
      "source-in",
      "source-out",
      "source-over",
      "space",
      "space-around",
      "space-between",
      "space-evenly",
      "spell-out",
      "square",
      "start",
      "static",
      "status-bar",
      "stretch",
      "stroke",
      "stroke-box",
      "sub",
      "subpixel-antialiased",
      "svg_masks",
      "super",
      "sw-resize",
      "symbolic",
      "symbols",
      "system-ui",
      "table",
      "table-caption",
      "table-cell",
      "table-column",
      "table-column-group",
      "table-footer-group",
      "table-header-group",
      "table-row",
      "table-row-group",
      "text",
      "text-bottom",
      "text-top",
      "textarea",
      "textfield",
      "thick",
      "thin",
      "threeddarkshadow",
      "threedface",
      "threedhighlight",
      "threedlightshadow",
      "threedshadow",
      "to",
      "top",
      "transform",
      "translate",
      "translate3d",
      "translateX",
      "translateY",
      "translateZ",
      "transparent",
      "ultra-condensed",
      "ultra-expanded",
      "underline",
      "unidirectional-pan",
      "unset",
      "up",
      "upper-latin",
      "uppercase",
      "url",
      "var",
      "vertical",
      "vertical-text",
      "view-box",
      "visible",
      "visibleFill",
      "visiblePainted",
      "visibleStroke",
      "visual",
      "w-resize",
      "wait",
      "wave",
      "wider",
      "window",
      "windowframe",
      "windowtext",
      "words",
      "wrap",
      "wrap-reverse",
      "x-large",
      "x-small",
      "xor",
      "xx-large",
      "xx-small"
    ].map((name2) => ({ type: "keyword", label: name2 })).concat(/* @__PURE__ */ [
      "aliceblue",
      "antiquewhite",
      "aqua",
      "aquamarine",
      "azure",
      "beige",
      "bisque",
      "black",
      "blanchedalmond",
      "blue",
      "blueviolet",
      "brown",
      "burlywood",
      "cadetblue",
      "chartreuse",
      "chocolate",
      "coral",
      "cornflowerblue",
      "cornsilk",
      "crimson",
      "cyan",
      "darkblue",
      "darkcyan",
      "darkgoldenrod",
      "darkgray",
      "darkgreen",
      "darkkhaki",
      "darkmagenta",
      "darkolivegreen",
      "darkorange",
      "darkorchid",
      "darkred",
      "darksalmon",
      "darkseagreen",
      "darkslateblue",
      "darkslategray",
      "darkturquoise",
      "darkviolet",
      "deeppink",
      "deepskyblue",
      "dimgray",
      "dodgerblue",
      "firebrick",
      "floralwhite",
      "forestgreen",
      "fuchsia",
      "gainsboro",
      "ghostwhite",
      "gold",
      "goldenrod",
      "gray",
      "grey",
      "green",
      "greenyellow",
      "honeydew",
      "hotpink",
      "indianred",
      "indigo",
      "ivory",
      "khaki",
      "lavender",
      "lavenderblush",
      "lawngreen",
      "lemonchiffon",
      "lightblue",
      "lightcoral",
      "lightcyan",
      "lightgoldenrodyellow",
      "lightgray",
      "lightgreen",
      "lightpink",
      "lightsalmon",
      "lightseagreen",
      "lightskyblue",
      "lightslategray",
      "lightsteelblue",
      "lightyellow",
      "lime",
      "limegreen",
      "linen",
      "magenta",
      "maroon",
      "mediumaquamarine",
      "mediumblue",
      "mediumorchid",
      "mediumpurple",
      "mediumseagreen",
      "mediumslateblue",
      "mediumspringgreen",
      "mediumturquoise",
      "mediumvioletred",
      "midnightblue",
      "mintcream",
      "mistyrose",
      "moccasin",
      "navajowhite",
      "navy",
      "oldlace",
      "olive",
      "olivedrab",
      "orange",
      "orangered",
      "orchid",
      "palegoldenrod",
      "palegreen",
      "paleturquoise",
      "palevioletred",
      "papayawhip",
      "peachpuff",
      "peru",
      "pink",
      "plum",
      "powderblue",
      "purple",
      "rebeccapurple",
      "red",
      "rosybrown",
      "royalblue",
      "saddlebrown",
      "salmon",
      "sandybrown",
      "seagreen",
      "seashell",
      "sienna",
      "silver",
      "skyblue",
      "slateblue",
      "slategray",
      "snow",
      "springgreen",
      "steelblue",
      "tan",
      "teal",
      "thistle",
      "tomato",
      "turquoise",
      "violet",
      "wheat",
      "white",
      "whitesmoke",
      "yellow",
      "yellowgreen"
    ].map((name2) => ({ type: "constant", label: name2 })));
    tags2 = /* @__PURE__ */ [
      "a",
      "abbr",
      "address",
      "article",
      "aside",
      "b",
      "bdi",
      "bdo",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "figcaption",
      "figure",
      "footer",
      "form",
      "header",
      "hgroup",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "label",
      "legend",
      "li",
      "main",
      "meter",
      "nav",
      "ol",
      "output",
      "p",
      "pre",
      "ruby",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "template",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "tr",
      "u",
      "ul"
    ].map((name2) => ({ type: "type", label: name2 }));
    atRules = /* @__PURE__ */ [
      "@charset",
      "@color-profile",
      "@container",
      "@counter-style",
      "@font-face",
      "@font-feature-values",
      "@font-palette-values",
      "@import",
      "@keyframes",
      "@layer",
      "@media",
      "@namespace",
      "@page",
      "@position-try",
      "@property",
      "@scope",
      "@starting-style",
      "@supports",
      "@view-transition"
    ].map((label) => ({ type: "keyword", label }));
    identifier2 = /^(\w[\w-]*|-\w[\w-]*|)$/;
    variable = /^-(-[\w-]*)?$/;
    VariablesByNode = /* @__PURE__ */ new NodeWeakMap();
    declSelector = ["Declaration"];
    defineCSSCompletionSource = (isVariable) => (context) => {
      let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
      let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
      if (node.name == "PropertyName" || (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
        return { from: node.from, options: properties(), validFor: identifier2 };
      if (node.name == "ValueName")
        return { from: node.from, options: values, validFor: identifier2 };
      if (node.name == "PseudoClassName")
        return { from: node.from, options: pseudoClasses, validFor: identifier2 };
      if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))
        return {
          from: isVariable(node) || isDash ? node.from : pos,
          options: variableNames(state.doc, astTop(node), isVariable),
          validFor: variable
        };
      if (node.name == "TagName") {
        for (let { parent } = node; parent; parent = parent.parent)
          if (parent.name == "Block")
            return { from: node.from, options: properties(), validFor: identifier2 };
        return { from: node.from, options: tags2, validFor: identifier2 };
      }
      if (node.name == "AtKeyword")
        return { from: node.from, options: atRules, validFor: identifier2 };
      if (!context.explicit)
        return null;
      let above = node.resolve(pos), before = above.childBefore(pos);
      if (before && before.name == ":" && above.name == "PseudoClassSelector")
        return { from: pos, options: pseudoClasses, validFor: identifier2 };
      if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
        return { from: pos, options: values, validFor: identifier2 };
      if (above.name == "Block" || above.name == "Styles")
        return { from: pos, options: properties(), validFor: identifier2 };
      return null;
    };
    cssCompletionSource = /* @__PURE__ */ defineCSSCompletionSource((n) => n.name == "VariableName");
    cssLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "css",
      parser: /* @__PURE__ */ parser3.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Declaration: /* @__PURE__ */ continuedIndent()
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "Block KeyframeList": foldInside
          })
        ]
      }),
      languageData: {
        commentTokens: { block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*\}$/,
        wordChars: "-"
      }
    });
  }
});

// ../../node_modules/@lezer/go/dist/index.js
var insertedSemi, space$1, identifier3, String2, closeParen$1, Number3, Rune, closeBrace$1, closeBracket, IncDecOp, _return, _break, _continue, fallthrough, newline2, carriageReturn, space2, tab, slash, closeParen, closeBrace, semicolon, trackedTokens, trackTokens, goHighlighting, spec_identifier3, parser4;
var init_dist13 = __esm({
  "../../node_modules/@lezer/go/dist/index.js"() {
    init_dist6();
    init_dist4();
    insertedSemi = 177;
    space$1 = 179;
    identifier3 = 184;
    String2 = 12;
    closeParen$1 = 13;
    Number3 = 17;
    Rune = 20;
    closeBrace$1 = 25;
    closeBracket = 53;
    IncDecOp = 95;
    _return = 142;
    _break = 144;
    _continue = 145;
    fallthrough = 148;
    newline2 = 10;
    carriageReturn = 13;
    space2 = 32;
    tab = 9;
    slash = 47;
    closeParen = 41;
    closeBrace = 125;
    semicolon = new ExternalTokenizer((input, stack) => {
      for (let scan = 0, next2 = input.next; ; ) {
        if (stack.context && (next2 < 0 || next2 == newline2 || next2 == carriageReturn || next2 == slash && input.peek(scan + 1) == slash) || next2 == closeParen || next2 == closeBrace)
          input.acceptToken(insertedSemi);
        if (next2 != space2 && next2 != tab) break;
        next2 = input.peek(++scan);
      }
    }, { contextual: true });
    trackedTokens = /* @__PURE__ */ new Set([
      IncDecOp,
      identifier3,
      Rune,
      String2,
      Number3,
      _break,
      _continue,
      _return,
      fallthrough,
      closeParen$1,
      closeBracket,
      closeBrace$1
    ]);
    trackTokens = new ContextTracker({
      start: false,
      shift: (context, term) => term == space$1 ? context : trackedTokens.has(term)
    });
    goHighlighting = styleTags({
      "func interface struct chan map const type var": tags.definitionKeyword,
      "import package": tags.moduleKeyword,
      "switch for go select return break continue goto fallthrough case if else defer": tags.controlKeyword,
      "range": tags.keyword,
      Bool: tags.bool,
      String: tags.string,
      Rune: tags.character,
      Number: tags.number,
      Nil: tags.null,
      VariableName: tags.variableName,
      DefName: tags.definition(tags.variableName),
      TypeName: tags.typeName,
      LabelName: tags.labelName,
      FieldName: tags.propertyName,
      "FunctionDecl/DefName": tags.function(tags.definition(tags.variableName)),
      "TypeSpec/DefName": tags.definition(tags.typeName),
      "CallExpr/VariableName": tags.function(tags.variableName),
      LineComment: tags.lineComment,
      BlockComment: tags.blockComment,
      LogicOp: tags.logicOperator,
      ArithOp: tags.arithmeticOperator,
      BitOp: tags.bitwiseOperator,
      "DerefOp .": tags.derefOperator,
      "UpdateOp IncDecOp": tags.updateOperator,
      CompareOp: tags.compareOperator,
      "= :=": tags.definitionOperator,
      "<-": tags.operator,
      '~ "*"': tags.modifier,
      "; ,": tags.separator,
      "... :": tags.punctuation,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });
    spec_identifier3 = { __proto__: null, package: 10, import: 18, true: 380, false: 380, nil: 383, struct: 48, func: 68, interface: 78, chan: 94, map: 118, make: 157, new: 159, const: 204, type: 212, var: 224, if: 236, else: 238, switch: 242, case: 248, default: 250, for: 260, range: 266, go: 270, select: 274, return: 284, break: 288, continue: 290, goto: 292, fallthrough: 296, defer: 300 };
    parser4 = LRParser.deserialize({
      version: 14,
      states: "!=xO#{QQOOP$SOQOOO&UQTO'#CbO&]QRO'#FlO]QQOOOOQP'#Cn'#CnOOQP'#Co'#CoO&eQQO'#C|O(kQQO'#C{O)]QRO'#GiO+tQQO'#D_OOQP'#Ge'#GeO+{QQO'#GeO.aQTO'#GaO.hQQO'#D`OOQP'#Gm'#GmO.mQRO'#GdO/hQQO'#DgOOQP'#Gd'#GdO/uQQO'#DrO2bQQO'#DsO4QQTO'#GqO,^QTO'#GaO4XQQO'#DxO4^QQO'#D{OOQO'#EQ'#EQOOQO'#ER'#EROOQO'#ES'#ESOOQO'#ET'#ETO4cQQO'#EPO5}QQO'#EPOOQP'#Ga'#GaO6UQQO'#E`O6^QQO'#EcOOQP'#G`'#G`O6cQQO'#EsOOQP'#G_'#G_O&]QRO'#FnOOQO'#Fn'#FnO9QQQO'#G^QOQQOOO&]QROOO9XQQO'#C`O9^QSO'#CdO9lQQO'#C}O9tQQO'#DSO9yQQO'#D[O:kQQO'#CsO:pQQO'#DhO:uQQO'#EeO:}QQO'#EiO;VQQO'#EoO;_QQO'#EuO<uQQO'#ExO<|QQO'#FRO4cQQO'#FWO=WQQO'#FYO=]QRO'#F_O=jQRO'#FaO=uQQO'#FaOOQP'#Fe'#FeO4cQQO'#FgP=zOWO'#C^POOO)CAz)CAzOOQO'#G]'#G]OOQO,5<W,5<WOOQO-E9j-E9jO?TQTO'#CqOOQO'#C|'#C|OOQP,59g,59gO?tQQO'#D_O@fQSO'#FuO@kQQO'#C}O@pQQO'#D[O9XQQO'#FqO@uQRO,5=TOAyQQO,59yOCVQSO,5:[O@kQQO'#C}OCaQQO'#DjOOQP,59^,59^OOQO,5<a,5<aO?tQQO'#DeOOQO,5:e,5:eOOQO-E9s-E9sOOQP,59z,59zOOQP,59|,59|OCqQSO,5:QO(kQQO,5:ROC{QQO,5:RO&]QRO'#FxOOQO'#Fx'#FxOFjQQO'#GpOFwQQO,5:^OF|QQO,5:_OHdQQO,5:`OHlQQO,5:aOHvQRO'#FyOIaQRO,5=]OIuQQO'#DzOOQP,5:d,5:dOOQO'#EV'#EVOOQO'#EW'#EWOOQO'#EX'#EXOOQO'#EZ'#EZOOQO'#E['#E[O4cQQO,5:pO4cQQO,5:pO4cQQO,5:pO4cQQO,5:pO4cQQO,5:pO4cQQO,5:wOOQP,5:x,5:xO?tQQO'#EOOOQP,5:g,5:gOOQP,5:k,5:kO9yQQO,59vO4cQQO,5:zO4cQQO,5:}OI|QRO,5;_OOQO,5<Y,5<YOOQO-E9l-E9lO]QQOOOOQP'#Cb'#CbOOQP,58z,58zOOQP'#Cf'#CfOJWQQO'#CfOJ]QSO'#CkOOQP,59O,59OOJkQQO'#DPOLZQQO,5<UOLbQQO,59iOLsQQO,5<TOMpQQO'#DUOOQP,59n,59nOOQP,59v,59vONfQQO,59vONmQQO'#CwOOQP,59_,59_O?tQQO,5:SONxQRO'#EgO! VQQO'#EhOOQP,5;P,5;PO! |QQO'#EkO!!WQQO'#EnOOQP,5;T,5;TO!!`QRO'#EqO!!mQQO'#ErOOQP,5;Z,5;ZO!!uQTO'#CbO!!|QTO,5;aO&]QRO,5;aO!#WQQO,5;jO!$yQTO,5;dO!%WQQO'#EzOOQP,5;d,5;dO&]QRO,5;dO!%cQSO,5;mO!%mQQO'#E`O!%uQQO'#EcO!%zQQO'#FTO!&UQQO'#FTOOQP,5;m,5;mO!&ZQQO,5;mO!&`QTO,5;rO!&mQQO'#F[OOQP,5;t,5;tO!&xQTO'#GqOOQP,5;y,5;yOOQP'#Et'#EtOOQP,5;{,5;{O!']QTO,5<RPOOO'#Fk'#FkP!'jOWO,58xPOOO,58x,58xO!'uQQO,59yO!'zQQO'#GgOOQP,59i,59iO(kQQO,59vOOQP,5<],5<]OOQP-E9o-E9oOOQP1G/e1G/eOOQP1G/v1G/vO!([QSO'#DlO!(lQQO'#DlO!(wQQO'#DkOOQO'#Go'#GoO!(|QQO'#GoO!)UQQO,5:UO!)ZQQO'#GnO!)fQQO,5:PPOQO'#Cq'#CqO(kQQO1G/lOOQP1G/m1G/mO(kQQO1G/mOOQO,5<d,5<dOOQO-E9v-E9vOOQP1G/x1G/xO!)kQSO1G/yOOQP'#Cy'#CyOOQP1G/z1G/zO?tQQO1G/}O!)xQSO1G/{O!*YQQO1G/|O!*gQTO,5<eOOQP-E9w-E9wOOQP,5:f,5:fO!+QQQO,5:fOOQP1G0[1G0[O!,vQTO1G0[O!.wQTO1G0[O!/OQTO1G0[O!0pQTO1G0[O!1QQTO1G0cO!1bQQO,5:jOOQP1G/b1G/bOOQP1G0f1G0fOOQP1G0i1G0iOOQP1G0y1G0yOOQP,59Q,59QO&]QRO'#FmO!1mQSO,59VOOQP,59V,59VOOQO'#DQ'#DQO?tQQO'#DQO!1{QQO'#DQOOQO'#Gh'#GhO!2SQQO'#GhO!2[QQO,59kO!2aQSO'#CqOJkQQO'#DPOOQP,5=R,5=RO@kQQO1G1pOOQP1G/w1G/wO.hQQO'#ElO!2rQRO1G1oO@kQQO1G1oO@kQQO'#DVO?tQQO'#DWOOQP'#Gk'#GkO!2}QRO'#GjOOQP'#Gj'#GjO&]QRO'#FsO!3`QQO,59pOOQP,59p,59pO!3gQRO'#CxO!3uQQO'#CxO!3|QRO'#CxO.hQQO'#CxO&]QRO'#FoO!4XQQO,59cOOQP,59c,59cO!4dQQO1G/nO4cQQO,5;RO!4iQQO,5;RO&]QRO'#FzO!4nQQO,5;SOOQP,5;S,5;SO!6aQQO'#DgO?tQQO,5;VOOQP,5;V,5;VO&]QRO'#F}O!6hQQO,5;YOOQP,5;Y,5;YO!6pQRO,5;]O4cQQO,5;]O&]QRO'#GOO!6{QQO,5;^OOQP,5;^,5;^O!7TQRO1G0{O!7`QQO1G0{O4cQQO1G1UO!8vQQO1G1UOOQP1G1O1G1OO!9OQQO'#GPO!9YQQO,5;fOOQP,5;f,5;fO4cQQO'#E{O!9eQQO'#E{O<uQQO1G1OOOQP1G1X1G1XO!9jQQO,5:zO!9jQQO,5:}O!9tQSO,5;oO!:OQQO,5;oO!:VQQO,5;oO!9OQQO'#GRO!:aQQO,5;vOOQP,5;v,5;vO!<PQQO'#F]O!<WQQO'#F]POOO-E9i-E9iPOOO1G.d1G.dO!<]QQO,5:VO!<gQQO,5=ZO!<tQQO,5=ZOOQP1G/p1G/pO!<|QQO,5=YO!=WQQO,5=YOOQP1G/k1G/kOOQP7+%W7+%WOOQP7+%X7+%XOOQP7+%e7+%eO!=cQQO7+%eO!=hQQO7+%iOOQP7+%g7+%gO!=mQQO7+%gO!=rQQO7+%hO!>PQSO7+%hOOQP7+%h7+%hO4cQQO7+%hOOQP1G0Q1G0QO!>^QQO1G0QOOQP1G0U1G0UO!>fQQO1G0UOF|QQO1G0UOOQO,5<X,5<XOOQO-E9k-E9kOOQP1G.q1G.qOOQO,59l,59lO?tQQO,59lO!?cQQO,5=SO!?jQQO,5=SOOQP1G/V1G/VO!?rQQO,59yO!?}QRO7+'[O!@YQQO'#EmO!@dQQO'#HOO!@lQQO,5;WOOQP7+'Z7+'ZO!@qQRO7+'ZOOQP,59q,59qOOQP,59r,59rOOQO'#DZ'#DZO!@]QQO'#FtO!@|QRO,59tOOQO,5<_,5<_OOQO-E9q-E9qOOQP1G/[1G/[OOQP,59d,59dOHgQQO'#FpO!3uQQO,59dO!A_QRO,59dO!AjQRO,59dOOQO,5<Z,5<ZOOQO-E9m-E9mOOQP1G.}1G.}O(kQQO7+%YOOQP1G0m1G0mO4cQQO1G0mOOQO,5<f,5<fOOQO-E9x-E9xOOQP1G0n1G0nO!AxQQO'#GdOOQP1G0q1G0qOOQO,5<i,5<iOOQO-E9{-E9{OOQP1G0t1G0tO4cQQO1G0wOOQP1G0w1G0wOOQO,5<j,5<jOOQO-E9|-E9|OOQP1G0x1G0xO!B]QQO7+&gO!BeQSO7+&gO!CsQSO7+&pO!CzQQO7+&pOOQO,5<k,5<kOOQO-E9}-E9}OOQP1G1Q1G1QO!DRQQO,5;gOOQO,5;g,5;gO!DWQSO7+&jOOQP7+&j7+&jO!DbQQO7+&pO!7`QQO1G1[O!DgQQO1G1ZOOQO1G1Z1G1ZO!DnQSO1G1ZOOQO,5<m,5<mOOQO-E:P-E:POOQP1G1b1G1bO!DxQSO'#GqO!E]QQO'#F^O!EbQQO'#F^O!EgQQO,5;wOOQO,5;w,5;wO!ElQSO1G/qOOQO1G/q1G/qO!EyQSO'#DoO!FZQQO'#DoO!FfQQO'#DnOOQO,5<c,5<cO!FkQQO1G2uOOQO-E9u-E9uOOQO,5<b,5<bO!FxQQO1G2tOOQO-E9t-E9tOOQP<<IP<<IPOOQP<<IT<<ITOOQP<<IR<<IRO!GSQSO<<ISOOQP<<IS<<ISO4cQQO<<ISO!GaQSO<<ISOOQP7+%l7+%lO!GkQQO7+%lOOQP7+%p7+%pO!GpQQO7+%pO!GuQQO7+%pOOQO1G/W1G/WOOQO,5<^,5<^O!G}QQO1G2nOOQO-E9p-E9pOOQP<<Jv<<JvO.hQQO'#F{O!@YQQO,5;XOOQO,5;X,5;XO!HUQQO,5=jO!H^QQO,5=jOOQO1G0r1G0rOOQP<<Ju<<JuOOQP,5<`,5<`OOQP-E9r-E9rOOQO,5<[,5<[OOQO-E9n-E9nO!HfQRO1G/OOOQP1G/O1G/OOOQP<<Ht<<HtOOQP7+&X7+&XO!HqQQO'#DeOOQP7+&c7+&cOOQP<<JR<<JRO!HxQRO<<JRO!ITQQO<<J[O!I]QQO<<J[OOQO1G1R1G1ROOQP<<JU<<JUO4cQQO<<J[O!IbQSO7+&vOOQO7+&u7+&uO!IlQQO7+&uO4cQQO,5;xOOQO1G1c1G1cO!<]QQO,5:YP!<]QQO'#FwP?tQQO'#FvOOQPAN>nAN>nO4cQQOAN>nO!IsQSOAN>nOOQP<<IW<<IWOOQP<<I[<<I[O!I}QQO<<I[P!>nQQO'#FrOOQO,5<g,5<gOOQO-E9y-E9yOOQO1G0s1G0sOOQO,5<h,5<hO!JVQQO1G3UOOQO-E9z-E9zOOQP7+$j7+$jO!J_QQO'#GnO!B]QQOAN?mO!JjQQOAN?vO!JqQQOAN?vO!KzQSOAN?vOOQO<<Ja<<JaO!LRQSO1G1dO!L]QSO1G/tOOQO1G/t1G/tO!LjQSOG24YOOQPG24YG24YOOQPAN>vAN>vO!LtQQOAN>vP.hQQO'#F|OOQPG25XG25XO!LyQQOG25bO!MOQQO'#FPOOQPG25bG25bO!MZQQOG25bOOQPLD)tLD)tOOQPG24bG24bO!JqQQOLD*|O!9OQQO'#GQO!McQQO,5;kOOQP,5;k,5;kO?tQQO'#FQO!MnQQO'#FQO!MsQQOLD*|OOQP!$'Nh!$'NhOOQO,5<l,5<lOOQO-E:O-E:OOOQP1G1V1G1VO!MzQQO,5;lOOQO,5;l,5;lO!NPQQO!$'NhOOQO1G1W1G1WO!JqQQO!)9DSOOQP!.K9n!.K9nO# {QTO'#CqO#!`QTO'#CqO##}QSO'#CqO#$XQSO'#CqO#&]QSO'#CqO#&gQQO'#FyO#&tQQO'#FyO#'OQQO,5=]O#'ZQQO,5=]O#'cQQO,5:pO!7`QQO,5:pOF|QQO,5:pO#'cQQO,5:pO!7`QQO,5:pOF|QQO,5:pO#'cQQO,5:pO!7`QQO,5:pOF|QQO,5:pO#'cQQO,5:pO!7`QQO,5:pOF|QQO,5:pO#'cQQO,5:pO!7`QQO,5:pOF|QQO,5:pO!7`QQO,5:wO!7`QQO,5:zO!7`QQO,5:}O#(yQSO'#CbO#)}QSO'#CbO#*bQSO'#GqO#*rQSO'#GqO#+PQRO'#GgO#+yQSO,5<eO#,ZQSO,5<eO#,hQSO1G0[O#-rQTO1G0[O#-yQSO1G0[O#.TQSO1G0[O#0{QTO1G0[O#1SQSO1G0[O#2eQSO1G0[O#2lQTO1G0[O#2sQSO1G0[O#4XQSO1G0[O#4`QTO1G0[O#4jQSO1G0[O#4wQSO1G0cO#5dQTO'#CqO#5kQTO'#CqO#6bQSO'#GqO#'cQQO'#EPO!7`QQO'#EPOF|QQO'#EPO#8]QQO'#EPO#8gQQO'#EPO#8qQQO'#EPO#8{QQO'#E`O#9TQQO'#EcO@kQQO'#C}O?tQQO,5:RO#9YQQO,59vO#:iQQO,59vO?tQQO,59vO?tQQO1G/lO?tQQO1G/mO?tQQO7+%YO?tQQO'#C{O#:pQQO'#DgO#9YQQO'#D[O#:wQQO'#D[O#:|QSO,5:QO#;WQQO,5:RO#;]QQO1G/nO?tQQO,5:SO#;bQQO'#Dh",
      stateData: "#;m~O$yOSPOS$zPQ~OVvOX{O[oO^YOaoOdoOh!POjcOr|Ow}O!P!OO!QnO!WaO!]!QO!phO!qhO#Y!RO#^!SO#d!TO#j!UO#m!VO#v!WO#{!XO#}!YO$S!ZO$U![O$V![O$W!]O$Y!^O$[!_O%OQO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO$v%QP~OTzO~P]O$z!`O~OVeXZeX^eX^!TXj!TXnUXneX!QeX!WeX!W!TX!|eX#ReX#TeX#UeX#WUX$weX%YeX%`eX%feX%geX%ieX%jeX%keX%leX%meX%neX%oeX%peX%qeX~O!a#hX~P$XOV!bO$w!bO~O[!wX^pX^!wXa!wXd!wXhpXh!wXrpXr!wXwpXw!wX!PpX!P!wX!QpX!Q!wX!WpX!W!wX!]pX!]!wX!p!wX!q!wX%OpX%O!wX%U!wX%V!wX%YpX%Y!wX%f!wX%g!wX%h!wX%i!wX%j!wX~O^!hOh!POr!jOw}O!P!OO!Q!kO!WaO!]!QO%O!eO%Y!fO~On!lO#W%]XV%]X^%]Xh%]Xr%]Xw%]X!P%]X!Q%]X!W%]X!]%]X#T%]X$w%]X%O%]X%Y%]Xu%]X~O[oO^YOaoOdoOh!POr!pOw}O!P!OO!WaO!]!QO!phO!qhO%O+wO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O!Q-OO~P*aOj!qO^%XX]%XXn%XX!V%XX~O!W!tOV%TXZ%TX^%TXn%TX!Q%TX!W%TX!|%TX#R%TX#T%TX#U%TX$w%TX%Y%TX%`%TX%f%TX%g%TX%i%TX%j%TX%k%TX%l%TX%m%TX%n%TX%o%TX%p%TX%q%TX]%TX!V%TXj%TXi%TX!a%TXu%TX~OZ!sO~P,^O%O!eO~O!W!tO^%WXj%WX]%WXn%WX!V%WXu%WXV%WX$w%WX%`%WX#T%WX[%WX!a%WX~Ou!{O!QnO!V!zO~P*aOV!}O[oO^YOaoOdoOh!POjcOr!pOw}O!P!OO!QnO!WaO!]!QO!phO!qhO#Y!RO#^!SO#d!TO#j!UO#m!VO#v!WO#{!XO#}!YO$S!ZO$U![O$V![O$W!]O$Y!^O$[!_O%OQO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlOi%dP~O^#QO~OZ#RO^#VOn#TO!Q#cO!W#SO#R#dO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[O%q#]OV`X#T%eX#U%eX$w`X~O!|#`O~P2gO^#VO~O^#eO~O!QnO~P*aO[oO^YOaoOdoOh!POr!pOw}O!QnO!WaO!]!QO!phO!qhO%O+wO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O!P#hO~P4jO#T#iO#U#iO~O#W#jO~O!a#kO~OVvO[oO^YOaoOdoOh!POjcOr|Ow}O!P!OO!QnO!WaO!]!QO!phO!qhO#Y!RO#^!SO#d!TO#j!UO#m!VO#v!WO#{!XO#}!YO$S!ZO$U![O$V![O$W!]O$Y!^O$[!_O%OQO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O$v%QX~P6hO%O#oO~OZ#rO[#qO^#sO%O#oO~O^#uO%O#oO~Oj#yO~O^!hOh!POr!jOw}O!P!OO!Q#|O!WaO!]!QO%O!eO%Y!fO~Oj#}O~O!W$PO~O^$RO%O#oO~O^$UO%O#oO~O^$XO%O#oO~O[oO^YOaoOdoOh!POr!pOw}O!P!OO!Q-PO!WaO!]!QO!phO!qhO%O$ZO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~Oj$`O~P;_OV$fOjcO~P;_Oj$kO~O!QnOV$RX$w$RX~P*aO%O$oOV$TX$w$TX~O%O$oO~O${$rO$|$rO$}$tO~OZeX^!TX!W!TXj!TXn!TXh!TXr!TXw!TX{!TX!P!TX!Q!TX!]!TX%O!TX%Y!TX~O]!TX!V!TXu!TX#T!TXV!TX$w!TX%`!TX[!TX!a!TX~P>VO^!hOh!POr-TOw}O!P-_O!Q-`O!W-^O!]-eO%O!eO%Y!fO~OZ!sO~O^#uO~O!P$xO~On!lO#W%]aV%]a^%]ah%]ar%]aw%]a!P%]a!Q%]a!W%]a!]%]a#T%]a$w%]a%O%]a%Y%]au%]a~O]${O^#QO~OZ#RO^#VO!W#SO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[O%q#]O~O]$|O!|,WO~PBROj!qOn%QO!QnOi%cP~P*aO!V%WO!|#`O~PBRO!V%YO~OV!}O[oO^YOaoOdoOh!POjcOr!pOw}O!P!OO!QnO!WaO!]!QO!phO!qhO#Y!RO#^!SO#d!TO#j!UO#m!VO#v!WO#{!XO#}!YO$S!ZO$U![O$V![O$W!]O$Y!^O$[!_O%OQO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~Oi%dX#p%dX#q%dX~PDQOi%]O~O[oO^YOaoOdoOh!POr!pOw}O!P!OO!Q-QO!WaO!]!QO!phO!qhO%O+{O%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O^%aO%O%_O~O!QnO!a%cO~P*aO!QnOn$mX#T$mX#U$mXV$mX$w$mX!a$mX~P*aOn#TO#T%ea#U%eaV%ea$w%ea!a%ea~O]%fO~PF|OV#ga$w#ga~PDTO[%sO~OZ#rO[#qO]%vO%O#oO~O^!hOh!POn%zOr-TOu%xOw}O!P-_O!Q-`O!W-^O!]-eO%O,dO%Y!fO]%[P~O^&OOh!POr!jOw}O!P!OO!Q!kO!WaO!]!QO%Y!fO^%ZXj%ZX~O%O%}O~PKfOjcO^qa]qanqa!Vqa~O^#uO!W&SO~O^!hOh!POr-TOw}O{&WO!P-_O!Q-`O!W-^O!]-eO%O,xO%Y!fO~Oi&^O~PL{O^!hOh!POr!jOw}O!Q!kO!WaO!]!QO%O!eO%Y!fO~O!P#hO~PMwOi&eO%O,yO%Y!fO~O#T&gOV#ZX$w#ZX~P?tO]&kO%O#oO~O^!hOh!POr-TOw}O!P-_O!Q-`O!]-eO%O!eO%Y!fO~O!W&lO#T&mO~P! _O]&qO%O#oO~O#T&sOV#eX$w#eX~P?tO]&vO%O#oO~OjeX~P$XOjcO!|,XO~P2gOn!lO#W&yO#W%]X~O^#VOn#TO!Q#cO!W#SO!|,XO#R#dO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[O%q#]OV`X#T%eX#U%eX~OZ&zOj$`O$w`X~P!#cOi'OO#p'PO#q'QO~OZ#ROjcO~P!#cO#T'TO#U#iO~O#W'UO~OV'WO!QnO~P*aOV'XO~OjcO~O!|#`OV#za$w#za~PBROi'[O#p']O#q'^O~On#TO!|#`OV%eX$w%eX!a%eX~PBRO!|#`OV$Za$w$Za~PBRO${$rO$|$rO$}'`O~O]${O~O%O!eO]%ZXn%ZX!V%ZX~PKfO!|#`Oi!_Xn!_X!a!`X~PBROi!_Xn!_X!a!`X~O!a'aO~On'bOi%cX~Oi'dO~On'eO!V%bX!a%bX~O!V'gO~O]'jOn'kO!|,YO~PBROn'nO!V'mO!a'oO!|#`O~PBRO!QnO!V'qO!a'rO~P*aO!|#`On$ma#T$ma#U$maV$ma$w$ma!a$ma~PBRO]'sOu'tO~O%Y#XO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YOV!xiZ!xi^!xin!xi!Q!xi!W!xi!|!xi#R!xi#T!xi#U!xi$w!xi%`!xi%f!xi%g!xi%i!xi%p!xi%q!xi~O!V!xii!xi!a!xi~P!+YO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YOV!xiZ!xi^!xin!xi!Q!xi!W!xi#R!xi#T!xi#U!xi$w!xi%p!xi%q!xi!V!xii!xi!a!xi~O!|!xi~P!-TO!|#`O~P!-TO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[OV!xiZ!xi^!xin!xi!Q!xi!W!xi#R!xi#T!xi#U!xi$w!xi%q!xi~O!|#`O!V!xii!xi!a!xi~P!/VO!|#`OV#Pi$w#Pi!a#Pi~PBRO]'uOn'wOu'vO~OZ#rO[#qO]'zO%O#oO~Ou'|O~P?tOn'}O]%[X~O](PO~OZeX^mX^!TXj!TX!W!TX~OjcOV$]i$w$]i~O%`(ZOV%^X$w%^Xn%^X!V%^X~Oi(`O~PL{O[(aO!W!tOVlX$wlX~On(bO~P?tO[(aOVlX$wlX~Oi(hO%O,yO%Y!fO~O!V(iO~O#T(kO~O](nO%O#oO~O[oO^YOaoOdoOh!POr!pOu-bOw}O!P!OO!QnO!V-UO!WaO!]!QO!phO!qhO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O%O+zO~P!4vO](sO%O#oO~O#T(tOV#ea$w#ea~O](xO%O#oO~O#k(yOV#ii$w#ii~O[oO^YOaoOdoOh!POr!pOw}O!P!OO!Q-PO!WaO!]!QO!phO!qhO%O+xO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O^(|O%O%_O~O#p%dP#q%dP~P/uOi)PO#p'PO#q'QO~O!a)RO~O!QnO#y)VO~P*aOV)WO!|#`O~PBROj#wa~P;_OV)WO!QnO~P*aOi)]O#p']O#q'^O~O[oO^YOaoOdoOh!POr!pOw}O!P!OO!QnO!WaO!]!QO!phO!qhO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O%O,eO~P!:lO!a)bO~Oj!qO!QnO~P*aOj!qO!QnOi%ca~P*aOn)iOi%ca~O!V%ba!a%ba~P?tOn)lO!V%ba!a%ba~O])nO~O])oO~O!V)pO~O!QnO!V)rO!a)sO~P*aO!V)rO!a)sO!|#`O~PBRO])uOn)vO~O])wOn)xO~O^!hOh!POr-TOu%xOw}O!P-_O!Q-`O!W-^O!]-eO%O,dO%Y!fO~O]%[a~P!>nOn)|O]%[a~O]${O]tXntX~OjcOV$^q$w$^q~On*PO{&WO~P?tOn*SO!V%rX~O!V*UO~OjcOV$]q$w$]q~O%`(ZOV|a$w|an|a!V|a~O[*]OVla$wla~O[*]O!W!tOVla$wla~On*PO{&WO!W*`O^%WXj%WX~P! _OjcO#j!UO~OjcO!|,XO~PBROZ*dO^#VO!W#SO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[O%q#]O~O!|#`O~P!BoO#^*eO~P?tO!a*fO~Oj$`O!|,XO~P!BoO#W*hO~Oj#wi~P;_OV*kO!|#`O~PBROn#TO!Q#cO!|#`O!a$QX#T%eX~PBRO#T*lO~O#W*lO~O!a*mO~O!|#`Oi!_in!_i~PBRO!|#`Oi!bXn!bX!a!cX~PBROi!bXn!bX!a!cX~O!a*nO~Oj!qO!QnOi%ci~P*aO!V%bi!a%bi~P?tO!V*qO!a*rO!|#`O~PBRO!V*qO!|#`O~PBRO]*tO~O]*uO~O]*uOu*vO~O]%[i~P!>nO%O!eO!V%ra~On*|O!V%ra~O[+OOVli$wli~O%O+yO~P!4vO#k+QOV#iy$w#iy~O^+RO%O%_O~O]+SO~O!|,XOj#xq~PBROj#wq~P;_O!V+ZO!|#`O~PBRO]+[On+]O~O%O!eO!V%ri~O^#QOn'eO!V%bX~O#^+`O~P?tOj+aO~O^#VO!W#SO!|#`O%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[O%q#]O~OZ+cO~P!JvO!|#`O!a$Qi~PBRO!|#`Oi!bin!bi~PBRO!V+dO!|#`O~PBRO]+eO~O]+fO~Oi+iO#p+jO#q+kO~O^+lO%O%_O~Oi+pO#p+jO#q+kO~O!a+rO~O#^+sO~P?tO!a+tO~O]+uO~OZeX^eX^!TXj!TX!WeX!W!TX!|eX%YeX%`eX%feX%geX%ieX%jeX%keX%leX%meX%neX%oeX%peX%qeXVeXneX!QeX#ReX#TeX#UeX$weX~O]eX]!TX!VeXieX!aeX~P!NUOjeX~P!NUOZeX^eX^!TXj!TX!WeX!W!TX!|eX%YeX%`eX%feX%geX%ieX%jeX%keX%leX%meX%neX%oeX%peX%qeXn!TX!VeX~O]eX!V!TX~P#!gOh!TXr!TXw!TX{!TX!P!TX!Q!TX!]!TX%O!TX%Y!TX~P#!gOZeX^eX^!TXj!TXneX!WeX!W!TX!|eX%YeX%`eX%feX%geX%ieX%jeX%keX%leX%meX%neX%oeX%peX%qeX~O]eXueX~P#$xO]$mXn$mXu$mX~PF|Oj$mXn$mX~P!7`On+|O]%eau%ea~On+}Oj%ea~O[oO^YOaoOdoOh!POr!pOw}O!P!OO!Q-OO!WaO!]!QO!phO!qhO%O+yO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~OZeX]!TX^UXhUXnUXn!TXrUXuUXwUX!PUX!QUX!WUX!W!TX!]UX%OUX%YUX~OnUX!QeX!aeX#TeX#WUX~P#$xOn+|O!|,YO]%eXu%eX~PBROn+}O!|,XOj%eX~PBRO^&OOV%ZXj%ZX$w%ZX]%ZXn%ZX!V%ZXu%ZX%`%ZX#T%ZX[%ZX!a%ZX~P?wO!|,YO]$man$mau$ma~PBRO!|,XOj$man$ma~PBRO%Y#XO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YOZ!xi]!xi^!xi!W!xi!|!xi%`!xi%f!xi%g!xi%i!xi%p!xi%q!xi~Oj!xi~P!+YOn!xiu!xi~P#,hO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YOZ!xi]!xi^!xi!W!xi!|!xi%p!xi%q!xi~O%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YOV!xiZ!xi^!xij!xin!xi!Q!xi!W!xi#R!xi#T!xi#U!xi$w!xi%p!xi%q!xi~O!|!xi~P#/_On!xiu!xi~P#.TO%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YOZ!xi]!xi^!xi!W!xi%p!xi%q!xi~O!|,WO~P#1^O!|,XO~P#/_O!|,YOn!xiu!xi~P#1^O%Y#XO%`#ZO%fiO%giO%i#ZO%j#YO%k#XO%l#XO%m#YO%n#YO%o#YO%p#[OZ!xi]!xi^!xi!W!xi%q!xi~O!|,WO~P#3QO!|,XOj!xi~P!/VO!|,YOn!xiu!xi~P#3QO!|,XOj#Pi~PBROV!TXZeX^mX!W!TX$w!TX~O%`!TX~P#5RO[!TXhmXnmXrmXwmX!PmX!QmX!WmX!]mX%OmX%YmX~P#5ROn#TO!Q,aO!|,XO#R#dOj`X#T%eX#U%eX~PBRO[oO^YOaoOdoOh!POr!pOw}O!P#hO!WaO!]!QO!phO!qhO%UTO%VUO%YVO%fiO%giO%hjO%ikO%jlO~O!Q-OO%O+yO~P#6{O!Q-PO%O+xO~P#6{O!Q-QO%O+{O~P#6{O#T,bO#U,bO~O#W,cO~O^!hOh!POr-TOw}O!P-_O!Q-WO!W-^O!]-eO%O!eO%Y!fO~O^!hOh!POr-TOw}O!Q-`O!W-^O!]-eO%O!eO%Y!fO~O!P-VO~P#9zO%O+wO~P!4vO!P-XO~O!V-YO!|#`O~PBRO!V-ZO~O!V-[O~O!W-dO~OP%ka%Oa~",
      goto: "!FW%sPP%tP%wP%zP'SP'XPPPP'`'cP'u'uP)w'u-_PPP0j0m0qP1V4b1VP7s8WP1VP8a8d8hP8p8w1VPP1V8{<`?vPPCY-_-_-_PCdCuCxPC{DQ'u'uDV'uES'u'u'u'uGUIW'uPPJR'uJUMjMjMj'u! r! r!#SP!$`!%d!&d'cP'cPP'cP!&yP!'V!'^!&yP!'a!'h!'n!'w!&yP!'z!(R!&y!(U!(fPP!&yP!(x!)UPP!&y!)Y!)c!&yP!)g!)gP!&yP!&yP!)j!)m!&v!&yP!&yPPP!&yP!&yP!)q!)q!)w!)}!*U!*[!*d!*j!*p!*w!*}!+T!+Z!.q!.x!/O!/X!/m!/s!/z!0Q!0W!0^!0d!0jPPPPPPPPP!0p!1f!1k!1{!2kPP!7P!:^P!>u!?Z!?_!@Z!@fP!@p!D_!Df!Di!DuPPPPPPPPPPPP!FSR!aPRyO!WXOScw!R!T!U!W#O#k#n#u$R$X&O&j&u&|'W'Y']'})W)|*k*w+gQ#pzU#r{#s%uQ#x|U$T!S$U&pQ$^!VQ$y!lR)U'RVROS#nQ#t{T%t#s%uR#t{qrOScw!U!V!W#O#k#n&|'W'Y)W*k+g%PoOSYacmnw!U!V!W!X!Z!_!q#O#Q#S#T#V#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(k(t)V)W)i)s*`*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^%O]OSYacmnw!U!V!W!X!Z!_!q#O#Q#S#T#V#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(k(t)V)W)i)s*`*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^#u!iW^!O!h!t!z#e#h#u#v#y#|#}$P$Q$T$W$v$x%W%Y%a%x%y&O&S&W&]&`&b&d&m'e'|'}(S([(c(i(o(|)l)|*P*Q*S*p*w*|+R+^+j+l,h-U-V-W-X-Y-Z-[-]-_-d'cbOSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&W&]&`&g&l&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*Q*`*h*k*l*n*o*p*r*w+R+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-dR$O!PT&c#}&dW%`#R&z*d+cQ&Q#vS&V#y&]S&`#}&dR*Y(b'cZOSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&W&]&`&g&l&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*Q*`*h*k*l*n*o*p*r*w+R+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-d%fWOSWYacmnw!O!U!V!W!X!Z!_!q!z#O#Q#S#T#V#^#_#`#a#b#c#h#i#j#k#n#v#|$f$v$x%W%Y%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(i(k(t)V)W)i)s*`*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^S&b#}&d!{-]!h!t#e#u#y$P$Q$T$W%a%x%y&O&W&]&`&m'e'|'}(S([(c(o(|)l)|*Q*p*w+R+j+l,h-U-V-W-X-Y-Z-[-]-_-dQ#v|S$v!j!pU&P#v$v,hZ,h#x&Q&U&V-TS%{#u&OV){'})|*wR#z}T&[#y&]]&X#y&](S([(o*QZ&Z#y&](S(o*QT([&Y(]'s_OSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|#}$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&S&W&]&`&b&d&g&l&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*P*Q*S*`*h*k*l*n*o*p*r*w*|+R+^+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-d'r_OSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|#}$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&S&W&]&`&b&d&g&l&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*P*Q*S*`*h*k*l*n*o*p*r*w*|+R+^+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-dR!w^'bbOSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&W&]&`&g&l&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*Q*`*h*k*l*n*o*p*r*w+R+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-dS&a#}&dR(d&bS!u]fX!x`&_(e(oQ!r[Q%O!qQ)d'aU)f'b)i*oR+X*nR%R!qR%P!qV)h'b)i*oV)g'b)i*odtOScw#O#k#n&|'Y+gQ$h!WQ&R#wQ&w$[S'S$c$iQ(V&TQ*O(RQ*V(WQ*b(yQ*c(zR+_+Q%PfOSYacmnw!U!V!W!X!Z!_!q#O#Q#S#T#V#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(k(t)V)W)i)s*`*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^%PgOSYacmnw!U!V!W!X!Z!_!q#O#Q#S#T#V#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(k(t)V)W)i)s*`*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^!q#Weg!o!y$[$_$c$j$m$q$}%^%b%d%m'V'p(z({)S)Y)^)c)e)q)t*i*s+T+V+W+Y,f,g,i,j,w,z-aR#fh#^mOSacmnw!X!Z!_!q#O#S#T#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&y&|'P'T'U'X'Y']'a'b'o'r(k(t)i)s*`*h*l*n*o*r+g-^!W#_e!y$j$m$q$}%b%d%j%k%l%m'V'p({)Y)^)c)e)q)t*s+T+V+W+Y-aW,T!o,n,q,tj,U$[$_$c(z)S*i,g,j,o,r,u,w,z[,V%^,f,i,p,s,v`,{Y,Q,T,W,Z,^,{-Ox,|!U!V!W&x'R'W)V)W*k+},R,U,X,[,_,a,b,c,|-Pg,}#Q#V'w+|,S,V,Y,],`,}-Q#^mOSacmnw!X!Z!_!q#O#S#T#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&y&|'P'T'U'X'Y']'a'b'o'r(k(t)i)s*`*h*l*n*o*r+g-^`,{Y,Q,T,W,Z,^,{-Ox,|!U!V!W&x'R'W)V)W*k+},R,U,X,[,_,a,b,c,|-Pg,}#Q#V'w+|,S,V,Y,],`,}-Q!Y#^e!y$j$m$q$}%b%d%i%j%k%l%m'V'p({)Y)^)c)e)q)t*s+T+V+W+Y-aY,Q!o,k,n,q,tl,R$[$_$c(z)S*i,g,j,l,o,r,u,w,z_,S%^,f,i,m,p,s,v!W#_e!y$j$m$q$}%b%d%j%k%l%m'V'p({)Y)^)c)e)q)t*s+T+V+W+Y-aW,T!o,n,q,tj,U$[$_$c(z)S*i,g,j,o,r,u,w,z],V%^,f,i,p,s,v!S#ae!y$j$m$q$}%b%d%l%m'V'p({)Y)^)c)e)q)t*s+T+V+W+Y-aS,Z!o,tf,[$[$_$c(z)S*i,g,j,u,w,zX,]%^,f,i,v!Q#be!y$j$m$q$}%b%d%m'V'p({)Y)^)c)e)q)t*s+T+V+W+Y-aQ,^!od,_$[$_$c(z)S*i,g,j,w,zV,`%^,f,iprOScw!U!V!W#O#k#n&|'W'Y)W*k+gR)a']etOScw#O#k#n&|'Y+gQ$S!RT&i$R&jR$S!RQ$V!ST&o$U&pQ&U#xR&m$TS(T&S&lV*{*S*|+^R$V!SQ$Y!TT&t$X&uR$Y!TdsOScw#O#k#n&|'Y+gT$p![!]dtOScw#O#k#n&|'Y+gQ*b(yR+_+QQ$a!VQ&{$_Q)T'RR*g)ST&|$`&}Q+b+SQ+m+fR+v+uT+g+a+hR$i!WR$l!YT'Y$k'ZXuOSw#nQ$s!`R'_$sSSO#nR!dSQ%u#sR'y%uUwOS#nR#mwQ&d#}R(g&dQ(c&`R*Z(cS!mX$^R$z!mQ(O%{R)}(OQ&]#yR(_&]Q(]&YR*X(]'r^OSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|#}$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&S&W&]&`&b&d&g&l&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*P*Q*S*`*h*k*l*n*o*p*r*w*|+R+^+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-dR!v^S'f%T+PR)m'fQ'c%RR)j'cW#Oc&|'Y+gR%[#O^#Ue$[$_$c$m)^,zU%e#U,O,PQ,O,fR,P,gQ&j$RR(m&jS*Q(S(oR*y*QQ*T(TR*}*TQ&p$UR(r&pQ&u$XR(w&uQ&}$`R)O&}Q+h+aR+o+hQ'Z$kR)['ZQ!cRQ#luQ#nyQ%Z!|Q&x$]Q'R$bQ'x%tQ(^&[Q(f&cQ(l&iQ(q&oR(v&tVxOS#nWuOSw#nY!|c#O&|'Y+gR%r#kdtOScw#O#k#n&|'Y+gQ$]!UQ$b!VQ$g!WQ)X'WQ*j)WR+U*kdeOScw#O#k#n&|'Y+gQ!oYQ!ya`#gmn,{,|,}-O-P-QQ$[!UQ$_!VQ$c!WQ$j!Xd$m!Z#i#j&g&s'P'T'U(k(tQ$q!_Q$}!qQ%^#QQ%b#SQ%d#TW%h#^,Q,R,SQ%i#_Q%j#`Q%k#aQ%l#bQ%m#cQ'V$fQ'p%cQ(z&xQ({&yQ)S'RQ)Y'XQ)^']Q)c'aU)e'b)i*oQ)q'oQ)t'rQ*i)VQ*s)sQ+T*hQ+V*lQ+W*nQ+Y*rS,f#V'wS,g,b,cQ,i+|Q,j+}Q,k,TQ,l,UQ,m,VQ,n,WQ,o,XQ,p,YQ,q,ZQ,r,[Q,s,]Q,t,^Q,u,_Q,v,`Q,w,aU,z'W)W*kV-a&l*`-^#bZW!O!h!t!z#e#h#u#v#y#|$P$Q$T$W$v$x%W%Y%a%x%y&O&W&]&`&m'e'|'}(S([(c(i(o(|)l)|*Q*p*w+R+j+l,h-U-V-W-X-Y-Z-[-]-_-d%P[OSYacmnw!U!V!W!X!Z!_!q#O#Q#S#T#V#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(k(t)V)W)i)s*`*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^$zdOSacmnw!U!V!W!X!Z!_!q#O#Q#S#T#V#^#_#`#a#b#c#i#j#k#n$f%c&g&l&s&x&y&|'P'R'T'U'W'X'Y']'a'b'o'r'w(k(t)V)W)i)s*h*k*l*n*o*r+g+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,{,|,}-O-P-Q-^S!gW-]Q!nYS#{!O-_Q$u!hS%T!t+jS%X!z-UQ%n#e[%o#h#|$x-V-W-XW%w#u'})|*wU&P#v$v,h[&X#y&](S([(o*QQ&f$PQ&h$QQ&n$TQ&r$WS'h%W-YS'i%Y-ZW'l%a(|+R+lS'{%x%yQ(Q&OQ(Y&WQ(d&`Q(p&mU)k'e)l*pQ)z'|Q*[(cS*^(i-[Q+P*`R-c-dS#w|!pS$w!j-TQ&T#xQ(R&QQ(W&UR(X&VT%|#u&OhqOScw!U!V#O#k#n&|'Y+gU$Q!R$R&jU$W!T$X&uQ$e!WY%y#u&O'})|*wQ)`']V-S'W)W*kS&[#y&]S*R(S(oR*z*QY&Y#y&](S(o*QR*W(['``OSWYacmnw!O!U!V!W!X!Z!_!h!q!t!z#O#Q#S#T#V#^#_#`#a#b#c#e#h#i#j#k#n#u#v#y#|$P$Q$T$W$f$v$x%W%Y%a%c%x%y&O&W&]&`&g&m&s&x&y&|'P'R'T'U'W'X'Y']'a'b'e'o'r'w'|'}(S([(c(i(k(o(t(|)V)W)i)l)s)|*Q*`*h*k*l*n*o*p*r*w+R+g+j+l+|+},Q,R,S,T,U,V,W,X,Y,Z,[,],^,_,`,a,b,c,h,{,|,}-O-P-Q-U-V-W-X-Y-Z-[-]-^-_-dS&_#}&dW(S&S*S*|+^Q(e&bQ(o&lR*x*PS%U!t*`R+q+jR%S!qQ#PcQ(}&|Q)Z'YR+n+ghpOScw!U!V#O#k#n&|'Y+gQ$d!WQ$n!ZQ%g#VU%p#i'T,bU%q#j'U,cQ(j&gQ(u&sQ)Q'PQ)_']Q)y'wQ*_(kQ*a(tV-R'W)W*kT(U&S&l",
      nodeNames: "\u26A0 LineComment BlockComment SourceFile PackageClause package DefName ; ImportDecl import ImportSpec . String ) ( SpecList ExprStatement Number Bool Nil Rune VariableName TypedLiteral StructType struct } { StructBody FieldDecl FieldName , PointerType * FunctionType func Parameters Parameter ... InterfaceType interface InterfaceBody MethodElem UnderlyingType ~ TypeElem LogicOp ChannelType chan <- ParenthesizedType QualifiedType TypeName ParameterizedType ] [ TypeArgs ArrayType SliceType MapType map LiteralValue Element Key : Element Key ParenthesizedExpr FunctionLiteral Block Conversion SelectorExpr IndexExpr SliceExpr TypeAssertion CallExpr ParameterizedExpr Arguments CallExpr make new Arguments UnaryExp ArithOp LogicOp BitOp DerefOp BinaryExp ArithOp BitOp BitOp CompareOp LogicOp LogicOp SendStatement IncDecStatement IncDecOp Assignment = UpdateOp VarDecl := ConstDecl const ConstSpec SpecList TypeDecl type TypeSpec TypeParams TypeParam SpecList VarDecl var VarSpec SpecList LabeledStatement LabelName IfStatement if else SwitchStatement switch SwitchBlock Case case default TypeSwitchStatement SwitchBlock Case ForStatement for ForClause RangeClause range GoStatement go SelectStatement select SelectBlock Case ReceiveStatement ReturnStatement return GotoStatement break continue goto FallthroughStatement fallthrough DeferStatement defer FunctionDecl MethodDecl",
      maxTerm: 218,
      context: trackTokens,
      nodeProps: [
        ["isolate", -3, 2, 12, 20, ""],
        ["group", -18, 12, 17, 18, 19, 20, 21, 22, 66, 67, 69, 70, 71, 72, 73, 74, 77, 81, 86, "Expr", -20, 16, 68, 93, 94, 96, 99, 101, 105, 111, 115, 117, 120, 126, 129, 134, 136, 141, 143, 147, 149, "Statement", -12, 23, 31, 33, 38, 46, 49, 50, 51, 52, 56, 57, 58, "Type"],
        ["openedBy", 13, "(", 25, "{", 53, "["],
        ["closedBy", 14, ")", 26, "}", 54, "]"]
      ],
      propSources: [goHighlighting],
      skippedNodes: [0, 1, 2, 153],
      repeatNodeCount: 23,
      tokenData: ":b~RvXY#iYZ#i]^#ipq#iqr#zrs$Xuv&Pvw&^wx&yxy(qyz(vz{({{|)T|})e}!O)j!O!P)u!P!Q+}!Q!R,y!R![-t![!]2^!]!^2k!^!_2p!_!`3]!`!a3e!c!}3x!}#O4j#P#Q4o#Q#R4t#R#S4|#S#T9X#T#o3x#o#p9q#p#q9v#q#r:W#r#s:]$g;'S3x;'S;=`4d<%lO3x~#nS$y~XY#iYZ#i]^#ipq#iU$PP%hQ!_!`$SS$XO!|S~$^W[~OY$XZr$Xrs$vs#O$X#O#P${#P;'S$X;'S;=`%y<%lO$X~${O[~~%ORO;'S$X;'S;=`%X;=`O$X~%^X[~OY$XZr$Xrs$vs#O$X#O#P${#P;'S$X;'S;=`%y;=`<%l$X<%lO$X~%|P;=`<%l$X~&UP%l~!_!`&X~&^O#U~~&cR%j~vw&l!_!`&X#Q#R&q~&qO%p~~&vP%o~!_!`&X~'OWd~OY&yZw&ywx'hx#O&y#O#P'm#P;'S&y;'S;=`(k<%lO&y~'mOd~~'pRO;'S&y;'S;=`'y;=`O&y~(OXd~OY&yZw&ywx'hx#O&y#O#P'm#P;'S&y;'S;=`(k;=`<%l&y<%lO&y~(nP;=`<%l&y~(vO^~~({O]~~)QP%Y~!_!`&X~)YQ%f~{|)`!_!`&X~)eO#R~~)jOn~~)oQ%g~}!O)`!_!`&X~)zRZS!O!P*T!Q![*`#R#S+w~*WP!O!P*Z~*`Ou~Q*eTaQ!Q![*`!g!h*t#R#S+w#X#Y*t#]#^+rQ*wS{|+T}!O+T!Q![+^#R#S+lQ+WQ!Q![+^#R#S+lQ+cRaQ!Q![+^#R#S+l#]#^+rQ+oP!Q![+^Q+wOaQQ+zP!Q![*`~,SR%k~z{,]!P!Q,b!_!`&X~,bO$z~~,gSP~OY,bZ;'S,b;'S;=`,s<%lO,b~,vP;=`<%l,bQ-O[aQ!O!P*`!Q![-t!d!e.c!g!h*t!q!r/Z!z!{/x#R#S.]#U#V.c#X#Y*t#]#^+r#c#d/Z#l#m/xQ-yUaQ!O!P*`!Q![-t!g!h*t#R#S.]#X#Y*t#]#^+rQ.`P!Q![-tQ.fR!Q!R.o!R!S.o#R#S/QQ.tSaQ!Q!R.o!R!S.o#R#S/Q#]#^+rQ/TQ!Q!R.o!R!S.oQ/^Q!Q!Y/d#R#S/rQ/iRaQ!Q!Y/d#R#S/r#]#^+rQ/uP!Q!Y/dQ/{T!O!P0[!Q![1c!c!i1c#R#S2Q#T#Z1cQ0_S!Q![0k!c!i0k#R#S1V#T#Z0kQ0pVaQ!Q![0k!c!i0k!r!s*t#R#S1V#T#Z0k#]#^+r#d#e*tQ1YR!Q![0k!c!i0k#T#Z0kQ1hWaQ!O!P0k!Q![1c!c!i1c!r!s*t#R#S2Q#T#Z1c#]#^+r#d#e*tQ2TR!Q![1c!c!i1c#T#Z1c~2cP!a~!_!`2f~2kO#W~~2pOV~~2uR!|S}!O3O!^!_3T!_!`$S~3TO!Q~~3YP%m~!_!`&X~3bP#T~!_!`$S~3jQ!|S!_!`$S!`!a3p~3uP%n~!_!`&X~3}V%O~!Q![3x!c!}3x#R#S3x#T#o3x$g;'S3x;'S;=`4d<%lO3x~4gP;=`<%l3x~4oO!W~~4tO!V~~4yP%i~!_!`&X~5RV%O~!Q![5h!c!}3x#R#S3x#T#o3x$g;'S3x;'S;=`4d<%lO3x~5o^aQ%O~!O!P*`!Q![5h!c!g3x!g!h6k!h!}3x#R#S4|#T#X3x#X#Y6k#Y#]3x#]#^8k#^#o3x$g;'S3x;'S;=`4d<%lO3x~6pX%O~{|+T}!O+T!Q![7]!c!}3x#R#S8P#T#o3x$g;'S3x;'S;=`4d<%lO3x~7dXaQ%O~!Q![7]!c!}3x#R#S8P#T#]3x#]#^8k#^#o3x$g;'S3x;'S;=`4d<%lO3x~8UV%O~!Q![7]!c!}3x#R#S3x#T#o3x$g;'S3x;'S;=`4d<%lO3x~8rVaQ%O~!Q![3x!c!}3x#R#S3x#T#o3x$g;'S3x;'S;=`4d<%lO3x~9[TO#S9X#S#T$v#T;'S9X;'S;=`9k<%lO9X~9nP;=`<%l9X~9vOj~~9{Q%`~!_!`&X#p#q:R~:WO%q~~:]Oi~~:bO{~",
      tokenizers: [semicolon, 1, 2, new LocalTokenGroup("j~RQYZXz{^~^O$|~~aP!P!Qd~iO$}~~", 25, 181)],
      topRules: { "SourceFile": [0, 3] },
      dynamicPrecedences: { "19": 1, "51": -1, "55": 2, "69": -1, "108": -1 },
      specialized: [{ term: 184, get: (value) => spec_identifier3[value] || -1 }],
      tokenPrec: 5451
    });
  }
});

// ../../node_modules/@codemirror/lang-go/dist/index.js
var dist_exports4 = {};
__export(dist_exports4, {
  go: () => go,
  goLanguage: () => goLanguage,
  localCompletionSource: () => localCompletionSource,
  snippets: () => snippets
});
function defIDs(type7, spec) {
  return (node, def) => {
    outer: for (let cur2 = node.node.firstChild, depth = 0, parent = null; ; ) {
      while (!cur2) {
        if (!depth)
          break outer;
        depth--;
        cur2 = parent.nextSibling;
        parent = parent.parent;
      }
      if (spec && cur2.name == spec || cur2.name == "SpecList") {
        depth++;
        parent = cur2;
        cur2 = cur2.firstChild;
      } else {
        if (cur2.name == "DefName")
          def(cur2, type7);
        cur2 = cur2.nextSibling;
      }
    }
    return true;
  };
}
function getScope(doc2, node) {
  let cached = cache.get(node);
  if (cached)
    return cached;
  let completions3 = [], top3 = true;
  function def(node2, type7) {
    let name2 = doc2.sliceString(node2.from, node2.to);
    completions3.push({ label: name2, type: type7 });
  }
  node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
    if (top3) {
      top3 = false;
    } else if (node2.name) {
      let gather = gatherCompletions[node2.name];
      if (gather && gather(node2, def) || ScopeNodes.has(node2.name))
        return false;
    } else if (node2.to - node2.from > 8192) {
      for (let c2 of getScope(doc2, node2.node))
        completions3.push(c2);
      return false;
    }
  });
  cache.set(node, completions3);
  return completions3;
}
function go() {
  let completions3 = snippets.concat(keywords2);
  return new LanguageSupport(goLanguage, [
    goLanguage.data.of({
      autocomplete: ifNotIn(dontComplete, completeFromList(completions3))
    }),
    goLanguage.data.of({
      autocomplete: localCompletionSource
    })
  ]);
}
var snippets, cache, ScopeNodes, gatherCompletions, Identifier2, dontComplete, localCompletionSource, goLanguage, kwCompletion, keywords2;
var init_dist14 = __esm({
  "../../node_modules/@codemirror/lang-go/dist/index.js"() {
    init_dist13();
    init_dist5();
    init_dist7();
    init_dist();
    snippets = [
      /* @__PURE__ */ snippetCompletion("func ${name}(${params}) ${type} {\n	${}\n}", {
        label: "func",
        detail: "declaration",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("func (${receiver}) ${name}(${params}) ${type} {\n	${}\n}", {
        label: "func",
        detail: "method declaration",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("var ${name} = ${value}", {
        label: "var",
        detail: "declaration",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("type ${name} ${type}", {
        label: "type",
        detail: "declaration",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("const ${name} = ${value}", {
        label: "const",
        detail: "declaration",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("type ${name} = ${type}", {
        label: "type",
        detail: "alias declaration",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("for ${init}; ${test}; ${update} {\n	${}\n}", {
        label: "for",
        detail: "loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("for ${i} := range ${value} {\n	${}\n}", {
        label: "for",
        detail: "range",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("select {\n	${}\n}", {
        label: "select",
        detail: "statement",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("case ${}:\n${}", {
        label: "case",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("switch ${} {\n	${}\n}", {
        label: "switch",
        detail: "statement",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("switch ${}.(${type}) {\n	${}\n}", {
        label: "switch",
        detail: "type statement",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("if ${} {\n	${}\n}", {
        label: "if",
        detail: "block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("if ${} {\n	${}\n} else {\n	${}\n}", {
        label: "if",
        detail: "/ else block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion('import ${name} "${module}"\n${}', {
        label: "import",
        detail: "declaration",
        type: "keyword"
      })
    ];
    cache = /* @__PURE__ */ new NodeWeakMap();
    ScopeNodes = /* @__PURE__ */ new Set([
      "SourceFile",
      "Block",
      "FunctionDecl",
      "MethodDecl",
      "FunctionLiteral",
      "ForStatement",
      "SwitchStatement",
      "TypeSwitchStatement",
      "IfStatement"
    ]);
    gatherCompletions = {
      FunctionDecl: /* @__PURE__ */ defIDs("function"),
      VarDecl: /* @__PURE__ */ defIDs("var", "VarSpec"),
      ConstDecl: /* @__PURE__ */ defIDs("constant", "ConstSpec"),
      TypeDecl: /* @__PURE__ */ defIDs("type", "TypeSpec"),
      ImportDecl: /* @__PURE__ */ defIDs("constant", "ImportSpec"),
      Parameter: /* @__PURE__ */ defIDs("var"),
      __proto__: null
    };
    Identifier2 = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
    dontComplete = [
      "String",
      "LineComment",
      "BlockComment",
      "DefName",
      "LabelName",
      "FieldName",
      ".",
      "?."
    ];
    localCompletionSource = (context) => {
      let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
      if (dontComplete.indexOf(inner.name) > -1)
        return null;
      let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier2.test(context.state.sliceDoc(inner.from, inner.to));
      if (!isWord && !context.explicit)
        return null;
      let options = [];
      for (let pos = inner; pos; pos = pos.parent) {
        if (ScopeNodes.has(pos.name))
          options = options.concat(getScope(context.state.doc, pos));
      }
      return {
        options,
        from: isWord ? inner.from : context.pos,
        validFor: Identifier2
      };
    };
    goLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "go",
      parser: /* @__PURE__ */ parser4.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
            LabeledStatement: flatIndent,
            "SwitchBlock SelectBlock": (context) => {
              let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
              return context.baseIndent + (closed || isCase ? 0 : context.unit);
            },
            Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            BlockComment: () => null,
            Statement: /* @__PURE__ */ continuedIndent({ except: /^{/ })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "Block SwitchBlock SelectBlock LiteralValue InterfaceType StructType SpecList": foldInside,
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          })
        ]
      }),
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:case\b|default\b|\})$/
      }
    });
    kwCompletion = (name2) => ({ label: name2, type: "keyword" });
    keywords2 = /* @__PURE__ */ "interface struct chan map package go return break continue goto fallthrough else defer range true false nil".split(" ").map(kwCompletion);
  }
});

// ../../node_modules/@lezer/html/dist/index.js
function nameChar(ch2) {
  return ch2 == 45 || ch2 == 46 || ch2 == 58 || ch2 >= 65 && ch2 <= 90 || ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isSpace(ch2) {
  return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
}
function tagNameAfter(input, offset) {
  let pos = input.pos + offset;
  if (cachedPos == pos && cachedInput == input) return cachedName;
  let next2 = input.peek(offset);
  while (isSpace(next2)) next2 = input.peek(++offset);
  let name2 = "";
  for (; ; ) {
    if (!nameChar(next2)) break;
    name2 += String.fromCharCode(next2);
    next2 = input.peek(++offset);
  }
  cachedInput = input;
  cachedPos = pos;
  return cachedName = name2 ? name2.toLowerCase() : next2 == question || next2 == bang ? void 0 : null;
}
function ElementContext(name2, parent) {
  this.name = name2;
  this.parent = parent;
}
function inForeignElement(context) {
  for (; context; context = context.parent)
    if (context.name == "svg" || context.name == "math") return true;
  return false;
}
function contentTokenizer(tag2, textToken2, endToken) {
  let lastState = 2 + tag2.length;
  return new ExternalTokenizer((input) => {
    for (let state = 0, matchedLen = 0, i = 0; ; i++) {
      if (input.next < 0) {
        if (i) input.acceptToken(textToken2);
        break;
      }
      if (state == 0 && input.next == lessThan || state == 1 && input.next == slash2 || state >= 2 && state < lastState && input.next == tag2.charCodeAt(state - 2)) {
        state++;
        matchedLen++;
      } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
        matchedLen++;
      } else if (state == lastState && input.next == greaterThan) {
        if (i > matchedLen)
          input.acceptToken(textToken2, -matchedLen);
        else
          input.acceptToken(endToken, -(matchedLen - 2));
        break;
      } else if ((input.next == 10 || input.next == 13) && i) {
        input.acceptToken(textToken2, 1);
        break;
      } else {
        state = matchedLen = 0;
      }
      input.advance();
    }
  });
}
function getAttrs2(openTag, input) {
  let attrs2 = /* @__PURE__ */ Object.create(null);
  for (let att of openTag.getChildren(Attribute)) {
    let name2 = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
    if (name2) attrs2[input.read(name2.from, name2.to)] = !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
  }
  return attrs2;
}
function findTagName(openTag, input) {
  let tagNameNode = openTag.getChild(TagName);
  return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " ";
}
function maybeNest(node, input, tags3) {
  let attrs2;
  for (let tag2 of tags3) {
    if (!tag2.attrs || tag2.attrs(attrs2 || (attrs2 = getAttrs2(node.node.parent.firstChild, input))))
      return { parser: tag2.parser };
  }
  return null;
}
function configureNesting(tags3 = [], attributes2 = []) {
  let script = [], style2 = [], textarea = [], other = [];
  for (let tag2 of tags3) {
    let array2 = tag2.tag == "script" ? script : tag2.tag == "style" ? style2 : tag2.tag == "textarea" ? textarea : other;
    array2.push(tag2);
  }
  let attrs2 = attributes2.length ? /* @__PURE__ */ Object.create(null) : null;
  for (let attr of attributes2) (attrs2[attr.name] || (attrs2[attr.name] = [])).push(attr);
  return parseMixed((node, input) => {
    let id3 = node.type.id;
    if (id3 == ScriptText) return maybeNest(node, input, script);
    if (id3 == StyleText) return maybeNest(node, input, style2);
    if (id3 == TextareaText) return maybeNest(node, input, textarea);
    if (id3 == Element && other.length) {
      let n = node.node, open = n.firstChild, tagName2 = open && findTagName(open, input), attrs3;
      if (tagName2) for (let tag2 of other) {
        if (tag2.tag == tagName2 && (!tag2.attrs || tag2.attrs(attrs3 || (attrs3 = getAttrs2(open, input))))) {
          let close = n.lastChild;
          let to = close.type.id == CloseTag ? close.from : n.to;
          if (to > open.to)
            return { parser: tag2.parser, overlay: [{ from: open.to, to }] };
        }
      }
    }
    if (attrs2 && id3 == Attribute) {
      let n = node.node, nameNode;
      if (nameNode = n.firstChild) {
        let matches = attrs2[input.read(nameNode.from, nameNode.to)];
        if (matches) for (let attr of matches) {
          if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue;
          let value = n.lastChild;
          if (value.type.id == AttributeValue) {
            let from3 = value.from + 1;
            let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);
            if (to > from3) return { parser: attr.parser, overlay: [{ from: from3, to }] };
          } else if (value.type.id == UnquotedAttributeValue) {
            return { parser: attr.parser, overlay: [{ from: value.from, to: value.to }] };
          }
        }
      }
    }
    return null;
  });
}
var scriptText, StartCloseScriptTag, styleText, StartCloseStyleTag, textareaText, StartCloseTextareaTag, EndTag, SelfClosingEndTag, StartTag, StartScriptTag, StartStyleTag, StartTextareaTag, StartSelfClosingTag, StartCloseTag, NoMatchStartCloseTag, MismatchedStartCloseTag, missingCloseTag, IncompleteCloseTag, commentContent$1, Element, TagName, Attribute, AttributeName, AttributeValue, UnquotedAttributeValue, ScriptText, StyleText, TextareaText, OpenTag, CloseTag, Dialect_noMatch, Dialect_selfClosing, selfClosers, implicitlyClosed, closeOnOpen, cachedName, cachedInput, cachedPos, lessThan, greaterThan, slash2, question, bang, dash2, startTagTerms, elementContext, tagStart, commentContent, endTag, scriptTokens, styleTokens, textareaTokens, htmlHighlighting, parser5;
var init_dist15 = __esm({
  "../../node_modules/@lezer/html/dist/index.js"() {
    init_dist6();
    init_dist4();
    init_dist();
    scriptText = 54;
    StartCloseScriptTag = 1;
    styleText = 55;
    StartCloseStyleTag = 2;
    textareaText = 56;
    StartCloseTextareaTag = 3;
    EndTag = 4;
    SelfClosingEndTag = 5;
    StartTag = 6;
    StartScriptTag = 7;
    StartStyleTag = 8;
    StartTextareaTag = 9;
    StartSelfClosingTag = 10;
    StartCloseTag = 11;
    NoMatchStartCloseTag = 12;
    MismatchedStartCloseTag = 13;
    missingCloseTag = 57;
    IncompleteCloseTag = 14;
    commentContent$1 = 58;
    Element = 20;
    TagName = 22;
    Attribute = 23;
    AttributeName = 24;
    AttributeValue = 26;
    UnquotedAttributeValue = 27;
    ScriptText = 28;
    StyleText = 31;
    TextareaText = 34;
    OpenTag = 36;
    CloseTag = 37;
    Dialect_noMatch = 0;
    Dialect_selfClosing = 1;
    selfClosers = {
      area: true,
      base: true,
      br: true,
      col: true,
      command: true,
      embed: true,
      frame: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true,
      menuitem: true
    };
    implicitlyClosed = {
      dd: true,
      li: true,
      optgroup: true,
      option: true,
      p: true,
      rp: true,
      rt: true,
      tbody: true,
      td: true,
      tfoot: true,
      th: true,
      tr: true
    };
    closeOnOpen = {
      dd: { dd: true, dt: true },
      dt: { dd: true, dt: true },
      li: { li: true },
      option: { option: true, optgroup: true },
      optgroup: { optgroup: true },
      p: {
        address: true,
        article: true,
        aside: true,
        blockquote: true,
        dir: true,
        div: true,
        dl: true,
        fieldset: true,
        footer: true,
        form: true,
        h1: true,
        h2: true,
        h3: true,
        h4: true,
        h5: true,
        h6: true,
        header: true,
        hgroup: true,
        hr: true,
        menu: true,
        nav: true,
        ol: true,
        p: true,
        pre: true,
        section: true,
        table: true,
        ul: true
      },
      rp: { rp: true, rt: true },
      rt: { rp: true, rt: true },
      tbody: { tbody: true, tfoot: true },
      td: { td: true, th: true },
      tfoot: { tbody: true },
      th: { td: true, th: true },
      thead: { tbody: true, tfoot: true },
      tr: { tr: true }
    };
    cachedName = null;
    cachedInput = null;
    cachedPos = 0;
    lessThan = 60;
    greaterThan = 62;
    slash2 = 47;
    question = 63;
    bang = 33;
    dash2 = 45;
    startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];
    elementContext = new ContextTracker({
      start: null,
      shift(context, term, stack, input) {
        return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
      },
      reduce(context, term) {
        return term == Element && context ? context.parent : context;
      },
      reuse(context, node, stack, input) {
        let type7 = node.type.id;
        return type7 == StartTag || type7 == OpenTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
      },
      strict: false
    });
    tagStart = new ExternalTokenizer((input, stack) => {
      if (input.next != lessThan) {
        if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
        return;
      }
      input.advance();
      let close = input.next == slash2;
      if (close) input.advance();
      let name2 = tagNameAfter(input, 0);
      if (name2 === void 0) return;
      if (!name2) return input.acceptToken(close ? IncompleteCloseTag : StartTag);
      let parent = stack.context ? stack.context.name : null;
      if (close) {
        if (name2 == parent) return input.acceptToken(StartCloseTag);
        if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2);
        if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag);
        for (let cx2 = stack.context; cx2; cx2 = cx2.parent) if (cx2.name == name2) return;
        input.acceptToken(MismatchedStartCloseTag);
      } else {
        if (name2 == "script") return input.acceptToken(StartScriptTag);
        if (name2 == "style") return input.acceptToken(StartStyleTag);
        if (name2 == "textarea") return input.acceptToken(StartTextareaTag);
        if (selfClosers.hasOwnProperty(name2)) return input.acceptToken(StartSelfClosingTag);
        if (parent && closeOnOpen[parent] && closeOnOpen[parent][name2]) input.acceptToken(missingCloseTag, -1);
        else input.acceptToken(StartTag);
      }
    }, { contextual: true });
    commentContent = new ExternalTokenizer((input) => {
      for (let dashes = 0, i = 0; ; i++) {
        if (input.next < 0) {
          if (i) input.acceptToken(commentContent$1);
          break;
        }
        if (input.next == dash2) {
          dashes++;
        } else if (input.next == greaterThan && dashes >= 2) {
          if (i >= 3) input.acceptToken(commentContent$1, -2);
          break;
        } else {
          dashes = 0;
        }
        input.advance();
      }
    });
    endTag = new ExternalTokenizer((input, stack) => {
      if (input.next == slash2 && input.peek(1) == greaterThan) {
        let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
        input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
      } else if (input.next == greaterThan) {
        input.acceptToken(EndTag, 1);
      }
    });
    scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);
    styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);
    textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);
    htmlHighlighting = styleTags({
      "Text RawText": tags.content,
      "StartTag StartCloseTag SelfClosingEndTag EndTag": tags.angleBracket,
      TagName: tags.tagName,
      "MismatchedCloseTag/TagName": [tags.tagName, tags.invalid],
      AttributeName: tags.attributeName,
      "AttributeValue UnquotedAttributeValue": tags.attributeValue,
      Is: tags.definitionOperator,
      "EntityReference CharacterReference": tags.character,
      Comment: tags.blockComment,
      ProcessingInst: tags.processingInstruction,
      DoctypeDecl: tags.documentMeta
    });
    parser5 = LRParser.deserialize({
      version: 14,
      states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%ZQ&rO,59fO%fQ&rO,59iO%qQ&rO,59lO%|Q&rO,59nOOOa'#D^'#D^O&XOaO'#CxO&dOaO,59[OOOb'#D_'#D_O&lObO'#C{O&wObO,59[OOOd'#D`'#D`O'POdO'#DOO'[OdO,59[OOO`'#Da'#DaO'dO!rO,59[O'kQ#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'pO$fO,59oOOO`,59o,59oO'xQ#|O,59qO'}Q#|O,59rOOO`-E7W-E7WO(SQ&rO'#CsOOQW'#DZ'#DZO(bQ&rO1G.wOOOa1G.w1G.wOOO`1G/Y1G/YO(mQ&rO1G/QOOOb1G/Q1G/QO(xQ&rO1G/TOOOd1G/T1G/TO)TQ&rO1G/WOOO`1G/W1G/WO)`Q&rO1G/YOOOa-E7[-E7[O)kQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)pQ#tO'#C|OOOd-E7^-E7^O)uQ#tO'#DPOOO`-E7_-E7_O)zQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O*PQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOO`7+$t7+$tOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rO*[Q#|O,59eO*aQ#|O,59hO*fQ#|O,59kOOO`1G/X1G/XO*kO7[O'#CvO*|OMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O+_O7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+pOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
      stateData: ",]~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OT}OhyO~OS!POT}OhyO~OS!ROT}OhyO~OS!TOT}OhyO~OS}OT}OhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXTgXhgX~OS!fOT!gOhyO~OS!hOT!gOhyO~OS!iOT!gOhyO~OS!jOT!gOhyO~OS!gOT!gOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
      goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{!O!Q!S!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ!ObQ!QcQ!SdQ!UeZ!e{!O!Q!S!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
      nodeNames: "\u26A0 StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
      maxTerm: 67,
      context: elementContext,
      nodeProps: [
        ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
        ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
        ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"],
        ["isolate", -11, 21, 29, 30, 32, 33, 35, 36, 37, 38, 41, 42, "ltr", -3, 26, 27, 39, ""]
      ],
      propSources: [htmlHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 9,
      tokenData: "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
      tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
      topRules: { "Document": [0, 15] },
      dialects: { noMatch: 0, selfClosing: 509 },
      tokenPrec: 511
    });
  }
});

// ../../node_modules/@lezer/javascript/dist/index.js
function identifierChar(ch2, start2) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 == 95 || ch2 >= 192 || !start2 && ch2 >= 48 && ch2 <= 57;
}
var noSemi, noSemiType, incdec, incdecPrefix, questionDot, JSXStartTag, insertSemi, spaces, newline3, LineComment2, BlockComment2, Dialect_jsx, space3, braceR, semicolon2, slash3, star, plus, minus, lt, comma, question2, dot, bracketL2, trackNewline, insertSemicolon, noSemicolon, noSemicolonType, operatorToken, jsx, jsHighlight, spec_identifier4, spec_word, spec_LessThan, parser6;
var init_dist16 = __esm({
  "../../node_modules/@lezer/javascript/dist/index.js"() {
    init_dist6();
    init_dist4();
    noSemi = 315;
    noSemiType = 316;
    incdec = 1;
    incdecPrefix = 2;
    questionDot = 3;
    JSXStartTag = 4;
    insertSemi = 317;
    spaces = 319;
    newline3 = 320;
    LineComment2 = 5;
    BlockComment2 = 6;
    Dialect_jsx = 0;
    space3 = [
      9,
      10,
      11,
      12,
      13,
      32,
      133,
      160,
      5760,
      8192,
      8193,
      8194,
      8195,
      8196,
      8197,
      8198,
      8199,
      8200,
      8201,
      8202,
      8232,
      8233,
      8239,
      8287,
      12288
    ];
    braceR = 125;
    semicolon2 = 59;
    slash3 = 47;
    star = 42;
    plus = 43;
    minus = 45;
    lt = 60;
    comma = 44;
    question2 = 63;
    dot = 46;
    bracketL2 = 91;
    trackNewline = new ContextTracker({
      start: false,
      shift(context, term) {
        return term == LineComment2 || term == BlockComment2 || term == spaces ? context : term == newline3;
      },
      strict: false
    });
    insertSemicolon = new ExternalTokenizer((input, stack) => {
      let { next: next2 } = input;
      if (next2 == braceR || next2 == -1 || stack.context)
        input.acceptToken(insertSemi);
    }, { contextual: true, fallback: true });
    noSemicolon = new ExternalTokenizer((input, stack) => {
      let { next: next2 } = input, after;
      if (space3.indexOf(next2) > -1) return;
      if (next2 == slash3 && ((after = input.peek(1)) == slash3 || after == star)) return;
      if (next2 != braceR && next2 != semicolon2 && next2 != -1 && !stack.context)
        input.acceptToken(noSemi);
    }, { contextual: true });
    noSemicolonType = new ExternalTokenizer((input, stack) => {
      if (input.next == bracketL2 && !stack.context) input.acceptToken(noSemiType);
    }, { contextual: true });
    operatorToken = new ExternalTokenizer((input, stack) => {
      let { next: next2 } = input;
      if (next2 == plus || next2 == minus) {
        input.advance();
        if (next2 == input.next) {
          input.advance();
          let mayPostfix = !stack.context && stack.canShift(incdec);
          input.acceptToken(mayPostfix ? incdec : incdecPrefix);
        }
      } else if (next2 == question2 && input.peek(1) == dot) {
        input.advance();
        input.advance();
        if (input.next < 48 || input.next > 57)
          input.acceptToken(questionDot);
      }
    }, { contextual: true });
    jsx = new ExternalTokenizer((input, stack) => {
      if (input.next != lt || !stack.dialectEnabled(Dialect_jsx)) return;
      input.advance();
      if (input.next == slash3) return;
      let back = 0;
      while (space3.indexOf(input.next) > -1) {
        input.advance();
        back++;
      }
      if (identifierChar(input.next, true)) {
        input.advance();
        back++;
        while (identifierChar(input.next, false)) {
          input.advance();
          back++;
        }
        while (space3.indexOf(input.next) > -1) {
          input.advance();
          back++;
        }
        if (input.next == comma) return;
        for (let i = 0; ; i++) {
          if (i == 7) {
            if (!identifierChar(input.next, true)) return;
            break;
          }
          if (input.next != "extends".charCodeAt(i)) break;
          input.advance();
          back++;
        }
      }
      input.acceptToken(JSXStartTag, -back);
    });
    jsHighlight = styleTags({
      "get set async static": tags.modifier,
      "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
      "in of await yield void typeof delete instanceof as satisfies": tags.operatorKeyword,
      "let var const using function class extends": tags.definitionKeyword,
      "import export from": tags.moduleKeyword,
      "with debugger new": tags.keyword,
      TemplateString: tags.special(tags.string),
      super: tags.atom,
      BooleanLiteral: tags.bool,
      this: tags.self,
      null: tags.null,
      Star: tags.modifier,
      VariableName: tags.variableName,
      "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags.function(tags.variableName),
      VariableDefinition: tags.definition(tags.variableName),
      Label: tags.labelName,
      PropertyName: tags.propertyName,
      PrivatePropertyName: tags.special(tags.propertyName),
      "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
      "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
      "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
      "NewExpression/VariableName": tags.className,
      PropertyDefinition: tags.definition(tags.propertyName),
      PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
      UpdateOp: tags.updateOperator,
      "LineComment Hashbang": tags.lineComment,
      BlockComment: tags.blockComment,
      Number: tags.number,
      String: tags.string,
      Escape: tags.escape,
      ArithOp: tags.arithmeticOperator,
      LogicOp: tags.logicOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      RegExp: tags.regexp,
      Equals: tags.definitionOperator,
      Arrow: tags.function(tags.punctuation),
      ": Spread": tags.punctuation,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace,
      "InterpolationStart InterpolationEnd": tags.special(tags.brace),
      ".": tags.derefOperator,
      ", ;": tags.separator,
      "@": tags.meta,
      TypeName: tags.typeName,
      TypeDefinition: tags.definition(tags.typeName),
      "type enum interface implements namespace module declare": tags.definitionKeyword,
      "abstract global Privacy readonly override": tags.modifier,
      "is keyof unique infer asserts": tags.operatorKeyword,
      JSXAttributeValue: tags.attributeValue,
      JSXText: tags.content,
      "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
      "JSXIdentifier JSXNameSpacedName": tags.tagName,
      "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
      "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
    });
    spec_identifier4 = { __proto__: null, export: 20, as: 25, from: 33, default: 36, async: 41, function: 42, in: 52, out: 55, const: 56, extends: 60, this: 64, true: 72, false: 72, null: 84, void: 88, typeof: 92, super: 108, new: 142, delete: 154, yield: 163, await: 167, class: 172, public: 235, private: 235, protected: 235, readonly: 237, instanceof: 256, satisfies: 259, import: 292, keyof: 349, unique: 353, infer: 359, asserts: 395, is: 397, abstract: 417, implements: 419, type: 421, let: 424, var: 426, using: 429, interface: 435, enum: 439, namespace: 445, module: 447, declare: 451, global: 455, for: 474, of: 483, while: 486, with: 490, do: 494, if: 498, else: 500, switch: 504, case: 510, try: 516, catch: 520, finally: 524, return: 528, throw: 532, break: 536, continue: 540, debugger: 544 };
    spec_word = { __proto__: null, async: 129, get: 131, set: 133, declare: 195, public: 197, private: 197, protected: 197, static: 199, abstract: 201, override: 203, readonly: 209, accessor: 211, new: 401 };
    spec_LessThan = { __proto__: null, "<": 193 };
    parser6 = LRParser.deserialize({
      version: 14,
      states: "$EOQ%TQlOOO%[QlOOO'_QpOOP(lO`OOO*zQ!0MxO'#CiO+RO#tO'#CjO+aO&jO'#CjO+oO#@ItO'#DaO.QQlO'#DgO.bQlO'#DrO%[QlO'#DzO0fQlO'#ESOOQ!0Lf'#E['#E[O1PQ`O'#EXOOQO'#Ep'#EpOOQO'#Ik'#IkO1XQ`O'#GsO1dQ`O'#EoO1iQ`O'#EoO3hQ!0MxO'#JqO6[Q!0MxO'#JrO6uQ`O'#F]O6zQ,UO'#FtOOQ!0Lf'#Ff'#FfO7VO7dO'#FfO7eQMhO'#F|O9[Q`O'#F{OOQ!0Lf'#Jr'#JrOOQ!0Lb'#Jq'#JqO9aQ`O'#GwOOQ['#K^'#K^O9lQ`O'#IXO9qQ!0LrO'#IYOOQ['#J_'#J_OOQ['#I^'#I^Q`QlOOQ`QlOOO9yQ!L^O'#DvO:QQlO'#EOO:XQlO'#EQO9gQ`O'#GsO:`QMhO'#CoO:nQ`O'#EnO:yQ`O'#EyO;OQMhO'#FeO;mQ`O'#GsOOQO'#K_'#K_O;rQ`O'#K_O<QQ`O'#G{O<QQ`O'#G|O<QQ`O'#HOO9gQ`O'#HRO<wQ`O'#HUO>`Q`O'#CeO>pQ`O'#HbO>xQ`O'#HhO>xQ`O'#HjO`QlO'#HlO>xQ`O'#HnO>xQ`O'#HqO>}Q`O'#HwO?SQ!0LsO'#H}O%[QlO'#IPO?_Q!0LsO'#IRO?jQ!0LsO'#ITO9qQ!0LrO'#IVO?uQ!0MxO'#CiO@wQpO'#DlQOQ`OOO%[QlO'#EQOA_Q`O'#ETO:`QMhO'#EnOAjQ`O'#EnOAuQ!bO'#FeOOQ['#Cg'#CgOOQ!0Lb'#Dq'#DqOOQ!0Lb'#Ju'#JuO%[QlO'#JuOOQO'#Jx'#JxOOQO'#Ig'#IgOBuQpO'#EgOOQ!0Lb'#Ef'#EfOOQ!0Lb'#J|'#J|OCqQ!0MSO'#EgOC{QpO'#EWOOQO'#Jw'#JwODaQpO'#JxOEnQpO'#EWOC{QpO'#EgPE{O&2DjO'#CbPOOO)CD|)CD|OOOO'#I_'#I_OFWO#tO,59UOOQ!0Lh,59U,59UOOOO'#I`'#I`OFfO&jO,59UOFtQ!L^O'#DcOOOO'#Ib'#IbOF{O#@ItO,59{OOQ!0Lf,59{,59{OGZQlO'#IcOGnQ`O'#JsOImQ!fO'#JsO+}QlO'#JsOItQ`O,5:ROJ[Q`O'#EpOJiQ`O'#KSOJtQ`O'#KROJtQ`O'#KROJ|Q`O,5;^OKRQ`O'#KQOOQ!0Ln,5:^,5:^OKYQlO,5:^OMWQ!0MxO,5:fOMwQ`O,5:nONbQ!0LrO'#KPONiQ`O'#KOO9aQ`O'#KOON}Q`O'#KOO! VQ`O,5;]O! [Q`O'#KOO!#aQ!fO'#JrOOQ!0Lh'#Ci'#CiO%[QlO'#ESO!$PQ!fO,5:sOOQS'#Jy'#JyOOQO-E<i-E<iO9gQ`O,5=_O!$gQ`O,5=_O!$lQlO,5;ZO!&oQMhO'#EkO!(YQ`O,5;ZO!(_QlO'#DyO!(iQpO,5;dO!(qQpO,5;dO%[QlO,5;dOOQ['#FT'#FTOOQ['#FV'#FVO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eO%[QlO,5;eOOQ['#FZ'#FZO!)PQlO,5;tOOQ!0Lf,5;y,5;yOOQ!0Lf,5;z,5;zOOQ!0Lf,5;|,5;|O%[QlO'#IoO!+SQ!0LrO,5<iO%[QlO,5;eO!&oQMhO,5;eO!+qQMhO,5;eO!-cQMhO'#E^O%[QlO,5;wOOQ!0Lf,5;{,5;{O!-jQ,UO'#FjO!.gQ,UO'#KWO!.RQ,UO'#KWO!.nQ,UO'#KWOOQO'#KW'#KWO!/SQ,UO,5<SOOOW,5<`,5<`O!/eQlO'#FvOOOW'#In'#InO7VO7dO,5<QO!/lQ,UO'#FxOOQ!0Lf,5<Q,5<QO!0]Q$IUO'#CyOOQ!0Lh'#C}'#C}O!0pO#@ItO'#DRO!1^QMjO,5<eO!1eQ`O,5<hO!3QQ(CWO'#GXO!3_Q`O'#GYO!3dQ`O'#GYO!5SQ(CWO'#G^O!6XQpO'#GbOOQO'#Gn'#GnO!+xQMhO'#GmOOQO'#Gp'#GpO!+xQMhO'#GoO!6zQ$IUO'#JkOOQ!0Lh'#Jk'#JkO!7UQ`O'#JjO!7dQ`O'#JiO!7lQ`O'#CuOOQ!0Lh'#C{'#C{O!7}Q`O'#C}OOQ!0Lh'#DV'#DVOOQ!0Lh'#DX'#DXO1SQ`O'#DZO!+xQMhO'#GPO!+xQMhO'#GRO!8SQ`O'#GTO!8XQ`O'#GUO!3dQ`O'#G[O!+xQMhO'#GaO<QQ`O'#JjO!8^Q`O'#EqO!8{Q`O,5<gOOQ!0Lb'#Cr'#CrO!9TQ`O'#ErO!9}QpO'#EsOOQ!0Lb'#KQ'#KQO!:UQ!0LrO'#K`O9qQ!0LrO,5=cO`QlO,5>sOOQ['#Jg'#JgOOQ[,5>t,5>tOOQ[-E<[-E<[O!<TQ!0MxO,5:bO!9xQpO,5:`O!>nQ!0MxO,5:jO%[QlO,5:jO!AUQ!0MxO,5:lOOQO,5@y,5@yO!AuQMhO,5=_O!BTQ!0LrO'#JhO9[Q`O'#JhO!BfQ!0LrO,59ZO!BqQpO,59ZO!ByQMhO,59ZO:`QMhO,59ZO!CUQ`O,5;ZO!C^Q`O'#HaO!CrQ`O'#KcO%[QlO,5;}O!9xQpO,5<PO!CzQ`O,5=zO!DPQ`O,5=zO!DUQ`O,5=zO9qQ!0LrO,5=zO<QQ`O,5=jOOQO'#Cy'#CyO!DdQpO,5=gO!DlQMhO,5=hO!DwQ`O,5=jO!D|Q!bO,5=mO!EUQ`O'#K_O>}Q`O'#HWO9gQ`O'#HYO!EZQ`O'#HYO:`QMhO'#H[O!E`Q`O'#H[OOQ[,5=p,5=pO!EeQ`O'#H]O!EvQ`O'#CoO!E{Q`O,59PO!FVQ`O,59PO!H[QlO,59POOQ[,59P,59PO!HlQ!0LrO,59PO%[QlO,59PO!JwQlO'#HdOOQ['#He'#HeOOQ['#Hf'#HfO`QlO,5=|O!K_Q`O,5=|O`QlO,5>SO`QlO,5>UO!KdQ`O,5>WO`QlO,5>YO!KiQ`O,5>]O!KnQlO,5>cOOQ[,5>i,5>iO%[QlO,5>iO9qQ!0LrO,5>kOOQ[,5>m,5>mO# xQ`O,5>mOOQ[,5>o,5>oO# xQ`O,5>oOOQ[,5>q,5>qO#!fQpO'#D_O%[QlO'#JuO##XQpO'#JuO##cQpO'#DmO##tQpO'#DmO#&VQlO'#DmO#&^Q`O'#JtO#&fQ`O,5:WO#&kQ`O'#EtO#&yQ`O'#KTO#'RQ`O,5;_O#'WQpO'#DmO#'eQpO'#EVOOQ!0Lf,5:o,5:oO%[QlO,5:oO#'lQ`O,5:oO>}Q`O,5;YO!BqQpO,5;YO!ByQMhO,5;YO:`QMhO,5;YO#'tQ`O,5@aO#'yQ07dO,5:sOOQO-E<e-E<eO#)PQ!0MSO,5;ROC{QpO,5:rO#)ZQpO,5:rOC{QpO,5;RO!BfQ!0LrO,5:rOOQ!0Lb'#Ej'#EjOOQO,5;R,5;RO%[QlO,5;RO#)hQ!0LrO,5;RO#)sQ!0LrO,5;RO!BqQpO,5:rOOQO,5;X,5;XO#*RQ!0LrO,5;RPOOO'#I]'#I]P#*gO&2DjO,58|POOO,58|,58|OOOO-E<]-E<]OOQ!0Lh1G.p1G.pOOOO-E<^-E<^OOOO,59},59}O#*rQ!bO,59}OOOO-E<`-E<`OOQ!0Lf1G/g1G/gO#*wQ!fO,5>}O+}QlO,5>}OOQO,5?T,5?TO#+RQlO'#IcOOQO-E<a-E<aO#+`Q`O,5@_O#+hQ!fO,5@_O#+oQ`O,5@mOOQ!0Lf1G/m1G/mO%[QlO,5@nO#+wQ`O'#IiOOQO-E<g-E<gO#+oQ`O,5@mOOQ!0Lb1G0x1G0xOOQ!0Ln1G/x1G/xOOQ!0Ln1G0Y1G0YO%[QlO,5@kO#,]Q!0LrO,5@kO#,nQ!0LrO,5@kO#,uQ`O,5@jO9aQ`O,5@jO#,}Q`O,5@jO#-]Q`O'#IlO#,uQ`O,5@jOOQ!0Lb1G0w1G0wO!(iQpO,5:uO!(tQpO,5:uOOQS,5:w,5:wO#-}QdO,5:wO#.VQMhO1G2yO9gQ`O1G2yOOQ!0Lf1G0u1G0uO#.eQ!0MxO1G0uO#/jQ!0MvO,5;VOOQ!0Lh'#GW'#GWO#0WQ!0MzO'#JkO!$lQlO1G0uO#2cQ!fO'#JvO%[QlO'#JvO#2mQ`O,5:eOOQ!0Lh'#D_'#D_OOQ!0Lf1G1O1G1OO%[QlO1G1OOOQ!0Lf1G1f1G1fO#2rQ`O1G1OO#5WQ!0MxO1G1PO#5_Q!0MxO1G1PO#7uQ!0MxO1G1PO#7|Q!0MxO1G1PO#:dQ!0MxO1G1PO#<zQ!0MxO1G1PO#=RQ!0MxO1G1PO#=YQ!0MxO1G1PO#?pQ!0MxO1G1PO#?wQ!0MxO1G1PO#BUQ?MtO'#CiO#DPQ?MtO1G1`O#DWQ?MtO'#JrO#DkQ!0MxO,5?ZOOQ!0Lb-E<m-E<mO#FxQ!0MxO1G1PO#GuQ!0MzO1G1POOQ!0Lf1G1P1G1PO#HxQMjO'#J{O#ISQ`O,5:xO#IXQ!0MxO1G1cO#I{Q,UO,5<WO#JTQ,UO,5<XO#J]Q,UO'#FoO#JtQ`O'#FnOOQO'#KX'#KXOOQO'#Im'#ImO#JyQ,UO1G1nOOQ!0Lf1G1n1G1nOOOW1G1y1G1yO#K[Q?MtO'#JqO#KfQ`O,5<bO!)PQlO,5<bOOOW-E<l-E<lOOQ!0Lf1G1l1G1lO#KkQpO'#KWOOQ!0Lf,5<d,5<dO#KsQpO,5<dO#KxQMhO'#DTOOOO'#Ia'#IaO#LPO#@ItO,59mOOQ!0Lh,59m,59mO%[QlO1G2PO!8XQ`O'#IqO#L[Q`O,5<zOOQ!0Lh,5<w,5<wO!+xQMhO'#ItO#LxQMjO,5=XO!+xQMhO'#IvO#MkQMjO,5=ZO!&oQMhO,5=]OOQO1G2S1G2SO#MuQ!dO'#CrO#NYQ(CWO'#ErO$ _QpO'#GbO$ uQ!dO,5<sO$ |Q`O'#KZO9aQ`O'#KZO$![Q`O,5<uO!+xQMhO,5<tO$!aQ`O'#GZO$!rQ`O,5<tO$!wQ!dO'#GWO$#UQ!dO'#K[O$#`Q`O'#K[O!&oQMhO'#K[O$#eQ`O,5<xO$#jQlO'#JuO$#tQpO'#GcO##tQpO'#GcO$$VQ`O'#GgO!3dQ`O'#GkO$$[Q!0LrO'#IsO$$gQpO,5<|OOQ!0Lp,5<|,5<|O$$nQpO'#GcO$${QpO'#GdO$%^QpO'#GdO$%cQMjO,5=XO$%sQMjO,5=ZOOQ!0Lh,5=^,5=^O!+xQMhO,5@UO!+xQMhO,5@UO$&TQ`O'#IxO$&iQ`O,5@TO$&qQ`O,59aOOQ!0Lh,59i,59iO$'hQ$IYO,59uOOQ!0Lh'#Jo'#JoO$(ZQMjO,5<kO$(|QMjO,5<mO@oQ`O,5<oOOQ!0Lh,5<p,5<pO$)WQ`O,5<vO$)]QMjO,5<{O$)mQ`O,5@UO$){Q`O'#KOO!$lQlO1G2RO$*QQ`O1G2RO9aQ`O'#KRO9aQ`O'#EtO%[QlO'#EtO9aQ`O'#IzO$*VQ!0LrO,5@zOOQ[1G2}1G2}OOQ[1G4_1G4_OOQ!0Lf1G/|1G/|OOQ!0Lf1G/z1G/zO$,XQ!0MxO1G0UOOQ[1G2y1G2yO!&oQMhO1G2yO%[QlO1G2yO#.YQ`O1G2yO$.]QMhO'#EkOOQ!0Lb,5@S,5@SO$.jQ!0LrO,5@SOOQ[1G.u1G.uO!BfQ!0LrO1G.uO!BqQpO1G.uO!ByQMhO1G.uO$.{Q`O1G0uO$/QQ`O'#CiO$/]Q`O'#KdO$/eQ`O,5={O$/jQ`O'#KdO$/oQ`O'#KdO$/}Q`O'#JQO$0]Q`O,5@}O$0eQ!fO1G1iOOQ!0Lf1G1k1G1kO9gQ`O1G3fO@oQ`O1G3fO$0lQ`O1G3fO$0qQ`O1G3fOOQ[1G3f1G3fO!DwQ`O1G3UO!&oQMhO1G3RO$0vQ`O1G3ROOQ[1G3S1G3SO!&oQMhO1G3SO$0{Q`O1G3SO$1TQpO'#HQOOQ[1G3U1G3UO!6SQpO'#I|O!D|Q!bO1G3XOOQ[1G3X1G3XOOQ[,5=r,5=rO$1]QMhO,5=tO9gQ`O,5=tO$$VQ`O,5=vO9[Q`O,5=vO!BqQpO,5=vO!ByQMhO,5=vO:`QMhO,5=vO$1kQ`O'#KbO$1vQ`O,5=wOOQ[1G.k1G.kO$1{Q!0LrO1G.kO@oQ`O1G.kO$2WQ`O1G.kO9qQ!0LrO1G.kO$4`Q!fO,5APO$4mQ`O,5APO9aQ`O,5APO$4xQlO,5>OO$5PQ`O,5>OOOQ[1G3h1G3hO`QlO1G3hOOQ[1G3n1G3nOOQ[1G3p1G3pO>xQ`O1G3rO$5UQlO1G3tO$9YQlO'#HsOOQ[1G3w1G3wO$9gQ`O'#HyO>}Q`O'#H{OOQ[1G3}1G3}O$9oQlO1G3}O9qQ!0LrO1G4TOOQ[1G4V1G4VOOQ!0Lb'#G_'#G_O9qQ!0LrO1G4XO9qQ!0LrO1G4ZO$=vQ`O,5@aO!)PQlO,5;`O9aQ`O,5;`O>}Q`O,5:XO!)PQlO,5:XO!BqQpO,5:XO$={Q?MtO,5:XOOQO,5;`,5;`O$>VQpO'#IdO$>mQ`O,5@`OOQ!0Lf1G/r1G/rO$>uQpO'#IjO$?PQ`O,5@oOOQ!0Lb1G0y1G0yO##tQpO,5:XOOQO'#If'#IfO$?XQpO,5:qOOQ!0Ln,5:q,5:qO#'oQ`O1G0ZOOQ!0Lf1G0Z1G0ZO%[QlO1G0ZOOQ!0Lf1G0t1G0tO>}Q`O1G0tO!BqQpO1G0tO!ByQMhO1G0tOOQ!0Lb1G5{1G5{O!BfQ!0LrO1G0^OOQO1G0m1G0mO%[QlO1G0mO$?`Q!0LrO1G0mO$?kQ!0LrO1G0mO!BqQpO1G0^OC{QpO1G0^O$?yQ!0LrO1G0mOOQO1G0^1G0^O$@_Q!0MxO1G0mPOOO-E<Z-E<ZPOOO1G.h1G.hOOOO1G/i1G/iO$@iQ!bO,5<iO$@qQ!fO1G4iOOQO1G4o1G4oO%[QlO,5>}O$@{Q`O1G5yO$ATQ`O1G6XO$A]Q!fO1G6YO9aQ`O,5?TO$AgQ!0MxO1G6VO%[QlO1G6VO$AwQ!0LrO1G6VO$BYQ`O1G6UO$BYQ`O1G6UO9aQ`O1G6UO$BbQ`O,5?WO9aQ`O,5?WOOQO,5?W,5?WO$BvQ`O,5?WO$){Q`O,5?WOOQO-E<j-E<jOOQS1G0a1G0aOOQS1G0c1G0cO#.QQ`O1G0cOOQ[7+(e7+(eO!&oQMhO7+(eO%[QlO7+(eO$CUQ`O7+(eO$CaQMhO7+(eO$CoQ!0MzO,5=XO$EzQ!0MzO,5=ZO$HVQ!0MzO,5=XO$JhQ!0MzO,5=ZO$LyQ!0MzO,59uO% OQ!0MzO,5<kO%#ZQ!0MzO,5<mO%%fQ!0MzO,5<{OOQ!0Lf7+&a7+&aO%'wQ!0MxO7+&aO%(kQlO'#IeO%(xQ`O,5@bO%)QQ!fO,5@bOOQ!0Lf1G0P1G0PO%)[Q`O7+&jOOQ!0Lf7+&j7+&jO%)aQ?MtO,5:fO%[QlO7+&zO%)kQ?MtO,5:bO%)xQ?MtO,5:jO%*SQ?MtO,5:lO%*^QMhO'#IhO%*hQ`O,5@gOOQ!0Lh1G0d1G0dOOQO1G1r1G1rOOQO1G1s1G1sO%*pQ!jO,5<ZO!)PQlO,5<YOOQO-E<k-E<kOOQ!0Lf7+'Y7+'YOOOW7+'e7+'eOOOW1G1|1G1|O%*{Q`O1G1|OOQ!0Lf1G2O1G2OOOOO,59o,59oO%+QQ!dO,59oOOOO-E<_-E<_OOQ!0Lh1G/X1G/XO%+XQ!0MxO7+'kOOQ!0Lh,5?],5?]O%+{QMhO1G2fP%,SQ`O'#IqPOQ!0Lh-E<o-E<oO%,pQMjO,5?`OOQ!0Lh-E<r-E<rO%-cQMjO,5?bOOQ!0Lh-E<t-E<tO%-mQ!dO1G2wO%-tQ!dO'#CrO%.[QMhO'#KRO$#jQlO'#JuOOQ!0Lh1G2_1G2_O%.cQ`O'#IpO%.wQ`O,5@uO%.wQ`O,5@uO%/PQ`O,5@uO%/[Q`O,5@uOOQO1G2a1G2aO%/jQMjO1G2`O!+xQMhO1G2`O%/zQ(CWO'#IrO%0XQ`O,5@vO!&oQMhO,5@vO%0aQ!dO,5@vOOQ!0Lh1G2d1G2dO%2qQ!fO'#CiO%2{Q`O,5=POOQ!0Lb,5<},5<}O%3TQpO,5<}OOQ!0Lb,5=O,5=OOClQ`O,5<}O%3`QpO,5<}OOQ!0Lb,5=R,5=RO$){Q`O,5=VOOQO,5?_,5?_OOQO-E<q-E<qOOQ!0Lp1G2h1G2hO##tQpO,5<}O$#jQlO,5=PO%3nQ`O,5=OO%3yQpO,5=OO!+xQMhO'#ItO%4sQMjO1G2sO!+xQMhO'#IvO%5fQMjO1G2uO%5pQMjO1G5pO%5zQMjO1G5pOOQO,5?d,5?dOOQO-E<v-E<vOOQO1G.{1G.{O!9xQpO,59wO%[QlO,59wOOQ!0Lh,5<j,5<jO%6XQ`O1G2ZO!+xQMhO1G2bO!+xQMhO1G5pO!+xQMhO1G5pO%6^Q!0MxO7+'mOOQ!0Lf7+'m7+'mO!$lQlO7+'mO%7QQ`O,5;`OOQ!0Lb,5?f,5?fOOQ!0Lb-E<x-E<xO%7VQ!dO'#K]O#'oQ`O7+(eO4UQ!fO7+(eO$CXQ`O7+(eO%7aQ!0MvO'#CiO%7tQ!0MvO,5=SO%8fQ`O,5=SO%8nQ`O,5=SOOQ!0Lb1G5n1G5nOOQ[7+$a7+$aO!BfQ!0LrO7+$aO!BqQpO7+$aO!$lQlO7+&aO%8sQ`O'#JPO%9[Q`O,5AOOOQO1G3g1G3gO9gQ`O,5AOO%9[Q`O,5AOO%9dQ`O,5AOOOQO,5?l,5?lOOQO-E=O-E=OOOQ!0Lf7+'T7+'TO%9iQ`O7+)QO9qQ!0LrO7+)QO9gQ`O7+)QO@oQ`O7+)QOOQ[7+(p7+(pO%9nQ!0MvO7+(mO!&oQMhO7+(mO!DrQ`O7+(nOOQ[7+(n7+(nO!&oQMhO7+(nO%9xQ`O'#KaO%:TQ`O,5=lOOQO,5?h,5?hOOQO-E<z-E<zOOQ[7+(s7+(sO%;gQpO'#HZOOQ[1G3`1G3`O!&oQMhO1G3`O%[QlO1G3`O%;nQ`O1G3`O%;yQMhO1G3`O9qQ!0LrO1G3bO$$VQ`O1G3bO9[Q`O1G3bO!BqQpO1G3bO!ByQMhO1G3bO%<XQ`O'#JOO%<mQ`O,5@|O%<uQpO,5@|OOQ!0Lb1G3c1G3cOOQ[7+$V7+$VO@oQ`O7+$VO9qQ!0LrO7+$VO%=QQ`O7+$VO%[QlO1G6kO%[QlO1G6lO%=VQ!0LrO1G6kO%=aQlO1G3jO%=hQ`O1G3jO%=mQlO1G3jOOQ[7+)S7+)SO9qQ!0LrO7+)^O`QlO7+)`OOQ['#Kg'#KgOOQ['#JR'#JRO%=tQlO,5>_OOQ[,5>_,5>_O%[QlO'#HtO%>RQ`O'#HvOOQ[,5>e,5>eO9aQ`O,5>eOOQ[,5>g,5>gOOQ[7+)i7+)iOOQ[7+)o7+)oOOQ[7+)s7+)sOOQ[7+)u7+)uO%>WQpO1G5{O%>rQ?MtO1G0zO%>|Q`O1G0zOOQO1G/s1G/sO%?XQ?MtO1G/sO>}Q`O1G/sO!)PQlO'#DmOOQO,5?O,5?OOOQO-E<b-E<bOOQO,5?U,5?UOOQO-E<h-E<hO!BqQpO1G/sOOQO-E<d-E<dOOQ!0Ln1G0]1G0]OOQ!0Lf7+%u7+%uO#'oQ`O7+%uOOQ!0Lf7+&`7+&`O>}Q`O7+&`O!BqQpO7+&`OOQO7+%x7+%xO$@_Q!0MxO7+&XOOQO7+&X7+&XO%[QlO7+&XO%?cQ!0LrO7+&XO!BfQ!0LrO7+%xO!BqQpO7+%xO%?nQ!0LrO7+&XO%?|Q!0MxO7++qO%[QlO7++qO%@^Q`O7++pO%@^Q`O7++pOOQO1G4r1G4rO9aQ`O1G4rO%@fQ`O1G4rOOQS7+%}7+%}O#'oQ`O<<LPO4UQ!fO<<LPO%@tQ`O<<LPOOQ[<<LP<<LPO!&oQMhO<<LPO%[QlO<<LPO%@|Q`O<<LPO%AXQ!0MzO,5?`O%CdQ!0MzO,5?bO%EoQ!0MzO1G2`O%HQQ!0MzO1G2sO%J]Q!0MzO1G2uO%LhQ!fO,5?PO%[QlO,5?POOQO-E<c-E<cO%LrQ`O1G5|OOQ!0Lf<<JU<<JUO%LzQ?MtO1G0uO& RQ?MtO1G1PO& YQ?MtO1G1PO&#ZQ?MtO1G1PO&#bQ?MtO1G1PO&%cQ?MtO1G1PO&'dQ?MtO1G1PO&'kQ?MtO1G1PO&'rQ?MtO1G1PO&)sQ?MtO1G1PO&)zQ?MtO1G1PO&*RQ!0MxO<<JfO&+yQ?MtO1G1PO&,vQ?MvO1G1PO&-yQ?MvO'#JkO&0PQ?MtO1G1cO&0^Q?MtO1G0UO&0hQMjO,5?SOOQO-E<f-E<fO!)PQlO'#FqOOQO'#KY'#KYOOQO1G1u1G1uO&0rQ`O1G1tO&0wQ?MtO,5?ZOOOW7+'h7+'hOOOO1G/Z1G/ZO&1RQ!dO1G4wOOQ!0Lh7+(Q7+(QP!&oQMhO,5?]O!+xQMhO7+(cO&1YQ`O,5?[O9aQ`O,5?[OOQO-E<n-E<nO&1hQ`O1G6aO&1hQ`O1G6aO&1pQ`O1G6aO&1{QMjO7+'zO&2]Q!dO,5?^O&2gQ`O,5?^O!&oQMhO,5?^OOQO-E<p-E<pO&2lQ!dO1G6bO&2vQ`O1G6bO&3OQ`O1G2kO!&oQMhO1G2kOOQ!0Lb1G2i1G2iOOQ!0Lb1G2j1G2jO%3TQpO1G2iO!BqQpO1G2iOClQ`O1G2iOOQ!0Lb1G2q1G2qO&3TQpO1G2iO&3cQ`O1G2kO$){Q`O1G2jOClQ`O1G2jO$#jQlO1G2kO&3kQ`O1G2jO&4_QMjO,5?`OOQ!0Lh-E<s-E<sO&5QQMjO,5?bOOQ!0Lh-E<u-E<uO!+xQMhO7++[OOQ!0Lh1G/c1G/cO&5[Q`O1G/cOOQ!0Lh7+'u7+'uO&5aQMjO7+'|O&5qQMjO7++[O&5{QMjO7++[O&6YQ!0MxO<<KXOOQ!0Lf<<KX<<KXO&6|Q`O1G0zO!&oQMhO'#IyO&7RQ`O,5@wO&9TQ!fO<<LPO!&oQMhO1G2nO&9[Q!0LrO1G2nOOQ[<<G{<<G{O!BfQ!0LrO<<G{O&9mQ!0MxO<<I{OOQ!0Lf<<I{<<I{OOQO,5?k,5?kO&:aQ`O,5?kO&:fQ`O,5?kOOQO-E<}-E<}O&:tQ`O1G6jO&:tQ`O1G6jO9gQ`O1G6jO@oQ`O<<LlOOQ[<<Ll<<LlO&:|Q`O<<LlO9qQ!0LrO<<LlOOQ[<<LX<<LXO%9nQ!0MvO<<LXOOQ[<<LY<<LYO!DrQ`O<<LYO&;RQpO'#I{O&;^Q`O,5@{O!)PQlO,5@{OOQ[1G3W1G3WOOQO'#I}'#I}O9qQ!0LrO'#I}O&;fQpO,5=uOOQ[,5=u,5=uO&;mQpO'#EgO&;tQpO'#GeO&;yQ`O7+(zO&<OQ`O7+(zOOQ[7+(z7+(zO!&oQMhO7+(zO%[QlO7+(zO&<WQ`O7+(zOOQ[7+(|7+(|O9qQ!0LrO7+(|O$$VQ`O7+(|O9[Q`O7+(|O!BqQpO7+(|O&<cQ`O,5?jOOQO-E<|-E<|OOQO'#H^'#H^O&<nQ`O1G6hO9qQ!0LrO<<GqOOQ[<<Gq<<GqO@oQ`O<<GqO&<vQ`O7+,VO&<{Q`O7+,WO%[QlO7+,VO%[QlO7+,WOOQ[7+)U7+)UO&=QQ`O7+)UO&=VQlO7+)UO&=^Q`O7+)UOOQ[<<Lx<<LxOOQ[<<Lz<<LzOOQ[-E=P-E=POOQ[1G3y1G3yO&=cQ`O,5>`OOQ[,5>b,5>bO&=hQ`O1G4PO9aQ`O7+&fO!)PQlO7+&fOOQO7+%_7+%_O&=mQ?MtO1G6YO>}Q`O7+%_OOQ!0Lf<<Ia<<IaOOQ!0Lf<<Iz<<IzO>}Q`O<<IzOOQO<<Is<<IsO$@_Q!0MxO<<IsO%[QlO<<IsOOQO<<Id<<IdO!BfQ!0LrO<<IdO&=wQ!0LrO<<IsO&>SQ!0MxO<= ]O&>dQ`O<= [OOQO7+*^7+*^O9aQ`O7+*^OOQ[ANAkANAkO&>lQ!fOANAkO!&oQMhOANAkO#'oQ`OANAkO4UQ!fOANAkO&>sQ`OANAkO%[QlOANAkO&>{Q!0MzO7+'zO&A^Q!0MzO,5?`O&CiQ!0MzO,5?bO&EtQ!0MzO7+'|O&HVQ!fO1G4kO&HaQ?MtO7+&aO&JeQ?MvO,5=XO&LlQ?MvO,5=ZO&L|Q?MvO,5=XO&M^Q?MvO,5=ZO&MnQ?MvO,59uO' tQ?MvO,5<kO'#wQ?MvO,5<mO'&]Q?MvO,5<{O'(RQ?MtO7+'kO'(`Q?MtO7+'mO'(mQ`O,5<]OOQO7+'`7+'`OOQ!0Lh7+*c7+*cO'(rQMjO<<K}OOQO1G4v1G4vO'(yQ`O1G4vO')UQ`O1G4vO')dQ`O7++{O')dQ`O7++{O!&oQMhO1G4xO')lQ!dO1G4xO')vQ`O7++|O'*OQ`O7+(VO'*ZQ!dO7+(VOOQ!0Lb7+(T7+(TOOQ!0Lb7+(U7+(UO!BqQpO7+(TOClQ`O7+(TO'*eQ`O7+(VO!&oQMhO7+(VO$){Q`O7+(UO'*jQ`O7+(VOClQ`O7+(UO'*rQMjO<<NvOOQ!0Lh7+$}7+$}O!+xQMhO<<NvO'*|Q!dO,5?eOOQO-E<w-E<wO'+WQ!0MvO7+(YO!&oQMhO7+(YOOQ[AN=gAN=gO9gQ`O1G5VOOQO1G5V1G5VO'+hQ`O1G5VO'+mQ`O7+,UO'+mQ`O7+,UO9qQ!0LrOANBWO@oQ`OANBWOOQ[ANBWANBWOOQ[ANAsANAsOOQ[ANAtANAtO'+uQ`O,5?gOOQO-E<y-E<yO',QQ?MtO1G6gOOQO,5?i,5?iOOQO-E<{-E<{OOQ[1G3a1G3aO',[Q`O,5=POOQ[<<Lf<<LfO!&oQMhO<<LfO&;yQ`O<<LfO',aQ`O<<LfO%[QlO<<LfOOQ[<<Lh<<LhO9qQ!0LrO<<LhO$$VQ`O<<LhO9[Q`O<<LhO',iQpO1G5UO',tQ`O7+,SOOQ[AN=]AN=]O9qQ!0LrOAN=]OOQ[<= q<= qOOQ[<= r<= rO',|Q`O<= qO'-RQ`O<= rOOQ[<<Lp<<LpO'-WQ`O<<LpO'-]QlO<<LpOOQ[1G3z1G3zO>}Q`O7+)kO'-dQ`O<<JQO'-oQ?MtO<<JQOOQO<<Hy<<HyOOQ!0LfAN?fAN?fOOQOAN?_AN?_O$@_Q!0MxOAN?_OOQOAN?OAN?OO%[QlOAN?_OOQO<<Mx<<MxOOQ[G27VG27VO!&oQMhOG27VO#'oQ`OG27VO'-yQ!fOG27VO4UQ!fOG27VO'.QQ`OG27VO'.YQ?MtO<<JfO'.gQ?MvO1G2`O'0]Q?MvO,5?`O'2`Q?MvO,5?bO'4cQ?MvO1G2sO'6fQ?MvO1G2uO'8iQ?MtO<<KXO'8vQ?MtO<<I{OOQO1G1w1G1wO!+xQMhOANAiOOQO7+*b7+*bO'9TQ`O7+*bO'9`Q`O<= gO'9hQ!dO7+*dOOQ!0Lb<<Kq<<KqO$){Q`O<<KqOClQ`O<<KqO'9rQ`O<<KqO!&oQMhO<<KqOOQ!0Lb<<Ko<<KoO!BqQpO<<KoO'9}Q!dO<<KqOOQ!0Lb<<Kp<<KpO':XQ`O<<KqO!&oQMhO<<KqO$){Q`O<<KpO':^QMjOANDbO':hQ!0MvO<<KtOOQO7+*q7+*qO9gQ`O7+*qO':xQ`O<= pOOQ[G27rG27rO9qQ!0LrOG27rO!)PQlO1G5RO';QQ`O7+,RO';YQ`O1G2kO&;yQ`OANBQOOQ[ANBQANBQO!&oQMhOANBQO';_Q`OANBQOOQ[ANBSANBSO9qQ!0LrOANBSO$$VQ`OANBSOOQO'#H_'#H_OOQO7+*p7+*pOOQ[G22wG22wOOQ[ANE]ANE]OOQ[ANE^ANE^OOQ[ANB[ANB[O';gQ`OANB[OOQ[<<MV<<MVO!)PQlOAN?lOOQOG24yG24yO$@_Q!0MxOG24yO#'oQ`OLD,qOOQ[LD,qLD,qO!&oQMhOLD,qO';lQ!fOLD,qO';sQ?MvO7+'zO'=iQ?MvO,5?`O'?lQ?MvO,5?bO'AoQ?MvO7+'|O'CeQMjOG27TOOQO<<M|<<M|OOQ!0LbANA]ANA]O$){Q`OANA]OClQ`OANA]O'CuQ!dOANA]OOQ!0LbANAZANAZO'C|Q`OANA]O!&oQMhOANA]O'DXQ!dOANA]OOQ!0LbANA[ANA[OOQO<<N]<<N]OOQ[LD-^LD-^O'DcQ?MtO7+*mOOQO'#Gf'#GfOOQ[G27lG27lO&;yQ`OG27lO!&oQMhOG27lOOQ[G27nG27nO9qQ!0LrOG27nOOQ[G27vG27vO'DmQ?MtOG25WOOQOLD*eLD*eOOQ[!$(!]!$(!]O#'oQ`O!$(!]O!&oQMhO!$(!]O'DwQ!0MzOG27TOOQ!0LbG26wG26wO$){Q`OG26wO'GYQ`OG26wOClQ`OG26wO'GeQ!dOG26wO!&oQMhOG26wOOQ[LD-WLD-WO&;yQ`OLD-WOOQ[LD-YLD-YOOQ[!)9Ew!)9EwO#'oQ`O!)9EwOOQ!0LbLD,cLD,cO$){Q`OLD,cOClQ`OLD,cO'GlQ`OLD,cO'GwQ!dOLD,cOOQ[!$(!r!$(!rOOQ[!.K;c!.K;cO'HOQ?MvOG27TOOQ!0Lb!$( }!$( }O$){Q`O!$( }OClQ`O!$( }O'ItQ`O!$( }OOQ!0Lb!)9Ei!)9EiO$){Q`O!)9EiOClQ`O!)9EiOOQ!0Lb!.K;T!.K;TO$){Q`O!.K;TOOQ!0Lb!4/0o!4/0oO!)PQlO'#DzO1PQ`O'#EXO'JPQ!fO'#JqO'JWQ!L^O'#DvO'J_QlO'#EOO'JfQ!fO'#CiO'L|Q!fO'#CiO!)PQlO'#EQO'M^QlO,5;ZO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO,5;eO!)PQlO'#IoO( aQ`O,5<iO!)PQlO,5;eO( iQMhO,5;eO(#SQMhO,5;eO!)PQlO,5;wO!&oQMhO'#GmO( iQMhO'#GmO!&oQMhO'#GoO( iQMhO'#GoO1SQ`O'#DZO1SQ`O'#DZO!&oQMhO'#GPO( iQMhO'#GPO!&oQMhO'#GRO( iQMhO'#GRO!&oQMhO'#GaO( iQMhO'#GaO!)PQlO,5:jO(#ZQpO'#D_O(#eQpO'#JuO!)PQlO,5@nO'M^QlO1G0uO(#oQ?MtO'#CiO!)PQlO1G2PO!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO(#yQ!dO'#CrO!&oQMhO,5<tO( iQMhO,5<tO'M^QlO1G2RO!)PQlO7+&zO!&oQMhO1G2`O( iQMhO1G2`O!&oQMhO'#ItO( iQMhO'#ItO!&oQMhO'#IvO( iQMhO'#IvO!&oQMhO1G2bO( iQMhO1G2bO'M^QlO7+'mO'M^QlO7+&aO!&oQMhOANAiO( iQMhOANAiO($^Q`O'#EoO($cQ`O'#EoO($kQ`O'#F]O($pQ`O'#EyO($uQ`O'#KSO(%QQ`O'#KQO(%]Q`O,5;ZO(%bQMjO,5<eO(%iQ`O'#GYO(%nQ`O'#GYO(%sQ`O,5<gO(%{Q`O,5;ZO(&TQ?MtO1G1`O(&[Q`O,5<tO(&aQ`O,5<tO(&fQ`O,5<vO(&kQ`O,5<vO(&pQ`O1G2RO(&uQ`O1G0uO(&zQMjO<<K}O('RQMjO<<K}O7eQMhO'#F|O9[Q`O'#F{OAjQ`O'#EnO!)PQlO,5;tO!3dQ`O'#GYO!3dQ`O'#GYO!3dQ`O'#G[O!3dQ`O'#G[O!+xQMhO7+(cO!+xQMhO7+(cO%-mQ!dO1G2wO%-mQ!dO1G2wO!&oQMhO,5=]O!&oQMhO,5=]",
      stateData: "((X~O'{OS'|OSTOS'}RQ~OPYOQYOSfOY!VOaqOdzOeyOl!POpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!uwO!xxO!|]O$W|O$niO%h}O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO&V!WO&]!XO&_!YO&a!ZO&c![O&f!]O&l!^O&r!_O&t!`O&v!aO&x!bO&z!cO(SSO(UTO(XUO(`VO(n[O~OWtO~P`OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa!wOs!nO!S!oO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!xO#W!pO#X!pO#[!zO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O'}!{O~OP]XR]X[]Xa]Xj]Xr]X!Q]X!S]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X'y]X(`]X(q]X(x]X(y]X~O!g%RX~P(qO_!}O(U#PO(V!}O(W#PO~O_#QO(W#PO(X#PO(Y#QO~Ox#SO!U#TO(a#TO(b#VO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S;{O(UTO(XUO(`VO(n[O~O![#ZO!]#WO!Y(gP!Y(uP~P+}O!^#cO~P`OPYOQYOSfOd!jOe!iOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(UTO(XUO(`VO(n[O~Op#mO![#iO!|]O#i#lO#j#iO(S;|O!k(rP~P.iO!l#oO(S#nO~O!x#sO!|]O%h#tO~O#k#uO~O!g#vO#k#uO~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!]$_O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa(eX'y(eX'v(eX!k(eX!Y(eX!_(eX%i(eX!g(eX~P1qO#S$dO#`$eO$Q$eOP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX!_(fX%i(fX~Oa(fX'y(fX'v(fX!Y(fX!k(fXv(fX!g(fX~P4UO#`$eO~O$]$hO$_$gO$f$mO~OSfO!_$nO$i$oO$k$qO~Oh%VOj%cOk%cOl%cOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S$sO(UTO(XUO(`$uO(x$}O(y%POg(]P~O!l%dO~O!S%gO!_%hO(S%fO~O!g%lO~Oa%mO'y%mO~O!Q%qO~P%[O(T!lO~P%[O%n%uO~P%[Oh%VO!l%dO(S%fO(T!lO~Oe%|O!l%dO(S%fO~Oj$RO~O!Q&RO!_&OO!l&QO%j&UO(S%fO(T!lO(UTO(XUO`)VP~O!x#sO~O%s&WO!S)RX!_)RX(S)RX~O(S&XO~Ol!PO!u&^O%j!QO%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO~Od&cOe&bO!x&`O%h&aO%{&_O~P<VOd&fOeyOl!PO!_&eO!u&^O!xxO!|]O%h}O%l!OO%m!OO%n!OO%q!RO%s!SO%v!TO%w!TO%y!UO~Ob&iO#`&lO%j&gO(T!lO~P=[O!l&mO!u&qO~O!l#oO~O!_XO~Oa%mO'w&yO'y%mO~Oa%mO'w&|O'y%mO~Oa%mO'w'OO'y%mO~O'v]X!Y]Xv]X!k]X&Z]X!_]X%i]X!g]X~P(qO!b']O!c'UO!d'UO(T!lO(UTO(XUO~Os'SO!S'RO!['VO(d'QO!^(hP!^(wP~P@cOn'`O!_'^O(S%fO~Oe'eO!l%dO(S%fO~O!Q&RO!l&QO~Os!nO!S!oO!|;wO#T!pO#U!pO#W!pO#X!pO(T!lO(UTO(XUO(d!mO(n!sO~O!b'kO!c'jO!d'jO#V!pO#['lO#]'lO~PA}Oa%mOh%VO!g#vO!l%dO'y%mO(q'nO~O!p'rO#`'pO~PC]Os!nO!S!oO(UTO(XUO(d!mO(n!sO~O!_XOs(lX!S(lX!b(lX!c(lX!d(lX!|(lX#T(lX#U(lX#V(lX#W(lX#X(lX#[(lX#](lX(T(lX(U(lX(X(lX(d(lX(n(lX~O!c'jO!d'jO(T!lO~PC{O(O'vO(P'vO(Q'xO~O_!}O(U'zO(V!}O(W'zO~O_#QO(W'zO(X'zO(Y#QO~Ov'|O~P%[Ox#SO!U#TO(a#TO(b(PO~O![(RO!Y'VX!Y']X!]'VX!]']X~P+}O!](TO!Y(gX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!](TO!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~O!Y(gX~PGvO!Y(YO~O!Y(tX!](tX!g(tX!k(tX(q(tX~O#`(tX#k#dX!^(tX~PIyO#`(ZO!Y(vX!](vX~O!]([O!Y(uX~O!Y(_O~O#`$eO~PIyO!^(`O~P`OR#zO!Q#yO!S#{O!l#xO(`VOP!na[!naj!nar!na!]!na!p!na#R!na#n!na#o!na#p!na#q!na#r!na#s!na#t!na#u!na#v!na#x!na#z!na#{!na(q!na(x!na(y!na~Oa!na'y!na'v!na!Y!na!k!nav!na!_!na%i!na!g!na~PKaO!k(aO~O!g#vO#`(bO(q'nO!](sXa(sX'y(sX~O!k(sX~PM|O!S%gO!_%hO!|]O#i(gO#j(fO(S%fO~O!](hO!k(rX~O!k(jO~O!S%gO!_%hO#j(fO(S%fO~OP(fXR(fX[(fXj(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~O!g#vO!k(fX~P! jOR(lO!Q(kO!l#xO#S$dO!|!{a!S!{a~O!x!{a%h!{a!_!{a#i!{a#j!{a(S!{a~P!#kO!x(pO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_XO!iuO!lZO!oYO!pYO!qYO!svO!u!gO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~O#k(vO~O![(xO!k(jP~P%[O(d(zO(n[O~O!S(|O!l#xO(d(zO(n[O~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]$_Oa$qa'y$qa'v$qa!k$qa!Y$qa!_$qa%i$qa!g$qa~Ol)bO~P!&oOh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O%[O!S${O!_$|O!i%aO!l$xO#j%bO$W%_O$t%]O$v%^O$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Og(oP~P!+xO!Q)gO!g)fO!_$^X$Z$^X$]$^X$_$^X$f$^X~O!g)fO!_(zX$Z(zX$](zX$_(zX$f(zX~O!Q)gO~P!.RO!Q)gO!_(zX$Z(zX$](zX$_(zX$f(zX~O!_)iO$Z)mO$])hO$_)hO$f)nO~O![)qO~P!)PO$]$hO$_$gO$f)uO~On$zX!Q$zX#S$zX'x$zX(x$zX(y$zX~OgmXg$zXnmX!]mX#`mX~P!/wOx)wO(a)xO(b)zO~On*TO!Q)|O'x)}O(x$}O(y%PO~Og){O~P!0{Og*UO~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S*WO!_*XO!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~O![*[O(S*VO!k(}P~P!1jO#k*^O~O!l*_O~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(S*aO(UTO(XUO(`$uO(x$}O(y%PO~O![*dO!Y)OP~P!3iOr*pOs!nO!S*fO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO(d!mO~O!^*mO~P!5^O#S$dOn(_X!Q(_X'x(_X(x(_X(y(_X!](_X#`(_X~Og(_X$O(_X~P!6`On*uO#`*tOg(^X!](^X~O!]*vOg(]X~Oj%cOk%cOl%cO(S&XOg(]P~Os*yO~O!l+OO~O(S(tO~Op+TO!S%gO![#iO!_%hO!|]O#i#lO#j#iO(S%fO!k(rP~O!g#vO#k+UO~O!S%gO![+WO!]([O!_%hO(S%fO!Y(uP~Os'YO!S+YO![+XO(UTO(XUO(d(zO~O!^(wP~P!9iO!]+ZOa)SX'y)SX~OP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO#z$WO#{$XO(`VO(q$YO(x#|O(y#}O~Oa!ja!]!ja'y!ja'v!ja!Y!ja!k!jav!ja!_!ja%i!ja!g!ja~P!:aOR#zO!Q#yO!S#{O!l#xO(`VOP!ra[!raj!rar!ra!]!ra!p!ra#R!ra#n!ra#o!ra#p!ra#q!ra#r!ra#s!ra#t!ra#u!ra#v!ra#x!ra#z!ra#{!ra(q!ra(x!ra(y!ra~Oa!ra'y!ra'v!ra!Y!ra!k!rav!ra!_!ra%i!ra!g!ra~P!<wOR#zO!Q#yO!S#{O!l#xO(`VOP!ta[!taj!tar!ta!]!ta!p!ta#R!ta#n!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#x!ta#z!ta#{!ta(q!ta(x!ta(y!ta~Oa!ta'y!ta'v!ta!Y!ta!k!tav!ta!_!ta%i!ta!g!ta~P!?_Oh%VOn+dO!_'^O%i+cO~O!g+fOa([X!_([X'y([X!]([X~Oa%mO!_XO'y%mO~Oh%VO!l%dO~Oh%VO!l%dO(S%fO~O!g#vO#k(vO~Ob+qO%j+rO(S+nO(UTO(XUO!^)WP~O!]+sO`)VX~O[+wO~O`+xO~O!_&OO(S%fO(T!lO`)VP~Oh%VO#`+}O~Oh%VOn,QO!_$|O~O!_,SO~O!Q,UO!_XO~O%n%uO~O!x,ZO~Oe,`O~Ob,aO(S#nO(UTO(XUO!^)UP~Oe%|O~O%j!QO(S&XO~P=[O[,fO`,eO~OPYOQYOSfOdzOeyOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!iuO!lZO!oYO!pYO!qYO!svO!xxO!|]O$niO%h}O(UTO(XUO(`VO(n[O~O!_!eO!u!gO$W!kO(S!dO~P!F_O`,eOa%mO'y%mO~OPYOQYOSfOd!jOe!iOpkOrYOskOtkOzkO|YO!OYO!SWO!WkO!XkO!_!eO!iuO!lZO!oYO!pYO!qYO!svO!x!hO$W!kO$niO(S!dO(UTO(XUO(`VO(n[O~Oa,kOl!OO!uwO%l!OO%m!OO%n!OO~P!HwO!l&mO~O&],qO~O!_,sO~O&n,uO&p,vOP&kaQ&kaS&kaY&kaa&kad&kae&kal&kap&kar&kas&kat&kaz&ka|&ka!O&ka!S&ka!W&ka!X&ka!_&ka!i&ka!l&ka!o&ka!p&ka!q&ka!s&ka!u&ka!x&ka!|&ka$W&ka$n&ka%h&ka%j&ka%l&ka%m&ka%n&ka%q&ka%s&ka%v&ka%w&ka%y&ka&V&ka&]&ka&_&ka&a&ka&c&ka&f&ka&l&ka&r&ka&t&ka&v&ka&x&ka&z&ka'v&ka(S&ka(U&ka(X&ka(`&ka(n&ka!^&ka&d&kab&ka&i&ka~O(S,{O~Oh!eX!]!RX!^!RX!g!RX!g!eX!l!eX#`!RX~O!]!eX!^!eX~P# }O!g-QO#`-POh(iX!]#hX!^#hX!g(iX!l(iX~O!](iX!^(iX~P#!pOh%VO!g-SO!l%dO!]!aX!^!aX~Os!nO!S!oO(UTO(XUO(d!mO~OP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_!eO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(UTO(XUO(`VO(n[O~O(S<rO~P#$VO!]-WO!^(hX~O!^-YO~O!g-QO#`-PO!]#hX!^#hX~O!]-ZO!^(wX~O!^-]O~O!c-^O!d-^O(T!lO~P##tO!^-aO~P'_On-dO!_'^O~O!Y-iO~Os!{a!b!{a!c!{a!d!{a#T!{a#U!{a#V!{a#W!{a#X!{a#[!{a#]!{a(T!{a(U!{a(X!{a(d!{a(n!{a~P!#kO!p-nO#`-lO~PC]O!c-pO!d-pO(T!lO~PC{Oa%mO#`-lO'y%mO~Oa%mO!g#vO#`-lO'y%mO~Oa%mO!g#vO!p-nO#`-lO'y%mO(q'nO~O(O'vO(P'vO(Q-uO~Ov-vO~O!Y'Va!]'Va~P!:aO![-zO!Y'VX!]'VX~P%[O!](TO!Y(ga~O!Y(ga~PGvO!]([O!Y(ua~O!S%gO![.OO!_%hO(S%fO!Y']X!]']X~O#`.QO!](sa!k(saa(sa'y(sa~O!g#vO~P#,]O!](hO!k(ra~O!S%gO!_%hO#j.UO(S%fO~Op.ZO!S%gO![.WO!_%hO!|]O#i.YO#j.WO(S%fO!]'`X!k'`X~OR._O!l#xO~Oh%VOn.bO!_'^O%i.aO~Oa#ci!]#ci'y#ci'v#ci!Y#ci!k#civ#ci!_#ci%i#ci!g#ci~P!:aOn=|O!Q)|O'x)}O(x$}O(y%PO~O#k#_aa#_a#`#_a'y#_a!]#_a!k#_a!_#_a!Y#_a~P#/XO#k(_XP(_XR(_X[(_Xa(_Xj(_Xr(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X'y(_X(`(_X(q(_X!k(_X!Y(_X'v(_Xv(_X!_(_X%i(_X!g(_X~P!6`O!].oO!k(jX~P!:aO!k.rO~O!Y.tO~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mia#mij#mir#mi!]#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#n#mi~P#2wO#n$OO~P#2wOP$[OR#zOr$aO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO[#mia#mij#mi!]#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#r#mi~P#5fO#r$QO~P#5fOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO(`VOa#mi!]#mi#x#mi#z#mi#{#mi'y#mi(q#mi(x#mi(y#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#v#mi~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO(`VO(y#}Oa#mi!]#mi#z#mi#{#mi'y#mi(q#mi(x#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#x$UO~P#:kO#x#mi~P#:kO#v$SO~P#8TOP$[OR#zO[$cOj$ROr$aO!Q#yO!S#{O!l#xO!p$[O#R$RO#n$OO#o$PO#p$PO#q$PO#r$QO#s$RO#t$RO#u$bO#v$SO#x$UO(`VO(x#|O(y#}Oa#mi!]#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~O#z#mi~P#=aO#z$WO~P#=aOP]XR]X[]Xj]Xr]X!Q]X!S]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X!]]X!^]X~O$O]X~P#@OOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO#z<XO#{<YO(`VO(q$YO(x#|O(y#}O~O$O.vO~P#B]O#S$dO#`<`O$Q<`O$O(fX!^(fX~P! jOa'ca!]'ca'y'ca'v'ca!k'ca!Y'cav'ca!_'ca%i'ca!g'ca~P!:aO[#mia#mij#mir#mi!]#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi'y#mi(q#mi'v#mi!Y#mi!k#miv#mi!_#mi%i#mi!g#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n$OO#o$PO#p$PO#q$PO(`VO(x#mi(y#mi~P#E_On=|O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P#E_O!].zOg(oX~P!0{Og.|O~Oa$Pi!]$Pi'y$Pi'v$Pi!Y$Pi!k$Piv$Pi!_$Pi%i$Pi!g$Pi~P!:aO$].}O$_.}O~O$]/OO$_/OO~O!g)fO#`/PO!_$cX$Z$cX$]$cX$_$cX$f$cX~O![/QO~O!_)iO$Z/SO$])hO$_)hO$f/TO~O!]<ZO!^(eX~P#B]O!^/UO~O!g)fO$f(zX~O$f/WO~Ov/XO~P!&oOx)wO(a)xO(b/[O~O!S/_O~O(x$}On%aa!Q%aa'x%aa(y%aa!]%aa#`%aa~Og%aa$O%aa~P#LaO(y%POn%ca!Q%ca'x%ca(x%ca!]%ca#`%ca~Og%ca$O%ca~P#MSO!]fX!gfX!kfX!k$zX(qfX~P!/wO![/hO!]([O(S/gO!Y(uP!Y)OP~P!1jOr*pO!b*nO!c*hO!d*hO!l*_O#[*oO%`*jO(T!lO(UTO(XUO~Os<oO!S/iO![+XO!^*mO(d<nO!^(wP~P#NmO!k/jO~P#/XO!]/kO!g#vO(q'nO!k(}X~O!k/pO~O!S%gO![*[O!_%hO(S%fO!k(}P~O#k/rO~O!Y$zX!]$zX!g%RX~P!/wO!]/sO!Y)OX~P#/XO!g/uO~O!Y/wO~OpkO(S/xO~P.iOh%VOr/}O!g#vO!l%dO(q'nO~O!g+fO~Oa%mO!]0RO'y%mO~O!^0TO~P!5^O!c0UO!d0UO(T!lO~P##tOs!nO!S0VO(UTO(XUO(d!mO~O#[0XO~Og%aa!]%aa#`%aa$O%aa~P!0{Og%ca!]%ca#`%ca$O%ca~P!0{Oj%cOk%cOl%cO(S&XOg'lX!]'lX~O!]*vOg(]a~Og0bO~OR0cO!Q0cO!S0dO#S$dOn}a'x}a(x}a(y}a!]}a#`}a~Og}a$O}a~P$&vO!Q)|O'x)}On$sa(x$sa(y$sa!]$sa#`$sa~Og$sa$O$sa~P$'rO!Q)|O'x)}On$ua(x$ua(y$ua!]$ua#`$ua~Og$ua$O$ua~P$(eO#k0gO~Og%Ta!]%Ta#`%Ta$O%Ta~P!0{On0iO#`0hOg(^a!](^a~O!g#vO~O#k0lO~O!]+ZOa)Sa'y)Sa~OR#zO!Q#yO!S#{O!l#xO(`VOP!ri[!rij!rir!ri!]!ri!p!ri#R!ri#n!ri#o!ri#p!ri#q!ri#r!ri#s!ri#t!ri#u!ri#v!ri#x!ri#z!ri#{!ri(q!ri(x!ri(y!ri~Oa!ri'y!ri'v!ri!Y!ri!k!riv!ri!_!ri%i!ri!g!ri~P$*bOh%VOr%XOs$tOt$tOz%YO|%ZO!O<eO!S${O!_$|O!i=vO!l$xO#j<kO$W%_O$t<gO$v<iO$y%`O(UTO(XUO(`$uO(x$}O(y%PO~Op0uO%]0vO(S0tO~P$,xO!g+fOa([a!_([a'y([a!]([a~O#k0|O~O[]X!]fX!^fX~O!]0}O!^)WX~O!^1PO~O[1QO~Ob1SO(S+nO(UTO(XUO~O!_&OO(S%fO`'tX!]'tX~O!]+sO`)Va~O!k1VO~P!:aO[1YO~O`1ZO~O#`1^O~On1aO!_$|O~O(d(zO!^)TP~Oh%VOn1jO!_1gO%i1iO~O[1tO!]1rO!^)UX~O!^1uO~O`1wOa%mO'y%mO~O(S#nO(UTO(XUO~O#S$dO#`$eO$Q$eOP(fXR(fX[(fXr(fX!Q(fX!S(fX!](fX!l(fX!p(fX#R(fX#n(fX#o(fX#p(fX#q(fX#r(fX#s(fX#t(fX#u(fX#v(fX#x(fX#z(fX#{(fX(`(fX(q(fX(x(fX(y(fX~Oj1zO&Z1{Oa(fX~P$2cOj1zO#`$eO&Z1{O~Oa1}O~P%[Oa2PO~O&d2SOP&biQ&biS&biY&bia&bid&bie&bil&bip&bir&bis&bit&biz&bi|&bi!O&bi!S&bi!W&bi!X&bi!_&bi!i&bi!l&bi!o&bi!p&bi!q&bi!s&bi!u&bi!x&bi!|&bi$W&bi$n&bi%h&bi%j&bi%l&bi%m&bi%n&bi%q&bi%s&bi%v&bi%w&bi%y&bi&V&bi&]&bi&_&bi&a&bi&c&bi&f&bi&l&bi&r&bi&t&bi&v&bi&x&bi&z&bi'v&bi(S&bi(U&bi(X&bi(`&bi(n&bi!^&bib&bi&i&bi~Ob2YO!^2WO&i2XO~P`O!_XO!l2[O~O&p,vOP&kiQ&kiS&kiY&kia&kid&kie&kil&kip&kir&kis&kit&kiz&ki|&ki!O&ki!S&ki!W&ki!X&ki!_&ki!i&ki!l&ki!o&ki!p&ki!q&ki!s&ki!u&ki!x&ki!|&ki$W&ki$n&ki%h&ki%j&ki%l&ki%m&ki%n&ki%q&ki%s&ki%v&ki%w&ki%y&ki&V&ki&]&ki&_&ki&a&ki&c&ki&f&ki&l&ki&r&ki&t&ki&v&ki&x&ki&z&ki'v&ki(S&ki(U&ki(X&ki(`&ki(n&ki!^&ki&d&kib&ki&i&ki~O!Y2bO~O!]!aa!^!aa~P#B]Os!nO!S!oO![2hO(d!mO!]'WX!^'WX~P@cO!]-WO!^(ha~O!]'^X!^'^X~P!9iO!]-ZO!^(wa~O!^2oO~P'_Oa%mO#`2xO'y%mO~Oa%mO!g#vO#`2xO'y%mO~Oa%mO!g#vO!p2|O#`2xO'y%mO(q'nO~Oa%mO'y%mO~P!:aO!]$_Ov$qa~O!Y'Vi!]'Vi~P!:aO!](TO!Y(gi~O!]([O!Y(ui~O!Y(vi!](vi~P!:aO!](si!k(sia(si'y(si~P!:aO#`3OO!](si!k(sia(si'y(si~O!](hO!k(ri~O!S%gO!_%hO!|]O#i3TO#j3SO(S%fO~O!S%gO!_%hO#j3SO(S%fO~On3[O!_'^O%i3ZO~Oh%VOn3[O!_'^O%i3ZO~O#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aav%aa!_%aa%i%aa!g%aa~P#LaO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%cav%ca!_%ca%i%ca!g%ca~P#MSO#k%aaP%aaR%aa[%aaa%aaj%aar%aa!S%aa!]%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa'y%aa(`%aa(q%aa!k%aa!Y%aa'v%aa#`%aav%aa!_%aa%i%aa!g%aa~P#/XO#k%caP%caR%ca[%caa%caj%car%ca!S%ca!]%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca'y%ca(`%ca(q%ca!k%ca!Y%ca'v%ca#`%cav%ca!_%ca%i%ca!g%ca~P#/XO#k}aP}a[}aa}aj}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a'y}a(`}a(q}a!k}a!Y}a'v}av}a!_}a%i}a!g}a~P$&vO#k$saP$saR$sa[$saa$saj$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa'y$sa(`$sa(q$sa!k$sa!Y$sa'v$sav$sa!_$sa%i$sa!g$sa~P$'rO#k$uaP$uaR$ua[$uaa$uaj$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua'y$ua(`$ua(q$ua!k$ua!Y$ua'v$uav$ua!_$ua%i$ua!g$ua~P$(eO#k%TaP%TaR%Ta[%Taa%Taj%Tar%Ta!S%Ta!]%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta'y%Ta(`%Ta(q%Ta!k%Ta!Y%Ta'v%Ta#`%Tav%Ta!_%Ta%i%Ta!g%Ta~P#/XOa#cq!]#cq'y#cq'v#cq!Y#cq!k#cqv#cq!_#cq%i#cq!g#cq~P!:aO![3dO!]'XX!k'XX~P%[O!].oO!k(ja~O!].oO!k(ja~P!:aO!Y3gO~O$O!na!^!na~PKaO$O!ja!]!ja!^!ja~P#B]O$O!ra!^!ra~P!<wO$O!ta!^!ta~P!?_Og'[X!]'[X~P!+xO!].zOg(oa~OSfO!_3{O$d3|O~O!^4QO~Ov4RO~P#/XOa$mq!]$mq'y$mq'v$mq!Y$mq!k$mqv$mq!_$mq%i$mq!g$mq~P!:aO!Y4TO~P!&oO!S4UO~O!Q)|O'x)}O(y%POn'ha(x'ha!]'ha#`'ha~Og'ha$O'ha~P%,XO!Q)|O'x)}On'ja(x'ja(y'ja!]'ja#`'ja~Og'ja$O'ja~P%,zO(q$YO~P#/XO!YfX!Y$zX!]fX!]$zX!g%RX#`fX~P!/wO(S<xO~P!1jO!S%gO![4XO!_%hO(S%fO!]'dX!k'dX~O!]/kO!k(}a~O!]/kO!g#vO!k(}a~O!]/kO!g#vO(q'nO!k(}a~Og$|i!]$|i#`$|i$O$|i~P!0{O![4aO!Y'fX!]'fX~P!3iO!]/sO!Y)Oa~O!]/sO!Y)Oa~P#/XOP]XR]X[]Xj]Xr]X!Q]X!S]X!Y]X!]]X!l]X!p]X#R]X#S]X#`]X#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~Oj%YX!g%YX~P%0kOj4fO!g#vO~Oh%VO!g#vO!l%dO~Oh%VOr4kO!l%dO(q'nO~Or4pO!g#vO(q'nO~Os!nO!S4qO(UTO(XUO(d!mO~O(x$}On%ai!Q%ai'x%ai(y%ai!]%ai#`%ai~Og%ai$O%ai~P%4[O(y%POn%ci!Q%ci'x%ci(x%ci!]%ci#`%ci~Og%ci$O%ci~P%4}Og(^i!](^i~P!0{O#`4wOg(^i!](^i~P!0{O!k4zO~Oa$oq!]$oq'y$oq'v$oq!Y$oq!k$oqv$oq!_$oq%i$oq!g$oq~P!:aO!Y5QO~O!]5RO!_)PX~P#/XOa$zX!_$zX%^]X'y$zX!]$zX~P!/wO%^5UOaoXnoX!QoX!_oX'xoX'yoX(xoX(yoX!]oX~Op5VO(S#nO~O%^5UO~Ob5]O%j5^O(S+nO(UTO(XUO!]'sX!^'sX~O!]0}O!^)Wa~O[5bO~O`5cO~Oa%mO'y%mO~P#/XO!]5kO#`5mO!^)TX~O!^5nO~Or5tOs!nO!S*fO!b!yO!c!vO!d!vO!|;wO#T!pO#U!pO#V!pO#W!pO#X!pO#[5sO#]!zO(T!lO(UTO(XUO(d!mO(n!sO~O!^5rO~P%:YOn5yO!_1gO%i5xO~Oh%VOn5yO!_1gO%i5xO~Ob6QO(S#nO(UTO(XUO!]'rX!^'rX~O!]1rO!^)Ua~O(UTO(XUO(d6SO~O`6WO~Oj6ZO&Z6[O~PM|O!k6]O~P%[Oa6_O~Oa6_O~P%[Ob2YO!^6dO&i2XO~P`O!g6fO~O!g6hOh(ii!](ii!^(ii!g(ii!l(iir(ii(q(ii~O!]#hi!^#hi~P#B]O#`6iO!]#hi!^#hi~O!]!ai!^!ai~P#B]Oa%mO#`6rO'y%mO~Oa%mO!g#vO#`6rO'y%mO~O!](sq!k(sqa(sq'y(sq~P!:aO!](hO!k(rq~O!S%gO!_%hO#j6yO(S%fO~O!_'^O%i6|O~On7QO!_'^O%i6|O~O#k'haP'haR'ha['haa'haj'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha'y'ha(`'ha(q'ha!k'ha!Y'ha'v'hav'ha!_'ha%i'ha!g'ha~P%,XO#k'jaP'jaR'ja['jaa'jaj'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja'y'ja(`'ja(q'ja!k'ja!Y'ja'v'jav'ja!_'ja%i'ja!g'ja~P%,zO#k$|iP$|iR$|i[$|ia$|ij$|ir$|i!S$|i!]$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i'y$|i(`$|i(q$|i!k$|i!Y$|i'v$|i#`$|iv$|i!_$|i%i$|i!g$|i~P#/XO#k%aiP%aiR%ai[%aia%aij%air%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai'y%ai(`%ai(q%ai!k%ai!Y%ai'v%aiv%ai!_%ai%i%ai!g%ai~P%4[O#k%ciP%ciR%ci[%cia%cij%cir%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci'y%ci(`%ci(q%ci!k%ci!Y%ci'v%civ%ci!_%ci%i%ci!g%ci~P%4}O!]'Xa!k'Xa~P!:aO!].oO!k(ji~O$O#ci!]#ci!^#ci~P#B]OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O(`VO[#mij#mir#mi#R#mi#o#mi#p#mi#q#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#n#mi~P%MXO#n<PO~P%MXOP$[OR#zOr<]O!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO[#mij#mi#R#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#r#mi~P& aO#r<RO~P& aOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O(`VO#x#mi#z#mi#{#mi$O#mi(q#mi(x#mi(y#mi!]#mi!^#mi~O#v#mi~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO(`VO(y#}O#z#mi#{#mi$O#mi(q#mi(x#mi!]#mi!^#mi~O#x<VO~P&%jO#x#mi~P&%jO#v<TO~P&#iOP$[OR#zO[<_Oj<SOr<]O!Q#yO!S#{O!l#xO!p$[O#R<SO#n<PO#o<QO#p<QO#q<QO#r<RO#s<SO#t<SO#u<^O#v<TO#x<VO(`VO(x#|O(y#}O#{#mi$O#mi(q#mi!]#mi!^#mi~O#z#mi~P&'yO#z<XO~P&'yOa#|y!]#|y'y#|y'v#|y!Y#|y!k#|yv#|y!_#|y%i#|y!g#|y~P!:aO[#mij#mir#mi#R#mi#r#mi#s#mi#t#mi#u#mi#v#mi#x#mi#z#mi#{#mi$O#mi(q#mi!]#mi!^#mi~OP$[OR#zO!Q#yO!S#{O!l#xO!p$[O#n<PO#o<QO#p<QO#q<QO(`VO(x#mi(y#mi~P&*uOn=}O!Q)|O'x)}O(x$}O(y%POP#miR#mi!S#mi!l#mi!p#mi#n#mi#o#mi#p#mi#q#mi(`#mi~P&*uO#S$dOP(_XR(_X[(_Xj(_Xn(_Xr(_X!Q(_X!S(_X!l(_X!p(_X#R(_X#n(_X#o(_X#p(_X#q(_X#r(_X#s(_X#t(_X#u(_X#v(_X#x(_X#z(_X#{(_X$O(_X'x(_X(`(_X(q(_X(x(_X(y(_X!](_X!^(_X~O$O$Pi!]$Pi!^$Pi~P#B]O$O!ri!^!ri~P$*bOg'[a!]'[a~P!0{O!^7dO~O!]'ca!^'ca~P#B]O!Y7eO~P#/XO!g#vO(q'nO!]'da!k'da~O!]/kO!k(}i~O!]/kO!g#vO!k(}i~Og$|q!]$|q#`$|q$O$|q~P!0{O!Y'fa!]'fa~P#/XO!g7lO~O!]/sO!Y)Oi~P#/XO!]/sO!Y)Oi~O!Y7oO~Oh%VOr7tO!l%dO(q'nO~Oj7vO!g#vO~Or7yO!g#vO(q'nO~O!Q)|O'x)}O(y%POn'ia(x'ia!]'ia#`'ia~Og'ia$O'ia~P&3vO!Q)|O'x)}On'ka(x'ka(y'ka!]'ka#`'ka~Og'ka$O'ka~P&4iO!Y7{O~Og%Oq!]%Oq#`%Oq$O%Oq~P!0{Og(^q!](^q~P!0{O#`7|Og(^q!](^q~P!0{Oa$oy!]$oy'y$oy'v$oy!Y$oy!k$oyv$oy!_$oy%i$oy!g$oy~P!:aO!g6hO~O!]5RO!_)Pa~O!_'^OP$TaR$Ta[$Taj$Tar$Ta!Q$Ta!S$Ta!]$Ta!l$Ta!p$Ta#R$Ta#n$Ta#o$Ta#p$Ta#q$Ta#r$Ta#s$Ta#t$Ta#u$Ta#v$Ta#x$Ta#z$Ta#{$Ta(`$Ta(q$Ta(x$Ta(y$Ta~O%i6|O~P&7ZO%^8QOa%[i!_%[i'y%[i!]%[i~Oa#cy!]#cy'y#cy'v#cy!Y#cy!k#cyv#cy!_#cy%i#cy!g#cy~P!:aO[8SO~Ob8UO(S+nO(UTO(XUO~O!]0}O!^)Wi~O`8YO~O(d(zO!]'oX!^'oX~O!]5kO!^)Ta~O!^8cO~P%:YO(n!sO~P$${O#[8dO~O!_1gO~O!_1gO%i8fO~On8iO!_1gO%i8fO~O[8nO!]'ra!^'ra~O!]1rO!^)Ui~O!k8rO~O!k8sO~O!k8vO~O!k8vO~P%[Oa8xO~O!g8yO~O!k8zO~O!](vi!^(vi~P#B]Oa%mO#`9SO'y%mO~O!](sy!k(sya(sy'y(sy~P!:aO!](hO!k(ry~O%i9VO~P&7ZO!_'^O%i9VO~O#k$|qP$|qR$|q[$|qa$|qj$|qr$|q!S$|q!]$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q'y$|q(`$|q(q$|q!k$|q!Y$|q'v$|q#`$|qv$|q!_$|q%i$|q!g$|q~P#/XO#k'iaP'iaR'ia['iaa'iaj'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia'y'ia(`'ia(q'ia!k'ia!Y'ia'v'iav'ia!_'ia%i'ia!g'ia~P&3vO#k'kaP'kaR'ka['kaa'kaj'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka'y'ka(`'ka(q'ka!k'ka!Y'ka'v'kav'ka!_'ka%i'ka!g'ka~P&4iO#k%OqP%OqR%Oq[%Oqa%Oqj%Oqr%Oq!S%Oq!]%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq'y%Oq(`%Oq(q%Oq!k%Oq!Y%Oq'v%Oq#`%Oqv%Oq!_%Oq%i%Oq!g%Oq~P#/XO!]'Xi!k'Xi~P!:aO$O#cq!]#cq!^#cq~P#B]O(x$}OP%aaR%aa[%aaj%aar%aa!S%aa!l%aa!p%aa#R%aa#n%aa#o%aa#p%aa#q%aa#r%aa#s%aa#t%aa#u%aa#v%aa#x%aa#z%aa#{%aa$O%aa(`%aa(q%aa!]%aa!^%aa~On%aa!Q%aa'x%aa(y%aa~P&HnO(y%POP%caR%ca[%caj%car%ca!S%ca!l%ca!p%ca#R%ca#n%ca#o%ca#p%ca#q%ca#r%ca#s%ca#t%ca#u%ca#v%ca#x%ca#z%ca#{%ca$O%ca(`%ca(q%ca!]%ca!^%ca~On%ca!Q%ca'x%ca(x%ca~P&JuOn=}O!Q)|O'x)}O(y%PO~P&HnOn=}O!Q)|O'x)}O(x$}O~P&JuOR0cO!Q0cO!S0dO#S$dOP}a[}aj}an}ar}a!l}a!p}a#R}a#n}a#o}a#p}a#q}a#r}a#s}a#t}a#u}a#v}a#x}a#z}a#{}a$O}a'x}a(`}a(q}a(x}a(y}a!]}a!^}a~O!Q)|O'x)}OP$saR$sa[$saj$san$sar$sa!S$sa!l$sa!p$sa#R$sa#n$sa#o$sa#p$sa#q$sa#r$sa#s$sa#t$sa#u$sa#v$sa#x$sa#z$sa#{$sa$O$sa(`$sa(q$sa(x$sa(y$sa!]$sa!^$sa~O!Q)|O'x)}OP$uaR$ua[$uaj$uan$uar$ua!S$ua!l$ua!p$ua#R$ua#n$ua#o$ua#p$ua#q$ua#r$ua#s$ua#t$ua#u$ua#v$ua#x$ua#z$ua#{$ua$O$ua(`$ua(q$ua(x$ua(y$ua!]$ua!^$ua~On=}O!Q)|O'x)}O(x$}O(y%PO~OP%TaR%Ta[%Taj%Tar%Ta!S%Ta!l%Ta!p%Ta#R%Ta#n%Ta#o%Ta#p%Ta#q%Ta#r%Ta#s%Ta#t%Ta#u%Ta#v%Ta#x%Ta#z%Ta#{%Ta$O%Ta(`%Ta(q%Ta!]%Ta!^%Ta~P'%zO$O$mq!]$mq!^$mq~P#B]O$O$oq!]$oq!^$oq~P#B]O!^9dO~O$O9eO~P!0{O!g#vO!]'di!k'di~O!g#vO(q'nO!]'di!k'di~O!]/kO!k(}q~O!Y'fi!]'fi~P#/XO!]/sO!Y)Oq~Or9lO!g#vO(q'nO~O[9nO!Y9mO~P#/XO!Y9mO~Oj9tO!g#vO~Og(^y!](^y~P!0{O!]'ma!_'ma~P#/XOa%[q!_%[q'y%[q!]%[q~P#/XO[9yO~O!]0}O!^)Wq~O#`9}O!]'oa!^'oa~O!]5kO!^)Ti~P#B]O!S:PO~O!_1gO%i:SO~O(UTO(XUO(d:XO~O!]1rO!^)Uq~O!k:[O~O!k:]O~O!k:^O~O!k:^O~P%[O#`:aO!]#hy!^#hy~O!]#hy!^#hy~P#B]O%i:fO~P&7ZO!_'^O%i:fO~O$O#|y!]#|y!^#|y~P#B]OP$|iR$|i[$|ij$|ir$|i!S$|i!l$|i!p$|i#R$|i#n$|i#o$|i#p$|i#q$|i#r$|i#s$|i#t$|i#u$|i#v$|i#x$|i#z$|i#{$|i$O$|i(`$|i(q$|i!]$|i!^$|i~P'%zO!Q)|O'x)}O(y%POP'haR'ha['haj'han'har'ha!S'ha!l'ha!p'ha#R'ha#n'ha#o'ha#p'ha#q'ha#r'ha#s'ha#t'ha#u'ha#v'ha#x'ha#z'ha#{'ha$O'ha(`'ha(q'ha(x'ha!]'ha!^'ha~O!Q)|O'x)}OP'jaR'ja['jaj'jan'jar'ja!S'ja!l'ja!p'ja#R'ja#n'ja#o'ja#p'ja#q'ja#r'ja#s'ja#t'ja#u'ja#v'ja#x'ja#z'ja#{'ja$O'ja(`'ja(q'ja(x'ja(y'ja!]'ja!^'ja~O(x$}OP%aiR%ai[%aij%ain%air%ai!Q%ai!S%ai!l%ai!p%ai#R%ai#n%ai#o%ai#p%ai#q%ai#r%ai#s%ai#t%ai#u%ai#v%ai#x%ai#z%ai#{%ai$O%ai'x%ai(`%ai(q%ai(y%ai!]%ai!^%ai~O(y%POP%ciR%ci[%cij%cin%cir%ci!Q%ci!S%ci!l%ci!p%ci#R%ci#n%ci#o%ci#p%ci#q%ci#r%ci#s%ci#t%ci#u%ci#v%ci#x%ci#z%ci#{%ci$O%ci'x%ci(`%ci(q%ci(x%ci!]%ci!^%ci~O$O$oy!]$oy!^$oy~P#B]O$O#cy!]#cy!^#cy~P#B]O!g#vO!]'dq!k'dq~O!]/kO!k(}y~O!Y'fq!]'fq~P#/XOr:pO!g#vO(q'nO~O[:tO!Y:sO~P#/XO!Y:sO~Og(^!R!](^!R~P!0{Oa%[y!_%[y'y%[y!]%[y~P#/XO!]0}O!^)Wy~O!]5kO!^)Tq~O(S:zO~O!_1gO%i:}O~O!k;QO~O%i;VO~P&7ZOP$|qR$|q[$|qj$|qr$|q!S$|q!l$|q!p$|q#R$|q#n$|q#o$|q#p$|q#q$|q#r$|q#s$|q#t$|q#u$|q#v$|q#x$|q#z$|q#{$|q$O$|q(`$|q(q$|q!]$|q!^$|q~P'%zO!Q)|O'x)}O(y%POP'iaR'ia['iaj'ian'iar'ia!S'ia!l'ia!p'ia#R'ia#n'ia#o'ia#p'ia#q'ia#r'ia#s'ia#t'ia#u'ia#v'ia#x'ia#z'ia#{'ia$O'ia(`'ia(q'ia(x'ia!]'ia!^'ia~O!Q)|O'x)}OP'kaR'ka['kaj'kan'kar'ka!S'ka!l'ka!p'ka#R'ka#n'ka#o'ka#p'ka#q'ka#r'ka#s'ka#t'ka#u'ka#v'ka#x'ka#z'ka#{'ka$O'ka(`'ka(q'ka(x'ka(y'ka!]'ka!^'ka~OP%OqR%Oq[%Oqj%Oqr%Oq!S%Oq!l%Oq!p%Oq#R%Oq#n%Oq#o%Oq#p%Oq#q%Oq#r%Oq#s%Oq#t%Oq#u%Oq#v%Oq#x%Oq#z%Oq#{%Oq$O%Oq(`%Oq(q%Oq!]%Oq!^%Oq~P'%zOg%e!Z!]%e!Z#`%e!Z$O%e!Z~P!0{O!Y;ZO~P#/XOr;[O!g#vO(q'nO~O[;^O!Y;ZO~P#/XO!]'oq!^'oq~P#B]O!]#h!Z!^#h!Z~P#B]O#k%e!ZP%e!ZR%e!Z[%e!Za%e!Zj%e!Zr%e!Z!S%e!Z!]%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z'y%e!Z(`%e!Z(q%e!Z!k%e!Z!Y%e!Z'v%e!Z#`%e!Zv%e!Z!_%e!Z%i%e!Z!g%e!Z~P#/XOr;fO!g#vO(q'nO~O!Y;gO~P#/XOr;nO!g#vO(q'nO~O!Y;oO~P#/XOP%e!ZR%e!Z[%e!Zj%e!Zr%e!Z!S%e!Z!l%e!Z!p%e!Z#R%e!Z#n%e!Z#o%e!Z#p%e!Z#q%e!Z#r%e!Z#s%e!Z#t%e!Z#u%e!Z#v%e!Z#x%e!Z#z%e!Z#{%e!Z$O%e!Z(`%e!Z(q%e!Z!]%e!Z!^%e!Z~P'%zOr;rO!g#vO(q'nO~Ov(eX~P1qO!Q%qO~P!)PO(T!lO~P!)PO!YfX!]fX#`fX~P%0kOP]XR]X[]Xj]Xr]X!Q]X!S]X!]]X!]fX!l]X!p]X#R]X#S]X#`]X#`fX#kfX#n]X#o]X#p]X#q]X#r]X#s]X#t]X#u]X#v]X#x]X#z]X#{]X$Q]X(`]X(q]X(x]X(y]X~O!gfX!k]X!kfX(qfX~P'JsOP;vOQ;vOSfOd=rOe!iOpkOr;vOskOtkOzkO|;vO!O;vO!SWO!WkO!XkO!_XO!i;yO!lZO!o;vO!p;vO!q;vO!s;zO!u;}O!x!hO$W!kO$n=pO(S)ZO(UTO(XUO(`VO(n[O~O!]<ZO!^$qa~Oh%VOp%WOr%XOs$tOt$tOz%YO|%ZO!O<fO!S${O!_$|O!i=wO!l$xO#j<lO$W%_O$t<hO$v<jO$y%`O(S(tO(UTO(XUO(`$uO(x$}O(y%PO~Ol)bO~P( iOr!eX(q!eX~P# }Or(iX(q(iX~P#!pO!^]X!^fX~P'JsO!YfX!Y$zX!]fX!]$zX#`fX~P!/wO#k<OO~O!g#vO#k<OO~O#`<`O~Oj<SO~O#`<pO!](vX!^(vX~O#`<`O!](tX!^(tX~O#k<qO~Og<sO~P!0{O#k<yO~O#k<zO~O!g#vO#k<{O~O!g#vO#k<qO~O$O<|O~P#B]O#k<}O~O#k=OO~O#k=TO~O#k=UO~O#k=VO~O#k=WO~O$O=XO~P!0{O$O=YO~P!0{Ok#S#T#U#W#X#[#i#j#u$n$t$v$y%]%^%h%i%j%q%s%v%w%y%{~'}T#o!X'{(T#ps#n#qr!Q'|$]'|(S$_(d~",
      goto: "$8g)[PPPPPP)]PP)`P)qP+R/WPPPP6bPP6xPP<pPPP@dP@zP@zPPP@zPCSP@zP@zP@zPCWPC]PCzPHtPPPHxPPPPHxK{PPPLRLsPHxPHxPP! RHxPPPHxPHxP!#YHxP!&p!'u!(OP!(r!(v!(r!,TPPPPPPP!,t!'uPP!-U!.vP!2SHxHx!2X!5e!:R!:R!>QPPP!>YHxPPPPPPPPP!AiP!BvPPHx!DXPHxPHxHxHxHxHxPHx!EkP!HuP!K{P!LP!LZ!L_!L_P!HrP!Lc!LcP# iP# mHxPHx# s#$xCW@zP@zP@z@zP#&V@z@z#(i@z#+a@z#-m@z@z#.]#0q#0q#0v#1P#0q#1[PP#0qP@z#1t@z#5s@z@z6bPPP#9xPPP#:c#:cP#:cP#:y#:cPP#;PP#:vP#:v#;d#:v#<O#<U#<X)`#<[)`P#<c#<c#<cP)`P)`P)`P)`PP)`P#<i#<lP#<l)`P#<pP#<sP)`P)`P)`P)`P)`P)`)`PP#<y#=P#=[#=b#=h#=n#=t#>S#>Y#>d#>j#>t#>z#?[#?b#@S#@f#@l#@r#AQ#Ag#C[#Cj#Cq#E]#Ek#G]#Gk#Gq#Gw#G}#HX#H_#He#Ho#IR#IXPPPPPPPPPPP#I_PPPPPPP#JS#MZ#Ns#Nz$ SPPP$&nP$&w$)p$0Z$0^$0a$1`$1c$1j$1rP$1x$1{P$2i$2m$3e$4s$4x$5`PP$5e$5k$5o$5r$5v$5z$6v$7_$7v$7z$7}$8Q$8W$8Z$8_$8cR!|RoqOXst!Z#d%l&p&r&s&u,n,s2S2VY!vQ'^-`1g5qQ%svQ%{yQ&S|Q&h!VS'U!e-WQ'd!iS'j!r!yU*h$|*X*lQ+l%|Q+y&UQ,_&bQ-^']Q-h'eQ-p'kQ0U*nQ1q,`R<m;z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9SS#q];w!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU*{%[<e<fQ+q&OQ,a&eQ,h&mQ0r+dQ0w+fQ1S+rQ1y,fQ3W.bQ5V0vQ5]0}Q6Q1rQ7O3[Q8U5^R9Y7Q'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s!S!nQ!r!v!y!z$|'U']'^'j'k'l*h*l*n*o-W-^-`-p0U0X1g5q5s%[$ti#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q&V|Q'S!eS'Y%h-ZQ+q&OQ,a&eQ0f+OQ1S+rQ1X+xQ1x,eQ1y,fQ5]0}Q5f1ZQ6Q1rQ6T1tQ6U1wQ8U5^Q8X5cQ8q6WQ9|8YQ:Y8nR<o*XrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR,c&i&z^OPXYstuvwz!Z!`!g!j!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=r=s[#]WZ#W#Z'V(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ%vxQ%zyS&P|&UQ&]!TQ'a!hQ'c!iQ(o#sS+k%{%|Q+o&OQ,Y&`Q,^&bS-g'd'eQ.d(pQ0{+lQ1R+rQ1T+sQ1W+wQ1l,ZS1p,_,`Q2t-hQ5[0}Q5`1QQ5e1YQ6P1qQ8T5^Q8W5bQ9x8SR:w9y!U$zi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y!^%xy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pQ+e%vQ,O&YQ,R&ZQ,]&bQ.c(oQ1k,YU1o,^,_,`Q3].dQ5z1lS6O1p1qQ8m6P#f=t#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o=u<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YW%Ti%V*v=pS&Y!Q&gQ&Z!RQ&[!SQ+S%cR+|&W%]%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}T)x$u)yV*{%[<e<fW'Y!e%h*X-ZS({#y#zQ+`%qQ+v&RS.](k(lQ1b,SQ4x0cR8^5k'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s$i$^c#Y#e%p%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.w.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gT#TV#U'RkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ'W!eR2i-W!W!nQ!e!r!v!y!z$|'U']'^'j'k'l*X*h*l*n*o-W-^-`-p0U0X1g5q5sR1d,UnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&w!^Q't!xS(q#u<OQ+i%yQ,W&]Q,X&_Q-e'bQ-r'mS.m(v<qS0k+U<{Q0y+jQ1f,VQ2Z,uQ2],vQ2e-RQ2r-fQ2u-jS5P0l=VQ5W0zS5Z0|=WQ6j2gQ6n2sQ6s2zQ8R5XQ8}6lQ9O6oQ9R6tR:`8z$d$]c#Y#e%r%t(Q(W(r(w)P)Q)R)S)T)U)V)W)X)Y)[)^)`)e)o+a+u-U-s-x-}.P.n.q.u.x.y/]0j2c2f2v2}3c3h3i3j3k3l3m3n3o3p3q3r3s3t3w3x4P5O5Y6k6q6v7V7W7a7b8`8|9Q9[9b9c:c:y;R;x=gS(m#p'gQ(}#zS+_%p.wS.^(l(nR3U._'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS#q];wQ&r!XQ&s!YQ&u![Q&v!]R2R,qQ'_!hQ+b%vQ-c'aS.`(o+eQ2p-bW3Y.c.d0q0sQ6m2qW6z3V3X3]5TU9U6{6}7PU:e9W9X9ZS;T:d:gQ;b;UR;j;cU!wQ'^-`T5o1g5q!Q_OXZ`st!V!Z#d#h%d%l&g&i&p&r&s&u(h,n,s.V2S2V]!pQ!r'^-`1g5qT#q];w%^{OPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS({#y#zS.](k(l!s=^$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sU$fd)],hS(n#p'gU*s%R(u3vU0e*z.i7]Q5T0rQ6{3WQ9X7OR:g9Ym!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sQ'r!uS(d#g1|S-n'i'uQ/n*ZQ/{*gQ2|-qQ4]/oQ4i/}Q4j0OQ4o0WQ7h4WS7s4k4mS7w4p4rQ9g7iQ9k7oQ9p7tQ9u7yS:o9l9mS;Y:p:sS;e;Z;[S;m;f;gS;q;n;oR;t;rQ#wbQ'q!uS(c#g1|S(e#m+TQ+V%eQ+g%wQ+m%}U-m'i'r'uQ.R(dQ/m*ZQ/|*gQ0P*iQ0x+hQ1m,[S2y-n-qQ3R.ZS4[/n/oQ4e/yS4h/{0WQ4l0QQ5|1nQ6u2|Q7g4WQ7k4]U7r4i4o4rQ7u4nQ8k5}S9f7h7iQ9j7oQ9r7wQ9s7xQ:V8lQ:m9gS:n9k9mQ:v9uQ;P:WS;X:o:sS;d;Y;ZS;l;e;gS;p;m;oQ;s;qQ;u;tQ=a=[Q=l=eR=m=fV!wQ'^-`%^aOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SS#wz!j!r=Z$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=a=r%^bOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SQ%ej!^%wy!i!u%z%{%|'T'c'd'e'i's*g+k+l-T-g-h-o/{0O0{2m2t2{4i4j4m7s9pS%}z!jQ+h%xQ,[&bW1n,],^,_,`U5}1o1p1qS8l6O6PQ:W8m!r=[$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ=e=qR=f=r%QeOPXYstuvw!Z!`!g!o#S#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9SY#bWZ#W#Z(R!b%im#h#i#l$x%d%g([(f(g(h*W*[*_+W+X+Z,j-Q.O.U.V.W.Y/h/k2[3S3T4X6h6yQ,i&m!p=]$Z$n)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sR=`'VU'Z!e%h*XR2k-Z%SdOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y,k,n,s-d-l-z.Q.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3d4q5y6Z6[6_6r8i8x9S!r)]$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sQ,h&mQ0r+dQ3W.bQ7O3[R9Y7Q!b$Tc#Y%p(Q(W(r(w)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!P<U)[)o-U.w2c2f3h3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!f$Vc#Y%p(Q(W(r(w)U)V)X)Y)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;x!T<W)[)o-U.w2c2f3h3n3o3q3r3w4P6k7W7a7b8`8|9[9b9c:y;R=g!^$Zc#Y%p(Q(W(r(w)^)e+u-s-x-}.P.n.q/]0j2v2}3c3s5O5Y6q6v7V9Q:c;xQ4V/fz=s)[)o-U.w2c2f3h3w4P6k7W7a7b8`8|9[9b9c:y;R=gQ=x=zR=y={'QkOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sS$oh$pR3|/P'XgOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$kf$qQ$ifS)h$l)lR)t$qT$jf$qT)j$l)l'XhOPWXYZhstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$Z$_$a$e$n$p%l%s&Q&i&l&m&p&r&s&u&y'R'V'`'p(R(T(Z(b(v(x(|)q){*f+U+Y+d,k,n,s-P-S-d-l-z.Q.b.o.v/P/Q/i0V0d0l0|1j1z1{1}2P2S2V2X2h2x3O3[3d3{4q5m5y6Z6[6_6i6r7Q8i8x9S9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=sT$oh$pQ$rhR)s$p%^jOPWXYZstuvw!Z!`!g!o#S#W#Z#d#o#u#x#{$O$P$Q$R$S$T$U$V$W$X$_$a$e%l%s&Q&i&l&m&p&r&s&u&y'R'`'p(R(T(Z(b(v(x(|){*f+U+Y+d,k,n,s-d-l-z.Q.b.o.v/i0V0d0l0|1j1z1{1}2P2S2V2X2x3O3[3d4q5y6Z6[6_6r7Q8i8x9S!s=q$Z$n'V)q-P-S/Q2h3{5m6i9}:a;v;y;z;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<]<`<m<p<q<s<{<|=V=W=s#glOPXZst!Z!`!o#S#d#o#{$n%l&i&l&m&p&r&s&u&y'R'`(|)q*f+Y+d,k,n,s-d.b/Q/i0V0d1j1z1{1}2P2S2V2X3[3{4q5y6Z6[6_7Q8i8x!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}Q+P%`Q/^)|o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!U$yi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yQ*`$zU*i$|*X*lQ+Q%aQ0Q*j#f=c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n=d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YQ=h=tQ=i=uQ=j=vR=k=w!U%Ri$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y#f(u#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}o3v<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=YnoOXst!Z#d%l&p&r&s&u,n,s2S2VS*c${*WQ,|&|Q,}'OR4`/s%[%Si#v$b$c$d$x${%O%Q%]%^%b)w*P*R*T*W*^*d*t*u+c+f+},Q.a.z/_/h/r/s/u0Y0[0g0h0i1^1a1i3Z4U4V4a4f4w5R5U5x6|7l7v7|8Q8f9V9e9n9t:S:f:t:};V;^<^<_<a<b<c<d<g<h<i<j<k<l<t<u<v<w<y<z<}=O=P=Q=R=S=T=U=X=Y=p=x=y=|=}Q,P&ZQ1`,RQ5i1_R8]5jV*k$|*X*lU*k$|*X*lT5p1g5qS/y*f/iQ4n0VT7x4q:PQ+g%wQ0P*iQ0x+hQ1m,[Q5|1nQ8k5}Q:V8lR;P:W!U%Oi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=yx*P$v)c*Q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=oS0Y*q0Z#f<a#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<b<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!d<t(s)a*Y*b.e.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={`<u3u7X7[7`9]:h:k;kS=P.g3aT=Q7Z9`!U%Qi$d%O%Q%]%^%b*P*R*^*t*u.z/r0Y0[0g0h0i4V4w7|9e=p=x=y|*R$v)c*S*q+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=oS0[*r0]#f<c#v$b$c$x${)w*T*W*d+c+f+},Q.a/_/h/s/u1^1a1i3Z4U4a4f5R5U5x6|7l7v8Q8f9V9n9t:S:f:t:};V;^<a<c<g<i<k<t<v<y<}=P=R=T=X=|=}n<d<^<_<b<d<h<j<l<u<w<z=O=Q=S=U=Y!h<v(s)a*Y*b.f.g.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={d<w3u7Y7Z7`9]9^:h:i:k;kS=R.h3bT=S7[9arnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ&d!UR,k&mrnOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VR&d!UQ,T&[R1[+|snOXst!V!Z#d%l&g&p&r&s&u,n,s2S2VQ1h,YS5w1k1lU8e5u5v5zS:R8g8hS:{:Q:TQ;_:|R;i;`Q&k!VR,d&gR6T1tR:Y8nS&P|&UR1T+sQ&p!WR,n&qR,t&vT2T,s2VR,x&wQ,w&wR2^,xQ'w!{R-t'wSsOtQ#dXT%os#dQ#OTR'y#OQ#RUR'{#RQ)y$uR/Z)yQ#UVR(O#UQ#XWU(U#X(V-{Q(V#YR-{(WQ-X'WR2j-XQ.p(wS3e.p3fR3f.qQ-`'^R2n-`Y!rQ'^-`1g5qR'h!rQ.{)cR3z.{U#_W%g*WU(]#_(^-|Q(^#`R-|(XQ-['ZR2l-[t`OXst!V!Z#d%l&g&i&p&r&s&u,n,s2S2VS#hZ%dU#r`#h.VR.V(hQ(i#jQ.S(eW.[(i.S3P6wQ3P.TR6w3QQ)l$lR/R)lQ$phR)r$pQ$`cU)_$`-w<[Q-w;xR<[)oQ/l*ZW4Y/l4Z7j9hU4Z/m/n/oS7j4[4]R9h7k$e*O$v(s)a)c*Y*b*q*r*|*}+R.g.h.j.k.l/Y/b/d/f/q/v0^0_0p1]3^3_3`3u3y4S4^4_4c4s4u4{4|4}5h7R7S7T7U7Z7[7^7_7`7f7m7p7z7}8P9]9^9_9i9q9v9w:h:i:j:k:l:q:u;W;];h;k=b=n=o=z={Q/t*bU4b/t4d7nQ4d/vR7n4cS*l$|*XR0S*lx*Q$v)c*q*r+R/q0^0_3y4^4{4|4}7f7z9v:l=b=n=o!d.e(s)a*Y*b.g.h.l/Y/f/v0p1]3`4S4_4c5h7R7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/c*Q.e7Xa7X3u7Z7[7`9]:h:k;kQ0Z*qQ3a.gU4t0Z3a9`R9`7Z|*S$v)c*q*r+R/b/q0^0_3y4^4s4{4|4}7f7z9v:l=b=n=o!h.f(s)a*Y*b.g.h.l/Y/f/v0p1]3^3`4S4_4c5h7R7S7U7m7p7}8P9i9q9w:q:u;W;];h=z={U/e*S.f7Ye7Y3u7Z7[7`9]9^:h:i:k;kQ0]*rQ3b.hU4v0]3b9aR9a7[Q*w%UR0a*wQ5S0pR8O5SQ+[%jR0o+[Q5l1bS8_5l:OR:O8`Q,V&]R1e,VQ5q1gR8b5qQ1s,aS6R1s8oR8o6TQ1O+oW5_1O5a8V9zQ5a1RQ8V5`R9z8WQ+t&PR1U+tQ2V,sR6c2VYrOXst#dQ&t!ZQ+^%lQ,m&pQ,o&rQ,p&sQ,r&uQ2Q,nS2T,s2VR6b2SQ%npQ&x!_Q&{!aQ&}!bQ'P!cQ'o!uQ+]%kQ+i%yQ+{&VQ,c&kQ,z&zW-k'i'q'r'uQ-r'mQ0R*kQ0y+jS1v,d,gQ2_,yQ2`,|Q2a,}Q2u-jW2w-m-n-q-sQ5W0zQ5d1XQ5g1]Q5{1mQ6V1xQ6a2RU6p2v2y2|Q6s2zQ8R5XQ8Z5fQ8[5hQ8a5pQ8j5|Q8p6US9P6q6uQ9R6tQ9{8XQ:U8kQ:Z8qQ:b9QQ:x9|Q;O:VQ;S:cR;a;PQ%yyQ'b!iQ'm!uU+j%z%{%|Q-R'TU-f'c'd'eS-j'i'sQ/z*gS0z+k+lQ2g-TS2s-g-hQ2z-oS4g/{0OQ5X0{Q6l2mQ6o2tQ6t2{U7q4i4j4mQ9o7sR:r9pS$wi=pR*x%VU%Ui%V=pR0`*vQ$viS(s#v+fS)a$b$cQ)c$dQ*Y$xS*b${*WQ*q%OQ*r%QQ*|%]Q*}%^Q+R%bQ.g<aQ.h<cQ.j<gQ.k<iQ.l<kQ/Y)wQ/b*PQ/d*RQ/f*TQ/q*^S/v*d/hQ0^*tQ0_*ul0p+c,Q.a1a1i3Z5x6|8f9V:S:f:};VQ1]+}Q3^<tQ3_<vQ3`<yS3u<^<_Q3y.zS4S/_4UQ4^/rQ4_/sQ4c/uQ4s0YQ4u0[Q4{0gQ4|0hQ4}0iQ5h1^Q7R<}Q7S=PQ7T=RQ7U=TQ7Z<bQ7[<dQ7^<hQ7_<jQ7`<lQ7f4VQ7m4aQ7p4fQ7z4wQ7}5RQ8P5UQ9]<zQ9^<uQ9_<wQ9i7lQ9q7vQ9v7|Q9w8QQ:h=OQ:i=QQ:j=SQ:k=UQ:l9eQ:q9nQ:u9tQ;W=XQ;]:tQ;h;^Q;k=YQ=b=pQ=n=xQ=o=yQ=z=|R={=}Q*z%[Q.i<eR7]<fnpOXst!Z#d%l&p&r&s&u,n,s2S2VQ!fPS#fZ#oQ&z!`W'f!o*f0V4qQ'}#SQ)O#{Q)p$nS,g&i&lQ,l&mQ,y&yS-O'R/iQ-b'`Q.s(|Q/V)qQ0m+YQ0s+dQ2O,kQ2q-dQ3X.bQ4O/QQ4y0dQ5v1jQ6X1zQ6Y1{Q6^1}Q6`2PQ6e2XQ7P3[Q7c3{Q8h5yQ8t6ZQ8u6[Q8w6_Q9Z7QQ:T8iR:_8x#[cOPXZst!Z!`!o#d#o#{%l&i&l&m&p&r&s&u&y'R'`(|*f+Y+d,k,n,s-d.b/i0V0d1j1z1{1}2P2S2V2X3[4q5y6Z6[6_7Q8i8xQ#YWQ#eYQ%puQ%rvS%tw!gS(Q#W(TQ(W#ZQ(r#uQ(w#xQ)P$OQ)Q$PQ)R$QQ)S$RQ)T$SQ)U$TQ)V$UQ)W$VQ)X$WQ)Y$XQ)[$ZQ)^$_Q)`$aQ)e$eW)o$n)q/Q3{Q+a%sQ+u&QS-U'V2hQ-s'pS-x(R-zQ-}(ZQ.P(bQ.n(vQ.q(xQ.u;vQ.w;yQ.x;zQ.y;}Q/]){Q0j+UQ2c-PQ2f-SQ2v-lQ2}.QQ3c.oQ3h<OQ3i<PQ3j<QQ3k<RQ3l<SQ3m<TQ3n<UQ3o<VQ3p<WQ3q<XQ3r<YQ3s.vQ3t<]Q3w<`Q3x<mQ4P<ZQ5O0lQ5Y0|Q6k<pQ6q2xQ6v3OQ7V3dQ7W<qQ7a<sQ7b<{Q8`5mQ8|6iQ9Q6rQ9[<|Q9b=VQ9c=WQ:c9SQ:y9}Q;R:aQ;x#SR=g=sR#[WR'X!el!tQ!r!v!y!z'^'j'k'l-`-p1g5q5sS'T!e-WU*g$|*X*lS-T'U']S0O*h*nQ0W*oQ2m-^Q4m0UR4r0XR(y#xQ!fQT-_'^-`]!qQ!r'^-`1g5qQ#p]R'g;wR)d$dY!uQ'^-`1g5qQ'i!rS's!v!yS'u!z5sS-o'j'kQ-q'lR2{-pT#kZ%dS#jZ%dS%jm,jU(e#h#i#lS.T(f(gQ.X(hQ0n+ZQ3Q.UU3R.V.W.YS6x3S3TR9T6yd#^W#W#Z%g(R([*W+W.O/hr#gZm#h#i#l%d(f(g(h+Z.U.V.W.Y3S3T6yS*Z$x*_Q/o*[Q1|,jQ2d-QQ4W/kQ6g2[Q7i4XQ8{6hT=_'V+XV#aW%g*WU#`W%g*WS(S#W([U(X#Z+W/hS-V'V+XT-y(R.OV'[!e%h*XQ$lfR)v$qT)k$l)lR3}/PT*]$x*_T*e${*WQ0q+cQ1_,QQ3V.aQ5j1aQ5u1iQ6}3ZQ8g5xQ9W6|Q:Q8fQ:d9VQ:|:SQ;U:fQ;`:}R;c;VnqOXst!Z#d%l&p&r&s&u,n,s2S2VQ&j!VR,c&gtmOXst!U!V!Z#d%l&g&p&r&s&u,n,s2S2VR,j&mT%km,jR1c,SR,b&eQ&T|R+z&UR+p&OT&n!W&qT&o!W&qT2U,s2V",
      nodeNames: "\u26A0 ArithOp ArithOp ?. JSXStartTag LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > < TypeParamList in out const TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewTarget new NewExpression ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression TypeArgList CompareOp < declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression InstantiationExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast < ArrowFunction TypeParamList SequenceExpression InstantiationExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate asserts is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
      maxTerm: 379,
      context: trackNewline,
      nodeProps: [
        ["isolate", -8, 5, 6, 14, 37, 39, 51, 53, 55, ""],
        ["group", -26, 9, 17, 19, 68, 207, 211, 215, 216, 218, 221, 224, 234, 236, 242, 244, 246, 248, 251, 257, 263, 265, 267, 269, 271, 273, 274, "Statement", -34, 13, 14, 32, 35, 36, 42, 51, 54, 55, 57, 62, 70, 72, 76, 80, 82, 84, 85, 110, 111, 120, 121, 136, 139, 141, 142, 143, 144, 145, 147, 148, 167, 169, 171, "Expression", -23, 31, 33, 37, 41, 43, 45, 173, 175, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 201, 203, 205, 206, "Type", -3, 88, 103, 109, "ClassItem"],
        ["openedBy", 23, "<", 38, "InterpolationStart", 56, "[", 60, "{", 73, "(", 160, "JSXStartCloseTag"],
        ["closedBy", -2, 24, 168, ">", 40, "InterpolationEnd", 50, "]", 61, "}", 74, ")", 165, "JSXEndTag"]
      ],
      propSources: [jsHighlight],
      skippedNodes: [0, 5, 6, 277],
      repeatNodeCount: 37,
      tokenData: "$Fq07[R!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#:O!R![#<_![!]#I_!]!^#Jk!^!_#Ku!_!`$![!`!a$$v!a!b$*T!b!c$,r!c!}Er!}#O$-|#O#P$/W#P#Q$4o#Q#R$5y#R#SEr#S#T$7W#T#o$8b#o#p$<r#p#q$=h#q#r$>x#r#s$@U#s$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$I|Er$I|$I}$Dk$I}$JO$Dk$JO$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr(n%d_$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z07[+rq$i&j(Vp(Y!b'{0/lOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z07[.ST(W#S$i&j'|0/lO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c07[.n_$i&j(Vp(Y!b'|0/lOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)3p/x`$i&j!p),Q(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW1V`#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW2d_#v(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At3l_(U':f$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k(^4r_$i&j(Y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k&z5vX$i&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q&z6jT$d`$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c`6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y`7bO$d``7eP;=`<%l6y&z7kP;=`<%l5q(^7w]$d`$i&j(Y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!r8uZ(Y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p!r9oU$d`(Y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!r:UP;=`<%l8p(^:[P;=`<%l4k%9[:hh$i&j(Vp(Y!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__WS$i&j(Vp(Y!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]WS$i&j(Y!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXWS$i&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSWSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWWS(Y!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]WS$i&j(VpOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWWS(VpOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYWS(Vp(Y!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S%9[C}i$i&j(n%1l(Vp(Y!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr%9[EoP;=`<%lCr07[FRk$i&j(Vp(Y!b$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$i&j(Vp(Y!b$]#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv07[JPP;=`<%lEr(KWJ_`$i&j(Vp(Y!b#p(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWKl_$i&j$Q(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,#xLva(y+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KWNW`$i&j#z(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'At! c_(X';W$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b'l!!i_$i&j(VpOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b&z!#mX$i&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h`!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y`!$oP;=`<%l!$Y&z!$uP;=`<%l!#h'l!%R]$d`$i&j(VpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r!Q!&PZ(VpOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z!Q!&yU$d`(VpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r!Q!'`P;=`<%l!%z'l!'fP;=`<%l!!b/5|!'t_!l/.^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&U!)O_!k!Lf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z-!n!*[b$i&j(Vp(Y!b(T%&f#q(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW!+o`$i&j(Vp(Y!b#n(ChOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;x!,|`$i&j(Vp(Y!br+4YOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z,$U!.Z_!]+Jf$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!/ec$i&j(Vp(Y!b!Q.2^OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!0ya$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#%|!2Z_![!L^$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!3eg$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!5Vg$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!6wc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad!8_c$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[!9uf$i&j(Vp(Y!b#o(ChOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcxz!;Zz{#-}{!P!;Z!P!Q#/d!Q!^!;Z!^!_#(i!_!`#7S!`!a#8i!a!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z?O!;fb$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z>^!<w`$i&j(Y!b!X7`OY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eq!Q!^!<n!^!_!Gr!_!}!<n!}#O!KS#O#P!Dy#P#o!<n#o#p!Gr#p;'S!<n;'S;=`!L]<%lO!<n<z!>Q^$i&j!X7`OY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@c!_!}!=y!}#O!CW#O#P!Dy#P#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!?Td$i&j!X7`O!^&c!_#W&c#W#X!>|#X#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#k!>|#k#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&c7`!@hX!X7`OY!@cZ!P!@c!P!Q!AT!Q!}!@c!}#O!Ar#O#P!Bq#P;'S!@c;'S;=`!CQ<%lO!@c7`!AYW!X7`#W#X!AT#Z#[!AT#]#^!AT#a#b!AT#g#h!AT#i#j!AT#j#k!AT#m#n!AT7`!AuVOY!ArZ#O!Ar#O#P!B[#P#Q!@c#Q;'S!Ar;'S;=`!Bk<%lO!Ar7`!B_SOY!ArZ;'S!Ar;'S;=`!Bk<%lO!Ar7`!BnP;=`<%l!Ar7`!BtSOY!@cZ;'S!@c;'S;=`!CQ<%lO!@c7`!CTP;=`<%l!@c<z!C][$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#O!CW#O#P!DR#P#Q!=y#Q#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DWX$i&jOY!CWYZ&cZ!^!CW!^!_!Ar!_#o!CW#o#p!Ar#p;'S!CW;'S;=`!Ds<%lO!CW<z!DvP;=`<%l!CW<z!EOX$i&jOY!=yYZ&cZ!^!=y!^!_!@c!_#o!=y#o#p!@c#p;'S!=y;'S;=`!Ek<%lO!=y<z!EnP;=`<%l!=y>^!Ezl$i&j(Y!b!X7`OY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#W&}#W#X!Eq#X#Z&}#Z#[!Eq#[#]&}#]#^!Eq#^#a&}#a#b!Eq#b#g&}#g#h!Eq#h#i&}#i#j!Eq#j#k!Eq#k#m&}#m#n!Eq#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}8r!GyZ(Y!b!X7`OY!GrZw!Grwx!@cx!P!Gr!P!Q!Hl!Q!}!Gr!}#O!JU#O#P!Bq#P;'S!Gr;'S;=`!J|<%lO!Gr8r!Hse(Y!b!X7`OY'}Zw'}x#O'}#P#W'}#W#X!Hl#X#Z'}#Z#[!Hl#[#]'}#]#^!Hl#^#a'}#a#b!Hl#b#g'}#g#h!Hl#h#i'}#i#j!Hl#j#k!Hl#k#m'}#m#n!Hl#n;'S'};'S;=`(f<%lO'}8r!JZX(Y!bOY!JUZw!JUwx!Arx#O!JU#O#P!B[#P#Q!Gr#Q;'S!JU;'S;=`!Jv<%lO!JU8r!JyP;=`<%l!JU8r!KPP;=`<%l!Gr>^!KZ^$i&j(Y!bOY!KSYZ&cZw!KSwx!CWx!^!KS!^!_!JU!_#O!KS#O#P!DR#P#Q!<n#Q#o!KS#o#p!JU#p;'S!KS;'S;=`!LV<%lO!KS>^!LYP;=`<%l!KS>^!L`P;=`<%l!<n=l!Ll`$i&j(Vp!X7`OY!LcYZ&cZr!Lcrs!=ys!P!Lc!P!Q!Mn!Q!^!Lc!^!_# o!_!}!Lc!}#O#%P#O#P!Dy#P#o!Lc#o#p# o#p;'S!Lc;'S;=`#&Y<%lO!Lc=l!Mwl$i&j(Vp!X7`OY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#W(r#W#X!Mn#X#Z(r#Z#[!Mn#[#](r#]#^!Mn#^#a(r#a#b!Mn#b#g(r#g#h!Mn#h#i(r#i#j!Mn#j#k!Mn#k#m(r#m#n!Mn#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r8Q# vZ(Vp!X7`OY# oZr# ors!@cs!P# o!P!Q#!i!Q!}# o!}#O#$R#O#P!Bq#P;'S# o;'S;=`#$y<%lO# o8Q#!pe(Vp!X7`OY)rZr)rs#O)r#P#W)r#W#X#!i#X#Z)r#Z#[#!i#[#])r#]#^#!i#^#a)r#a#b#!i#b#g)r#g#h#!i#h#i)r#i#j#!i#j#k#!i#k#m)r#m#n#!i#n;'S)r;'S;=`*Z<%lO)r8Q#$WX(VpOY#$RZr#$Rrs!Ars#O#$R#O#P!B[#P#Q# o#Q;'S#$R;'S;=`#$s<%lO#$R8Q#$vP;=`<%l#$R8Q#$|P;=`<%l# o=l#%W^$i&j(VpOY#%PYZ&cZr#%Prs!CWs!^#%P!^!_#$R!_#O#%P#O#P!DR#P#Q!Lc#Q#o#%P#o#p#$R#p;'S#%P;'S;=`#&S<%lO#%P=l#&VP;=`<%l#%P=l#&]P;=`<%l!Lc?O#&kn$i&j(Vp(Y!b!X7`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#W%Z#W#X#&`#X#Z%Z#Z#[#&`#[#]%Z#]#^#&`#^#a%Z#a#b#&`#b#g%Z#g#h#&`#h#i%Z#i#j#&`#j#k#&`#k#m%Z#m#n#&`#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z9d#(r](Vp(Y!b!X7`OY#(iZr#(irs!Grsw#(iwx# ox!P#(i!P!Q#)k!Q!}#(i!}#O#+`#O#P!Bq#P;'S#(i;'S;=`#,`<%lO#(i9d#)th(Vp(Y!b!X7`OY*gZr*grs'}sw*gwx)rx#O*g#P#W*g#W#X#)k#X#Z*g#Z#[#)k#[#]*g#]#^#)k#^#a*g#a#b#)k#b#g*g#g#h#)k#h#i*g#i#j#)k#j#k#)k#k#m*g#m#n#)k#n;'S*g;'S;=`+Z<%lO*g9d#+gZ(Vp(Y!bOY#+`Zr#+`rs!JUsw#+`wx#$Rx#O#+`#O#P!B[#P#Q#(i#Q;'S#+`;'S;=`#,Y<%lO#+`9d#,]P;=`<%l#+`9d#,cP;=`<%l#(i?O#,o`$i&j(Vp(Y!bOY#,fYZ&cZr#,frs!KSsw#,fwx#%Px!^#,f!^!_#+`!_#O#,f#O#P!DR#P#Q!;Z#Q#o#,f#o#p#+`#p;'S#,f;'S;=`#-q<%lO#,f?O#-tP;=`<%l#,f?O#-zP;=`<%l!;Z07[#.[b$i&j(Vp(Y!b'}0/l!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z07[#/o_$i&j(Vp(Y!bT0/lOY#/dYZ&cZr#/drs#0nsw#/dwx#4Ox!^#/d!^!_#5}!_#O#/d#O#P#1p#P#o#/d#o#p#5}#p;'S#/d;'S;=`#6|<%lO#/d06j#0w]$i&j(Y!bT0/lOY#0nYZ&cZw#0nwx#1px!^#0n!^!_#3R!_#O#0n#O#P#1p#P#o#0n#o#p#3R#p;'S#0n;'S;=`#3x<%lO#0n05W#1wX$i&jT0/lOY#1pYZ&cZ!^#1p!^!_#2d!_#o#1p#o#p#2d#p;'S#1p;'S;=`#2{<%lO#1p0/l#2iST0/lOY#2dZ;'S#2d;'S;=`#2u<%lO#2d0/l#2xP;=`<%l#2d05W#3OP;=`<%l#1p01O#3YW(Y!bT0/lOY#3RZw#3Rwx#2dx#O#3R#O#P#2d#P;'S#3R;'S;=`#3r<%lO#3R01O#3uP;=`<%l#3R06j#3{P;=`<%l#0n05x#4X]$i&j(VpT0/lOY#4OYZ&cZr#4Ors#1ps!^#4O!^!_#5Q!_#O#4O#O#P#1p#P#o#4O#o#p#5Q#p;'S#4O;'S;=`#5w<%lO#4O00^#5XW(VpT0/lOY#5QZr#5Qrs#2ds#O#5Q#O#P#2d#P;'S#5Q;'S;=`#5q<%lO#5Q00^#5tP;=`<%l#5Q05x#5zP;=`<%l#4O01p#6WY(Vp(Y!bT0/lOY#5}Zr#5}rs#3Rsw#5}wx#5Qx#O#5}#O#P#2d#P;'S#5};'S;=`#6v<%lO#5}01p#6yP;=`<%l#5}07[#7PP;=`<%l#/d)3h#7ab$i&j$Q(Ch(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;ZAt#8vb$Z#t$i&j(Vp(Y!b!X7`OY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Lcx!P!;Z!P!Q#&`!Q!^!;Z!^!_#(i!_!}!;Z!}#O#,f#O#P!Dy#P#o!;Z#o#p#(i#p;'S!;Z;'S;=`#-w<%lO!;Z'Ad#:Zp$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#U%Z#U#V#?i#V#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#d#Bq#d#l%Z#l#m#Es#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#<jk$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#<_![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#<_#S#X%Z#X#Y!4|#Y#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#>j_$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#?rd$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#A]f$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#AQ!R!S#AQ!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#AQ#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Bzc$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Dbe$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#DV!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#DV#S#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#E|g$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'Ad#Gpi$i&j(Vp(Y!bs'9tOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#Ge![!^%Z!^!_*g!_!c%Z!c!i#Ge!i#O%Z#O#P&c#P#R%Z#R#S#Ge#S#T%Z#T#Z#Ge#Z#b%Z#b#c#>_#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x#Il_!g$b$i&j$O)Lv(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Jv_al$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f#LS^h#)`#R-<U(Vp(Y!b$n7`OY*gZr*grs'}sw*gwx)rx!P*g!P!Q#MO!Q!^*g!^!_#Mt!_!`$ f!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#MXX$k&j(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El#M}Z#r(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Np!`#O*g#P;'S*g;'S;=`+Z<%lO*g(El#NyX$Q(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g(El$ oX#s(Ch(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g*)x$!ga#`*!Y$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$#l!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(K[$#w_#k(Cl$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z*)x$%Vag!*r#s(Ch$f#|$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$&[!`!a$'f!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$&g_#s(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$'qa#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$(v!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$)R`#r(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(Kd$*`a(q(Ct$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!a%Z!a!b$+e!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$+p`$i&j#{(Ch(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`$,}_!|$Ip$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z04f$.X_!S0,v$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/]Z$i&jO!^$0O!^!_$0f!_#i$0O#i#j$0k#j#l$0O#l#m$2^#m#o$0O#o#p$0f#p;'S$0O;'S;=`$4i<%lO$0O(n$0VT_#S$i&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0kO_#S(n$0p[$i&jO!Q&c!Q![$1f![!^&c!_!c&c!c!i$1f!i#T&c#T#Z$1f#Z#o&c#o#p$3|#p;'S&c;'S;=`&w<%lO&c(n$1kZ$i&jO!Q&c!Q![$2^![!^&c!_!c&c!c!i$2^!i#T&c#T#Z$2^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2cZ$i&jO!Q&c!Q![$3U![!^&c!_!c&c!c!i$3U!i#T&c#T#Z$3U#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3ZZ$i&jO!Q&c!Q![$0O![!^&c!_!c&c!c!i$0O!i#T&c#T#Z$0O#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$4PR!Q![$4Y!c!i$4Y#T#Z$4Y#S$4]S!Q![$4Y!c!i$4Y#T#Z$4Y#q#r$0f(n$4lP;=`<%l$0O#1[$4z_!Y#)l$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(KW$6U`#x(Ch$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z+;p$7c_$i&j(Vp(Y!b(`+4QOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$8qk$i&j(Vp(Y!b(S,2j$_#t(d$I[OY%ZYZ&cZr%Zrs&}st%Ztu$8buw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$8b![!^%Z!^!_*g!_!c%Z!c!}$8b!}#O%Z#O#P&c#P#R%Z#R#S$8b#S#T%Z#T#o$8b#o#p*g#p$g%Z$g;'S$8b;'S;=`$<l<%lO$8b+d$:qk$i&j(Vp(Y!b$_#tOY%ZYZ&cZr%Zrs&}st%Ztu$:fuw%Zwx(rx}%Z}!O$:f!O!Q%Z!Q![$:f![!^%Z!^!_*g!_!c%Z!c!}$:f!}#O%Z#O#P&c#P#R%Z#R#S$:f#S#T%Z#T#o$:f#o#p*g#p$g%Z$g;'S$:f;'S;=`$<f<%lO$:f+d$<iP;=`<%l$:f07[$<oP;=`<%l$8b#Jf$<{X!_#Hb(Vp(Y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g,#x$=sa(x+JY$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+e#q;'S%Z;'S;=`+a<%lO%Z)>v$?V_!^(CdvBr$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z?O$@a_!q7`$i&j(Vp(Y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z07[$Aq|$i&j(Vp(Y!b'{0/l$]#t(S,2j(d$I[OX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$A`#BZ$ISEr$IS$I_$A`$I_$JTEr$JT$JU$A`$JU$KVEr$KV$KW$A`$KW&FUEr&FU&FV$A`&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$A`?HUOEr07[$D|k$i&j(Vp(Y!b'|0/l$]#t(S,2j(d$I[OY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
      tokenizers: [noSemicolon, noSemicolonType, operatorToken, jsx, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOx~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!U~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(b~~", 141, 339), new LocalTokenGroup("j~RQYZXz{^~^O(P~~aP!P!Qd~iO(Q~~", 25, 322)],
      topRules: { "Script": [0, 7], "SingleExpression": [1, 275], "SingleClassItem": [2, 276] },
      dialects: { jsx: 0, ts: 15098 },
      dynamicPrecedences: { "80": 1, "82": 1, "94": 1, "169": 1, "199": 1 },
      specialized: [{ term: 326, get: (value) => spec_identifier4[value] || -1 }, { term: 342, get: (value) => spec_word[value] || -1 }, { term: 95, get: (value) => spec_LessThan[value] || -1 }],
      tokenPrec: 15124
    });
  }
});

// ../../node_modules/@codemirror/lang-javascript/dist/index.js
var dist_exports5 = {};
__export(dist_exports5, {
  autoCloseTags: () => autoCloseTags,
  completionPath: () => completionPath,
  esLint: () => esLint,
  javascript: () => javascript,
  javascriptLanguage: () => javascriptLanguage,
  jsxLanguage: () => jsxLanguage,
  localCompletionSource: () => localCompletionSource2,
  scopeCompletionSource: () => scopeCompletionSource,
  snippets: () => snippets2,
  tsxLanguage: () => tsxLanguage,
  typescriptLanguage: () => typescriptLanguage,
  typescriptSnippets: () => typescriptSnippets
});
function defID(type7) {
  return (node, def) => {
    let id3 = node.node.getChild("VariableDefinition");
    if (id3)
      def(id3, type7);
    return true;
  };
}
function getScope2(doc2, node) {
  let cached = cache2.get(node);
  if (cached)
    return cached;
  let completions3 = [], top3 = true;
  function def(node2, type7) {
    let name2 = doc2.sliceString(node2.from, node2.to);
    completions3.push({ label: name2, type: type7 });
  }
  node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
    if (top3) {
      top3 = false;
    } else if (node2.name) {
      let gather = gatherCompletions2[node2.name];
      if (gather && gather(node2, def) || ScopeNodes2.has(node2.name))
        return false;
    } else if (node2.to - node2.from > 8192) {
      for (let c2 of getScope2(doc2, node2.node))
        completions3.push(c2);
      return false;
    }
  });
  cache2.set(node, completions3);
  return completions3;
}
function localCompletionSource2(context) {
  let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
  if (dontComplete2.indexOf(inner.name) > -1)
    return null;
  let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier3.test(context.state.sliceDoc(inner.from, inner.to));
  if (!isWord && !context.explicit)
    return null;
  let options = [];
  for (let pos = inner; pos; pos = pos.parent) {
    if (ScopeNodes2.has(pos.name))
      options = options.concat(getScope2(context.state.doc, pos));
  }
  return {
    options,
    from: isWord ? inner.from : context.pos,
    validFor: Identifier3
  };
}
function pathFor2(read, member, name2) {
  var _a2;
  let path = [];
  for (; ; ) {
    let obj = member.firstChild, prop;
    if ((obj === null || obj === void 0 ? void 0 : obj.name) == "VariableName") {
      path.push(read(obj));
      return { path: path.reverse(), name: name2 };
    } else if ((obj === null || obj === void 0 ? void 0 : obj.name) == "MemberExpression" && ((_a2 = prop = obj.lastChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "PropertyName") {
      path.push(read(prop));
      member = obj;
    } else {
      return null;
    }
  }
}
function completionPath(context) {
  let read = (node) => context.state.doc.sliceString(node.from, node.to);
  let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
  if (inner.name == "PropertyName") {
    return pathFor2(read, inner.parent, read(inner));
  } else if ((inner.name == "." || inner.name == "?.") && inner.parent.name == "MemberExpression") {
    return pathFor2(read, inner.parent, "");
  } else if (dontComplete2.indexOf(inner.name) > -1) {
    return null;
  } else if (inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier3.test(read(inner))) {
    return { path: [], name: read(inner) };
  } else if (inner.name == "MemberExpression") {
    return pathFor2(read, inner, "");
  } else {
    return context.explicit ? { path: [], name: "" } : null;
  }
}
function enumeratePropertyCompletions(obj, top3) {
  let options = [], seen = /* @__PURE__ */ new Set();
  for (let depth = 0; ; depth++) {
    for (let name2 of (Object.getOwnPropertyNames || Object.keys)(obj)) {
      if (!/^[a-zA-Z_$\xaa-\uffdc][\w$\xaa-\uffdc]*$/.test(name2) || seen.has(name2))
        continue;
      seen.add(name2);
      let value;
      try {
        value = obj[name2];
      } catch (_) {
        continue;
      }
      options.push({
        label: name2,
        type: typeof value == "function" ? /^[A-Z]/.test(name2) ? "class" : top3 ? "function" : "method" : top3 ? "variable" : "property",
        boost: -depth
      });
    }
    let next2 = Object.getPrototypeOf(obj);
    if (!next2)
      return options;
    obj = next2;
  }
}
function scopeCompletionSource(scope) {
  let cache4 = /* @__PURE__ */ new Map();
  return (context) => {
    let path = completionPath(context);
    if (!path)
      return null;
    let target = scope;
    for (let step of path.path) {
      target = target[step];
      if (!target)
        return null;
    }
    let options = cache4.get(target);
    if (!options)
      cache4.set(target, options = enumeratePropertyCompletions(target, !path.path.length));
    return {
      from: context.pos - path.name.length,
      options,
      validFor: Identifier3
    };
  };
}
function javascript(config2 = {}) {
  let lang = config2.jsx ? config2.typescript ? tsxLanguage : jsxLanguage : config2.typescript ? typescriptLanguage : javascriptLanguage;
  let completions3 = config2.typescript ? typescriptSnippets.concat(typescriptKeywords) : snippets2.concat(keywords3);
  return new LanguageSupport(lang, [
    javascriptLanguage.data.of({
      autocomplete: ifNotIn(dontComplete2, completeFromList(completions3))
    }),
    javascriptLanguage.data.of({
      autocomplete: localCompletionSource2
    }),
    config2.jsx ? autoCloseTags : []
  ]);
}
function findOpenTag(node) {
  for (; ; ) {
    if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
      return node;
    if (node.name == "JSXEscape" || !node.parent)
      return null;
    node = node.parent;
  }
}
function elementName(doc2, tree, max = doc2.length) {
  for (let ch2 = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch2; ch2 = ch2.nextSibling) {
    if (ch2.name == "JSXIdentifier" || ch2.name == "JSXBuiltin" || ch2.name == "JSXNamespacedName" || ch2.name == "JSXMemberExpression")
      return doc2.sliceString(ch2.from, Math.min(ch2.to, max));
  }
  return "";
}
function esLint(eslint, config2) {
  if (!config2) {
    config2 = {
      parserOptions: { ecmaVersion: 2019, sourceType: "module" },
      env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
      rules: {}
    };
    eslint.getRules().forEach((desc, name2) => {
      if (desc.meta.docs.recommended)
        config2.rules[name2] = 2;
    });
  }
  return (view) => {
    let { state } = view, found = [];
    for (let { from: from3, to } of javascriptLanguage.findRegions(state)) {
      let fromLine = state.doc.lineAt(from3), offset = { line: fromLine.number - 1, col: from3 - fromLine.from, pos: from3 };
      for (let d3 of eslint.verify(state.sliceDoc(from3, to), config2))
        found.push(translateDiagnostic(d3, state.doc, offset));
    }
    return found;
  };
}
function mapPos(line, col, doc2, offset) {
  return doc2.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
}
function translateDiagnostic(input, doc2, offset) {
  let start2 = mapPos(input.line, input.column, doc2, offset);
  let result = {
    from: start2,
    to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc2, offset) : start2,
    message: input.message,
    source: input.ruleId ? "eslint:" + input.ruleId : "eslint",
    severity: input.severity == 1 ? "warning" : "error"
  };
  if (input.fix) {
    let { range, text: text5 } = input.fix, from3 = range[0] + offset.pos - start2, to = range[1] + offset.pos - start2;
    result.actions = [{
      name: "fix",
      apply(view, start3) {
        view.dispatch({ changes: { from: start3 + from3, to: start3 + to, insert: text5 }, scrollIntoView: true });
      }
    }];
  }
  return result;
}
var snippets2, typescriptSnippets, cache2, ScopeNodes2, functionContext, gatherCompletions2, Identifier3, dontComplete2, javascriptLanguage, jsxSublanguage, typescriptLanguage, jsxLanguage, tsxLanguage, kwCompletion2, keywords3, typescriptKeywords, android2, autoCloseTags;
var init_dist17 = __esm({
  "../../node_modules/@codemirror/lang-javascript/dist/index.js"() {
    init_dist16();
    init_dist5();
    init_dist2();
    init_dist3();
    init_dist7();
    init_dist();
    snippets2 = [
      /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
        label: "function",
        detail: "definition",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
        label: "for",
        detail: "loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
        label: "for",
        detail: "of loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
        label: "do",
        detail: "loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
        label: "while",
        detail: "loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
        label: "try",
        detail: "/ catch block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
        label: "if",
        detail: "block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
        label: "if",
        detail: "/ else block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
        label: "class",
        detail: "definition",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
        label: "import",
        detail: "named",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
        label: "import",
        detail: "default",
        type: "keyword"
      })
    ];
    typescriptSnippets = /* @__PURE__ */ snippets2.concat([
      /* @__PURE__ */ snippetCompletion("interface ${name} {\n	${}\n}", {
        label: "interface",
        detail: "definition",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("type ${name} = ${type}", {
        label: "type",
        detail: "definition",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("enum ${name} {\n	${}\n}", {
        label: "enum",
        detail: "definition",
        type: "keyword"
      })
    ]);
    cache2 = /* @__PURE__ */ new NodeWeakMap();
    ScopeNodes2 = /* @__PURE__ */ new Set([
      "Script",
      "Block",
      "FunctionExpression",
      "FunctionDeclaration",
      "ArrowFunction",
      "MethodDeclaration",
      "ForStatement"
    ]);
    functionContext = ["FunctionDeclaration"];
    gatherCompletions2 = {
      FunctionDeclaration: /* @__PURE__ */ defID("function"),
      ClassDeclaration: /* @__PURE__ */ defID("class"),
      ClassExpression: () => true,
      EnumDeclaration: /* @__PURE__ */ defID("constant"),
      TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
      NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
      VariableDefinition(node, def) {
        if (!node.matchContext(functionContext))
          def(node, "variable");
      },
      TypeDefinition(node, def) {
        def(node, "type");
      },
      __proto__: null
    };
    Identifier3 = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
    dontComplete2 = [
      "TemplateString",
      "String",
      "RegExp",
      "LineComment",
      "BlockComment",
      "VariableDefinition",
      "TypeDefinition",
      "Label",
      "PropertyDefinition",
      "PropertyName",
      "PrivatePropertyDefinition",
      "PrivatePropertyName",
      "JSXText",
      "JSXAttributeValue",
      "JSXOpenTag",
      "JSXCloseTag",
      "JSXSelfClosingTag",
      ".",
      "?."
    ];
    javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "javascript",
      parser: /* @__PURE__ */ parser6.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
            TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
            LabeledStatement: flatIndent,
            SwitchBody: (context) => {
              let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
              return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
            },
            Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            ArrowFunction: (cx2) => cx2.baseIndent + cx2.unit,
            "TemplateString BlockComment": () => null,
            "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^{/ }),
            JSXElement(context) {
              let closed = /^\s*<\//.test(context.textAfter);
              return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
            },
            JSXEscape(context) {
              let closed = /\s*\}/.test(context.textAfter);
              return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
            },
            "JSXOpenTag JSXSelfClosingTag"(context) {
              return context.column(context.node.from) + context.unit;
            }
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          })
        ]
      }),
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
      }
    });
    jsxSublanguage = {
      test: (node) => /^JSX/.test(node.name),
      facet: /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
    };
    typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" }, "typescript");
    jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
      dialect: "jsx",
      props: [/* @__PURE__ */ sublanguageProp.add((n) => n.isTop ? [jsxSublanguage] : void 0)]
    });
    tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
      dialect: "jsx ts",
      props: [/* @__PURE__ */ sublanguageProp.add((n) => n.isTop ? [jsxSublanguage] : void 0)]
    }, "typescript");
    kwCompletion2 = (name2) => ({ label: name2, type: "keyword" });
    keywords3 = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kwCompletion2);
    typescriptKeywords = /* @__PURE__ */ keywords3.concat(/* @__PURE__ */ ["declare", "implements", "private", "protected", "public"].map(kwCompletion2));
    android2 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
    autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text5, defaultInsert) => {
      if ((android2 ? view.composing : view.compositionStarted) || view.state.readOnly || from3 != to || text5 != ">" && text5 != "/" || !javascriptLanguage.isActiveAt(view.state, from3, -1))
        return false;
      let base5 = defaultInsert(), { state } = base5;
      let closeTags = state.changeByRange((range) => {
        var _a2;
        let { head } = range, around = syntaxTree(state).resolveInner(head - 1, -1), name2;
        if (around.name == "JSXStartTag")
          around = around.parent;
        if (state.doc.sliceString(head - 1, head) != text5 || around.name == "JSXAttributeValue" && around.to > head) ;
        else if (text5 == ">" && around.name == "JSXFragmentTag") {
          return { range, changes: { from: head, insert: `</>` } };
        } else if (text5 == "/" && around.name == "JSXStartCloseTag") {
          let empty2 = around.parent, base6 = empty2.parent;
          if (base6 && empty2.from == head - 2 && ((name2 = elementName(state.doc, base6.firstChild, head)) || ((_a2 = base6.firstChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "JSXFragmentTag")) {
            let insert2 = `${name2}>`;
            return { range: EditorSelection.cursor(head + insert2.length, -1), changes: { from: head, insert: insert2 } };
          }
        } else if (text5 == ">") {
          let openTag = findOpenTag(around);
          if (openTag && openTag.name == "JSXOpenTag" && !/^\/?>|^<\//.test(state.doc.sliceString(head, head + 2)) && (name2 = elementName(state.doc, openTag, head)))
            return { range, changes: { from: head, insert: `</${name2}>` } };
        }
        return { range };
      });
      if (closeTags.changes.empty)
        return false;
      view.dispatch([
        base5,
        state.update(closeTags, { userEvent: "input.complete", scrollIntoView: true })
      ]);
      return true;
    });
  }
});

// ../../node_modules/@codemirror/lang-html/dist/index.js
var dist_exports6 = {};
__export(dist_exports6, {
  autoCloseTags: () => autoCloseTags2,
  html: () => html,
  htmlCompletionSource: () => htmlCompletionSource,
  htmlCompletionSourceWith: () => htmlCompletionSourceWith,
  htmlLanguage: () => htmlLanguage,
  htmlPlain: () => htmlPlain
});
function elementName2(doc2, tree, max = doc2.length) {
  if (!tree)
    return "";
  let tag2 = tree.firstChild;
  let name2 = tag2 && tag2.getChild("TagName");
  return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
}
function findParentElement(tree, skip = false) {
  for (; tree; tree = tree.parent)
    if (tree.name == "Element") {
      if (skip)
        skip = false;
      else
        return tree;
    }
  return null;
}
function allowedChildren(doc2, tree, schema) {
  let parentInfo = schema.tags[elementName2(doc2, findParentElement(tree))];
  return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
}
function openTags(doc2, tree) {
  let open = [];
  for (let parent = findParentElement(tree); parent && !parent.type.isTop; parent = findParentElement(parent.parent)) {
    let tagName2 = elementName2(doc2, parent);
    if (tagName2 && parent.lastChild.name == "CloseTag")
      break;
    if (tagName2 && open.indexOf(tagName2) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
      open.push(tagName2);
  }
  return open;
}
function completeTag(state, schema, tree, from3, to) {
  let end2 = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
  let parent = findParentElement(tree, true);
  return {
    from: from3,
    to,
    options: allowedChildren(state.doc, parent, schema).map((tagName2) => ({ label: tagName2, type: "type" })).concat(openTags(state.doc, tree).map((tag2, i) => ({
      label: "/" + tag2,
      apply: "/" + tag2 + end2,
      type: "type",
      boost: 99 - i
    }))),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  };
}
function completeCloseTag(state, tree, from3, to) {
  let end2 = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
  return {
    from: from3,
    to,
    options: openTags(state.doc, tree).map((tag2, i) => ({ label: tag2, apply: tag2 + end2, type: "type", boost: 99 - i })),
    validFor: identifier4
  };
}
function completeStartTag(state, schema, tree, pos) {
  let options = [], level = 0;
  for (let tagName2 of allowedChildren(state.doc, tree, schema))
    options.push({ label: "<" + tagName2, type: "type" });
  for (let open of openTags(state.doc, tree))
    options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
  return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
}
function completeAttrName(state, schema, tree, from3, to) {
  let elt2 = findParentElement(tree), info = elt2 ? schema.tags[elementName2(state.doc, elt2)] : null;
  let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
  let names = info && info.globalAttrs === false ? localAttrs : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
  return {
    from: from3,
    to,
    options: names.map((attrName2) => ({ label: attrName2, type: "property" })),
    validFor: identifier4
  };
}
function completeAttrValue(state, schema, tree, from3, to) {
  var _a2;
  let nameNode = (_a2 = tree.parent) === null || _a2 === void 0 ? void 0 : _a2.getChild("AttributeName");
  let options = [], token = void 0;
  if (nameNode) {
    let attrName2 = state.sliceDoc(nameNode.from, nameNode.to);
    let attrs2 = schema.globalAttrs[attrName2];
    if (!attrs2) {
      let elt2 = findParentElement(tree), info = elt2 ? schema.tags[elementName2(state.doc, elt2)] : null;
      attrs2 = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName2];
    }
    if (attrs2) {
      let base5 = state.sliceDoc(from3, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
      if (/^['"]/.test(base5)) {
        token = base5[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
        quoteStart = "";
        quoteEnd = state.sliceDoc(to, to + 1) == base5[0] ? "" : base5[0];
        base5 = base5.slice(1);
        from3++;
      } else {
        token = /^[^\s<>='"]*$/;
      }
      for (let value of attrs2)
        options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
    }
  }
  return { from: from3, to, options, validFor: token };
}
function htmlCompletionFor(schema, context) {
  let { state, pos } = context, tree = syntaxTree(state).resolveInner(pos, -1), around = tree.resolve(pos);
  for (let scan = pos, before; around == tree && (before = tree.childBefore(scan)); ) {
    let last = before.lastChild;
    if (!last || !last.type.isError || last.from < last.to)
      break;
    around = tree = before;
    scan = last.from;
  }
  if (tree.name == "TagName") {
    return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos) : completeTag(state, schema, tree, tree.from, pos);
  } else if (tree.name == "StartTag") {
    return completeTag(state, schema, tree, pos, pos);
  } else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
    return completeCloseTag(state, tree, pos, pos);
  } else if (tree.name == "OpenTag" || tree.name == "SelfClosingTag" || tree.name == "AttributeName") {
    return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
  } else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
    return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
  } else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
    return completeStartTag(state, schema, tree, pos);
  } else {
    return null;
  }
}
function htmlCompletionSource(context) {
  return htmlCompletionFor(Schema.default, context);
}
function htmlCompletionSourceWith(config2) {
  let { extraTags, extraGlobalAttributes: extraAttrs } = config2;
  let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
  return (context) => htmlCompletionFor(schema, context);
}
function html(config2 = {}) {
  let dialect2 = "", wrap;
  if (config2.matchClosingTags === false)
    dialect2 = "noMatch";
  if (config2.selfClosingTags === true)
    dialect2 = (dialect2 ? dialect2 + " " : "") + "selfClosing";
  if (config2.nestedLanguages && config2.nestedLanguages.length || config2.nestedAttributes && config2.nestedAttributes.length)
    wrap = configureNesting((config2.nestedLanguages || []).concat(defaultNesting), (config2.nestedAttributes || []).concat(defaultAttrs));
  let lang = wrap ? htmlPlain.configure({ wrap, dialect: dialect2 }) : dialect2 ? htmlLanguage.configure({ dialect: dialect2 }) : htmlLanguage;
  return new LanguageSupport(lang, [
    htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config2) }),
    config2.autoCloseTags !== false ? autoCloseTags2 : [],
    javascript().support,
    css().support
  ]);
}
var Targets, Charsets, Methods, Encs, Bool2, S, Tags, GlobalAttrs, eventAttributes, Schema, identifier4, jsonParser, defaultNesting, defaultAttrs, htmlPlain, htmlLanguage, selfClosers2, autoCloseTags2;
var init_dist18 = __esm({
  "../../node_modules/@codemirror/lang-html/dist/index.js"() {
    init_dist15();
    init_dist12();
    init_dist17();
    init_dist3();
    init_dist2();
    init_dist5();
    Targets = ["_blank", "_self", "_top", "_parent"];
    Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
    Methods = ["get", "post", "put", "delete"];
    Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
    Bool2 = ["true", "false"];
    S = {};
    Tags = {
      a: {
        attrs: {
          href: null,
          ping: null,
          type: null,
          media: null,
          target: Targets,
          hreflang: null
        }
      },
      abbr: S,
      address: S,
      area: {
        attrs: {
          alt: null,
          coords: null,
          href: null,
          target: null,
          ping: null,
          media: null,
          hreflang: null,
          type: null,
          shape: ["default", "rect", "circle", "poly"]
        }
      },
      article: S,
      aside: S,
      audio: {
        attrs: {
          src: null,
          mediagroup: null,
          crossorigin: ["anonymous", "use-credentials"],
          preload: ["none", "metadata", "auto"],
          autoplay: ["autoplay"],
          loop: ["loop"],
          controls: ["controls"]
        }
      },
      b: S,
      base: { attrs: { href: null, target: Targets } },
      bdi: S,
      bdo: S,
      blockquote: { attrs: { cite: null } },
      body: S,
      br: S,
      button: {
        attrs: {
          form: null,
          formaction: null,
          name: null,
          value: null,
          autofocus: ["autofocus"],
          disabled: ["autofocus"],
          formenctype: Encs,
          formmethod: Methods,
          formnovalidate: ["novalidate"],
          formtarget: Targets,
          type: ["submit", "reset", "button"]
        }
      },
      canvas: { attrs: { width: null, height: null } },
      caption: S,
      center: S,
      cite: S,
      code: S,
      col: { attrs: { span: null } },
      colgroup: { attrs: { span: null } },
      command: {
        attrs: {
          type: ["command", "checkbox", "radio"],
          label: null,
          icon: null,
          radiogroup: null,
          command: null,
          title: null,
          disabled: ["disabled"],
          checked: ["checked"]
        }
      },
      data: { attrs: { value: null } },
      datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
      datalist: { attrs: { data: null } },
      dd: S,
      del: { attrs: { cite: null, datetime: null } },
      details: { attrs: { open: ["open"] } },
      dfn: S,
      div: S,
      dl: S,
      dt: S,
      em: S,
      embed: { attrs: { src: null, type: null, width: null, height: null } },
      eventsource: { attrs: { src: null } },
      fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
      figcaption: S,
      figure: S,
      footer: S,
      form: {
        attrs: {
          action: null,
          name: null,
          "accept-charset": Charsets,
          autocomplete: ["on", "off"],
          enctype: Encs,
          method: Methods,
          novalidate: ["novalidate"],
          target: Targets
        }
      },
      h1: S,
      h2: S,
      h3: S,
      h4: S,
      h5: S,
      h6: S,
      head: {
        children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
      },
      header: S,
      hgroup: S,
      hr: S,
      html: {
        attrs: { manifest: null }
      },
      i: S,
      iframe: {
        attrs: {
          src: null,
          srcdoc: null,
          name: null,
          width: null,
          height: null,
          sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
          seamless: ["seamless"]
        }
      },
      img: {
        attrs: {
          alt: null,
          src: null,
          ismap: null,
          usemap: null,
          width: null,
          height: null,
          crossorigin: ["anonymous", "use-credentials"]
        }
      },
      input: {
        attrs: {
          alt: null,
          dirname: null,
          form: null,
          formaction: null,
          height: null,
          list: null,
          max: null,
          maxlength: null,
          min: null,
          name: null,
          pattern: null,
          placeholder: null,
          size: null,
          src: null,
          step: null,
          value: null,
          width: null,
          accept: ["audio/*", "video/*", "image/*"],
          autocomplete: ["on", "off"],
          autofocus: ["autofocus"],
          checked: ["checked"],
          disabled: ["disabled"],
          formenctype: Encs,
          formmethod: Methods,
          formnovalidate: ["novalidate"],
          formtarget: Targets,
          multiple: ["multiple"],
          readonly: ["readonly"],
          required: ["required"],
          type: [
            "hidden",
            "text",
            "search",
            "tel",
            "url",
            "email",
            "password",
            "datetime",
            "date",
            "month",
            "week",
            "time",
            "datetime-local",
            "number",
            "range",
            "color",
            "checkbox",
            "radio",
            "file",
            "submit",
            "image",
            "reset",
            "button"
          ]
        }
      },
      ins: { attrs: { cite: null, datetime: null } },
      kbd: S,
      keygen: {
        attrs: {
          challenge: null,
          form: null,
          name: null,
          autofocus: ["autofocus"],
          disabled: ["disabled"],
          keytype: ["RSA"]
        }
      },
      label: { attrs: { for: null, form: null } },
      legend: S,
      li: { attrs: { value: null } },
      link: {
        attrs: {
          href: null,
          type: null,
          hreflang: null,
          media: null,
          sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
        }
      },
      map: { attrs: { name: null } },
      mark: S,
      menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
      meta: {
        attrs: {
          content: null,
          charset: Charsets,
          name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
          "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
        }
      },
      meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
      nav: S,
      noscript: S,
      object: {
        attrs: {
          data: null,
          type: null,
          name: null,
          usemap: null,
          form: null,
          width: null,
          height: null,
          typemustmatch: ["typemustmatch"]
        }
      },
      ol: {
        attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
        children: ["li", "script", "template", "ul", "ol"]
      },
      optgroup: { attrs: { disabled: ["disabled"], label: null } },
      option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
      output: { attrs: { for: null, form: null, name: null } },
      p: S,
      param: { attrs: { name: null, value: null } },
      pre: S,
      progress: { attrs: { value: null, max: null } },
      q: { attrs: { cite: null } },
      rp: S,
      rt: S,
      ruby: S,
      samp: S,
      script: {
        attrs: {
          type: ["text/javascript"],
          src: null,
          async: ["async"],
          defer: ["defer"],
          charset: Charsets
        }
      },
      section: S,
      select: {
        attrs: {
          form: null,
          name: null,
          size: null,
          autofocus: ["autofocus"],
          disabled: ["disabled"],
          multiple: ["multiple"]
        }
      },
      slot: { attrs: { name: null } },
      small: S,
      source: { attrs: { src: null, type: null, media: null } },
      span: S,
      strong: S,
      style: {
        attrs: {
          type: ["text/css"],
          media: null,
          scoped: null
        }
      },
      sub: S,
      summary: S,
      sup: S,
      table: S,
      tbody: S,
      td: { attrs: { colspan: null, rowspan: null, headers: null } },
      template: S,
      textarea: {
        attrs: {
          dirname: null,
          form: null,
          maxlength: null,
          name: null,
          placeholder: null,
          rows: null,
          cols: null,
          autofocus: ["autofocus"],
          disabled: ["disabled"],
          readonly: ["readonly"],
          required: ["required"],
          wrap: ["soft", "hard"]
        }
      },
      tfoot: S,
      th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
      thead: S,
      time: { attrs: { datetime: null } },
      title: S,
      tr: S,
      track: {
        attrs: {
          src: null,
          label: null,
          default: null,
          kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
          srclang: null
        }
      },
      ul: { children: ["li", "script", "template", "ul", "ol"] },
      var: S,
      video: {
        attrs: {
          src: null,
          poster: null,
          width: null,
          height: null,
          crossorigin: ["anonymous", "use-credentials"],
          preload: ["auto", "metadata", "none"],
          autoplay: ["autoplay"],
          mediagroup: ["movie"],
          muted: ["muted"],
          controls: ["controls"]
        }
      },
      wbr: S
    };
    GlobalAttrs = {
      accesskey: null,
      class: null,
      contenteditable: Bool2,
      contextmenu: null,
      dir: ["ltr", "rtl", "auto"],
      draggable: ["true", "false", "auto"],
      dropzone: ["copy", "move", "link", "string:", "file:"],
      hidden: ["hidden"],
      id: null,
      inert: ["inert"],
      itemid: null,
      itemprop: null,
      itemref: null,
      itemscope: ["itemscope"],
      itemtype: null,
      lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
      spellcheck: Bool2,
      autocorrect: Bool2,
      autocapitalize: Bool2,
      style: null,
      tabindex: null,
      title: null,
      translate: ["yes", "no"],
      rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
      role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
      "aria-activedescendant": null,
      "aria-atomic": Bool2,
      "aria-autocomplete": ["inline", "list", "both", "none"],
      "aria-busy": Bool2,
      "aria-checked": ["true", "false", "mixed", "undefined"],
      "aria-controls": null,
      "aria-describedby": null,
      "aria-disabled": Bool2,
      "aria-dropeffect": null,
      "aria-expanded": ["true", "false", "undefined"],
      "aria-flowto": null,
      "aria-grabbed": ["true", "false", "undefined"],
      "aria-haspopup": Bool2,
      "aria-hidden": Bool2,
      "aria-invalid": ["true", "false", "grammar", "spelling"],
      "aria-label": null,
      "aria-labelledby": null,
      "aria-level": null,
      "aria-live": ["off", "polite", "assertive"],
      "aria-multiline": Bool2,
      "aria-multiselectable": Bool2,
      "aria-owns": null,
      "aria-posinset": null,
      "aria-pressed": ["true", "false", "mixed", "undefined"],
      "aria-readonly": Bool2,
      "aria-relevant": null,
      "aria-required": Bool2,
      "aria-selected": ["true", "false", "undefined"],
      "aria-setsize": null,
      "aria-sort": ["ascending", "descending", "none", "other"],
      "aria-valuemax": null,
      "aria-valuemin": null,
      "aria-valuenow": null,
      "aria-valuetext": null
    };
    eventAttributes = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n) => "on" + n);
    for (let a2 of eventAttributes)
      GlobalAttrs[a2] = null;
    Schema = class {
      constructor(extraTags, extraAttrs) {
        this.tags = Object.assign(Object.assign({}, Tags), extraTags);
        this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
        this.allTags = Object.keys(this.tags);
        this.globalAttrNames = Object.keys(this.globalAttrs);
      }
    };
    Schema.default = /* @__PURE__ */ new Schema();
    identifier4 = /^[:\-\.\w\u00b7-\uffff]*$/;
    jsonParser = /* @__PURE__ */ javascriptLanguage.parser.configure({ top: "SingleExpression" });
    defaultNesting = [
      {
        tag: "script",
        attrs: (attrs2) => attrs2.type == "text/typescript" || attrs2.lang == "ts",
        parser: typescriptLanguage.parser
      },
      {
        tag: "script",
        attrs: (attrs2) => attrs2.type == "text/babel" || attrs2.type == "text/jsx",
        parser: jsxLanguage.parser
      },
      {
        tag: "script",
        attrs: (attrs2) => attrs2.type == "text/typescript-jsx",
        parser: tsxLanguage.parser
      },
      {
        tag: "script",
        attrs(attrs2) {
          return /^(importmap|speculationrules|application\/(.+\+)?json)$/i.test(attrs2.type);
        },
        parser: jsonParser
      },
      {
        tag: "script",
        attrs(attrs2) {
          return !attrs2.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs2.type);
        },
        parser: javascriptLanguage.parser
      },
      {
        tag: "style",
        attrs(attrs2) {
          return (!attrs2.lang || attrs2.lang == "css") && (!attrs2.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs2.type));
        },
        parser: cssLanguage.parser
      }
    ];
    defaultAttrs = /* @__PURE__ */ [
      {
        name: "style",
        parser: /* @__PURE__ */ cssLanguage.parser.configure({ top: "Styles" })
      }
    ].concat(/* @__PURE__ */ eventAttributes.map((name2) => ({ name: name2, parser: javascriptLanguage.parser })));
    htmlPlain = /* @__PURE__ */ LRLanguage.define({
      name: "html",
      parser: /* @__PURE__ */ parser5.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Element(context) {
              let after = /^(\s*)(<\/)?/.exec(context.textAfter);
              if (context.node.to <= context.pos + after[0].length)
                return context.continue();
              return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
            },
            "OpenTag CloseTag SelfClosingTag"(context) {
              return context.column(context.node.from) + context.unit;
            },
            Document(context) {
              if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                return context.continue();
              let endElt = null, close;
              for (let cur2 = context.node; ; ) {
                let last = cur2.lastChild;
                if (!last || last.name != "Element" || last.to != cur2.to)
                  break;
                endElt = cur2 = last;
              }
              if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                return context.lineIndent(endElt.from) + context.unit;
              return null;
            }
          }),
          /* @__PURE__ */ foldNodeProp.add({
            Element(node) {
              let first = node.firstChild, last = node.lastChild;
              if (!first || first.name != "OpenTag")
                return null;
              return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
            }
          }),
          /* @__PURE__ */ bracketMatchingHandle.add({
            "OpenTag CloseTag": (node) => node.getChild("TagName")
          })
        ]
      }),
      languageData: {
        commentTokens: { block: { open: "<!--", close: "-->" } },
        indentOnInput: /^\s*<\/\w+\W$/,
        wordChars: "-._"
      }
    });
    htmlLanguage = /* @__PURE__ */ htmlPlain.configure({
      wrap: /* @__PURE__ */ configureNesting(defaultNesting, defaultAttrs)
    });
    selfClosers2 = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
    autoCloseTags2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text5, insertTransaction) => {
      if (view.composing || view.state.readOnly || from3 != to || text5 != ">" && text5 != "/" || !htmlLanguage.isActiveAt(view.state, from3, -1))
        return false;
      let base5 = insertTransaction(), { state } = base5;
      let closeTags = state.changeByRange((range) => {
        var _a2, _b2, _c;
        let didType = state.doc.sliceString(range.from - 1, range.to) == text5;
        let { head } = range, after = syntaxTree(state).resolveInner(head, -1), name2;
        if (didType && text5 == ">" && after.name == "EndTag") {
          let tag2 = after.parent;
          if (((_b2 = (_a2 = tag2.parent) === null || _a2 === void 0 ? void 0 : _a2.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "CloseTag" && (name2 = elementName2(state.doc, tag2.parent, head)) && !selfClosers2.has(name2)) {
            let to2 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
            let insert2 = `</${name2}>`;
            return { range, changes: { from: head, to: to2, insert: insert2 } };
          }
        } else if (didType && text5 == "/" && after.name == "IncompleteCloseTag") {
          let tag2 = after.parent;
          if (after.from == head - 2 && ((_c = tag2.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name2 = elementName2(state.doc, tag2, head)) && !selfClosers2.has(name2)) {
            let to2 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
            let insert2 = `${name2}>`;
            return {
              range: EditorSelection.cursor(head + insert2.length, -1),
              changes: { from: head, to: to2, insert: insert2 }
            };
          }
        }
        return { range };
      });
      if (closeTags.changes.empty)
        return false;
      view.dispatch([
        base5,
        state.update(closeTags, {
          userEvent: "input.complete",
          scrollIntoView: true
        })
      ]);
      return true;
    });
  }
});

// ../../node_modules/@lezer/java/dist/index.js
var javaHighlighting, spec_identifier5, parser7;
var init_dist19 = __esm({
  "../../node_modules/@lezer/java/dist/index.js"() {
    init_dist6();
    init_dist4();
    javaHighlighting = styleTags({
      null: tags.null,
      instanceof: tags.operatorKeyword,
      this: tags.self,
      "new super assert open to with void": tags.keyword,
      "class interface extends implements enum var": tags.definitionKeyword,
      "module package import": tags.moduleKeyword,
      "switch while for if else case default do break continue return try catch finally throw": tags.controlKeyword,
      ["requires exports opens uses provides public private protected static transitive abstract final strictfp synchronized native transient volatile throws"]: tags.modifier,
      IntegerLiteral: tags.integer,
      FloatingPointLiteral: tags.float,
      "StringLiteral TextBlock": tags.string,
      CharacterLiteral: tags.character,
      LineComment: tags.lineComment,
      BlockComment: tags.blockComment,
      BooleanLiteral: tags.bool,
      PrimitiveType: tags.standard(tags.typeName),
      TypeName: tags.typeName,
      Identifier: tags.variableName,
      "MethodName/Identifier": tags.function(tags.variableName),
      Definition: tags.definition(tags.variableName),
      ArithOp: tags.arithmeticOperator,
      LogicOp: tags.logicOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      AssignOp: tags.definitionOperator,
      UpdateOp: tags.updateOperator,
      Asterisk: tags.punctuation,
      Label: tags.labelName,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace,
      ".": tags.derefOperator,
      ", ;": tags.separator
    });
    spec_identifier5 = { __proto__: null, true: 34, false: 34, null: 42, void: 46, byte: 48, short: 48, int: 48, long: 48, char: 48, float: 48, double: 48, boolean: 48, extends: 62, super: 64, class: 76, this: 78, new: 84, public: 100, protected: 102, private: 104, abstract: 106, static: 108, final: 110, strictfp: 112, default: 114, synchronized: 116, native: 118, transient: 120, volatile: 122, throws: 150, implements: 160, interface: 166, enum: 176, instanceof: 238, open: 267, module: 269, requires: 274, transitive: 276, exports: 278, to: 280, opens: 282, uses: 284, provides: 286, with: 288, package: 292, import: 296, if: 308, else: 310, while: 314, for: 318, var: 325, assert: 332, switch: 336, case: 342, do: 346, break: 350, continue: 354, return: 358, throw: 364, try: 368, catch: 372, finally: 380 };
    parser7 = LRParser.deserialize({
      version: 14,
      states: "##jQ]QPOOQ$wQPOOO(bQQO'#H^O*iQQO'#CbOOQO'#Cb'#CbO*pQPO'#CaO*xOSO'#CpOOQO'#Hc'#HcOOQO'#Cu'#CuO,eQPO'#D_O-OQQO'#HmOOQO'#Hm'#HmO/gQQO'#HhO/nQQO'#HhOOQO'#Hh'#HhOOQO'#Hg'#HgO1rQPO'#DUO2PQPO'#GnO4wQPO'#D_O5OQPO'#DzO*pQPO'#E[O5qQPO'#E[OOQO'#DV'#DVO7SQQO'#HaO9^QQO'#EeO9eQPO'#EdO9jQPO'#EfOOQO'#Hb'#HbO7jQQO'#HbO:pQQO'#FhO:wQPO'#ExO:|QPO'#E}O:|QPO'#FPOOQO'#Ha'#HaOOQO'#HY'#HYOOQO'#Gh'#GhOOQO'#HX'#HXO<^QPO'#FiOOQO'#HW'#HWOOQO'#Gg'#GgQ]QPOOOOQO'#Hs'#HsO<cQPO'#HsO<hQPO'#D{O<hQPO'#EVO<hQPO'#EQO<pQPO'#HpO=RQQO'#EfO*pQPO'#C`O=ZQPO'#C`O*pQPO'#FcO=`QPO'#FeO=kQPO'#FkO=kQPO'#FnO<hQPO'#FsO=pQPO'#FpO:|QPO'#FwO=kQPO'#FyO]QPO'#GOO=uQPO'#GQO>QQPO'#GSO>]QPO'#GUO=kQPO'#GWO:|QPO'#GXO>dQPO'#GZO?QQQO'#HiO?mQQO'#CuO?tQPO'#HxO@SQPO'#D_O@rQPO'#DpO?wQPO'#DqO@|QPO'#HxOA_QPO'#DpOAgQPO'#IROAlQPO'#E`OOQO'#Hr'#HrOOQO'#Gm'#GmQ$wQPOOOAtQPO'#HsOOQO'#H^'#H^OCsQQO,58{OOQO'#H['#H[OOOO'#Gi'#GiOEfOSO,59[OOQO,59[,59[OOQO'#Hi'#HiOFVQPO,59eOGXQPO,59yOOQO-E:f-E:fO*pQPO,58zOG{QPO,58zO*pQPO,5;}OHQQPO'#DQOHVQPO'#DQOOQO'#Gk'#GkOIVQQO,59jOOQO'#Dm'#DmOJqQPO'#HuOJ{QPO'#DlOKZQPO'#HtOKcQPO,5<_OKhQPO,59^OLRQPO'#CxOOQO,59c,59cOLYQPO,59bOLeQQO'#H^ONgQQO'#CbO!!iQPO'#D_O!#nQQO'#HmO!$OQQO,59pO!$VQPO'#DvO!$eQPO'#H|O!$mQPO,5:`O!$rQPO,5:`O!%YQPO,5;nO!%eQPO'#ITO!%pQPO,5;eO!%uQPO,5=YOOQO-E:l-E:lOOQO,5:f,5:fO!']QPO,5:fO!'dQPO,5:vO?tQPO,5<_O*pQPO,5:vO<hQPO,5:gO<hQPO,5:qO<hQPO,5:lO<hQPO,5<_O!'zQPO,59qO:|QPO,5:}O!(RQPO,5;QO:|QPO,59TO!(aQPO'#DXOOQO,5;O,5;OOOQO'#El'#ElOOQO'#Eo'#EoO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;UO:|QPO,5;fOOQO,5;i,5;iOOQO,5<S,5<SO!(hQPO,5;bO!(yQPO,5;dO!(hQPO'#CyO!)QQQO'#HmO!)`QQO,5;kO]QPO,5<TOOQO-E:e-E:eOOQO,5>_,5>_O!*sQPO,5:gO!+RQPO,5:qO!+ZQPO,5:lO!+fQPO,5>[O!$VQPO,5>[O!'iQPO,59UO!+qQQO,58zO!+yQQO,5;}O!,RQQO,5<PO*pQPO,5<PO:|QPO'#DUO]QPO,5<VO]QPO,5<YO!,ZQPO'#FrO]QPO,5<[O]QPO,5<aO!,kQQO,5<cO!,uQPO,5<eO!,zQPO,5<jOOQO'#Fj'#FjOOQO,5<l,5<lO!-PQPO,5<lOOQO,5<n,5<nO!-UQPO,5<nO!-ZQQO,5<pOOQO,5<p,5<pO>gQPO,5<rO!-bQQO,5<sO!-iQPO'#GdO!.oQPO,5<uO>gQPO,5<}O!2mQPO,59jO!2zQPO'#HuO!3RQPO,59xO!3WQPO,5>dO?tQPO,59xO!3cQPO,5:[OAlQPO,5:zO!3kQPO'#DrO?wQPO'#DrO!3vQPO'#HyO!4OQPO,5:]O?tQPO,5>dO!(hQPO,5>dOAgQPO,5>mOOQO,5:[,5:[O!$rQPO'#DtOOQO,5>m,5>mO!4TQPO'#EaOOQO,5:z,5:zO!7UQPO,5:zO!(hQPO'#DxOOQO-E:k-E:kOOQO,5:y,5:yO*pQPO,58}O!7ZQPO'#ChOOQO1G.k1G.kOOOO-E:g-E:gOOQO1G.v1G.vO!+qQQO1G.fO*pQPO1G.fO!7eQQO1G1iOOQO,59l,59lO!7mQPO,59lOOQO-E:i-E:iO!7rQPO,5>aO!8ZQPO,5:WO<hQPO'#GpO!8bQPO,5>`OOQO1G1y1G1yOOQO1G.x1G.xO!8{QPO'#CyO!9kQPO'#HmO!9uQPO'#CzO!:TQPO'#HlO!:]QPO,59dOOQO1G.|1G.|OLYQPO1G.|O!:sQPO,59eO!;QQQO'#H^O!;cQQO'#CbOOQO,5:b,5:bO<hQPO,5:cOOQO,5:a,5:aO!;tQQO,5:aOOQO1G/[1G/[O!;yQPO,5:bO!<[QPO'#GsO!<oQPO,5>hOOQO1G/z1G/zO!<wQPO'#DvO!=YQPO1G/zO!(hQPO'#GqO!=_QPO1G1YO:|QPO1G1YO<hQPO'#GyO!=gQPO,5>oOOQO1G1P1G1POOQO1G0Q1G0QO!=oQPO'#E]OOQO1G0b1G0bO!>`QPO1G1yO!'dQPO1G0bO!*sQPO1G0RO!+RQPO1G0]O!+ZQPO1G0WOOQO1G/]1G/]O!>eQQO1G.pO9eQPO1G0jO*pQPO1G0jO<pQPO'#HpO!@[QQO1G.pOOQO1G.p1G.pO!@aQQO1G0iOOQO1G0l1G0lO!@hQPO1G0lO!@sQQO1G.oO!AZQQO'#HqO!AhQPO,59sO!BzQQO1G0pO!DfQQO1G0pO!DmQQO1G0pO!FUQQO1G0pO!F]QQO1G0pO!GbQQO1G0pO!I]QQO1G0pO!IdQQO1G0pO!IkQQO1G0pO!IuQQO1G1QO!I|QQO'#HmOOQO1G0|1G0|O!KSQQO1G1OOOQO1G1O1G1OOOQO1G1o1G1oO!KjQPO'#D[O!(hQPO'#D|O!(hQPO'#D}OOQO1G0R1G0RO!KqQPO1G0RO!KvQPO1G0RO!LOQPO1G0RO!LZQPO'#EXOOQO1G0]1G0]O!LnQPO1G0]O!LsQPO'#ETO!(hQPO'#ESOOQO1G0W1G0WO!MmQPO1G0WO!MrQPO1G0WO!MzQPO'#EhO!NRQPO'#EhOOQO'#Gx'#GxO!NZQQO1G0mO# }QQO1G3vO9eQPO1G3vO#$PQPO'#FXOOQO1G.f1G.fOOQO1G1i1G1iO#$WQPO1G1kOOQO1G1k1G1kO#$cQQO1G1kO#$kQPO1G1qOOQO1G1t1G1tO+QQPO'#D_O-OQQO,5<bO#(cQPO,5<bO#(tQPO,5<^O#({QPO,5<^OOQO1G1v1G1vOOQO1G1{1G1{OOQO1G1}1G1}O:|QPO1G1}O#,oQPO'#F{OOQO1G2P1G2PO=kQPO1G2UOOQO1G2W1G2WOOQO1G2Y1G2YOOQO1G2[1G2[OOQO1G2^1G2^OOQO1G2_1G2_O#,vQQO'#H^O#-aQQO'#CbO-OQQO'#HmO#-zQQOOO#.hQQO'#EeO#.VQQO'#HbO!$VQPO'#GeO#.oQPO,5=OOOQO'#HQ'#HQO#.wQPO1G2aO#2uQPO'#G]O>gQPO'#GaOOQO1G2a1G2aO#2zQPO1G2iO#6xQPO,5>gOOQO1G/d1G/dOOQO1G4O1G4OO#7ZQPO1G/dOOQO1G/v1G/vOOQO1G0f1G0fO!7UQPO1G0fOOQO,5:^,5:^O!(hQPO'#DsO#7`QPO,5:^O?wQPO'#GrO#7kQPO,5>eOOQO1G/w1G/wOAgQPO'#H{O#7sQPO1G4OO?tQPO1G4OOOQO1G4X1G4XO!#YQPO'#DvO!!iQPO'#D_OOQO,5:{,5:{O#8OQPO,5:{O#8OQPO,5:{O#8VQQO'#HaO#9hQQO'#HbO#9rQQO'#EbO#9}QPO'#EbO#:VQPO'#IOOOQO,5:d,5:dOOQO1G.i1G.iO#:bQQO'#EeO#:rQQO'#H`O#;SQPO'#FTOOQO'#H`'#H`O#;^QPO'#H`O#;{QPO'#IWO#<TQPO,59SOOQO7+$Q7+$QO!+qQQO7+$QOOQO7+'T7+'TOOQO1G/W1G/WO#<YQPO'#DoO#<dQQO'#HvOOQO'#Hv'#HvOOQO1G/r1G/rOOQO,5=[,5=[OOQO-E:n-E:nO#<tQWO,58{O#<{QPO,59fOOQO,59f,59fO!(hQPO'#HoOKmQPO'#GjO#=ZQPO,5>WOOQO1G/O1G/OOOQO7+$h7+$hOOQO1G/{1G/{O#=cQQO1G/{OOQO1G/}1G/}O#=hQPO1G/{OOQO1G/|1G/|O<hQPO1G/}OOQO,5=_,5=_OOQO-E:q-E:qOOQO7+%f7+%fOOQO,5=],5=]OOQO-E:o-E:oO:|QPO7+&tOOQO7+&t7+&tOOQO,5=e,5=eOOQO-E:w-E:wO#=mQPO'#EUO#={QPO'#EUOOQO'#Gw'#GwO#>dQPO,5:wOOQO,5:w,5:wOOQO7+'e7+'eOOQO7+%|7+%|OOQO7+%m7+%mO!KqQPO7+%mO!KvQPO7+%mO!LOQPO7+%mOOQO7+%w7+%wO!LnQPO7+%wOOQO7+%r7+%rO!MmQPO7+%rO!MrQPO7+%rOOQO7+&U7+&UOOQO'#Ee'#EeO9eQPO7+&UO9eQPO,5>[O#?TQPO7+$[OOQO7+&T7+&TOOQO7+&W7+&WO:|QPO'#GlO#?cQPO,5>]OOQO1G/_1G/_O:|QPO7+&lO#?nQQO,59eO#@tQPO,59vOOQO,59v,59vOOQO,5:h,5:hOOQO'#EP'#EPOOQO,5:i,5:iO#@{QPO'#EYO<hQPO'#EYO#A^QPO'#IPO#AiQPO,5:sO?tQPO'#HxO!(hQPO'#HxO#AqQPO'#DpOOQO'#Gu'#GuO#AxQPO,5:oOOQO,5:o,5:oOOQO,5:n,5:nOOQO,5;S,5;SO#BrQQO,5;SO#ByQPO,5;SOOQO-E:v-E:vOOQO7+&X7+&XOOQO7+)b7+)bO#CQQQO7+)bOOQO'#G|'#G|O#DqQPO,5;sOOQO,5;s,5;sO#DxQPO'#FYO*pQPO'#FYO*pQPO'#FYO*pQPO'#FYO#EWQPO7+'VO#E]QPO7+'VOOQO7+'V7+'VO]QPO7+']O#EhQPO1G1|O?tQPO1G1|O#EvQQO1G1xO!(aQPO1G1xO#E}QPO1G1xO#FUQQO7+'iOOQO'#HP'#HPO#F]QPO,5<gOOQO,5<g,5<gO#FdQPO'#HsO:|QPO'#F|O#FlQPO7+'pO#FqQPO,5=PO?tQPO,5=PO#FvQPO1G2jO#HPQPO1G2jOOQO1G2j1G2jOOQO-E;O-E;OOOQO7+'{7+'{O!<[QPO'#G_O>gQPO,5<wOOQO,5<{,5<{O#HXQPO7+(TOOQO7+(T7+(TO#LVQPO1G4ROOQO7+%O7+%OOOQO7+&Q7+&QO#LhQPO,5:_OOQO1G/x1G/xOOQO,5=^,5=^OOQO-E:p-E:pOOQO7+)j7+)jO#LsQPO7+)jO!:bQPO,5:aOOQO1G0g1G0gO#MOQPO1G0gO#MVQPO,59qO#MkQPO,5:|O9eQPO,5:|O!(hQPO'#GtO#MpQPO,5>jO#M{QPO,59TO#NSQPO'#IVO#N[QPO,5;oO*pQPO'#G{O#NaQPO,5>rOOQO1G.n1G.nOOQO<<Gl<<GlO#NiQPO'#HwO#NqQPO,5:ZOOQO1G/Q1G/QOOQO,5>Z,5>ZOOQO,5=U,5=UOOQO-E:h-E:hO#NvQPO7+%gOOQO7+%g7+%gOOQO7+%i7+%iOOQO<<J`<<J`O$ ^QPO'#H^O$ eQPO'#CbO$ lQPO,5:pO$ qQPO,5:xO#=mQPO,5:pOOQO-E:u-E:uOOQO1G0c1G0cOOQO<<IX<<IXO!KqQPO<<IXO!KvQPO<<IXOOQO<<Ic<<IcOOQO<<I^<<I^O!MmQPO<<I^OOQO<<Ip<<IpO$ vQQO<<GvO9eQPO<<IpO*pQPO<<IpOOQO<<Gv<<GvO$#mQQO,5=WOOQO-E:j-E:jO$#zQQO<<JWOOQO1G/b1G/bOOQO,5:t,5:tO$$bQPO,5:tO$$pQPO,5:tO$%RQPO'#GvO$%iQPO,5>kO$%tQPO'#EZOOQO1G0_1G0_O$%{QPO1G0_O?tQPO,5:pOOQO-E:s-E:sOOQO1G0Z1G0ZOOQO1G0n1G0nO$&QQQO1G0nOOQO<<L|<<L|OOQO-E:z-E:zOOQO1G1_1G1_O$&XQQO,5;tOOQO'#G}'#G}O#DxQPO,5;tOOQO'#IX'#IXO$&aQQO,5;tO$&rQQO,5;tOOQO<<Jq<<JqO$&zQPO<<JqOOQO<<Jw<<JwO:|QPO7+'hO$'PQPO7+'hO!(aQPO7+'dO$'_QPO7+'dO$'dQQO7+'dOOQO<<KT<<KTOOQO-E:}-E:}OOQO1G2R1G2ROOQO,5<h,5<hO$'kQQO,5<hOOQO<<K[<<K[O:|QPO1G2kO$'rQPO1G2kOOQO,5=n,5=nOOQO7+(U7+(UO$'wQPO7+(UOOQO-E;Q-E;QO$)fQWO'#HhO$)QQWO'#HhO$)mQPO'#G`O<hQPO,5<yO!$VQPO,5<yOOQO1G2c1G2cOOQO<<Ko<<KoO$*OQPO1G/yOOQO<<MU<<MUOOQO7+&R7+&RO$*ZQPO1G0jO$*fQQO1G0hOOQO1G0h1G0hO$*nQPO1G0hOOQO,5=`,5=`OOQO-E:r-E:rO$*sQQO1G.oOOQO1G1[1G1[O$*}QPO'#GzO$+[QPO,5>qOOQO1G1Z1G1ZO$+dQPO'#FUOOQO,5=g,5=gOOQO-E:y-E:yO$+iQPO'#GoO$+vQPO,5>cOOQO1G/u1G/uOOQO<<IR<<IROOQO1G0[1G0[O$,OQPO1G0dO$,TQPO1G0[O$,YQPO1G0dOOQOAN>sAN>sO!KqQPOAN>sOOQOAN>xAN>xOOQOAN?[AN?[O9eQPOAN?[OOQO1G0`1G0`O$,_QPO1G0`OOQO,5=b,5=bOOQO-E:t-E:tO$,mQPO,5:uOOQO7+%y7+%yOOQO7+&Y7+&YOOQO1G1`1G1`O$,tQQO1G1`OOQO-E:{-E:{O$,|QQO'#IYO$,wQPO1G1`O$&gQPO1G1`O*pQPO1G1`OOQOAN@]AN@]O$-XQQO<<KSO:|QPO<<KSO$-`QPO<<KOOOQO<<KO<<KOO!(aQPO<<KOOOQO1G2S1G2SO$-eQQO7+(VO:|QPO7+(VOOQO<<Kp<<KpP!-iQPO'#HSO!$VQPO'#HRO$-oQPO,5<zO$-zQPO1G2eO<hQPO1G2eO9eQPO7+&SO$.PQPO7+&SOOQO7+&S7+&SOOQO,5=f,5=fOOQO-E:x-E:xO#M{QPO,5;pOOQO,5=Z,5=ZOOQO-E:m-E:mO$.UQPO7+&OOOQO7+%v7+%vO$.dQPO7+&OOOQOG24_G24_OOQOG24vG24vOOQO7+%z7+%zOOQO7+&z7+&zO*pQPO'#HOO$.iQPO,5>tO$.qQPO7+&zO$.vQQO'#IZOOQOAN@nAN@nO$/RQQOAN@nOOQOAN@jAN@jO$/YQPOAN@jO$/_QQO<<KqO$/iQPO,5=mOOQO-E;P-E;POOQO7+(P7+(PO$/zQPO7+(PO$0PQPO<<InOOQO<<In<<InO$0UQPO<<IjOOQO<<Ij<<IjO#M{QPO<<IjO$0UQPO<<IjO$0dQQO,5=jOOQO-E:|-E:|OOQO<<Jf<<JfO$0oQPO,5>uOOQOG26YG26YOOQOG26UG26UOOQO<<Kk<<KkOOQOAN?YAN?YOOQOAN?UAN?UO#M{QPOAN?UO$0wQPOAN?UO$0|QPOAN?UO$1[QPOG24pOOQOG24pG24pO#M{QPOG24pOOQOLD*[LD*[O$1aQPOLD*[OOQO!$'Mv!$'MvO*pQPO'#CaO$1fQQO'#H^O$1yQQO'#CbO!(hQPO'#Cy",
      stateData: "$2i~OPOSQOS%yOS~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO![!`O!]yO!^yO!_yO!u}O!z|O#fpO#roO#tpO#upO#y!RO#z!QO$W!SO$Y!TO$`!UO$c!VO$e!XO$h!WO$l!YO$n!ZO$s![O$u!]O$w!^O$y!_O$|!aO%O!bO%}TO&PRO&RQO&XUO&tdO~Og^Oh^Ov{O}cO!P!mO!SyO!TyO!UyO!VyO!W!pO!XyO!YyO!ZzO!]yO!^yO!_yO!u}O!z|O%}TO&P!cO&R!dO&_!hO&tdO~OWiXW&QXZ&QXuiXu&QX!P&QX!b&QX#]&QX#_&QX#a&QX#b&QX#d&QX#e&QX#f&QX#g&QX#h&QX#i&QX#k&QX#o&QX#r&QX%}iX&PiX&RiX&^&QX&_iX&_&QX&n&QX&viX&v&QX&x!aX~O#p$^X~P&bOWUXW&]XZUXuUXu&]X!PUX!bUX#]UX#_UX#aUX#bUX#dUX#eUX#fUX#gUX#hUX#iUX#kUX#oUX#rUX%}&]X&P&]X&R&]X&^UX&_UX&_&]X&nUX&vUX&v&]X&x!aX~O#p$^X~P(iO&PSO&R!qO~O&W!vO&Y!tO~Og^Oh^O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO%}TO&P!wO&RWOg!RXh!RX$h!RX&P!RX&R!RX~O#y!|O#z!{O$W!}Ov!RX!u!RX!z!RX&t!RX~P+QOW#XOu#OO%}TO&P#SO&R#SO&v&aX~OW#[Ou&[X%}&[X&P&[X&R&[X&v&[XY&[Xw&[X&n&[X&q&[XZ&[Xq&[X&^&[X!P&[X#_&[X#a&[X#b&[X#d&[X#e&[X#f&[X#g&[X#h&[X#i&[X#k&[X#o&[X#r&[X}&[X!r&[X#p&[Xs&[X|&[X~O&_#YO~P-dO&_&[X~P-dOZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO#fpO#roO#tpO#upO%}TO&XUO~O&P#^O&R#]OY&pP~P/uO%}TOg%bXh%bXv%bX!S%bX!T%bX!U%bX!V%bX!W%bX!X%bX!Y%bX!Z%bX!]%bX!^%bX!_%bX!u%bX!z%bX$h%bX&P%bX&R%bX&t%bX&_%bX~O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yOg!RXh!RXv!RX!u!RX!z!RX&P!RX&R!RX&t!RX&_!RX~O$h!RX~P3gO|#kO~P]Og^Oh^Ov#pO!u#rO!z#qO&P!wO&RWO&t#oO~O$h#sO~P5VOu#uO&v#vO!P&TX#_&TX#a&TX#b&TX#d&TX#e&TX#f&TX#g&TX#h&TX#i&TX#k&TX#o&TX#r&TX&^&TX&_&TX&n&TX~OW#tOY&TX#p&TXs&TXq&TX|&TX~P5xO!b#wO#]#wOW&UXu&UX!P&UX#_&UX#a&UX#b&UX#d&UX#e&UX#f&UX#g&UX#h&UX#i&UX#k&UX#o&UX#r&UX&^&UX&_&UX&n&UX&v&UXY&UX#p&UXs&UXq&UX|&UX~OZ#XX~P7jOZ#xO~O&v#vO~O#_#|O#a#}O#b$OO#d$QO#e$RO#f$SO#g$TO#h$UO#i$UO#k$YO#o$VO#r$WO&^#zO&_#zO&n#{O~O!P$XO~P9oO&x$ZO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO#fpO#roO#tpO#upO%}TO&P0qO&R0pO&XUO~O#p$_O~O![$aO~O&P#SO&R#SO~Og^Oh^O&P!wO&RWO&_#YO~OW$gO&v#vO~O#z!{O~O!W$kO&PSO&R!qO~OZ$lO~OZ$oO~O!P$vO&P$uO&R$uO~O!P$xO&P$uO&R$uO~O!P${O~P:|OZ%OO}cO~OW&]Xu&]X%}&]X&P&]X&R&]X&_&]X~OZ!aX~P>lOWiXuiX%}iX&PiX&RiX&_iX~OZ!aX~P?XOu#OO%}TO&P#SO&R#SO~O%}TO~P3gOg^Oh^Ov#pO!u#rO!z#qO&_!hO&t#oO~O&P!cO&R!dO~P@ZOg^Oh^O%}TO&P!cO&R!dO~O}cO!P%aO~OZ%bO~O}%dO!m%gO~O}cOg&gXh&gXv&gX!S&gX!T&gX!U&gX!V&gX!W&gX!X&gX!Y&gX!Z&gX!]&gX!^&gX!_&gX!u&gX!z&gX%}&gX&P&gX&R&gX&_&gX&t&gX~OW%jOZ%kOgTahTa%}Ta&PTa&RTa~OvTa!STa!TTa!UTa!VTa!WTa!XTa!YTa!ZTa!]Ta!^Ta!_Ta!uTa!zTa#yTa#zTa$WTa$hTa&tTa&_TauTaYTaqTa|Ta!PTa~PC[O&W%nO&Y!tO~Ou#OO%}TOqma&^maYma&nma!Pma~O&vma}ma!rma~PEnO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO~Og!Rah!Rav!Ra!u!Ra!z!Ra$h!Ra&P!Ra&R!Ra&t!Ra&_!Ra~PFdO#z%pO~Os%rO~Ou%sO%}TO~Ou#OO%}ra&Pra&Rra&vraYrawra&nra&qra!Pra&^raqra~OWra#_ra#ara#bra#dra#era#fra#gra#hra#ira#kra#ora#rra&_ra#prasra|ra~PH_Ou#OO%}TOq&iX!P&iX!b&iX~OY&iX#p&iX~PJ`O!b%vOq!`X!P!`XY!`X~Oq%wO!P&hX~O!P%yO~Ov%zO~Og^Oh^O%}0oO&P!wO&RWO&b%}O~O&^&`P~PKmO%}TO&P!wO&RWO~OW&QXYiXY!aXY&QXZ&QXq!aXu&QXwiX!b&QX#]&QX#_&QX#a&QX#b&QX#d&QX#e&QX#f&QX#g&QX#h&QX#i&QX#k&QX#o&QX#r&QX&^&QX&_&QX&niX&n&QX&qiX&viX&v&QX&x!aX~P?XOWUXYUXY!aXY&]XZUXq!aXuUXw&]X!bUX#]UX#_UX#aUX#bUX#dUX#eUX#fUX#gUX#hUX#iUX#kUX#oUX#rUX&^UX&_UX&nUX&n&]X&q&]X&vUX&v&]X&x!aX~P>lOg^Oh^O%}TO&P!wO&RWOg!RXh!RX&P!RX&R!RX~PFdOu#OOw&XO%}TO&P&UO&R&TO&q&WO~OW#XOY&aX&n&aX&v&aX~P!#YOY&ZO~P9oOg^Oh^O&P!wO&RWO~Oq&]OY&pX~OY&_O~Og^Oh^O%}TO&P!wO&RWOY&pP~PFdOY&dO&n&bO&v#vO~Oq&eO&x$ZOY&wX~OY&gO~O%}TOg%bah%bav%ba!S%ba!T%ba!U%ba!V%ba!W%ba!X%ba!Y%ba!Z%ba!]%ba!^%ba!_%ba!u%ba!z%ba$h%ba&P%ba&R%ba&t%ba&_%ba~O|&hO~P]O}&iO~Op&uOw&vO&PSO&R!qO&_#YO~Oz&tO~P!'iOz&xO&PSO&R!qO&_#YO~OY&eP~P:|Og^Oh^O%}TO&P!wO&RWO~O}cO~P:|OW#XOu#OO%}TO&v&aX~O#r$WO!P#sa#_#sa#a#sa#b#sa#d#sa#e#sa#f#sa#g#sa#h#sa#i#sa#k#sa#o#sa&^#sa&_#sa&n#saY#sa#p#sas#saq#sa|#sa~Oo'_O}'^O!r'`O&_!hO~O}'eO!r'`O~Oo'iO}'hO&_!hO~OZ#xOu'mO%}TO~OW%jO}'sO~OW%jO!P'uO~OW'vO!P'wO~O$h!WO&P0qO&R0pO!P&eP~P/uO!P(SO#p(TO~P9oO}(UO~O$c(WO~O!P(XO~O!P(YO~O!P(ZO~P9oO!P(]O~P9oOZ$lO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%}TO&P(_O&R(^O&XUO~PFdO%Q(hO%U(iOZ$}a_$}a`$}aa$}ab$}ac$}ae$}ag$}ah$}ap$}av$}aw$}az$}a}$}a!P$}a!S$}a!T$}a!U$}a!V$}a!W$}a!X$}a!Y$}a!Z$}a![$}a!]$}a!^$}a!_$}a!u$}a!z$}a#f$}a#r$}a#t$}a#u$}a#y$}a#z$}a$W$}a$Y$}a$`$}a$c$}a$e$}a$h$}a$l$}a$n$}a$s$}a$u$}a$w$}a$y$}a$|$}a%O$}a%w$}a%}$}a&P$}a&R$}a&X$}a&t$}a|$}a$a$}a$q$}a~O}ra!rra'Ora~PH_OZ%bO~PJ`O!P(mO~O!m%gO}&la!P&la~O}cO!P(pO~Oo(tOq!fX&^!fX~Oq(vO&^&mX~O&^(xO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op)UOv{Ow)TOz!OO|)PO}cO!PvO![!`O!u}O!z|O#fpO#roO#tpO#upO#y!RO#z!QO$W!SO$Y!TO$`!UO$c!VO$e!XO$h!WO$l!YO$n!ZO$s![O$u!]O$w!^O$y!_O$|!aO%O!bO%}TO&PRO&RQO&XUO&_#YO&tdO~PFdO}%dO~O})]OY&zP~P:|OW%jO!P)dO~Os)eO~Ou#OO%}TOq&ia!P&ia!b&iaY&ia#p&ia~O})fO~P:|Oq%wO!P&ha~Og^Oh^O%}0oO&P!wO&RWO~O&b)mO~P!8jOu#OO%}TOq&aX&^&aXY&aX&n&aX!P&aX~O}&aX!r&aX~P!9SOo)oOp)oOqnX&^nX~Oq)pO&^&`X~O&^)rO~Ou#OOw)tO%}TO&PSO&R!qO~OYma&nma&vma~P!:bOW&QXY!aXq!aXu!aX%}!aX~OWUXY!aXq!aXu!aX%}!aX~OW)wO~Ou#OO%}TO&P#SO&R#SO&q)yO~Og^Oh^O%}TO&P!wO&RWO~PFdOq&]OY&pa~Ou#OO%}TO&P#SO&R#SO&q&WO~OY)|O~OY*PO&n&bO~Oq&eOY&wa~Og^Oh^Ov{O|*XO!u}O%}TO&P!wO&RWO&tdO~PFdO!P*YO~OW^iZ#XXu^i!P^i!b^i#]^i#_^i#a^i#b^i#d^i#e^i#f^i#g^i#h^i#i^i#k^i#o^i#r^i&^^i&_^i&n^i&v^iY^i#p^is^iq^i|^i~OW*iO~Os*jO~P9oOz*kO&PSO&R!qO~O!P]iY]i#p]is]iq]i|]i~P9oOq*lOY&eX!P&eX~P9oOY*nO~O#f$SO#g$TO#k$YO#r$WO!P#^i#_#^i#a#^i#b#^i#d#^i#e#^i#o#^i&^#^i&_#^i&n#^iY#^i#p#^is#^iq#^i|#^i~O#h$UO#i$UO~P!AmO#_#|O#d$QO#e$RO#f$SO#g$TO#h$UO#i$UO#k$YO#r$WO&^#zO&_#zO&n#{O!P#^i#b#^i#o#^iY#^i#p#^is#^iq#^i|#^i~O#a#^i~P!CUO#a#}O~P!CUO#_#|O#f$SO#g$TO#h$UO#i$UO#k$YO#r$WO&^#zO&_#zO!P#^i#a#^i#b#^i#d#^i#e#^i#o#^iY#^i#p#^is#^iq#^i|#^i~O&n#^i~P!DtO&n#{O~P!DtO#f$SO#g$TO#k$YO#r$WO!P#^i#a#^i#b#^i#e#^i#o#^iY#^i#p#^is#^iq#^i|#^i~O#_#|O#d$QO#h$UO#i$UO&^#zO&_#zO&n#{O~P!FdO#k$YO#r$WO!P#^i#_#^i#a#^i#b#^i#d#^i#e#^i#f#^i#h#^i#i#^i#o#^i&^#^i&_#^i&n#^iY#^i#p#^is#^iq#^i|#^i~O#g$TO~P!G{O#g#^i~P!G{O#h#^i#i#^i~P!AmO#p*oO~P9oO#_&aX#a&aX#b&aX#d&aX#e&aX#f&aX#g&aX#h&aX#i&aX#k&aX#o&aX#r&aX&_&aX#p&aXs&aX|&aX~P!9SO!P#liY#li#p#lis#liq#li|#li~P9oO|*rO~P$wO}'^O~O}'^O!r'`O~Oo'_O}'^O!r'`O~O%}TO&P#SO&R#SO|&sP!P&sP~PFdO}'eO~Og^Oh^Ov{O|+PO!P*}O!u}O!z|O%}TO&P!wO&RWO&_!hO&tdO~PFdO}'hO~Oo'iO}'hO~Os+RO~P:|Ou+TO%}TO~Ou'mO})fO%}TOW#Zi!P#Zi#_#Zi#a#Zi#b#Zi#d#Zi#e#Zi#f#Zi#g#Zi#h#Zi#i#Zi#k#Zi#o#Zi#r#Zi&^#Zi&_#Zi&n#Zi&v#ZiY#Zi#p#Zis#Ziq#Zi|#Zi~O}'^OW&diu&di!P&di#_&di#a&di#b&di#d&di#e&di#f&di#g&di#h&di#i&di#k&di#o&di#r&di&^&di&_&di&n&di&v&diY&di#p&dis&diq&di|&di~O#}+]O$P+^O$R+^O$S+_O$T+`O~O|+[O~P##nO$Z+aO&PSO&R!qO~OW+bO!P+cO~O$a+dOZ$_i_$_i`$_ia$_ib$_ic$_ie$_ig$_ih$_ip$_iv$_iw$_iz$_i}$_i!P$_i!S$_i!T$_i!U$_i!V$_i!W$_i!X$_i!Y$_i!Z$_i![$_i!]$_i!^$_i!_$_i!u$_i!z$_i#f$_i#r$_i#t$_i#u$_i#y$_i#z$_i$W$_i$Y$_i$`$_i$c$_i$e$_i$h$_i$l$_i$n$_i$s$_i$u$_i$w$_i$y$_i$|$_i%O$_i%w$_i%}$_i&P$_i&R$_i&X$_i&t$_i|$_i$q$_i~Og^Oh^O$h#sO&P!wO&RWO~O!P+hO~P:|O!P+iO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!Z+nO![!`O!]yO!^yO!_yO!u}O!z|O#fpO#roO#tpO#upO#y!RO#z!QO$W!SO$Y!TO$`!UO$c!VO$e!XO$h!WO$l!YO$n!ZO$q+oO$s![O$u!]O$w!^O$y!_O$|!aO%O!bO%}TO&PRO&RQO&XUO&tdO~O|+mO~P#)QOW&QXY&QXZ&QXu&QX!P&QX&viX&v&QX~P?XOWUXYUXZUXuUX!PUX&vUX&v&]X~P>lOW#tOu#uO&v#vO~OW&UXY%XXu&UX!P%XX&v&UX~OZ#XX~P#.VOY+uO!P+sO~O%Q(hO%U(iOZ$}i_$}i`$}ia$}ib$}ic$}ie$}ig$}ih$}ip$}iv$}iw$}iz$}i}$}i!P$}i!S$}i!T$}i!U$}i!V$}i!W$}i!X$}i!Y$}i!Z$}i![$}i!]$}i!^$}i!_$}i!u$}i!z$}i#f$}i#r$}i#t$}i#u$}i#y$}i#z$}i$W$}i$Y$}i$`$}i$c$}i$e$}i$h$}i$l$}i$n$}i$s$}i$u$}i$w$}i$y$}i$|$}i%O$}i%w$}i%}$}i&P$}i&R$}i&X$}i&t$}i|$}i$a$}i$q$}i~OZ+xO~O%Q(hO%U(iOZ%Vi_%Vi`%Via%Vib%Vic%Vie%Vig%Vih%Vip%Viv%Viw%Viz%Vi}%Vi!P%Vi!S%Vi!T%Vi!U%Vi!V%Vi!W%Vi!X%Vi!Y%Vi!Z%Vi![%Vi!]%Vi!^%Vi!_%Vi!u%Vi!z%Vi#f%Vi#r%Vi#t%Vi#u%Vi#y%Vi#z%Vi$W%Vi$Y%Vi$`%Vi$c%Vi$e%Vi$h%Vi$l%Vi$n%Vi$s%Vi$u%Vi$w%Vi$y%Vi$|%Vi%O%Vi%w%Vi%}%Vi&P%Vi&R%Vi&X%Vi&t%Vi|%Vi$a%Vi$q%Vi~Ou#OO%}TO}&oa!P&oa!m&oa~O!P,OO~Oo(tOq!fa&^!fa~Oq(vO&^&ma~O!m%gO}&li!P&li~O|,XO~P]OW,ZO~P5xOW&UXu&UX#_&UX#a&UX#b&UX#d&UX#e&UX#f&UX#g&UX#h&UX#i&UX#k&UX#o&UX#r&UX&^&UX&_&UX&n&UX&v&UX~OZ#xO!P&UX~P#8^OW$gOZ#xO&v#vO~Op,]Ow,]O~Oq,^O}&rX!P&rX~O!b,`O#]#wOY&UXZ#XX~P#8^OY&SXq&SX|&SX!P&SX~P9oO})]O|&yP~P:|OY&SXg%[Xh%[X%}%[X&P%[X&R%[Xq&SX|&SX!P&SX~Oq,cOY&zX~OY,eO~O})fO|&kP~P:|Oq&jX!P&jX|&jXY&jX~P9oO&bTa~PC[Oo)oOp)oOqna&^na~Oq)pO&^&`a~OW,mO~Ow,nO~Ou#OO%}TO&P,rO&R,qO~Og^Oh^Ov#pO!u#rO&P!wO&RWO&t#oO~Og^Oh^Ov{O|,wO!u}O%}TO&P!wO&RWO&tdO~PFdOw-SO&PSO&R!qO&_#YO~Oq*lOY&ea!P&ea~O#_ma#ama#bma#dma#ema#fma#gma#hma#ima#kma#oma#rma&_ma#pmasma|ma~PEnO|-WO~P$wOZ#xO}'^Oq!|X|!|X!P!|X~Oq-[O|&sX!P&sX~O|-_O!P-^O~O&_!hO~P5VOg^Oh^Ov{O|-cO!P*}O!u}O!z|O%}TO&P!wO&RWO&_!hO&tdO~PFdOs-dO~P9oOs-dO~P:|O}'^OW&dqu&dq!P&dq#_&dq#a&dq#b&dq#d&dq#e&dq#f&dq#g&dq#h&dq#i&dq#k&dq#o&dq#r&dq&^&dq&_&dq&n&dq&v&dqY&dq#p&dqs&dqq&dq|&dq~O|-hO~P##nO!W-lO$O-lO&PSO&R!qO~O!P-oO~O$Z-pO&PSO&R!qO~O!b%vO#p-rOq!`X!P!`X~O!P-tO~P9oO!P-tO~P:|O!P-wO~P9oO|-yO~P#)QO![$aO#p-zO~O!P-|O~O!b-}O~OY.QOZ$lO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%}TO&P(_O&R(^O&XUO~PFdOY.QO!P.RO~O%Q(hO%U(iOZ%Vq_%Vq`%Vqa%Vqb%Vqc%Vqe%Vqg%Vqh%Vqp%Vqv%Vqw%Vqz%Vq}%Vq!P%Vq!S%Vq!T%Vq!U%Vq!V%Vq!W%Vq!X%Vq!Y%Vq!Z%Vq![%Vq!]%Vq!^%Vq!_%Vq!u%Vq!z%Vq#f%Vq#r%Vq#t%Vq#u%Vq#y%Vq#z%Vq$W%Vq$Y%Vq$`%Vq$c%Vq$e%Vq$h%Vq$l%Vq$n%Vq$s%Vq$u%Vq$w%Vq$y%Vq$|%Vq%O%Vq%w%Vq%}%Vq&P%Vq&R%Vq&X%Vq&t%Vq|%Vq$a%Vq$q%Vq~Ou#OO%}TO}&oi!P&oi!m&oi~O&n&bOq!ga&^!ga~O!m%gO}&lq!P&lq~O|.^O~P]Op.`Ow&vOz&tO&PSO&R!qO&_#YO~O!P.aO~Oq,^O}&ra!P&ra~O})]O~P:|Oq.gO|&yX~O|.iO~Oq,cOY&za~Oq.mO|&kX~O|.oO~Ow.pO~Oq!aXu!aX!P!aX!b!aX%}!aX~OZ&QX~P#N{OZUX~P#N{O!P.qO~OZ.rO~OW^yZ#XXu^y!P^y!b^y#]^y#_^y#a^y#b^y#d^y#e^y#f^y#g^y#h^y#i^y#k^y#o^y#r^y&^^y&_^y&n^y&v^yY^y#p^ys^yq^y|^y~OY%`aq%`a!P%`a~P9oO!P#nyY#ny#p#nys#nyq#ny|#ny~P9oO}'^Oq!|a|!|a!P!|a~OZ#xO}'^Oq!|a|!|a!P!|a~O%}TO&P#SO&R#SOq%jX|%jX!P%jX~PFdOq-[O|&sa!P&sa~O|!}X~P$wO|/PO~Os/QO~P9oOW%jO!P/RO~OW%jO$Q/WO&PSO&R!qO!P&|P~OW%jO$U/XO~O!P/YO~O!b%vO#p/[Oq!`X!P!`X~OY/^O~O!P/_O~P9oO#p/`O~P9oO!b/bO~OY/cOZ$lO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%}TO&P(_O&R(^O&XUO~PFdOW#[Ou&[X%}&[X&P&[X&R&[X'O&[X~O&_#YO~P$)QOu#OO%}TO'O/eO&P%SX&R%SX~O&n&bOq!gi&^!gi~Op/iO&PSO&R!qO~OW*iOZ#xO~O!P/kO~OY&SXq&SX~P9oO})]Oq%nX|%nX~P:|Oq.gO|&ya~O!b/nO~O})fOq%cX|%cX~P:|Oq.mO|&ka~OY/qO~O!P/rO~OZ/sO~O}'^Oq!|i|!|i!P!|i~O|!}a~P$wOW%jO!P/wO~OW%jOq/xO!P&|X~OY/|O~P9oOY0OO~OY%Xq!P%Xq~P9oO'O/eO&P%Sa&R%Sa~OY0TO~O!P0WO~Ou#OO!P0YO!Z0ZO%}TO~OY0[O~Oq/xO!P&|a~O!P0_O~OW%jOq/xO!P&}X~OY0aO~P9oOY0bO~OY%Xy!P%Xy~P9oOu#OO%}TO&P%ua&R%ua'O%ua~OY0cO~O!P0dO~Ou#OO!P0eO!Z0fO%}TO~OW%jOq%ra!P%ra~Oq/xO!P&}a~O!P0jO~Ou#OO!P0jO!Z0kO%}TO~O!P0lO~O!P0nO~O#p&QXY&QXs&QXq&QX|&QX~P&bO#pUXYUXsUXqUX|UX~P(iO`Q_P#g%y&P&Xc&X~",
      goto: "#+S'OPPPP'P'd*x.OP'dPP.d.h0PPPPPP1nP3ZPP4v7l:[<z=d?[PPP?bPA{PPPBu3ZPDqPPElPFcFkPPPPPPPPPPPPGvH_PKjKrLOLjLpLvNiNmNmNuP! U!!^!#R!#]P!#r!!^P!#x!$S!!y!$cP!%S!%^!%d!!^!%g!%mFcFc!%q!%{!&O3Z!'m3Z3Z!)iP.hP!)mPP!*_PPPPPP.hP.h!+O.hPP.hP.hPP.h!,g!,qPP!,w!-QPPPPPPPP'PP'PPP!-U!-U!-i!-UPP!-UP!-UP!.S!.VP!-U!.m!-UP!-UP!.p!.sP!-UP!-UP!-UP!-UP!-U!-UP!-UP!.wP!.}!/Q!/WP!-U!/d!/gP!/o!0R!4T!4Z!4a!5g!5m!5{!7R!7X!7_!7i!7o!7u!7{!8R!8X!8_!8e!8k!8q!8w!8}!9T!9_!9e!9o!9uPPP!9{!-U!:pP!>WP!?[P!Ap!BW!E]3ZPPP!F|!Jm!MaPP#!P#!SP#$`#$f#&V#&f#&n#'p#(Y#)T#)^#)a#)oP#)r#*OP#*V#*^P#*aP#*lP#*o#*r#*u#*y#+PstOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y'urOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$]$_$e$l$m$n$o$p$q%O%S%V%Z%^%_%b%d%g%k%u%v%{%|&R&S&[&]&`&b&d&i'X'^'_'`'e'h'i'm'n'p'{'|(O(T(U(`(l(t(v({(})O)Q)R)])f)o)p*P*T*W*l*o*p*q*z*{+O+T+d+f+h+i+l+o+r+s+x+},W,Y,^,`,u-[-^-a-r-t-}.R.V.g.m/O/[/_/b/d/n/q0R0X0Z0[0f0h0k0r#xhO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kt!sT!Q!S!T!{!}$k%p+]+^+_+`-k-m/W/X/x0oQ#mdS&Y#`(}Q&l#oU&q#t$g,ZQ&x#vW(b%O+s.R/dU)Y%j'v+bQ)Z%kS)u&S,WU*f&s-R._Q*k&yQ,t*TQ-P*iQ.j,cR.t,uu!sT!Q!S!T!{!}$k%p+]+^+_+`-k-m/W/X/x0oT%l!r)l#{qO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0k#zlO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kX(c%O+s.R/d$TVO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0k$TkO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0k&O[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s,Y,^,`-^-r-t-}.R.g.m/O/[/_/b/d/n0Z0f0k0rQ&Q#[Q)s&RV.T+x.X/e&O[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s,Y,^,`-^-r-t-}.R.g.m/O/[/_/b/d/n0Z0f0k0rV.T+x.X/e&O]OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s,Y,^,`-^-r-t-}.R.g.m/O/[/_/b/d/n0Z0f0k0rV.U+x.X/eS#Z[.TS$f!O&tS&s#t$gQ&y#vQ)V%dQ-R*iR._,Z$kZO`copx!Y![!_!a#Y#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$_$l$m$n$o$p$q%O%d%g%k%v&b&d'_'`'i'm(O(T(U(t)Q)R)])f)o)p*P*l*o+T+d+h+i+l+o+s,Y,^,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kQ&O#YR,k)p&P_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s+x,Y,^,`-^-r-t-}.R.X.g.m/O/[/_/b/d/e/n0Z0f0k0r!o#QY!e!x#R#T#`#n$]%R%S%V%^%u%|&S&[&`'X'|(`(l({(}*T*p*z+f+r+},W,u-a.V/q0R0X0[0h$SkO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kQ$m!UQ$n!VQ$s!ZQ$|!`R+p(WQ#yiS'q$e*hQ*e&rQ+X'rS,[)T)UQ-O*gQ-Y*vQ.b,]Q.x-QQ.{-ZQ/j.`Q/u.yR0V/iQ'a$bW*[&m'b'c'dQ+W'qU,x*]*^*_Q-X*vQ-f+XS.u,y,zS.z-Y-ZQ/t.vR/v.{]!mP!o'^*q-^/OreOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!gP!o'^*q-^/OW#b`#e%b&]Q'}$oW(d%O+s.R/dS*U&i*WS*w'e-[S*|'h+OR.X+xh#VY!W!e#n#s%V'|*T*z+f,u-aQ)j%wQ)v&WR,o)y#xnOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0k^!kP!g!o'^*q-^/Ov#TY!W#`#n#s%w&W&[&`'|(`(})y*T+f+r,u.W/hQ#g`Q$b{Q$c|Q$d}W%S!e%V*z-aS%Y!h(vQ%`!iQ&m#pQ&n#qQ&o#rQ(u%ZS(y%^({Q*R&eS*v'e-[R-Z*wU)h%v)f.mR+V'p[!mP!o'^*q-^/OT*}'h+O^!iP!g!o'^*q-^/OQ'd$bQ'l$dQ*_&mQ*d&oV*{'h*|+OQ%[!hR,S(vQ(s%YR,R(u#znO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kQ%c!kS(l%S(yR(|%`T#e`%bU#c`#e%bR)z&]Q%f!lQ(n%UQ(r%XQ,U(zR.],VrvOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!mP!o'^*q-^/OQ%P!bQ%a!jQ%i!pQ'[$ZQ([$|Q(k%QQ(p%WQ+z(iR.Y+yrtOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!mP!o'^*q-^/OS*V&i*WT*}'h+OQ'c$bS*^&m'dR,z*_Q'b$bQ'g$cU*]&m'c'dQ*a&nS,y*^*_R.v,zQ*u'`R+Q'iQ'k$dS*c&o'lR,}*dQ'j$dU*b&o'k'lS,|*c*dR.w,}rtOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!mP!o'^*q-^/OT*}'h+OQ'f$cS*`&n'gR,{*aQ*x'eR.|-[R-`*yQ&j#mR*Z&lT*V&i*WQ%e!lS(q%X%fR,P(rR)R%dWk%O+s.R/d#{lO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0k$SiO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kU&r#t$g,ZS*g&s._Q-Q*iR.y-RT'o$e'p!_#|m#a$r$z$}&w&z&{'O'P'Q'R'S'W'Z)[)g+S+g+j-T-V-e-v-{.e/Z/a/}0Q!]$Pm#a$r$z$}&w&z&{'O'P'R'S'W'Z)[)g+S+g+j-T-V-e-v-{.e/Z/a/}0Q#{nO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0ka)^%k)],`.g/n0Z0f0kQ)`%kR.k,cQ't$hQ)b%oR,f)cT+Y's+ZsvOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YruOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YQ$w!]R$y!^R$p!XrvOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YR(O$oR$q!XR(V$sT+k(U+lX(f%P(g(k+{R+y(hQ.W+xR/h.XQ(j%PQ+w(gQ+|(kR.Z+{R%Q!bQ(e%OV.P+s.R/dQxOQ#lcW$`x#l)Q,YQ)Q%dR,Y)RrXOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Yn!fP!o#e&]&i'^'e'h*W*q+O+x-[-^/Ol!zX!f#P#_#i$[%Z%_%{&R'n'{)O0r!j#PY!e!x#T#`#n$]%S%V%^%u%|&S&[&`'X'|(`(l({(}*T*p*z+f+r+},W,u-a.V/q0R0X0[0hQ#_`Q#ia#d$[op!Y!_!a#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$l%g%k%v&b&d'_'`'i'm(O(T(t)])f)o*P*l*o+T+h+i+o,^,`-r-t-}.g.m/[/_/b/n0Z0f0kS%Z!h(vS%_!i*{S%{#Y)pQ&R#[S'n$e'pY'{$o%O+s.R/dQ)O%bR0r$YQ!uUR%m!uQ)q&OR,l)q^#RY#`$]'X'|(`*px%R!e!x#n%V%^%|&S&[&`({(}*T*z+f+r,W,u-a.V0R[%t#R%R%u+}0X0hS%u#T%SQ+}(lQ0X/qR0h0[Q*m&{R-U*mQ!oPU%h!o*q/OQ*q'^R/O-^!pbOP`cx![!o#e#l$_$m$n$o$p$q%O%b%d&]&i'^'e'h(U)Q)R*W*q+O+d+l+s+x,Y-[-^.R/O/dY!yX!f#_'{)OT#jb!yQ.n,gR/p.nQ%x#VR)k%xQ&c#fS*O&c.[R.[,QQ(w%[R,T(wQ&^#cR){&^Q,_)WR.d,_Q+O'hR-b+OQ-]*xR.}-]Q*W&iR,v*WQ'p$eR+U'pQ&f#gR*S&fQ.h,aR/m.hQ,d)`R.l,dQ+Z'sR-g+ZQ-k+]R/T-kQ/y/US0^/y0`R0`/{Q+l(UR-x+lQ(g%PS+v(g+{R+{(kQ/f.VR0S/fQ+t(eR.S+t`wOcx#l%d)Q)R,YQ$t![Q']$_Q'y$mQ'z$nQ(Q$pQ(R$qS+k(U+lR-q+d'dsOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$]$_$e$l$m$n$o$p$q%O%S%V%Z%^%_%b%d%g%u%v%{%|&R&S&[&]&`&b&d&i'X'^'_'`'e'h'i'm'n'p'{'|(O(T(U(`(l(t(v({(})O)Q)R)f)o)p*P*T*W*l*o*p*q*z*{+O+T+d+f+h+i+l+o+r+s+x+},W,Y,^,u-[-^-a-r-t-}.R.V.m/O/[/_/b/d/q0R0X0[0h0ra)_%k)],`.g/n0Z0f0kQ!rTQ$h!QQ$i!SQ$j!TQ%o!{Q%q!}Q'x$kQ)c%pQ)l0oS-i+]+_Q-m+^Q-n+`Q/S-kS/U-m/WQ/{/XR0]/x%uSOT`cdopx!Q!S!T!Y![!_!a!{!}#`#l#o#t#u#v#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$g$k$l$m$n$o$p$q%O%d%j%k%p%v&S&d&s&y'm'v(O(T(U(})Q)R)])f*P*T*i*l*o+T+]+^+_+`+b+d+h+i+l+o+s,W,Y,Z,`,c,u-R-k-m-r-t-}.R._.g.m/W/X/[/_/b/d/n/x0Z0f0k0oQ)a%kQ,a)]S.f,`/nQ/l.gQ0g0ZQ0i0fR0m0krmOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,YS#a`$lQ$WoQ$^pQ$r!YQ$z!_Q$}!aQ&w#uQ&z#wY&{#x$o+h-t/_Q&}#|Q'O#}Q'P$OQ'Q$PQ'R$QQ'S$RQ'T$SQ'U$TQ'V$UQ'W$VQ'Z$Z^)[%k)].g/n0Z0f0kU)g%v)f.mQ*Q&dQ+S'mQ+g(OQ+j(TQ,p*PQ-T*lQ-V*oQ-e+TQ-v+iQ-{+oQ.e,`Q/Z-rQ/a-}Q/}/[R0Q/b#xgO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o,Y,`-r-t-}.g.m/[/_/b/n0Z0f0kW(a%O+s.R/dR)S%drYOcx![#l$_$m$n$p$q%d(U)Q)R+d+l,Y[!eP!o'^*q-^/OW!xX$[%{'{Q#``Q#ne#S$]op!Y!_!a#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$l%k%v&d'm(O(T)])f*P*l*o+T+h+i+o,`-r-t-}.g.m/[/_/b/n0Z0f0kQ%V!gS%^!i*{d%|#Y%g&b'_'`'i(t)o)p,^Q&S#_Q&[#bS&`#e&]Q'X$YQ'|$oW(`%O+s.R/dQ({%_Q(}%bS*T&i*WQ*p0rS*z'h+OQ+f'}Q+r(dQ,W)OQ,u*UQ-a*|S.V+x.XR0R/e&O_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$l$m$n$o$p$q%O%_%b%d%g%k%v%{&]&b&d&i'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s+x,Y,^,`-^-r-t-}.R.X.g.m/O/[/_/b/d/e/n0Z0f0k0rQ$e!OQ'r$fR*h&t&ZWOPX`ceopx!O!Y![!_!a!g!i!o#Y#[#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Y$Z$[$_$f$l$m$n$o$p$q%O%_%b%d%g%k%v%{&R&]&b&d&i&t'^'_'`'h'i'm'{'}(O(T(U(d(t)O)Q)R)])f)o)p*P*U*W*l*o*q*{*|+O+T+d+h+i+l+o+s+x,Y,^,`-^-r-t-}.R.X.g.m/O/[/_/b/d/e/n0Z0f0k0rR&P#Y$QjOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kQ#f`Q&O#YQ'Y$YU)W%g'`'iQ)}&bQ*s'_Q,Q(tQ,j)oQ,k)pR.c,^Q)n%}R,i)m$SfO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$T$U$V$Z$_$l$m$n$o$p$q%O%d%k%v&d'm(O(T(U)Q)R)])f*P*l*o+T+d+h+i+l+o+s,Y,`-r-t-}.R.g.m/[/_/b/d/n0Z0f0kT&p#t,ZQ&|#xQ(P$oQ-u+hQ/]-tR0P/_]!nP!o'^*q-^/O#PaOPX`bcx![!f!o!y#_#e#l$_$m$n$o$p$q%O%b%d&]&i'^'e'h'{(U)O)Q)R*W*q+O+d+l+s+x,Y-[-^.R/O/dU#WY!W'|Q%T!eU&k#n#s+fQ(o%VS,s*T*zT.s,u-aj#UY!W!e#n#s%V%w&W)y*T*z,u-aU&V#`&`(}Q)x&[Q+e'|Q+q(`Q-s+fQ.O+rQ/g.WR0U/hQ)i%vQ,g)fR/o.mR,h)f`!jP!o'^'h*q+O-^/OT%W!g*|R%]!hW%U!e%V*z-aQ(z%^R,V({S#d`%bR&a#eQ)X%gT*t'`'iR*y'e[!lP!o'^*q-^/OR%X!gR#h`R,b)]R)a%kT-j+]-kQ/V-mR/z/WR/z/X",
      nodeNames: "\u26A0 LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp LogicOp BitOp BitOp BitOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource ClassContent",
      maxTerm: 276,
      nodeProps: [
        ["isolate", -4, 1, 2, 18, 19, ""],
        ["group", -26, 4, 47, 76, 77, 82, 87, 92, 145, 147, 150, 151, 153, 156, 158, 161, 163, 165, 167, 172, 174, 176, 178, 180, 181, 183, 191, "Statement", -25, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 39, 40, 41, 99, 100, 102, 103, 106, 118, 120, 122, 125, 127, 130, "Expression", -7, 23, 24, 25, 26, 27, 29, 34, "Type"],
        ["openedBy", 10, "(", 44, "{"],
        ["closedBy", 11, ")", 45, "}"]
      ],
      propSources: [javaHighlighting],
      skippedNodes: [0, 1, 2],
      repeatNodeCount: 28,
      tokenData: "#'f_R!_OX%QXY'fYZ)bZ^'f^p%Qpq'fqr*|rs,^st%Qtu4euv5zvw7[wx8rxyAZyzAwz{Be{|CZ|}Dq}!OE_!O!PFx!P!Q! r!Q!R!,h!R![!0`![!]!>p!]!^!@Q!^!_!@n!_!`!BX!`!a!B{!a!b!Di!b!c!EX!c!}!LT!}#O!Mj#O#P%Q#P#Q!NW#Q#R!Nt#R#S4e#S#T%Q#T#o4e#o#p# h#p#q#!U#q#r##n#r#s#$[#s#y%Q#y#z'f#z$f%Q$f$g'f$g#BY4e#BY#BZ#$x#BZ$IS4e$IS$I_#$x$I_$I|4e$I|$JO#$x$JO$JT4e$JT$JU#$x$JU$KV4e$KV$KW#$x$KW&FU4e&FU&FV#$x&FV;'S4e;'S;=`5t<%lO4eS%VV&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS%qO&YSS%tVOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZS&^VOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS&vP;=`<%l%QS&|UOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZS'cP;=`<%l&Z_'mk&YS%yZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qs#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%Q_)iY&YS%yZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XZ*^Y%yZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XV+TX#tP&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QU+wV#_Q&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT,aXOY,|YZ%lZr,|rs3Ys#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T-PXOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT-qX&YSOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT.cVcPOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZT.}V&YSOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT/iW&YSOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0UWOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0sOcPP0vTOY0RYZ0RZ;'S0R;'S;=`1V<%lO0RP1YP;=`<%l0RT1`XOY,|YZ%lZr,|rs1{s#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T2QUcPOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZT2gVOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT3PP;=`<%l-lT3VP;=`<%l,|T3_VcPOY&ZYZ%lZr&Zrs3ts;'S&Z;'S;=`'`<%lO&ZT3yR&WSXY4SYZ4`pq4SP4VRXY4SYZ4`pq4SP4eO&XP_4lb&YS&PZOY%QYZ%lZr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o$g%Q$g;'S4e;'S;=`5t<%lO4e_5wP;=`<%l4eU6RX#hQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%QU6uV#]Q&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV7cZ&nR&YSOY%QYZ%lZr%Qrs%qsv%Qvw8Uw!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%QU8]V#aQ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT8wZ&YSOY9jYZ%lZr9jrs:xsw9jwx%Qx#O9j#O#P<S#P;'S9j;'S;=`AT<%lO9jT9oX&YSOY%QYZ%lZr%Qrs%qsw%Qwx:[x;'S%Q;'S;=`&s<%lO%QT:cVbP&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT:{XOY&ZYZ%lZr&Zrs&ysw&Zwx;hx;'S&Z;'S;=`'`<%lO&ZT;mVbPOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT<XZ&YSOY<zYZ%lZr<zrs=rsw<zwx9jx#O<z#O#P9j#P;'S<z;'S;=`?^<%lO<zT=PZ&YSOY<zYZ%lZr<zrs=rsw<zwx:[x#O<z#O#P%Q#P;'S<z;'S;=`?^<%lO<zT=uZOY>hYZ%lZr>hrs?dsw>hwx;hx#O>h#O#P&Z#P;'S>h;'S;=`@}<%lO>hT>kZOY<zYZ%lZr<zrs=rsw<zwx:[x#O<z#O#P%Q#P;'S<z;'S;=`?^<%lO<zT?aP;=`<%l<zT?gZOY>hYZ%lZr>hrs@Ysw>hwx;hx#O>h#O#P&Z#P;'S>h;'S;=`@}<%lO>hP@]VOY@YZw@Ywx@rx#O@Y#P;'S@Y;'S;=`@w<%lO@YP@wObPP@zP;=`<%l@YTAQP;=`<%l>hTAWP;=`<%l9j_AbVZZ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVBOVYR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVBnX$ZP&YS#gQOY%QYZ%lZr%Qrs%qs!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%QVCbZ#fR&YSOY%QYZ%lZr%Qrs%qs{%Q{|DT|!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%QVD[V#rR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVDxVqR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVEf[#fR&YSOY%QYZ%lZr%Qrs%qs}%Q}!ODT!O!_%Q!_!`6n!`!aF[!a;'S%Q;'S;=`&s<%lO%QVFcV&xR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_GPZWY&YSOY%QYZ%lZr%Qrs%qs!O%Q!O!PGr!P!Q%Q!Q![IQ![;'S%Q;'S;=`&s<%lO%QVGwX&YSOY%QYZ%lZr%Qrs%qs!O%Q!O!PHd!P;'S%Q;'S;=`&s<%lO%QVHkV&qR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTIXc&YS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![IQ![!f%Q!f!gJd!g!hKQ!h!iJd!i#R%Q#R#SNz#S#W%Q#W#XJd#X#YKQ#Y#ZJd#Z;'S%Q;'S;=`&s<%lO%QTJkV&YS`POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTKV]&YSOY%QYZ%lZr%Qrs%qs{%Q{|LO|}%Q}!OLO!O!Q%Q!Q![Lp![;'S%Q;'S;=`&s<%lO%QTLTX&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lp![;'S%Q;'S;=`&s<%lO%QTLwc&YS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lp![!f%Q!f!gJd!g!h%Q!h!iJd!i#R%Q#R#SNS#S#W%Q#W#XJd#X#Y%Q#Y#ZJd#Z;'S%Q;'S;=`&s<%lO%QTNXZ&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lp![#R%Q#R#SNS#S;'S%Q;'S;=`&s<%lO%QT! PZ&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![IQ![#R%Q#R#SNz#S;'S%Q;'S;=`&s<%lO%Q_! y]&YS#gQOY%QYZ%lZr%Qrs%qsz%Qz{!!r{!P%Q!P!Q!)e!Q!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%Q_!!wX&YSOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{;'S!!r;'S;=`!'s<%lO!!r_!#iT&YSOz!#xz{!$[{;'S!#x;'S;=`!$y<%lO!#xZ!#{TOz!#xz{!$[{;'S!#x;'S;=`!$y<%lO!#xZ!$_VOz!#xz{!$[{!P!#x!P!Q!$t!Q;'S!#x;'S;=`!$y<%lO!#xZ!$yOQZZ!$|P;=`<%l!#x_!%SXOY!%oYZ!#dZr!%ors!'ysz!%oz{!(i{;'S!%o;'S;=`!)_<%lO!%o_!%rXOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{;'S!!r;'S;=`!'s<%lO!!r_!&dZ&YSOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{!P!!r!P!Q!'V!Q;'S!!r;'S;=`!'s<%lO!!r_!'^V&YSQZOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!'vP;=`<%l!!r_!'|XOY!%oYZ!#dZr!%ors!#xsz!%oz{!(i{;'S!%o;'S;=`!)_<%lO!%o_!(lZOY!!rYZ!#dZr!!rrs!%Psz!!rz{!&_{!P!!r!P!Q!'V!Q;'S!!r;'S;=`!'s<%lO!!r_!)bP;=`<%l!%o_!)lV&YSPZOY!)eYZ%lZr!)ers!*Rs;'S!)e;'S;=`!+X<%lO!)e_!*WVPZOY!*mYZ%lZr!*mrs!+_s;'S!*m;'S;=`!,b<%lO!*m_!*rVPZOY!)eYZ%lZr!)ers!*Rs;'S!)e;'S;=`!+X<%lO!)e_!+[P;=`<%l!)e_!+dVPZOY!*mYZ%lZr!*mrs!+ys;'S!*m;'S;=`!,b<%lO!*mZ!,OSPZOY!+yZ;'S!+y;'S;=`!,[<%lO!+yZ!,_P;=`<%l!+y_!,eP;=`<%l!*mT!,ou&YS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!/S!P!Q%Q!Q![!0`![!d%Q!d!e!3j!e!f%Q!f!gJd!g!hKQ!h!iJd!i!n%Q!n!o!2U!o!q%Q!q!r!5h!r!z%Q!z!{!7`!{#R%Q#R#S!2r#S#U%Q#U#V!3j#V#W%Q#W#XJd#X#YKQ#Y#ZJd#Z#`%Q#`#a!2U#a#c%Q#c#d!5h#d#l%Q#l#m!7`#m;'S%Q;'S;=`&s<%lO%QT!/Za&YS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![IQ![!f%Q!f!gJd!g!hKQ!h!iJd!i#W%Q#W#XJd#X#YKQ#Y#ZJd#Z;'S%Q;'S;=`&s<%lO%QT!0gi&YS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!/S!P!Q%Q!Q![!0`![!f%Q!f!gJd!g!hKQ!h!iJd!i!n%Q!n!o!2U!o#R%Q#R#S!2r#S#W%Q#W#XJd#X#YKQ#Y#ZJd#Z#`%Q#`#a!2U#a;'S%Q;'S;=`&s<%lO%QT!2]V&YS_POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT!2wZ&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!0`![#R%Q#R#S!2r#S;'S%Q;'S;=`&s<%lO%QT!3oY&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4_!R!S!4_!S;'S%Q;'S;=`&s<%lO%QT!4f`&YS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4_!R!S!4_!S!n%Q!n!o!2U!o#R%Q#R#S!3j#S#`%Q#`#a!2U#a;'S%Q;'S;=`&s<%lO%QT!5mX&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6Y!Y;'S%Q;'S;=`&s<%lO%QT!6a_&YS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6Y!Y!n%Q!n!o!2U!o#R%Q#R#S!5h#S#`%Q#`#a!2U#a;'S%Q;'S;=`&s<%lO%QT!7e_&YSOY%QYZ%lZr%Qrs%qs!O%Q!O!P!8d!P!Q%Q!Q![!:r![!c%Q!c!i!:r!i#T%Q#T#Z!:r#Z;'S%Q;'S;=`&s<%lO%QT!8i]&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9b![!c%Q!c!i!9b!i#T%Q#T#Z!9b#Z;'S%Q;'S;=`&s<%lO%QT!9gc&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9b![!c%Q!c!i!9b!i!r%Q!r!sKQ!s#R%Q#R#S!8d#S#T%Q#T#Z!9b#Z#d%Q#d#eKQ#e;'S%Q;'S;=`&s<%lO%QT!:yi&YS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!<h!P!Q%Q!Q![!:r![!c%Q!c!i!:r!i!n%Q!n!o!2U!o!r%Q!r!sKQ!s#R%Q#R#S!=r#S#T%Q#T#Z!:r#Z#`%Q#`#a!2U#a#d%Q#d#eKQ#e;'S%Q;'S;=`&s<%lO%QT!<ma&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9b![!c%Q!c!i!9b!i!r%Q!r!sKQ!s#T%Q#T#Z!9b#Z#d%Q#d#eKQ#e;'S%Q;'S;=`&s<%lO%QT!=w]&YSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!:r![!c%Q!c!i!:r!i#T%Q#T#Z!:r#Z;'S%Q;'S;=`&s<%lO%QV!>wX#pR&YSOY%QYZ%lZr%Qrs%qs![%Q![!]!?d!];'S%Q;'S;=`&s<%lO%QV!?kV&vR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!@XV!PR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!@uY&_Z&YSOY%QYZ%lZr%Qrs%qs!^%Q!^!_!Ae!_!`+p!`;'S%Q;'S;=`&s<%lO%QU!AlX#iQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%QV!B`X!bR&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QV!CSY&^R&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`!a!Cr!a;'S%Q;'S;=`&s<%lO%QU!CyY#iQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6n!`!a!Ae!a;'S%Q;'S;=`&s<%lO%Q_!DrV&bX#oQ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!E`X%}Z&YSOY%QYZ%lZr%Qrs%qs#]%Q#]#^!E{#^;'S%Q;'S;=`&s<%lO%QV!FQX&YSOY%QYZ%lZr%Qrs%qs#b%Q#b#c!Fm#c;'S%Q;'S;=`&s<%lO%QV!FrX&YSOY%QYZ%lZr%Qrs%qs#h%Q#h#i!G_#i;'S%Q;'S;=`&s<%lO%QV!GdX&YSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!HP#Y;'S%Q;'S;=`&s<%lO%QV!HUX&YSOY%QYZ%lZr%Qrs%qs#f%Q#f#g!Hq#g;'S%Q;'S;=`&s<%lO%QV!HvX&YSOY%QYZ%lZr%Qrs%qs#Y%Q#Y#Z!Ic#Z;'S%Q;'S;=`&s<%lO%QV!IhX&YSOY%QYZ%lZr%Qrs%qs#T%Q#T#U!JT#U;'S%Q;'S;=`&s<%lO%QV!JYX&YSOY%QYZ%lZr%Qrs%qs#V%Q#V#W!Ju#W;'S%Q;'S;=`&s<%lO%QV!JzX&YSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!Kg#Y;'S%Q;'S;=`&s<%lO%QV!KnV&tR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!L[b&RZ&YSOY%QYZ%lZr%Qrs%qst%Qtu!LTu!Q%Q!Q![!LT![!c%Q!c!}!LT!}#R%Q#R#S!LT#S#T%Q#T#o!LT#o$g%Q$g;'S!LT;'S;=`!Md<%lO!LT_!MgP;=`<%l!LT_!MqVuZ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!N_VsR&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QU!N{X#eQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6n!`;'S%Q;'S;=`&s<%lO%QV# oV}R&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_#!_Z'OX#dQ&YSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6n!`#p%Q#p#q##Q#q;'S%Q;'S;=`&s<%lO%QU##XV#bQ&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV##uV|R&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT#$cV#uP&YSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_#%Ru&YS%yZ&PZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o#y%Q#y#z'f#z$f%Q$f$g'f$g#BY4e#BY#BZ#$x#BZ$IS4e$IS$I_#$x$I_$I|4e$I|$JO#$x$JO$JT4e$JT$JU#$x$JU$KV4e$KV$KW#$x$KW&FU4e&FU&FV#$x&FV;'S4e;'S;=`5t<%lO4e",
      tokenizers: [0, 1, 2, 3],
      topRules: { "Program": [0, 3], "ClassContent": [1, 194] },
      dynamicPrecedences: { "27": 1, "232": -1, "243": -1 },
      specialized: [{ term: 231, get: (value) => spec_identifier5[value] || -1 }],
      tokenPrec: 7144
    });
  }
});

// ../../node_modules/@codemirror/lang-java/dist/index.js
var dist_exports7 = {};
__export(dist_exports7, {
  java: () => java,
  javaLanguage: () => javaLanguage
});
function java() {
  return new LanguageSupport(javaLanguage);
}
var javaLanguage;
var init_dist20 = __esm({
  "../../node_modules/@codemirror/lang-java/dist/index.js"() {
    init_dist19();
    init_dist5();
    javaLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "java",
      parser: /* @__PURE__ */ parser7.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
            TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
            LabeledStatement: flatIndent,
            SwitchBlock: (context) => {
              let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
              return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
            },
            Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            BlockComment: () => null,
            Statement: /* @__PURE__ */ continuedIndent({ except: /^{/ })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            ["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody ConstructorBody InterfaceBody ArrayInitializer"]: foldInside,
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          })
        ]
      }),
      languageData: {
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:case |default:|\{|\})$/
      }
    });
  }
});

// ../../node_modules/@lezer/json/dist/index.js
var jsonHighlighting, parser8;
var init_dist21 = __esm({
  "../../node_modules/@lezer/json/dist/index.js"() {
    init_dist6();
    init_dist4();
    jsonHighlighting = styleTags({
      String: tags.string,
      Number: tags.number,
      "True False": tags.bool,
      PropertyName: tags.propertyName,
      Null: tags.null,
      ", :": tags.separator,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });
    parser8 = LRParser.deserialize({
      version: 14,
      states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#ClOOQO'#Cr'#CrQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CtOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59W,59WO!iQPO,59WOVQPO,59QOqQPO'#CmO!nQPO,59`OOQO1G.k1G.kOVQPO'#CnO!vQPO,59aOOQO1G.r1G.rOOQO1G.l1G.lOOQO,59X,59XOOQO-E6k-E6kOOQO,59Y,59YOOQO-E6l-E6l",
      stateData: "#O~OeOS~OQSORSOSSOTSOWQO_ROgPO~OVXOgUO~O^[O~PVO[^O~O]_OVhX~OVaO~O]bO^iX~O^dO~O]_OVha~O]bO^ia~O",
      goto: "!kjPPPPPPkPPkqwPPPPk{!RPPP!XP!e!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
      nodeNames: "\u26A0 JsonText True False Null Number String } { Object Property PropertyName : , ] [ Array",
      maxTerm: 25,
      nodeProps: [
        ["isolate", -2, 6, 11, ""],
        ["openedBy", 7, "{", 14, "["],
        ["closedBy", 8, "}", 15, "]"]
      ],
      propSources: [jsonHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 2,
      tokenData: "(|~RaXY!WYZ!W]^!Wpq!Wrs!]|}$u}!O$z!Q!R%T!R![&c![!]&t!}#O&y#P#Q'O#Y#Z'T#b#c'r#h#i(Z#o#p(r#q#r(w~!]Oe~~!`Wpq!]qr!]rs!xs#O!]#O#P!}#P;'S!];'S;=`$o<%lO!]~!}Og~~#QXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#m~#pR!Q![#y!c!i#y#T#Z#y~#|R!Q![$V!c!i$V#T#Z$V~$YR!Q![$c!c!i$c#T#Z$c~$fR!Q![!]!c!i!]#T#Z!]~$rP;=`<%l!]~$zO]~~$}Q!Q!R%T!R![&c~%YRT~!O!P%c!g!h%w#X#Y%w~%fP!Q![%i~%nRT~!Q![%i!g!h%w#X#Y%w~%zR{|&T}!O&T!Q![&Z~&WP!Q![&Z~&`PT~!Q![&Z~&hST~!O!P%c!Q![&c!g!h%w#X#Y%w~&yO[~~'OO_~~'TO^~~'WP#T#U'Z~'^P#`#a'a~'dP#g#h'g~'jP#X#Y'm~'rOR~~'uP#i#j'x~'{P#`#a(O~(RP#`#a(U~(ZOS~~(^P#f#g(a~(dP#i#j(g~(jP#X#Y(m~(rOQ~~(wOW~~(|OV~",
      tokenizers: [0],
      topRules: { "JsonText": [0, 1] },
      tokenPrec: 0
    });
  }
});

// ../../node_modules/@codemirror/lang-json/dist/index.js
var dist_exports8 = {};
__export(dist_exports8, {
  json: () => json,
  jsonLanguage: () => jsonLanguage,
  jsonParseLinter: () => jsonParseLinter
});
function getErrorPosition(error, doc2) {
  let m;
  if (m = error.message.match(/at position (\d+)/))
    return Math.min(+m[1], doc2.length);
  if (m = error.message.match(/at line (\d+) column (\d+)/))
    return Math.min(doc2.line(+m[1]).from + +m[2] - 1, doc2.length);
  return 0;
}
function json() {
  return new LanguageSupport(jsonLanguage);
}
var jsonParseLinter, jsonLanguage;
var init_dist22 = __esm({
  "../../node_modules/@codemirror/lang-json/dist/index.js"() {
    init_dist21();
    init_dist5();
    jsonParseLinter = () => (view) => {
      try {
        JSON.parse(view.state.doc.toString());
      } catch (e) {
        if (!(e instanceof SyntaxError))
          throw e;
        const pos = getErrorPosition(e, view.state.doc);
        return [{
          from: pos,
          message: e.message,
          severity: "error",
          to: pos
        }];
      }
      return [];
    };
    jsonLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "json",
      parser: /* @__PURE__ */ parser8.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Object: /* @__PURE__ */ continuedIndent({ except: /^\s*\}/ }),
            Array: /* @__PURE__ */ continuedIndent({ except: /^\s*\]/ })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "Object Array": foldInside
          })
        ]
      }),
      languageData: {
        closeBrackets: { brackets: ["[", "{", '"'] },
        indentOnInput: /^\s*[\}\]]$/
      }
    });
  }
});

// ../../node_modules/@codemirror/lang-less/dist/index.js
var dist_exports9 = {};
__export(dist_exports9, {
  less: () => less,
  lessCompletionSource: () => lessCompletionSource,
  lessLanguage: () => lessLanguage
});
function isAlpha3(ch2) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isDigit2(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
function less() {
  return new LanguageSupport(lessLanguage, lessLanguage.data.of({ autocomplete: lessCompletionSource }));
}
var descendantOp2, Unit2, openArgList, space4, argList, descendant2, unitToken2, lessHighlighting, spec_identifier6, spec_AtKeyword2, parser9, lessLanguage, lessCompletionSource;
var init_dist23 = __esm({
  "../../node_modules/@codemirror/lang-less/dist/index.js"() {
    init_dist5();
    init_dist12();
    init_dist6();
    init_dist4();
    descendantOp2 = 110;
    Unit2 = 1;
    openArgList = 2;
    space4 = [
      9,
      10,
      11,
      12,
      13,
      32,
      133,
      160,
      5760,
      8192,
      8193,
      8194,
      8195,
      8196,
      8197,
      8198,
      8199,
      8200,
      8201,
      8202,
      8232,
      8233,
      8239,
      8287,
      12288
    ];
    argList = /* @__PURE__ */ new ExternalTokenizer((input, stack) => {
      if (input.next == 40) {
        let prev = input.peek(-1);
        if (isAlpha3(prev) || isDigit2(prev) || prev == 95 || prev == 45)
          input.acceptToken(openArgList, 1);
      }
    });
    descendant2 = /* @__PURE__ */ new ExternalTokenizer((input) => {
      if (space4.indexOf(input.peek(-1)) > -1) {
        let { next: next2 } = input;
        if (isAlpha3(next2) || next2 == 95 || next2 == 35 || next2 == 46 || next2 == 91 || next2 == 58 || next2 == 45)
          input.acceptToken(descendantOp2);
      }
    });
    unitToken2 = /* @__PURE__ */ new ExternalTokenizer((input) => {
      if (space4.indexOf(input.peek(-1)) < 0) {
        let { next: next2 } = input;
        if (next2 == 37) {
          input.advance();
          input.acceptToken(Unit2);
        }
        if (isAlpha3(next2)) {
          do {
            input.advance();
          } while (isAlpha3(input.next));
          input.acceptToken(Unit2);
        }
      }
    });
    lessHighlighting = /* @__PURE__ */ styleTags({
      "import charset namespace keyframes media supports when": tags.definitionKeyword,
      "from to selector": tags.keyword,
      NamespaceName: tags.namespace,
      KeyframeName: tags.labelName,
      TagName: tags.tagName,
      ClassName: tags.className,
      PseudoClassName: /* @__PURE__ */ tags.constant(tags.className),
      IdName: tags.labelName,
      "FeatureName PropertyName PropertyVariable": tags.propertyName,
      AttributeName: tags.attributeName,
      NumberLiteral: tags.number,
      KeywordQuery: tags.keyword,
      UnaryQueryOp: tags.operatorKeyword,
      "CallTag ValueName": tags.atom,
      VariableName: tags.variableName,
      "AtKeyword Interpolation": /* @__PURE__ */ tags.special(tags.variableName),
      Callee: tags.operatorKeyword,
      Unit: tags.unit,
      "UniversalSelector NestingSelector": tags.definitionOperator,
      MatchOp: tags.compareOperator,
      "ChildOp SiblingOp, LogicOp": tags.logicOperator,
      BinOp: tags.arithmeticOperator,
      Important: tags.modifier,
      "Comment LineComment": tags.blockComment,
      ColorLiteral: tags.color,
      "ParenthesizedContent StringLiteral": tags.string,
      Escape: /* @__PURE__ */ tags.special(tags.string),
      ": ...": tags.punctuation,
      "PseudoOp #": tags.derefOperator,
      "; ,": tags.separator,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });
    spec_identifier6 = { __proto__: null, lang: 40, "nth-child": 40, "nth-last-child": 40, "nth-of-type": 40, "nth-last-of-type": 40, dir: 40, "host-context": 40, and: 244, or: 244, not: 74, only: 74, url: 86, "url-prefix": 86, domain: 86, regexp: 86, when: 117, selector: 142, from: 172, to: 174 };
    spec_AtKeyword2 = { __proto__: null, "@import": 126, "@plugin": 126, "@media": 152, "@charset": 156, "@namespace": 160, "@keyframes": 166, "@supports": 178 };
    parser9 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "@^O!gQWOOO!nQaO'#CeOOQP'#Cd'#CdO$RQWO'#CgO$xQaO'#EaO%cQWO'#CiO%kQWO'#DZO%pQWO'#D^O%uQaO'#DfOOQP'#Es'#EsO'YQWO'#DlO'yQWO'#DyO(QQWO'#D{O(xQWO'#D}O)TQWO'#EQO'bQWO'#EWO)YQ`O'#FTO)]Q`O'#FTO)hQ`O'#FTO)vQWO'#EYOOQO'#Er'#ErOOQO'#FV'#FVOOQO'#Ec'#EcO){QWO'#EqO*WQWO'#EqQOQWOOOOQP'#Ch'#ChOOQP,59R,59RO$RQWO,59RO*bQWO'#EdO+PQWO,58|O+_QWO,59TO%kQWO,59uO%pQWO,59xO*bQWO,59{O*bQWO,59}OOQO'#De'#DeO*bQWO,5:OO,bQpO'#E}O,iQWO'#DkOOQO,58|,58|O(QQWO,58|O,pQWO,5:{OOQO,5:{,5:{OOQT'#Cl'#ClO-UQeO,59TO.cQ[O,59TOOQP'#D]'#D]OOQP,59u,59uOOQO'#D_'#D_O.hQpO,59xOOQO'#EZ'#EZO.pQ`O,5;oOOQO,5;o,5;oO/OQWO,5:WO/VQWO,5:WOOQS'#Dn'#DnO/rQWO'#DsO/yQ!fO'#FRO0eQWO'#DtOOQS'#FS'#FSO+YQWO,5:eO'bQWO'#DrOOQS'#Cu'#CuO(QQWO'#CwO0jQ!hO'#CyO2^Q!fO,5:gO2oQWO'#DWOOQS'#Ex'#ExO(QQWO'#DQOOQO'#EP'#EPO2tQWO,5:iO2yQWO,5:iOOQO'#ES'#ESO3RQWO,5:lO3WQ!fO,5:rO3iQ`O'#EkO.pQ`O,5;oOOQO,5:|,5:|O3zQWO,5:tOOQO,5:},5:}O4XQWO,5;]OOQO-E8a-E8aOOQP1G.m1G.mOOQP'#Ce'#CeO5RQaO,5;OOOQP'#Df'#DfOOQO-E8b-E8bOOQO1G.h1G.hO(QQWO1G.hO5fQWO1G.hO5nQeO1G.oO.cQ[O1G.oOOQP1G/a1G/aO6{QpO1G/dO7fQaO1G/gO8cQaO1G/iO9`QaO1G/jO:]Q!fO'#FOO:yQ!fO'#ExOOQO'#FO'#FOOOQO,5;i,5;iO<^QWO,5;iO<iQWO,5:VO<nQ!fO1G.hOOQO1G0g1G0gO=PQWO'#CnOOQP1G.o1G.oO=WQWO'#CqOOQP1G/d1G/dO(QQWO1G/dO=_Q`O1G1ZOOQO1G1Z1G1ZO=mQWO1G/rO=rQ!fO'#FQO>WQWO1G/rO>]Q!fO'#DnO>qQWO,5:ZO>vQ!fO,5:_OOQO'#DP'#DPO'bQWO,5:]O?XQWO'#DwOOQS,5:b,5:bO?`QWO,5:dO'bQWO'#EiO?gQWO,5;mO*bQWO,5:`OOQO1G0P1G0PO?uQ!fO,5:^O@aQ!fO,59cOOQS,59e,59eO(QQWO,59iOOQS,59n,59nO@rQWO,59pOOQO1G0R1G0RO@yQ#tO,59rOARQ!fO,59lOOQO1G0T1G0TOBrQWO1G0TOBwQWO'#ETOOQO1G0W1G0WOOQO1G0^1G0^OOQO,5;V,5;VOOQO-E8i-E8iOCVQ!fO1G0bOCvQWO1G0`O%kQWO'#E_O$RQWO'#E`OEZQWO'#E^OOQO1G0b1G0bPEkQWO'#EcO<nQ!fO7+$SOOQO7+$S7+$SO(QQWO7+$SOOQP7+$Z7+$ZOOQP7+%O7+%OO(QQWO7+%OOEpQ!fO'#EeOF}QWO,5;jO(QQWO,5;jOOQO,5;j,5;jO+gQpO'#EgOG[QWO1G1TOOQO1G1T1G1TOOQO1G/q1G/qOGgQaO'#EvOGnQWO,59YOGsQWO'#EwOG}QWO,59]OHSQ!fO7+%OOOQO7+&u7+&uOOQO7+%^7+%^O(QQWO'#EhOHeQWO,5;lOHmQWO7+%^O(QQWO1G/uOOQS1G/y1G/yOOQS1G/w1G/wOHrQWO,5:cOHwQ!fO1G0OOOQS1G0O1G0OOIYQ!fO,5;TOOQO-E8g-E8gOItQaO1G/zOOQS1G.}1G.}OOQS1G/T1G/TOI{Q!fO1G/[OOQS1G/[1G/[OJ^QWO1G/^OOQO7+%o7+%oOJcQYO'#CyO+YQWO'#EjOJkQWO,5:oOOQO,5:o,5:oOJyQ!fO'#ElO(QQWO'#ElOL^QWO7+%|OOQO7+%|7+%|OOQO7+%z7+%zOOQO,5:y,5:yOOQO,5:z,5:zOLqQaO,5:xOOQO,5:x,5:xOOQO<<Gn<<GnO<nQ!fO<<GnOMRQ!fO<<HjOOQO-E8c-E8cOMdQWO1G1UOOQO,5;R,5;ROOQO-E8e-E8eOOQO7+&o7+&oOMqQWO,5;bOOQP1G.t1G.tO(QQWO'#EfOMyQWO,5;cOOQT1G.w1G.wOOQP<<Hj<<HjONRQ!fO,5;SOOQO-E8f-E8fO/OQWO<<HxONgQWO7+%aOOQS1G/}1G/}OOQS7+%j7+%jOOQS7+%f7+%fOOQS7+$v7+$vOOQS7+$x7+$xOOQO,5;U,5;UOOQO-E8h-E8hOOQO1G0Z1G0ZONnQ!fO,5;WOOQO-E8j-E8jOOQO<<Ih<<IhOOQO1G0d1G0dOOQOAN=YAN=YOOQPAN>UAN>UO!!RQWO,5;QOOQO-E8d-E8dO!!]QWOAN>dOOQS<<H{<<H{OOQOG24OG24O",
      stateData: "!!n~O#dOSROSSOS~OVXOYXO^TO_TOfaOgbOoaOpWOyVO!OUO!aYO!nZO!p[O!r]O!u^O!{_O#hPO#iRO~O#a#eP~P]O^XX^!}X_XXcXXjXXp!}XyXX!OXX!UXX!ZXX![XX!^XX#PXX#aXX#bXX#iXX#oXX#pXX#p!}X#x!}X!]XX~O#hjO~O^oO_oOcmOyqO!OpO!UrO#bsO#ilO#otO#ptO~OjvO![yO!^wO#P{O!Z#TX#a#TX!]#TX~P$WOd!OO#h|O~O#h!PO~O#h!RO~O#h!TO#p!VO#x!VO^!YX^#wX_!YXc!YXj!YXy!YX!O!YX!U!YX!Z!YX![!YX!^!YX#P!YX#a!YX#b!YX#i!YX#o!YX#p!YX!]!YX~Oj!XOn!WO~Og!^Oj!ZOo!^Op!^Ou!`O!i!]O#h!YO~O!^#uP~P'bOf!fOg!fOh!fOj!bOl!fOn!fOo!fOp!fOu!gO{!eO#h!aO#m!cO~On!iO{!eO#h!hO~O#h!kO~Op!nO#p!VO#x!VO^#wX~OjvO#p!VO#x!VO^#wX~O^!qO~O!Z!rO#a#eX!]#eX~O#a#eX!]#eX~P]OVXOYXO^TO_TOp!xOyVO!OUO#h!vO#iRO~OcmOjvO![!{O!^wO~Od#OO#h|O~Of!fOg#VOh!fOj!bOl!fOn!fOo!fOp!fOu!gO{!eO#h!aO#m!cO#s#WO~Oa#XO~P+gO!]#eP~P]O![!{O!^wO#P#]O!Z#Ta#a#Ta!]#Ta~OQ#^O^]a_]ac]aj]ay]a!O]a!U]a!Z]a![]a!^]a#P]a#a]a#b]a#i]a#o]a#p]a!]]aa]a~OQ#`O~Ow#aO!S#bO~Op!nO#p#dO#x#dO^#wa~O!Z#uP~P'bOa#tP~P(QOg!^Oj!ZOo!^Op!^Ou!`O!i!]O~O#h#hO~P/^OQ#mOc#pOr#lOy#oO#n#kO!^#uX!Z#uXa#uX~Oj#rO~OP#vOQmXrmXymX!ZmX#nmX^mXamXcmXfmXgmXhmXjmXlmXnmXomXpmXumX{mX#hmX#mmX!^mX#PmX#amXwmX!]mX~OQ#`Or#wOy#yO!Z#zO#n#kO~Oj#{O~O!Z#}O~On$OO{!eO~O!^$PO~OQ#mOr#lOy#oO!^wO#n#kO~O#h!TO^#_Xp#_X#p#_X#x#_X~O!O$WO!^wO#i$XO~P(QO!Z!rO#a#ea!]#ea~O^oO_oOyqO!OpO!UrO#bsO#ilO#otO#ptO~Oc#Waj#Wa![#Wa!^#Waa#Wa~P4dO![$_O!^wO~OQ#^O^]i_]ic]ij]iy]i!O]i!U]i!Z]i![]i!^]i#P]i#a]i#b]i#i]i#o]i#p]i!]]ia]i~Ow$aO!S$bO~O^oO_oOyqO!OpO#ilO~Oc!Tij!Ti!U!Ti!Z!Ti![!Ti!^!Ti#P!Ti#a!Ti#b!Ti#o!Ti#p!Ti!]!Tia!Ti~P7TOc!Vij!Vi!U!Vi!Z!Vi![!Vi!^!Vi#P!Vi#a!Vi#b!Vi#o!Vi#p!Vi!]!Via!Vi~P7TOc!Wij!Wi!U!Wi!Z!Wi![!Wi!^!Wi#P!Wi#a!Wi#b!Wi#o!Wi#p!Wi!]!Wia!Wi~P7TOQ#`O^$eOr#wOy#yO#n#kOa#rXc#rX!Z#rX~P(QO#s$fOQ#lX^#lXa#lXc#lXf#lXg#lXh#lXj#lXl#lXn#lXo#lXp#lXr#lXu#lXy#lX{#lX!Z#lX#h#lX#m#lX#n#lX~Oa$iOc$gO!Z$gO~O!]$jO~OQ#`Or#wOy#yO!^wO#n#kO~Oa#jP~P*bOa#kP~P(QOp!nO#p$pO#x$pO^#wi~O!Z$qO~OQ#`Oc$rOr#wOy#yO#n#kOa#tX~Oa$tO~OQ!bX^!dXa!bXr!bXy!bX#n!bX~O^$uO~OQ#mOa$vOr#lOy#oO#n#kO~Oa#uP~P'bOw$zO~P(QOc#pO!^#ua!Z#uaa#ua~OQ#mOr#lOy#oO#n#kOc!fa!^!fa!Z!faa!fa~OQ#`Oa%OOr#wOy#yO#n#kO~Ow%RO~P(QOn%SO|%SO~OQ#`Or#wOy#yO#n#kO!Zta^taatactaftagtahtajtaltantaotaptauta{ta#hta#mta!^ta#Pta#atawta!]ta~O!Z%TO~O!]%XO!x%VO!y%VO#m%UO~OQ#`Oc%ZOr#wOy#yO#P%]O#n#kO!Z#Oi#a#Oi!]#Oi~P(QO!Z%^OV!|iY!|i^!|i_!|if!|ig!|io!|ip!|iy!|i!O!|i!a!|i!n!|i!p!|i!r!|i!u!|i!{!|i#a!|i#h!|i#i!|i!]!|i~OjvO!Z#QX#a#QX!]#QX~P*bO!Z!rO~OQ#`Or#wOy#yO#n#kOa#XXc#XXf#XXg#XXh#XXj#XXl#XXn#XXo#XXp#XXu#XX{#XX!Z#XX#h#XX#m#XX~Oa#rac#ra!Z#ra~P(QOa%jOc$gO!Z$gO~Oa#jX~P$WOa%lO~Oc%mOa#kX~P(QOa%oO~OQ#`Or#wOw%pOy#yO#n#kO~Oc$rOa#ta~On%sO~Oa%uO~OQ#`Or#wOw%vOy#yO#n#kO~OQ#mOr#lOy#oO#n#kOc#]a!^#]a!Z#]aa#]a~Oa%wO~P4dOQ#`Or#wOw%xOy#yO#n#kO~Oa%yO~OP#vO!^mX~O!]%|O!x%VO!y%VO#m%UO~OQ#`Or#wOy#yO#n#kOc#`Xf#`Xg#`Xh#`Xj#`Xl#`Xn#`Xo#`Xp#`Xu#`X{#`X!Z#`X#P#`X#a#`X#h#`X#m#`X!]#`X~Oc%ZO#P&PO!Z#Oq#a#Oq!]#Oq~P(QOjvO!Z#Qa#a#Qa!]#Qa~P4dOQ#`Or#wOw&SOy#yO#n#kO~Oa#ric#ri!Z#ri~P(QOcmOa#ja~Oc%mOa#ka~OQ#`Or#wOy#yO#n#kOa#[ac#[a~Oa&WO~P(QOQ#`Or#wOy#yO#n#kOc#`af#`ag#`ah#`aj#`al#`an#`ao#`ap#`au#`a{#`a!Z#`a#P#`a#a#`a#h#`a#m#`a!]#`a~Oa#Yac#Ya~P(QO!Z&XO~Of#dpg#m|#iRSRr~",
      goto: "0^#zPPPPPP#{P$Q$^P$Q$j$QPP$sP$yPP%PPPP%jP%jP&ZPPP%jP'O%jP%jP%jP'jPP$QP(a$Q(jP$QP$Q$Q(p$QPPPP(w#{P)f)f)q)f)f)f)fP)f)t)f#{P#{P#{P){#{P*O*RPP#{P#{*U*aP*f*i*i*a*a*l*s*}+e+k+q+w+},T,_PPPP,e,k,pPP-[-_-bPPPP.u/UP/[/_/k0QP0VVdOhweXOhmrsuw#^#r$YeQOhmrsuw#^#r$YQkRQ!ulR%`$XQ}TR!}oQ#_}R$`!}Q#_!Or#x!d#U#[#f#u#|$U$]$c$o$y%Q%Y%d%e%q%}R$`#O!]!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&T![!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&TT%V$P%WY#l![!m#j#t${s#w!d#U#[#f#u#|$U$]$c$o$y%Q%Y%d%e%q%}![!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&TQ!i]R$O!jQ!QUQ#PpR%_$WQ!SVR#QqZuS!w$k$}%aQxSS!znzQ#s!_Q$R!mQ$V!qS$^!|#[Q%c$]Q%z%VR&R%dc!^Z_!W!Z!`#l#m#p%sR#i!ZZ#n![!m#j#t${R!j]R!l^R$Q!lU`OhwQ!UWR$S!nVeOhwR$Z!qR$Y!qShOwR!thQnSS!yn%kR%k$kQ$d#UQ$m#`Y%f$d$m%g%t&TQ%g$eQ%t$uR&T%mQ%n$mR&U%nQ$h#YR%i$hQ$s#fR%r$sQ#q![R$|#qQ%W$PR%{%WQ!o`Q#c!UT$T!o#cQ%[$UR&O%[QiOR#ZwVfOhwUSOhwQ!wmQ#RrQ#SsQ#TuQ$k#^Q$}#rR%a$YR$l#^R$n#`Q!d[S#Uv$gQ#[yQ#f!XQ#u!bQ#|!gQ$U!qQ$]!{d$c#U#`$d$e$m$u%g%m%t&TQ$o#bQ$y#oQ%P#wQ%Q#yS%Y$U%[Q%d$_Q%e$bQ%q$rR%}%ZQzSQ!pbQ!|nQ%b$YR&Q%aQ#YvR%h$gR#g!XQ!_ZQ#e!WQ$x#mR&V%sW![Z!W#m%sQ!m_Q#j!ZQ#t!`Q$w#lR${#pVcOhwSgOwR!sh",
      nodeNames: "\u26A0 Unit ( Comment LineComment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName ) ArgList , PseudoClassName ArgList VariableName AtKeyword PropertyVariable ValueName ( ParenthesizedValue ColorLiteral NumberLiteral StringLiteral Escape Interpolation BinaryExpression BinOp LogicOp UnaryExpression UnaryQueryOp CallExpression ] SubscriptExpression [ CallLiteral CallTag ParenthesizedContent IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp InterpolatedSelector ; when } { Block ImportStatement import KeywordQuery FeatureQuery FeatureName BinaryQuery UnaryQuery ParenthesizedQuery SelectorQuery selector CallQuery ArgList SubscriptQuery MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports DetachedRuleSet PropertyName Declaration Important Inclusion IdSelector ClassSelector Inclusion CallExpression",
      maxTerm: 133,
      nodeProps: [
        ["isolate", -3, 3, 4, 30, ""],
        ["openedBy", 17, "(", 59, "{"],
        ["closedBy", 26, ")", 60, "}"]
      ],
      propSources: [lessHighlighting],
      skippedNodes: [0, 3, 4],
      repeatNodeCount: 10,
      tokenData: "!2q~R!ZOX$tX^%l^p$tpq%lqr)Ors-xst/ltu6Zuv$tvw8^wx:Uxy;syz<Uz{<Z{|<t|}BQ}!OBc!O!PDo!P!QFY!Q![Jw![!]Kr!]!^Ln!^!_MP!_!`M{!`!aNl!a!b$t!b!c! m!c!}!&R!}#O!'y#O#P$t#P#Q!([#Q#R!(m#R#T$t#T#o!&R#o#p!)S#p#q!(m#q#r!)e#r#s!)v#s#y$t#y#z%l#z$f$t$f$g%l$g#BY$t#BY#BZ%l#BZ$IS$t$IS$I_%l$I_$I|$t$I|$JO%l$JO$JT$t$JT$JU%l$JU$KV$t$KV$KW%l$KW&FU$t&FU&FV%l&FV;'S$t;'S;=`!2k<%lO$t`$wSOy%Tz;'S%T;'S;=`%f<%lO%T`%YS|`Oy%Tz;'S%T;'S;=`%f<%lO%T`%iP;=`<%l%T~%qh#d~OX%TX^']^p%Tpq']qy%Tz#y%T#y#z']#z$f%T$f$g']$g#BY%T#BY#BZ']#BZ$IS%T$IS$I_']$I_$I|%T$I|$JO']$JO$JT%T$JT$JU']$JU$KV%T$KV$KW']$KW&FU%T&FU&FV']&FV;'S%T;'S;=`%f<%lO%T~'dh#d~|`OX%TX^']^p%Tpq']qy%Tz#y%T#y#z']#z$f%T$f$g']$g#BY%T#BY#BZ']#BZ$IS%T$IS$I_']$I_$I|%T$I|$JO']$JO$JT%T$JT$JU']$JU$KV%T$KV$KW']$KW&FU%T&FU&FV']&FV;'S%T;'S;=`%f<%lO%Tk)RUOy%Tz#]%T#]#^)e#^;'S%T;'S;=`%f<%lO%Tk)jU|`Oy%Tz#a%T#a#b)|#b;'S%T;'S;=`%f<%lO%Tk*RU|`Oy%Tz#d%T#d#e*e#e;'S%T;'S;=`%f<%lO%Tk*jU|`Oy%Tz#c%T#c#d*|#d;'S%T;'S;=`%f<%lO%Tk+RU|`Oy%Tz#f%T#f#g+e#g;'S%T;'S;=`%f<%lO%Tk+jU|`Oy%Tz#h%T#h#i+|#i;'S%T;'S;=`%f<%lO%Tk,RU|`Oy%Tz#T%T#T#U,e#U;'S%T;'S;=`%f<%lO%Tk,jU|`Oy%Tz#b%T#b#c,|#c;'S%T;'S;=`%f<%lO%Tk-RU|`Oy%Tz#h%T#h#i-e#i;'S%T;'S;=`%f<%lO%Tk-lS#PZ|`Oy%Tz;'S%T;'S;=`%f<%lO%T~-{WOY-xZr-xrs.es#O-x#O#P.j#P;'S-x;'S;=`/f<%lO-x~.jOn~~.mRO;'S-x;'S;=`.v;=`O-x~.yXOY-xZr-xrs.es#O-x#O#P.j#P;'S-x;'S;=`/f;=`<%l-x<%lO-x~/iP;=`<%l-xo/qY!OROy%Tz!Q%T!Q![0a![!c%T!c!i0a!i#T%T#T#Z0a#Z;'S%T;'S;=`%f<%lO%Tm0fY|`Oy%Tz!Q%T!Q![1U![!c%T!c!i1U!i#T%T#T#Z1U#Z;'S%T;'S;=`%f<%lO%Tm1ZY|`Oy%Tz!Q%T!Q![1y![!c%T!c!i1y!i#T%T#T#Z1y#Z;'S%T;'S;=`%f<%lO%Tm2QYl]|`Oy%Tz!Q%T!Q![2p![!c%T!c!i2p!i#T%T#T#Z2p#Z;'S%T;'S;=`%f<%lO%Tm2wYl]|`Oy%Tz!Q%T!Q![3g![!c%T!c!i3g!i#T%T#T#Z3g#Z;'S%T;'S;=`%f<%lO%Tm3lY|`Oy%Tz!Q%T!Q![4[![!c%T!c!i4[!i#T%T#T#Z4[#Z;'S%T;'S;=`%f<%lO%Tm4cYl]|`Oy%Tz!Q%T!Q![5R![!c%T!c!i5R!i#T%T#T#Z5R#Z;'S%T;'S;=`%f<%lO%Tm5WY|`Oy%Tz!Q%T!Q![5v![!c%T!c!i5v!i#T%T#T#Z5v#Z;'S%T;'S;=`%f<%lO%Tm5}Sl]|`Oy%Tz;'S%T;'S;=`%f<%lO%Tm6^YOy%Tz!_%T!_!`6|!`!c%T!c!}7a!}#T%T#T#o7a#o;'S%T;'S;=`%f<%lO%Td7TS!SS|`Oy%Tz;'S%T;'S;=`%f<%lO%Tm7h[h]|`Oy%Tz}%T}!O7a!O!Q%T!Q![7a![!c%T!c!}7a!}#T%T#T#o7a#o;'S%T;'S;=`%f<%lO%Ta8c[YPOy%Tz}%T}!O9X!O!Q%T!Q![9X![!c%T!c!}9X!}#T%T#T#o9X#o;'S%T;'S;=`%f<%lO%Ta9`[YP|`Oy%Tz}%T}!O9X!O!Q%T!Q![9X![!c%T!c!}9X!}#T%T#T#o9X#o;'S%T;'S;=`%f<%lO%T~:XWOY:UZw:Uwx.ex#O:U#O#P:q#P;'S:U;'S;=`;m<%lO:U~:tRO;'S:U;'S;=`:};=`O:U~;QXOY:UZw:Uwx.ex#O:U#O#P:q#P;'S:U;'S;=`;m;=`<%l:U<%lO:U~;pP;=`<%l:Uo;xSj_Oy%Tz;'S%T;'S;=`%f<%lO%T~<ZOa~m<bUVPrWOy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%To<{Y#pQrWOy%Tz!O%T!O!P=k!P!Q%T!Q![@p![#R%T#R#SAm#S;'S%T;'S;=`%f<%lO%Tm=pU|`Oy%Tz!Q%T!Q![>S![;'S%T;'S;=`%f<%lO%Tm>ZY#m]|`Oy%Tz!Q%T!Q![>S![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%Tm?OY|`Oy%Tz{%T{|?n|}%T}!O?n!O!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm?sU|`Oy%Tz!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm@^U#m]|`Oy%Tz!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm@w[#m]|`Oy%Tz!O%T!O!P>S!P!Q%T!Q![@p![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%TbAtS#xQ|`Oy%Tz;'S%T;'S;=`%f<%lO%TkBVScZOy%Tz;'S%T;'S;=`%f<%lO%TmBhXrWOy%Tz}%T}!OCT!O!P=k!P!Q%T!Q![@p![;'S%T;'S;=`%f<%lO%TmCYW|`Oy%Tz!c%T!c!}Cr!}#T%T#T#oCr#o;'S%T;'S;=`%f<%lO%TmCy[f]|`Oy%Tz}%T}!OCr!O!Q%T!Q![Cr![!c%T!c!}Cr!}#T%T#T#oCr#o;'S%T;'S;=`%f<%lO%ToDtW#iROy%Tz!O%T!O!PE^!P!Q%T!Q![>S![;'S%T;'S;=`%f<%lO%TlEcU|`Oy%Tz!O%T!O!PEu!P;'S%T;'S;=`%f<%lO%TlE|S#s[|`Oy%Tz;'S%T;'S;=`%f<%lO%T~F_VrWOy%Tz{Ft{!P%T!P!QIl!Q;'S%T;'S;=`%f<%lO%T~FyU|`OyFtyzG]z{Hd{;'SFt;'S;=`If<%lOFt~G`TOzG]z{Go{;'SG];'S;=`H^<%lOG]~GrVOzG]z{Go{!PG]!P!QHX!Q;'SG];'S;=`H^<%lOG]~H^OR~~HaP;=`<%lG]~HiW|`OyFtyzG]z{Hd{!PFt!P!QIR!Q;'SFt;'S;=`If<%lOFt~IYS|`R~Oy%Tz;'S%T;'S;=`%f<%lO%T~IiP;=`<%lFt~IsV|`S~OYIlYZ%TZyIlyzJYz;'SIl;'S;=`Jq<%lOIl~J_SS~OYJYZ;'SJY;'S;=`Jk<%lOJY~JnP;=`<%lJY~JtP;=`<%lIlmJ|[#m]Oy%Tz!O%T!O!P>S!P!Q%T!Q![@p![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%TkKwU^ZOy%Tz![%T![!]LZ!];'S%T;'S;=`%f<%lO%TcLbS_R|`Oy%Tz;'S%T;'S;=`%f<%lO%TkLsS!ZZOy%Tz;'S%T;'S;=`%f<%lO%ThMUUrWOy%Tz!_%T!_!`Mh!`;'S%T;'S;=`%f<%lO%ThMoS|`rWOy%Tz;'S%T;'S;=`%f<%lO%TlNSW!SSrWOy%Tz!^%T!^!_Mh!_!`%T!`!aMh!a;'S%T;'S;=`%f<%lO%TjNsV!UQrWOy%Tz!_%T!_!`Mh!`!a! Y!a;'S%T;'S;=`%f<%lO%Tb! aS!UQ|`Oy%Tz;'S%T;'S;=`%f<%lO%To! rYg]Oy%Tz!b%T!b!c!!b!c!}!#R!}#T%T#T#o!#R#o#p!$O#p;'S%T;'S;=`%f<%lO%Tm!!iWg]|`Oy%Tz!c%T!c!}!#R!}#T%T#T#o!#R#o;'S%T;'S;=`%f<%lO%Tm!#Y[g]|`Oy%Tz}%T}!O!#R!O!Q%T!Q![!#R![!c%T!c!}!#R!}#T%T#T#o!#R#o;'S%T;'S;=`%f<%lO%To!$TW|`Oy%Tz!c%T!c!}!$m!}#T%T#T#o!$m#o;'S%T;'S;=`%f<%lO%To!$r^|`Oy%Tz}%T}!O!$m!O!Q%T!Q![!$m![!c%T!c!}!$m!}#T%T#T#o!$m#o#q%T#q#r!%n#r;'S%T;'S;=`%f<%lO%To!%uSp_|`Oy%Tz;'S%T;'S;=`%f<%lO%To!&W[#h_Oy%Tz}%T}!O!&|!O!Q%T!Q![!&|![!c%T!c!}!&|!}#T%T#T#o!&|#o;'S%T;'S;=`%f<%lO%To!'T[#h_|`Oy%Tz}%T}!O!&|!O!Q%T!Q![!&|![!c%T!c!}!&|!}#T%T#T#o!&|#o;'S%T;'S;=`%f<%lO%Tk!(OSyZOy%Tz;'S%T;'S;=`%f<%lO%Tm!(aSw]Oy%Tz;'S%T;'S;=`%f<%lO%Td!(pUOy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%Tk!)XS!^ZOy%Tz;'S%T;'S;=`%f<%lO%Tk!)jS!]ZOy%Tz;'S%T;'S;=`%f<%lO%To!){Y#oQOr%Trs!*ksw%Twx!.wxy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%Tm!*pZ|`OY!*kYZ%TZr!*krs!+csy!*kyz!+vz#O!*k#O#P!-j#P;'S!*k;'S;=`!.q<%lO!*km!+jSo]|`Oy%Tz;'S%T;'S;=`%f<%lO%T]!+yWOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d<%lO!+v]!,hOo]]!,kRO;'S!+v;'S;=`!,t;=`O!+v]!,wXOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d;=`<%l!+v<%lO!+v]!-gP;=`<%l!+vm!-oU|`Oy!*kyz!+vz;'S!*k;'S;=`!.R;=`<%l!+v<%lO!*km!.UXOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d;=`<%l!*k<%lO!+vm!.tP;=`<%l!*km!.|Z|`OY!.wYZ%TZw!.wwx!+cxy!.wyz!/oz#O!.w#O#P!1^#P;'S!.w;'S;=`!2e<%lO!.w]!/rWOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W<%lO!/o]!0_RO;'S!/o;'S;=`!0h;=`O!/o]!0kXOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W;=`<%l!/o<%lO!/o]!1ZP;=`<%l!/om!1cU|`Oy!.wyz!/oz;'S!.w;'S;=`!1u;=`<%l!/o<%lO!.wm!1xXOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W;=`<%l!.w<%lO!/om!2hP;=`<%l!.w`!2nP;=`<%l$t",
      tokenizers: [descendant2, unitToken2, argList, 0, 1, 2, 3, 4],
      topRules: { "StyleSheet": [0, 5] },
      specialized: [{ term: 116, get: (value) => spec_identifier6[value] || -1 }, { term: 23, get: (value) => spec_AtKeyword2[value] || -1 }],
      tokenPrec: 2180
    });
    lessLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "less",
      parser: /* @__PURE__ */ parser9.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Declaration: /* @__PURE__ */ continuedIndent()
          }),
          /* @__PURE__ */ foldNodeProp.add({
            Block: foldInside
          })
        ]
      }),
      languageData: {
        commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
        indentOnInput: /^\s*\}$/,
        wordChars: "@-"
      }
    });
    lessCompletionSource = /* @__PURE__ */ defineCSSCompletionSource((node) => node.name == "VariableName" || node.name == "AtKeyword");
  }
});

// ../../node_modules/@codemirror/lang-liquid/dist/index.js
var dist_exports10 = {};
__export(dist_exports10, {
  closePercentBrace: () => closePercentBrace,
  liquid: () => liquid,
  liquidCompletionSource: () => liquidCompletionSource,
  liquidLanguage: () => liquidLanguage
});
function wordChar2(code2) {
  return code2 >= 65 && code2 <= 90 || code2 >= 97 && code2 <= 122;
}
function rawTokenizer(endTag2, text5, tagStart4) {
  return new ExternalTokenizer((input) => {
    let start2 = input.pos;
    for (; ; ) {
      let { next: next2 } = input;
      if (next2 == 123 && input.peek(1) == 37) {
        let scan = 2;
        for (; ; scan++) {
          let ch2 = input.peek(scan);
          if (ch2 != 32 && ch2 != 10)
            break;
        }
        let word = "";
        for (; ; scan++) {
          let next3 = input.peek(scan);
          if (!wordChar2(next3))
            break;
          word += String.fromCharCode(next3);
        }
        if (word == endTag2) {
          if (input.pos > start2)
            break;
          input.acceptToken(tagStart4, 2);
          break;
        }
      } else if (next2 < 0) {
        break;
      }
      input.advance();
      if (next2 == 10)
        break;
    }
    if (input.pos > start2)
      input.acceptToken(text5);
  });
}
function completions(words22, type7) {
  return words22.split(" ").map((label) => ({ label, type: type7 }));
}
function findContext(context) {
  var _a2;
  let { state, pos } = context;
  let node = syntaxTree(state).resolveInner(pos, -1).enterUnfinishedNodesBefore(pos);
  let before = ((_a2 = node.childBefore(pos)) === null || _a2 === void 0 ? void 0 : _a2.name) || node.name;
  if (node.name == "FilterName")
    return { type: "filter", node };
  if (context.explicit && before == "|")
    return { type: "filter" };
  if (node.name == "TagName")
    return { type: "tag", node };
  if (context.explicit && before == "{%")
    return { type: "tag" };
  if (node.name == "PropertyName" && node.parent.name == "MemberExpression")
    return { type: "property", node, target: node.parent };
  if (node.name == "." && node.parent.name == "MemberExpression")
    return { type: "property", target: node.parent };
  if (node.name == "MemberExpression" && before == ".")
    return { type: "property", target: node };
  if (node.name == "VariableName")
    return { type: "expression", from: node.from };
  let word = context.matchBefore(/[\w\u00c0-\uffff]+$/);
  if (word)
    return { type: "expression", from: word.from };
  if (context.explicit && node.name != "CommentText" && node.name != "StringLiteral" && node.name != "NumberLiteral" && node.name != "InlineComment")
    return { type: "expression" };
  return null;
}
function resolveProperties(state, node, context, properties3) {
  let path = [];
  for (; ; ) {
    let obj = node.getChild("Expression");
    if (!obj)
      return [];
    if (obj.name == "forloop") {
      return path.length ? [] : forloop;
    } else if (obj.name == "tablerowloop") {
      return path.length ? [] : tablerowloop;
    } else if (obj.name == "VariableName") {
      path.unshift(state.sliceDoc(obj.from, obj.to));
      break;
    } else if (obj.name == "MemberExpression") {
      let name2 = obj.getChild("PropertyName");
      if (name2)
        path.unshift(state.sliceDoc(name2.from, name2.to));
      node = obj;
    } else {
      return [];
    }
  }
  return properties3 ? properties3(path, state, context) : [];
}
function liquidCompletionSource(config2 = {}) {
  let filters = config2.filters ? config2.filters.concat(Filters) : Filters;
  let tags3 = config2.tags ? config2.tags.concat(Tags2) : Tags2;
  let exprs = config2.variables ? config2.variables.concat(Expressions) : Expressions;
  let { properties: properties3 } = config2;
  return (context) => {
    var _a2;
    let cx2 = findContext(context);
    if (!cx2)
      return null;
    let from3 = (_a2 = cx2.from) !== null && _a2 !== void 0 ? _a2 : cx2.node ? cx2.node.from : context.pos;
    let options;
    if (cx2.type == "filter")
      options = filters;
    else if (cx2.type == "tag")
      options = tags3;
    else if (cx2.type == "expression")
      options = exprs;
    else
      options = resolveProperties(context.state, cx2.target, context, properties3);
    return options.length ? { options, from: from3, validFor: /^[\w\u00c0-\uffff]*$/ } : null;
  };
}
function directiveIndent(except) {
  return (context) => {
    let back = except.test(context.textAfter);
    return context.lineIndent(context.node.from) + (back ? 0 : context.unit);
  };
}
function makeLiquid(base5) {
  return tagLanguage.configure({
    wrap: parseMixed((node) => node.type.isTop ? {
      parser: base5.parser,
      overlay: (n) => n.name == "Text" || n.name == "RawText"
    } : null)
  }, "liquid");
}
function liquid(config2 = {}) {
  let base5 = config2.base || baseHTML;
  let lang = base5.language == baseHTML.language ? liquidLanguage : makeLiquid(base5.language);
  return new LanguageSupport(lang, [
    base5.support,
    lang.data.of({ autocomplete: liquidCompletionSource(config2) }),
    base5.language.data.of({ closeBrackets: { brackets: ["{"] } }),
    closePercentBrace
  ]);
}
var interpolationStart, tagStart2, endTagStart, text, endrawTagStart, rawText, endcommentTagStart, commentText, InlineComment, base2, comment2, raw, inlineComment, spec_identifier7, spec_TagName, parser10, Filters, Tags2, Expressions, forloop, tablerowloop, closePercentBrace, tagLanguage, baseHTML, liquidLanguage;
var init_dist24 = __esm({
  "../../node_modules/@codemirror/lang-liquid/dist/index.js"() {
    init_dist5();
    init_dist18();
    init_dist4();
    init_dist();
    init_dist6();
    init_dist2();
    init_dist3();
    interpolationStart = 1;
    tagStart2 = 2;
    endTagStart = 3;
    text = 180;
    endrawTagStart = 4;
    rawText = 181;
    endcommentTagStart = 5;
    commentText = 182;
    InlineComment = 6;
    base2 = /* @__PURE__ */ new ExternalTokenizer((input) => {
      let start2 = input.pos;
      for (; ; ) {
        let { next: next2 } = input;
        if (next2 < 0)
          break;
        if (next2 == 123) {
          let after = input.peek(1);
          if (after == 123) {
            if (input.pos > start2)
              break;
            input.acceptToken(interpolationStart, 2);
            return;
          } else if (after == 37) {
            if (input.pos > start2)
              break;
            let scan = 2, size = 2;
            for (; ; ) {
              let next3 = input.peek(scan);
              if (next3 == 32 || next3 == 10) {
                ++scan;
              } else if (next3 == 35) {
                ++scan;
                for (; ; ) {
                  let comment4 = input.peek(scan);
                  if (comment4 < 0 || comment4 == 10)
                    break;
                  scan++;
                }
              } else if (next3 == 45 && size == 2) {
                size = ++scan;
              } else {
                let end2 = next3 == 101 && input.peek(scan + 1) == 110 && input.peek(scan + 2) == 100;
                input.acceptToken(end2 ? endTagStart : tagStart2, size);
                return;
              }
            }
          }
        }
        input.advance();
        if (next2 == 10)
          break;
      }
      if (input.pos > start2)
        input.acceptToken(text);
    });
    comment2 = /* @__PURE__ */ rawTokenizer("endcomment", commentText, endcommentTagStart);
    raw = /* @__PURE__ */ rawTokenizer("endraw", rawText, endrawTagStart);
    inlineComment = /* @__PURE__ */ new ExternalTokenizer((input) => {
      if (input.next != 35)
        return;
      input.advance();
      for (; ; ) {
        if (input.next == 10 || input.next < 0)
          break;
        if ((input.next == 37 || input.next == 125) && input.peek(1) == 125)
          break;
        input.advance();
      }
      input.acceptToken(InlineComment);
    });
    spec_identifier7 = { __proto__: null, contains: 32, or: 36, and: 36, true: 50, false: 50, empty: 52, forloop: 54, tablerowloop: 56, continue: 58, in: 128, with: 194, for: 196, as: 198, if: 234, endif: 238, unless: 244, endunless: 248, elsif: 252, else: 256, case: 262, endcase: 266, when: 270, endfor: 278, tablerow: 284, endtablerow: 288, break: 292, cycle: 298, echo: 302, render: 306, include: 312, assign: 316, capture: 322, endcapture: 326, increment: 330, decrement: 334 };
    spec_TagName = { __proto__: null, if: 82, endif: 86, elsif: 90, else: 94, unless: 100, endunless: 104, case: 110, endcase: 114, when: 118, for: 126, endfor: 136, tablerow: 142, endtablerow: 146, break: 150, continue: 154, cycle: 158, comment: 164, endcomment: 170, raw: 176, endraw: 182, echo: 186, render: 190, include: 202, assign: 206, capture: 212, endcapture: 216, increment: 220, decrement: 224, liquid: 228 };
    parser10 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "HOQYOPOOOOOP'#F{'#F{OeOaO'#CdOsQhO'#CfO!bQxO'#DQO#{OPO'#DTO$ZOPO'#D^O$iOPO'#DcO$wOPO'#DkO%VOPO'#DsO%eOSO'#EOO%jOQO'#EUO%oOPO'#EhOOOP'#G`'#G`OOOP'#G]'#G]OOOP'#Fz'#FzQYOPOOOOOP-E9y-E9yOOQW'#Cg'#CgO&`Q!jO,59QO&gQ!jO'#G^OsQhO'#CsOOQW'#G^'#G^OOOP,59l,59lO)PQhO,59lOsQhO,59pOsQhO,59tO)ZQhO,59vOsQhO,59yOsQhO,5:OOsQhO,5:SO!]QhO,5:WO!]QhO,5:`O)`QhO,5:dO)eQhO,5:fO)jQhO,5:hO)oQhO,5:kO)tQhO,5:qOsQhO,5:vOsQhO,5:xOsQhO,5;OOsQhO,5;QOsQhO,5;TOsQhO,5;XOsQhO,5;ZO+TQhO,5;]O+[OPO'#CdOOOP,59o,59oO#{OPO,59oO+jQxO'#DWOOOP,59x,59xO$ZOPO,59xO+oQxO'#DaOOOP,59},59}O$iOPO,59}O+tQxO'#DfOOOP,5:V,5:VO$wOPO,5:VO+yQxO'#DqOOOP,5:_,5:_O%VOPO,5:_O,OQxO'#DvOOOS'#GQ'#GQO,TOSO'#ERO,]OSO,5:jOOOQ'#GR'#GRO,bOQO'#EXO,jOQO,5:pOOOP,5;S,5;SO%oOPO,5;SO,oQxO'#EkOOOP-E9x-E9xO,tQ#|O,59SOsQhO,59VOsQhO,59VO,yQhO'#C|OOQW'#F|'#F|O-OQhO1G.lOOOP1G.l1G.lOsQhO,59VOsQhO,59ZO-WQ!jO,59_O-iQ!jO1G/WO-pQhO1G/WOOOP1G/W1G/WO-xQ!jO1G/[O.ZQ!jO1G/`OOOP1G/b1G/bO.lQ!jO1G/eO.}Q!jO1G/jO/qQ!jO1G/nO/xQhO1G/rO/}QhO1G/zOOOP1G0O1G0OOOOP1G0Q1G0QO0SQhO1G0SOOOS1G0V1G0VOOOQ1G0]1G0]O0_Q!jO1G0bO0fQ!jO1G0dO1QQ!jO1G0jO1cQ!jO1G0lO1jQ!jO1G0oO1{Q!jO1G0sO2^Q!jO1G0uO2oQhO'#EsO2vQhO'#ExO2}QhO'#FRO3UQhO'#FYO3]QhO'#F^O3dQhO'#FqOOQW'#Ga'#GaOOQW'#GT'#GTO3kQhO1G0wOsQhO'#EtOsQhO'#EyOsQhO'#E}OOQW'#FP'#FPOsQhO'#FSOsQhO'#FWO!]QhO'#FZO!]QhO'#F_OOQW'#Fc'#FcOOQW'#Fe'#FeO3rQhO'#FfOsQhO'#FhOsQhO'#FjOsQhO'#FmOsQhO'#FoOsQhO'#FrOsQhO'#FvOsQhO'#FxOOOP1G0w1G0wOOOP1G/Z1G/ZO3wQhO,59rOOOP1G/d1G/dO3|QhO,59{OOOP1G/i1G/iO4RQhO,5:QOOOP1G/q1G/qO4WQhO,5:]OOOP1G/y1G/yO4]QhO,5:bOOOS-E:O-E:OOOOP1G0U1G0UO4bQxO'#ESOOOQ-E:P-E:POOOP1G0[1G0[O4gQxO'#EYOOOP1G0n1G0nO4lQhO,5;VOOQW1G.n1G.nOOQW1G.q1G.qO7QQ!jO1G.qOOQW'#DO'#DOO7[QhO,59hOOQW-E9z-E9zOOOP7+$W7+$WO9UQ!jO1G.qO9`Q!jO1G.uOsQhO1G.yO;uQhO7+$rOOOP7+$r7+$rOOOP7+$v7+$vOOOP7+$z7+$zOOOP7+%P7+%POOOP7+%U7+%UOsQhO'#F}O;}QhO7+%YOOOP7+%Y7+%YOsQhO7+%^OsQhO7+%fO<VQhO'#GPO<[QhO7+%nOOOP7+%n7+%nO<dQhO7+%nO<iQhO7+%|OOOP7+%|7+%|O!]QhO'#E`OOQW'#GS'#GSO<qQhO7+&OOsQhO'#E`OOOP7+&O7+&OOOOP7+&U7+&UO=PQhO7+&WOOOP7+&W7+&WOOOP7+&Z7+&ZOOOP7+&_7+&_OOOP7+&a7+&aOOQW,5;_,5;_O2oQhO,5;_OOQW'#Ev'#EvOOQW,5;d,5;dO2vQhO,5;dOOQW'#E{'#E{OOQW,5;m,5;mO2}QhO,5;mOOQW'#FU'#FUOOQW,5;t,5;tO3UQhO,5;tOOQW'#F['#F[OOQW,5;x,5;xO3]QhO,5;xOOQW'#Fa'#FaOOQW,5<],5<]O3dQhO,5<]OOQW'#Ft'#FtOOQW-E:R-E:ROOOP7+&c7+&cO=XQ!jO,5;`O>rQ!jO,5;eO@]Q!jO,5;iOBYQ!jO,5;nOCsQ!jO,5;rOEfQhO,5;uOEkQhO,5;yOEpQhO,5<QOGgQ!jO,5<SOIYQ!jO,5<UOKYQ!jO,5<XOMVQ!jO,5<ZONxQ!jO,5<^O!!cQ!jO,5<bO!$`Q!jO,5<dOOOP1G/^1G/^OOOP1G/g1G/gOOOP1G/l1G/lOOOP1G/w1G/wOOOP1G/|1G/|O!&]QhO,5:nO!&bQhO,5:tOOOP1G0q1G0qOsQhO1G/SO!&gQ!jO7+$eOOOP<<H^<<H^O!&xQ!jO,5<iOOQW-E9{-E9{OOOP<<Ht<<HtO!)ZQ!jO<<HxO!)bQ!jO<<IQOOQW,5<k,5<kOOQW-E9}-E9}OOOP<<IY<<IYO!)iQhO<<IYOOOP<<Ih<<IhO!)qQhO,5:zOOQW-E:Q-E:QOOOP<<Ij<<IjO!)vQ!jO,5:zOOOP<<Ir<<IrOOQW1G0y1G0yOOQW1G1O1G1OOOQW1G1X1G1XOOQW1G1`1G1`OOQW1G1d1G1dOOQW1G1w1G1wO!*eQhO1G1^OsQhO1G1aOsQhO1G1eO!,XQhO1G1lO!-{QhO1G1lO!.QQhO1G1nO!]QhO'#FlOOQW'#GU'#GUO!/tQhO1G1pO!1hQhO1G1uOOOP1G0Y1G0YOOOP1G0`1G0`O!3[Q!jO7+$nOOQW<<HP<<HPOOQW'#Dp'#DpO!5_QhO'#DoOOQW'#GO'#GOO!6xQhOAN>dOOOPAN>dAN>dO!7QQhOAN>lOOOPAN>lAN>lO!7YQhOAN>tOOOPAN>tAN>tOsQhO1G0fO!]QhO1G0fO!7bQ!jO7+&{O!8qQ!jO7+'PO!:QQhO7+'WO!;tQhO,5<WOOQW-E:S-E:SOsQhO,5:ZOOQW-E9|-E9|OOOPG24OG24OOOOPG24WG24WOOOPG24`G24`O!;yQ!jO7+&QOOQW7+&Q7+&QO!<eQhO<<JgO!=uQhO<<JkO!?VQhO<<JrOsQhO1G1rO!@yQ!jO1G/uO!BmQ!jO7+'^",
      stateData: "!Dm~O%OOSUOS~OPROQSO$zPO~O$zPOPWXQWX$yWX~OfeOifOjfOkfOlfOmfOnfOofO%RbO~OuhOvgOyiO}jO!PkO!SlO!XmO!]nO!aoO!ipO!mqO!orO!qsO!ttO!zuO#PvO#RwO#XxO#ZyO#^zO#b{O#d|O#f}O~OPROQSOR!RO$zPO~OPROQSOR!UO$zPO~OPROQSOR!XO$zPO~OPROQSOR![O$zPO~OPROQSOR!_O$zPO~O$|!`O~O${!cO~OPROQSOR!hO$zPO~O]!jO`!qOa!kOb!lOq!mO~OX!pO~P%}Od!rOX%QX]%QX`%QXa%QXb%QXq%QXh%QXv%QX!^%QX#T%QX#U%QXm%QX#i%QX#k%QX#n%QX#r%QX#t%QX#w%QX#{%QX$S%QX$W%QX$Z%QX$]%QX$_%QX$b%QX$d%QX$g%QX$k%QX$m%QX#p%QX#y%QX$i%QXe%QX%R%QX#V%QX$P%QX$U%QX~Oq!mOv!vO~PsOv!yO~Ov#PO~Ov#QO~On#RO~Ov#SO~Ov#TO~Om#oO#U#lO#i#fO#n#gO#r#hO#t#iO#w#jO#{#kO$S#mO$W#nO$Z#pO$]#qO$_#rO$b#sO$d#tO$g#uO$k#vO$m#wO~Ov#xO~P)yO$zPOPWXQWXRWX~O{#zO~O!U#|O~O!Z$OO~O!f$QO~O!k$SO~O$|!`OT!uX~OT$VO~O${!cOS!{X~OS$YO~O#`$[O~O^$]O~O%R$`O~OX$cOq!mO~O]!jO`!qOa!kOb!lOh$fO~Ov$hO~P%}Oq!mOv$hO~O]!jO`!qOa!kOb!lOv$iO~O]!jO`!qOa!kOb!lOv$jO~O]!jO`!qOa!kOb!lOv$kO~O]!jO`!qOa!kOb!lOv$lO~O]!jO`!qOa!kOb!lO!^$mO~Ov$oO~P/`O!b$pO~O!b$qO~Os$uOv$tO!^$rO~Ov$wO~P%}O]!jO`!qOa!kOb!lOv$|O!^$xO#T${O#U${O~O]!jO`!qOa!kOb!lOv$}O~Ov%PO~P%}O]!jO`!qOa!kOb!lOv%QO~O]!jO`!qOa!kOb!lOv%RO~O]!jO`!qOa!kOb!lOv%SO~O#k%VO~P)yO#p%YO~P)yO#y%]O~P)yO$P%`O~P)yO$U%cO~P)yO$i%fO~P)yOv%hO~P)yOn%pO~Ov%xO~Ov%yO~Ov%zO~Ov%{O~Ov%|O~O!w%}O~O!}&OO~Ov&PO~Oa!kOX_i]_iq_ih_iv_i!^_i#T_i#U_im_i#i_i#k_i#n_i#r_i#t_i#w_i#{_i$S_i$W_i$Z_i$]_i$__i$b_i$d_i$g_i$k_i$m_i#p_i#y_i$i_ie_i%R_i#V_i$P_i$U_i~O`!qOb!lO~P4qOs&QOXpaqpavpampa#Upa#ipa#npa#rpa#tpa#wpa#{pa$Spa$Wpa$Zpa$]pa$_pa$bpa$dpa$gpa$kpa$mpa#kpa#ppa#ypa$Ppa$Upa$ipa~O`_ib_i~P4qO`!qOa!kOb!lOXci]ciqcihcivci!^ci#Tci#Ucimci#ici#kci#nci#rci#tci#wci#{ci$Sci$Wci$Zci$]ci$_ci$bci$dci$gci$kci$mci#pci#yci$icieci%Rci#Vci$Pci$Uci~Oq!mOv&SO~Ov&VO!^$mO~On&YO~Ov&[O!^$rO~On&]O~Oq!mOv&^O~Ov&aO!^$xO#T${O#U${O~Oq!mOv&cO~O]!jO`!qOa!kOb!lOm#ha#U#ha#i#ha#k#ha#n#ha#r#ha#t#ha#w#ha#{#ha$S#ha$W#ha$Z#ha$]#ha$_#ha$b#ha$d#ha$g#ha$k#ha$m#ha~O]!jO`!qOa!kOb!lOm#ma#U#ma#i#ma#n#ma#p#ma#r#ma#t#ma#w#ma#{#ma$S#ma$W#ma$Z#ma$]#ma$_#ma$b#ma$d#ma$g#ma$k#ma$m#ma~O]!jO`!qOa!kOb!lOm#qav#qa#U#qa#i#qa#n#qa#r#qa#t#qa#w#qa#{#qa$S#qa$W#qa$Z#qa$]#qa$_#qa$b#qa$d#qa$g#qa$k#qa$m#qa#k#qa#p#qa#y#qa$P#qa$U#qa$i#qa~O]!jO`!qOa!kOb!lOm#va#U#va#i#va#n#va#r#va#t#va#w#va#y#va#{#va$S#va$W#va$Z#va$]#va$_#va$b#va$d#va$g#va$k#va$m#va~Om#zav#za#U#za#i#za#n#za#r#za#t#za#w#za#{#za$S#za$W#za$Z#za$]#za$_#za$b#za$d#za$g#za$k#za$m#za#k#za#p#za#y#za$P#za$U#za$i#za~P/`O!b&kO~O!b&lO~Os&nO!^$rOm$Yav$Ya#U$Ya#i$Ya#n$Ya#r$Ya#t$Ya#w$Ya#{$Ya$S$Ya$W$Ya$Z$Ya$]$Ya$_$Ya$b$Ya$d$Ya$g$Ya$k$Ya$m$Ya#k$Ya#p$Ya#y$Ya$P$Ya$U$Ya$i$Ya~Om$[av$[a#U$[a#i$[a#n$[a#r$[a#t$[a#w$[a#{$[a$S$[a$W$[a$Z$[a$]$[a$_$[a$b$[a$d$[a$g$[a$k$[a$m$[a#k$[a#p$[a#y$[a$P$[a$U$[a$i$[a~P%}O]!jO`!qOa!kOb!lO!^&pOm$^av$^a#U$^a#i$^a#n$^a#r$^a#t$^a#w$^a#{$^a$S$^a$W$^a$Z$^a$]$^a$_$^a$b$^a$d$^a$g$^a$k$^a$m$^a#k$^a#p$^a#y$^a$P$^a$U$^a$i$^a~O]!jO`!qOa!kOb!lOm$aav$aa#U$aa#i$aa#n$aa#r$aa#t$aa#w$aa#{$aa$S$aa$W$aa$Z$aa$]$aa$_$aa$b$aa$d$aa$g$aa$k$aa$m$aa#k$aa#p$aa#y$aa$P$aa$U$aa$i$aa~Om$cav$ca#U$ca#i$ca#n$ca#r$ca#t$ca#w$ca#{$ca$S$ca$W$ca$Z$ca$]$ca$_$ca$b$ca$d$ca$g$ca$k$ca$m$ca#k$ca#p$ca#y$ca$P$ca$U$ca$i$ca~P%}O]!jO`!qOa!kOb!lOm$fa#U$fa#i$fa#n$fa#r$fa#t$fa#w$fa#{$fa$S$fa$W$fa$Z$fa$]$fa$_$fa$b$fa$d$fa$g$fa$i$fa$k$fa$m$fa~O]!jO`!qOa!kOb!lOm$jav$ja#U$ja#i$ja#n$ja#r$ja#t$ja#w$ja#{$ja$S$ja$W$ja$Z$ja$]$ja$_$ja$b$ja$d$ja$g$ja$k$ja$m$ja#k$ja#p$ja#y$ja$P$ja$U$ja$i$ja~O]!jO`!qOa!kOb!lOm$lav$la#U$la#i$la#n$la#r$la#t$la#w$la#{$la$S$la$W$la$Z$la$]$la$_$la$b$la$d$la$g$la$k$la$m$la#k$la#p$la#y$la$P$la$U$la$i$la~Ov&tO~Ov&uO~O]!jO`!qOa!kOb!lOe&wO~O]!jO`!qOa!kOb!lOv$qa!^$qam$qa#U$qa#i$qa#n$qa#r$qa#t$qa#w$qa#{$qa$S$qa$W$qa$Z$qa$]$qa$_$qa$b$qa$d$qa$g$qa$k$qa$m$qa#k$qa#p$qa#y$qa$P$qa$U$qa$i$qa~O]!jO`!qOa!kOb!lO%R&xO~Ov&|O~P!(xOv'OO~P!(xOv'QO!^$rO~Os'RO~O]!jO`!qOa!kOb!lO#V'SOv#Sa!^#Sa#T#Sa#U#Sa~O!^$mOm#ziv#zi#U#zi#i#zi#n#zi#r#zi#t#zi#w#zi#{#zi$S#zi$W#zi$Z#zi$]#zi$_#zi$b#zi$d#zi$g#zi$k#zi$m#zi#k#zi#p#zi#y#zi$P#zi$U#zi$i#zi~O!^$rOm$Yiv$Yi#U$Yi#i$Yi#n$Yi#r$Yi#t$Yi#w$Yi#{$Yi$S$Yi$W$Yi$Z$Yi$]$Yi$_$Yi$b$Yi$d$Yi$g$Yi$k$Yi$m$Yi#k$Yi#p$Yi#y$Yi$P$Yi$U$Yi$i$Yi~On'VO~Oq!mOm$[iv$[i#U$[i#i$[i#n$[i#r$[i#t$[i#w$[i#{$[i$S$[i$W$[i$Z$[i$]$[i$_$[i$b$[i$d$[i$g$[i$k$[i$m$[i#k$[i#p$[i#y$[i$P$[i$U$[i$i$[i~O!^&pOm$^iv$^i#U$^i#i$^i#n$^i#r$^i#t$^i#w$^i#{$^i$S$^i$W$^i$Z$^i$]$^i$_$^i$b$^i$d$^i$g$^i$k$^i$m$^i#k$^i#p$^i#y$^i$P$^i$U$^i$i$^i~Oq!mOm$civ$ci#U$ci#i$ci#n$ci#r$ci#t$ci#w$ci#{$ci$S$ci$W$ci$Z$ci$]$ci$_$ci$b$ci$d$ci$g$ci$k$ci$m$ci#k$ci#p$ci#y$ci$P$ci$U$ci$i$ci~O]!jO`!qOa!kOb!lOXpqqpqvpqmpq#Upq#ipq#npq#rpq#tpq#wpq#{pq$Spq$Wpq$Zpq$]pq$_pq$bpq$dpq$gpq$kpq$mpq#kpq#ppq#ypq$Ppq$Upq$ipq~Os'YOv!cX%R!cXm!cX#U!cX#i!cX#n!cX#r!cX#t!cX#w!cX#{!cX$P!cX$S!cX$W!cX$Z!cX$]!cX$_!cX$b!cX$d!cX$g!cX$k!cX$m!cX$U!cX~Ov'[O%R&xO~Ov']O%R&xO~Ov'^O!^$rO~Om#}q#U#}q#i#}q#n#}q#r#}q#t#}q#w#}q#{#}q$P#}q$S#}q$W#}q$Z#}q$]#}q$_#}q$b#}q$d#}q$g#}q$k#}q$m#}q~P!(xOm$Rq#U$Rq#i$Rq#n$Rq#r$Rq#t$Rq#w$Rq#{$Rq$S$Rq$U$Rq$W$Rq$Z$Rq$]$Rq$_$Rq$b$Rq$d$Rq$g$Rq$k$Rq$m$Rq~P!(xO!^$rOm$Yqv$Yq#U$Yq#i$Yq#n$Yq#r$Yq#t$Yq#w$Yq#{$Yq$S$Yq$W$Yq$Z$Yq$]$Yq$_$Yq$b$Yq$d$Yq$g$Yq$k$Yq$m$Yq#k$Yq#p$Yq#y$Yq$P$Yq$U$Yq$i$Yq~Os'dO~O]!jO`!qOa!kOb!lOv#Sq!^#Sq#T#Sq#U#Sq~O%R&xOm#}y#U#}y#i#}y#n#}y#r#}y#t#}y#w#}y#{#}y$P#}y$S#}y$W#}y$Z#}y$]#}y$_#}y$b#}y$d#}y$g#}y$k#}y$m#}y~O%R&xOm$Ry#U$Ry#i$Ry#n$Ry#r$Ry#t$Ry#w$Ry#{$Ry$S$Ry$U$Ry$W$Ry$Z$Ry$]$Ry$_$Ry$b$Ry$d$Ry$g$Ry$k$Ry$m$Ry~O!^$rOm$Yyv$Yy#U$Yy#i$Yy#n$Yy#r$Yy#t$Yy#w$Yy#{$Yy$S$Yy$W$Yy$Z$Yy$]$Yy$_$Yy$b$Yy$d$Yy$g$Yy$k$Yy$m$Yy#k$Yy#p$Yy#y$Yy$P$Yy$U$Yy$i$Yy~O]!jO`!qOa!kOb!lOv!ci%R!cim!ci#U!ci#i!ci#n!ci#r!ci#t!ci#w!ci#{!ci$P!ci$S!ci$W!ci$Z!ci$]!ci$_!ci$b!ci$d!ci$g!ci$k!ci$m!ci$U!ci~O]!jO`!qOa!kOb!lOm$`qv$`q!^$`q#U$`q#i$`q#n$`q#r$`q#t$`q#w$`q#{$`q$S$`q$W$`q$Z$`q$]$`q$_$`q$b$`q$d$`q$g$`q$k$`q$m$`q#k$`q#p$`q#y$`q$P$`q$U$`q$i$`q~O",
      goto: "7o%UPPPPPPPP%VP%V%g&zPP&zPPP&zPPP&zPPPPPPPP'xP(YP(]PP(](mP(}P(]P(]P(])TP)eP(])kP){P(]PP(]*RPP*c*m*wP(]*}P+_P(]P(]P(]P(]+eP+u+xP(]+{P,],`P(]P(]P,cPPP(]P(]P(],gP,wP(]P(]P(]P,}-_P-oP,}-uP.VP,}P,}P,}.]P.mP,}P,}.s/TP,}/ZP/kP,}P,},}P,}P,}P/q,}P,}P,}/uP0VP,}P,}P0]0{1c2R2]2o3R3X3_3e4TPPPPPP4Z4kP%V7_m^OTUVWX[`!Q!T!W!Z!^!g!vdRehijlmnvwxyz{|!k!l!q!r#f#g#h#j#k#q#r#s#t#u#v#w$f$m$p$q${&Q&k&l'R'Y'dQ!}oQ#OpQ%n#lQ%o#mQ&_$xQ'W&pR'`'S!wfRehijlmnvwxyz{|!k!l!q!r#f#g#h#j#k#q#r#s#t#u#v#w$f$m$p$q${&Q&k&l'R'Y'dm!nch!o!t!u#U#X$g$v%O%q%t&o&sR$a!mm]OTUVWX[`!Q!T!W!Z!^!gmTOTUVWX[`!Q!T!W!Z!^!gQ!PTR#y!QmUOTUVWX[`!Q!T!W!Z!^!gQ!SUR#{!TmVOTUVWX[`!Q!T!W!Z!^!gQ!VVR#}!WmWOTUVWX[`!Q!T!W!Z!^!ga&z&W&X&{&}'T'U'a'ba&y&W&X&{&}'T'U'a'bQ!YWR$P!ZmXOTUVWX[`!Q!T!W!Z!^!gQ!]XR$R!^mYOTUVWX[`!Q!T!W!Z!^!gR!bYR$U!bmZOTUVWX[`!Q!T!W!Z!^!gR!eZR$X!eT$y#V$zm[OTUVWX[`!Q!T!W!Z!^!gQ!f[R$Z!gm#c}#]#^#_#`#a#b#e%U%X%[%_%b%em#]}#]#^#_#`#a#b#e%U%X%[%_%b%eQ%T#]R&d%Um#^}#]#^#_#`#a#b#e%U%X%[%_%b%eQ%W#^R&e%Xm#_}#]#^#_#`#a#b#e%U%X%[%_%b%eQ%Z#_R&f%[m#`}#]#^#_#`#a#b#e%U%X%[%_%b%eQ%^#`R&g%_m#a}#]#^#_#`#a#b#e%U%X%[%_%b%eQ%a#aR&h%bT&q%r&rm#b}#]#^#_#`#a#b#e%U%X%[%_%b%eQ%d#bR&i%eQ`OQ!QTQ!TUQ!WVQ!ZWQ!^XQ!g[_!i`!Q!T!W!Z!^!gSQO`SaQ!Oi!OTUVWX[!Q!T!W!Z!^!gQ!ocQ!uh^$b!o!u$g$v%O&o&sQ$g!tQ$v#UQ%O#XQ&o%qR&s%tQ$n!|S&U$n&jR&j%mQ&{&WQ&}&XW'Z&{&}'a'bQ'a'TR'b'UQ$s#RW&Z$s&m'P'cQ&m%pQ'P&]R'c'VQ!aYR$T!aQ!dZR$W!dQ$z#VR&`$zQ#e}Q%U#]Q%X#^Q%[#_Q%_#`Q%b#aQ%e#b_%g#e%U%X%[%_%b%eQ&r%rR'X&rm_OTUVWX[`!Q!T!W!Z!^!gQcRQ!seQ!thQ!wiQ!xjQ!zlQ!{mQ!|nQ#UvQ#VwQ#WxQ#XyQ#YzQ#Z{Q#[|Q$^!kQ$_!lQ$d!qQ$e!rQ%i#fQ%j#gQ%k#hQ%l#jQ%m#kQ%q#qQ%r#rQ%s#sQ%t#tQ%u#uQ%v#vQ%w#wQ&R$fQ&T$mQ&W$pQ&X$qQ&b${Q&v&QQ'T&kQ'U&lQ'_'RQ'e'YR'f'dm#d}#]#^#_#`#a#b#e%U%X%[%_%b%e",
      nodeNames: "\u26A0 {{ {% {% {% {% InlineComment Template Text }} Interpolation VariableName MemberExpression . PropertyName BinaryExpression contains CompareOp LogicOp AssignmentExpression AssignOp ) ( RangeExpression .. BooleanLiteral empty forloop tablerowloop continue StringLiteral NumberLiteral Filter | FilterName : Tag TagName %} IfDirective Tag if EndTag endif Tag elsif Tag else UnlessDirective Tag unless EndTag endunless CaseDirective Tag case EndTag endcase Tag when , ForDirective Tag for in Parameter ParameterName EndTag endfor TableDirective Tag tablerow EndTag endtablerow Tag break Tag continue Tag cycle Comment Tag comment CommentText EndTag endcomment RawDirective Tag raw RawText EndTag endraw Tag echo Tag render RenderParameter with for as Tag include Tag assign CaptureDirective Tag capture EndTag endcapture Tag increment Tag decrement Tag liquid IfDirective Tag if EndTag endif UnlessDirective Tag unless EndTag endunless Tag elsif Tag else CaseDirective Tag case EndTag endcase Tag when ForDirective Tag EndTag endfor TableDirective Tag tablerow EndTag endtablerow Tag break Tag Tag cycle Tag echo Tag render RenderParameter Tag include Tag assign CaptureDirective Tag capture EndTag endcapture Tag increment Tag decrement",
      maxTerm: 189,
      nodeProps: [
        ["closedBy", 1, "}}", -4, 2, 3, 4, 5, "%}", 22, ")"],
        ["openedBy", 9, "{{", 21, "(", 38, "{%"],
        ["group", -12, 11, 12, 15, 19, 23, 25, 26, 27, 28, 29, 30, 31, "Expression"]
      ],
      skippedNodes: [0, 6],
      repeatNodeCount: 11,
      tokenData: ")Q~RkXY!vYZ!v]^!vpq!vqr#Xrs#duv$Uwx$axy$|yz%R{|%W|}&r}!O&w!O!P'T!Q![&a![!]'e!^!_'j!_!`'r!`!a'j!c!}'z#R#S'z#T#o'z#p#q(p#q#r(u%W;'S'z;'S;:j(j<%lO'z~!{S%O~XY!vYZ!v]^!vpq!v~#[P!_!`#_~#dOa~~#gUOY#dZr#drs#ys;'S#d;'S;=`$O<%lO#d~$OOn~~$RP;=`<%l#d~$XP#q#r$[~$aOv~~$dUOY$aZw$awx#yx;'S$a;'S;=`$v<%lO$a~$yP;=`<%l$a~%ROf~~%WOe~P%ZQ!O!P%a!Q![&aP%dP!Q![%gP%lRoP!Q![%g!g!h%u#X#Y%uP%xR{|&R}!O&R!Q![&XP&UP!Q![&XP&^PoP!Q![&XP&fSoP!O!P%a!Q![&a!g!h%u#X#Y%u~&wO!^~~&zRuv$U!O!P%a!Q![&a~'YQ]S!O!P'`!Q![%g~'eOh~~'jOs~~'oPa~!_!`#_~'wPd~!_!`#__(TV^WuQ%RT!Q!['z!c!}'z#R#S'z#T#o'z%W;'S'z;'S;:j(j<%lO'z_(mP;=`<%l'z~(uOq~~(xP#q#r({~)QOX~",
      tokenizers: [base2, raw, comment2, inlineComment, 0, 1, 2, 3],
      topRules: { "Template": [0, 7] },
      specialized: [{ term: 187, get: (value) => spec_identifier7[value] || -1 }, { term: 37, get: (value) => spec_TagName[value] || -1 }],
      tokenPrec: 0
    });
    Filters = /* @__PURE__ */ completions("abs append at_least at_most capitalize ceil compact concat date default divided_by downcase escape escape_once first floor join last lstrip map minus modulo newline_to_br plus prepend remove remove_first replace replace_first reverse round rstrip size slice sort sort_natural split strip strip_html strip_newlines sum times truncate truncatewords uniq upcase url_decode url_encode where", "function");
    Tags2 = /* @__PURE__ */ completions("cycle comment endcomment raw endraw echo increment decrement liquid if elsif else endif unless endunless case endcase for endfor tablerow endtablerow break continue assign capture endcapture render include", "keyword");
    Expressions = /* @__PURE__ */ completions("empty forloop tablerowloop in with as contains", "keyword");
    forloop = /* @__PURE__ */ completions("first index index0 last length rindex", "property");
    tablerowloop = /* @__PURE__ */ completions("col col0 col_first col_last first index index0 last length rindex rindex0 row", "property");
    closePercentBrace = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text5) => {
      if (text5 != "%" || from3 != to || view.state.doc.sliceString(from3 - 1, to + 1) != "{}")
        return false;
      view.dispatch(view.state.changeByRange((range) => ({
        changes: { from: range.from, to: range.to, insert: "%%" },
        range: EditorSelection.cursor(range.from + 1)
      })), {
        scrollIntoView: true,
        userEvent: "input.type"
      });
      return true;
    });
    tagLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "liquid",
      parser: /* @__PURE__ */ parser10.configure({
        props: [
          /* @__PURE__ */ styleTags({
            "cycle comment endcomment raw endraw echo increment decrement liquid in with as": tags.keyword,
            "empty forloop tablerowloop": tags.atom,
            "if elsif else endif unless endunless case endcase for endfor tablerow endtablerow break continue": tags.controlKeyword,
            "assign capture endcapture": tags.definitionKeyword,
            "contains": tags.operatorKeyword,
            "render include": tags.moduleKeyword,
            VariableName: tags.variableName,
            TagName: tags.tagName,
            FilterName: /* @__PURE__ */ tags.function(tags.variableName),
            PropertyName: tags.propertyName,
            CompareOp: tags.compareOperator,
            AssignOp: tags.definitionOperator,
            LogicOp: tags.logicOperator,
            NumberLiteral: tags.number,
            StringLiteral: tags.string,
            BooleanLiteral: tags.bool,
            InlineComment: tags.lineComment,
            CommentText: tags.blockComment,
            "{% %} {{ }}": tags.brace,
            "( )": tags.paren,
            ".": tags.derefOperator,
            ", .. : |": tags.punctuation
          }),
          /* @__PURE__ */ indentNodeProp.add({
            Tag: /* @__PURE__ */ delimitedIndent({ closing: "%}" }),
            "UnlessDirective ForDirective TablerowDirective CaptureDirective": /* @__PURE__ */ directiveIndent(/^\s*(\{%-?\s*)?end\w/),
            IfDirective: /* @__PURE__ */ directiveIndent(/^\s*(\{%-?\s*)?(endif|else|elsif)\b/),
            CaseDirective: /* @__PURE__ */ directiveIndent(/^\s*(\{%-?\s*)?(endcase|when)\b/)
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "UnlessDirective ForDirective TablerowDirective CaptureDirective IfDirective CaseDirective RawDirective Comment"(tree) {
              let first = tree.firstChild, last = tree.lastChild;
              if (!first || first.name != "Tag")
                return null;
              return { from: first.to, to: last.name == "EndTag" ? last.from : tree.to };
            }
          })
        ]
      }),
      languageData: {
        commentTokens: { line: "#" },
        indentOnInput: /^\s*{%-?\s*(?:end|elsif|else|when|)$/
      }
    });
    baseHTML = /* @__PURE__ */ html();
    liquidLanguage = /* @__PURE__ */ makeLiquid(baseHTML.language);
  }
});

// ../../node_modules/@lezer/markdown/dist/index.js
function skipForList(bl, cx2, line) {
  if (line.pos == line.text.length || bl != cx2.block && line.indent >= cx2.stack[line.depth + 1].value + line.baseIndent)
    return true;
  if (line.indent >= line.baseIndent + 4)
    return false;
  let size = (bl.type == Type2.OrderedList ? isOrderedList : isBulletList)(line, cx2, false);
  return size > 0 && (bl.type != Type2.BulletList || isHorizontalRule(line, cx2, false) < 0) && line.text.charCodeAt(line.pos + size - 1) == bl.value;
}
function space5(ch2) {
  return ch2 == 32 || ch2 == 9 || ch2 == 10 || ch2 == 13;
}
function skipSpace(line, i = 0) {
  while (i < line.length && space5(line.charCodeAt(i)))
    i++;
  return i;
}
function skipSpaceBack(line, i, to) {
  while (i > to && space5(line.charCodeAt(i - 1)))
    i--;
  return i;
}
function isFencedCode(line) {
  if (line.next != 96 && line.next != 126)
    return -1;
  let pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
    pos++;
  if (pos < line.pos + 3)
    return -1;
  if (line.next == 96) {
    for (let i = pos; i < line.text.length; i++)
      if (line.text.charCodeAt(i) == 96)
        return -1;
  }
  return pos;
}
function isBlockquote(line) {
  return line.next != 62 ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
}
function isHorizontalRule(line, cx2, breaking) {
  if (line.next != 42 && line.next != 45 && line.next != 95)
    return -1;
  let count2 = 1;
  for (let pos = line.pos + 1; pos < line.text.length; pos++) {
    let ch2 = line.text.charCodeAt(pos);
    if (ch2 == line.next)
      count2++;
    else if (!space5(ch2))
      return -1;
  }
  if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx2.stack.length && cx2.parser.leafBlockParsers.indexOf(DefaultLeafBlocks.SetextHeading) > -1)
    return -1;
  return count2 < 3 ? -1 : 1;
}
function inList(cx2, type7) {
  for (let i = cx2.stack.length - 1; i >= 0; i--)
    if (cx2.stack[i].type == type7)
      return true;
  return false;
}
function isBulletList(line, cx2, breaking) {
  return (line.next == 45 || line.next == 43 || line.next == 42) && (line.pos == line.text.length - 1 || space5(line.text.charCodeAt(line.pos + 1))) && (!breaking || inList(cx2, Type2.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
}
function isOrderedList(line, cx2, breaking) {
  let pos = line.pos, next2 = line.next;
  for (; ; ) {
    if (next2 >= 48 && next2 <= 57)
      pos++;
    else
      break;
    if (pos == line.text.length)
      return -1;
    next2 = line.text.charCodeAt(pos);
  }
  if (pos == line.pos || pos > line.pos + 9 || next2 != 46 && next2 != 41 || pos < line.text.length - 1 && !space5(line.text.charCodeAt(pos + 1)) || breaking && !inList(cx2, Type2.OrderedList) && (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49))
    return -1;
  return pos + 1 - line.pos;
}
function isAtxHeading(line) {
  if (line.next != 35)
    return -1;
  let pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
    pos++;
  if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
    return -1;
  let size = pos - line.pos;
  return size > 6 ? -1 : size;
}
function isSetextUnderline(line) {
  if (line.next != 45 && line.next != 61 || line.indent >= line.baseIndent + 4)
    return -1;
  let pos = line.pos + 1;
  while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
    pos++;
  let end2 = pos;
  while (pos < line.text.length && space5(line.text.charCodeAt(pos)))
    pos++;
  return pos == line.text.length ? end2 : -1;
}
function isHTMLBlock(line, _cx, breaking) {
  if (line.next != 60)
    return -1;
  let rest = line.text.slice(line.pos);
  for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
    if (HTMLBlockStyle[i][0].test(rest))
      return i;
  return -1;
}
function getListIndent(line, pos) {
  let indentAfter = line.countIndent(pos, line.pos, line.indent);
  let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
  return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
}
function addCodeText(marks2, from3, to) {
  let last = marks2.length - 1;
  if (last >= 0 && marks2[last].to == from3 && marks2[last].type == Type2.CodeText)
    marks2[last].to = to;
  else
    marks2.push(elt(Type2.CodeText, from3, to));
}
function lineEnd(text5, pos) {
  for (; pos < text5.length; pos++) {
    let next2 = text5.charCodeAt(pos);
    if (next2 == 10)
      break;
    if (!space5(next2))
      return -1;
  }
  return pos;
}
function injectGaps(ranges, rangeI, tree, offset, dummies) {
  let rangeEnd2 = ranges[rangeI].to;
  let children = [], positions = [], start2 = tree.from + offset;
  function movePastNext(upto, inclusive) {
    while (inclusive ? upto >= rangeEnd2 : upto > rangeEnd2) {
      let size = ranges[rangeI + 1].from - rangeEnd2;
      offset += size;
      upto += size;
      rangeI++;
      rangeEnd2 = ranges[rangeI].to;
    }
  }
  for (let ch2 = tree.firstChild; ch2; ch2 = ch2.nextSibling) {
    movePastNext(ch2.from + offset, true);
    let from3 = ch2.from + offset, node, reuse = dummies.get(ch2.tree);
    if (reuse) {
      node = reuse;
    } else if (ch2.to + offset > rangeEnd2) {
      node = injectGaps(ranges, rangeI, ch2, offset, dummies);
      movePastNext(ch2.to + offset, false);
    } else {
      node = ch2.toTree();
    }
    children.push(node);
    positions.push(from3 - start2);
  }
  movePastNext(tree.to + offset, false);
  return new Tree(tree.type, children, positions, tree.to + offset - start2, tree.tree ? tree.tree.propValues : void 0);
}
function nonEmpty(a2) {
  return a2 != null && a2.length > 0;
}
function resolveConfig(spec) {
  if (!Array.isArray(spec))
    return spec;
  if (spec.length == 0)
    return null;
  let conf = resolveConfig(spec[0]);
  if (spec.length == 1)
    return conf;
  let rest = resolveConfig(spec.slice(1));
  if (!rest || !conf)
    return conf || rest;
  let conc2 = (a2, b) => (a2 || none3).concat(b || none3);
  let wrapA = conf.wrap, wrapB = rest.wrap;
  return {
    props: conc2(conf.props, rest.props),
    defineNodes: conc2(conf.defineNodes, rest.defineNodes),
    parseBlock: conc2(conf.parseBlock, rest.parseBlock),
    parseInline: conc2(conf.parseInline, rest.parseInline),
    remove: conc2(conf.remove, rest.remove),
    wrap: !wrapA ? wrapB : !wrapB ? wrapA : (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
  };
}
function findName(names, name2) {
  let found = names.indexOf(name2);
  if (found < 0)
    throw new RangeError(`Position specified relative to unknown parser ${name2}`);
  return found;
}
function elt(type7, from3, to, children) {
  return new Element2(type7, from3, to, children);
}
function finishLink(cx2, content3, type7, start2, startPos) {
  let { text: text5 } = cx2, next2 = cx2.char(startPos), endPos = startPos;
  content3.unshift(elt(Type2.LinkMark, start2, start2 + (type7 == Type2.Image ? 2 : 1)));
  content3.push(elt(Type2.LinkMark, startPos - 1, startPos));
  if (next2 == 40) {
    let pos = cx2.skipSpace(startPos + 1);
    let dest = parseURL(text5, pos - cx2.offset, cx2.offset), title;
    if (dest) {
      pos = cx2.skipSpace(dest.to);
      if (pos != dest.to) {
        title = parseLinkTitle(text5, pos - cx2.offset, cx2.offset);
        if (title)
          pos = cx2.skipSpace(title.to);
      }
    }
    if (cx2.char(pos) == 41) {
      content3.push(elt(Type2.LinkMark, startPos, startPos + 1));
      endPos = pos + 1;
      if (dest)
        content3.push(dest);
      if (title)
        content3.push(title);
      content3.push(elt(Type2.LinkMark, pos, endPos));
    }
  } else if (next2 == 91) {
    let label = parseLinkLabel(text5, startPos - cx2.offset, cx2.offset, false);
    if (label) {
      content3.push(label);
      endPos = label.to;
    }
  }
  return elt(type7, start2, endPos, content3);
}
function parseURL(text5, start2, offset) {
  let next2 = text5.charCodeAt(start2);
  if (next2 == 60) {
    for (let pos = start2 + 1; pos < text5.length; pos++) {
      let ch2 = text5.charCodeAt(pos);
      if (ch2 == 62)
        return elt(Type2.URL, start2 + offset, pos + 1 + offset);
      if (ch2 == 60 || ch2 == 10)
        return false;
    }
    return null;
  } else {
    let depth = 0, pos = start2;
    for (let escaped = false; pos < text5.length; pos++) {
      let ch2 = text5.charCodeAt(pos);
      if (space5(ch2)) {
        break;
      } else if (escaped) {
        escaped = false;
      } else if (ch2 == 40) {
        depth++;
      } else if (ch2 == 41) {
        if (!depth)
          break;
        depth--;
      } else if (ch2 == 92) {
        escaped = true;
      }
    }
    return pos > start2 ? elt(Type2.URL, start2 + offset, pos + offset) : pos == text5.length ? null : false;
  }
}
function parseLinkTitle(text5, start2, offset) {
  let next2 = text5.charCodeAt(start2);
  if (next2 != 39 && next2 != 34 && next2 != 40)
    return false;
  let end2 = next2 == 40 ? 41 : next2;
  for (let pos = start2 + 1, escaped = false; pos < text5.length; pos++) {
    let ch2 = text5.charCodeAt(pos);
    if (escaped)
      escaped = false;
    else if (ch2 == end2)
      return elt(Type2.LinkTitle, start2 + offset, pos + 1 + offset);
    else if (ch2 == 92)
      escaped = true;
  }
  return null;
}
function parseLinkLabel(text5, start2, offset, requireNonWS) {
  for (let escaped = false, pos = start2 + 1, end2 = Math.min(text5.length, pos + 999); pos < end2; pos++) {
    let ch2 = text5.charCodeAt(pos);
    if (escaped)
      escaped = false;
    else if (ch2 == 93)
      return requireNonWS ? false : elt(Type2.LinkLabel, start2 + offset, pos + 1 + offset);
    else {
      if (requireNonWS && !space5(ch2))
        requireNonWS = false;
      if (ch2 == 91)
        return false;
      else if (ch2 == 92)
        escaped = true;
    }
  }
  return null;
}
function injectMarks(elements, marks2) {
  if (!marks2.length)
    return elements;
  if (!elements.length)
    return marks2;
  let elts = elements.slice(), eI = 0;
  for (let mark of marks2) {
    while (eI < elts.length && elts[eI].to < mark.to)
      eI++;
    if (eI < elts.length && elts[eI].from < mark.from) {
      let e = elts[eI];
      if (e instanceof Element2)
        elts[eI] = new Element2(e.type, e.from, e.to, injectMarks(e.children, [mark]));
    } else {
      elts.splice(eI++, 0, mark);
    }
  }
  return elts;
}
function toRelative(abs, ranges) {
  let pos = abs;
  for (let i = 1; i < ranges.length; i++) {
    let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;
    if (gapFrom < abs)
      pos -= gapTo - gapFrom;
  }
  return pos;
}
function leftOverSpace(node, from3, to) {
  let ranges = [];
  for (let n = node.firstChild, pos = from3; ; n = n.nextSibling) {
    let nextPos = n ? n.from : to;
    if (nextPos > pos)
      ranges.push({ from: pos, to: nextPos });
    if (!n)
      break;
    pos = n.to;
  }
  return ranges;
}
function parseCode(config2) {
  let { codeParser, htmlParser } = config2;
  let wrap = parseMixed((node, input) => {
    let id3 = node.type.id;
    if (codeParser && (id3 == Type2.CodeBlock || id3 == Type2.FencedCode)) {
      let info = "";
      if (id3 == Type2.FencedCode) {
        let infoNode = node.node.getChild(Type2.CodeInfo);
        if (infoNode)
          info = input.read(infoNode.from, infoNode.to);
      }
      let parser29 = codeParser(info);
      if (parser29)
        return { parser: parser29, overlay: (node2) => node2.type.id == Type2.CodeText };
    } else if (htmlParser && (id3 == Type2.HTMLBlock || id3 == Type2.HTMLTag || id3 == Type2.CommentBlock)) {
      return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
    }
    return null;
  });
  return { wrap };
}
function parseRow(cx2, line, startI = 0, elts, offset = 0) {
  let count2 = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
  let parseCell = () => {
    elts.push(cx2.elt("TableCell", offset + cellStart, offset + cellEnd, cx2.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
  };
  for (let i = startI; i < line.length; i++) {
    let next2 = line.charCodeAt(i);
    if (next2 == 124 && !esc) {
      if (!first || cellStart > -1)
        count2++;
      first = false;
      if (elts) {
        if (cellStart > -1)
          parseCell();
        elts.push(cx2.elt("TableDelimiter", i + offset, i + offset + 1));
      }
      cellStart = cellEnd = -1;
    } else if (esc || next2 != 32 && next2 != 9) {
      if (cellStart < 0)
        cellStart = i;
      cellEnd = i + 1;
    }
    esc = !esc && next2 == 92;
  }
  if (cellStart > -1) {
    count2++;
    if (elts)
      parseCell();
  }
  return count2;
}
function hasPipe(str, start2) {
  for (let i = start2; i < str.length; i++) {
    let next2 = str.charCodeAt(i);
    if (next2 == 124)
      return true;
    if (next2 == 92)
      i++;
  }
  return false;
}
function count(str, from3, to, ch2) {
  let result = 0;
  for (let i = from3; i < to; i++)
    if (str[i] == ch2)
      result++;
  return result;
}
function autolinkURLEnd(text5, from3) {
  urlRE.lastIndex = from3;
  let m = urlRE.exec(text5);
  if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf("_") > -1)
    return -1;
  let end2 = from3 + m[0].length;
  for (; ; ) {
    let last = text5[end2 - 1], m2;
    if (/[?!.,:*_~]/.test(last) || last == ")" && count(text5, from3, end2, ")") > count(text5, from3, end2, "("))
      end2--;
    else if (last == ";" && (m2 = /&(?:#\d+|#x[a-f\d]+|\w+);$/.exec(text5.slice(from3, end2))))
      end2 = from3 + m2.index;
    else
      break;
  }
  return end2;
}
function autolinkEmailEnd(text5, from3) {
  emailRE.lastIndex = from3;
  let m = emailRE.exec(text5);
  if (!m)
    return -1;
  let last = m[0][m[0].length - 1];
  return last == "_" || last == "-" ? -1 : from3 + m[0].length - (last == "." ? 1 : 0);
}
function parseSubSuper(ch2, node, mark) {
  return (cx2, next2, pos) => {
    if (next2 != ch2 || cx2.char(pos + 1) == ch2)
      return -1;
    let elts = [cx2.elt(mark, pos, pos + 1)];
    for (let i = pos + 1; i < cx2.end; i++) {
      let next3 = cx2.char(i);
      if (next3 == ch2)
        return cx2.addElement(cx2.elt(node, pos, i + 1, elts.concat(cx2.elt(mark, i, i + 1))));
      if (next3 == 92)
        elts.push(cx2.elt("Escape", i, i++ + 2));
      if (space5(next3))
        break;
    }
    return -1;
  };
}
var CompositeBlock, Type2, LeafBlock, Line2, DefaultSkipMarkup, EmptyLine, CommentEnd, ProcessingEnd, HTMLBlockStyle, DefaultBlockParsers, LinkReferenceParser, SetextHeadingParser, DefaultLeafBlocks, DefaultEndLeaf, scanLineResult, BlockContext, MarkdownParser, nodeTypes, none3, Buffer2, Element2, TreeElement, EmphasisUnderscore, EmphasisAsterisk, LinkStart, ImageStart, InlineDelimiter, Escapable, Punctuation2, DefaultInline, InlineContext, NotLast, FragmentCursor3, markdownHighlighting, parser11, StrikethroughDelim, Strikethrough, delimiterLine, TableParser, Table, TaskParser, TaskList, autolinkRE, urlRE, lastTwoDomainWords, emailRE, xmppResourceRE, Autolink, GFM, Superscript, Subscript, Emoji;
var init_dist25 = __esm({
  "../../node_modules/@lezer/markdown/dist/index.js"() {
    init_dist();
    init_dist4();
    CompositeBlock = class _CompositeBlock {
      static create(type7, value, from3, parentHash, end2) {
        let hash6 = parentHash + (parentHash << 8) + type7 + (value << 4) | 0;
        return new _CompositeBlock(type7, value, from3, hash6, end2, [], []);
      }
      constructor(type7, value, from3, hash6, end2, children, positions) {
        this.type = type7;
        this.value = value;
        this.from = from3;
        this.hash = hash6;
        this.end = end2;
        this.children = children;
        this.positions = positions;
        this.hashProp = [[NodeProp.contextHash, hash6]];
      }
      addChild(child, pos) {
        if (child.prop(NodeProp.contextHash) != this.hash)
          child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
        this.children.push(child);
        this.positions.push(pos);
      }
      toTree(nodeSet2, end2 = this.end) {
        let last = this.children.length - 1;
        if (last >= 0)
          end2 = Math.max(end2, this.positions[last] + this.children[last].length + this.from);
        return new Tree(nodeSet2.types[this.type], this.children, this.positions, end2 - this.from).balance({
          makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
        });
      }
    };
    (function(Type3) {
      Type3[Type3["Document"] = 1] = "Document";
      Type3[Type3["CodeBlock"] = 2] = "CodeBlock";
      Type3[Type3["FencedCode"] = 3] = "FencedCode";
      Type3[Type3["Blockquote"] = 4] = "Blockquote";
      Type3[Type3["HorizontalRule"] = 5] = "HorizontalRule";
      Type3[Type3["BulletList"] = 6] = "BulletList";
      Type3[Type3["OrderedList"] = 7] = "OrderedList";
      Type3[Type3["ListItem"] = 8] = "ListItem";
      Type3[Type3["ATXHeading1"] = 9] = "ATXHeading1";
      Type3[Type3["ATXHeading2"] = 10] = "ATXHeading2";
      Type3[Type3["ATXHeading3"] = 11] = "ATXHeading3";
      Type3[Type3["ATXHeading4"] = 12] = "ATXHeading4";
      Type3[Type3["ATXHeading5"] = 13] = "ATXHeading5";
      Type3[Type3["ATXHeading6"] = 14] = "ATXHeading6";
      Type3[Type3["SetextHeading1"] = 15] = "SetextHeading1";
      Type3[Type3["SetextHeading2"] = 16] = "SetextHeading2";
      Type3[Type3["HTMLBlock"] = 17] = "HTMLBlock";
      Type3[Type3["LinkReference"] = 18] = "LinkReference";
      Type3[Type3["Paragraph"] = 19] = "Paragraph";
      Type3[Type3["CommentBlock"] = 20] = "CommentBlock";
      Type3[Type3["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
      Type3[Type3["Escape"] = 22] = "Escape";
      Type3[Type3["Entity"] = 23] = "Entity";
      Type3[Type3["HardBreak"] = 24] = "HardBreak";
      Type3[Type3["Emphasis"] = 25] = "Emphasis";
      Type3[Type3["StrongEmphasis"] = 26] = "StrongEmphasis";
      Type3[Type3["Link"] = 27] = "Link";
      Type3[Type3["Image"] = 28] = "Image";
      Type3[Type3["InlineCode"] = 29] = "InlineCode";
      Type3[Type3["HTMLTag"] = 30] = "HTMLTag";
      Type3[Type3["Comment"] = 31] = "Comment";
      Type3[Type3["ProcessingInstruction"] = 32] = "ProcessingInstruction";
      Type3[Type3["Autolink"] = 33] = "Autolink";
      Type3[Type3["HeaderMark"] = 34] = "HeaderMark";
      Type3[Type3["QuoteMark"] = 35] = "QuoteMark";
      Type3[Type3["ListMark"] = 36] = "ListMark";
      Type3[Type3["LinkMark"] = 37] = "LinkMark";
      Type3[Type3["EmphasisMark"] = 38] = "EmphasisMark";
      Type3[Type3["CodeMark"] = 39] = "CodeMark";
      Type3[Type3["CodeText"] = 40] = "CodeText";
      Type3[Type3["CodeInfo"] = 41] = "CodeInfo";
      Type3[Type3["LinkTitle"] = 42] = "LinkTitle";
      Type3[Type3["LinkLabel"] = 43] = "LinkLabel";
      Type3[Type3["URL"] = 44] = "URL";
    })(Type2 || (Type2 = {}));
    LeafBlock = class {
      /**
      @internal
      */
      constructor(start2, content3) {
        this.start = start2;
        this.content = content3;
        this.marks = [];
        this.parsers = [];
      }
    };
    Line2 = class {
      constructor() {
        this.text = "";
        this.baseIndent = 0;
        this.basePos = 0;
        this.depth = 0;
        this.markers = [];
        this.pos = 0;
        this.indent = 0;
        this.next = -1;
      }
      /**
      @internal
      */
      forward() {
        if (this.basePos > this.pos)
          this.forwardInner();
      }
      /**
      @internal
      */
      forwardInner() {
        let newPos = this.skipSpace(this.basePos);
        this.indent = this.countIndent(newPos, this.pos, this.indent);
        this.pos = newPos;
        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
      }
      /**
      Skip whitespace after the given position, return the position of
      the next non-space character or the end of the line if there's
      only space after `from`.
      */
      skipSpace(from3) {
        return skipSpace(this.text, from3);
      }
      /**
      @internal
      */
      reset(text5) {
        this.text = text5;
        this.baseIndent = this.basePos = this.pos = this.indent = 0;
        this.forwardInner();
        this.depth = 1;
        while (this.markers.length)
          this.markers.pop();
      }
      /**
      Move the line's base position forward to the given position.
      This should only be called by composite [block
      parsers](#BlockParser.parse) or [markup skipping
      functions](#NodeSpec.composite).
      */
      moveBase(to) {
        this.basePos = to;
        this.baseIndent = this.countIndent(to, this.pos, this.indent);
      }
      /**
      Move the line's base position forward to the given _column_.
      */
      moveBaseColumn(indent7) {
        this.baseIndent = indent7;
        this.basePos = this.findColumn(indent7);
      }
      /**
      Store a composite-block-level marker. Should be called from
      [markup skipping functions](#NodeSpec.composite) when they
      consume any non-whitespace characters.
      */
      addMarker(elt2) {
        this.markers.push(elt2);
      }
      /**
      Find the column position at `to`, optionally starting at a given
      position and column.
      */
      countIndent(to, from3 = 0, indent7 = 0) {
        for (let i = from3; i < to; i++)
          indent7 += this.text.charCodeAt(i) == 9 ? 4 - indent7 % 4 : 1;
        return indent7;
      }
      /**
      Find the position corresponding to the given column.
      */
      findColumn(goal) {
        let i = 0;
        for (let indent7 = 0; i < this.text.length && indent7 < goal; i++)
          indent7 += this.text.charCodeAt(i) == 9 ? 4 - indent7 % 4 : 1;
        return i;
      }
      /**
      @internal
      */
      scrub() {
        if (!this.baseIndent)
          return this.text;
        let result = "";
        for (let i = 0; i < this.basePos; i++)
          result += " ";
        return result + this.text.slice(this.basePos);
      }
    };
    DefaultSkipMarkup = {
      [Type2.Blockquote](bl, cx2, line) {
        if (line.next != 62)
          return false;
        line.markers.push(elt(Type2.QuoteMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + 1));
        line.moveBase(line.pos + (space5(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
        bl.end = cx2.lineStart + line.text.length;
        return true;
      },
      [Type2.ListItem](bl, _cx, line) {
        if (line.indent < line.baseIndent + bl.value && line.next > -1)
          return false;
        line.moveBaseColumn(line.baseIndent + bl.value);
        return true;
      },
      [Type2.OrderedList]: skipForList,
      [Type2.BulletList]: skipForList,
      [Type2.Document]() {
        return true;
      }
    };
    EmptyLine = /^[ \t]*$/;
    CommentEnd = /-->/;
    ProcessingEnd = /\?>/;
    HTMLBlockStyle = [
      [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
      [/^\s*<!--/, CommentEnd],
      [/^\s*<\?/, ProcessingEnd],
      [/^\s*<![A-Z]/, />/],
      [/^\s*<!\[CDATA\[/, /\]\]>/],
      [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
      [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
    ];
    DefaultBlockParsers = {
      LinkReference: void 0,
      IndentedCode(cx2, line) {
        let base5 = line.baseIndent + 4;
        if (line.indent < base5)
          return false;
        let start2 = line.findColumn(base5);
        let from3 = cx2.lineStart + start2, to = cx2.lineStart + line.text.length;
        let marks2 = [], pendingMarks = [];
        addCodeText(marks2, from3, to);
        while (cx2.nextLine() && line.depth >= cx2.stack.length) {
          if (line.pos == line.text.length) {
            addCodeText(pendingMarks, cx2.lineStart - 1, cx2.lineStart);
            for (let m of line.markers)
              pendingMarks.push(m);
          } else if (line.indent < base5) {
            break;
          } else {
            if (pendingMarks.length) {
              for (let m of pendingMarks) {
                if (m.type == Type2.CodeText)
                  addCodeText(marks2, m.from, m.to);
                else
                  marks2.push(m);
              }
              pendingMarks = [];
            }
            addCodeText(marks2, cx2.lineStart - 1, cx2.lineStart);
            for (let m of line.markers)
              marks2.push(m);
            to = cx2.lineStart + line.text.length;
            let codeStart = cx2.lineStart + line.findColumn(line.baseIndent + 4);
            if (codeStart < to)
              addCodeText(marks2, codeStart, to);
          }
        }
        if (pendingMarks.length) {
          pendingMarks = pendingMarks.filter((m) => m.type != Type2.CodeText);
          if (pendingMarks.length)
            line.markers = pendingMarks.concat(line.markers);
        }
        cx2.addNode(cx2.buffer.writeElements(marks2, -from3).finish(Type2.CodeBlock, to - from3), from3);
        return true;
      },
      FencedCode(cx2, line) {
        let fenceEnd = isFencedCode(line);
        if (fenceEnd < 0)
          return false;
        let from3 = cx2.lineStart + line.pos, ch2 = line.next, len = fenceEnd - line.pos;
        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
        let marks2 = [elt(Type2.CodeMark, from3, from3 + len)];
        if (infoFrom < infoTo)
          marks2.push(elt(Type2.CodeInfo, cx2.lineStart + infoFrom, cx2.lineStart + infoTo));
        for (let first = true; cx2.nextLine() && line.depth >= cx2.stack.length; first = false) {
          let i = line.pos;
          if (line.indent - line.baseIndent < 4)
            while (i < line.text.length && line.text.charCodeAt(i) == ch2)
              i++;
          if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
            for (let m of line.markers)
              marks2.push(m);
            marks2.push(elt(Type2.CodeMark, cx2.lineStart + line.pos, cx2.lineStart + i));
            cx2.nextLine();
            break;
          } else {
            if (!first)
              addCodeText(marks2, cx2.lineStart - 1, cx2.lineStart);
            for (let m of line.markers)
              marks2.push(m);
            let textStart = cx2.lineStart + line.basePos, textEnd = cx2.lineStart + line.text.length;
            if (textStart < textEnd)
              addCodeText(marks2, textStart, textEnd);
          }
        }
        cx2.addNode(cx2.buffer.writeElements(marks2, -from3).finish(Type2.FencedCode, cx2.prevLineEnd() - from3), from3);
        return true;
      },
      Blockquote(cx2, line) {
        let size = isBlockquote(line);
        if (size < 0)
          return false;
        cx2.startContext(Type2.Blockquote, line.pos);
        cx2.addNode(Type2.QuoteMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + 1);
        line.moveBase(line.pos + size);
        return null;
      },
      HorizontalRule(cx2, line) {
        if (isHorizontalRule(line, cx2, false) < 0)
          return false;
        let from3 = cx2.lineStart + line.pos;
        cx2.nextLine();
        cx2.addNode(Type2.HorizontalRule, from3);
        return true;
      },
      BulletList(cx2, line) {
        let size = isBulletList(line, cx2, false);
        if (size < 0)
          return false;
        if (cx2.block.type != Type2.BulletList)
          cx2.startContext(Type2.BulletList, line.basePos, line.next);
        let newBase = getListIndent(line, line.pos + 1);
        cx2.startContext(Type2.ListItem, line.basePos, newBase - line.baseIndent);
        cx2.addNode(Type2.ListMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + size);
        line.moveBaseColumn(newBase);
        return null;
      },
      OrderedList(cx2, line) {
        let size = isOrderedList(line, cx2, false);
        if (size < 0)
          return false;
        if (cx2.block.type != Type2.OrderedList)
          cx2.startContext(Type2.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
        let newBase = getListIndent(line, line.pos + size);
        cx2.startContext(Type2.ListItem, line.basePos, newBase - line.baseIndent);
        cx2.addNode(Type2.ListMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + size);
        line.moveBaseColumn(newBase);
        return null;
      },
      ATXHeading(cx2, line) {
        let size = isAtxHeading(line);
        if (size < 0)
          return false;
        let off = line.pos, from3 = cx2.lineStart + off;
        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
        while (after > off && line.text.charCodeAt(after - 1) == line.next)
          after--;
        if (after == endOfSpace || after == off || !space5(line.text.charCodeAt(after - 1)))
          after = line.text.length;
        let buf = cx2.buffer.write(Type2.HeaderMark, 0, size).writeElements(cx2.parser.parseInline(line.text.slice(off + size + 1, after), from3 + size + 1), -from3);
        if (after < line.text.length)
          buf.write(Type2.HeaderMark, after - off, endOfSpace - off);
        let node = buf.finish(Type2.ATXHeading1 - 1 + size, line.text.length - off);
        cx2.nextLine();
        cx2.addNode(node, from3);
        return true;
      },
      HTMLBlock(cx2, line) {
        let type7 = isHTMLBlock(line, cx2, false);
        if (type7 < 0)
          return false;
        let from3 = cx2.lineStart + line.pos, end2 = HTMLBlockStyle[type7][1];
        let marks2 = [], trailing = end2 != EmptyLine;
        while (!end2.test(line.text) && cx2.nextLine()) {
          if (line.depth < cx2.stack.length) {
            trailing = false;
            break;
          }
          for (let m of line.markers)
            marks2.push(m);
        }
        if (trailing)
          cx2.nextLine();
        let nodeType = end2 == CommentEnd ? Type2.CommentBlock : end2 == ProcessingEnd ? Type2.ProcessingInstructionBlock : Type2.HTMLBlock;
        let to = cx2.prevLineEnd();
        cx2.addNode(cx2.buffer.writeElements(marks2, -from3).finish(nodeType, to - from3), from3);
        return true;
      },
      SetextHeading: void 0
      // Specifies relative precedence for block-continue function
    };
    LinkReferenceParser = class {
      constructor(leaf) {
        this.stage = 0;
        this.elts = [];
        this.pos = 0;
        this.start = leaf.start;
        this.advance(leaf.content);
      }
      nextLine(cx2, line, leaf) {
        if (this.stage == -1)
          return false;
        let content3 = leaf.content + "\n" + line.scrub();
        let finish = this.advance(content3);
        if (finish > -1 && finish < content3.length)
          return this.complete(cx2, leaf, finish);
        return false;
      }
      finish(cx2, leaf) {
        if ((this.stage == 2 || this.stage == 3) && skipSpace(leaf.content, this.pos) == leaf.content.length)
          return this.complete(cx2, leaf, leaf.content.length);
        return false;
      }
      complete(cx2, leaf, len) {
        cx2.addLeafElement(leaf, elt(Type2.LinkReference, this.start, this.start + len, this.elts));
        return true;
      }
      nextStage(elt2) {
        if (elt2) {
          this.pos = elt2.to - this.start;
          this.elts.push(elt2);
          this.stage++;
          return true;
        }
        if (elt2 === false)
          this.stage = -1;
        return false;
      }
      advance(content3) {
        for (; ; ) {
          if (this.stage == -1) {
            return -1;
          } else if (this.stage == 0) {
            if (!this.nextStage(parseLinkLabel(content3, this.pos, this.start, true)))
              return -1;
            if (content3.charCodeAt(this.pos) != 58)
              return this.stage = -1;
            this.elts.push(elt(Type2.LinkMark, this.pos + this.start, this.pos + this.start + 1));
            this.pos++;
          } else if (this.stage == 1) {
            if (!this.nextStage(parseURL(content3, skipSpace(content3, this.pos), this.start)))
              return -1;
          } else if (this.stage == 2) {
            let skip = skipSpace(content3, this.pos), end2 = 0;
            if (skip > this.pos) {
              let title = parseLinkTitle(content3, skip, this.start);
              if (title) {
                let titleEnd = lineEnd(content3, title.to - this.start);
                if (titleEnd > 0) {
                  this.nextStage(title);
                  end2 = titleEnd;
                }
              }
            }
            if (!end2)
              end2 = lineEnd(content3, this.pos);
            return end2 > 0 && end2 < content3.length ? end2 : -1;
          } else {
            return lineEnd(content3, this.pos);
          }
        }
      }
    };
    SetextHeadingParser = class {
      nextLine(cx2, line, leaf) {
        let underline2 = line.depth < cx2.stack.length ? -1 : isSetextUnderline(line);
        let next2 = line.next;
        if (underline2 < 0)
          return false;
        let underlineMark = elt(Type2.HeaderMark, cx2.lineStart + line.pos, cx2.lineStart + underline2);
        cx2.nextLine();
        cx2.addLeafElement(leaf, elt(next2 == 61 ? Type2.SetextHeading1 : Type2.SetextHeading2, leaf.start, cx2.prevLineEnd(), [
          ...cx2.parser.parseInline(leaf.content, leaf.start),
          underlineMark
        ]));
        return true;
      }
      finish() {
        return false;
      }
    };
    DefaultLeafBlocks = {
      LinkReference(_, leaf) {
        return leaf.content.charCodeAt(0) == 91 ? new LinkReferenceParser(leaf) : null;
      },
      SetextHeading() {
        return new SetextHeadingParser();
      }
    };
    DefaultEndLeaf = [
      (_, line) => isAtxHeading(line) >= 0,
      (_, line) => isFencedCode(line) >= 0,
      (_, line) => isBlockquote(line) >= 0,
      (p, line) => isBulletList(line, p, true) >= 0,
      (p, line) => isOrderedList(line, p, true) >= 0,
      (p, line) => isHorizontalRule(line, p, true) >= 0,
      (p, line) => isHTMLBlock(line, p, true) >= 0
    ];
    scanLineResult = { text: "", end: 0 };
    BlockContext = class {
      /**
      @internal
      */
      constructor(parser29, input, fragments, ranges) {
        this.parser = parser29;
        this.input = input;
        this.ranges = ranges;
        this.line = new Line2();
        this.atEnd = false;
        this.reusePlaceholders = /* @__PURE__ */ new Map();
        this.stoppedAt = null;
        this.rangeI = 0;
        this.to = ranges[ranges.length - 1].to;
        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
        this.block = CompositeBlock.create(Type2.Document, 0, this.lineStart, 0, 0);
        this.stack = [this.block];
        this.fragments = fragments.length ? new FragmentCursor3(fragments, input) : null;
        this.readLine();
      }
      get parsedPos() {
        return this.absoluteLineStart;
      }
      advance() {
        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
          return this.finish();
        let { line } = this;
        for (; ; ) {
          for (let markI = 0; ; ) {
            let next2 = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;
            while (markI < line.markers.length && (!next2 || line.markers[markI].from < next2.end)) {
              let mark = line.markers[markI++];
              this.addNode(mark.type, mark.from, mark.to);
            }
            if (!next2)
              break;
            this.finishContext();
          }
          if (line.pos < line.text.length)
            break;
          if (!this.nextLine())
            return this.finish();
        }
        if (this.fragments && this.reuseFragment(line.basePos))
          return null;
        start: for (; ; ) {
          for (let type7 of this.parser.blockParsers)
            if (type7) {
              let result = type7(this, line);
              if (result != false) {
                if (result == true)
                  return null;
                line.forward();
                continue start;
              }
            }
          break;
        }
        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
        for (let parse of this.parser.leafBlockParsers)
          if (parse) {
            let parser29 = parse(this, leaf);
            if (parser29)
              leaf.parsers.push(parser29);
          }
        lines: while (this.nextLine()) {
          if (line.pos == line.text.length)
            break;
          if (line.indent < line.baseIndent + 4) {
            for (let stop of this.parser.endLeafBlock)
              if (stop(this, line, leaf))
                break lines;
          }
          for (let parser29 of leaf.parsers)
            if (parser29.nextLine(this, line, leaf))
              return null;
          leaf.content += "\n" + line.scrub();
          for (let m of line.markers)
            leaf.marks.push(m);
        }
        this.finishLeaf(leaf);
        return null;
      }
      stopAt(pos) {
        if (this.stoppedAt != null && this.stoppedAt < pos)
          throw new RangeError("Can't move stoppedAt forward");
        this.stoppedAt = pos;
      }
      reuseFragment(start2) {
        if (!this.fragments.moveTo(this.absoluteLineStart + start2, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
          return false;
        let taken = this.fragments.takeNodes(this);
        if (!taken)
          return false;
        this.absoluteLineStart += taken;
        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);
        this.moveRangeI();
        if (this.absoluteLineStart < this.to) {
          this.lineStart++;
          this.absoluteLineStart++;
          this.readLine();
        } else {
          this.atEnd = true;
          this.readLine();
        }
        return true;
      }
      /**
      The number of parent blocks surrounding the current block.
      */
      get depth() {
        return this.stack.length;
      }
      /**
      Get the type of the parent block at the given depth. When no
      depth is passed, return the type of the innermost parent.
      */
      parentType(depth = this.depth - 1) {
        return this.parser.nodeSet.types[this.stack[depth].type];
      }
      /**
      Move to the next input line. This should only be called by
      (non-composite) [block parsers](#BlockParser.parse) that consume
      the line directly, or leaf block parser
      [`nextLine`](#LeafBlockParser.nextLine) methods when they
      consume the current line (and return true).
      */
      nextLine() {
        this.lineStart += this.line.text.length;
        if (this.absoluteLineEnd >= this.to) {
          this.absoluteLineStart = this.absoluteLineEnd;
          this.atEnd = true;
          this.readLine();
          return false;
        } else {
          this.lineStart++;
          this.absoluteLineStart = this.absoluteLineEnd + 1;
          this.moveRangeI();
          this.readLine();
          return true;
        }
      }
      /**
      Retrieve the text of the line after the current one, without
      actually moving the context's current line forward.
      */
      peekLine() {
        return this.scanLine(this.absoluteLineEnd + 1).text;
      }
      moveRangeI() {
        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
          this.rangeI++;
          this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
        }
      }
      /**
      @internal
      Collect the text for the next line.
      */
      scanLine(start2) {
        let r2 = scanLineResult;
        r2.end = start2;
        if (start2 >= this.to) {
          r2.text = "";
        } else {
          r2.text = this.lineChunkAt(start2);
          r2.end += r2.text.length;
          if (this.ranges.length > 1) {
            let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
            while (this.ranges[rangeI].to < r2.end) {
              rangeI++;
              let nextFrom = this.ranges[rangeI].from;
              let after = this.lineChunkAt(nextFrom);
              r2.end = nextFrom + after.length;
              r2.text = r2.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
              textOffset = r2.end - r2.text.length;
            }
          }
        }
        return r2;
      }
      /**
      @internal
      Populate this.line with the content of the next line. Skip
      leading characters covered by composite blocks.
      */
      readLine() {
        let { line } = this, { text: text5, end: end2 } = this.scanLine(this.absoluteLineStart);
        this.absoluteLineEnd = end2;
        line.reset(text5);
        for (; line.depth < this.stack.length; line.depth++) {
          let cx2 = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx2.type];
          if (!handler)
            throw new Error("Unhandled block context " + Type2[cx2.type]);
          if (!handler(cx2, this, line))
            break;
          line.forward();
        }
      }
      lineChunkAt(pos) {
        let next2 = this.input.chunk(pos), text5;
        if (!this.input.lineChunks) {
          let eol2 = next2.indexOf("\n");
          text5 = eol2 < 0 ? next2 : next2.slice(0, eol2);
        } else {
          text5 = next2 == "\n" ? "" : next2;
        }
        return pos + text5.length > this.to ? text5.slice(0, this.to - pos) : text5;
      }
      /**
      The end position of the previous line.
      */
      prevLineEnd() {
        return this.atEnd ? this.lineStart : this.lineStart - 1;
      }
      /**
      @internal
      */
      startContext(type7, start2, value = 0) {
        this.block = CompositeBlock.create(type7, value, this.lineStart + start2, this.block.hash, this.lineStart + this.line.text.length);
        this.stack.push(this.block);
      }
      /**
      Start a composite block. Should only be called from [block
      parser functions](#BlockParser.parse) that return null.
      */
      startComposite(type7, start2, value = 0) {
        this.startContext(this.parser.getNodeType(type7), start2, value);
      }
      /**
      @internal
      */
      addNode(block3, from3, to) {
        if (typeof block3 == "number")
          block3 = new Tree(this.parser.nodeSet.types[block3], none3, none3, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from3);
        this.block.addChild(block3, from3 - this.block.from);
      }
      /**
      Add a block element. Can be called by [block
      parsers](#BlockParser.parse).
      */
      addElement(elt2) {
        this.block.addChild(elt2.toTree(this.parser.nodeSet), elt2.from - this.block.from);
      }
      /**
      Add a block element from a [leaf parser](#LeafBlockParser). This
      makes sure any extra composite block markup (such as blockquote
      markers) inside the block are also added to the syntax tree.
      */
      addLeafElement(leaf, elt2) {
        this.addNode(this.buffer.writeElements(injectMarks(elt2.children, leaf.marks), -elt2.from).finish(elt2.type, elt2.to - elt2.from), elt2.from);
      }
      /**
      @internal
      */
      finishContext() {
        let cx2 = this.stack.pop();
        let top3 = this.stack[this.stack.length - 1];
        top3.addChild(cx2.toTree(this.parser.nodeSet), cx2.from - top3.from);
        this.block = top3;
      }
      finish() {
        while (this.stack.length > 1)
          this.finishContext();
        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
      }
      addGaps(tree) {
        return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;
      }
      /**
      @internal
      */
      finishLeaf(leaf) {
        for (let parser29 of leaf.parsers)
          if (parser29.finish(this, leaf))
            return;
        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
        this.addNode(this.buffer.writeElements(inline, -leaf.start).finish(Type2.Paragraph, leaf.content.length), leaf.start);
      }
      elt(type7, from3, to, children) {
        if (typeof type7 == "string")
          return elt(this.parser.getNodeType(type7), from3, to, children);
        return new TreeElement(type7, from3);
      }
      /**
      @internal
      */
      get buffer() {
        return new Buffer2(this.parser.nodeSet);
      }
    };
    MarkdownParser = class _MarkdownParser extends Parser {
      /**
      @internal
      */
      constructor(nodeSet2, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers) {
        super();
        this.nodeSet = nodeSet2;
        this.blockParsers = blockParsers;
        this.leafBlockParsers = leafBlockParsers;
        this.blockNames = blockNames;
        this.endLeafBlock = endLeafBlock;
        this.skipContextMarkup = skipContextMarkup;
        this.inlineParsers = inlineParsers;
        this.inlineNames = inlineNames;
        this.wrappers = wrappers;
        this.nodeTypes = /* @__PURE__ */ Object.create(null);
        for (let t2 of nodeSet2.types)
          this.nodeTypes[t2.name] = t2.id;
      }
      createParse(input, fragments, ranges) {
        let parse = new BlockContext(this, input, fragments, ranges);
        for (let w of this.wrappers)
          parse = w(parse, input, fragments, ranges);
        return parse;
      }
      /**
      Reconfigure the parser.
      */
      configure(spec) {
        let config2 = resolveConfig(spec);
        if (!config2)
          return this;
        let { nodeSet: nodeSet2, skipContextMarkup } = this;
        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
        if (nonEmpty(config2.defineNodes)) {
          skipContextMarkup = Object.assign({}, skipContextMarkup);
          let nodeTypes2 = nodeSet2.types.slice(), styles2;
          for (let s of config2.defineNodes) {
            let { name: name2, block: block3, composite, style: style2 } = typeof s == "string" ? { name: s } : s;
            if (nodeTypes2.some((t2) => t2.name == name2))
              continue;
            if (composite)
              skipContextMarkup[nodeTypes2.length] = (bl, cx2, line) => composite(cx2, line, bl.value);
            let id3 = nodeTypes2.length;
            let group = composite ? ["Block", "BlockContext"] : !block3 ? void 0 : id3 >= Type2.ATXHeading1 && id3 <= Type2.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
            nodeTypes2.push(NodeType.define({
              id: id3,
              name: name2,
              props: group && [[NodeProp.group, group]]
            }));
            if (style2) {
              if (!styles2)
                styles2 = {};
              if (Array.isArray(style2) || style2 instanceof Tag)
                styles2[name2] = style2;
              else
                Object.assign(styles2, style2);
            }
          }
          nodeSet2 = new NodeSet(nodeTypes2);
          if (styles2)
            nodeSet2 = nodeSet2.extend(styleTags(styles2));
        }
        if (nonEmpty(config2.props))
          nodeSet2 = nodeSet2.extend(...config2.props);
        if (nonEmpty(config2.remove)) {
          for (let rm2 of config2.remove) {
            let block3 = this.blockNames.indexOf(rm2), inline = this.inlineNames.indexOf(rm2);
            if (block3 > -1)
              blockParsers[block3] = leafBlockParsers[block3] = void 0;
            if (inline > -1)
              inlineParsers[inline] = void 0;
          }
        }
        if (nonEmpty(config2.parseBlock)) {
          for (let spec2 of config2.parseBlock) {
            let found = blockNames.indexOf(spec2.name);
            if (found > -1) {
              blockParsers[found] = spec2.parse;
              leafBlockParsers[found] = spec2.leaf;
            } else {
              let pos = spec2.before ? findName(blockNames, spec2.before) : spec2.after ? findName(blockNames, spec2.after) + 1 : blockNames.length - 1;
              blockParsers.splice(pos, 0, spec2.parse);
              leafBlockParsers.splice(pos, 0, spec2.leaf);
              blockNames.splice(pos, 0, spec2.name);
            }
            if (spec2.endLeaf)
              endLeafBlock.push(spec2.endLeaf);
          }
        }
        if (nonEmpty(config2.parseInline)) {
          for (let spec2 of config2.parseInline) {
            let found = inlineNames.indexOf(spec2.name);
            if (found > -1) {
              inlineParsers[found] = spec2.parse;
            } else {
              let pos = spec2.before ? findName(inlineNames, spec2.before) : spec2.after ? findName(inlineNames, spec2.after) + 1 : inlineNames.length - 1;
              inlineParsers.splice(pos, 0, spec2.parse);
              inlineNames.splice(pos, 0, spec2.name);
            }
          }
        }
        if (config2.wrap)
          wrappers = wrappers.concat(config2.wrap);
        return new _MarkdownParser(nodeSet2, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
      }
      /**
      @internal
      */
      getNodeType(name2) {
        let found = this.nodeTypes[name2];
        if (found == null)
          throw new RangeError(`Unknown node type '${name2}'`);
        return found;
      }
      /**
      Parse the given piece of inline text at the given offset,
      returning an array of [`Element`](#Element) objects representing
      the inline content.
      */
      parseInline(text5, offset) {
        let cx2 = new InlineContext(this, text5, offset);
        outer: for (let pos = offset; pos < cx2.end; ) {
          let next2 = cx2.char(pos);
          for (let token of this.inlineParsers)
            if (token) {
              let result = token(cx2, next2, pos);
              if (result >= 0) {
                pos = result;
                continue outer;
              }
            }
          pos++;
        }
        return cx2.resolveMarkers(0);
      }
    };
    nodeTypes = [NodeType.none];
    for (let i = 1, name2; name2 = Type2[i]; i++) {
      nodeTypes[i] = NodeType.define({
        id: i,
        name: name2,
        props: i >= Type2.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]],
        top: name2 == "Document"
      });
    }
    none3 = [];
    Buffer2 = class {
      constructor(nodeSet2) {
        this.nodeSet = nodeSet2;
        this.content = [];
        this.nodes = [];
      }
      write(type7, from3, to, children = 0) {
        this.content.push(type7, from3, to, 4 + children * 4);
        return this;
      }
      writeElements(elts, offset = 0) {
        for (let e of elts)
          e.writeTo(this, offset);
        return this;
      }
      finish(type7, length) {
        return Tree.build({
          buffer: this.content,
          nodeSet: this.nodeSet,
          reused: this.nodes,
          topID: type7,
          length
        });
      }
    };
    Element2 = class {
      /**
      @internal
      */
      constructor(type7, from3, to, children = none3) {
        this.type = type7;
        this.from = from3;
        this.to = to;
        this.children = children;
      }
      /**
      @internal
      */
      writeTo(buf, offset) {
        let startOff = buf.content.length;
        buf.writeElements(this.children, offset);
        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
      }
      /**
      @internal
      */
      toTree(nodeSet2) {
        return new Buffer2(nodeSet2).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
      }
    };
    TreeElement = class {
      constructor(tree, from3) {
        this.tree = tree;
        this.from = from3;
      }
      get to() {
        return this.from + this.tree.length;
      }
      get type() {
        return this.tree.type.id;
      }
      get children() {
        return none3;
      }
      writeTo(buf, offset) {
        buf.nodes.push(this.tree);
        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
      }
      toTree() {
        return this.tree;
      }
    };
    EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
    EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
    LinkStart = {};
    ImageStart = {};
    InlineDelimiter = class {
      constructor(type7, from3, to, side) {
        this.type = type7;
        this.from = from3;
        this.to = to;
        this.side = side;
      }
    };
    Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
    Punctuation2 = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
    try {
      Punctuation2 = new RegExp("[\\p{S}|\\p{P}]", "u");
    } catch (_) {
    }
    DefaultInline = {
      Escape(cx2, next2, start2) {
        if (next2 != 92 || start2 == cx2.end - 1)
          return -1;
        let escaped = cx2.char(start2 + 1);
        for (let i = 0; i < Escapable.length; i++)
          if (Escapable.charCodeAt(i) == escaped)
            return cx2.append(elt(Type2.Escape, start2, start2 + 2));
        return -1;
      },
      Entity(cx2, next2, start2) {
        if (next2 != 38)
          return -1;
        let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx2.slice(start2 + 1, start2 + 31));
        return m ? cx2.append(elt(Type2.Entity, start2, start2 + 1 + m[0].length)) : -1;
      },
      InlineCode(cx2, next2, start2) {
        if (next2 != 96 || start2 && cx2.char(start2 - 1) == 96)
          return -1;
        let pos = start2 + 1;
        while (pos < cx2.end && cx2.char(pos) == 96)
          pos++;
        let size = pos - start2, curSize = 0;
        for (; pos < cx2.end; pos++) {
          if (cx2.char(pos) == 96) {
            curSize++;
            if (curSize == size && cx2.char(pos + 1) != 96)
              return cx2.append(elt(Type2.InlineCode, start2, pos + 1, [
                elt(Type2.CodeMark, start2, start2 + size),
                elt(Type2.CodeMark, pos + 1 - size, pos + 1)
              ]));
          } else {
            curSize = 0;
          }
        }
        return -1;
      },
      HTMLTag(cx2, next2, start2) {
        if (next2 != 60 || start2 == cx2.end - 1)
          return -1;
        let after = cx2.slice(start2 + 1, cx2.end);
        let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
        if (url) {
          return cx2.append(elt(Type2.Autolink, start2, start2 + 1 + url[0].length, [
            elt(Type2.LinkMark, start2, start2 + 1),
            // url[0] includes the closing bracket, so exclude it from this slice
            elt(Type2.URL, start2 + 1, start2 + url[0].length),
            elt(Type2.LinkMark, start2 + url[0].length, start2 + 1 + url[0].length)
          ]));
        }
        let comment4 = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
        if (comment4)
          return cx2.append(elt(Type2.Comment, start2, start2 + 1 + comment4[0].length));
        let procInst = /^\?[^]*?\?>/.exec(after);
        if (procInst)
          return cx2.append(elt(Type2.ProcessingInstruction, start2, start2 + 1 + procInst[0].length));
        let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
        if (!m)
          return -1;
        return cx2.append(elt(Type2.HTMLTag, start2, start2 + 1 + m[0].length));
      },
      Emphasis(cx2, next2, start2) {
        if (next2 != 95 && next2 != 42)
          return -1;
        let pos = start2 + 1;
        while (cx2.char(pos) == next2)
          pos++;
        let before = cx2.slice(start2 - 1, start2), after = cx2.slice(pos, pos + 1);
        let pBefore = Punctuation2.test(before), pAfter = Punctuation2.test(after);
        let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
        let canOpen = leftFlanking && (next2 == 42 || !rightFlanking || pBefore);
        let canClose = rightFlanking && (next2 == 42 || !leftFlanking || pAfter);
        return cx2.append(new InlineDelimiter(next2 == 95 ? EmphasisUnderscore : EmphasisAsterisk, start2, pos, (canOpen ? 1 : 0) | (canClose ? 2 : 0)));
      },
      HardBreak(cx2, next2, start2) {
        if (next2 == 92 && cx2.char(start2 + 1) == 10)
          return cx2.append(elt(Type2.HardBreak, start2, start2 + 2));
        if (next2 == 32) {
          let pos = start2 + 1;
          while (cx2.char(pos) == 32)
            pos++;
          if (cx2.char(pos) == 10 && pos >= start2 + 2)
            return cx2.append(elt(Type2.HardBreak, start2, pos + 1));
        }
        return -1;
      },
      Link(cx2, next2, start2) {
        return next2 == 91 ? cx2.append(new InlineDelimiter(
          LinkStart,
          start2,
          start2 + 1,
          1
          /* Mark.Open */
        )) : -1;
      },
      Image(cx2, next2, start2) {
        return next2 == 33 && cx2.char(start2 + 1) == 91 ? cx2.append(new InlineDelimiter(
          ImageStart,
          start2,
          start2 + 2,
          1
          /* Mark.Open */
        )) : -1;
      },
      LinkEnd(cx2, next2, start2) {
        if (next2 != 93)
          return -1;
        for (let i = cx2.parts.length - 1; i >= 0; i--) {
          let part = cx2.parts[i];
          if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
            if (!part.side || cx2.skipSpace(part.to) == start2 && !/[(\[]/.test(cx2.slice(start2 + 1, start2 + 2))) {
              cx2.parts[i] = null;
              return -1;
            }
            let content3 = cx2.takeContent(i);
            let link2 = cx2.parts[i] = finishLink(cx2, content3, part.type == LinkStart ? Type2.Link : Type2.Image, part.from, start2 + 1);
            if (part.type == LinkStart)
              for (let j = 0; j < i; j++) {
                let p = cx2.parts[j];
                if (p instanceof InlineDelimiter && p.type == LinkStart)
                  p.side = 0;
              }
            return link2.to;
          }
        }
        return -1;
      }
    };
    InlineContext = class {
      /**
      @internal
      */
      constructor(parser29, text5, offset) {
        this.parser = parser29;
        this.text = text5;
        this.offset = offset;
        this.parts = [];
      }
      /**
      Get the character code at the given (document-relative)
      position.
      */
      char(pos) {
        return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset);
      }
      /**
      The position of the end of this inline section.
      */
      get end() {
        return this.offset + this.text.length;
      }
      /**
      Get a substring of this inline section. Again uses
      document-relative positions.
      */
      slice(from3, to) {
        return this.text.slice(from3 - this.offset, to - this.offset);
      }
      /**
      @internal
      */
      append(elt2) {
        this.parts.push(elt2);
        return elt2.to;
      }
      /**
      Add a [delimiter](#DelimiterType) at this given position. `open`
      and `close` indicate whether this delimiter is opening, closing,
      or both. Returns the end of the delimiter, for convenient
      returning from [parse functions](#InlineParser.parse).
      */
      addDelimiter(type7, from3, to, open, close) {
        return this.append(new InlineDelimiter(type7, from3, to, (open ? 1 : 0) | (close ? 2 : 0)));
      }
      /**
      Returns true when there is an unmatched link or image opening
      token before the current position.
      */
      get hasOpenLink() {
        for (let i = this.parts.length - 1; i >= 0; i--) {
          let part = this.parts[i];
          if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))
            return true;
        }
        return false;
      }
      /**
      Add an inline element. Returns the end of the element.
      */
      addElement(elt2) {
        return this.append(elt2);
      }
      /**
      Resolve markers between this.parts.length and from, wrapping matched markers in the
      appropriate node and updating the content of this.parts. @internal
      */
      resolveMarkers(from3) {
        for (let i = from3; i < this.parts.length; i++) {
          let close = this.parts[i];
          if (!(close instanceof InlineDelimiter && close.type.resolve && close.side & 2))
            continue;
          let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
          let closeSize = close.to - close.from;
          let open, j = i - 1;
          for (; j >= from3; j--) {
            let part = this.parts[j];
            if (part instanceof InlineDelimiter && part.side & 1 && part.type == close.type && // Ignore emphasis delimiters where the character count doesn't match
            !(emp && (close.side & 1 || part.side & 2) && (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
              open = part;
              break;
            }
          }
          if (!open)
            continue;
          let type7 = close.type.resolve, content3 = [];
          let start2 = open.from, end2 = close.to;
          if (emp) {
            let size = Math.min(2, open.to - open.from, closeSize);
            start2 = open.to - size;
            end2 = close.from + size;
            type7 = size == 1 ? "Emphasis" : "StrongEmphasis";
          }
          if (open.type.mark)
            content3.push(this.elt(open.type.mark, start2, open.to));
          for (let k = j + 1; k < i; k++) {
            if (this.parts[k] instanceof Element2)
              content3.push(this.parts[k]);
            this.parts[k] = null;
          }
          if (close.type.mark)
            content3.push(this.elt(close.type.mark, close.from, end2));
          let element2 = this.elt(type7, start2, end2, content3);
          this.parts[j] = emp && open.from != start2 ? new InlineDelimiter(open.type, open.from, start2, open.side) : null;
          let keep = this.parts[i] = emp && close.to != end2 ? new InlineDelimiter(close.type, end2, close.to, close.side) : null;
          if (keep)
            this.parts.splice(i, 0, element2);
          else
            this.parts[i] = element2;
        }
        let result = [];
        for (let i = from3; i < this.parts.length; i++) {
          let part = this.parts[i];
          if (part instanceof Element2)
            result.push(part);
        }
        return result;
      }
      /**
      Find an opening delimiter of the given type. Returns `null` if
      no delimiter is found, or an index that can be passed to
      [`takeContent`](#InlineContext.takeContent) otherwise.
      */
      findOpeningDelimiter(type7) {
        for (let i = this.parts.length - 1; i >= 0; i--) {
          let part = this.parts[i];
          if (part instanceof InlineDelimiter && part.type == type7)
            return i;
        }
        return null;
      }
      /**
      Remove all inline elements and delimiters starting from the
      given index (which you should get from
      [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
      resolve delimiters inside of them, and return them as an array
      of elements.
      */
      takeContent(startIndex) {
        let content3 = this.resolveMarkers(startIndex);
        this.parts.length = startIndex;
        return content3;
      }
      /**
      Skip space after the given (document) position, returning either
      the position of the next non-space character or the end of the
      section.
      */
      skipSpace(from3) {
        return skipSpace(this.text, from3 - this.offset) + this.offset;
      }
      elt(type7, from3, to, children) {
        if (typeof type7 == "string")
          return elt(this.parser.getNodeType(type7), from3, to, children);
        return new TreeElement(type7, from3);
      }
    };
    NotLast = [Type2.CodeBlock, Type2.ListItem, Type2.OrderedList, Type2.BulletList];
    FragmentCursor3 = class {
      constructor(fragments, input) {
        this.fragments = fragments;
        this.input = input;
        this.i = 0;
        this.fragment = null;
        this.fragmentEnd = -1;
        this.cursor = null;
        if (fragments.length)
          this.fragment = fragments[this.i++];
      }
      nextFragment() {
        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
        this.cursor = null;
        this.fragmentEnd = -1;
      }
      moveTo(pos, lineStart) {
        while (this.fragment && this.fragment.to <= pos)
          this.nextFragment();
        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
          return false;
        if (this.fragmentEnd < 0) {
          let end2 = this.fragment.to;
          while (end2 > 0 && this.input.read(end2 - 1, end2) != "\n")
            end2--;
          this.fragmentEnd = end2 ? end2 - 1 : 0;
        }
        let c2 = this.cursor;
        if (!c2) {
          c2 = this.cursor = this.fragment.tree.cursor();
          c2.firstChild();
        }
        let rPos = pos + this.fragment.offset;
        while (c2.to <= rPos)
          if (!c2.parent())
            return false;
        for (; ; ) {
          if (c2.from >= rPos)
            return this.fragment.from <= lineStart;
          if (!c2.childAfter(rPos))
            return false;
        }
      }
      matches(hash6) {
        let tree = this.cursor.tree;
        return tree && tree.prop(NodeProp.contextHash) == hash6;
      }
      takeNodes(cx2) {
        let cur2 = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
        let start2 = cx2.absoluteLineStart, end2 = start2, blockI = cx2.block.children.length;
        let prevEnd = end2, prevI = blockI;
        for (; ; ) {
          if (cur2.to - off > fragEnd) {
            if (cur2.type.isAnonymous && cur2.firstChild())
              continue;
            break;
          }
          let pos = toRelative(cur2.from - off, cx2.ranges);
          if (cur2.to - off <= cx2.ranges[cx2.rangeI].to) {
            cx2.addNode(cur2.tree, pos);
          } else {
            let dummy = new Tree(cx2.parser.nodeSet.types[Type2.Paragraph], [], [], 0, cx2.block.hashProp);
            cx2.reusePlaceholders.set(dummy, cur2.tree);
            cx2.addNode(dummy, pos);
          }
          if (cur2.type.is("Block")) {
            if (NotLast.indexOf(cur2.type.id) < 0) {
              end2 = cur2.to - off;
              blockI = cx2.block.children.length;
            } else {
              end2 = prevEnd;
              blockI = prevI;
              prevEnd = cur2.to - off;
              prevI = cx2.block.children.length;
            }
          }
          if (!cur2.nextSibling())
            break;
        }
        while (cx2.block.children.length > blockI) {
          cx2.block.children.pop();
          cx2.block.positions.pop();
        }
        return end2 - start2;
      }
    };
    markdownHighlighting = styleTags({
      "Blockquote/...": tags.quote,
      HorizontalRule: tags.contentSeparator,
      "ATXHeading1/... SetextHeading1/...": tags.heading1,
      "ATXHeading2/... SetextHeading2/...": tags.heading2,
      "ATXHeading3/...": tags.heading3,
      "ATXHeading4/...": tags.heading4,
      "ATXHeading5/...": tags.heading5,
      "ATXHeading6/...": tags.heading6,
      "Comment CommentBlock": tags.comment,
      Escape: tags.escape,
      Entity: tags.character,
      "Emphasis/...": tags.emphasis,
      "StrongEmphasis/...": tags.strong,
      "Link/... Image/...": tags.link,
      "OrderedList/... BulletList/...": tags.list,
      "BlockQuote/...": tags.quote,
      "InlineCode CodeText": tags.monospace,
      "URL Autolink": tags.url,
      "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags.processingInstruction,
      "CodeInfo LinkLabel": tags.labelName,
      LinkTitle: tags.string,
      Paragraph: tags.content
    });
    parser11 = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map((n) => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map((n) => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map((n) => DefaultInline[n]), Object.keys(DefaultInline), []);
    StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
    Strikethrough = {
      defineNodes: [{
        name: "Strikethrough",
        style: { "Strikethrough/...": tags.strikethrough }
      }, {
        name: "StrikethroughMark",
        style: tags.processingInstruction
      }],
      parseInline: [{
        name: "Strikethrough",
        parse(cx2, next2, pos) {
          if (next2 != 126 || cx2.char(pos + 1) != 126 || cx2.char(pos + 2) == 126)
            return -1;
          let before = cx2.slice(pos - 1, pos), after = cx2.slice(pos + 2, pos + 3);
          let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
          let pBefore = Punctuation2.test(before), pAfter = Punctuation2.test(after);
          return cx2.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
        },
        after: "Emphasis"
      }]
    };
    delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
    TableParser = class {
      constructor() {
        this.rows = null;
      }
      nextLine(cx2, line, leaf) {
        if (this.rows == null) {
          this.rows = false;
          let lineText;
          if ((line.next == 45 || line.next == 58 || line.next == 124) && delimiterLine.test(lineText = line.text.slice(line.pos))) {
            let firstRow = [], firstCount = parseRow(cx2, leaf.content, 0, firstRow, leaf.start);
            if (firstCount == parseRow(cx2, lineText, line.pos))
              this.rows = [
                cx2.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                cx2.elt("TableDelimiter", cx2.lineStart + line.pos, cx2.lineStart + line.text.length)
              ];
          }
        } else if (this.rows) {
          let content3 = [];
          parseRow(cx2, line.text, line.pos, content3, cx2.lineStart);
          this.rows.push(cx2.elt("TableRow", cx2.lineStart + line.pos, cx2.lineStart + line.text.length, content3));
        }
        return false;
      }
      finish(cx2, leaf) {
        if (!this.rows)
          return false;
        cx2.addLeafElement(leaf, cx2.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
        return true;
      }
    };
    Table = {
      defineNodes: [
        { name: "Table", block: true },
        { name: "TableHeader", style: { "TableHeader/...": tags.heading } },
        "TableRow",
        { name: "TableCell", style: tags.content },
        { name: "TableDelimiter", style: tags.processingInstruction }
      ],
      parseBlock: [{
        name: "Table",
        leaf(_, leaf) {
          return hasPipe(leaf.content, 0) ? new TableParser() : null;
        },
        endLeaf(cx2, line, leaf) {
          if (leaf.parsers.some((p) => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
            return false;
          let next2 = cx2.peekLine();
          return delimiterLine.test(next2) && parseRow(cx2, line.text, line.basePos) == parseRow(cx2, next2, line.basePos);
        },
        before: "SetextHeading"
      }]
    };
    TaskParser = class {
      nextLine() {
        return false;
      }
      finish(cx2, leaf) {
        cx2.addLeafElement(leaf, cx2.elt("Task", leaf.start, leaf.start + leaf.content.length, [
          cx2.elt("TaskMarker", leaf.start, leaf.start + 3),
          ...cx2.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
        ]));
        return true;
      }
    };
    TaskList = {
      defineNodes: [
        { name: "Task", block: true, style: tags.list },
        { name: "TaskMarker", style: tags.atom }
      ],
      parseBlock: [{
        name: "TaskList",
        leaf(cx2, leaf) {
          return /^\[[ xX]\][ \t]/.test(leaf.content) && cx2.parentType().name == "ListItem" ? new TaskParser() : null;
        },
        after: "SetextHeading"
      }]
    };
    autolinkRE = /(www\.)|(https?:\/\/)|([\w.+-]{1,100}@)|(mailto:|xmpp:)/gy;
    urlRE = /[\w-]+(\.[\w-]+)+(\/[^\s<]*)?/gy;
    lastTwoDomainWords = /[\w-]+\.[\w-]+($|\/)/;
    emailRE = /[\w.+-]+@[\w-]+(\.[\w.-]+)+/gy;
    xmppResourceRE = /\/[a-zA-Z\d@.]+/gy;
    Autolink = {
      parseInline: [{
        name: "Autolink",
        parse(cx2, next2, absPos) {
          let pos = absPos - cx2.offset;
          if (pos && /\w/.test(cx2.text[pos - 1]))
            return -1;
          autolinkRE.lastIndex = pos;
          let m = autolinkRE.exec(cx2.text), end2 = -1;
          if (!m)
            return -1;
          if (m[1] || m[2]) {
            end2 = autolinkURLEnd(cx2.text, pos + m[0].length);
            if (end2 > -1 && cx2.hasOpenLink) {
              let noBracket = /([^\[\]]|\[[^\]]*\])*/.exec(cx2.text.slice(pos, end2));
              end2 = pos + noBracket[0].length;
            }
          } else if (m[3]) {
            end2 = autolinkEmailEnd(cx2.text, pos);
          } else {
            end2 = autolinkEmailEnd(cx2.text, pos + m[0].length);
            if (end2 > -1 && m[0] == "xmpp:") {
              xmppResourceRE.lastIndex = end2;
              m = xmppResourceRE.exec(cx2.text);
              if (m)
                end2 = m.index + m[0].length;
            }
          }
          if (end2 < 0)
            return -1;
          cx2.addElement(cx2.elt("URL", absPos, end2 + cx2.offset));
          return end2 + cx2.offset;
        }
      }]
    };
    GFM = [Table, TaskList, Strikethrough, Autolink];
    Superscript = {
      defineNodes: [
        { name: "Superscript", style: tags.special(tags.content) },
        { name: "SuperscriptMark", style: tags.processingInstruction }
      ],
      parseInline: [{
        name: "Superscript",
        parse: parseSubSuper(94, "Superscript", "SuperscriptMark")
      }]
    };
    Subscript = {
      defineNodes: [
        { name: "Subscript", style: tags.special(tags.content) },
        { name: "SubscriptMark", style: tags.processingInstruction }
      ],
      parseInline: [{
        name: "Subscript",
        parse: parseSubSuper(126, "Subscript", "SubscriptMark")
      }]
    };
    Emoji = {
      defineNodes: [{ name: "Emoji", style: tags.character }],
      parseInline: [{
        name: "Emoji",
        parse(cx2, next2, pos) {
          let match2;
          if (next2 != 58 || !(match2 = /^[a-zA-Z_0-9]+:/.exec(cx2.slice(pos + 1, cx2.end))))
            return -1;
          return cx2.addElement(cx2.elt("Emoji", pos, pos + 1 + match2[0].length));
        }
      }]
    };
  }
});

// ../../node_modules/@codemirror/lang-markdown/dist/index.js
var dist_exports11 = {};
__export(dist_exports11, {
  commonmarkLanguage: () => commonmarkLanguage,
  deleteMarkupBackward: () => deleteMarkupBackward,
  insertNewlineContinueMarkup: () => insertNewlineContinueMarkup,
  markdown: () => markdown,
  markdownKeymap: () => markdownKeymap,
  markdownLanguage: () => markdownLanguage
});
function isHeading(type7) {
  let match2 = /^(?:ATX|Setext)Heading(\d)$/.exec(type7.name);
  return match2 ? +match2[1] : void 0;
}
function isList(type7) {
  return type7.name == "OrderedList" || type7.name == "BulletList";
}
function findSectionEnd(headerNode, level) {
  let last = headerNode;
  for (; ; ) {
    let next2 = last.nextSibling, heading2;
    if (!next2 || (heading2 = isHeading(next2.type)) != null && heading2 <= level)
      break;
    last = next2;
  }
  return last.to;
}
function mkLang(parser29) {
  return new Language(data, parser29, [headerIndent], "markdown");
}
function getCodeParser(languages2, defaultLanguage) {
  return (info) => {
    if (info && languages2) {
      let found = null;
      info = /\S*/.exec(info)[0];
      if (typeof languages2 == "function")
        found = languages2(info);
      else
        found = LanguageDescription.matchLanguageName(languages2, info, true);
      if (found instanceof LanguageDescription)
        return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());
      else if (found)
        return found.parser;
    }
    return defaultLanguage ? defaultLanguage.parser : null;
  };
}
function getContext(node, doc2) {
  let nodes = [], context = [];
  for (let cur2 = node; cur2; cur2 = cur2.parent) {
    if (cur2.name == "FencedCode")
      return context;
    if (cur2.name == "ListItem" || cur2.name == "Blockquote")
      nodes.push(cur2);
  }
  for (let i = nodes.length - 1; i >= 0; i--) {
    let node2 = nodes[i], match2;
    let line = doc2.lineAt(node2.from), startPos = node2.from - line.from;
    if (node2.name == "Blockquote" && (match2 = /^ *>( ?)/.exec(line.text.slice(startPos)))) {
      context.push(new Context(node2, startPos, startPos + match2[0].length, "", match2[1], ">", null));
    } else if (node2.name == "ListItem" && node2.parent.name == "OrderedList" && (match2 = /^( *)\d+([.)])( *)/.exec(line.text.slice(startPos)))) {
      let after = match2[3], len = match2[0].length;
      if (after.length >= 4) {
        after = after.slice(0, after.length - 4);
        len -= 4;
      }
      context.push(new Context(node2.parent, startPos, startPos + len, match2[1], after, match2[2], node2));
    } else if (node2.name == "ListItem" && node2.parent.name == "BulletList" && (match2 = /^( *)([-+*])( {1,4}\[[ xX]\])?( +)/.exec(line.text.slice(startPos)))) {
      let after = match2[4], len = match2[0].length;
      if (after.length > 4) {
        after = after.slice(0, after.length - 4);
        len -= 4;
      }
      let type7 = match2[2];
      if (match2[3])
        type7 += match2[3].replace(/[xX]/, " ");
      context.push(new Context(node2.parent, startPos, startPos + len, match2[1], after, type7, node2));
    }
  }
  return context;
}
function itemNumber(item, doc2) {
  return /^(\s*)(\d+)(?=[.)])/.exec(doc2.sliceString(item.from, item.from + 10));
}
function renumberList(after, doc2, changes, offset = 0) {
  for (let prev = -1, node = after; ; ) {
    if (node.name == "ListItem") {
      let m = itemNumber(node, doc2);
      let number3 = +m[2];
      if (prev >= 0) {
        if (number3 != prev + 1)
          return;
        changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });
      }
      prev = number3;
    }
    let next2 = node.nextSibling;
    if (!next2)
      break;
    node = next2;
  }
}
function normalizeIndent(content3, state) {
  let blank = /^[ \t]*/.exec(content3)[0].length;
  if (!blank || state.facet(indentUnit) != "	")
    return content3;
  let col = countColumn(content3, 4, blank);
  let space10 = "";
  for (let i = col; i > 0; ) {
    if (i >= 4) {
      space10 += "	";
      i -= 4;
    } else {
      space10 += " ";
      i--;
    }
  }
  return space10 + content3.slice(blank);
}
function isMark(node) {
  return node.name == "QuoteMark" || node.name == "ListMark";
}
function nonTightList(node, doc2) {
  if (node.name != "OrderedList" && node.name != "BulletList")
    return false;
  let first = node.firstChild, second = node.getChild("ListItem", "ListItem");
  if (!second)
    return false;
  let line1 = doc2.lineAt(first.to), line2 = doc2.lineAt(second.from);
  let empty2 = /^[\s>]*$/.test(line1.text);
  return line1.number + (empty2 ? 0 : 1) < line2.number;
}
function blankLine(context, state, line) {
  let insert2 = "";
  for (let i = 0, e = context.length - 2; i <= e; i++) {
    insert2 += context[i].blank(i < e ? countColumn(line.text, 4, Math.min(line.text.length, context[i + 1].from)) - insert2.length : null, i < e);
  }
  return normalizeIndent(insert2, state);
}
function contextNodeForDelete(tree, pos) {
  let node = tree.resolveInner(pos, -1), scan = pos;
  if (isMark(node)) {
    scan = node.from;
    node = node.parent;
  }
  for (let prev; prev = node.childBefore(scan); ) {
    if (isMark(prev)) {
      scan = prev.from;
    } else if (prev.name == "OrderedList" || prev.name == "BulletList") {
      node = prev.lastChild;
      scan = node.to;
    } else {
      break;
    }
  }
  return node;
}
function markdown(config2 = {}) {
  let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser: parser29 } = commonmarkLanguage, completeHTMLTags = true, htmlTagLanguage = htmlNoMatch } = config2;
  if (!(parser29 instanceof MarkdownParser))
    throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
  let extensions = config2.extensions ? [config2.extensions] : [];
  let support = [htmlTagLanguage.support], defaultCode;
  if (defaultCodeLanguage instanceof LanguageSupport) {
    support.push(defaultCodeLanguage.support);
    defaultCode = defaultCodeLanguage.language;
  } else if (defaultCodeLanguage) {
    defaultCode = defaultCodeLanguage;
  }
  let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : void 0;
  extensions.push(parseCode({ codeParser, htmlParser: htmlTagLanguage.language.parser }));
  if (addKeymap)
    support.push(Prec.high(keymap.of(markdownKeymap)));
  let lang = mkLang(parser29.configure(extensions));
  if (completeHTMLTags)
    support.push(lang.data.of({ autocomplete: htmlTagCompletion }));
  return new LanguageSupport(lang, support);
}
function htmlTagCompletion(context) {
  let { state, pos } = context, m = /<[:\-\.\w\u00b7-\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));
  if (!m)
    return null;
  let tree = syntaxTree(state).resolveInner(pos, -1);
  while (tree && !tree.type.isTop) {
    if (tree.name == "CodeBlock" || tree.name == "FencedCode" || tree.name == "ProcessingInstructionBlock" || tree.name == "CommentBlock" || tree.name == "Link" || tree.name == "Image")
      return null;
    tree = tree.parent;
  }
  return {
    from: pos - m[0].length,
    to: pos,
    options: htmlTagCompletions(),
    validFor: /^<[:\-\.\w\u00b7-\uffff]*$/
  };
}
function htmlTagCompletions() {
  if (_tagCompletions)
    return _tagCompletions;
  let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));
  return _tagCompletions = result ? result.options : [];
}
var data, headingProp, commonmark, headerIndent, commonmarkLanguage, extended, markdownLanguage, Context, insertNewlineContinueMarkup, deleteMarkupBackward, markdownKeymap, htmlNoMatch, _tagCompletions;
var init_dist26 = __esm({
  "../../node_modules/@codemirror/lang-markdown/dist/index.js"() {
    init_dist2();
    init_dist3();
    init_dist5();
    init_dist7();
    init_dist25();
    init_dist18();
    init_dist();
    data = /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "<!--", close: "-->" } } });
    headingProp = /* @__PURE__ */ new NodeProp();
    commonmark = /* @__PURE__ */ parser11.configure({
      props: [
        /* @__PURE__ */ foldNodeProp.add((type7) => {
          return !type7.is("Block") || type7.is("Document") || isHeading(type7) != null || isList(type7) ? void 0 : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
        }),
        /* @__PURE__ */ headingProp.add(isHeading),
        /* @__PURE__ */ indentNodeProp.add({
          Document: () => null
        }),
        /* @__PURE__ */ languageDataProp.add({
          Document: data
        })
      ]
    });
    headerIndent = /* @__PURE__ */ foldService.of((state, start2, end2) => {
      for (let node = syntaxTree(state).resolveInner(end2, -1); node; node = node.parent) {
        if (node.from < start2)
          break;
        let heading2 = node.type.prop(headingProp);
        if (heading2 == null)
          continue;
        let upto = findSectionEnd(node, heading2);
        if (upto > end2)
          return { from: end2, to: upto };
      }
      return null;
    });
    commonmarkLanguage = /* @__PURE__ */ mkLang(commonmark);
    extended = /* @__PURE__ */ commonmark.configure([GFM, Subscript, Superscript, Emoji, {
      props: [
        /* @__PURE__ */ foldNodeProp.add({
          Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })
        })
      ]
    }]);
    markdownLanguage = /* @__PURE__ */ mkLang(extended);
    Context = class {
      constructor(node, from3, to, spaceBefore, spaceAfter, type7, item) {
        this.node = node;
        this.from = from3;
        this.to = to;
        this.spaceBefore = spaceBefore;
        this.spaceAfter = spaceAfter;
        this.type = type7;
        this.item = item;
      }
      blank(maxWidth, trailing = true) {
        let result = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
        if (maxWidth != null) {
          while (result.length < maxWidth)
            result += " ";
          return result;
        } else {
          for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
            result += " ";
          return result + (trailing ? this.spaceAfter : "");
        }
      }
      marker(doc2, add3) {
        let number3 = this.node.name == "OrderedList" ? String(+itemNumber(this.item, doc2)[2] + add3) : "";
        return this.spaceBefore + number3 + this.type + this.spaceAfter;
      }
    };
    insertNewlineContinueMarkup = ({ state, dispatch }) => {
      let tree = syntaxTree(state), { doc: doc2 } = state;
      let dont = null, changes = state.changeByRange((range) => {
        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from, 0))
          return dont = { range };
        let pos = range.from, line = doc2.lineAt(pos);
        let context = getContext(tree.resolveInner(pos, -1), doc2);
        while (context.length && context[context.length - 1].from > pos - line.from)
          context.pop();
        if (!context.length)
          return dont = { range };
        let inner = context[context.length - 1];
        if (inner.to - inner.spaceAfter.length > pos - line.from)
          return dont = { range };
        let emptyLine = pos >= inner.to - inner.spaceAfter.length && !/\S/.test(line.text.slice(inner.to));
        if (inner.item && emptyLine) {
          let first = inner.node.firstChild, second = inner.node.getChild("ListItem", "ListItem");
          if (first.to >= pos || second && second.to < pos || line.from > 0 && !/[^\s>]/.test(doc2.lineAt(line.from - 1).text)) {
            let next2 = context.length > 1 ? context[context.length - 2] : null;
            let delTo, insert3 = "";
            if (next2 && next2.item) {
              delTo = line.from + next2.from;
              insert3 = next2.marker(doc2, 1);
            } else {
              delTo = line.from + (next2 ? next2.to : 0);
            }
            let changes3 = [{ from: delTo, to: pos, insert: insert3 }];
            if (inner.node.name == "OrderedList")
              renumberList(inner.item, doc2, changes3, -2);
            if (next2 && next2.node.name == "OrderedList")
              renumberList(next2.item, doc2, changes3);
            return { range: EditorSelection.cursor(delTo + insert3.length), changes: changes3 };
          } else {
            let insert3 = blankLine(context, state, line);
            return {
              range: EditorSelection.cursor(pos + insert3.length + 1),
              changes: { from: line.from, insert: insert3 + state.lineBreak }
            };
          }
        }
        if (inner.node.name == "Blockquote" && emptyLine && line.from) {
          let prevLine = doc2.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
          if (quoted && quoted.index == inner.from) {
            let changes3 = state.changes([
              { from: prevLine.from + quoted.index, to: prevLine.to },
              { from: line.from + inner.from, to: line.to }
            ]);
            return { range: range.map(changes3), changes: changes3 };
          }
        }
        let changes2 = [];
        if (inner.node.name == "OrderedList")
          renumberList(inner.item, doc2, changes2);
        let continued = inner.item && inner.item.from < line.from;
        let insert2 = "";
        if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
          for (let i = 0, e = context.length - 1; i <= e; i++) {
            insert2 += i == e && !continued ? context[i].marker(doc2, 1) : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert2.length : null);
          }
        }
        let from3 = pos;
        while (from3 > line.from && /\s/.test(line.text.charAt(from3 - line.from - 1)))
          from3--;
        insert2 = normalizeIndent(insert2, state);
        if (nonTightList(inner.node, state.doc))
          insert2 = blankLine(context, state, line) + state.lineBreak + insert2;
        changes2.push({ from: from3, to: pos, insert: state.lineBreak + insert2 });
        return { range: EditorSelection.cursor(from3 + insert2.length + 1), changes: changes2 };
      });
      if (dont)
        return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
    };
    deleteMarkupBackward = ({ state, dispatch }) => {
      let tree = syntaxTree(state);
      let dont = null, changes = state.changeByRange((range) => {
        let pos = range.from, { doc: doc2 } = state;
        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
          let line = doc2.lineAt(pos);
          let context = getContext(contextNodeForDelete(tree, pos), doc2);
          if (context.length) {
            let inner = context[context.length - 1];
            let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
            if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
              return {
                range: EditorSelection.cursor(line.from + spaceEnd),
                changes: { from: line.from + spaceEnd, to: pos }
              };
            if (pos - line.from == spaceEnd && // Only apply this if we're on the line that has the
            // construct's syntax, or there's only indentation in the
            // target range
            (!inner.item || line.from <= inner.item.from || !/\S/.test(line.text.slice(0, inner.to)))) {
              let start2 = line.from + inner.from;
              if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to))) {
                let insert2 = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));
                if (start2 == line.from)
                  insert2 = normalizeIndent(insert2, state);
                return {
                  range: EditorSelection.cursor(start2 + insert2.length),
                  changes: { from: start2, to: line.from + inner.to, insert: insert2 }
                };
              }
              if (start2 < pos)
                return { range: EditorSelection.cursor(start2), changes: { from: start2, to: pos } };
            }
          }
        }
        return dont = { range };
      });
      if (dont)
        return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
      return true;
    };
    markdownKeymap = [
      { key: "Enter", run: insertNewlineContinueMarkup },
      { key: "Backspace", run: deleteMarkupBackward }
    ];
    htmlNoMatch = /* @__PURE__ */ html({ matchClosingTags: false });
    _tagCompletions = null;
  }
});

// ../../node_modules/@lezer/php/dist/index.es.js
function keywords4(name2) {
  let found = keywordMap[name2.toLowerCase()];
  return found == null ? -1 : found;
}
function isSpace2(ch2) {
  return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
}
function isASCIILetter(ch2) {
  return ch2 >= 97 && ch2 <= 122 || ch2 >= 65 && ch2 <= 90;
}
function isIdentifierStart(ch2) {
  return ch2 == 95 || ch2 >= 128 || isASCIILetter(ch2);
}
function isHex(ch2) {
  return ch2 >= 48 && ch2 <= 55 || ch2 >= 97 && ch2 <= 102 || ch2 >= 65 && ch2 <= 70;
}
function scanEscape(input) {
  let after = input.peek(1);
  if (after == 110 || after == 114 || after == 116 || after == 118 || after == 101 || after == 102 || after == 92 || after == 36 || after == 34 || after == 123)
    return 2;
  if (after >= 48 && after <= 55) {
    let size = 2, next2;
    while (size < 5 && (next2 = input.peek(size)) >= 48 && next2 <= 55) size++;
    return size;
  }
  if (after == 120 && isHex(input.peek(2))) {
    return isHex(input.peek(3)) ? 4 : 3;
  }
  if (after == 117 && input.peek(2) == 123) {
    for (let size = 3; ; size++) {
      let next2 = input.peek(size);
      if (next2 == 125) return size == 2 ? 0 : size + 1;
      if (!isHex(next2)) break;
    }
  }
  return 0;
}
var castOpen, HeredocString, interpolatedStringContent, EscapeSequence, afterInterpolation, automaticSemicolon, eof, abstract, and, array, as, Boolean2, _break2, _case, _catch, clone, _const, _continue2, _default, declare, _do, echo, _else, elseif, enddeclare, endfor, endforeach, endif, endswitch, endwhile, _enum, _extends, final, _finally, fn, _for, foreach, from, _function, global2, goto, _if, _implements, include, include_once, _instanceof, insteadof, _interface, list, match, namespace, _new, _null, or, print, _require, require_once, _return2, _switch, _throw, trait, _try, unset, use, _var, Visibility, _while, xor, _yield, keywordMap, castTypes, expression, eofToken, semicolon3, interpolated, phpHighlighting, spec_Name, parser12;
var init_index_es = __esm({
  "../../node_modules/@lezer/php/dist/index.es.js"() {
    init_dist6();
    init_dist4();
    castOpen = 1;
    HeredocString = 2;
    interpolatedStringContent = 263;
    EscapeSequence = 3;
    afterInterpolation = 264;
    automaticSemicolon = 265;
    eof = 266;
    abstract = 4;
    and = 5;
    array = 6;
    as = 7;
    Boolean2 = 8;
    _break2 = 9;
    _case = 10;
    _catch = 11;
    clone = 12;
    _const = 13;
    _continue2 = 14;
    _default = 15;
    declare = 16;
    _do = 17;
    echo = 18;
    _else = 19;
    elseif = 20;
    enddeclare = 21;
    endfor = 22;
    endforeach = 23;
    endif = 24;
    endswitch = 25;
    endwhile = 26;
    _enum = 27;
    _extends = 28;
    final = 29;
    _finally = 30;
    fn = 31;
    _for = 32;
    foreach = 33;
    from = 34;
    _function = 35;
    global2 = 36;
    goto = 37;
    _if = 38;
    _implements = 39;
    include = 40;
    include_once = 41;
    _instanceof = 42;
    insteadof = 43;
    _interface = 44;
    list = 45;
    match = 46;
    namespace = 47;
    _new = 48;
    _null = 49;
    or = 50;
    print = 51;
    _require = 52;
    require_once = 53;
    _return2 = 54;
    _switch = 55;
    _throw = 56;
    trait = 57;
    _try = 58;
    unset = 59;
    use = 60;
    _var = 61;
    Visibility = 62;
    _while = 63;
    xor = 64;
    _yield = 65;
    keywordMap = {
      abstract,
      and,
      array,
      as,
      true: Boolean2,
      false: Boolean2,
      break: _break2,
      case: _case,
      catch: _catch,
      clone,
      const: _const,
      continue: _continue2,
      declare,
      default: _default,
      do: _do,
      echo,
      else: _else,
      elseif,
      enddeclare,
      endfor,
      endforeach,
      endif,
      endswitch,
      endwhile,
      enum: _enum,
      extends: _extends,
      final,
      finally: _finally,
      fn,
      for: _for,
      foreach,
      from,
      function: _function,
      global: global2,
      goto,
      if: _if,
      implements: _implements,
      include,
      include_once,
      instanceof: _instanceof,
      insteadof,
      interface: _interface,
      list,
      match,
      namespace,
      new: _new,
      null: _null,
      or,
      print,
      require: _require,
      require_once,
      return: _return2,
      switch: _switch,
      throw: _throw,
      trait,
      try: _try,
      unset,
      use,
      var: _var,
      public: Visibility,
      private: Visibility,
      protected: Visibility,
      while: _while,
      xor,
      yield: _yield,
      __proto__: null
    };
    castTypes = {
      int: true,
      integer: true,
      bool: true,
      boolean: true,
      float: true,
      double: true,
      real: true,
      string: true,
      array: true,
      object: true,
      unset: true,
      __proto__: null
    };
    expression = new ExternalTokenizer((input) => {
      if (input.next == 40) {
        input.advance();
        let peek = 0;
        while (isSpace2(input.peek(peek))) peek++;
        let name2 = "", next2;
        while (isASCIILetter(next2 = input.peek(peek))) {
          name2 += String.fromCharCode(next2);
          peek++;
        }
        while (isSpace2(input.peek(peek))) peek++;
        if (input.peek(peek) == 41 && castTypes[name2.toLowerCase()])
          input.acceptToken(castOpen);
      } else if (input.next == 60 && input.peek(1) == 60 && input.peek(2) == 60) {
        for (let i = 0; i < 3; i++) input.advance();
        while (input.next == 32 || input.next == 9) input.advance();
        let quoted = input.next == 39;
        if (quoted) input.advance();
        if (!isIdentifierStart(input.next)) return;
        let tag2 = String.fromCharCode(input.next);
        for (; ; ) {
          input.advance();
          if (!isIdentifierStart(input.next) && !(input.next >= 48 && input.next <= 55)) break;
          tag2 += String.fromCharCode(input.next);
        }
        if (quoted) {
          if (input.next != 39) return;
          input.advance();
        }
        if (input.next != 10 && input.next != 13) return;
        for (; ; ) {
          let lineStart = input.next == 10 || input.next == 13;
          input.advance();
          if (input.next < 0) return;
          if (lineStart) {
            while (input.next == 32 || input.next == 9) input.advance();
            let match2 = true;
            for (let i = 0; i < tag2.length; i++) {
              if (input.next != tag2.charCodeAt(i)) {
                match2 = false;
                break;
              }
              input.advance();
            }
            if (match2) return input.acceptToken(HeredocString);
          }
        }
      }
    });
    eofToken = new ExternalTokenizer((input) => {
      if (input.next < 0) input.acceptToken(eof);
    });
    semicolon3 = new ExternalTokenizer((input, stack) => {
      if (input.next == 63 && stack.canShift(automaticSemicolon) && input.peek(1) == 62)
        input.acceptToken(automaticSemicolon);
    });
    interpolated = new ExternalTokenizer((input, stack) => {
      let content3 = false;
      for (; ; content3 = true) {
        if (input.next == 34 || input.next < 0 || input.next == 36 && (isIdentifierStart(input.peek(1)) || input.peek(1) == 123) || input.next == 123 && input.peek(1) == 36) {
          break;
        } else if (input.next == 92) {
          let escaped = scanEscape(input);
          if (escaped) {
            if (content3) break;
            else return input.acceptToken(EscapeSequence, escaped);
          }
        } else if (!content3 && (input.next == 91 || input.next == 45 && input.peek(1) == 62 && isIdentifierStart(input.peek(2)) || input.next == 63 && input.peek(1) == 45 && input.peek(2) == 62 && isIdentifierStart(input.peek(3))) && stack.canShift(afterInterpolation)) {
          break;
        }
        input.advance();
      }
      if (content3) input.acceptToken(interpolatedStringContent);
    });
    phpHighlighting = styleTags({
      "Visibility abstract final static": tags.modifier,
      "for foreach while do if else elseif switch try catch finally return throw break continue default case": tags.controlKeyword,
      "endif endfor endforeach endswitch endwhile declare enddeclare goto match": tags.controlKeyword,
      "and or xor yield unset clone instanceof insteadof": tags.operatorKeyword,
      "function fn class trait implements extends const enum global interface use var": tags.definitionKeyword,
      "include include_once require require_once namespace": tags.moduleKeyword,
      "new from echo print array list as": tags.keyword,
      null: tags.null,
      Boolean: tags.bool,
      VariableName: tags.variableName,
      "NamespaceName/...": tags.namespace,
      "NamedType/...": tags.typeName,
      Name: tags.name,
      "CallExpression/Name": tags.function(tags.variableName),
      "LabelStatement/Name": tags.labelName,
      "MemberExpression/Name": tags.propertyName,
      "MemberExpression/VariableName": tags.special(tags.propertyName),
      "ScopedExpression/ClassMemberName/Name": tags.propertyName,
      "ScopedExpression/ClassMemberName/VariableName": tags.special(tags.propertyName),
      "CallExpression/MemberExpression/Name": tags.function(tags.propertyName),
      "CallExpression/ScopedExpression/ClassMemberName/Name": tags.function(tags.propertyName),
      "MethodDeclaration/Name": tags.function(tags.definition(tags.variableName)),
      "FunctionDefinition/Name": tags.function(tags.definition(tags.variableName)),
      "ClassDeclaration/Name": tags.definition(tags.className),
      UpdateOp: tags.updateOperator,
      ArithOp: tags.arithmeticOperator,
      LogicOp: tags.logicOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      ControlOp: tags.controlOperator,
      AssignOp: tags.definitionOperator,
      "$ ConcatOp": tags.operator,
      LineComment: tags.lineComment,
      BlockComment: tags.blockComment,
      Integer: tags.integer,
      Float: tags.float,
      String: tags.string,
      ShellExpression: tags.special(tags.string),
      "=> ->": tags.punctuation,
      "( )": tags.paren,
      "#[ [ ]": tags.squareBracket,
      "${ { }": tags.brace,
      "-> ?->": tags.derefOperator,
      ", ; :: : \\": tags.separator,
      "PhpOpen PhpClose": tags.processingInstruction
    });
    spec_Name = { __proto__: null, static: 311, STATIC: 311, class: 333, CLASS: 333 };
    parser12 = LRParser.deserialize({
      version: 14,
      states: "$GSQ`OWOOQhQaOOP%oO`OOOOO#t'#H_'#H_O%tO#|O'#DtOOO#u'#Dw'#DwQ&SOWO'#DwO&XO$VOOOOQ#u'#Dx'#DxO&lQaO'#D|O(mQdO'#E}O(tQdO'#EQO*kQaO'#EWO,zQ`O'#ETO-PQ`O'#E^O/nQaO'#E^O/uQ`O'#EfO/zQ`O'#EoO*kQaO'#EoO0VQ`O'#HhO0[Q`O'#E{O0[Q`O'#E{OOQS'#Ic'#IcO0aQ`O'#EvOOQS'#IZ'#IZO2oQdO'#IWO6tQeO'#FUO*kQaO'#FeO*kQaO'#FfO*kQaO'#FgO*kQaO'#FhO*kQaO'#FhO*kQaO'#FkOOQO'#Id'#IdO7RQ`O'#FqOOQO'#Hi'#HiO7ZQ`O'#HOO7uQ`O'#FlO8QQ`O'#H]O8]Q`O'#FvO8eQaO'#FwO*kQaO'#GVO*kQaO'#GYO8}OrO'#G]OOQS'#Iq'#IqOOQS'#Ip'#IpOOQS'#IW'#IWO,zQ`O'#GdO,zQ`O'#GfO,zQ`O'#GkOhQaO'#GmO9UQ`O'#GnO9ZQ`O'#GqO9`Q`O'#GtO9eQeO'#GuO9eQeO'#GvO9eQeO'#GwO9oQ`O'#GxO9tQ`O'#GzO9yQaO'#G{O<YQ`O'#G|O<_Q`O'#G}O<dQ`O'#G}O9oQ`O'#HOO<iQ`O'#HQO<nQ`O'#HRO<sQ`O'#HSO<xQ`O'#HVO=TQ`O'#HWO9yQaO'#H[OOQ#u'#IV'#IVOOQ#u'#Ha'#HaQhQaOOO=fQ`O'#HPO7pQ`O'#HPO=kO#|O'#DrPOOO)CCw)CCwOOO#t-E;]-E;]OOO#u,5:c,5:cOOO#u'#H`'#H`O&XO$VOOO=vQ$VO'#IUOOOO'#IU'#IUQOOOOOOOQ#y,5:h,5:hO=}QaO,5:hOOQ#u,5:j,5:jO@eQaO,5:mO@lQaO,5;UO*kQaO,5;UO@sQ`O,5;VOCbQaO'#EsOOQS,5;^,5;^OCiQ`O,5;jOOQP'#F]'#F]O*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qOOQ#u'#Im'#ImOOQS,5<q,5<qOOQ#u,5:l,5:lOEbQ`O,5:rOEiQdO'#E}OF]Q`O'#FlOFeQ`O'#FlOFmQ`O,5:oOFrQaO'#E_OOQS,5:x,5:xOHyQ`O'#I]O9yQaO'#EaO9yQaO'#I]OOQS'#I]'#I]OIQQ`O'#I[OIYQ`O,5:xO-UQaO,5:xOI_QaO'#EgOOQS,5;Q,5;QOOQS,5;Z,5;ZOIiQ`O,5;ZOOQO,5>S,5>SOJ[QdO,5;gOOQO-E;f-E;fOL^Q`O,5;gOLcQpO,5;bO0aQ`O'#EyOLkQtO'#E}OOQS'#Ez'#EzOOQS'#Ib'#IbOM`QaO,5:wO*kQaO,5;nOOQS,5;p,5;pO*kQaO,5;pOMgQdO,5<POMwQdO,5<QONXQdO,5<RONiQdO,5<SO!!sQdO,5<SO!!zQdO,5<VO!#[Q`O'#FrO!#gQ`O'#IgO!#oQ`O,5<]OOQO-E;g-E;gO!#tQ`O'#IoO<_Q`O,5=iO!#|Q`O,5=iO9oQ`O,5=jO!$RQ`O,5=nO!$WQ`O,5=kO!$]Q`O,5=kO!$bQ`O'#FnO!$xQ`O,5<WO!%TQ`O,5<WO!%WQ`O,5?ZO!%]Q`O,5<WO!%eQ`O,5<bO!%mQdO'#GPO!%{QdO'#InO!&WQdO,5=wO!&`Q`O,5<bO!%WQ`O,5<bO!&hQdO,5<cO!&xQ`O,5<cO!'lQdO,5<qO!)nQdO,5<tO!*OOrO'#HsOOOQ'#It'#ItO*kQaO'#GbOOOQ'#Hs'#HsO!*pOrO,5<wOOQS,5<w,5<wO!*wQaO,5=OO!+OQ`O,5=QO!+WQeO,5=VO!+bQ`O,5=XO!+gQaO'#GoO!+WQeO,5=YO9yQaO'#GrO!+WQeO,5=]O!&WQdO,5=`O(tQdO,5=aOOQ#u,5=a,5=aO(tQdO,5=bOOQ#u,5=b,5=bO(tQdO,5=cOOQ#u,5=c,5=cO!+nQ`O,5=dO!+vQ`O,5=fO!+{QdO'#IvOOQS'#Iv'#IvO!&WQdO,5=gO>UQaO,5=hO!-eQ`O'#F}O!-jQdO'#IlO!&WQdO,5=iOOQ#u,5=j,5=jO!-uQ`O,5=lO!-xQ`O,5=mO!-}Q`O,5=nO!.YQdO,5=qOOQ#u,5=q,5=qO!.eQ`O,5=rO!.eQ`O,5=rO!.mQdO'#IwO!.{Q`O'#HXO!&WQdO,5=rO!/ZQ`O,5=rO!/fQdO'#IYO!&WQdO,5=vOOQ#u-E;_-E;_O!1RQ`O,5=kOOO#u,5:^,5:^O!1^O#|O,5:^OOO#u-E;^-E;^OOOO,5>p,5>pOOQ#y1G0S1G0SO!1fQ`O1G0XO*kQaO1G0XO!2xQ`O1G0pOOQS1G0p1G0pO!4[Q`O1G0pOOQS'#I_'#I_O*kQaO'#I_OOQS1G0q1G0qO!4cQ`O'#IaO!7lQ`O'#E}O!7yQaO'#EuOOQO'#Ia'#IaO!8TQ`O'#I`O!8]Q`O,5;_OOQS'#FQ'#FQOOQS1G1U1G1UO!8bQdO1G1]O!:dQdO1G1]O!<PQdO1G1]O!=lQdO1G1]O!?XQdO1G1]O!@tQdO1G1]O!BaQdO1G1]O!C|QdO1G1]O!EiQdO1G1]O!GUQdO1G1]O!HqQdO1G1]O!J^QdO1G1]O!KyQdO1G1]O!MfQdO1G1]O# RQdO1G1]O#!nQdO1G1]OOQT1G0^1G0^O!%WQ`O,5<WO#$ZQaO'#EXOOQS1G0Z1G0ZO#$bQ`O,5:yOFuQaO,5:yO#$gQaO,5:}O#$nQdO,5:{O#&jQdO,5>wO#(fQaO'#HdO#(vQ`O,5>vOOQS1G0d1G0dO#)OQ`O1G0dO#)TQ`O'#I^O#*mQ`O'#I^O#*uQ`O,5;ROIbQaO,5;ROOQS1G0u1G0uPOQO'#E}'#E}O#+fQdO1G1RO0aQ`O'#HgO#-hQtO,5;cO#.YQaO1G0|OOQS,5;e,5;eO#0iQtO,5;gO#0vQdO1G0cO*kQaO1G0cO#2cQdO1G1YO#4OQdO1G1[OOQO,5<^,5<^O#4`Q`O'#HjO#4nQ`O,5?ROOQO1G1w1G1wO#4vQ`O,5?ZO!&WQdO1G3TO<_Q`O1G3TOOQ#u1G3U1G3UO#4{Q`O1G3YO!1RQ`O1G3VO#5WQ`O1G3VO#5]QpO'#FoO#5kQ`O'#FoO#5{Q`O'#FoO#6WQ`O'#FoO#6`Q`O'#FsO#6eQ`O'#FtOOQO'#If'#IfO#6lQ`O'#IeO#6tQ`O,5<YOOQS1G1r1G1rO0aQ`O1G1rO#6yQ`O1G1rO#7OQ`O1G1rO!%WQ`O1G4uO#7ZQdO1G4uO!%WQ`O1G1rO#7iQ`O1G1|O!%WQ`O1G1|O9yQaO,5<kO#7qQdO'#HqO#8PQdO,5?YOOQ#u1G3c1G3cO*kQaO1G1|O0aQ`O1G1|O#8[QdO1G1}O7RQ`O'#FyO7RQ`O'#FzO#:nQ`O'#F{OOQS1G1}1G1}O!-xQ`O1G1}O!1UQ`O1G1}O!1RQ`O1G1}O#;eO`O,5<xO#;jO`O,5<xO#;uO!bO,5<yO#<TQ`O,5<|OOOQ-E;q-E;qOOQS1G2c1G2cO#<[QaO'#GeO#<uQ$VO1G2jO#AuQ`O1G2jO#BQQ`O'#GgO#B]Q`O'#GjOOQ#u1G2l1G2lO#BhQ`O1G2lOOQ#u'#Gl'#GlOOQ#u'#Iu'#IuOOQ#u1G2q1G2qO#BmQ`O1G2qO,zQ`O1G2sO#BrQaO,5=ZO#ByQ`O,5=ZOOQ#u1G2t1G2tO#COQ`O1G2tO#CTQ`O,5=^OOQ#u1G2w1G2wO#DgQ`O1G2wOOQ#u1G2z1G2zOOQ#u1G2{1G2{OOQ#u1G2|1G2|OOQ#u1G2}1G2}O#DlQ`O'#HxO9oQ`O'#HxO#DqQ$VO1G3OO#IwQ`O1G3QO9yQaO'#HwO#I|QdO,5=[OOQ#u1G3R1G3RO#JXQ`O1G3SO9yQaO,5<iO#J^QdO'#HpO#JlQdO,5?WOOQ#u1G3T1G3TOOQ#u1G3W1G3WO!-xQ`O1G3WOOQ#u1G3X1G3XO#KfQ`O'#HTOOQ#u1G3Y1G3YO#KmQ`O1G3YO0aQ`O1G3YOOQ#u1G3]1G3]O!&WQdO1G3^O#KrQ`O1G3^O#KzQdO'#HzO#L]QdO,5?cO#LhQ`O,5?cO#LmQ`O'#HYO7RQ`O'#HYO#LxQ`O'#IxO#MQQ`O,5=sOOQ#u1G3^1G3^O!.eQ`O1G3^O!.eQ`O1G3^O#MVQeO'#HbO#MgQdO,5>tOOQ#u1G3b1G3bOOQ#u1G3V1G3VO!-xQ`O1G3VO!1UQ`O1G3VOOO#u1G/x1G/xO*kQaO7+%sO#MuQdO7+%sOOQS7+&[7+&[O$ bQ`O,5>yO>UQaO,5;`O$ iQ`O,5;aO$#OQaO'#HfO$#YQ`O,5>zOOQS1G0y1G0yO$#bQ`O'#EYO$#gQ`O'#IXO$#oQ`O,5:sOOQS1G0e1G0eO$#tQ`O1G0eO$#yQ`O1G0iO9yQaO1G0iOOQO,5>O,5>OOOQO-E;b-E;bOOQS7+&O7+&OO>UQaO,5;SO$%`QaO'#HeO$%jQ`O,5>xOOQS1G0m1G0mO$%rQ`O1G0mOOQS,5>R,5>ROOQS-E;e-E;eO$%wQdO7+&hO$'yQtO1G1RO$(WQdO7+%}OOQS1G0i1G0iOOQO,5>U,5>UOOQO-E;h-E;hOOQ#u7+(o7+(oO!&WQdO7+(oOOQ#u7+(t7+(tO#KmQ`O7+(tO0aQ`O7+(tOOQ#u7+(q7+(qO!-xQ`O7+(qO!1UQ`O7+(qO!1RQ`O7+(qO$)sQ`O,5<ZO$*OQ`O,5<ZO$*WQ`O,5<_O$*]QpO,5<ZO>UQaO,5<ZOOQO,5<_,5<_O$*kQpO,5<`O$*sQ`O,5<`O$+OQ`O'#HkO$+iQ`O,5?POOQS1G1t1G1tO$+qQpO7+'^O$+yQ`O'#FuO$,UQ`O7+'^OOQS7+'^7+'^O0aQ`O7+'^O#6yQ`O7+'^O$,^QdO7+*aO0aQ`O7+*aO$,lQ`O7+'^O*kQaO7+'hO0aQ`O7+'hO$,wQ`O7+'hO$-PQdO1G2VOOQS,5>],5>]OOQS-E;o-E;oO$.iQdO7+'hO$.yQpO7+'hO$/RQdO'#IiOOQO,5<e,5<eOOQO,5<f,5<fO$/dQpO'#GOO$/lQ`O'#GOOOQO'#Ik'#IkOOQO'#Ho'#HoO$0]Q`O'#GOO<_Q`O'#F|O!&WQdO'#GOO!.YQdO'#GQO7RQ`O'#GROOQO'#Ij'#IjOOQO'#Hn'#HnO$0yQ`O,5<gOOQ#y,5<g,5<gOOQS7+'i7+'iO!-xQ`O7+'iO!1UQ`O7+'iOOOQ1G2d1G2dO$1pO`O1G2dO$1uO!bO1G2eO$2TO`O'#G`O$2YO`O1G2eOOOQ1G2h1G2hO$2_QaO,5=PO,zQ`O'#HtO$2xQ$VO7+(UOhQaO7+(UO,zQ`O'#HuO$7xQ`O7+(UO!&WQdO7+(UO$8TQ`O7+(UO$8YQaO'#GhO$:iQ`O'#GiOOQO'#Hv'#HvO$:qQ`O,5=ROOQ#u,5=R,5=RO$:|Q`O,5=UO!&WQdO7+(WO!&WQdO7+(]O!&WQdO7+(_O$;XQaO1G2uO$;`Q`O1G2uO$;eQaO1G2uO!&WQdO7+(`O9yQaO1G2xO!&WQdO7+(cO0aQ`O'#GyO9oQ`O,5>dOOQ#u,5>d,5>dOOQ#u-E;v-E;vO$;lQaO7+(lO$<TQdO,5>cOOQS-E;u-E;uO!&WQdO7+(nO$=mQdO1G2TOOQS,5>[,5>[OOQS-E;n-E;nOOQ#u7+(r7+(rO$?nQ`O'#GQO$?uQ`O'#GQO$@ZQ`O'#HUOOQO'#Hy'#HyO$@`Q`O,5=oOOQ#u,5=o,5=oO$@gQpO7+(tOOQ#u7+(x7+(xO!&WQdO7+(xO$@rQdO,5>fOOQS-E;x-E;xO$AQQdO1G4}O$A]Q`O,5=tO$AbQ`O,5=tO$AmQ`O'#H{O$BRQ`O,5?dOOQS1G3_1G3_O#KrQ`O7+(xO$BZQdO,5=|OOQS-E;`-E;`O$CvQdO<<I_OOQS1G4e1G4eO$EcQ`O1G0zOOQO,5>Q,5>QOOQO-E;d-E;dO$8YQaO,5:tO$FxQaO'#HcO$GVQ`O,5>sOOQS1G0_1G0_OOQS7+&P7+&PO$G_Q`O7+&TO$HtQ`O1G0nO$JZQ`O,5>POOQO,5>P,5>POOQO-E;c-E;cOOQS7+&X7+&XOOQS7+&T7+&TOOQ#u<<LZ<<LZOOQ#u<<L`<<L`O$@gQpO<<L`OOQ#u<<L]<<L]O!-xQ`O<<L]O!1UQ`O<<L]O>UQaO1G1uO$KsQ`O1G1uO$LOQ`O1G1yOOQO1G1y1G1yO$LTQ`O1G1uO$L]Q`O1G1uO$MrQ`O1G1zO>UQaO1G1zOOQO,5>V,5>VOOQO-E;i-E;iOOQS<<Jx<<JxO$M}Q`O'#IhO$NVQ`O'#IhO$N[Q`O,5<aO0aQ`O<<JxO$+qQpO<<JxO$NaQ`O<<JxO0aQ`O<<M{O$NiQtO<<M{O#6yQ`O<<JxO$NwQdO<<KSO% XQpO<<KSO*kQaO<<KSO0aQ`O<<KSO% aQdO'#HmO% xQdO,5?TO!&WQdO,5<jO$/dQpO,5<jO%!ZQ`O,5<jO<_Q`O,5<hO!.YQdO,5<lOOQO-E;m-E;mO!&WQdO,5<hOOQO,5<j,5<jOOQO,5<l,5<lO%!tQdO,5<mOOQO-E;l-E;lOOQ#y1G2R1G2ROOQS<<KT<<KTO!-xQ`O<<KTOOOQ7+(O7+(OO%#PO`O7+(POOOO,5<z,5<zOOOQ7+(P7+(POhQaO,5>`OOQ#u-E;r-E;rOhQaO<<KpOOQ#u<<Kp<<KpO$8TQ`O,5>aOOQO-E;s-E;sO!&WQdO<<KpO$8TQ`O<<KpO%#UQ`O<<KpO%#ZQ`O,5=SO%$pQaO,5=TOOQO-E;t-E;tOOQ#u1G2m1G2mOOQ#u<<Kr<<KrOOQ#u<<Kw<<KwOOQ#u<<Ky<<KyOOQT7+(a7+(aO%%QQ`O7+(aO%%VQaO7+(aO%%^Q`O7+(aOOQ#u<<Kz<<KzO%%cQ`O7+(dO%&xQ`O7+(dOOQ#u<<K}<<K}O%&}QpO,5=eOOQ#u1G4O1G4OO%'YQ`O<<LWOOQ#u<<LY<<LYO$?uQ`O,5<lO%'_Q`O,5=pO%'dQdO,5=pOOQO-E;w-E;wOOQ#u1G3Z1G3ZO#KmQ`O<<L`OOQ#u<<Ld<<LdO%'oQ`O1G4QO%'tQdO7+*iOOQO1G3`1G3`O%(PQ`O1G3`O%(UQ`O'#HZO7RQ`O'#HZOOQO,5>g,5>gOOQO-E;y-E;yO!&WQdO<<LdO%(aQ`O1G0`OOQO,5=},5=}OOQO-E;a-E;aO>UQaO,5;TOOQ#uANAzANAzO#KmQ`OANAzOOQ#uANAwANAwO!-xQ`OANAwO%)vQ`O7+'aO>UQaO7+'aOOQO7+'e7+'eO%+]Q`O7+'aO%+hQ`O7+'eO>UQaO7+'fO%+mQ`O7+'fO%-SQ`O'#HlO%-bQ`O,5?SO%-bQ`O,5?SOOQO1G1{1G1{O$+qQpOAN@dOOQSAN@dAN@dO0aQ`OAN@dO%-jQtOANCgO%-xQ`OAN@dO*kQaOAN@nO%.QQdOAN@nO%.bQpOAN@nOOQS,5>X,5>XOOQS-E;k-E;kOOQO1G2U1G2UO!&WQdO1G2UO$/dQpO1G2UO<_Q`O1G2SO!.YQdO1G2WO!&WQdO1G2SOOQO1G2W1G2WOOQO1G2S1G2SO%.jQaO'#GSOOQO1G2X1G2XOOQSAN@oAN@oOOOQ<<Kk<<KkOOQ#u1G3z1G3zOOQ#uANA[ANA[OOQO1G3{1G3{O%0iQ`OANA[O!&WQdOANA[O%0nQaO1G2nO%1OQaO1G2oOOQT<<K{<<K{O%1`Q`O<<K{O%1eQaO<<K{O*kQaO,5=_OOQT<<LO<<LOOOQO1G3P1G3PO%1lQ`O1G3PO!+WQeOANArO%1qQdO1G3[OOQO1G3[1G3[O%1|Q`O1G3[OOQS7+)l7+)lOOQO7+(z7+(zO%2UQ`O,5=uO%2ZQ`O,5=uOOQ#uANBOANBOO%2fQ`O1G0oOOQ#uG27fG27fOOQ#uG27cG27cO%3{Q`O<<J{O>UQaO<<J{OOQO<<KP<<KPO%5bQ`O<<KQOOQO,5>W,5>WO%6wQ`O,5>WOOQO-E;j-E;jO%6|Q`O1G4nOOQSG26OG26OO$+qQpOG26OO0aQ`OG26OO%7UQdOG26YO*kQaOG26YOOQO7+'p7+'pO!&WQdO7+'pO!&WQdO7+'nOOQO7+'r7+'rOOQO7+'n7+'nO%7fQ`OLD+tO%8uQ`O'#E}O%9PQ`O'#IZO!&WQdO'#HrO%:|QaO,5<nOOQO,5<n,5<nO!&WQdOG26vOOQ#uG26vG26vO%<{QaO7+(YOOQTANAgANAgO%=]Q`OANAgO%=bQ`O1G2yOOQO7+(k7+(kOOQ#uG27^G27^O%=iQ`OG27^OOQO7+(v7+(vO%=nQ`O7+(vO!&WQdO7+(vOOQO1G3a1G3aO%=vQ`O1G3aO%={Q`OAN@gOOQO1G3r1G3rOOQSLD+jLD+jO$+qQpOLD+jO%?bQdOLD+tOOQO<<K[<<K[OOQO<<KY<<KYO%?rQ`O,5<oO%?wQ`O,5<pOOQP,5>^,5>^OOQP-E;p-E;pOOQO1G2Y1G2YOOQ#uLD,bLD,bOOQTG27RG27RO!&WQdOLD,xO!&WQdO<<LbOOQO<<Lb<<LbOOQO7+({7+({OOQS!$( U!$( UOOQS1G2Z1G2ZOOQS1G2[1G2[O%@PQdO1G2[OOQ#u!$(!d!$(!dOOQOANA|ANA|OOQS7+'v7+'vO%@[Q`O'#E{O%@[Q`O'#E{O%@aQ`O,5;gO%@fQdO,5<cO%BbQaO,5:}O*kQaO1G0iO%BiQaO'#FwO#.YQaO'#GVO#.YQaO'#GYO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO%BpQdO'#I]O%D`QdO'#I]O#.YQaO'#EaO#.YQaO'#I]O%FbQaO,5:wO#.YQaO,5;nO#.YQaO,5;pO%FiQdO,5<PO%HeQdO,5<QO%JaQdO,5<RO%L]QdO,5<SO%NXQdO,5<SO%NoQdO,5<VO&!kQdO,5<tO#.YQaO1G0XO&$gQdO1G1]O&&cQdO1G1]O&(_QdO1G1]O&*ZQdO1G1]O&,VQdO1G1]O&.RQdO1G1]O&/}QdO1G1]O&1yQdO1G1]O&3uQdO1G1]O&5qQdO1G1]O&7mQdO1G1]O&9iQdO1G1]O&;eQdO1G1]O&=aQdO1G1]O&?]QdO1G1]O&AXQdO,5:{O&CTQdO,5>wO&EPQdO1G0cO#.YQaO1G0cO&F{QdO1G1YO&HwQdO1G1[O#.YQaO1G1|O#.YQaO7+%sO&JsQdO7+%sO&LoQdO7+%}O#.YQaO7+'hO&NkQdO7+'hO'!gQdO<<I_O'$cQdO<<KSO#.YQaO<<KSO#.YQaOAN@nO'&_QdOAN@nO'(ZQdOG26YO#.YQaOG26YO'*VQdOLD+tO',RQaO,5:}O'.QQaO1G0iO'/|QdO'#IWO'0aQeO'#FUO'4aQeO'#FUO#.YQaO'#FeO'.QQaO'#FeO#.YQaO'#FfO'.QQaO'#FfO#.YQaO'#FgO'.QQaO'#FgO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FkO'.QQaO'#FkO'8gQaO,5:mO'8nQ`O,5<bO'8vQ`O1G0XO'.QQaO1G0|O':YQ`O1G1|O':bQ`O7+'hO':jQpO7+'hO':rQpO<<KSO':zQpOAN@nO';SQaO'#FwO'.QQaO'#GVO'.QQaO'#GYO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO'#EaO'.QQaO'#I]O'=RQaO,5:wO'.QQaO,5;nO'.QQaO,5;pO'?QQdO,5<PO'ASQdO,5<QO'CUQdO,5<RO'EWQdO,5<SO'GYQdO,5<SO'GvQdO,5<VO'IxQdO,5<tO'.QQaO1G0XO'KzQdO1G1]O'M|QdO1G1]O(!OQdO1G1]O($QQdO1G1]O(&SQdO1G1]O((UQdO1G1]O(*WQdO1G1]O(,YQdO1G1]O(.[QdO1G1]O(0^QdO1G1]O(2`QdO1G1]O(4bQdO1G1]O(6dQdO1G1]O(8fQdO1G1]O(:hQdO1G1]O(<jQdO,5:{O(>lQdO,5>wO(@nQdO1G0cO'.QQaO1G0cO(BpQdO1G1YO(DrQdO1G1[O'.QQaO1G1|O'.QQaO7+%sO(FtQdO7+%sO(HvQdO7+%}O'.QQaO7+'hO(JxQdO7+'hO(LzQdO<<I_O(N|QdO<<KSO'.QQaO<<KSO'.QQaOAN@nO)#OQdOAN@nO)%QQdOG26YO'.QQaOG26YO)'SQdOLD+tO))UQaO,5:}O#.YQaO1G0iO))]Q`O'#FvO))eQpO,5;bO))mQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO))uQdO,5<cO)+wQdO'#I]O)-vQdO'#IWO).aQaO,5:mO).hQ`O,5<bO).pQ`O1G0XO)0SQ`O1G1|O)0[Q`O7+'hO)0dQpO7+'hO)0lQpO<<KSO)0tQpOAN@nO0aQ`O'#EvO9yQaO'#FeO9yQaO'#FfO9yQaO'#FgO9yQaO'#FhO9yQaO'#FhO9yQaO'#FkO)0|QaO'#FwO9yQaO'#GVO9yQaO'#GYO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO)1TQ`O'#FlO*kQaO'#EaO*kQaO'#I]O)1]QaO,5:wO9yQaO,5;nO9yQaO,5;pO)1dQdO,5<PO)3`QdO,5<QO)5[QdO,5<RO)7WQdO,5<SO)9SQdO,5<SO)9jQdO,5<VO);fQdO,5<cO)=bQdO,5<tO)?^Q`O'#IvO)@sQ`O'#IYO9yQaO1G0XO)BYQdO1G1]O)DUQdO1G1]O)FQQdO1G1]O)G|QdO1G1]O)IxQdO1G1]O)KtQdO1G1]O)MpQdO1G1]O* lQdO1G1]O*#hQdO1G1]O*%dQdO1G1]O*'`QdO1G1]O*)[QdO1G1]O*+WQdO1G1]O*-SQdO1G1]O*/OQdO1G1]O*0zQaO,5:}O*1RQdO,5:{O*1cQdO,5>wO*1sQaO'#HdO*2TQ`O,5>vO*2]QdO1G0cO9yQaO1G0cO*4XQdO1G1YO*6TQdO1G1[O9yQaO1G1|O>UQaO'#HwO*8PQ`O,5=[O*8XQaO'#HbO*8cQ`O,5>tO9yQaO7+%sO*8kQdO7+%sO*:gQ`O1G0iO>UQaO1G0iO*;|QdO7+%}O9yQaO7+'hO*=xQdO7+'hO*?tQ`O,5>cO*AZQ`O,5=|O*BpQdO<<I_O*DlQ`O7+&TO*FRQdO<<KSO9yQaO<<KSO9yQaOAN@nO*G}QdOAN@nO*IyQdOG26YO9yQaOG26YO*KuQdOLD+tO*MqQaO,5:}O9yQaO1G0iO*MxQdO'#I]O*NcQ`O'#FvO*NkQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO*NsQdO'#IWO+ ^QeO'#FUO+ zQaO'#FUO+#sQaO'#FUO+%`QaO'#FUO>UQaO'#FeO>UQaO'#FfO>UQaO'#FgO>UQaO'#FhO>UQaO'#FhO>UQaO'#FkO+'XQaO'#FwO>UQaO'#GVO>UQaO'#GYO+'`QaO,5:mO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO+'gQ`O'#I]O$8YQaO'#EaO+)PQaOG26YO$8YQaO'#I]O+*{Q`O'#I[O++TQaO,5:wO>UQaO,5;nO>UQaO,5;pO++[Q`O,5<PO+,wQ`O,5<QO+.dQ`O,5<RO+0PQ`O,5<SO+1lQ`O,5<SO+3XQ`O,5<VO+4tQ`O,5<bO+4|Q`O,5<cO+6iQ`O,5<tO+8UQ`O1G0XO>UQaO1G0XO+9hQ`O1G1]O+;TQ`O1G1]O+<pQ`O1G1]O+>]Q`O1G1]O+?xQ`O1G1]O+AeQ`O1G1]O+CQQ`O1G1]O+DmQ`O1G1]O+FYQ`O1G1]O+GuQ`O1G1]O+IbQ`O1G1]O+J}Q`O1G1]O+LjQ`O1G1]O+NVQ`O1G1]O, rQ`O1G1]O,#_Q`O1G0cO>UQaO1G0cO,$zQ`O1G1YO,&gQ`O1G1[O,(SQ`O1G1|O>UQaO1G1|O>UQaO7+%sO,([Q`O7+%sO,)wQ`O7+%}O>UQaO7+'hO,+dQ`O7+'hO,+lQ`O7+'hO,-XQpO7+'hO,-aQ`O<<I_O,.|Q`O<<KSO,0iQpO<<KSO>UQaO<<KSO>UQaOAN@nO,0qQ`OAN@nO,2^QpOAN@nO,2fQ`OG26YO>UQaOG26YO,4RQ`OLD+tO,5nQaO,5:}O>UQaO1G0iO,5uQ`O'#I]O$8YQaO'#FeO$8YQaO'#FfO$8YQaO'#FgO$8YQaO'#FhO$8YQaO'#FhO+)PQaO'#FhO$8YQaO'#FkO,6SQaO'#FwO,6ZQaO'#FwO$8YQaO'#GVO+)PQaO'#GVO$8YQaO'#GYO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO,8YQ`O'#FlO>UQaO'#EaO>UQaO'#I]O,8bQaO,5:wO,8iQaO,5:wO$8YQaO,5;nO+)PQaO,5;nO$8YQaO,5;pO,:hQ`O,5<PO,<TQ`O,5<QO,=pQ`O,5<RO,?]Q`O,5<SO,@xQ`O,5<SO,BeQ`O,5<SO,CtQ`O,5<VO,EaQ`O,5<cO%7fQ`O,5<cO,F|Q`O,5<tO$8YQaO1G0XO+)PQaO1G0XO,HiQ`O1G1]O,JUQ`O1G1]O,KeQ`O1G1]O,MQQ`O1G1]O,NaQ`O1G1]O- |Q`O1G1]O-#]Q`O1G1]O-$xQ`O1G1]O-&XQ`O1G1]O-'tQ`O1G1]O-)TQ`O1G1]O-*pQ`O1G1]O-,PQ`O1G1]O--lQ`O1G1]O-.{Q`O1G1]O-0hQ`O1G1]O-1wQ`O1G1]O-3dQ`O1G1]O-4sQ`O1G1]O-6`Q`O1G1]O-7oQ`O1G1]O-9[Q`O1G1]O-:kQ`O1G1]O-<WQ`O1G1]O-=gQ`O1G1]O-?SQ`O1G1]O-@cQ`O1G1]O-BOQ`O1G1]O-C_Q`O1G1]O-DzQ`O1G1]O-FZQ`O,5:{O-GvQ`O,5>wO-IcQ`O1G0cO-KOQ`O1G0cO$8YQaO1G0cO+)PQaO1G0cO-L_Q`O1G1YO-MzQ`O1G1YO. ZQ`O1G1[O$8YQaO1G1|O$8YQaO7+%sO+)PQaO7+%sO.!vQ`O7+%sO.$cQ`O7+%sO.%rQ`O7+%}O.'_Q`O7+%}O$8YQaO7+'hO.(nQ`O7+'hO.*ZQ`O<<I_O.+vQ`O<<I_O.-VQ`O<<KSO$8YQaO<<KSO$8YQaOAN@nO..rQ`OAN@nO.0_Q`OG26YO$8YQaOG26YO.1zQ`OLD+tO.3gQaO,5:}O.3nQaO,5:}O$8YQaO1G0iO+)PQaO1G0iO.5mQ`O'#I]O.7PQ`O'#I]O.:fQ`O'#IWO.:vQ`O'#FvO.;OQaO,5:mO.;VQ`O,5<bO.;_Q`O,5<bO!%WQ`O,5<bO.;gQ`O1G0XO.<yQ`O,5:{O.>fQ`O,5>wO.@RQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO.@ZQ`O7+'hO.@cQpO7+'hO.@kQpO<<KSO0aQ`O<<KSO.@sQpOAN@nO.@{Q`O'#IWO.A]Q`O'#IWO.CSQaO,5:mO.CZQaO,5:mO.CbQ`O,5<bO.CjQ`O7+'hO.CrQ`O1G0XO.EUQ`O1G0XO.FhQ`O1G1|O.FpQ`O7+'hO.FxQpO7+'hO.GQQpOAN@nO.GYQpO<<KSO.GbQpOAN@nO.GjQ`O'#FvO.GrQ`O'#FlO.GzQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO.HSQ`O'#FvO.H[Q`O,5<bO.HdQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O<<KSO0aQ`O7+'hO0aQ`O<<KSO.HlQ`O'#FlO.HtQ`O'#FlO.H|Q`O'#Fl",
      stateData: ".Ic~O!dOS!eOS&vOS!gQQ~O!iTO&wRO~OPgOQ|OS!lOU^OW}OX!XO[mO]!_O^!WO`![Oa!SOb!]Ok!dOm!lOowOp!TOq!UOsuOt!gOu!VOv!POxkOykO|!bO}`O!O]O!P!eO!QxO!R}O!TpO!UlO!VlO!W!YO!X!QO!YzO!Z!cO![!ZO!]!^O!^!fO!`!`O!a!RO!cjO!mWO!oXO!sYO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$drO$l!kO$zyO${!OO$}}O%O}O%V|O'g{O~O!g!mO~O&wRO!i!hX&p!hX&t!hX~O!i!pO~O!d!qO!e!qO!g!mO&t!tO&v!qO~PhO!n!vO~PhOT'VXz'VX!S'VX!b'VX!m'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX&s'VX~O!q!xO~P&sOT#TOz#RO!S#UO!b#VO!m#cO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO&s#cO~OPgOQ|OU^OW}O[mOowOs#hOxkOykO}`O!O]O!QxO!R}O!TpO!UlO!VlO!YzO!cjO!s#gO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$zyO${!OO$}}O%O}O%V|O'g{O~O!y[O~O!y#kO~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#S#oO#U#nO#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O#X'OP~O!}#sO~P-UO!y#tO~O#b#vO#daO#ebO~O#p#xO~O!s#yO~OU$PO!R$PO!s$OO!v#}O#p2XO~OT&zXz&zX!S&zX!b&zX!m&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX&s&zX!x&zX!n&zX~O#u$RO#w$SO~P0rOP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{OT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX~Or$UO#S6yO#U6xO~P2yO!s#gO#peO~OS$gO]$bOk$eOm$gOs$aO!`$cO$drO$l$fO~O!s$kO!y$hO#S$jO~Oo$mOs$lO#b$nO~O!y$hO#S$rO~O$l$tO~P*kOR$zO!o$yO#b$xO#e$yO&q$zO~O'f$|O~P8lO!y%RO~O!y%TO~O!s%VO~O!m#cO&s#cO~P*kO!oXO~O!y%_O~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O~O!y%cO~O!s%dO~O]$bO~O!s%hO~O!s%iO~O!s%jO~O!oXO!s#gO#peO~O]%rOs%rO!o%pO!s#gO#p%nO~O!s%vO~O!i%wO&t%wO&wRO~O&t%zO~PhO!n%{O~PhOPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!q%}O~P>UO#X&PO~P>UO!o&SO!s&RO#b&RO~OPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s&VO!y[O#U&WO#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!x'SP~PAOO!s&[O#b&[O~OT#TOz#RO!S#UO!b#VO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO~O!x&nO~PCqO!x'VX!}'VX#O'VX#X'VX!n'VXV'VX!q'VX#u'VX#w'VXw'VX~P&sO!y$hO#S&oO~Oo$mOs$lO~O!o&pO~O!}&sO#S;dO#U;cO!x'OP~P9yOT6iOz6gO!S6jO!b6kO!o!{O!v8sO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'PX#X'PX~O#O&tO~PGSO!}&wO#X'OX~O#X&yO~O!}'OO!x'QP~P9yO!n'PO~PCqO!m#oa!o#oa#S#oa#p#qX&s#oa!x#oa#O#oaw#oa~OT#oaz#oa!S#oa!b#oa!v#oa!y#oa#W#oa#`#oa#a#oa#s#oa#z#oa#{#oa#|#oa#}#oa$O#oa$Q#oa$R#oa$S#oa$T#oa$U#oa$V#oa$W#oa$z#oa!}#oa#X#oa!n#oaV#oa!q#oa#u#oa#w#oa~PIpO!s'RO~O!x'UO#l'SO~O!x'VX#l'VX#p#qX#S'VX#U'VX#b'VX!o'VX#O'VXw'VX!m'VX&s'VX~O#S'YO~P*kO!m$Xa&s$Xa!x$Xa!n$Xa~PCqO!m$Ya&s$Ya!x$Ya!n$Ya~PCqO!m$Za&s$Za!x$Za!n$Za~PCqO!m$[a&s$[a!x$[a!n$[a~PCqO!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO$z#dOT$[a!S$[a!b$[a!m$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a&s$[a!x$[a!n$[a~Oz#RO~PNyO!m$_a&s$_a!x$_a!n$_a~PCqO!y!}O!}$fX#X$fX~O!}'^O#X'ZX~O#X'`O~O!s$kO#S'aO~O]'cO~O!s'eO~O!s'fO~O$l'gO~O!`'mO#S'kO#U'lO#b'jO$drO!x'XP~P0aO!^'sO!oXO!q'rO~O!s'uO!y$hO~O!y$hO#S'wO~O!y$hO#S'yO~O#u'zO!m$sX!}$sX&s$sX~O!}'{O!m'bX&s'bX~O!m#cO&s#cO~O!q(PO#O(OO~O!m$ka&s$ka!x$ka!n$ka~PCqOl(ROw(SO!o(TO!y!}O~O!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO~OT$yaz$ya!S$ya!b$ya!m$ya!v$ya#S$ya#z$ya#{$ya#|$ya#}$ya$O$ya$Q$ya$R$ya$S$ya$T$ya$U$ya$V$ya$W$ya$z$ya&s$ya!x$ya!}$ya#O$ya#X$ya!n$ya!q$yaV$ya#u$ya#w$ya~P!'WO!m$|a&s$|a!x$|a!n$|a~PCqO#W([O#`(YO#a(YO&r(ZOR&gX!o&gX#b&gX#e&gX&q&gX'f&gX~O'f(_O~P8lO!q(`O~PhO!o(cO!q(dO~O!q(`O&s(gO~PhO!a(kO~O!m(lO~P9yOZ(wOn(xO~O!s(zO~OT6iOz6gO!S6jO!b6kO!v8sO!}({O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'jX&s'jX~P!'WO#u)PO~O!})QO!m'`X&s'`X~Ol(RO!o(TO~Ow(SO!o)WO!q)ZO~O!m#cO!oXO&s#cO~O!o%pO!s#yO~OV)aO!})_O!m'kX&s'kX~O])cOs)cO!s#gO#peO~O!o%pO!s#gO#p)hO~OT6iOz6gO!S6jO!b6kO!v8sO!})iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&|X&s&|X#O&|X~P!'WOl(ROw(SO!o(TO~O!i)oO&t)oO~OT8vOz8tO!S8wO!b8xO!q)pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#X)rO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!n)rO~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'TX!}'TX~P!'WOT'VXz'VX!S'VX!b'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX~O!q)tO!x'VX!}'VX~P!5xO!x#iX!}#iX~P>UO!})vO!x'SX~O!x)xO~O$z#dOT#yiz#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi$W#yi&s#yi!x#yi!}#yi#O#yi#X#yi!n#yi!q#yiV#yi#u#yi#w#yi~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi&s#yi!x#yi!n#yi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!b#VO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi~P!'WOz#RO$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi~P!'WO_)yO~P9yO!x)|O~O#S*PO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Ta#X#Ta#O#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'Pa#X'Pa#O'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WO#S#oO#U#nO!}&WX#X&WX~P9yO!}&wO#X'Oa~O#X*SO~OT6iOz6gO!S6jO!b6kO!v8sO!}*UO#O*TO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'QX~P!'WO!}*UO!x'QX~O!x*WO~O!m#oi!o#oi#S#oi#p#qX&s#oi!x#oi#O#oiw#oi~OT#oiz#oi!S#oi!b#oi!v#oi!y#oi#W#oi#`#oi#a#oi#s#oi#z#oi#{#oi#|#oi#}#oi$O#oi$Q#oi$R#oi$S#oi$T#oi$U#oi$V#oi$W#oi$z#oi!}#oi#X#oi!n#oiV#oi!q#oi#u#oi#w#oi~P#*zO#l'SO!x#ka#S#ka#U#ka#b#ka!o#ka#O#kaw#ka!m#ka&s#ka~OPgOQ|OU^OW}O[4OOo5xOs#hOx3zOy3zO}`O!O]O!Q2^O!R}O!T4UO!U3|O!V3|O!Y2`O!c3xO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4SO$]4QO$^4SO$aqO$z2_O${!OO$}}O%O}O%V|O'g{O~O#l#oa#U#oa#b#oa~PIpOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pi!S#Pi!b#Pi!m#Pi&s#Pi!x#Pi!n#Pi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#vi!S#vi!b#vi!m#vi&s#vi!x#vi!n#vi~P!'WO!m#xi&s#xi!x#xi!n#xi~PCqO!s#gO#peO!}&^X#X&^X~O!}'^O#X'Za~O!s'uO~Ow(SO!o)WO!q*fO~O!s*jO~O#S*lO#U*mO#b*kO#l'SO~O#S*lO#U*mO#b*kO$drO~P0aO#u*oO!x$cX!}$cX~O#U*mO#b*kO~O#b*pO~O#b*rO~P0aO!}*sO!x'XX~O!x*uO~O!y*wO~O!^*{O!oXO!q*zO~O!q*}O!o'ci!m'ci&s'ci~O!q+QO#O+PO~O#b$nO!m&eX!}&eX&s&eX~O!}'{O!m'ba&s'ba~OT$kiz$ki!S$ki!b$ki!m$ki!o$ki!v$ki!y$ki#S$ki#W$ki#`$ki#a$ki#s$ki#u#fa#w#fa#z$ki#{$ki#|$ki#}$ki$O$ki$Q$ki$R$ki$S$ki$T$ki$U$ki$V$ki$W$ki$z$ki&s$ki!x$ki!}$ki#O$ki#X$ki!n$ki!q$kiV$ki~OS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n+hO#b$nO$aqO$drO~P0aO!s+lO~O#W+nO#`+mO#a+mO~O!s+pO#b+pO$}+pO%T+oO~O!n+qO~PCqOc%XXd%XXh%XXj%XXf%XXg%XXe%XX~PhOc+uOd+sOP%WiQ%WiS%WiU%WiW%WiX%Wi[%Wi]%Wi^%Wi`%Wia%Wib%Wik%Wim%Wio%Wip%Wiq%Wis%Wit%Wiu%Wiv%Wix%Wiy%Wi|%Wi}%Wi!O%Wi!P%Wi!Q%Wi!R%Wi!T%Wi!U%Wi!V%Wi!W%Wi!X%Wi!Y%Wi!Z%Wi![%Wi!]%Wi!^%Wi!`%Wi!a%Wi!c%Wi!m%Wi!o%Wi!s%Wi!y%Wi#W%Wi#b%Wi#d%Wi#e%Wi#p%Wi$T%Wi$]%Wi$^%Wi$a%Wi$d%Wi$l%Wi$z%Wi${%Wi$}%Wi%O%Wi%V%Wi&p%Wi'g%Wi&t%Wi!n%Wih%Wij%Wif%Wig%WiY%Wi_%Wii%Wie%Wi~Oc+yOd+vOh+xO~OY+zO_+{O!n,OO~OY+zO_+{Oi%^X~Oi,QO~Oj,RO~O!m,TO~P9yO!m,VO~Of,WO~OT6iOV,XOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOg,YO~O!y,ZO~OZ(wOn(xOP%liQ%liS%liU%liW%liX%li[%li]%li^%li`%lia%lib%lik%lim%lio%lip%liq%lis%lit%liu%liv%lix%liy%li|%li}%li!O%li!P%li!Q%li!R%li!T%li!U%li!V%li!W%li!X%li!Y%li!Z%li![%li!]%li!^%li!`%li!a%li!c%li!m%li!o%li!s%li!y%li#W%li#b%li#d%li#e%li#p%li$T%li$]%li$^%li$a%li$d%li$l%li$z%li${%li$}%li%O%li%V%li&p%li'g%li&t%li!n%lic%lid%lih%lij%lif%lig%liY%li_%lii%lie%li~O#u,_O~O!}({O!m%da&s%da~O!x,bO~O!s%dO!m&dX!}&dX&s&dX~O!})QO!m'`a&s'`a~OS+^OY,iOm+^Os$aO!^+dO!_+^O!`+^O$aqO$drO~O!n,lO~P#JwO!o)WO~O!o%pO!s'RO~O!s#gO#peO!m&nX!}&nX&s&nX~O!})_O!m'ka&s'ka~O!s,rO~OV,sO!n%|X!}%|X~O!},uO!n'lX~O!n,wO~O!m&UX!}&UX&s&UX#O&UX~P9yO!})iO!m&|a&s&|a#O&|a~Oz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq&s!uq!x!uq!n!uq~P!'WO!n,|O~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#ia!}#ia~P!'WO!x&YX!}&YX~PAOO!})vO!x'Sa~O#O-QO~O!}-RO!n&{X~O!n-TO~O!x-UO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vi#X#Vi~P!'WO!x&XX!}&XX~P9yO!}*UO!x'Qa~O!x-[O~OT#jqz#jq!S#jq!b#jq!m#jq!v#jq#S#jq#u#jq#w#jq#z#jq#{#jq#|#jq#}#jq$O#jq$Q#jq$R#jq$S#jq$T#jq$U#jq$V#jq$W#jq$z#jq&s#jq!x#jq!}#jq#O#jq#X#jq!n#jq!q#jqV#jq~P!'WO#l#oi#U#oi#b#oi~P#*zOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pq!S#Pq!b#Pq!m#Pq&s#Pq!x#Pq!n#Pq~P!'WO#u-dO!x$ca!}$ca~O#U-fO#b-eO~O#b-gO~O#S-hO#U-fO#b-eO#l'SO~O#b-jO#l'SO~O#u-kO!x$ha!}$ha~O!`'mO#S'kO#U'lO#b'jO$drO!x&_X!}&_X~P0aO!}*sO!x'Xa~O!oXO#l'SO~O#S-pO#b-oO!x'[P~O!oXO!q-rO~O!q-uO!o'cq!m'cq&s'cq~O!^-wO!oXO!q-rO~O!q-{O#O-zO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$si!}$si&s$si~P!'WO!m$jq&s$jq!x$jq!n$jq~PCqO#O-zO#l'SO~O!}-|Ow']X!o']X!m']X&s']X~O#b$nO#l'SO~OS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO$drO~P0aOS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO~P0aOS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n.ZO#b$nO$aqO$drO~P0aO!s.^O~O!s._O#b._O$}._O%T+oO~O$}.`O~O#X.aO~Oc%Xad%Xah%Xaj%Xaf%Xag%Xae%Xa~PhOc.dOd+sOP%WqQ%WqS%WqU%WqW%WqX%Wq[%Wq]%Wq^%Wq`%Wqa%Wqb%Wqk%Wqm%Wqo%Wqp%Wqq%Wqs%Wqt%Wqu%Wqv%Wqx%Wqy%Wq|%Wq}%Wq!O%Wq!P%Wq!Q%Wq!R%Wq!T%Wq!U%Wq!V%Wq!W%Wq!X%Wq!Y%Wq!Z%Wq![%Wq!]%Wq!^%Wq!`%Wq!a%Wq!c%Wq!m%Wq!o%Wq!s%Wq!y%Wq#W%Wq#b%Wq#d%Wq#e%Wq#p%Wq$T%Wq$]%Wq$^%Wq$a%Wq$d%Wq$l%Wq$z%Wq${%Wq$}%Wq%O%Wq%V%Wq&p%Wq'g%Wq&t%Wq!n%Wqh%Wqj%Wqf%Wqg%WqY%Wq_%Wqi%Wqe%Wq~Oc.iOd+vOh.hO~O!q(`O~OP6]OQ|OU^OW}O[:fOo>ROs#hOx:dOy:dO}`O!O]O!Q:kO!R}O!T:jO!U:eO!V:eO!Y:oO!c8gO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:hO$]:gO$^:hO$aqO$z:mO${!OO$}}O%O}O%V|O'g{O~O!m.lO!q.lO~OY+zO_+{O!n.nO~OY+zO_+{Oi%^a~O!x.rO~P>UO!m.tO~O!m.tO~P9yOQ|OW}O!R}O$}}O%O}O%V|O'g{O~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&ka!}&ka&s&ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$qi!}$qi&s$qi~P!'WOS+^Om+^Os$aO!_+^O!`+^O$aqO$drO~OY/PO~P$?VOS+^Om+^Os$aO!_+^O!`+^O$aqO~O!s/QO~O!n/SO~P#JwOw(SO!o)WO#l'SO~OV/VO!m&na!}&na&s&na~O!})_O!m'ki&s'ki~O!s/XO~OV/YO!n%|a!}%|a~O]/[Os/[O!s#gO#peO!n&oX!}&oX~O!},uO!n'la~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&Ua!}&Ua&s&Ua#O&Ua~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy&s!uy!x!uy!n!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#hi!}#hi~P!'WO_)yO!n&VX!}&VX~P9yO!}-RO!n&{a~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vq#X#Vq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#[i!}#[i~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O/cO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x&Xa!}&Xa~P!'WO#u/iO!x$ci!}$ci~O#b/jO~O#U/lO#b/kO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$ci!}$ci~P!'WO#u/mO!x$hi!}$hi~O!}/oO!x'[X~O#b/qO~O!x/rO~O!oXO!q/uO~O#l'SO!o'cy!m'cy&s'cy~O!m$jy&s$jy!x$jy!n$jy~PCqO#O/xO#l'SO~O!s#gO#peOw&aX!o&aX!}&aX!m&aX&s&aX~O!}-|Ow']a!o']a!m']a&s']a~OU$PO]0QO!R$PO!s$OO!v#}O#b$nO#p2XO~P$?uO!m#cO!o0VO&s#cO~O#X0YO~Oh0_O~OT:tOz:pO!S:vO!b:xO!m0`O!q0`O!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO~P!'WOY%]a_%]a!n%]ai%]a~PhO!x0bO~O!x0bO~P>UO!m0dO~OT6iOz6gO!S6jO!b6kO!v8sO!x0fO#O0eO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WO!x0fO~O!x0gO#b0hO#l'SO~O!x0iO~O!s0jO~O!m#cO#u0lO&s#cO~O!s0mO~O!})_O!m'kq&s'kq~O!s0nO~OV0oO!n%}X!}%}X~OT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!n!|i!}!|i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cq!}$cq~P!'WO#u0vO!x$cq!}$cq~O#b0wO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hq!}$hq~P!'WO#S0zO#b0yO!x&`X!}&`X~O!}/oO!x'[a~O#l'SO!o'c!R!m'c!R&s'c!R~O!oXO!q1PO~O!m$j!R&s$j!R!x$j!R!n$j!R~PCqO#O1RO#l'SO~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1^O!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOh1_O~OY%[i_%[i!n%[ii%[i~PhOY%]i_%]i!n%]ii%]i~PhO!x1bO~O!x1bO~P>UO!x1eO~O!m#cO#u1iO&s#cO~O$}1jO%V1jO~O!s1kO~OV1lO!n%}a!}%}a~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#]i!}#]i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cy!}$cy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hy!}$hy~P!'WO#b1nO~O!}/oO!x'[i~O!m$j!Z&s$j!Z!x$j!Z!n$j!Z~PCqOT:uOz:qO!S:wO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO~P!'WOV1uO{1tO~P!5xOV1uO{1tOT&}Xz&}X!S&}X!b&}X!o&}X!v&}X!y&}X#S&}X#W&}X#`&}X#a&}X#s&}X#u&}X#w&}X#z&}X#{&}X#|&}X#}&}X$O&}X$Q&}X$R&}X$S&}X$T&}X$U&}X$V&}X$W&}X$z&}X~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1xO!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOY%[q_%[q!n%[qi%[q~PhO!x1zO~O!x%gi~PCqOe1{O~O$}1|O%V1|O~O!s2OO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$c!R!}$c!R~P!'WO!m$j!c&s$j!c!x$j!c!n$j!c~PCqO!s2QO~O!`2SO!s2RO~O!s2VO!m$xi&s$xi~O!s'WO~O!s*]O~OT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$ka#u$ka#w$ka&s$ka!x$ka!n$ka!q$ka#X$ka!}$ka~P!'WO#S2]O~P*kO$l$tO~P#.YOT6iOz6gO!S6jO!b6kO!v8sO#O2[O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX&s'PX!x'PX!n'PX~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O3uO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'PX#X'PX#u'PX#w'PX!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~P!'WO#S3dO~P#.YOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Xa#u$Xa#w$Xa&s$Xa!x$Xa!n$Xa!q$Xa#X$Xa!}$Xa~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Ya#u$Ya#w$Ya&s$Ya!x$Ya!n$Ya!q$Ya#X$Ya!}$Ya~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Za#u$Za#w$Za&s$Za!x$Za!n$Za!q$Za#X$Za!}$Za~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$[a#u$[a#w$[a&s$[a!x$[a!n$[a!q$[a#X$[a!}$[a~P!'WOz2aO#u$[a#w$[a!q$[a#X$[a!}$[a~PNyOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$_a#u$_a#w$_a&s$_a!x$_a!n$_a!q$_a#X$_a!}$_a~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$|a#u$|a#w$|a&s$|a!x$|a!n$|a!q$|a#X$|a!}$|a~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#Ta#u#Ta#w#Ta&s#Ta!x#Ta!n#Ta!q#Ta#X#Ta!}#Ta~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m'Pa#u'Pa#w'Pa&s'Pa!x'Pa!n'Pa!q'Pa#X'Pa!}'Pa~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pi!S#Pi!b#Pi!m#Pi#u#Pi#w#Pi&s#Pi!x#Pi!n#Pi!q#Pi#X#Pi!}#Pi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#vi!S#vi!b#vi!m#vi#u#vi#w#vi&s#vi!x#vi!n#vi!q#vi#X#vi!}#vi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#xi#u#xi#w#xi&s#xi!x#xi!n#xi!q#xi#X#xi!}#xi~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq#u!uq#w!uq&s!uq!x!uq!n!uq!q!uq#X!uq!}!uq~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pq!S#Pq!b#Pq!m#Pq#u#Pq#w#Pq&s#Pq!x#Pq!n#Pq!q#Pq#X#Pq!}#Pq~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jq#u$jq#w$jq&s$jq!x$jq!n$jq!q$jq#X$jq!}$jq~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy#u!uy#w!uy&s!uy!x!uy!n!uy!q!uy#X!uy!}!uy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jy#u$jy#w$jy&s$jy!x$jy!n$jy!q$jy#X$jy!}$jy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!R#u$j!R#w$j!R&s$j!R!x$j!R!n$j!R!q$j!R#X$j!R!}$j!R~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!Z#u$j!Z#w$j!Z&s$j!Z!x$j!Z!n$j!Z!q$j!Z#X$j!Z!}$j!Z~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!c#u$j!c#w$j!c&s$j!c!x$j!c!n$j!c!q$j!c#X$j!c!}$j!c~P!'WOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S3vO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lO#u2uO#w2vO!q&zX#X&zX!}&zX~P0rOP6]OU^O[4POo8^Or2wOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S2tO#U2sO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX!q#xX#X#xX!}#xX~P$;lOP6]OU^O[4POo8^Or4xOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S4uO#U4tO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!o#xX!v#xX!}#xX#O#xX#X#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!m#xX&s#xX!x#xX!n#xXV#xX!q#xX~P$;lO!q3PO~P>UO!q5}O#O3gO~OT8vOz8tO!S8wO!b8xO!q3hO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q6OO#O3kO~O!q6PO#O3oO~O#O3oO#l'SO~O#O3pO#l'SO~O#O3sO#l'SO~OP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$l$tO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S5eO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Xa#O$Xa#X$Xa#u$Xa#w$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Ya#O$Ya#X$Ya#u$Ya#w$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Za#O$Za#X$Za#u$Za#w$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$[a#O$[a#X$[a#u$[a#w$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz4dO!}$[a#O$[a#X$[a#u$[a#w$[aV$[a!q$[a~PNyOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$_a#O$_a#X$_a#u$_a#w$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$|a#O$|a#X$|a#u$|a#w$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#Ta#O#Ta#X#Ta#u#Ta#w#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'Pa#O'Pa#X'Pa#u'Pa#w'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi#u#Pi#w#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi#u#vi#w#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#xi#O#xi#X#xi#u#xi#w#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq#u!uq#w!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq#u#Pq#w#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jq#O$jq#X$jq#u$jq#w$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy#u!uy#w!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jy#O$jy#X$jy#u$jy#w$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!R#O$j!R#X$j!R#u$j!R#w$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!Z#O$j!Z#X$j!Z#u$j!Z#w$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!c#O$j!c#X$j!c#u$j!c#w$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S5wO~P#.YO!y$hO#S5{O~O!x4ZO#l'SO~O!y$hO#S5|O~OT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$ka#O$ka#X$ka#u$ka#w$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O5vO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!m'PX#u'PX#w'PX&s'PX!x'PX!n'PX!q'PX#X'PX!}'PX~P!'WO#u4vO#w4wO!}&zX#O&zX#X&zXV&zX!q&zX~P0rO!q5QO~P>UO!q8bO#O5hO~OT8vOz8tO!S8wO!b8xO!q5iO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q8cO#O5lO~O!q8dO#O5pO~O#O5pO#l'SO~O#O5qO#l'SO~O#O5tO#l'SO~O$l$tO~P9yOo5zOs$lO~O#S7oO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Xa#O$Xa#X$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Ya#O$Ya#X$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Za#O$Za#X$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$[a#O$[a#X$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz6gO!}$[a#O$[a#X$[aV$[a!q$[a~PNyOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$_a#O$_a#X$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$ka#O$ka#X$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$|a#O$|a#X$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7sO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'jX~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7uO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&|X~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WO#S7zO~P>UO!m#Ta&s#Ta!x#Ta!n#Ta~PCqO!m'Pa&s'Pa!x'Pa!n'Pa~PCqO#S;dO#U;cO!x&WX!}&WX~P9yO!}7lO!x'Oa~Oz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#xi#O#xi#X#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WO!}7sO!x%da~O!x&UX!}&UX~P>UO!}7uO!x&|a~Oz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vi!}#Vi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jq#O$jq#X$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&ka!}&ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&Ua!}&Ua~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vq!}#Vq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jy#O$jy#X$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!R#O$j!R#X$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!Z#O$j!Z#X$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!c#O$j!c#X$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S8[O~P9yO#O8ZO!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~PGSO!y$hO#S8`O~O!y$hO#S8aO~O#u6zO#w6{O!}&zX#O&zX#X&zXV&zX!q&zX~P0rOr6|O#S#oO#U#nO!}#xX#O#xX#X#xXV#xX!q#xX~P2yOr;iO#S9XO#U9VOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!n#xX!}#xX~P9yOr9WO#S9WO#U9WOT#xXz#xX!S#xX!b#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX~P9yOr9]O#S;dO#U;cOT#xXz#xX!S#xX!b#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX#X#xX!x#xX!}#xX~P9yO$l$tO~P>UO!q7XO~P>UOT6iOz6gO!S6jO!b6kO!v8sO#O7iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'PX!}'PX~P!'WOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lO!}7lO!x'OX~O#S9yO~P>UOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Xa#X$Xa!x$Xa!}$Xa~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Ya#X$Ya!x$Ya!}$Ya~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Za#X$Za!x$Za!}$Za~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$[a#X$[a!x$[a!}$[a~P!'WOz8tO$z#dOT$[a!S$[a!b$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a#X$[a!x$[a!}$[a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$_a#X$_a!x$_a!}$_a~P!'WO!q=dO#O7rO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$ka#X$ka!x$ka!}$ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$|a#X$|a!x$|a!}$|a~P!'WOT8vOz8tO!S8wO!b8xO!q7wO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi#X#yi!x#yi!}#yi~P!'WOz8tO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pi!S#Pi!b#Pi!q#Pi#X#Pi!x#Pi!}#Pi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#vi!S#vi!b#vi!q#vi#X#vi!x#vi!}#vi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q#xi#X#xi!x#xi!}#xi~P!'WO!q=eO#O7|O~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uq!S!uq!b!uq!q!uq!v!uq#X!uq!x!uq!}!uq~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pq!S#Pq!b#Pq!q#Pq#X#Pq!x#Pq!}#Pq~P!'WO!q=iO#O8TO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jq#X$jq!x$jq!}$jq~P!'WO#O8TO#l'SO~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uy!S!uy!b!uy!q!uy!v!uy#X!uy!x!uy!}!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jy#X$jy!x$jy!}$jy~P!'WO#O8UO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!R#X$j!R!x$j!R!}$j!R~P!'WO#O8XO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!Z#X$j!Z!x$j!Z!}$j!Z~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!c#X$j!c!x$j!c!}$j!c~P!'WO#S:bO~P>UO#O:aO!q'PX!x'PX~PGSO$l$tO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$l$tO$z:nO${!OO~P$;lOo8_Os$lO~O#S<jO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S<kO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Xa!q$Xa!n$Xa!}$Xa~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Ya!q$Ya!n$Ya!}$Ya~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Za!q$Za!n$Za!}$Za~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$[a!q$[a!n$[a!}$[a~P!'WOz:pO$z#dOT$[a!S$[a!b$[a!m$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a!n$[a!}$[a~P!'WOz:qO$z#dOT$[a!S$[a!b$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$_a!q$_a!n$_a!}$_a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$ka!q$ka!n$ka!}$ka~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$|a!q$|a!n$|a!}$|a~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi!n#yi!}#yi~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi~P!'WOT:tOz:pO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi~P!'WOT:tOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi!b#yi~P!'WOz:pO#S#QO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi!n#yi!}#yi~P!'WOz:qO#S#QO#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi~P!'WOz:pO#S#QO#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi!n#yi!}#yi~P!'WOz:qO#S#QO#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi~P!'WOz:pO#S#QO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi!n#yi!}#yi~P!'WOz:qO#S#QO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi~P!'WOz:pO#S#QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO#S#QO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!n#yi!}#yi~P!'WOz:qO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi~P!'WOz:pO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi~P!'WOz:pO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!n#yi!}#yi~P!'WOz:qO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi~P!'WOz:pO$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!n#yi!}#yi~P!'WOz:qO$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi~P!'WOz:pO$S;YO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi~P!'WOz:pO$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!n#yi!}#yi~P!'WOz:qO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Ta!}#Ta!q#Ta#X#Ta~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'Pa!}'Pa!q'Pa#X'Pa~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pi!S#Pi!b#Pi!m#Pi!q#Pi!n#Pi!}#Pi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pi!S#Pi!b#Pi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#vi!S#vi!b#vi!m#vi!q#vi!n#vi!}#vi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#vi!S#vi!b#vi~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#xi!q#xi!n#xi!}#xi~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uq!S!uq!b!uq!m!uq!q!uq!v!uq!n!uq!}!uq~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uq!S!uq!b!uq!v!uq~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pq!S#Pq!b#Pq!m#Pq!q#Pq!n#Pq!}#Pq~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pq!S#Pq!b#Pq~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jq!q$jq!n$jq!}$jq~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uy!S!uy!b!uy!m!uy!q!uy!v!uy!n!uy!}!uy~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uy!S!uy!b!uy!v!uy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jy!q$jy!n$jy!}$jy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!R!q$j!R!n$j!R!}$j!R~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!Z!q$j!Z!n$j!Z!}$j!Z~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!c!q$j!c!n$j!c!}$j!c~P!'WO#S=TO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S=UO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT6iOz6gO!S6jO!b6kO!v8sO#O=SO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O=RO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX!q'PX!n'PX!}'PX~P!'WOT&zXz&zX!S&zX!b&zX!o&zX!q&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX!}&zX~O#u9ZO#w9[O#X&zX!x&zX~P.8oO!y$hO#S=^O~O!q9hO~P>UO!y$hO#S=cO~O!q>OO#O9}O~OT8vOz8tO!S8wO!b8xO!q:OO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#Ta!q#Ta!n#Ta!}#Ta~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m'Pa!q'Pa!n'Pa!}'Pa~P!'WO!q>PO#O:RO~O!q>QO#O:YO~O#O:YO#l'SO~O#O:ZO#l'SO~O#O:_O#l'SO~O#u;eO#w;gO!m&zX!n&zX~P.8oO#u;fO#w;hOT&zXz&zX!S&zX!b&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX~O!q;tO~P>UO!q;uO~P>UO!q>XO#O<oO~O!q>YO#O9WO~OT8vOz8tO!S8wO!b8xO!q<pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!q<qO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q>ZO#O<vO~O!q>[O#O<{O~O#O<{O#l'SO~O#O9WO#l'SO~O#O<|O#l'SO~O#O=PO#l'SO~O!y$hO#S=|O~Oo=[Os$lO~O!y$hO#S=}O~O!y$hO#S>UO~O!y$hO#S>VO~O!y$hO#S>WO~Oo={Os$lO~Oo>TOs$lO~Oo>SOs$lO~O%O$U$}$d!d$V#b%V#e'g!s#d~",
      goto: "%&y'mPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'nP'uPP'{(OPPP(hP(OP(O*ZP*ZPP2W:j:mPP*Z:sBpPBsPBsPP:sCSCVCZ:s:sPPPC^PP:sK^!$S!$S:s!$WP!$W!$W!%UP!.]!7pP!?oP*ZP*Z*ZPPPPP!?rPPPPPPP*Z*Z*Z*ZPP*Z*ZP!E]!GRP!GV!Gy!GR!GR!HP*Z*ZP!HY!Hl!Ib!J`!Jd!J`!Jo!J}!J}!KV!KY!KY*ZPP*ZPP!K^#%[#%[#%`P#%fP(O#%j(O#&S#&V#&V#&](O#&`(O(O#&f#&i(O#&r#&u(O(O(O(O(O#&x(O(O(O(O(O(O(O(O(O#&{!KR(O(O#'_#'o#'r(O(OP#'u#'|#(S#(o#(y#)P#)Z#)b#)h#*d#4X#5T#5Z#5a#5k#5q#5w#6]#6c#6i#6o#6u#6{#7R#7]#7g#7m#7s#7}PPPPPPPP#8T#8X#8}#NO#NR#N]$(f$(r$)X$)_$)b$)e$)k$,X$5v$>_$>b$>h$>k$>n$>w$>{$?X$?k$Bk$CO$C{$K{PP%%y%%}%&Z%&p%&vQ!nQT!qV!rQUOR%x!mRVO}!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a|!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ%^!ZQ%g!aQ%l!eQ'd$dQ'q$iQ)[%kQ*y'tQ,](xU-n*v*x+OQ.W+cQ.{,[S/t-s-tQ0T.SS0}/s/wQ1V0RQ1o1OR2P1p0u!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nQ#j]Q$}!PQ%O!QQ%P!RQ,S(kQ.b+sR.f+vR&q#jQ)z&pR/a-R0uhPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#l^k#p_j#k#s&s&w3x3y7l8f8g8h8iR#u`T&|#t'OR-Y*U0thPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#va-r#OZ#f#m#w$V$W$X$Y$Z$[$u$v%W%Y%[%`%s%|&O&Q&U&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&u&v&{'X'Z'[(](p)q)s)u*O*[*^+S+V,`,c,y,{,}-V-W-X-i-x.k.w/`/h/n/y0r0u0x1Q1X1d1m1q2q2r2x2y2z2{2|2}3O3Q3R3S3T3U3V3W3X3Y3Z3[3]3^3_3`3a3b3c3e3f3i3j3l3m3n3q3r3t4Y4y4z4{4|4}5O5P5R5S5T5U5V5W5X5Y5Z5[5]5^5_5`5a5b5c5d5f5g5j5k5m5n5o5r5s5u6R6V6}7O7P7Q7R7S7U7V7W7Y7Z7[7]7^7_7`7a7b7c7d7e7f7g7h7j7k7n7p7q7x7y7{7}8O8P8Q8R8S8V8W8Y8]9U9^9_9`9a9b9c9f9g9i9j9k9l9m9n9o9p9q9r9s9t9u9v9w9x9z9{:P:Q:T:V:W:[:^:`:c;j;k;l;m;n;o;p;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<a<b<c<d<e<f<g<h<i<l<m<n<r<s<t<u<w<x<y<z<}=O=Q=V=W=_=`=a=q=rQ']$]Y(Q$s7T9e;q;rS(U2Z6QR(X$tT&X!})v!w$Qg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[3ZfPVX[_bgjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#}$R$S$U$h$y$}%P%R%S%T%U%c%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)_)c)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[3scPVX[_bdegjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#{#}$R$S$U$h$y$}%P%R%S%T%U%c%m%n%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)^)_)c)g)h)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u,x-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2W2X2Y2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[0phPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0`0a0d0e0i0v1R1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT1Z0V1]R&]#P!n#[Z#f#w$V$W$X$Y$[$s$v%W%Y%[&Q&_&`&a&b&c&d&e&f'X'Z'[(])q)s*^+V,{-x/y1Q1d1q7j7k!Y2j2Z2x2y2z2{2}3O3Q3R3S3T3U3V3W3X3a3b3c3e3f3i3j3l3m3n3q3r3t!^4m2r4y4z4{4|5O5P5R5S5T5U5V5W5X5Y5b5c5d5f5g5j5k5m5n5o5r5s5u6Q6R#Q6p#m%`%s&u&v&{(p*O+S,`,c,y-V-X.w2q6}7O7P7Q7S7T7U7Y7Z7[7]7^7_7`7a7n7p7q7x7{7}8Q8S8V8W8Y8]9U:c=V=W#^8}%|&O&U)u,}-W-i/h/n0r0u0x1m4Y6V7V7W7y8O8P8R9^9_9`9a9c9e9f9g9i9j9k9l9m9n9o9p9x9z9{:P:Q:T:V:W:[:^:`<f<g=_=q=r!^;S.k/`;j;k;l;m;p;q;s;v;x;z;|<O<Q<S<U<h<l<n<r<t<w<x<z<}=O=Q=`=ao;T1X;r;w;y;{;}<P<R<T<V<i<m<s<u<yS$iu#hQ$qwU't$j$l&oQ'v$kS'x$m$rQ*|'uQ+O'wQ+R'yQ4X5xS4[5z5{Q4]5|Q6U8^S6W8_8`Q6X8aQ9d=YS9|=[=^Q:S=cQ=]=yS=b={=|Q=f=}Q=o>RS=p>S>VS=s>T>UR=t>WT'n$h*s!csPVXt!S!j!r!s!w$h$}%P%S%U'i(T(`)W*s+]+g+r+u,g,k.b.d.l0`0a0i1aQ$^rR*`'^Q*x'sQ-t*{R/w-wQ(W$tQ)U%hQ)n%vQ*i'fQ+k(XR-c*jQ(V$tQ)Y%jQ)m%vQ*e'eS*h'f)nS+j(W(XS-b*i*jQ.]+kQ/T,mQ/e-`R/g-cQ(U$tQ)T%hQ)V%iQ)l%vU*g'f)m)nU+i(V(W(XQ,f)UU-a*h*i*jS.[+j+kS/f-b-cQ0X.]R0t/gT+e(T+g[%e!_$b'c+a.R0QR,d)Qb$ov(T+[+]+`+g.P.Q0PR+T'{S+e(T+gT,j)W,kR0W.XT1[0V1]0w|PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$x{${Q+p([R._+nT$z{${Q(b$}Q(j%PQ(o%SQ(r%UQ.j+yQ0].fQ0^.iR1g0iR(e%OX+|(c(d+},PR(f%OX(h%P%S%U0iR%S!T_%a!]%R(l,T,V.t0dR%U!UR.x,XR,[(wQ)X%jS*d'e)YS-_*e,mS/d-`/TR0s/eQ%q!fU)]%m%n%rU,o)^)g)hR/_,xR)d%pR/],uSSO!mR!oSQ!rVR%y!rQ!jPS!sV!rQ!wX[%u!j!s!w+r0a1aQ+r(`Q0a.lR1a0`Q)j%sS,z)j7vR7v7WQ-S)zR/b-SQ&x#qS*R&x7mR7m9YS*V&{&|R-Z*VQ)w&YR-P)w!l'T#|'h*n*q*v+W+[,m-`-s-v-y.P.z/s/v/z0P1O1p4^4_4`5y6Y6Z6[:U:X:]=g=h=j=u=v=w=xR*Z'T1^dPVX[_bjklmnoprxyz!S!W!X!Y!]!e!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%p%}&S&W&p&s&t&w'O'U'Y'^'z(O(R(S(`(l({)P)_)c)i)p)t)v*P*T*U*o+P+d+r+u+z,T,V,X,u-Q-R-d-k-z-|.b.d.l.t/[/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n`#zd#{%m)^)g,x2W2YQ#{eQ%m!fQ)^%nQ)g%rQ,x)h!v2Wg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[R2Y2X|tPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aW$`t'i+],gS'i$h*sS+](T+gT,g)W,kQ'_$^R*a'_Q*t'oR-m*tQ/p-oS0{/p0|R0|/qQ-}+XR/|-}Q+g(TR.Y+gS+`(T+gS,h)W,kQ.Q+]W.T+`,h.Q/OR/O,gQ)R%eR,e)RQ'|$oR+U'|Q1]0VR1w1]Q${{R(^${Q+t(aR.c+tQ+w(bR.g+wQ+}(cQ,P(dT.m+},PQ(|%`S,a(|7tR7t7VQ(y%^R,^(yQ,k)WR/R,kQ)`%oS,q)`/WR/W,rQ,v)dR/^,vT!uV!rj!iPVX!j!r!s!w(`+r.l0`0a1aQ%Q!SQ(a$}W(h%P%S%U0iQ.e+uQ0Z.bR0[.d|ZPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ#f[U#m_#s&wQ#wbQ$VkQ$WlQ$XmQ$YnQ$ZoQ$[pQ$sx^$uy2_4b6e8q:m:nQ$vzQ%W!WQ%Y!XQ%[!YW%`!]%R(l,VU%s!g&p-RQ%|!yQ&O!zQ&Q!{S&U!})v^&^#R2a4d6g8t:p:qQ&_#SQ&`#TQ&a#UQ&b#VQ&c#WQ&d#XQ&e#YQ&f#ZQ&g#[Q&h#]Q&i#^Q&j#_Q&k#`Q&l#aQ&m#bQ&u#nQ&v#oS&{#t'OQ'X$RQ'Z$SQ'[$UQ(]$yQ(p%TQ)q%}Q)s&SQ)u&WQ*O&tS*['U4ZQ*^'Y^*_2[3u5v8Z:a=R=SQ+S'zQ+V(OQ,`({Q,c)PQ,y)iQ,{)pQ,})tQ-V*PQ-W*TQ-X*U^-]2]3v5w8[:b=T=UQ-i*oQ-x+PQ.k+zQ.w,XQ/`-QQ/h-dQ/n-kQ/y-zQ0r/cQ0u/iQ0x/mQ1Q/xU1X0V1]9WQ1d0eQ1m0vQ1q1RQ2Z2^Q2qjQ2r3yQ2x3zQ2y3|Q2z4OQ2{4QQ2|4SQ2}4UQ3O2`Q3Q2bQ3R2cQ3S2dQ3T2eQ3U2fQ3V2gQ3W2hQ3X2iQ3Y2jQ3Z2kQ3[2lQ3]2mQ3^2nQ3_2oQ3`2pQ3a2sQ3b2tQ3c2uQ3e2vQ3f2wQ3i3PQ3j3dQ3l3gQ3m3hQ3n3kQ3q3oQ3r3pQ3t3sQ4Y4WQ4y3{Q4z3}Q4{4PQ4|4RQ4}4TQ5O4VQ5P4cQ5R4eQ5S4fQ5T4gQ5U4hQ5V4iQ5W4jQ5X4kQ5Y4lQ5Z4mQ5[4nQ5]4oQ5^4pQ5_4qQ5`4rQ5a4sQ5b4tQ5c4uQ5d4vQ5f4wQ5g4xQ5j5QQ5k5eQ5m5hQ5n5iQ5o5lQ5r5pQ5s5qQ5u5tQ6Q4aQ6R3xQ6V6TQ6}6^Q7O6_Q7P6`Q7Q6aQ7R6bQ7S6cQ7T6dQ7U6fU7V,T.t0dQ7W%cQ7Y6hQ7Z6iQ7[6jQ7]6kQ7^6lQ7_6mQ7`6nQ7a6oQ7b6pQ7c6qQ7d6rQ7e6sQ7f6tQ7g6uQ7h6vQ7j6xQ7k6yQ7n6zQ7p6{Q7q6|Q7x7XQ7y7iQ7{7oQ7}7rQ8O7sQ8P7uQ8Q7wQ8R7zQ8S7|Q8V8TQ8W8UQ8Y8XQ8]8fU9U#k&s7lQ9^8jQ9_8kQ9`8lQ9a8mQ9b8nQ9c8oQ9e8pQ9f8rQ9g8sQ9i8uQ9j8vQ9k8wQ9l8xQ9m8yQ9n8zQ9o8{Q9p8|Q9q8}Q9r9OQ9s9PQ9t9QQ9u9RQ9v9SQ9w9TQ9x9ZQ9z9[Q9{9]Q:P9hQ:Q9yQ:T9}Q:V:OQ:W:RQ:[:YQ:^:ZQ:`:_Q:c8iQ;j:dQ;k:eQ;l:fQ;m:gQ;n:hQ;o:iQ;p:jQ;q:kQ;r:lQ;s:oQ;v:rQ;w:sQ;x:tQ;y:uQ;z:vQ;{:wQ;|:xQ;}:yQ<O:zQ<P:{Q<Q:|Q<R:}Q<S;OQ<T;PQ<U;QQ<V;RQ<W;SQ<X;TQ<Y;UQ<Z;VQ<[;WQ<];XQ<^;YQ<_;ZQ<`;[Q<a;]Q<b;^Q<c;_Q<d;`Q<e;aQ<f;cQ<g;dQ<h;eQ<i;fQ<l;gQ<m;hQ<n;iQ<r;tQ<s;uQ<t<jQ<u<kQ<w<oQ<x<pQ<y<qQ<z<vQ<}<{Q=O<|Q=Q=PQ=V8hQ=W8gQ=_=ZQ=`9VQ=a9XQ=q=mR=r=nR){&pQ%t!gQ)O%cT)y&p-R$SiPVX[bklmnopxyz!S!W!X!Y!j!r!s!w!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y$}%P%S%U%}&S'Y(O(`)p+P+r+u-z.b.d.l/x0`0a0e0i1R1a2[2]6x6y!t3w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x6S3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O8e_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|=X!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v=k+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]=l0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UQ#r_Q&r#kQ&z#sR)}&sS#q_#s^$Tj3x3y8f8g8h8iS*Q&w7lT9Y#k&sQ&}#tR*X'OR&T!|R&Z!}Q&Y!}R-O)vQ#|gQ'V#}S'h$h*sQ*Y'SQ*n'iQ*q'mQ*v'rQ+W(PS+[(T+gQ,m)ZQ-`*fQ-s*zQ-v*}Q-y+QS.P+]+`Q.z,ZQ/s-rQ/v-uQ/z-{Q0P.QQ1O/uQ1p1PQ4^5}Q4_6OQ4`6PQ5y6]Q6Y8bQ6Z8cQ6[8dQ:U=dQ:X=eQ:]=iQ=g>OQ=h>PQ=j>QQ=u>XQ=v>YQ=w>ZR=x>[0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n!v$Pg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[S$]r'^Q%k!eS%o!f%rQ)b%pU+X(R(S+dQ,p)_Q,t)cQ/Z,uQ/{-|R0p/[|vPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a#U#i[bklmnopxyz!W!X!Y!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y%}&S'Y(O)p+P-z/x0e1R2[2]6x6yd+^(T)W+]+`+g,g,h,k.Q/O!t6w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x;b3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O=z_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|>]!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v>^+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]>_0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UR'p$hQ'o$hR-l*sR$_rR-q*wQ+Y(RQ+Z(SR.X+dT+f(T+ge+_(T)W+]+`+g,g,h,k.Q/OQ%f!_Q'b$bQ*c'cQ.U+aQ0S.RR1U0QQ#eZQ%X!WQ%Z!XQ%]!YQ'}$pQ(s%VQ(t%WQ(u%YQ(v%[Q(}%bQ)S%fQ)[%kQ)f%qQ)k%tQ*b'bQ,n)]Q-^*cQ.V+bQ.W+cQ.e+xQ.o,QQ.p,RQ.q,SQ.v,WQ.y,YQ.},bQ/U,oQ/}.OQ0T.SQ0U.UQ0W.XQ0[.hQ0k/QQ0q/_Q1S0OQ1V0RQ1W0SQ1`0_Q1h0jQ1r1TQ1s1UQ1v1[Q1y1_Q1}1jQ2T1{R2U1|Q$pvS+b(T+gU.O+[+]+`S0O.P.QR1T0P|!aPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ$dtW+c(T)W+g,kW.S+]+`,g,hT0R.Q/O0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR.|,_0w}PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$w{${Q(i%PQ(n%SQ(q%UR1f0iQ%b!]Q(m%RQ,U(lQ.s,TQ.u,VQ0c.tR1c0dQ%q!fR)]%rR)e%p",
      nodeNames: "\u26A0 ( HeredocString EscapeSequence abstract LogicOp array as Boolean break case catch clone const continue default declare do echo else elseif enddeclare endfor endforeach endif endswitch endwhile enum extends final finally fn for foreach from function global goto if implements include include_once LogicOp insteadof interface list match namespace new null LogicOp print require require_once return switch throw trait try unset use var Visibility while LogicOp yield LineComment BlockComment TextInterpolation PhpClose Text PhpOpen Template TextInterpolation EmptyStatement ; } { Block : LabelStatement Name ExpressionStatement ConditionalExpression LogicOp MatchExpression ) ( ParenthesizedExpression MatchBlock MatchArm , => AssignmentExpression ArrayExpression ValueList & VariadicUnpacking ... Pair [ ] ListExpression ValueList Pair Pair SubscriptExpression MemberExpression -> ?-> VariableName DynamicVariable $ ${ CallExpression ArgList NamedArgument SpreadArgument CastExpression UnionType LogicOp OptionalType NamedType QualifiedName \\ NamespaceName ScopedExpression :: ClassMemberName AssignOp UpdateExpression UpdateOp YieldExpression BinaryExpression LogicOp LogicOp LogicOp BitOp BitOp BitOp CompareOp CompareOp BitOp ArithOp ConcatOp ArithOp ArithOp IncludeExpression RequireExpression CloneExpression UnaryExpression ControlOp LogicOp PrintIntrinsic FunctionExpression static ParamList Parameter #[ Attributes Attribute VariadicParameter PropertyParameter UseList ArrowFunction NewExpression class BaseClause ClassInterfaceClause DeclarationList ConstDeclaration VariableDeclarator PropertyDeclaration VariableDeclarator MethodDeclaration UseDeclaration UseList UseInsteadOfClause UseAsClause UpdateExpression ArithOp ShellExpression ThrowExpression Integer Float String MemberExpression SubscriptExpression UnaryExpression ArithOp Interpolation String IfStatement ColonBlock SwitchStatement Block CaseStatement DefaultStatement ColonBlock WhileStatement EmptyStatement DoStatement ForStatement ForSpec SequenceExpression ForeachStatement ForSpec Pair GotoStatement ContinueStatement BreakStatement ReturnStatement TryStatement CatchDeclarator DeclareStatement EchoStatement UnsetStatement ConstDeclaration FunctionDefinition ClassDeclaration InterfaceDeclaration TraitDeclaration EnumDeclaration EnumBody EnumCase NamespaceDefinition NamespaceUseDeclaration UseGroup UseClause UseClause GlobalDeclaration FunctionStaticDeclaration Program",
      maxTerm: 304,
      nodeProps: [
        ["group", -36, 2, 8, 49, 81, 83, 85, 88, 93, 94, 102, 106, 107, 110, 111, 114, 118, 123, 126, 130, 132, 133, 147, 148, 149, 150, 153, 154, 164, 165, 179, 181, 182, 183, 184, 185, 191, "Expression", -28, 74, 78, 80, 82, 192, 194, 199, 201, 202, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 230, 231, "Statement", -3, 119, 121, 122, "Type"],
        ["isolate", -4, 66, 67, 70, 191, ""],
        ["openedBy", 69, "phpOpen", 76, "{", 86, "(", 101, "#["],
        ["closedBy", 71, "phpClose", 77, "}", 87, ")", 158, "]"]
      ],
      propSources: [phpHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 29,
      tokenData: "!F|_R!]OX$zXY&^YZ'sZ]$z]^&^^p$zpq&^qr)Rrs+Pst+otu2buv5evw6rwx8Vxy>]yz>yz{?g{|@}|}Bb}!OCO!O!PDh!P!QKT!Q!R!!o!R![!$q![!]!,P!]!^!-a!^!_!-}!_!`!1S!`!a!2d!a!b!3t!b!c!7^!c!d!7z!d!e!9W!e!}!7z!}#O!;^#O#P!;z#P#Q!<h#Q#R!=U#R#S!7z#S#T!=u#T#U!7z#U#V!9W#V#o!7z#o#p!Co#p#q!D]#q#r!Er#r#s!F`#s$f$z$f$g&^$g&j!7z&j$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zP%PV&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zP%kO&wPP%nWOY$zYZ%fZ!a$z!b;'S$z;'S;=`&W<%l~$z~O$z~~%fP&ZP;=`<%l$zV&ed&wP&vUOX$zXY&^YZ'sZ]$z]^&^^p$zpq&^q!^$z!^!_%k!_$f$z$f$g&^$g$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zV'zW&wP&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dU(iW&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dR)YW$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`;'S$z;'S;=`&W<%lO$zR)yW$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`*c!`;'S$z;'S;=`&W<%lO$zR*jV$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+YV'fS&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+v]&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b!},o!}#O1f#O;'S,o;'S;=`/s<%lO,oV,vZ&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,oV-nZ!dUOY,oYZ%fZ],o]^$z^!a,o!a!b.a!b;'S,o;'S;=`/s<%l~,o~O,o~~%fU.dWOY.|YZ/nZ].|]^/n^!`.|!a;'S.|;'S;=`/h<%lO.|U/RV!dUOY.|Z].|^!a.|!a!b.a!b;'S.|;'S;=`/h<%lO.|U/kP;=`<%l.|U/sO!dUV/vP;=`<%l,oV0OZ&wPOY,oYZ0qZ],o]^0x^!^,o!^!_-i!_!`,o!`!a$z!a;'S,o;'S;=`/s<%lO,oV0xO&wP!dUV1PV&wP!dUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV1oZ&wP$dQ!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,o_2i`&wP#dQOY$zYZ%fZ!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o#p4w#p$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$z_3ra&wP#b^OY$zYZ%fZ!Q$z!Q![3k![!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$zV5OV&wP#eUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR5lW&wP$VQOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR6]V#wQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV6yY#SU&wPOY$zYZ%fZv$zvw7iw!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR7pV#|Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR8^Z&wP%VQOY8VYZ9PZw8Vwx;_x!^8V!^!_;{!_#O8V#O#P<y#P;'S8V;'S;=`>V<%lO8VR9WV&wP%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ9rV%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ:^O%VQQ:aRO;'S9m;'S;=`:j;=`O9mQ:oW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l9m<%lO9mQ;[P;=`<%l9mR;fV&wP%VQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR<Q]%VQOY8VYZ9PZw8Vwx;_x!a8V!a!b9m!b#O8V#O#P<y#P;'S8V;'S;=`>V<%l~8V~O8V~~%fR=OW&wPOY8VYZ9PZ!^8V!^!_;{!_;'S8V;'S;=`=h;=`<%l9m<%lO8VR=mW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l8V<%lO9mR>YP;=`<%l8VR>dV!yQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV?QV!xU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR?nY&wP$VQOY$zYZ%fZz$zz{@^{!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR@eW$WQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRAUY$TQ&wPOY$zYZ%fZ{$z{|At|!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRA{V$zQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRBiV!}Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_CXZ$TQ%TW&wPOY$zYZ%fZ}$z}!OAt!O!^$z!^!_%k!_!`6U!`!aCz!a;'S$z;'S;=`&W<%lO$zVDRV#`U&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVDo[&wP$UQOY$zYZ%fZ!O$z!O!PEe!P!Q$z!Q![Fs![!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVEjX&wPOY$zYZ%fZ!O$z!O!PFV!P!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVF^V#UU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRFz_&wP%OQOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#SJc#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zRHO]&wPOY$zYZ%fZ{$z{|Hw|}$z}!OHw!O!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRH|X&wPOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRIpZ&wP%OQOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_#R$z#R#SHw#S;'S$z;'S;=`&W<%lO$zRJhX&wPOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVK[[&wP$VQOY$zYZ%fZz$zz{LQ{!P$z!P!Q,o!Q!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVLVX&wPOYLQYZLrZzLQz{N_{!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQVLwT&wPOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMZTOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMmVOzMWz{Mj{!PMW!P!QNS!Q;'SMW;'S;=`NX<%lOMWUNXO!eUUN[P;=`<%lMWVNdZ&wPOYLQYZLrZzLQz{N_{!PLQ!P!Q! V!Q!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQV! ^V!eU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV! vZOYLQYZLrZzLQz{N_{!aLQ!a!bMW!b;'SLQ;'S;=`!!i<%l~LQ~OLQ~~%fV!!lP;=`<%lLQZ!!vm&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!d$z!d!e!&o!e!g$z!g!hGy!h!q$z!q!r!(a!r!z$z!z!{!){!{#R$z#R#S!%}#S#U$z#U#V!&o#V#X$z#X#YGy#Y#c$z#c#d!(a#d#l$z#l#m!){#m;'S$z;'S;=`&W<%lO$zZ!$xa&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#S!%}#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zZ!&SX&wPOY$zYZ%fZ!Q$z!Q![!$q![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!&tY&wPOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!'k[&wP$}YOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_#R$z#R#S!&o#S;'S$z;'S;=`&W<%lO$zZ!(fX&wPOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!)YZ&wP$}YOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_#R$z#R#S!(a#S;'S$z;'S;=`&W<%lO$zZ!*Q]&wPOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zZ!+Q_&wP$}YOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#R$z#R#S!){#S#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zR!,WX!qQ&wPOY$zYZ%fZ![$z![!]!,s!]!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!,zV#sQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!-hV!mU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!.S[$RQOY$zYZ%fZ!^$z!^!_!.x!_!`!/i!`!a*c!a!b!0]!b;'S$z;'S;=`&W<%l~$z~O$z~~%fR!/PW$SQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!/pX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a*c!a;'S$z;'S;=`&W<%lO$zP!0bR!iP!_!`!0k!r!s!0p#d#e!0pP!0pO!iPP!0sQ!j!k!0y#[#]!0yP!0|Q!r!s!0k#d#e!0kV!1ZX#uQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`!a!1v!a;'S$z;'S;=`&W<%lO$zV!1}V#OU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!2kX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`!3W!`!a!.x!a;'S$z;'S;=`&W<%lO$zR!3_V$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!3{[!vQ&wPOY$zYZ%fZ}$z}!O!4q!O!^$z!^!_%k!_!`$z!`!a!6P!a!b!6m!b;'S$z;'S;=`&W<%lO$zV!4vX&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a!5c!a;'S$z;'S;=`&W<%lO$zV!5jV#aU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!6WV!gU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!6tW#zQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!7eV$]Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_!8Ra&wP!s^OY$zYZ%fZ!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$z_!9_e&wP!s^OY$zYZ%fZr$zrs!:psw$zwx8Vx!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$zR!:wV&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!;eV#WU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!<RV#pU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!<oV#XQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!=]W$OQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!=zZ&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%lO!=uR!>rV&wPO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?[VO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?tRO;'S!?X;'S;=`!?};=`O!?XQ!@QWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!?X<%lO!?XQ!@oO${QQ!@rP;=`<%l!?XR!@x]OY!=uYZ!>mZ!a!=u!a!b!?X!b#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%l~!=u~O!=u~~%fR!AvW&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_;'S!=u;'S;=`!B`;=`<%l!?X<%lO!=uR!BcWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!=u<%lO!?XR!CSV${Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!ClP;=`<%l!=uV!CvV!oU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!DfY#}Q#lS&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`#p$z#p#q!EU#q;'S$z;'S;=`&W<%lO$zR!E]V#{Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!EyV!nQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!FgV$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z",
      tokenizers: [expression, interpolated, semicolon3, 0, 1, 2, 3, eofToken],
      topRules: { "Template": [0, 72], "Program": [1, 232] },
      dynamicPrecedences: { "284": 1 },
      specialized: [{ term: 81, get: (value, stack) => keywords4(value) << 1, external: keywords4 }, { term: 81, get: (value) => spec_Name[value] || -1 }],
      tokenPrec: 29354
    });
  }
});

// ../../node_modules/@codemirror/lang-php/dist/index.js
var dist_exports12 = {};
__export(dist_exports12, {
  php: () => php,
  phpLanguage: () => phpLanguage
});
function php(config2 = {}) {
  let support = [], base5;
  if (config2.baseLanguage === null) ;
  else if (config2.baseLanguage) {
    base5 = config2.baseLanguage;
  } else {
    let htmlSupport = html({ matchClosingTags: false });
    support.push(htmlSupport.support);
    base5 = htmlSupport.language;
  }
  return new LanguageSupport(phpLanguage.configure({
    wrap: base5 && parseMixed((node) => {
      if (!node.type.isTop)
        return null;
      return {
        parser: base5.parser,
        overlay: (node2) => node2.name == "Text"
      };
    }),
    top: config2.plain ? "Program" : "Template"
  }), support);
}
var phpLanguage;
var init_dist27 = __esm({
  "../../node_modules/@codemirror/lang-php/dist/index.js"() {
    init_index_es();
    init_dist();
    init_dist18();
    init_dist5();
    phpLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "php",
      parser: /* @__PURE__ */ parser12.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b|elseif\b|endif\b)/ }),
            TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
            SwitchBody: (context) => {
              let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
              return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
            },
            ColonBlock: (cx2) => cx2.baseIndent + cx2.unit,
            "Block EnumBody DeclarationList": /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            ArrowFunction: (cx2) => cx2.baseIndent + cx2.unit,
            "String BlockComment": () => null,
            Statement: /* @__PURE__ */ continuedIndent({ except: /^({|end(for|foreach|switch|while)\b)/ })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList": foldInside,
            ColonBlock(tree) {
              return { from: tree.from + 1, to: tree.to };
            },
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          })
        ]
      }),
      languageData: {
        commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
        indentOnInput: /^\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\{|\})$/,
        wordChars: "$",
        closeBrackets: { stringPrefixes: ["b", "B"] }
      }
    });
  }
});

// ../../node_modules/@lezer/python/dist/index.js
function isLineBreak(ch2) {
  return ch2 == newline4 || ch2 == carriageReturn2;
}
function isHex2(ch2) {
  return ch2 >= 48 && ch2 <= 57 || ch2 >= 65 && ch2 <= 70 || ch2 >= 97 && ch2 <= 102;
}
function Context2(parent, indent7, flags) {
  this.parent = parent;
  this.indent = indent7;
  this.flags = flags;
  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + indent7 + (indent7 << 4) + flags + (flags << 6);
}
function countIndent(space10) {
  let depth = 0;
  for (let i = 0; i < space10.length; i++)
    depth += space10.charCodeAt(i) == tab2 ? 8 - depth % 8 : 1;
  return depth;
}
function skipEscape(input, ch2) {
  if (ch2 == letter_o) {
    for (let i = 0; i < 2 && input.next >= 48 && input.next <= 55; i++) input.advance();
  } else if (ch2 == letter_x) {
    for (let i = 0; i < 2 && isHex2(input.next); i++) input.advance();
  } else if (ch2 == letter_u) {
    for (let i = 0; i < 4 && isHex2(input.next); i++) input.advance();
  } else if (ch2 == letter_U) {
    for (let i = 0; i < 8 && isHex2(input.next); i++) input.advance();
  } else if (ch2 == letter_N) {
    if (input.next == braceOpen) {
      input.advance();
      while (input.next >= 0 && input.next != braceClose && input.next != singleQuote && input.next != doubleQuote && input.next != newline4) input.advance();
      if (input.next == braceClose) input.advance();
    }
  }
}
var printKeyword, indent, dedent, newline$1, blankLineStart, newlineBracketed, eof2, stringContent, Escape, replacementStart, stringEnd, ParenL3, ParenthesizedExpression, TupleExpression, ComprehensionExpression, BracketL2, ArrayExpression, ArrayComprehensionExpression, BraceL2, DictionaryExpression, DictionaryComprehensionExpression, SetExpression, SetComprehensionExpression, ArgList, subscript, String$12, stringStart, stringStartD, stringStartL, stringStartLD, stringStartR, stringStartRD, stringStartRL, stringStartRLD, FormatString, stringStartF, stringStartFD, stringStartFL, stringStartFLD, stringStartFR, stringStartFRD, stringStartFRL, stringStartFRLD, FormatReplacement, nestedFormatReplacement, importList, TypeParamList, ParamList, SequencePattern, MappingPattern, PatternArgList, newline4, carriageReturn2, space6, tab2, hash2, parenOpen, dot2, braceOpen, braceClose, singleQuote, doubleQuote, backslash2, letter_o, letter_x, letter_N, letter_u, letter_U, bracketed, newlines, indentation, cx_Bracketed, cx_String, cx_DoubleQuote, cx_Long, cx_Raw, cx_Format, topIndent2, stringFlags, trackIndent, legacyPrint, strings, pythonHighlighting, spec_identifier8, parser13;
var init_dist28 = __esm({
  "../../node_modules/@lezer/python/dist/index.js"() {
    init_dist6();
    init_dist4();
    printKeyword = 1;
    indent = 194;
    dedent = 195;
    newline$1 = 196;
    blankLineStart = 197;
    newlineBracketed = 198;
    eof2 = 199;
    stringContent = 200;
    Escape = 2;
    replacementStart = 3;
    stringEnd = 201;
    ParenL3 = 24;
    ParenthesizedExpression = 25;
    TupleExpression = 49;
    ComprehensionExpression = 50;
    BracketL2 = 55;
    ArrayExpression = 56;
    ArrayComprehensionExpression = 57;
    BraceL2 = 59;
    DictionaryExpression = 60;
    DictionaryComprehensionExpression = 61;
    SetExpression = 62;
    SetComprehensionExpression = 63;
    ArgList = 65;
    subscript = 238;
    String$12 = 71;
    stringStart = 241;
    stringStartD = 242;
    stringStartL = 243;
    stringStartLD = 244;
    stringStartR = 245;
    stringStartRD = 246;
    stringStartRL = 247;
    stringStartRLD = 248;
    FormatString = 72;
    stringStartF = 249;
    stringStartFD = 250;
    stringStartFL = 251;
    stringStartFLD = 252;
    stringStartFR = 253;
    stringStartFRD = 254;
    stringStartFRL = 255;
    stringStartFRLD = 256;
    FormatReplacement = 73;
    nestedFormatReplacement = 77;
    importList = 263;
    TypeParamList = 112;
    ParamList = 130;
    SequencePattern = 151;
    MappingPattern = 152;
    PatternArgList = 155;
    newline4 = 10;
    carriageReturn2 = 13;
    space6 = 32;
    tab2 = 9;
    hash2 = 35;
    parenOpen = 40;
    dot2 = 46;
    braceOpen = 123;
    braceClose = 125;
    singleQuote = 39;
    doubleQuote = 34;
    backslash2 = 92;
    letter_o = 111;
    letter_x = 120;
    letter_N = 78;
    letter_u = 117;
    letter_U = 85;
    bracketed = /* @__PURE__ */ new Set([
      ParenthesizedExpression,
      TupleExpression,
      ComprehensionExpression,
      importList,
      ArgList,
      ParamList,
      ArrayExpression,
      ArrayComprehensionExpression,
      subscript,
      SetExpression,
      SetComprehensionExpression,
      FormatString,
      FormatReplacement,
      nestedFormatReplacement,
      DictionaryExpression,
      DictionaryComprehensionExpression,
      SequencePattern,
      MappingPattern,
      PatternArgList,
      TypeParamList
    ]);
    newlines = new ExternalTokenizer((input, stack) => {
      let prev;
      if (input.next < 0) {
        input.acceptToken(eof2);
      } else if (stack.context.flags & cx_Bracketed) {
        if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
      } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) && stack.canShift(blankLineStart)) {
        let spaces3 = 0;
        while (input.next == space6 || input.next == tab2) {
          input.advance();
          spaces3++;
        }
        if (input.next == newline4 || input.next == carriageReturn2 || input.next == hash2)
          input.acceptToken(blankLineStart, -spaces3);
      } else if (isLineBreak(input.next)) {
        input.acceptToken(newline$1, 1);
      }
    }, { contextual: true });
    indentation = new ExternalTokenizer((input, stack) => {
      let context = stack.context;
      if (context.flags) return;
      let prev = input.peek(-1);
      if (prev == newline4 || prev == carriageReturn2) {
        let depth = 0, chars2 = 0;
        for (; ; ) {
          if (input.next == space6) depth++;
          else if (input.next == tab2) depth += 8 - depth % 8;
          else break;
          input.advance();
          chars2++;
        }
        if (depth != context.indent && input.next != newline4 && input.next != carriageReturn2 && input.next != hash2) {
          if (depth < context.indent) input.acceptToken(dedent, -chars2);
          else input.acceptToken(indent);
        }
      }
    });
    cx_Bracketed = 1;
    cx_String = 2;
    cx_DoubleQuote = 4;
    cx_Long = 8;
    cx_Raw = 16;
    cx_Format = 32;
    topIndent2 = new Context2(null, 0, 0);
    stringFlags = new Map([
      [stringStart, 0],
      [stringStartD, cx_DoubleQuote],
      [stringStartL, cx_Long],
      [stringStartLD, cx_Long | cx_DoubleQuote],
      [stringStartR, cx_Raw],
      [stringStartRD, cx_Raw | cx_DoubleQuote],
      [stringStartRL, cx_Raw | cx_Long],
      [stringStartRLD, cx_Raw | cx_Long | cx_DoubleQuote],
      [stringStartF, cx_Format],
      [stringStartFD, cx_Format | cx_DoubleQuote],
      [stringStartFL, cx_Format | cx_Long],
      [stringStartFLD, cx_Format | cx_Long | cx_DoubleQuote],
      [stringStartFR, cx_Format | cx_Raw],
      [stringStartFRD, cx_Format | cx_Raw | cx_DoubleQuote],
      [stringStartFRL, cx_Format | cx_Raw | cx_Long],
      [stringStartFRLD, cx_Format | cx_Raw | cx_Long | cx_DoubleQuote]
    ].map(([term, flags]) => [term, flags | cx_String]));
    trackIndent = new ContextTracker({
      start: topIndent2,
      reduce(context, term, _, input) {
        if (context.flags & cx_Bracketed && bracketed.has(term) || (term == String$12 || term == FormatString) && context.flags & cx_String)
          return context.parent;
        return context;
      },
      shift(context, term, stack, input) {
        if (term == indent)
          return new Context2(context, countIndent(input.read(input.pos, stack.pos)), 0);
        if (term == dedent)
          return context.parent;
        if (term == ParenL3 || term == BracketL2 || term == BraceL2 || term == replacementStart)
          return new Context2(context, 0, cx_Bracketed);
        if (stringFlags.has(term))
          return new Context2(context, 0, stringFlags.get(term) | context.flags & cx_Bracketed);
        return context;
      },
      hash(context) {
        return context.hash;
      }
    });
    legacyPrint = new ExternalTokenizer((input) => {
      for (let i = 0; i < 5; i++) {
        if (input.next != "print".charCodeAt(i)) return;
        input.advance();
      }
      if (/\w/.test(String.fromCharCode(input.next))) return;
      for (let off = 0; ; off++) {
        let next2 = input.peek(off);
        if (next2 == space6 || next2 == tab2) continue;
        if (next2 != parenOpen && next2 != dot2 && next2 != newline4 && next2 != carriageReturn2 && next2 != hash2)
          input.acceptToken(printKeyword);
        return;
      }
    });
    strings = new ExternalTokenizer((input, stack) => {
      let { flags } = stack.context;
      let quote4 = flags & cx_DoubleQuote ? doubleQuote : singleQuote;
      let long = (flags & cx_Long) > 0;
      let escapes = !(flags & cx_Raw);
      let format = (flags & cx_Format) > 0;
      let start2 = input.pos;
      for (; ; ) {
        if (input.next < 0) {
          break;
        } else if (format && input.next == braceOpen) {
          if (input.peek(1) == braceOpen) {
            input.advance(2);
          } else {
            if (input.pos == start2) {
              input.acceptToken(replacementStart, 1);
              return;
            }
            break;
          }
        } else if (escapes && input.next == backslash2) {
          if (input.pos == start2) {
            input.advance();
            let escaped = input.next;
            if (escaped >= 0) {
              input.advance();
              skipEscape(input, escaped);
            }
            input.acceptToken(Escape);
            return;
          }
          break;
        } else if (input.next == backslash2 && !escapes && input.peek(1) > -1) {
          input.advance(2);
        } else if (input.next == quote4 && (!long || input.peek(1) == quote4 && input.peek(2) == quote4)) {
          if (input.pos == start2) {
            input.acceptToken(stringEnd, long ? 3 : 1);
            return;
          }
          break;
        } else if (input.next == newline4) {
          if (long) {
            input.advance();
          } else if (input.pos == start2) {
            input.acceptToken(stringEnd);
            return;
          }
          break;
        } else {
          input.advance();
        }
      }
      if (input.pos > start2) input.acceptToken(stringContent);
    });
    pythonHighlighting = styleTags({
      'async "*" "**" FormatConversion FormatSpec': tags.modifier,
      "for while if elif else try except finally return raise break continue with pass assert await yield match case": tags.controlKeyword,
      "in not and or is del": tags.operatorKeyword,
      "from def class global nonlocal lambda": tags.definitionKeyword,
      import: tags.moduleKeyword,
      "with as print": tags.keyword,
      Boolean: tags.bool,
      None: tags.null,
      VariableName: tags.variableName,
      "CallExpression/VariableName": tags.function(tags.variableName),
      "FunctionDefinition/VariableName": tags.function(tags.definition(tags.variableName)),
      "ClassDefinition/VariableName": tags.definition(tags.className),
      PropertyName: tags.propertyName,
      "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
      Comment: tags.lineComment,
      Number: tags.number,
      String: tags.string,
      FormatString: tags.special(tags.string),
      Escape: tags.escape,
      UpdateOp: tags.updateOperator,
      "ArithOp!": tags.arithmeticOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      AssignOp: tags.definitionOperator,
      Ellipsis: tags.punctuation,
      At: tags.meta,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace,
      ".": tags.derefOperator,
      ", ;": tags.separator
    });
    spec_identifier8 = { __proto__: null, await: 44, or: 54, and: 56, in: 60, not: 62, is: 64, if: 70, else: 72, lambda: 76, yield: 94, from: 96, async: 102, for: 104, None: 162, True: 164, False: 164, del: 178, pass: 182, break: 186, continue: 190, return: 194, raise: 202, import: 206, as: 208, global: 212, nonlocal: 214, assert: 218, type: 223, elif: 236, while: 240, try: 246, except: 248, finally: 250, with: 254, def: 258, class: 268, match: 279, case: 285 };
    parser13 = LRParser.deserialize({
      version: 14,
      states: "##jO`QeOOP$}OSOOO&WQtO'#HUOOQS'#Co'#CoOOQS'#Cp'#CpO'vQdO'#CnO*UQtO'#HTOOQS'#HU'#HUOOQS'#DU'#DUOOQS'#HT'#HTO*rQdO'#D_O+VQdO'#DfO+gQdO'#DjO+zOWO'#DuO,VOWO'#DvO.[QtO'#GuOOQS'#Gu'#GuO'vQdO'#GtO0ZQtO'#GtOOQS'#Eb'#EbO0rQdO'#EcOOQS'#Gs'#GsO0|QdO'#GrOOQV'#Gr'#GrO1XQdO'#FYOOQS'#G^'#G^O1^QdO'#FXOOQV'#IS'#ISOOQV'#Gq'#GqOOQV'#Fq'#FqQ`QeOOO'vQdO'#CqO1lQdO'#C}O1sQdO'#DRO2RQdO'#HYO2cQtO'#EVO'vQdO'#EWOOQS'#EY'#EYOOQS'#E['#E[OOQS'#E^'#E^O2wQdO'#E`O3_QdO'#EdO3rQdO'#EfO3zQtO'#EfO1XQdO'#EiO0rQdO'#ElO1XQdO'#EnO0rQdO'#EtO0rQdO'#EwO4VQdO'#EyO4^QdO'#FOO4iQdO'#EzO0rQdO'#FOO1XQdO'#FQO1XQdO'#FVO4nQdO'#F[P4uOdO'#GpPOOO)CBd)CBdOOQS'#Ce'#CeOOQS'#Cf'#CfOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Cl'#ClO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO'vQdO,59OO5TQdO'#DoOOQS,5:Y,5:YO5hQdO'#HdOOQS,5:],5:]O5uQ!fO,5:]O5zQtO,59YO1lQdO,59bO1lQdO,59bO1lQdO,59bO8jQdO,59bO8oQdO,59bO8vQdO,59jO8}QdO'#HTO:TQdO'#HSOOQS'#HS'#HSOOQS'#D['#D[O:lQdO,59aO'vQdO,59aO:zQdO,59aOOQS,59y,59yO;PQdO,5:RO'vQdO,5:ROOQS,5:Q,5:QO;_QdO,5:QO;dQdO,5:XO'vQdO,5:XO'vQdO,5:VOOQS,5:U,5:UO;uQdO,5:UO;zQdO,5:WOOOW'#Fy'#FyO<POWO,5:aOOQS,5:a,5:aO<[QdO'#HwOOOW'#Dw'#DwOOOW'#Fz'#FzO<lOWO,5:bOOQS,5:b,5:bOOQS'#F}'#F}O<zQtO,5:iO?lQtO,5=`O@VQ#xO,5=`O@vQtO,5=`OOQS,5:},5:}OA_QeO'#GWOBqQdO,5;^OOQV,5=^,5=^OB|QtO'#IPOCkQdO,5;tOOQS-E:[-E:[OOQV,5;s,5;sO4dQdO'#FQOOQV-E9o-E9oOCsQtO,59]OEzQtO,59iOFeQdO'#HVOFpQdO'#HVO1XQdO'#HVOF{QdO'#DTOGTQdO,59mOGYQdO'#HZO'vQdO'#HZO0rQdO,5=tOOQS,5=t,5=tO0rQdO'#EROOQS'#ES'#ESOGwQdO'#GPOHXQdO,58|OHXQdO,58|O*xQdO,5:oOHgQtO'#H]OOQS,5:r,5:rOOQS,5:z,5:zOHzQdO,5;OOI]QdO'#IOO1XQdO'#H}OOQS,5;Q,5;QOOQS'#GT'#GTOIqQtO,5;QOJPQdO,5;QOJUQdO'#IQOOQS,5;T,5;TOJdQdO'#H|OOQS,5;W,5;WOJuQdO,5;YO4iQdO,5;`O4iQdO,5;cOJ}QtO'#ITO'vQdO'#ITOKXQdO,5;eO4VQdO,5;eO0rQdO,5;jO1XQdO,5;lOK^QeO'#EuOLjQgO,5;fO!!kQdO'#IUO4iQdO,5;jO!!vQdO,5;lO!#OQdO,5;qO!#ZQtO,5;vO'vQdO,5;vPOOO,5=[,5=[P!#bOSO,5=[P!#jOdO,5=[O!&bQtO1G.jO!&iQtO1G.jO!)YQtO1G.jO!)dQtO1G.jO!+}QtO1G.jO!,bQtO1G.jO!,uQdO'#HcO!-TQtO'#GuO0rQdO'#HcO!-_QdO'#HbOOQS,5:Z,5:ZO!-gQdO,5:ZO!-lQdO'#HeO!-wQdO'#HeO!.[QdO,5>OOOQS'#Ds'#DsOOQS1G/w1G/wOOQS1G.|1G.|O!/[QtO1G.|O!/cQtO1G.|O1lQdO1G.|O!0OQdO1G/UOOQS'#DZ'#DZO0rQdO,59tOOQS1G.{1G.{O!0VQdO1G/eO!0gQdO1G/eO!0oQdO1G/fO'vQdO'#H[O!0tQdO'#H[O!0yQtO1G.{O!1ZQdO,59iO!2aQdO,5=zO!2qQdO,5=zO!2yQdO1G/mO!3OQtO1G/mOOQS1G/l1G/lO!3`QdO,5=uO!4VQdO,5=uO0rQdO1G/qO!4tQdO1G/sO!4yQtO1G/sO!5ZQtO1G/qOOQS1G/p1G/pOOQS1G/r1G/rOOOW-E9w-E9wOOQS1G/{1G/{O!5kQdO'#HxO0rQdO'#HxO!5|QdO,5>cOOOW-E9x-E9xOOQS1G/|1G/|OOQS-E9{-E9{O!6[Q#xO1G2zO!6{QtO1G2zO'vQdO,5<jOOQS,5<j,5<jOOQS-E9|-E9|OOQS,5<r,5<rOOQS-E:U-E:UOOQV1G0x1G0xO1XQdO'#GRO!7dQtO,5>kOOQS1G1`1G1`O!8RQdO1G1`OOQS'#DV'#DVO0rQdO,5=qOOQS,5=q,5=qO!8WQdO'#FrO!8cQdO,59oO!8kQdO1G/XO!8uQtO,5=uOOQS1G3`1G3`OOQS,5:m,5:mO!9fQdO'#GtOOQS,5<k,5<kOOQS-E9}-E9}O!9wQdO1G.hOOQS1G0Z1G0ZO!:VQdO,5=wO!:gQdO,5=wO0rQdO1G0jO0rQdO1G0jO!:xQdO,5>jO!;ZQdO,5>jO1XQdO,5>jO!;lQdO,5>iOOQS-E:R-E:RO!;qQdO1G0lO!;|QdO1G0lO!<RQdO,5>lO!<aQdO,5>lO!<oQdO,5>hO!=VQdO,5>hO!=hQdO'#EpO0rQdO1G0tO!=sQdO1G0tO!=xQgO1G0zO!AvQgO1G0}O!EqQdO,5>oO!E{QdO,5>oO!FTQtO,5>oO0rQdO1G1PO!F_QdO1G1PO4iQdO1G1UO!!vQdO1G1WOOQV,5;a,5;aO!FdQfO,5;aO!FiQgO1G1QO!JjQdO'#GZO4iQdO1G1QO4iQdO1G1QO!JzQdO,5>pO!KXQdO,5>pO1XQdO,5>pOOQV1G1U1G1UO!KaQdO'#FSO!KrQ!fO1G1WO!KzQdO1G1WOOQV1G1]1G1]O4iQdO1G1]O!LPQdO1G1]O!LXQdO'#F^OOQV1G1b1G1bO!#ZQtO1G1bPOOO1G2v1G2vP!L^OSO1G2vOOQS,5=},5=}OOQS'#Dp'#DpO0rQdO,5=}O!LfQdO,5=|O!LyQdO,5=|OOQS1G/u1G/uO!MRQdO,5>PO!McQdO,5>PO!MkQdO,5>PO!NOQdO,5>PO!N`QdO,5>POOQS1G3j1G3jOOQS7+$h7+$hO!8kQdO7+$pO#!RQdO1G.|O#!YQdO1G.|OOQS1G/`1G/`OOQS,5<`,5<`O'vQdO,5<`OOQS7+%P7+%PO#!aQdO7+%POOQS-E9r-E9rOOQS7+%Q7+%QO#!qQdO,5=vO'vQdO,5=vOOQS7+$g7+$gO#!vQdO7+%PO##OQdO7+%QO##TQdO1G3fOOQS7+%X7+%XO##eQdO1G3fO##mQdO7+%XOOQS,5<_,5<_O'vQdO,5<_O##rQdO1G3aOOQS-E9q-E9qO#$iQdO7+%]OOQS7+%_7+%_O#$wQdO1G3aO#%fQdO7+%_O#%kQdO1G3gO#%{QdO1G3gO#&TQdO7+%]O#&YQdO,5>dO#&sQdO,5>dO#&sQdO,5>dOOQS'#Dx'#DxO#'UO&jO'#DzO#'aO`O'#HyOOOW1G3}1G3}O#'fQdO1G3}O#'nQdO1G3}O#'yQ#xO7+(fO#(jQtO1G2UP#)TQdO'#GOOOQS,5<m,5<mOOQS-E:P-E:POOQS7+&z7+&zOOQS1G3]1G3]OOQS,5<^,5<^OOQS-E9p-E9pOOQS7+$s7+$sO#)bQdO,5=`O#){QdO,5=`O#*^QtO,5<aO#*qQdO1G3cOOQS-E9s-E9sOOQS7+&U7+&UO#+RQdO7+&UO#+aQdO,5<nO#+uQdO1G4UOOQS-E:Q-E:QO#,WQdO1G4UOOQS1G4T1G4TOOQS7+&W7+&WO#,iQdO7+&WOOQS,5<p,5<pO#,tQdO1G4WOOQS-E:S-E:SOOQS,5<l,5<lO#-SQdO1G4SOOQS-E:O-E:OO1XQdO'#EqO#-jQdO'#EqO#-uQdO'#IRO#-}QdO,5;[OOQS7+&`7+&`O0rQdO7+&`O#.SQgO7+&fO!JmQdO'#GXO4iQdO7+&fO4iQdO7+&iO#2QQtO,5<tO'vQdO,5<tO#2[QdO1G4ZOOQS-E:W-E:WO#2fQdO1G4ZO4iQdO7+&kO0rQdO7+&kOOQV7+&p7+&pO!KrQ!fO7+&rO!KzQdO7+&rO`QeO1G0{OOQV-E:X-E:XO4iQdO7+&lO4iQdO7+&lOOQV,5<u,5<uO#2nQdO,5<uO!JmQdO,5<uOOQV7+&l7+&lO#2yQgO7+&lO#6tQdO,5<vO#7PQdO1G4[OOQS-E:Y-E:YO#7^QdO1G4[O#7fQdO'#IWO#7tQdO'#IWO1XQdO'#IWOOQS'#IW'#IWO#8PQdO'#IVOOQS,5;n,5;nO#8XQdO,5;nO0rQdO'#FUOOQV7+&r7+&rO4iQdO7+&rOOQV7+&w7+&wO4iQdO7+&wO#8^QfO,5;xOOQV7+&|7+&|POOO7+(b7+(bO#8cQdO1G3iOOQS,5<c,5<cO#8qQdO1G3hOOQS-E9u-E9uO#9UQdO,5<dO#9aQdO,5<dO#9tQdO1G3kOOQS-E9v-E9vO#:UQdO1G3kO#:^QdO1G3kO#:nQdO1G3kO#:UQdO1G3kOOQS<<H[<<H[O#:yQtO1G1zOOQS<<Hk<<HkP#;WQdO'#FtO8vQdO1G3bO#;eQdO1G3bO#;jQdO<<HkOOQS<<Hl<<HlO#;zQdO7+)QOOQS<<Hs<<HsO#<[QtO1G1yP#<{QdO'#FsO#=YQdO7+)RO#=jQdO7+)RO#=rQdO<<HwO#=wQdO7+({OOQS<<Hy<<HyO#>nQdO,5<bO'vQdO,5<bOOQS-E9t-E9tOOQS<<Hw<<HwOOQS,5<g,5<gO0rQdO,5<gO#>sQdO1G4OOOQS-E9y-E9yO#?^QdO1G4OO<[QdO'#H{OOOO'#D{'#D{OOOO'#F|'#F|O#?oO&jO,5:fOOOW,5>e,5>eOOOW7+)i7+)iO#?zQdO7+)iO#@SQdO1G2zO#@mQdO1G2zP'vQdO'#FuO0rQdO<<IpO1XQdO1G2YP1XQdO'#GSO#AOQdO7+)pO#AaQdO7+)pOOQS<<Ir<<IrP1XQdO'#GUP0rQdO'#GQOOQS,5;],5;]O#ArQdO,5>mO#BQQdO,5>mOOQS1G0v1G0vOOQS<<Iz<<IzOOQV-E:V-E:VO4iQdO<<JQOOQV,5<s,5<sO4iQdO,5<sOOQV<<JQ<<JQOOQV<<JT<<JTO#BYQtO1G2`P#BdQdO'#GYO#BkQdO7+)uO#BuQgO<<JVO4iQdO<<JVOOQV<<J^<<J^O4iQdO<<J^O!KrQ!fO<<J^O#FpQgO7+&gOOQV<<JW<<JWO#FzQgO<<JWOOQV1G2a1G2aO1XQdO1G2aO#JuQdO1G2aO4iQdO<<JWO1XQdO1G2bP0rQdO'#G[O#KQQdO7+)vO#K_QdO7+)vOOQS'#FT'#FTO0rQdO,5>rO#KgQdO,5>rO#KrQdO,5>rO#K}QdO,5>qO#L`QdO,5>qOOQS1G1Y1G1YOOQS,5;p,5;pOOQV<<Jc<<JcO#LhQdO1G1dOOQS7+)T7+)TP#LmQdO'#FwO#L}QdO1G2OO#MbQdO1G2OO#MrQdO1G2OP#M}QdO'#FxO#N[QdO7+)VO#NlQdO7+)VO#NlQdO7+)VO#NtQdO7+)VO$ UQdO7+(|O8vQdO7+(|OOQSAN>VAN>VO$ oQdO<<LmOOQSAN>cAN>cO0rQdO1G1|O$!PQtO1G1|P$!ZQdO'#FvOOQS1G2R1G2RP$!hQdO'#F{O$!uQdO7+)jO$#`QdO,5>gOOOO-E9z-E9zOOOW<<MT<<MTO$#nQdO7+(fOOQSAN?[AN?[OOQS7+'t7+'tO$$XQdO<<M[OOQS,5<q,5<qO$$jQdO1G4XOOQS-E:T-E:TOOQVAN?lAN?lOOQV1G2_1G2_O4iQdOAN?qO$$xQgOAN?qOOQVAN?xAN?xO4iQdOAN?xOOQV<<JR<<JRO4iQdOAN?rO4iQdO7+'{OOQV7+'{7+'{O1XQdO7+'{OOQVAN?rAN?rOOQS7+'|7+'|O$(sQdO<<MbOOQS1G4^1G4^O0rQdO1G4^OOQS,5<w,5<wO$)QQdO1G4]OOQS-E:Z-E:ZOOQU'#G_'#G_O$)cQfO7+'OO$)nQdO'#F_O$*uQdO7+'jO$+VQdO7+'jOOQS7+'j7+'jO$+bQdO<<LqO$+rQdO<<LqO$+rQdO<<LqO$+zQdO'#H^OOQS<<Lh<<LhO$,UQdO<<LhOOQS7+'h7+'hOOQS'#D|'#D|OOOO1G4R1G4RO$,oQdO1G4RO$,wQdO1G4RP!=hQdO'#GVOOQVG25]G25]O4iQdOG25]OOQVG25dG25dOOQVG25^G25^OOQV<<Kg<<KgO4iQdO<<KgOOQS7+)x7+)xP$-SQdO'#G]OOQU-E:]-E:]OOQV<<Jj<<JjO$-vQtO'#FaOOQS'#Fc'#FcO$.WQdO'#FbO$.xQdO'#FbOOQS'#Fb'#FbO$.}QdO'#IYO$)nQdO'#FiO$)nQdO'#FiO$/fQdO'#FjO$)nQdO'#FkO$/mQdO'#IZOOQS'#IZ'#IZO$0[QdO,5;yOOQS<<KU<<KUO$0dQdO<<KUO$0tQdOANB]O$1UQdOANB]O$1^QdO'#H_OOQS'#H_'#H_O1sQdO'#DcO$1wQdO,5=xOOQSANBSANBSOOOO7+)m7+)mO$2`QdO7+)mOOQVLD*wLD*wOOQVANARANARO5uQ!fO'#GaO$2hQtO,5<SO$)nQdO'#FmOOQS,5<W,5<WOOQS'#Fd'#FdO$3YQdO,5;|O$3_QdO,5;|OOQS'#Fg'#FgO$)nQdO'#G`O$4PQdO,5<QO$4kQdO,5>tO$4{QdO,5>tO1XQdO,5<PO$5^QdO,5<TO$5cQdO,5<TO$)nQdO'#I[O$5hQdO'#I[O$5mQdO,5<UOOQS,5<V,5<VO0rQdO'#FpOOQU1G1e1G1eO4iQdO1G1eOOQSAN@pAN@pO$5rQdOG27wO$6SQdO,59}OOQS1G3d1G3dOOOO<<MX<<MXOOQS,5<{,5<{OOQS-E:_-E:_O$6XQtO'#FaO$6`QdO'#I]O$6nQdO'#I]O$6vQdO,5<XOOQS1G1h1G1hO$6{QdO1G1hO$7QQdO,5<zOOQS-E:^-E:^O$7lQdO,5=OO$8TQdO1G4`OOQS-E:b-E:bOOQS1G1k1G1kOOQS1G1o1G1oO$8eQdO,5>vO$)nQdO,5>vOOQS1G1p1G1pOOQS,5<[,5<[OOQU7+'P7+'PO$+zQdO1G/iO$)nQdO,5<YO$8sQdO,5>wO$8zQdO,5>wOOQS1G1s1G1sOOQS7+'S7+'SP$)nQdO'#GdO$9SQdO1G4bO$9^QdO1G4bO$9fQdO1G4bOOQS7+%T7+%TO$9tQdO1G1tO$:SQtO'#FaO$:ZQdO,5<}OOQS,5<},5<}O$:iQdO1G4cOOQS-E:a-E:aO$)nQdO,5<|O$:pQdO,5<|O$:uQdO7+)|OOQS-E:`-E:`O$;PQdO7+)|O$)nQdO,5<ZP$)nQdO'#GcO$;XQdO1G2hO$)nQdO1G2hP$;gQdO'#GbO$;nQdO<<MhO$;xQdO1G1uO$<WQdO7+(SO8vQdO'#C}O8vQdO,59bO8vQdO,59bO8vQdO,59bO$<fQtO,5=`O8vQdO1G.|O0rQdO1G/XO0rQdO7+$pP$<yQdO'#GOO'vQdO'#GtO$=WQdO,59bO$=]QdO,59bO$=dQdO,59mO$=iQdO1G/UO1sQdO'#DRO8vQdO,59j",
      stateData: "$>S~O%cOS%^OSSOS%]PQ~OPdOVaOfoOhYOopOs!POvqO!PrO!Q{O!T!SO!U!RO!XZO!][O!h`O!r`O!s`O!t`O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#l!QO#o!TO#s!UO#u!VO#z!WO#}hO$P!XO%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~O%]!YO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%j![O%k!]O%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aO~Ok%xXl%xXm%xXn%xXo%xXp%xXs%xXz%xX{%xX!x%xX#g%xX%[%xX%_%xX%z%xXg%xX!T%xX!U%xX%{%xX!W%xX![%xX!Q%xX#[%xXt%xX!m%xX~P%SOfoOhYO!XZO!][O!h`O!r`O!s`O!t`O%oRO%pRO%tSO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O~Oz%wX{%wX#g%wX%[%wX%_%wX%z%wX~Ok!pOl!qOm!oOn!oOo!rOp!sOs!tO!x%wX~P)pOV!zOg!|Oo0cOv0qO!PrO~P'vOV#OOo0cOv0qO!W#PO~P'vOV#SOa#TOo0cOv0qO![#UO~P'vOQ#XO%`#XO%a#ZO~OQ#^OR#[O%`#^O%a#`O~OV%iX_%iXa%iXh%iXk%iXl%iXm%iXn%iXo%iXp%iXs%iXz%iX!X%iX!f%iX%j%iX%k%iX%l%iX%m%iX%n%iX%o%iX%p%iX%q%iX%r%iX%s%iXg%iX!T%iX!U%iX~O&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O&c^O&d^O&e^O&f^O&g^O&h^O&i^O&j^O{%iX!x%iX#g%iX%[%iX%_%iX%z%iX%{%iX!W%iX![%iX!Q%iX#[%iXt%iX!m%iX~P,eOz#dO{%hX!x%hX#g%hX%[%hX%_%hX%z%hX~Oo0cOv0qO~P'vO#g#gO%[#iO%_#iO~O%uWO~O!T#nO#u!VO#z!WO#}hO~OopO~P'vOV#sOa#tO%uWO{wP~OV#xOo0cOv0qO!Q#yO~P'vO{#{O!x$QO%z#|O#g!yX%[!yX%_!yX~OV#xOo0cOv0qO#g#SX%[#SX%_#SX~P'vOo0cOv0qO#g#WX%[#WX%_#WX~P'vOh$WO%uWO~O!f$YO!r$YO%uWO~OV$eO~P'vO!U$gO#s$hO#u$iO~O{$jO~OV$qO~P'vOS$sO%[$rO%_$rO%c$tO~OV$}Oa$}Og%POo0cOv0qO~P'vOo0cOv0qO{%SO~P'vO&Y%UO~Oa!bOh!iO!X!kO!f!mOVba_bakbalbambanbaobapbasbazba{ba!xba#gba%[ba%_ba%jba%kba%lba%mba%nba%oba%pba%qba%rba%sba%zbagba!Tba!Uba%{ba!Wba![ba!Qba#[batba!mba~On%ZO~Oo%ZO~P'vOo0cO~P'vOk0eOl0fOm0dOn0dOo0mOp0nOs0rOg%wX!T%wX!U%wX%{%wX!W%wX![%wX!Q%wX#[%wX!m%wX~P)pO%{%]Og%vXz%vX!T%vX!U%vX!W%vX{%vX~Og%_Oz%`O!T%dO!U%cO~Og%_O~Oz%gO!T%dO!U%cO!W&SX~O!W%kO~Oz%lO{%nO!T%dO!U%cO![%}X~O![%rO~O![%sO~OQ#XO%`#XO%a%uO~OV%wOo0cOv0qO!PrO~P'vOQ#^OR#[O%`#^O%a%zO~OV!qa_!qaa!qah!qak!qal!qam!qan!qao!qap!qas!qaz!qa{!qa!X!qa!f!qa!x!qa#g!qa%[!qa%_!qa%j!qa%k!qa%l!qa%m!qa%n!qa%o!qa%p!qa%q!qa%r!qa%s!qa%z!qag!qa!T!qa!U!qa%{!qa!W!qa![!qa!Q!qa#[!qat!qa!m!qa~P#yOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P%SOV&OOopOvqO{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~P'vOz%|O{%ha!x%ha#g%ha%[%ha%_%ha%z%ha~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO#g$zX%[$zX%_$zX~P'vO#g#gO%[&TO%_&TO~O!f&UOh&sX%[&sXz&sX#[&sX#g&sX%_&sX#Z&sXg&sX~Oh!iO%[&WO~Okealeameaneaoeapeaseazea{ea!xea#gea%[ea%_ea%zeagea!Tea!Uea%{ea!Wea![ea!Qea#[eatea!mea~P%SOsqazqa{qa#gqa%[qa%_qa%zqa~Ok!pOl!qOm!oOn!oOo!rOp!sO!xqa~PEcO%z&YOz%yX{%yX~O%uWOz%yX{%yX~Oz&]O{wX~O{&_O~Oz%lO#g%}X%[%}X%_%}Xg%}X{%}X![%}X!m%}X%z%}X~OV0lOo0cOv0qO!PrO~P'vO%z#|O#gUa%[Ua%_Ua~Oz&hO#g&PX%[&PX%_&PXn&PX~P%SOz&kO!Q&jO#g#Wa%[#Wa%_#Wa~Oz&lO#[&nO#g&rX%[&rX%_&rXg&rX~O!f$YO!r$YO#Z&qO%uWO~O#Z&qO~Oz&sO#g&tX%[&tX%_&tX~Oz&uO#g&pX%[&pX%_&pX{&pX~O!X&wO%z&xO~Oz&|On&wX~P%SOn'PO~OPdOVaOopOvqO!PrO!Q{O!{tO!}uO#PvO#RwO#TxO#XyO#ZzO#^|O#_|O#a}O#c!OO%['UO~P'vOt'YO#p'WO#q'XOP#naV#naf#nah#nao#nas#nav#na!P#na!Q#na!T#na!U#na!X#na!]#na!h#na!r#na!s#na!t#na!{#na!}#na#P#na#R#na#T#na#X#na#Z#na#^#na#_#na#a#na#c#na#l#na#o#na#s#na#u#na#z#na#}#na$P#na%X#na%o#na%p#na%t#na%u#na&Z#na&[#na&]#na&^#na&_#na&`#na&a#na&b#na&c#na&d#na&e#na&f#na&g#na&h#na&i#na&j#na%Z#na%_#na~Oz'ZO#[']O{&xX~Oh'_O!X&wO~Oh!iO{$jO!X&wO~O{'eO~P%SO%['hO%_'hO~OS'iO%['hO%_'hO~OV!aO_!aOa!bOh!iO!X!kO!f!mO%l!^O%m!_O%n!_O%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%k!]O~P!#uO%kWi~P!#uOV!aO_!aOa!bOh!iO!X!kO!f!mO%o!`O%p!`O%q!aO%r!aO%s!aOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~O%m!_O%n!_O~P!&pO%mWi%nWi~P!&pOa!bOh!iO!X!kO!f!mOkWilWimWinWioWipWisWizWi{Wi!xWi#gWi%[Wi%_Wi%jWi%kWi%lWi%mWi%nWi%oWi%pWi%zWigWi!TWi!UWi%{Wi!WWi![Wi!QWi#[WitWi!mWi~OV!aO_!aO%q!aO%r!aO%s!aO~P!)nOVWi_Wi%qWi%rWi%sWi~P!)nO!T%dO!U%cOg&VXz&VX~O%z'kO%{'kO~P,eOz'mOg&UX~Og'oO~Oz'pO{'rO!W&XX~Oo0cOv0qOz'pO{'sO!W&XX~P'vO!W'uO~Om!oOn!oOo!rOp!sOkjisjizji{ji!xji#gji%[ji%_ji%zji~Ol!qO~P!.aOlji~P!.aOk0eOl0fOm0dOn0dOo0mOp0nO~Ot'wO~P!/jOV'|Og'}Oo0cOv0qO~P'vOg'}Oz(OO~Og(QO~O!U(SO~Og(TOz(OO!T%dO!U%cO~P%SOk0eOl0fOm0dOn0dOo0mOp0nOgqa!Tqa!Uqa%{qa!Wqa![qa!Qqa#[qatqa!mqa~PEcOV'|Oo0cOv0qO!W&Sa~P'vOz(WO!W&Sa~O!W(XO~Oz(WO!T%dO!U%cO!W&Sa~P%SOV(]Oo0cOv0qO![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~P'vOz(^O![%}a#g%}a%[%}a%_%}ag%}a{%}a!m%}a%z%}a~O![(aO~Oz(^O!T%dO!U%cO![%}a~P%SOz(dO!T%dO!U%cO![&Ta~P%SOz(gO{&lX![&lX!m&lX%z&lX~O{(kO![(mO!m(nO%z(jO~OV&OOopOvqO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~P'vOz(pO{%hi!x%hi#g%hi%[%hi%_%hi%z%hi~O!f&UOh&sa%[&saz&sa#[&sa#g&sa%_&sa#Z&sag&sa~O%[(uO~OV#sOa#tO%uWO~Oz&]O{wa~OopOvqO~P'vOz(^O#g%}a%[%}a%_%}ag%}a{%}a![%}a!m%}a%z%}a~P%SOz(zO#g%hX%[%hX%_%hX%z%hX~O%z#|O#gUi%[Ui%_Ui~O#g&Pa%[&Pa%_&Pan&Pa~P'vOz(}O#g&Pa%[&Pa%_&Pan&Pa~O%uWO#g&ra%[&ra%_&rag&ra~Oz)SO#g&ra%[&ra%_&rag&ra~Og)VO~OV)WOh$WO%uWO~O#Z)XO~O%uWO#g&ta%[&ta%_&ta~Oz)ZO#g&ta%[&ta%_&ta~Oo0cOv0qO#g&pa%[&pa%_&pa{&pa~P'vOz)^O#g&pa%[&pa%_&pa{&pa~OV)`Oa)`O%uWO~O%z)eO~Ot)hO#j)gOP#hiV#hif#hih#hio#his#hiv#hi!P#hi!Q#hi!T#hi!U#hi!X#hi!]#hi!h#hi!r#hi!s#hi!t#hi!{#hi!}#hi#P#hi#R#hi#T#hi#X#hi#Z#hi#^#hi#_#hi#a#hi#c#hi#l#hi#o#hi#s#hi#u#hi#z#hi#}#hi$P#hi%X#hi%o#hi%p#hi%t#hi%u#hi&Z#hi&[#hi&]#hi&^#hi&_#hi&`#hi&a#hi&b#hi&c#hi&d#hi&e#hi&f#hi&g#hi&h#hi&i#hi&j#hi%Z#hi%_#hi~Ot)iOP#kiV#kif#kih#kio#kis#kiv#ki!P#ki!Q#ki!T#ki!U#ki!X#ki!]#ki!h#ki!r#ki!s#ki!t#ki!{#ki!}#ki#P#ki#R#ki#T#ki#X#ki#Z#ki#^#ki#_#ki#a#ki#c#ki#l#ki#o#ki#s#ki#u#ki#z#ki#}#ki$P#ki%X#ki%o#ki%p#ki%t#ki%u#ki&Z#ki&[#ki&]#ki&^#ki&_#ki&`#ki&a#ki&b#ki&c#ki&d#ki&e#ki&f#ki&g#ki&h#ki&i#ki&j#ki%Z#ki%_#ki~OV)kOn&wa~P'vOz)lOn&wa~Oz)lOn&wa~P%SOn)pO~O%Y)tO~Ot)wO#p'WO#q)vOP#niV#nif#nih#nio#nis#niv#ni!P#ni!Q#ni!T#ni!U#ni!X#ni!]#ni!h#ni!r#ni!s#ni!t#ni!{#ni!}#ni#P#ni#R#ni#T#ni#X#ni#Z#ni#^#ni#_#ni#a#ni#c#ni#l#ni#o#ni#s#ni#u#ni#z#ni#}#ni$P#ni%X#ni%o#ni%p#ni%t#ni%u#ni&Z#ni&[#ni&]#ni&^#ni&_#ni&`#ni&a#ni&b#ni&c#ni&d#ni&e#ni&f#ni&g#ni&h#ni&i#ni&j#ni%Z#ni%_#ni~OV)zOo0cOv0qO{$jO~P'vOo0cOv0qO{&xa~P'vOz*OO{&xa~OV*SOa*TOg*WO%q*UO%uWO~O{$jO&{*YO~Oh'_O~Oh!iO{$jO~O%[*_O~O%[*aO%_*aO~OV$}Oa$}Oo0cOv0qOg&Ua~P'vOz*dOg&Ua~Oo0cOv0qO{*gO!W&Xa~P'vOz*hO!W&Xa~Oo0cOv0qOz*hO{*kO!W&Xa~P'vOo0cOv0qOz*hO!W&Xa~P'vOz*hO{*kO!W&Xa~Om0dOn0dOo0mOp0nOgjikjisjizji!Tji!Uji%{ji!Wji{ji![ji#gji%[ji%_ji!Qji#[jitji!mji%zji~Ol0fO~P!NkOlji~P!NkOV'|Og*pOo0cOv0qO~P'vOn*rO~Og*pOz*tO~Og*uO~OV'|Oo0cOv0qO!W&Si~P'vOz*vO!W&Si~O!W*wO~OV(]Oo0cOv0qO![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~P'vOz*zO!T%dO!U%cO![&Ti~Oz*}O![%}i#g%}i%[%}i%_%}ig%}i{%}i!m%}i%z%}i~O![+OO~Oa+QOo0cOv0qO![&Ti~P'vOz*zO![&Ti~O![+SO~OV+UOo0cOv0qO{&la![&la!m&la%z&la~P'vOz+VO{&la![&la!m&la%z&la~O!]+YO&n+[O![!nX~O![+^O~O{(kO![+_O~O{(kO![+_O!m+`O~OV&OOopOvqO{%hq!x%hq#g%hq%[%hq%_%hq%z%hq~P'vOz$ri{$ri!x$ri#g$ri%[$ri%_$ri%z$ri~P%SOV&OOopOvqO~P'vOV&OOo0cOv0qO#g%ha%[%ha%_%ha%z%ha~P'vOz+aO#g%ha%[%ha%_%ha%z%ha~Oz$ia#g$ia%[$ia%_$ian$ia~P%SO#g&Pi%[&Pi%_&Pin&Pi~P'vOz+dO#g#Wq%[#Wq%_#Wq~O#[+eOz$va#g$va%[$va%_$vag$va~O%uWO#g&ri%[&ri%_&rig&ri~Oz+gO#g&ri%[&ri%_&rig&ri~OV+iOh$WO%uWO~O%uWO#g&ti%[&ti%_&ti~Oo0cOv0qO#g&pi%[&pi%_&pi{&pi~P'vO{#{Oz#eX!W#eX~Oz+mO!W&uX~O!W+oO~Ot+rO#j)gOP#hqV#hqf#hqh#hqo#hqs#hqv#hq!P#hq!Q#hq!T#hq!U#hq!X#hq!]#hq!h#hq!r#hq!s#hq!t#hq!{#hq!}#hq#P#hq#R#hq#T#hq#X#hq#Z#hq#^#hq#_#hq#a#hq#c#hq#l#hq#o#hq#s#hq#u#hq#z#hq#}#hq$P#hq%X#hq%o#hq%p#hq%t#hq%u#hq&Z#hq&[#hq&]#hq&^#hq&_#hq&`#hq&a#hq&b#hq&c#hq&d#hq&e#hq&f#hq&g#hq&h#hq&i#hq&j#hq%Z#hq%_#hq~On$|az$|a~P%SOV)kOn&wi~P'vOz+yOn&wi~Oz,TO{$jO#[,TO~O#q,VOP#nqV#nqf#nqh#nqo#nqs#nqv#nq!P#nq!Q#nq!T#nq!U#nq!X#nq!]#nq!h#nq!r#nq!s#nq!t#nq!{#nq!}#nq#P#nq#R#nq#T#nq#X#nq#Z#nq#^#nq#_#nq#a#nq#c#nq#l#nq#o#nq#s#nq#u#nq#z#nq#}#nq$P#nq%X#nq%o#nq%p#nq%t#nq%u#nq&Z#nq&[#nq&]#nq&^#nq&_#nq&`#nq&a#nq&b#nq&c#nq&d#nq&e#nq&f#nq&g#nq&h#nq&i#nq&j#nq%Z#nq%_#nq~O#[,WOz%Oa{%Oa~Oo0cOv0qO{&xi~P'vOz,YO{&xi~O{#{O%z,[Og&zXz&zX~O%uWOg&zXz&zX~Oz,`Og&yX~Og,bO~O%Y,eO~O!T%dO!U%cOg&Viz&Vi~OV$}Oa$}Oo0cOv0qOg&Ui~P'vO{,hOz$la!W$la~Oo0cOv0qO{,iOz$la!W$la~P'vOo0cOv0qO{*gO!W&Xi~P'vOz,lO!W&Xi~Oo0cOv0qOz,lO!W&Xi~P'vOz,lO{,oO!W&Xi~Og$hiz$hi!W$hi~P%SOV'|Oo0cOv0qO~P'vOn,qO~OV'|Og,rOo0cOv0qO~P'vOV'|Oo0cOv0qO!W&Sq~P'vOz$gi![$gi#g$gi%[$gi%_$gig$gi{$gi!m$gi%z$gi~P%SOV(]Oo0cOv0qO~P'vOa+QOo0cOv0qO![&Tq~P'vOz,sO![&Tq~O![,tO~OV(]Oo0cOv0qO![%}q#g%}q%[%}q%_%}qg%}q{%}q!m%}q%z%}q~P'vO{,uO~OV+UOo0cOv0qO{&li![&li!m&li%z&li~P'vOz,zO{&li![&li!m&li%z&li~O!]+YO&n+[O![!na~O{(kO![,}O~OV&OOo0cOv0qO#g%hi%[%hi%_%hi%z%hi~P'vOz-OO#g%hi%[%hi%_%hi%z%hi~O%uWO#g&rq%[&rq%_&rqg&rq~Oz-RO#g&rq%[&rq%_&rqg&rq~OV)`Oa)`O%uWO!W&ua~Oz-TO!W&ua~On$|iz$|i~P%SOV)kO~P'vOV)kOn&wq~P'vOt-XOP#myV#myf#myh#myo#mys#myv#my!P#my!Q#my!T#my!U#my!X#my!]#my!h#my!r#my!s#my!t#my!{#my!}#my#P#my#R#my#T#my#X#my#Z#my#^#my#_#my#a#my#c#my#l#my#o#my#s#my#u#my#z#my#}#my$P#my%X#my%o#my%p#my%t#my%u#my&Z#my&[#my&]#my&^#my&_#my&`#my&a#my&b#my&c#my&d#my&e#my&f#my&g#my&h#my&i#my&j#my%Z#my%_#my~O%Z-]O%_-]O~P`O#q-^OP#nyV#nyf#nyh#nyo#nys#nyv#ny!P#ny!Q#ny!T#ny!U#ny!X#ny!]#ny!h#ny!r#ny!s#ny!t#ny!{#ny!}#ny#P#ny#R#ny#T#ny#X#ny#Z#ny#^#ny#_#ny#a#ny#c#ny#l#ny#o#ny#s#ny#u#ny#z#ny#}#ny$P#ny%X#ny%o#ny%p#ny%t#ny%u#ny&Z#ny&[#ny&]#ny&^#ny&_#ny&`#ny&a#ny&b#ny&c#ny&d#ny&e#ny&f#ny&g#ny&h#ny&i#ny&j#ny%Z#ny%_#ny~Oz-aO{$jO#[-aO~Oo0cOv0qO{&xq~P'vOz-dO{&xq~O%z,[Og&zaz&za~O{#{Og&zaz&za~OV*SOa*TO%q*UO%uWOg&ya~Oz-hOg&ya~O$S-lO~OV$}Oa$}Oo0cOv0qO~P'vOo0cOv0qO{-mOz$li!W$li~P'vOo0cOv0qOz$li!W$li~P'vO{-mOz$li!W$li~Oo0cOv0qO{*gO~P'vOo0cOv0qO{*gO!W&Xq~P'vOz-pO!W&Xq~Oo0cOv0qOz-pO!W&Xq~P'vOs-sO!T%dO!U%cOg&Oq!W&Oq![&Oqz&Oq~P!/jOa+QOo0cOv0qO![&Ty~P'vOz$ji![$ji~P%SOa+QOo0cOv0qO~P'vOV+UOo0cOv0qO~P'vOV+UOo0cOv0qO{&lq![&lq!m&lq%z&lq~P'vO{(kO![-xO!m-yO%z-wO~OV&OOo0cOv0qO#g%hq%[%hq%_%hq%z%hq~P'vO%uWO#g&ry%[&ry%_&ryg&ry~OV)`Oa)`O%uWO!W&ui~Ot-}OP#m!RV#m!Rf#m!Rh#m!Ro#m!Rs#m!Rv#m!R!P#m!R!Q#m!R!T#m!R!U#m!R!X#m!R!]#m!R!h#m!R!r#m!R!s#m!R!t#m!R!{#m!R!}#m!R#P#m!R#R#m!R#T#m!R#X#m!R#Z#m!R#^#m!R#_#m!R#a#m!R#c#m!R#l#m!R#o#m!R#s#m!R#u#m!R#z#m!R#}#m!R$P#m!R%X#m!R%o#m!R%p#m!R%t#m!R%u#m!R&Z#m!R&[#m!R&]#m!R&^#m!R&_#m!R&`#m!R&a#m!R&b#m!R&c#m!R&d#m!R&e#m!R&f#m!R&g#m!R&h#m!R&i#m!R&j#m!R%Z#m!R%_#m!R~Oo0cOv0qO{&xy~P'vOV*SOa*TO%q*UO%uWOg&yi~O$S-lO%Z.VO%_.VO~OV.aOh._O!X.^O!].`O!h.YO!s.[O!t.[O%p.XO%uWO&Z]O&[]O&]]O&^]O&_]O&`]O&a]O&b]O~Oo0cOv0qOz$lq!W$lq~P'vO{.fOz$lq!W$lq~Oo0cOv0qO{*gO!W&Xy~P'vOz.gO!W&Xy~Oo0cOv.kO~P'vOs-sO!T%dO!U%cOg&Oy!W&Oy![&Oyz&Oy~P!/jO{(kO![.nO~O{(kO![.nO!m.oO~OV*SOa*TO%q*UO%uWO~Oh.tO!f.rOz$TX#[$TX%j$TXg$TX~Os$TX{$TX!W$TX![$TX~P$-bO%o.vO%p.vOs$UXz$UX{$UX#[$UX%j$UX!W$UXg$UX![$UX~O!h.xO~Oz.|O#[/OO%j.yOs&|X{&|X!W&|Xg&|X~Oa/RO~P$)zOh.tOs&}Xz&}X{&}X#[&}X%j&}X!W&}Xg&}X![&}X~Os/VO{$jO~Oo0cOv0qOz$ly!W$ly~P'vOo0cOv0qO{*gO!W&X!R~P'vOz/ZO!W&X!R~Og&RXs&RX!T&RX!U&RX!W&RX![&RXz&RX~P!/jOs-sO!T%dO!U%cOg&Qa!W&Qa![&Qaz&Qa~O{(kO![/^O~O!f.rOh$[as$[az$[a{$[a#[$[a%j$[a!W$[ag$[a![$[a~O!h/eO~O%o.vO%p.vOs$Uaz$Ua{$Ua#[$Ua%j$Ua!W$Uag$Ua![$Ua~O%j.yOs$Yaz$Ya{$Ya#[$Ya!W$Yag$Ya![$Ya~Os&|a{&|a!W&|ag&|a~P$)nOz/jOs&|a{&|a!W&|ag&|a~O!W/mO~Og/mO~O{/oO~O![/pO~Oo0cOv0qO{*gO!W&X!Z~P'vO{/sO~O%z/tO~P$-bOz/uO#[/OO%j.yOg'PX~Oz/uOg'PX~Og/wO~O!h/xO~O#[/OOs%Saz%Sa{%Sa%j%Sa!W%Sag%Sa![%Sa~O#[/OO%j.yOs%Waz%Wa{%Wa!W%Wag%Wa~Os&|i{&|i!W&|ig&|i~P$)nOz/zO#[/OO%j.yO!['Oa~Og'Pa~P$)nOz0SOg'Pa~Oa0UO!['Oi~P$)zOz0WO!['Oi~Oz0WO#[/OO%j.yO!['Oi~O#[/OO%j.yOg$biz$bi~O%z0ZO~P$-bO#[/OO%j.yOg%Vaz%Va~Og'Pi~P$)nO{0^O~Oa0UO!['Oq~P$)zOz0`O!['Oq~O#[/OO%j.yOz%Ui![%Ui~Oa0UO~P$)zOa0UO!['Oy~P$)zO#[/OO%j.yOg$ciz$ci~O#[/OO%j.yOz%Uq![%Uq~Oz+aO#g%ha%[%ha%_%ha%z%ha~P%SOV&OOo0cOv0qO~P'vOn0hO~Oo0hO~P'vO{0iO~Ot0jO~P!/jO&]&Z&j&h&i&g&f&d&e&c&b&`&a&_&^&[%u~",
      goto: "!=j'QPPPPPP'RP'Z*s+[+t,_,y-fP.SP'Z.r.r'ZPPP'Z2[PPPPPP2[5PPP5PP7b7k=sPP=v>h>kPP'Z'ZPP>zPP'Z'ZPP'Z'Z'Z'Z'Z?O?w'ZP?zP@QDXGuGyPG|HWH['ZPPPH_Hk'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RP'RPHqH}IVPI^IdPI^PI^I^PPPI^PKrPK{LVL]KrPI^LfPI^PLmLsPLwM]MzNeLwLwNkNxLwLwLwLw! ^! d! g! l! o! y!!P!!]!!o!!u!#P!#V!#s!#y!$P!$Z!$a!$g!$y!%T!%Z!%a!%k!%q!%w!%}!&T!&Z!&e!&k!&u!&{!'U!'[!'k!'s!'}!(UPPPPPPPPPPP!([!(_!(e!(n!(x!)TPPPPPPPPPPPP!-u!/Z!3^!6oPP!6w!7W!7a!8Y!8P!8c!8i!8l!8o!8r!8z!9jPPPPPPPPPPPPPPPPP!9m!9q!9wP!:]!:a!:m!:v!;S!;j!;m!;p!;v!;|!<S!<VP!<_!<h!=d!=g]eOn#g$j)t,P'}`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r{!cQ#c#p$R$d$p%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g}!dQ#c#p$R$d$p$u%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!P!eQ#c#p$R$d$p$u$v%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!R!fQ#c#p$R$d$p$u$v$w%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!T!gQ#c#p$R$d$p$u$v$w$x%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!V!hQ#c#p$R$d$p$u$v$w$x$y%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g!Z!hQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0g'}TOTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0r&eVOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0r%oXOYZ[dnrxy}!P!Q!U!i!k#[#d#g#y#{#}$Q$h$j$}%S%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#vqQ/[.kR0o0q't`OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rh#jhz{$W$Z&l&q)S)X+f+g-RW#rq&].k0qQ$]|Q$a!OQ$n!VQ$o!WW$|!i'm*d,gS&[#s#tQ'S$iQ(s&UQ)U&nU)Y&s)Z+jW)a&w+m-T-{Q*Q']W*R'_,`-h.TQ+l)`S,_*S*TQ-Q+eQ-_,TQ-c,WQ.R-al.W-l.^._.a.z.|/R/j/o/t/y0U0Z0^Q/S.`Q/a.tQ/l/OU0P/u0S0[X0V/z0W0_0`R&Z#r!_!wYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZR%^!vQ!{YQ%x#[Q&d#}Q&g$QR,{+YT.j-s/s!Y!jQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gQ&X#kQ'c$oR*^'dR'l$|Q%V!mR/_.r'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rS#a_#b!P.[-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`'|_OTYZ[adnoprtxy}!P!Q!R!U!X!c!d!e!f!g!h!i!k!o!p!q!s!t!z#O#S#T#[#d#g#x#y#{#}$Q$e$g$h$j$q$}%S%Z%^%`%c%g%l%n%w%|&O&Z&_&h&j&k&u&x&|'P'W'Z'l'm'p'r's'w'|(O(S(W(](^(d(g(p(r(z(})^)e)g)k)l)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+Q+U+V+Y+a+c+d+k+x+y,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0l0n0rT#a_#bT#^^#_R(o%xa(l%x(n(o+`,{-y-z.oT+[(k+]R-z,{Q$PsQ+l)aQ,^*RR-e,_X#}s$O$P&fQ&y$aQ'a$nQ'd$oR)s'SQ)b&wV-S+m-T-{ZgOn$j)t,PXkOn)t,PQ$k!TQ&z$bQ&{$cQ'^$mQ'b$oQ)q'RQ)x'WQ){'XQ)|'YQ*Z'`S*]'c'dQ+s)gQ+u)hQ+v)iQ+z)oS+|)r*[Q,Q)vQ,R)wS,S)y)zQ,d*^Q-V+rQ-W+tQ-Y+{S-Z+},OQ-`,UQ-b,VQ-|-XQ.O-[Q.P-^Q.Q-_Q.p-}Q.q.RQ/W.dR/r/XWkOn)t,PR#mjQ'`$nS)r'S'aR,O)sQ,]*RR-f,^Q*['`Q+})rR-[,OZiOjn)t,PQ'f$pR*`'gT-j,e-ku.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^t.c-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^Q/S.`X0V/z0W0_0`!P.Z-l.^._.`.a.t.z.|/R/j/o/t/u/y/z0S0U0W0Z0[0^0_0`Q.w.YR/f.xg.z.].{/b/i/n/|0O0Q0]0a0bu.b-l.^._.a.t.z.|/R/j/o/t/u/y0S0U0Z0[0^X.u.W.b/a0PR/c.tV0R/u0S0[R/X.dQnOS#on,PR,P)tQ&^#uR(x&^S%m#R#wS(_%m(bT(b%p&`Q%a!yQ%h!}W(P%a%h(U(YQ(U%eR(Y%jQ&i$RR)O&iQ(e%qQ*{(`T+R(e*{Q'n%OR*e'nS'q%R%SY*i'q*j,m-q.hU*j'r's'tU,m*k*l*mS-q,n,oR.h-rQ#Y]R%t#YQ#_^R%y#_Q(h%vS+W(h+XR+X(iQ+](kR,|+]Q#b_R%{#bQ#ebQ%}#cW&Q#e%}({+bQ({&cR+b0gQ$OsS&e$O&fR&f$PQ&v$_R)_&vQ&V#jR(t&VQ&m$VS)T&m+hR+h)UQ$Z{R&p$ZQ&t$]R)[&tQ+n)bR-U+nQ#hfR&S#hQ)f&zR+q)fQ&}$dS)m&})nR)n'OQ'V$kR)u'VQ'[$lS*P'[,ZR,Z*QQ,a*VR-i,aWjOn)t,PR#ljQ-k,eR.U-kd.{.]/b/i/n/|0O0Q0]0a0bR/h.{U.s.W/a0PR/`.sQ/{/nS0X/{0YR0Y/|S/v/b/cR0T/vQ.}.]R/k.}R!ZPXmOn)t,PWlOn)t,PR'T$jYfOn$j)t,PR&R#g[sOn#g$j)t,PR&d#}&dQOYZ[dnprxy}!P!Q!U!i!k!o!p!q!s!t#[#d#g#y#{#}$Q$h$j$}%S%Z%^%`%g%l%n%w%|&Z&_&j&k&u&x'P'W'Z'l'm'p'r's'w(O(W(^(d(g(p(r(z)^)e)g)p)t)z*O*Y*d*g*h*k*q*r*t*v*y*z*}+U+V+Y+a+d+k,P,X,Y,],g,h,i,k,l,o,q,s,u,w,y,z-O-d-f-m-p-s.f.g/V/Z/s0c0d0e0f0h0i0j0k0n0rQ!nTQ#caQ#poU$Rt%c(SS$d!R$gQ$p!XQ$u!cQ$v!dQ$w!eQ$x!fQ$y!gQ$z!hQ%e!zQ%j#OQ%p#SQ%q#TQ&`#xQ'O$eQ'g$qQ(q&OU(|&h(}+cW)j&|)l+x+yQ*o'|Q*x(]Q+w)kQ,v+QR0g0lQ!yYQ!}ZQ$b!PQ$c!QQ%R!kQ't%S^'{%`%g(O(W*q*t*v^*f'p*h,k,l-p.g/ZQ*l'rQ*m'sQ+t)gQ,j*gQ,n*kQ-n,hQ-o,iQ-r,oQ.e-mR/Y.f[bOn#g$j)t,P!^!vYZ!P!Q!k%S%`%g'p'r's(O(W)g*g*h*k*q*t*v,h,i,k,l,o-m-p.f.g/ZQ#R[Q#fdS#wrxQ$UyW$_}$Q'P)pS$l!U$hW${!i'm*d,gS%v#[+Y`&P#d%|(p(r(z+a-O0kQ&a#yQ&b#{Q&c#}Q'j$}Q'z%^W([%l(^*y*}Q(`%nQ(i%wQ(v&ZS(y&_0iQ)P&jQ)Q&kU)]&u)^+kQ)d&xQ)y'WY)}'Z*O,X,Y-dQ*b'lS*n'w0jW+P(d*z,s,wW+T(g+V,y,zQ+p)eQ,U)zQ,c*YQ,x+UQ-P+dQ-e,]Q-v,uQ.S-fR/q/VhUOn#d#g$j%|&_'w(p(r)t,P%U!uYZ[drxy}!P!Q!U!i!k#[#y#{#}$Q$h$}%S%^%`%g%l%n%w&Z&j&k&u&x'P'W'Z'l'm'p'r's(O(W(^(d(g(z)^)e)g)p)z*O*Y*d*g*h*k*q*t*v*y*z*}+U+V+Y+a+d+k,X,Y,],g,h,i,k,l,o,s,u,w,y,z-O-d-f-m-p.f.g/V/Z0i0j0kQ#qpW%W!o!s0d0nQ%X!pQ%Y!qQ%[!tQ%f0cS'v%Z0hQ'x0eQ'y0fQ,p*rQ-u,qS.i-s/sR0p0rU#uq.k0qR(w&][cOn#g$j)t,PZ!xY#[#}$Q+YQ#W[Q#zrR$TxQ%b!yQ%i!}Q%o#RQ'j${Q(V%eQ(Z%jQ(c%pQ(f%qQ*|(`Q,f*bQ-t,pQ.m-uR/].lQ$StQ(R%cR*s(SQ.l-sR/}/sR#QZR#V[R%Q!iQ%O!iV*c'm*d,g!Z!lQ!n#c#p$R$d$p$u$v$w$x$y$z%e%j%p%q&`'O'g(q(|)j*o*x+w,v0gR%T!kT#]^#_Q%x#[R,{+YQ(m%xS+_(n(oQ,}+`Q-x,{S.n-y-zR/^.oT+Z(k+]Q$`}Q&g$QQ)o'PR+{)pQ$XzQ)W&qR+i)XQ$XzQ&o$WQ)W&qR+i)XQ#khW$Vz$W&q)XQ$[{Q&r$ZZ)R&l)S+f+g-RR$^|R)c&wXlOn)t,PQ$f!RR'Q$gQ$m!UR'R$hR*X'_Q*V'_V-g,`-h.TQ.d-lQ/P.^R/Q._U.]-l.^._Q/U.aQ/b.tQ/g.zU/i.|/j/yQ/n/RQ/|/oQ0O/tU0Q/u0S0[Q0]0UQ0a0ZR0b0^R/T.`R/d.t",
      nodeNames: "\u26A0 print Escape { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatSelfDoc FormatConversion FormatSpec FormatReplacement FormatSelfDoc ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert TypeDefinition type TypeParamList TypeParam StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
      maxTerm: 277,
      context: trackIndent,
      nodeProps: [
        ["isolate", -5, 4, 71, 72, 73, 77, ""],
        ["group", -15, 6, 85, 87, 88, 90, 92, 94, 96, 98, 99, 100, 102, 105, 108, 110, "Statement Statement", -22, 8, 18, 21, 25, 40, 49, 50, 56, 57, 60, 61, 62, 63, 64, 67, 70, 71, 72, 79, 80, 81, 82, "Expression", -10, 114, 116, 119, 121, 122, 126, 128, 133, 135, 138, "Statement", -9, 143, 144, 147, 148, 150, 151, 152, 153, 154, "Pattern"],
        ["openedBy", 23, "(", 54, "[", 58, "{"],
        ["closedBy", 24, ")", 55, "]", 59, "}"]
      ],
      propSources: [pythonHighlighting],
      skippedNodes: [0, 4],
      repeatNodeCount: 34,
      tokenData: "!2|~R!`OX%TXY%oY[%T[]%o]p%Tpq%oqr'ars)Yst*xtu%Tuv,dvw-hwx.Uxy/tyz0[z{0r{|2S|}2p}!O3W!O!P4_!P!Q:Z!Q!R;k!R![>_![!]Do!]!^Es!^!_FZ!_!`Gk!`!aHX!a!b%T!b!cIf!c!dJU!d!eK^!e!hJU!h!i!#f!i!tJU!t!u!,|!u!wJU!w!x!.t!x!}JU!}#O!0S#O#P&o#P#Q!0j#Q#R!1Q#R#SJU#S#T%T#T#UJU#U#VK^#V#YJU#Y#Z!#f#Z#fJU#f#g!,|#g#iJU#i#j!.t#j#oJU#o#p!1n#p#q!1s#q#r!2a#r#s!2f#s$g%T$g;'SJU;'S;=`KW<%lOJU`%YT&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T`%lP;=`<%l%To%v]&n`%c_OX%TXY%oY[%T[]%o]p%Tpq%oq#O%T#O#P&o#P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To&tX&n`OY%TYZ%oZ]%T]^%o^#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc'f[&n`O!_%T!_!`([!`#T%T#T#U(r#U#f%T#f#g(r#g#h(r#h#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(cTmR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc(yT!mR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk)aV&n`&[ZOr%Trs)vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk){V&n`Or%Trs*bs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk*iT&n`&^ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To+PZS_&n`OY*xYZ%TZ]*x]^%T^#o*x#o#p+r#p#q*x#q#r+r#r;'S*x;'S;=`,^<%lO*x_+wTS_OY+rZ]+r^;'S+r;'S;=`,W<%lO+r_,ZP;=`<%l+ro,aP;=`<%l*xj,kV%rQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-XT!xY&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj-oV%lQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.]V&n`&ZZOw%Twx.rx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk.wV&n`Ow%Twx/^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/eT&n`&]ZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk/{ThZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc0cTgR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk0yXVZ&n`Oz%Tz{1f{!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk1mVaR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk2ZV%oZ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc2wTzR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To3_W%pZ&n`O!_%T!_!`-Q!`!a3w!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Td4OT&{S&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk4fX!fQ&n`O!O%T!O!P5R!P!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5WV&n`O!O%T!O!P5m!P#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk5tT!rZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti6[a!hX&n`O!Q%T!Q![6T![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S6T#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti7fZ&n`O{%T{|8X|}%T}!O8X!O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8^V&n`O!Q%T!Q![8s![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti8z]!hX&n`O!Q%T!Q![8s![!l%T!l!m9s!m#R%T#R#S8s#S#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti9zT!hX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk:bX%qR&n`O!P%T!P!Q:}!Q!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj;UV%sQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti;ro!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!d%T!d!e?q!e!g%T!g!h7a!h!l%T!l!m9s!m!q%T!q!rA]!r!z%T!z!{Bq!{#R%T#R#S>_#S#U%T#U#V?q#V#X%T#X#Y7a#Y#^%T#^#_9s#_#c%T#c#dA]#d#l%T#l#mBq#m#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti=xV&n`O!Q%T!Q![6T![#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti>fc!hX&n`O!O%T!O!P=s!P!Q%T!Q![>_![!g%T!g!h7a!h!l%T!l!m9s!m#R%T#R#S>_#S#X%T#X#Y7a#Y#^%T#^#_9s#_#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti?vY&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Ti@mY!hX&n`O!Q%T!Q!R@f!R!S@f!S#R%T#R#S@f#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiAbX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBUX!hX&n`O!Q%T!Q!YA}!Y#R%T#R#SA}#S#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiBv]&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TiCv]!hX&n`O!Q%T!Q![Co![!c%T!c!iCo!i#R%T#R#SCo#S#T%T#T#ZCo#Z#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToDvV{_&n`O!_%T!_!`E]!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TcEdT%{R&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkEzT#gZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkFbXmR&n`O!^%T!^!_F}!_!`([!`!a([!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjGUV%mQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkGrV%zZ&n`O!_%T!_!`([!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkH`WmR&n`O!_%T!_!`([!`!aHx!a#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TjIPV%nQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkIoV_Q#}P&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%ToJ_]&n`&YS%uZO!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoKZP;=`<%lJUoKge&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!tJU!t!uLx!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#gLx#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUoMRa&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUkN_V&n`&`ZOr%TrsNts#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%TkNyV&n`Or%Trs! `s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! gT&n`&bZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk! }V&n`&_ZOw%Twx!!dx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!!iV&n`Ow%Twx!#Ox#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!#VT&n`&aZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!#oe&n`&YS%uZOr%Trs!%Qsw%Twx!&px!Q%T!Q![JU![!c%T!c!tJU!t!u!(`!u!}JU!}#R%T#R#SJU#S#T%T#T#fJU#f#g!(`#g#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!%XV&n`&dZOr%Trs!%ns#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!%sV&n`Or%Trs!&Ys#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&aT&n`&fZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!&wV&n`&cZOw%Twx!'^x#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!'cV&n`Ow%Twx!'xx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!(PT&n`&eZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!(ia&n`&YS%uZOr%Trs!)nsw%Twx!+^x!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!)uV&n`&hZOr%Trs!*[s#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*aV&n`Or%Trs!*vs#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!*}T&n`&jZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!+eV&n`&gZOw%Twx!+zx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,PV&n`Ow%Twx!,fx#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tk!,mT&n`&iZO#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%To!-Vi&n`&YS%uZOr%TrsNWsw%Twx! vx!Q%T!Q![JU![!c%T!c!dJU!d!eLx!e!hJU!h!i!(`!i!}JU!}#R%T#R#SJU#S#T%T#T#UJU#U#VLx#V#YJU#Y#Z!(`#Z#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUo!.}a&n`&YS%uZOr%Trs)Ysw%Twx.Ux!Q%T!Q![JU![!c%T!c!}JU!}#R%T#R#SJU#S#T%T#T#oJU#p#q%T#r$g%T$g;'SJU;'S;=`KW<%lOJUk!0ZT!XZ&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tc!0qT!WR&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%Tj!1XV%kQ&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!1sO!]~k!1zV%jR&n`O!_%T!_!`-Q!`#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T~!2fO![~i!2mT%tX&n`O#o%T#p#q%T#r;'S%T;'S;=`%i<%lO%T",
      tokenizers: [legacyPrint, indentation, newlines, strings, 0, 1, 2, 3, 4],
      topRules: { "Script": [0, 5] },
      specialized: [{ term: 221, get: (value) => spec_identifier8[value] || -1 }],
      tokenPrec: 7668
    });
  }
});

// ../../node_modules/@codemirror/lang-python/dist/index.js
var dist_exports13 = {};
__export(dist_exports13, {
  globalCompletion: () => globalCompletion,
  localCompletionSource: () => localCompletionSource3,
  python: () => python,
  pythonLanguage: () => pythonLanguage
});
function defID2(type7) {
  return (node, def, outer) => {
    if (outer)
      return false;
    let id3 = node.node.getChild("VariableName");
    if (id3)
      def(id3, type7);
    return true;
  };
}
function getScope3(doc2, node) {
  let cached = cache3.get(node);
  if (cached)
    return cached;
  let completions3 = [], top3 = true;
  function def(node2, type7) {
    let name2 = doc2.sliceString(node2.from, node2.to);
    completions3.push({ label: name2, type: type7 });
  }
  node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
    if (node2.name) {
      let gather = gatherCompletions3[node2.name];
      if (gather && gather(node2, def, top3) || !top3 && ScopeNodes3.has(node2.name))
        return false;
      top3 = false;
    } else if (node2.to - node2.from > 8192) {
      for (let c2 of getScope3(doc2, node2.node))
        completions3.push(c2);
      return false;
    }
  });
  cache3.set(node, completions3);
  return completions3;
}
function localCompletionSource3(context) {
  let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
  if (dontComplete3.indexOf(inner.name) > -1)
    return null;
  let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier4.test(context.state.sliceDoc(inner.from, inner.to));
  if (!isWord && !context.explicit)
    return null;
  let options = [];
  for (let pos = inner; pos; pos = pos.parent) {
    if (ScopeNodes3.has(pos.name))
      options = options.concat(getScope3(context.state.doc, pos));
  }
  return {
    options,
    from: isWord ? inner.from : context.pos,
    validFor: Identifier4
  };
}
function innerBody(context) {
  let { node, pos } = context;
  let lineIndent = context.lineIndent(pos, -1);
  let found = null;
  for (; ; ) {
    let before = node.childBefore(pos);
    if (!before) {
      break;
    } else if (before.name == "Comment") {
      pos = before.from;
    } else if (before.name == "Body" || before.name == "MatchBody") {
      if (context.baseIndentFor(before) + context.unit <= lineIndent)
        found = before;
      node = before;
    } else if (before.name == "MatchClause") {
      node = before;
    } else if (before.type.is("Statement")) {
      node = before;
    } else {
      break;
    }
  }
  return found;
}
function indentBody(context, node) {
  let base5 = context.baseIndentFor(node);
  let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
  if (/^\s*($|#)/.test(line.text) && context.node.to < to + 100 && !/\S/.test(context.state.sliceDoc(to, context.node.to)) && context.lineIndent(context.pos, -1) <= base5)
    return null;
  if (/^\s*(else:|elif |except |finally:|case\s+[^=:]+:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base5)
    return null;
  return base5 + context.unit;
}
function python() {
  return new LanguageSupport(pythonLanguage, [
    pythonLanguage.data.of({ autocomplete: localCompletionSource3 }),
    pythonLanguage.data.of({ autocomplete: globalCompletion })
  ]);
}
var cache3, ScopeNodes3, gatherCompletions3, Identifier4, dontComplete3, globals, snippets3, globalCompletion, pythonLanguage;
var init_dist29 = __esm({
  "../../node_modules/@codemirror/lang-python/dist/index.js"() {
    init_dist28();
    init_dist5();
    init_dist();
    init_dist7();
    cache3 = /* @__PURE__ */ new NodeWeakMap();
    ScopeNodes3 = /* @__PURE__ */ new Set([
      "Script",
      "Body",
      "FunctionDefinition",
      "ClassDefinition",
      "LambdaExpression",
      "ForStatement",
      "MatchClause"
    ]);
    gatherCompletions3 = {
      FunctionDefinition: /* @__PURE__ */ defID2("function"),
      ClassDefinition: /* @__PURE__ */ defID2("class"),
      ForStatement(node, def, outer) {
        if (outer)
          for (let child = node.node.firstChild; child; child = child.nextSibling) {
            if (child.name == "VariableName")
              def(child, "variable");
            else if (child.name == "in")
              break;
          }
      },
      ImportStatement(_node, def) {
        var _a2, _b2;
        let { node } = _node;
        let isFrom = ((_a2 = node.firstChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "from";
        for (let ch2 = node.getChild("import"); ch2; ch2 = ch2.nextSibling) {
          if (ch2.name == "VariableName" && ((_b2 = ch2.nextSibling) === null || _b2 === void 0 ? void 0 : _b2.name) != "as")
            def(ch2, isFrom ? "variable" : "namespace");
        }
      },
      AssignStatement(node, def) {
        for (let child = node.node.firstChild; child; child = child.nextSibling) {
          if (child.name == "VariableName")
            def(child, "variable");
          else if (child.name == ":" || child.name == "AssignOp")
            break;
        }
      },
      ParamList(node, def) {
        for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
          if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
            def(child, "variable");
          prev = child;
        }
      },
      CapturePattern: /* @__PURE__ */ defID2("variable"),
      AsPattern: /* @__PURE__ */ defID2("variable"),
      __proto__: null
    };
    Identifier4 = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
    dontComplete3 = ["String", "FormatString", "Comment", "PropertyName"];
    globals = /* @__PURE__ */ [
      "__annotations__",
      "__builtins__",
      "__debug__",
      "__doc__",
      "__import__",
      "__name__",
      "__loader__",
      "__package__",
      "__spec__",
      "False",
      "None",
      "True"
    ].map((n) => ({ label: n, type: "constant" })).concat(/* @__PURE__ */ [
      "ArithmeticError",
      "AssertionError",
      "AttributeError",
      "BaseException",
      "BlockingIOError",
      "BrokenPipeError",
      "BufferError",
      "BytesWarning",
      "ChildProcessError",
      "ConnectionAbortedError",
      "ConnectionError",
      "ConnectionRefusedError",
      "ConnectionResetError",
      "DeprecationWarning",
      "EOFError",
      "Ellipsis",
      "EncodingWarning",
      "EnvironmentError",
      "Exception",
      "FileExistsError",
      "FileNotFoundError",
      "FloatingPointError",
      "FutureWarning",
      "GeneratorExit",
      "IOError",
      "ImportError",
      "ImportWarning",
      "IndentationError",
      "IndexError",
      "InterruptedError",
      "IsADirectoryError",
      "KeyError",
      "KeyboardInterrupt",
      "LookupError",
      "MemoryError",
      "ModuleNotFoundError",
      "NameError",
      "NotADirectoryError",
      "NotImplemented",
      "NotImplementedError",
      "OSError",
      "OverflowError",
      "PendingDeprecationWarning",
      "PermissionError",
      "ProcessLookupError",
      "RecursionError",
      "ReferenceError",
      "ResourceWarning",
      "RuntimeError",
      "RuntimeWarning",
      "StopAsyncIteration",
      "StopIteration",
      "SyntaxError",
      "SyntaxWarning",
      "SystemError",
      "SystemExit",
      "TabError",
      "TimeoutError",
      "TypeError",
      "UnboundLocalError",
      "UnicodeDecodeError",
      "UnicodeEncodeError",
      "UnicodeError",
      "UnicodeTranslateError",
      "UnicodeWarning",
      "UserWarning",
      "ValueError",
      "Warning",
      "ZeroDivisionError"
    ].map((n) => ({ label: n, type: "type" }))).concat(/* @__PURE__ */ [
      "bool",
      "bytearray",
      "bytes",
      "classmethod",
      "complex",
      "float",
      "frozenset",
      "int",
      "list",
      "map",
      "memoryview",
      "object",
      "range",
      "set",
      "staticmethod",
      "str",
      "super",
      "tuple",
      "type"
    ].map((n) => ({ label: n, type: "class" }))).concat(/* @__PURE__ */ [
      "abs",
      "aiter",
      "all",
      "anext",
      "any",
      "ascii",
      "bin",
      "breakpoint",
      "callable",
      "chr",
      "compile",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "exit",
      "filter",
      "format",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "license",
      "locals",
      "max",
      "min",
      "next",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "quit",
      "repr",
      "reversed",
      "round",
      "setattr",
      "slice",
      "sorted",
      "sum",
      "vars",
      "zip"
    ].map((n) => ({ label: n, type: "function" })));
    snippets3 = [
      /* @__PURE__ */ snippetCompletion("def ${name}(${params}):\n	${}", {
        label: "def",
        detail: "function",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("for ${name} in ${collection}:\n	${}", {
        label: "for",
        detail: "loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("while ${}:\n	${}", {
        label: "while",
        detail: "loop",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("try:\n	${}\nexcept ${error}:\n	${}", {
        label: "try",
        detail: "/ except block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("if ${}:\n	\n", {
        label: "if",
        detail: "block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("if ${}:\n	${}\nelse:\n	${}", {
        label: "if",
        detail: "/ else block",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
        label: "class",
        detail: "definition",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("import ${module}", {
        label: "import",
        detail: "statement",
        type: "keyword"
      }),
      /* @__PURE__ */ snippetCompletion("from ${module} import ${names}", {
        label: "from",
        detail: "import",
        type: "keyword"
      })
    ];
    globalCompletion = /* @__PURE__ */ ifNotIn(dontComplete3, /* @__PURE__ */ completeFromList(/* @__PURE__ */ globals.concat(snippets3)));
    pythonLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "python",
      parser: /* @__PURE__ */ parser13.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Body: (context) => {
              var _a2;
              let inner = innerBody(context);
              return (_a2 = indentBody(context, inner || context.node)) !== null && _a2 !== void 0 ? _a2 : context.continue();
            },
            MatchBody: (context) => {
              var _a2;
              let inner = innerBody(context);
              return (_a2 = indentBody(context, inner || context.node)) !== null && _a2 !== void 0 ? _a2 : context.continue();
            },
            IfStatement: (cx2) => /^\s*(else:|elif )/.test(cx2.textAfter) ? cx2.baseIndent : cx2.continue(),
            "ForStatement WhileStatement": (cx2) => /^\s*else:/.test(cx2.textAfter) ? cx2.baseIndent : cx2.continue(),
            TryStatement: (cx2) => /^\s*(except |finally:|else:)/.test(cx2.textAfter) ? cx2.baseIndent : cx2.continue(),
            MatchStatement: (cx2) => {
              if (/^\s*case /.test(cx2.textAfter))
                return cx2.baseIndent + cx2.unit;
              return cx2.continue();
            },
            "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /* @__PURE__ */ delimitedIndent({ closing: ")" }),
            "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            "ArrayExpression ArrayComprehensionExpression": /* @__PURE__ */ delimitedIndent({ closing: "]" }),
            MemberExpression: (cx2) => cx2.baseIndent + cx2.unit,
            "String FormatString": () => null,
            Script: (context) => {
              var _a2;
              let inner = innerBody(context);
              return (_a2 = inner && indentBody(context, inner)) !== null && _a2 !== void 0 ? _a2 : context.continue();
            }
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "ArrayExpression DictionaryExpression SetExpression TupleExpression": foldInside,
            Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) }),
            "String FormatString": (node, state) => ({ from: state.doc.lineAt(node.from).to, to: node.to })
          })
        ]
      }),
      languageData: {
        closeBrackets: {
          brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
          stringPrefixes: [
            "f",
            "fr",
            "rf",
            "r",
            "u",
            "b",
            "br",
            "rb",
            "F",
            "FR",
            "RF",
            "R",
            "U",
            "B",
            "BR",
            "RB"
          ]
        },
        commentTokens: { line: "#" },
        // Indent logic logic are triggered upon below input patterns
        indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:|case\s+[^:]*:?)$/
      }
    });
  }
});

// ../../node_modules/@lezer/rust/dist/index.js
function isNum(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
function isNum_(ch2) {
  return isNum(ch2) || ch2 == 95;
}
var closureParamDelim, tpOpen, tpClose, RawString2, Float, _b, _e, _f, _r, _E, Zero2, Dot2, Plus, Minus, Hash, Quote2, Pipe, LessThan, GreaterThan2, literalTokens, closureParam, tpDelim, rustHighlighting, spec_identifier9, parser14;
var init_dist30 = __esm({
  "../../node_modules/@lezer/rust/dist/index.js"() {
    init_dist6();
    init_dist4();
    closureParamDelim = 1;
    tpOpen = 2;
    tpClose = 3;
    RawString2 = 4;
    Float = 5;
    _b = 98;
    _e = 101;
    _f = 102;
    _r = 114;
    _E = 69;
    Zero2 = 48;
    Dot2 = 46;
    Plus = 43;
    Minus = 45;
    Hash = 35;
    Quote2 = 34;
    Pipe = 124;
    LessThan = 60;
    GreaterThan2 = 62;
    literalTokens = new ExternalTokenizer((input, stack) => {
      if (isNum(input.next)) {
        let isFloat = false;
        do {
          input.advance();
        } while (isNum_(input.next));
        if (input.next == Dot2) {
          isFloat = true;
          input.advance();
          if (isNum(input.next)) {
            do {
              input.advance();
            } while (isNum_(input.next));
          } else if (input.next == Dot2 || input.next > 127 || /\w/.test(String.fromCharCode(input.next))) {
            return;
          }
        }
        if (input.next == _e || input.next == _E) {
          isFloat = true;
          input.advance();
          if (input.next == Plus || input.next == Minus) input.advance();
          if (!isNum_(input.next)) return;
          do {
            input.advance();
          } while (isNum_(input.next));
        }
        if (input.next == _f) {
          let after = input.peek(1);
          if (after == Zero2 + 3 && input.peek(2) == Zero2 + 2 || after == Zero2 + 6 && input.peek(2) == Zero2 + 4) {
            input.advance(3);
            isFloat = true;
          } else {
            return;
          }
        }
        if (isFloat) input.acceptToken(Float);
      } else if (input.next == _b || input.next == _r) {
        if (input.next == _b) input.advance();
        if (input.next != _r) return;
        input.advance();
        let count2 = 0;
        while (input.next == Hash) {
          count2++;
          input.advance();
        }
        if (input.next != Quote2) return;
        input.advance();
        content: for (; ; ) {
          if (input.next < 0) return;
          let isQuote = input.next == Quote2;
          input.advance();
          if (isQuote) {
            for (let i = 0; i < count2; i++) {
              if (input.next != Hash) continue content;
              input.advance();
            }
            input.acceptToken(RawString2);
            return;
          }
        }
      }
    });
    closureParam = new ExternalTokenizer((input) => {
      if (input.next == Pipe) input.acceptToken(closureParamDelim, 1);
    });
    tpDelim = new ExternalTokenizer((input) => {
      if (input.next == LessThan) input.acceptToken(tpOpen, 1);
      else if (input.next == GreaterThan2) input.acceptToken(tpClose, 1);
    });
    rustHighlighting = styleTags({
      "const macro_rules struct union enum type fn impl trait let static": tags.definitionKeyword,
      "mod use crate": tags.moduleKeyword,
      "pub unsafe async mut extern default move": tags.modifier,
      "for if else loop while match continue break return await": tags.controlKeyword,
      "as in ref": tags.operatorKeyword,
      "where _ crate super dyn": tags.keyword,
      "self": tags.self,
      String: tags.string,
      Char: tags.character,
      RawString: tags.special(tags.string),
      Boolean: tags.bool,
      Identifier: tags.variableName,
      "CallExpression/Identifier": tags.function(tags.variableName),
      BoundIdentifier: tags.definition(tags.variableName),
      "FunctionItem/BoundIdentifier": tags.function(tags.definition(tags.variableName)),
      LoopLabel: tags.labelName,
      FieldIdentifier: tags.propertyName,
      "CallExpression/FieldExpression/FieldIdentifier": tags.function(tags.propertyName),
      Lifetime: tags.special(tags.variableName),
      ScopeIdentifier: tags.namespace,
      TypeIdentifier: tags.typeName,
      "MacroInvocation/Identifier MacroInvocation/ScopedIdentifier/Identifier": tags.macroName,
      "MacroInvocation/TypeIdentifier MacroInvocation/ScopedIdentifier/TypeIdentifier": tags.macroName,
      '"!"': tags.macroName,
      UpdateOp: tags.updateOperator,
      LineComment: tags.lineComment,
      BlockComment: tags.blockComment,
      Integer: tags.integer,
      Float: tags.float,
      ArithOp: tags.arithmeticOperator,
      LogicOp: tags.logicOperator,
      BitOp: tags.bitwiseOperator,
      CompareOp: tags.compareOperator,
      "=": tags.definitionOperator,
      ".. ... => ->": tags.punctuation,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace,
      ". DerefOp": tags.derefOperator,
      "&": tags.operator,
      ", ; ::": tags.separator,
      "Attribute/...": tags.meta
    });
    spec_identifier9 = { __proto__: null, self: 28, super: 32, crate: 34, impl: 46, true: 72, false: 72, pub: 88, in: 92, const: 96, unsafe: 104, async: 108, move: 110, if: 114, let: 118, ref: 142, mut: 144, _: 198, else: 200, match: 204, as: 248, return: 252, await: 262, break: 270, continue: 276, while: 312, loop: 316, for: 320, macro_rules: 327, mod: 334, extern: 342, struct: 346, where: 364, union: 379, enum: 382, type: 390, default: 395, fn: 396, trait: 412, use: 420, static: 438, dyn: 476 };
    parser14 = LRParser.deserialize({
      version: 14,
      states: "$2xQ]Q_OOP$wOWOOO&sQWO'#CnO)WQWO'#I`OOQP'#I`'#I`OOQQ'#Ie'#IeO)hO`O'#C}OOQR'#Ih'#IhO)sQWO'#IuOOQO'#Hk'#HkO)xQWO'#DpOOQR'#Iw'#IwO)xQWO'#DpO*ZQWO'#DpOOQO'#Iv'#IvO,SQWO'#J`O,ZQWO'#EiOOQV'#Hp'#HpO,cQYO'#F{OOQV'#El'#ElOOQV'#Em'#EmOOQV'#En'#EnO.YQ_O'#EkO0_Q_O'#EoO2gQWOOO4QQ_O'#FPO7hQWO'#J`OOQV'#FY'#FYO7{Q_O'#F^O:WQ_O'#FaOOQO'#F`'#F`O=sQ_O'#FcO=}Q_O'#FbO@VQWO'#FgOOQO'#J`'#J`OOQV'#Io'#IoOA]Q_O'#InOEPQWO'#InOOQV'#Fw'#FwOF[QWO'#JuOFcQWO'#F|OOQO'#IO'#IOOGrQWO'#GhOOQV'#Im'#ImOOQV'#Il'#IlOOQV'#Hj'#HjQGyQ_OOOKeQ_O'#DUOKlQYO'#CqOOQP'#I_'#I_OOQV'#Hg'#HgQ]Q_OOOLuQWO'#I`ONsQYO'#DXO!!eQWO'#JuO!!lQWO'#JuO!!vQ_O'#DfO!%]Q_O'#E}O!(sQ_O'#FWO!,ZQWO'#FZO!.^QXO'#FbO!.cQ_O'#EeO!!vQ_O'#FmO!0uQWO'#FoO!0zQWO'#FoO!1PQ^O'#FqO!1WQWO'#JuO!1_QWO'#FtO!1dQWO'#FxO!2WQWO'#JjO!2_QWO'#GOO!2_QWO'#G`O!2_QWO'#GbO!2_QWO'#GsOOQO'#Ju'#JuO!2dQWO'#GhO!2lQYO'#GpO!2_QWO'#GqO!3uQ^O'#GtO!3|QWO'#GuO!4hQWO'#HOP!4sOpO'#CcPOOO)CC})CC}OOOO'#Hi'#HiO!5OO`O,59iOOQV,59i,59iO!5ZQYO,5?aOOQO-E;i-E;iOOQO,5:[,5:[OOQP,59Z,59ZO)xQWO,5:[O)xQWO,5:[O!5oQWO,5?kO!5zQYO,5;qO!6PQYO,5;TO!6hQWO,59QO!7kQXO'#CnO!7xQXO'#I`O!9SQWO'#CoO,^QWO'#EiOOQV-E;n-E;nO!9eQWO'#FsOOQV,5<g,5<gO!9SQWO'#CoO!9jQWO'#CoO!9oQWO'#I`O! yQWO'#JuO!9yQWO'#J`O!:aQWO,5;VOOQO'#In'#InO!0zQWO'#DaO!<aQWO'#DcO!<iQWO,5;ZO.YQ_O,5;ZOOQO,5;[,5;[OOQV'#Er'#ErOOQV'#Es'#EsOOQV'#Et'#EtOOQV'#Eu'#EuOOQV'#Ev'#EvOOQV'#Ew'#EwOOQV'#Ex'#ExOOQV'#Ey'#EyO.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;fO!=PQ_O,5;kO!@gQ_O'#FROOQO,5;l,5;lO!BrQWO,5;pO.YQ_O,5;wOKlQYO,5;gO!D_QWO,5;kO!EOQWO,5;xOOQO,5;x,5;xO!E]QWO,5;xO!EbQ_O,5;xO!GmQWO'#CfO!GrQWO,5<QO!G|Q_O,5<QOOQO,5;{,5;{O!JjQXO'#CnO!K{QXO'#I`OOQS'#Dk'#DkOOQP'#Ir'#IrO!LuQ[O'#IrO!L}QXO'#DjO!M{QWO'#DnO!M{QWO'#DnO!N^QWO'#DnOOQP'#It'#ItO!NcQXO'#ItO# ^Q^O'#DoO# hQWO'#DrO# pQ^O'#DzO# zQ^O'#D|O#!RQWO'#EPO#!^QXO'#FdOOQP'#ES'#ESOOQP'#Iq'#IqO#!lQXO'#JfOOQP'#Je'#JeO#!tQXO,5;}O#!yQXO'#I`O!1PQ^O'#DyO!1PQ^O'#FdO##sQWO,5;|OOQO,5;|,5;|OKlQYO,5;|O#$ZQWO'#FhOOQO,5<R,5<ROOQV,5=l,5=lO#&`QYO'#FzOOQV,5<h,5<hO#&gQWO,5<hO#&nQWO,5=SO!1WQWO,59rO!1dQWO,5<dO#&uQWO,5=iO!2_QWO,5<jO!2_QWO,5<zO!2_QWO,5<|O!2_QWO,5=QO#&|QWO,5=]O#'TQWO,5=SO!2_QWO,5=]O!3|QWO,5=aO#']QWO,5=jOOQO-E;|-E;|O#'hQWO'#JjOOQV-E;h-E;hO#(PQWO'#HRO#(WQ_O,59pOOQV,59p,59pO#(_QWO,59pO#(dQ_O,59pO#)SQZO'#CuO#+[QZO'#CvOOQV'#C|'#C|O#-wQWO'#HTO#.OQYO'#IdOOQO'#Hh'#HhO#.WQWO'#CwO#.WQWO'#CwO#.iQWO'#CwOOQR'#Ic'#IcO#.nQZO'#IbO#1TQYO'#HTO#1qQYO'#H[O#2}QYO'#H_OKlQYO'#H`OOQR'#Hb'#HbO#4ZQWO'#HeO#4`QYO,59]OOQR'#Ib'#IbO#5PQZO'#CtO#7[QYO'#HUO#7aQWO'#HTO#7fQYO'#CrO#8VQWO'#H]O#7fQYO'#HcOOQV-E;e-E;eO#8_QWO,59sOOQV,59{,59{O#8mQYO,5=[OOQV,59},59}O!0zQWO,59}O#;aQWO'#IpOOQO'#Ip'#IpO!1PQ^O'#DhO!0zQWO,5:QO#;hQWO,5;iO#<OQWO,5;rO#<fQ_O,5;rOOQO,5;u,5;uO#@PQ_O,5;|O#BXQWO,5;PO!0zQWO,5<XO#B`QWO,5<ZOOQV,5<Z,5<ZO#BkQWO,5<]O!1PQ^O'#EOOOQQ'#D_'#D_O#BsQWO,59rO#BxQWO,5<`O#B}QWO,5<dOOQO,5@U,5@UO#CVQWO,5=iOOQQ'#Cv'#CvO#C[QYO,5<jO#CmQYO,5<zO#CxQYO,5<|O#DTQYO,5=_O#DcQYO,5=SO#E{QYO'#GQO#FYQYO,5=[O#FmQWO,5=[O#F{QYO,5=[O#HUQYO,5=]O#HdQWO,5=`O!1PQ^O,5=`O#HrQWO'#CnO#ITQWO'#I`OOQO'#Jy'#JyO#IfQWO'#IQO#IkQWO'#GwOOQO'#Jz'#JzO#JSQWO'#GzOOQO'#G|'#G|OOQO'#Jx'#JxO#IkQWO'#GwO#JZQWO'#GxO#J`QWO,5=aO#JeQWO,5=jO!1dQWO,5=jO#'`QWO,5=jPOOO'#Hf'#HfP#JjOpO,58}POOO,58},58}OOOO-E;g-E;gOOQV1G/T1G/TO#JuQWO1G4{O#JzQ^O'#CyPOQQ'#Cx'#CxOOQO1G/v1G/vOOQP1G.u1G.uO)xQWO1G/vO#NTQ!fO'#ETO#N[Q!fO'#EaO#NcQ!fO'#EbO$ kQWO1G1yO$!_Q_O1G1yOOQP1G5V1G5VOOQO1G1]1G1]O$&RQWO1G0oO$&WQWO'#CiO!7xQXO'#I`O!6PQYO1G.lO!5oQWO,5<_O!9SQWO,59ZO!9SQWO,59ZO!5oQWO,5?kO$&iQWO1G0uO$(vQWO1G0wO$*nQWO1G0wO$+UQWO1G0wO$-YQWO1G0wO$-aQWO1G0wO$/bQWO1G0wO$/iQWO1G0wO$1jQWO1G0wO$1qQWO1G0wO$3YQWO1G1QO$5ZQWO1G1VO$5zQ_O'#JcO$8SQWO'#JcOOQO'#Jb'#JbO$8^QWO,5;mOOQO'#Dw'#DwOOQO1G1[1G1[OOQO1G1Y1G1YO$8cQWO1G1cOOQO1G1R1G1RO$8jQ_O'#HrO$:xQWO,5@OO.YQ_O1G1dOOQO1G1d1G1dO$;QQWO1G1dO$;_QWO1G1dO$;dQWO1G1eOOQO1G1l1G1lO$;lQWO1G1lOOQP,5?^,5?^O$;vQ^O,5:kO$<aQXO,5:YO!M{QWO,5:YO!M{QWO,5:YO!1PQ^O,5:gO$=bQWO'#IyOOQO'#Ix'#IxO$=pQWO,5:ZO# ^Q^O,5:ZO$=uQWO'#DsOOQP,5:^,5:^O$>WQWO,5:fOOQP,5:h,5:hO!1PQ^O,5:hO!1PQ^O,5:mO$>]QYO,5<OO$>gQ_O'#HsO$>tQXO,5@QOOQV1G1i1G1iOOQP,5:e,5:eO$>|QXO,5<OO$?[QWO1G1hO$?dQWO'#CnO$?oQWO'#FiOOQO'#Fi'#FiO$?wQWO'#FjO.YQ_O'#FkOOQO'#Ji'#JiO$?|QWO'#JhOOQO'#Jg'#JgO$@UQWO,5<SOOQQ'#Hv'#HvO$@ZQYO,5<fOOQV,5<f,5<fO$@bQYO,5<fOOQV1G2S1G2SO$@iQWO1G2nO$@qQWO1G/^O$@vQWO1G2OO#CVQWO1G3TO$AOQYO1G2UO#CmQYO1G2fO#CxQYO1G2hO$AaQYO1G2lO!2_QWO1G2wO#DcQYO1G2nO#HUQYO1G2wO$AiQWO1G2{O$AnQWO1G3UO!1dQWO1G3UO$AsQWO1G3UOOQV1G/[1G/[O$A{QWO1G/[O$BQQ_O1G/[O#7aQWO,5=oO$BXQYO,5?OO$BmQWO,5?OO$BrQZO'#IeOOQO-E;f-E;fOOQR,59c,59cO#.WQWO,59cO#.WQWO,59cOOQR,5=n,5=nO$E_QYO'#HVO$FwQZO,5=oO!5oQWO,5={O$IZQWO,5=oO$IbQZO,5=vO$KqQYO,5=vO$>]QYO,5=vO$LRQWO'#KRO$L^QWO,5=xOOQR,5=y,5=yO$LcQWO,5=zO$>]QYO,5>PO$>]QYO,5>POOQO1G.w1G.wO$>]QYO1G.wO$LnQYO,5=pO$LvQZO,59^OOQR,59^,59^O$>]QYO,5=wO% YQZO,5=}OOQR,5=},5=}O%#lQWO1G/_O!6PQYO1G/_O#FYQYO1G2vO%#qQWO1G2vO%$PQYO1G2vOOQV1G/i1G/iO%%YQWO,5:SO%%bQ_O1G/lO%*kQWO1G1^O%+RQWO1G1hOOQO1G1h1G1hO$>]QYO1G1hO%+iQ^O'#EgOOQV1G0k1G0kOOQV1G1s1G1sO!!vQ_O1G1sO!0zQWO1G1uO!1PQ^O1G1wO!.cQ_O1G1wOOQP,5:j,5:jO$>]QYO1G/^OOQO'#Cn'#CnO%+vQWO1G1zOOQV1G2O1G2OO%,OQWO'#CnO%,WQWO1G3TO%,]QWO1G3TO%,bQYO'#GQO%,sQWO'#G]O%-UQYO'#G_O%.hQYO'#GXOOQV1G2U1G2UO%/wQWO1G2UO%/|QWO1G2UO$ARQWO1G2UOOQV1G2f1G2fO%/wQWO1G2fO#CpQWO1G2fO%0UQWO'#GdOOQV1G2h1G2hO%0gQWO1G2hO#C{QWO1G2hO%0lQYO'#GSO$>]QYO1G2lO$AdQWO1G2lOOQV1G2y1G2yO%1xQWO1G2yO%3hQ^O'#GkO%3rQWO1G2nO#DfQWO1G2nO%4QQYO,5<lO%4[QYO,5<lO%4jQYO,5<lO%5XQYO,5<lOOQQ,5<l,5<lO!1WQWO'#JuO%5dQYO,5<lO%5lQWO1G2vOOQV1G2v1G2vO%5tQWO1G2vO$>]QYO1G2vOOQV1G2w1G2wO%5tQWO1G2wO%5yQWO1G2wO#HXQWO1G2wOOQV1G2z1G2zO.YQ_O1G2zO$>]QYO1G2zO%6RQWO1G2zOOQO,5>l,5>lOOQO-E<O-E<OOOQO,5=c,5=cOOQO,5=e,5=eOOQO,5=g,5=gOOQO,5=h,5=hO%6aQWO'#J|OOQO'#J{'#J{O%6iQWO,5=fO%6nQWO,5=cO!1dQWO,5=dOOQV1G2{1G2{O$>]QYO1G3UPOOO-E;d-E;dPOOO1G.i1G.iOOQO7+*g7+*gO%7VQYO'#IcO%7nQYO'#IfO%7yQYO'#IfO%8RQYO'#IfO%8^QYO,59eOOQO7+%b7+%bOOQP7+$a7+$aO%8cQ!fO'#JTOOQS'#EX'#EXOOQS'#EY'#EYOOQS'#EZ'#EZOOQS'#JT'#JTO%;UQWO'#EWOOQS'#E`'#E`OOQS'#JR'#JROOQS'#Hn'#HnO%;ZQ!fO,5:oOOQV,5:o,5:oOOQV'#JQ'#JQO%;bQ!fO,5:{OOQV,5:{,5:{O%;iQ!fO,5:|OOQV,5:|,5:|OOQV7+'e7+'eOOQV7+&Z7+&ZO%;pQ!fO,59TOOQO,59T,59TO%>YQWO7+$WO%>_QWO1G1yOOQV1G1y1G1yO!9SQWO1G.uO%>dQWO,5?}O%>nQ_O'#HqO%@|QWO,5?}OOQO1G1X1G1XOOQO7+&}7+&}O%AUQWO,5>^OOQO-E;p-E;pO%AcQWO7+'OO.YQ_O7+'OOOQO7+'O7+'OOOQO7+'P7+'PO%AjQWO7+'POOQO7+'W7+'WOOQP1G0V1G0VO%ArQXO1G/tO!M{QWO1G/tO%BsQXO1G0RO%CkQ^O'#HlO%C{QWO,5?eOOQP1G/u1G/uO%DWQWO1G/uO%D]QWO'#D_OOQO'#Dt'#DtO%DhQWO'#DtO%DmQWO'#I{OOQO'#Iz'#IzO%DuQWO,5:_O%DzQWO'#DtO%EPQWO'#DtOOQP1G0Q1G0QOOQP1G0S1G0SOOQP1G0X1G0XO%EXQXO1G1jO%EdQXO'#FeOOQP,5>_,5>_O!1PQ^O'#FeOOQP-E;q-E;qO$>]QYO1G1jOOQO7+'S7+'SOOQO,5<T,5<TO%ErQWO,5<UO.YQ_O,5<UO%EwQWO,5<VO%FRQWO'#HtO%FdQWO,5@SOOQO1G1n1G1nOOQQ-E;t-E;tOOQV1G2Q1G2QO%FlQYO1G2QO#DcQYO7+(YO$>]QYO7+$xOOQV7+'j7+'jO%FsQWO7+(oO%FxQWO7+(oOOQV7+'p7+'pO%/wQWO7+'pO%F}QWO7+'pO%GVQWO7+'pOOQV7+(Q7+(QO%/wQWO7+(QO#CpQWO7+(QOOQV7+(S7+(SO%0gQWO7+(SO#C{QWO7+(SO$>]QYO7+(WO%GeQWO7+(WO#HUQYO7+(cO%GjQWO7+(YO#DfQWO7+(YOOQV7+(c7+(cO%5tQWO7+(cO%5yQWO7+(cO#HXQWO7+(cOOQV7+(g7+(gO$>]QYO7+(pO%GxQWO7+(pO!1dQWO7+(pOOQV7+$v7+$vO%G}QWO7+$vO%HSQZO1G3ZO%JfQWO1G4jOOQO1G4j1G4jOOQR1G.}1G.}O#.WQWO1G.}O%JkQWO'#KQOOQO'#HW'#HWO%J|QWO'#HXO%KXQWO'#KQOOQO'#KP'#KPO%KaQWO,5=qO%KfQYO'#H[O%LrQWO'#GmO%L}QYO'#CtO%MXQWO'#GmO$>]QYO1G3ZOOQR1G3g1G3gO#7aQWO1G3ZO%M^QZO1G3bO$>]QYO1G3bO& mQYO'#IVO& }QWO,5@mOOQR1G3d1G3dOOQR1G3f1G3fO.YQ_O1G3fOOQR1G3k1G3kO&!VQYO7+$cO&!_QYO'#KOOOQQ'#J}'#J}O&!gQYO1G3[O&!lQZO1G3cOOQQ7+$y7+$yO&${QWO7+$yO&%QQWO7+(bOOQV7+(b7+(bO%5tQWO7+(bO$>]QYO7+(bO#FYQYO7+(bO&%YQWO7+(bO!.cQ_O1G/nO&%hQWO7+%WO$?[QWO7+'SO&%pQWO'#EhO&%{Q^O'#EhOOQU'#Ho'#HoO&%{Q^O,5;ROOQV,5;R,5;RO&&VQWO,5;RO&&[Q^O,5;RO!0zQWO7+'_OOQV7+'a7+'aO&&iQWO7+'cO&&qQWO7+'cO&&xQWO7+$xO&'TQ!fO7+'fO&'[Q!fO7+'fOOQV7+(o7+(oO!1dQWO7+(oO&'cQYO,5<lO&'nQYO,5<lO!1dQWO'#GWO&'|QWO'#JpO&([QWO'#G^O!BxQWO'#G^O&(aQWO'#JpOOQO'#Jo'#JoO&(iQWO,5<wOOQO'#DX'#DXO&(nQYO'#JrO&)}QWO'#JrO$>]QYO'#JrOOQO'#Jq'#JqO&*YQWO,5<yO&*_QWO'#GZO#D^QWO'#G[O&*gQWO'#G[O&*oQWO'#JmOOQO'#Jl'#JlO&*zQYO'#GTOOQO,5<s,5<sO&+PQWO7+'pO&+UQWO'#JtO&+dQWO'#GeO#BxQWO'#GeO&+uQWO'#JtOOQO'#Js'#JsO&+}QWO,5=OO$>]QYO'#GUO&,SQYO'#JkOOQQ,5<n,5<nO&,kQWO7+(WOOQV7+(e7+(eO&.TQ^O'#D|O&._QWO'#GlO&.gQ^O'#JwOOQO'#Gn'#GnO&.nQWO'#JwOOQO'#Jv'#JvO&.vQWO,5=VO&.{QWO'#I`O&/]Q^O'#GmO&/dQWO'#IqO&/rQWO'#GmOOQV7+(Y7+(YO&/zQWO7+(YO$>]QYO7+(YO&0SQYO'#HxO&0hQYO1G2WOOQQ1G2W1G2WOOQQ,5<m,5<mO$>]QYO,5<qO&0pQWO,5<rO&0uQWO7+(bO&1QQWO7+(fO&1XQWO7+(fOOQV7+(f7+(fO.YQ_O7+(fO$>]QYO7+(fO&1dQWO'#IRO&1nQWO,5@hOOQO1G3Q1G3QOOQO1G2}1G2}OOQO1G3P1G3POOQO1G3R1G3ROOQO1G3S1G3SOOQO1G3O1G3OO&1vQWO7+(pO$>]QYO,59fO&2RQ^O'#ISO&2xQYO,5?QOOQR1G/P1G/PO&3QQ!bO,5:pO&3VQ!fO,5:rOOQS-E;l-E;lOOQV1G0Z1G0ZOOQV1G0g1G0gOOQV1G0h1G0hO&3^QWO'#JTOOQO1G.o1G.oOOQV<<Gr<<GrO&3iQWO1G5iO$5zQ_O,5>]O&3qQWO,5>]OOQO-E;o-E;oOOQO<<Jj<<JjO&3{QWO<<JjOOQO<<Jk<<JkO&4SQXO7+%`O&5TQWO,5>WOOQO-E;j-E;jOOQP7+%a7+%aO!1PQ^O,5:`O&5cQWO'#HmO&5wQWO,5?gOOQP1G/y1G/yOOQO,5:`,5:`O&6PQWO,5:`O%DzQWO,5:`O$>]QYO,5<PO&6UQXO,5<PO&6dQXO7+'UO.YQ_O1G1pO&6oQWO1G1pOOQO,5>`,5>`OOQO-E;r-E;rOOQV7+'l7+'lO&6yQWO<<KtO#DfQWO<<KtO&7XQWO<<HdOOQV<<LZ<<LZO!1dQWO<<LZOOQV<<K[<<K[O&7dQWO<<K[O%/wQWO<<K[O&7iQWO<<K[OOQV<<Kl<<KlO%/wQWO<<KlOOQV<<Kn<<KnO%0gQWO<<KnO&7qQWO<<KrO$>]QYO<<KrOOQV<<K}<<K}O%5tQWO<<K}O%5yQWO<<K}O#HXQWO<<K}OOQV<<Kt<<KtO&7yQWO<<KtO$>]QYO<<KtO&8RQWO<<L[O$>]QYO<<L[O&8^QWO<<L[OOQV<<Hb<<HbO$>]QYO7+(uOOQO7+*U7+*UOOQR7+$i7+$iO&8cQWO,5@lOOQO'#Gm'#GmO&8kQWO'#GmO&8vQYO'#IUO&8cQWO,5@lOOQR1G3]1G3]O&:cQYO,5=vO&;rQYO,5=XO&;|QWO,5=XOOQO,5=X,5=XOOQR7+(u7+(uO&<RQZO7+(uO&>eQZO7+(|O&@tQWO,5>qOOQO-E<T-E<TO&APQWO7+)QOOQO<<G}<<G}O&AWQYO'#ITO&AcQYO,5@jOOQQ7+(v7+(vOOQQ<<He<<HeO$>]QYO<<K|OOQV<<K|<<K|O&0uQWO<<K|O&AkQWO<<K|O%5tQWO<<K|O&AsQWO7+%YOOQV<<Hr<<HrOOQO<<Jn<<JnO.YQ_O,5;SO&AzQWO,5;SO.YQ_O'#EjO&BPQWO,5;SOOQU-E;m-E;mO&B[QWO1G0mOOQV1G0m1G0mO&%{Q^O1G0mOOQV<<Jy<<JyO!.cQ_O<<J}OOQV<<J}<<J}OOQV<<Hd<<HdO.YQ_O<<HdO&BaQWO'#FvO&BfQWO<<KQO&BnQ!fO<<KQO&BuQWO<<KQO&BzQWO<<KQO&CSQ!fO<<KQOOQV<<KQ<<KQO&CZQWO<<LZO&C`QWO,5@[O$>]QYO,5<xO&ChQWO,5<xO&CmQWO'#H{O&C`QWO,5@[OOQV1G2c1G2cO&DRQWO,5@^O$>]QYO,5@^O&D^QYO'#H|O&EsQWO,5@^OOQO1G2e1G2eO%,nQWO,5<uOOQO,5<v,5<vO&E{QYO'#HzO&G_QWO,5@XO%,bQYO,5=pO$>]QYO,5<oO&GjQWO,5@`O.YQ_O,5=PO&GrQWO,5=PO&G}QWO,5=PO&H`QWO'#H}O&GjQWO,5@`OOQV1G2j1G2jO&HtQYO,5<pO%0lQYO,5>PO&I]QYO,5@VOOQV<<Kr<<KrO&ItQWO,5=XO&KfQ^O,5:hO&KmQWO,5=XO$>]QYO,5=WO&KuQWO,5@cO&K}QWO,5@cO&MvQ^O'#IPO&KuQWO,5@cOOQO1G2q1G2qO&NTQWO,5=WO&N]QWO<<KtO&NkQYO,5>oO&NvQYO,5>dO' UQYO,5>dOOQQ,5>d,5>dOOQQ-E;v-E;vOOQQ7+'r7+'rO' aQYO1G2]O$>]QYO1G2^OOQV<<LQ<<LQO.YQ_O<<LQO' lQWO<<LQO' sQWO<<LQOOQO,5>m,5>mOOQO-E<P-E<POOQV<<L[<<L[O.YQ_O<<L[O'!OQYO1G/QO'!ZQYO,5>nOOQQ,5>n,5>nO'!fQYO,5>nOOQQ-E<Q-E<QOOQS1G0[1G0[O'$tQ!fO1G0^O'%RQ!fO1G0^O'%YQWO1G3wOOQOAN@UAN@UO'%dQWO1G/zOOQO,5>X,5>XOOQO-E;k-E;kO!1PQ^O1G/zOOQO1G/z1G/zO'%oQWO1G/zO'%tQXO1G1kO$>]QYO1G1kO'&PQWO7+'[OOQVANA`ANA`O'&ZQWOANA`O$>]QYOANA`O'&cQWOANA`OOQVAN>OAN>OO.YQ_OAN>OO'&qQWOANAuOOQVAN@vAN@vO'&vQWOAN@vOOQVANAWANAWOOQVANAYANAYOOQVANA^ANA^O'&{QWOANA^OOQVANAiANAiO%5tQWOANAiO%5yQWOANAiO''TQWOANA`OOQVANAvANAvO.YQ_OANAvO''cQWOANAvO$>]QYOANAvOOQR<<La<<LaO''nQWO1G6WO%JkQWO,5>pOOQO'#HY'#HYO''vQWO'#HZOOQO,5>p,5>pOOQO-E<S-E<SO'(RQYO1G2sO'(]QWO1G2sOOQO1G2s1G2sO$>]QYO<<LaOOQR<<Ll<<LlOOQQ,5>o,5>oOOQQ-E<R-E<RO&0uQWOANAhOOQVANAhANAhO%5tQWOANAhO$>]QYOANAhO'(bQWO1G1rO')UQ^O1G0nO.YQ_O1G0nO'*zQWO,5;UO'+RQWO1G0nP'+WQWO'#ERP&%{Q^O'#HpOOQV7+&X7+&XO'+cQWO7+&XO&&qQWOAN@iO'+hQWOAN>OO!5oQWO,5<bOOQS,5>a,5>aO'+oQWOAN@lO'+tQWOAN@lOOQS-E;s-E;sOOQVAN@lAN@lO'+|QWOAN@lOOQVANAuANAuO',UQWO1G5vO',^QWO1G2dO$>]QYO1G2dO&'|QWO,5>gOOQO,5>g,5>gOOQO-E;y-E;yO',iQWO1G5xO',qQWO1G5xO&(nQYO,5>hO',|QWO,5>hO$>]QYO,5>hOOQO-E;z-E;zO'-XQWO'#JnOOQO1G2a1G2aOOQO,5>f,5>fOOQO-E;x-E;xO&'cQYO,5<lO'-gQYO1G2ZO'.RQWO1G5zO'.ZQWO1G2kO.YQ_O1G2kO'.eQWO1G2kO&+UQWO,5>iOOQO,5>i,5>iOOQO-E;{-E;{OOQQ,5>c,5>cOOQQ-E;u-E;uO'.pQWO1G2sO'/QQWO1G2rO'/]QWO1G5}O'/eQ^O,5>kOOQO'#Go'#GoOOQO,5>k,5>kO'/lQWO,5>kOOQO-E;}-E;}O$>]QYO1G2rO'/zQYO7+'xO'0VQWOANAlOOQVANAlANAlO.YQ_OANAlO'0^QWOANAvOOQS7+%x7+%xO'0eQWO7+%xO'0pQ!fO7+%xO'0}QWO7+%fO!1PQ^O7+%fO'1YQXO7+'VOOQVG26zG26zO'1eQWOG26zO'1sQWOG26zO$>]QYOG26zO'1{QWOG23jOOQVG27aG27aOOQVG26bG26bOOQVG26xG26xOOQVG27TG27TO%5tQWOG27TO'2SQWOG27bOOQVG27bG27bO.YQ_OG27bO'2ZQWOG27bOOQO1G4[1G4[OOQO7+(_7+(_OOQRANA{ANA{OOQVG27SG27SO%5tQWOG27SO&0uQWOG27SO'2fQ^O7+&YO'4PQWO7+'^O'4sQ^O7+&YO.YQ_O7+&YP.YQ_O,5;SP'6PQWO,5;SP'6UQWO,5;SOOQV<<Is<<IsOOQVG26TG26TOOQVG23jG23jOOQO1G1|1G1|OOQVG26WG26WO'6aQWOG26WP&B}QWO'#HuO'6fQWO7+(OOOQO1G4R1G4RO'6qQWO7++dO'6yQWO1G4SO$>]QYO1G4SO%,nQWO'#HyO'7UQWO,5@YO'7dQWO7+(VO.YQ_O7+(VOOQO1G4T1G4TOOQO1G4V1G4VO'7nQWO1G4VO'7|QWO7+(^OOQVG27WG27WO'8XQWOG27WOOQS<<Id<<IdO'8`QWO<<IdO'8kQWO<<IQOOQVLD,fLD,fO'8vQWOLD,fO'9OQWOLD,fOOQVLD)ULD)UOOQVLD,oLD,oOOQVLD,|LD,|O'9^QWOLD,|O.YQ_OLD,|OOQVLD,nLD,nO%5tQWOLD,nO'9eQ^O<<ItO';OQWO<<JxO';rQ^O<<ItP'=OQWO1G0nP'=oQ^O1G0nP.YQ_O1G0nP'?bQWO1G0nOOQVLD+rLD+rO'?gQWO7+)nOOQO,5>e,5>eOOQO-E;w-E;wO'?rQWO<<KqOOQVLD,rLD,rOOQSAN?OAN?OOOQV!$(!Q!$(!QO'?|QWO!$(!QOOQV!$(!h!$(!hO'@UQWO!$(!hOOQV!$(!Y!$(!YO'@]Q^OAN?`POQU7+&Y7+&YP'AvQWO7+&YP'BgQ^O7+&YP.YQ_O7+&YOOQV!)9El!)9ElOOQV!)9FS!)9FSPOQU<<It<<ItP'DYQWO<<ItP'DyQ^O<<ItPOQUAN?`AN?`O'FlQWO'#CnO'FsQXO'#CnO'GlQWO'#I`O'IRQXO'#I`O'IxQWO'#DpO'IxQWO'#DpO!.cQ_O'#EkO'JZQ_O'#EoO'JbQ_O'#FPO'MfQ_O'#FbO'MmQXO'#I`O'NdQ_O'#E}O( gQ_O'#FWO'IxQWO,5:[O'IxQWO,5:[O!.cQ_O,5;ZO!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;fO(!jQ_O,5;kO(%nQWO,5;kO(&OQWO,5;|O(&VQYO'#CuO(&bQYO'#CvO(&mQWO'#CwO(&mQWO'#CwO('OQYO'#CtO('ZQWO,5;iO('bQWO,5;rO('iQ_O,5;rO((oQ_O,5;|O'IxQWO1G/vO((vQWO1G0uO(*eQWO1G0wO(*oQWO1G0wO(,dQWO1G0wO(,kQWO1G0wO(.]QWO1G0wO(.dQWO1G0wO(0UQWO1G0wO(0]QWO1G0wO(0dQWO1G1QO(0tQWO1G1VO(1UQYO'#IeO(&mQWO,59cO(&mQWO,59cO(1aQWO1G1^O(1hQWO1G1hO(&mQWO1G.}O(1oQWO'#DpO!.^QXO'#FbO(1tQWO,5;ZO(1{QWO'#Cw",
      stateData: "(2_~O&|OSUOS&}PQ~OPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'TQO'ZkO'^UO'gcO'qiO(QdO~O&}!sO~OZbX[bXdbXdlXobXwjX}bX!lbX!qbX!tbX#ObX#PbX#pbX'gbX'qbX'rbX'xbX'ybX'zbX'{bX'|bX'}bX(ObX(PbX(QbX(RbX(TbX~OybXXbX!ebX!PbXvbX#RbX~P$|OZ'SX['SXd'SXd'XXo'SXw'kXy'SX}'SX!l'SX!q'SX!t'SX#O'SX#P'SX#p'SX'g'SX'q'SX'r'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SXv'SX~OX'SX!e'SX!P'SX#R'SX~P'ZOr!uO']!wO'_!uO~Od!xO~O^RO_RO`ROaRO'TQO~Od!}O~Od#PO[(SXo(SXy(SX}(SX!l(SX!q(SX!t(SX#O(SX#P(SX#p(SX'g(SX'q(SX'r(SX'x(SX'y(SX'z(SX'{(SX'|(SX'}(SX(O(SX(P(SX(Q(SX(R(SX(T(SXv(SX~OZ#OO~P*`OZ#RO[#QO~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'T#SO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!j#eO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xO[#}Oo#xO}#zO!l#yO!q#jO!t#yO#O#xO#P#uO#p$OO'g#gO'q#yO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~OPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXy#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sXX#sX!e#sX!P#sXv#sX#R#sX~P)xOX(SX!e(SX!P(SXw(SX#R(SX~P*`OPoOQ!QOSVOTVOX$ROZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!P$XO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOQ!QOSVOTVO[$gO^$pO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j$rOP(XP~P<cOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q$uO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw$vO~Oo'bX#O'bX#P'bX#p'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(R'bX(T'bX~OP%tXQ%tXS%tXT%tXZ%tX[%tX^%tX_%tX`%tXa%tXd%tXg%tXs%tXt%tXu%tXw%tXy%tX|%tX}%tX!Q%tX!U%tX!W%tX!X%tX!Z%tX!]%tX!l%tX!q%tX!t%tX#Y%tX#r%tX#{%tX$O%tX$b%tX$d%tX$f%tX$i%tX$m%tX$q%tX$s%tX%T%tX%V%tX%Z%tX%]%tX%^%tX%f%tX%j%tX%s%tX&z%tX'Q%tX'T%tX'Z%tX'^%tX'g%tX'q%tX(Q%tXv%tX~P@[Oy$xO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bXv'bX~P@[Ow$yO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Oy$zO~PEsO!Q$}O!U%UO!W!lO$m%OO$q%PO$s%QO%T%RO%V%SO%Z%TO%]!lO%^%VO%f%WO%j%XO%s%YO~O!Q!lO!U!lO!W!lO$q%[O%]!lO~O%^%VO~PGaOPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'TQO'ZkO'^UO'gcO'qiO(QdO~Ov%`O~P]OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~P'ZO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~O}%}O'T{XQ{XZ{X[{X^{X_{X`{Xa{Xd{Xg{X!q{X$f{X&W{X'Z{X(Q{X~PMuOg&PO%f%WO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Ow!PO~P! yOw!PO!X&RO~PEvOPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!]&UO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#qXy#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qXX#qX!e#qX!P#qXv#qX#R#qX~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zXy#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zXX#zX!e#zX!P#zXv#zX#R#zX~P)xO'ZkO[#}Xo#}Xy#}X}#}X!l#}X!q#}X!t#}X#O#}X#P#}X#p#}X'g#}X'q#}X'r#}X'x#}X'y#}X'z#}X'{#}X'|#}X'}#}X(O#}X(P#}X(Q#}X(R#}X(T#}XX#}X!e#}X!P#}Xv#}Xw#}X#R#}X~OPoO~OPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~O!S&_O~Ow!PO~O!j&bO~P<cO'T&cO~PEvOZ&eO~O'T&cO~O'^UOw(^Xy(^X!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Oa&hO~P!1iO'T&iO~O_&nO'T&cO~OQ&oOZ&pO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!j&uO~P<cO^&wO_&wO`&wOa&wOd'POw&|O'T&vO(Q&}O~O!i'UO!j'TO'T&cO~O&}!sO'O'VO'P'XO~Or!uO']'ZO'_!uO~OQ']O^'ia_'ia`'iaa'ia'T'ia~O['cOw'dO}'bO~OQ']O~OQ!QO^#TO_#TO`#TOa'kOd#ZO'T#SO~O['lO~OZbXdlXXbXobXPbX!SbX!ebX'rbX!PbX!ObXybX!ZbX#RbXvbX~O[bXwbX}bX~P!6mOZ'SXd'XXX'SX['SXo'SXw'SX}'SX#p'SXP'SX!S'SX!e'SX'r'SX!P'SX!O'SXy'SX!Z'SX#R'SXv'SX~O^#TO_#TO`#TOa'kO'T#SO~OZ'mO~Od'oO~OZ'SXd'XX~PMuOZ'pOX(SX!e(SX!P(SXw(SX#R(SX~P*`O[#}O}#zO(O#|O(R#fOo#_ay#_a!l#_a!q#_a!t#_a#O#_a#P#_a#p#_a'g#_a'q#_a'r#_a'x#_a'y#_a'z#_a'{#_a'|#_a'}#_a(P#_a(Q#_a(T#_aX#_a!e#_a!P#_av#_aw#_a#R#_a~Ow!PO!X&RO~Oy#caX#ca!e#ca!P#cav#ca#R#ca~P2gOPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#say#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#saX#sa!e#sa!P#sav#sa#R#sa~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P(UP~P)xOu(SO#w(TO'T(RO~O[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#sa!t#sa#p#sa'q#sa~Oo#xO#O#xO#P#uOy#saX#sa!e#sa!P#sav#sa#R#sa~P!B}Oy(YO!e(WOX(WX~P2gOX(ZO~OPoOQ!QOSVOTVOX(ZOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZ#RO~O!P(_O!e(WO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZbXdlXwjX}jX!tbX'qbX~OP!RX!S!RX!e!RX'p!RX'r!RX!O!RXo!RXy!RX!P!RXX!RX!Z!RX#R!RXv!RX~P!JUOZ'SXd'XXw'kX}'kX!t'SX'q'SX~OP!`X!S!`X!e!`X'r!`X!O!`Xo!`Xy!`X!P!`XX!`X!Z!`X#R!`Xv!`X~P!KgOT(aOu(aO~O!t(bO'q(bOP!^X!S!^X!e!^X'r!^X!O!^Xo!^Xy!^X!P!^XX!^X!Z!^X#R!^Xv!^X~O^9rO_9rO`9yOa9yO'T9pO~Od(eO~O'p(fOP'hX!S'hX!e'hX'r'hX!O'hXo'hXy'hX!P'hXX'hX!Z'hX#R'hXv'hX~O!j&bO!P'lP~P<cOw(kO}(jO~O!j&bOX'lP~P<cO!j(oO~P<cOZ'pO!t(bO'q(bO~O!S(qO'r(pOP$WX!e$WX~O!e(rOP(YX~OP(tO~OP!aX!S!aX!e!aX'r!aX!O!aXo!aXy!aX!P!aXX!aX!Z!aX#R!aXv!aX~P!KgOy$UaX$Ua!e$Ua!P$Uav$Ua#R$Ua~P2gO!l(|O'Q#VO'T(xOv(ZP~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'T#SO~Ov)TO~P#$iOy)VO~PEsO%^)WO~PGaOa)ZO~P!1iO%f)`O~PEvO_)aO'T&cO~O!i)fO!j)eO'T&cO~O'^UO!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Ov%uX~P2gOv)gO~PGyOv)gO~Ov)gO~P]OQiXQ'XXZiXd'XX}iX#piX(PiX~ORiXwiX$fiX$|iX[iXoiXyiX!liX!qiX!tiX#OiX#PiX'giX'qiX'riX'xiX'yiX'ziX'{iX'|iX'}iX(OiX(QiX(RiX(TiX!PiX!eiXXiXPiXviX!SiX#RiX~P#(kOQjXQlXRjXZjXdlX}jX#pjX(PjXwjX$fjX$|jX[jXojXyjX!ljX!qjX!tjX#OjX#PjX'gjX'qjX'rjX'xjX'yjX'zjX'{jX'|jX'}jX(OjX(QjX(RjX(TjX!PjX!ejXXjX!SjXPjXvjX#RjX~O%^)jO~PGaOQ']Od)kO~O^)mO_)mO`)mOa)mO'T%dO~Od)qO~OQ']OZ)uO})sOR'UX#p'UX(P'UXw'UX$f'UX$|'UX['UXo'UXy'UX!l'UX!q'UX!t'UX#O'UX#P'UX'g'UX'q'UX'r'UX'x'UX'y'UX'z'UX'{'UX'|'UX'}'UX(O'UX(Q'UX(R'UX(T'UX!P'UX!e'UXX'UXP'UXv'UX!S'UX#R'UX~OQ!QO^:bO_:^O`TOaTOd:aO%^)jO'T:_O~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!j)yO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!P)|O!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO(P*OO~OR*QO#p*RO(P*PO~OQhXQ'XXZhXd'XX}hX(PhX~ORhX#phXwhX$fhX$|hX[hXohXyhX!lhX!qhX!thX#OhX#PhX'ghX'qhX'rhX'xhX'yhX'zhX'{hX'|hX'}hX(OhX(QhX(RhX(ThX!PhX!ehXXhXPhXvhX!ShX#RhX~P#4kOQ*SO~O})sO~OQ!QO^%vO_%cO`TOaTOd%jO$f%wO%^%xO'T%dO~PGaO!Q*VO!j*VO~O^*YO`*YOa*YO!O*ZO~OQ&oOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO[#}Oo:YO}#zO!l:ZO!q#jO!t:ZO#O:YO#P:VO#p$OO'g#gO'q:ZO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~Ow'dX~P#9vOy#qaX#qa!e#qa!P#qav#qa#R#qa~P2gOy#zaX#za!e#za!P#zav#za#R#za~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!S&_O!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zay#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#zaX#za!e#za!P#zav#za#R#za~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q*eO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw*fO~P#9vO$b*iO$d*jO$f*kO~O!O*lO'r(pO~O!S*nO~O'T*oO~Ow$yOy*qO~O'T*rO~OQ*uOw*vOy*yO}*wO$|*xO~OQ*uOw*vO$|*xO~OQ*uOw+QO$|*xO~OQ*uOo+VOy+XO!S+UO~OQ*uO}+ZO~OQ!QOZ%rO[%qO^%vO`TOaTOd%jOg%yO}%pO!U!lO!W!lO!q%oO$f%wO$q%[O%]!lO%^%xO&W%{O'T%dO'Z%eO(Q%zO~OR+bO_+^O!Q+cO~P#DkO_%cO!Q!lOw&UX$|&UX(P&UX~P#DkOw$yO$f+hO$|*xO(P*PO~OQ!QOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ*uOw$yO!S+UO$|*xO~Oo+nOy+mO!S+oO'r(pO~OdlXy!RX#pbXv!RX!e!RX~Od'XXy(mX#p'SXv(mX!e(mX~Od+qO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q+vO~Ov(oP~P!3|O#p+{O~Oy+|O~O!S+}O~O&}!sO'O'VO'P,PO~Od,QO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UO~P#DkOS,^OT,^OZ,^O['cO_,YOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~O!P,dO~P#KkOX,gO~P#KkOv,iO~P#KkOo'tX#O'tX#P'tX#p'tX'r'tX'x'tX'y'tX'z'tX'{'tX'|'tX'}'tX(O'tX(P'tX(R'tX(T'tX~Oy,jO['tX}'tX!l'tX!q'tX!t'tX'g'tX'q'tX(Q'tXv'tX~P#NjOP$giQ$giS$giT$giZ$gi[$gi^$gi_$gi`$gia$gid$gig$gis$git$giu$giw$giy$gi|$gi}$gi!Q$gi!U$gi!W$gi!X$gi!Z$gi!]$gi!l$gi!q$gi!t$gi#Y$gi#r$gi#{$gi$O$gi$b$gi$d$gi$f$gi$i$gi$m$gi$q$gi$s$gi%T$gi%V$gi%Z$gi%]$gi%^$gi%f$gi%j$gi%s$gi&z$gi'Q$gi'T$gi'Z$gi'^$gi'g$gi'q$gi(Q$giv$gi~P#NjOX,kO~O['cOo,lOw'dO}'bOX]X~Oy#ciX#ci!e#ci!P#civ#ci#R#ci~P2gO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei(P#ei~P$'PO[#}O}#zO(O#|O(R#fOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei'x#ei(P#ei(Q#ei(T#eiw#ei~P$)QO'g#gO(P#gO~P$'PO[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O!q#ei~P$+`O!q#jO~P$+`O[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'r#ei~P$-hO'r#lO~P$-hO[#}O}#zO!q#jO#P#uO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#eiX#ei!e#ei!P#eiv#ei#R#ei~O'}#ei~P$/pO'}#mO~P$/pO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#ni!t#ni#p#ni'q#ni~Oo#xO#O#xO#P#uOy#niX#ni!e#ni!P#niv#ni#R#ni~P$1xO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#si!t#si#p#si'q#si~Oo#xO#O#xO#P#uOy#siX#si!e#si!P#siv#si#R#si~P$3yOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO~P)xO!e,sO!P(VX~P2gO!P,uO~OX,vO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOX&fX!e&fX!P&fX~P)xO!e(WOX(Wa~Oy,zO!e(WOX(WX~P2gOX,{O~O!P,|O!e(WO~O!P-OO!e(WO~P2gOSVOTVOsVOtVOuVO'^UO'g$[O~P!6POP!baZca!S!ba!e!ba!tca'qca'r!ba!O!bao!bay!ba!P!baX!ba!Z!ba#R!bav!ba~O!e-TO'r(pO!P'mXX'mX~O!P-VO~O!i-`O!j-_O!l-[O'T-XOv'nP~OX-aO~O_%cO!Q!lO~P#DkO!j-gOP&gX!e&gX~P<cO!e(rOP(Ya~O!S-iO'r(pOP$Wa!e$Wa~Ow!PO(P*PO~OvbX!S!kX!ebX~O'Q#VO'T(xO~O!S-mO~O!e-oOv([X~Ov-qO~Ov-sO~P,cOv-sO~P#$iO_-uO'T&cO~O!S-vO~Ow$yOy-wO~OQ*uOw*vOy-zO}*wO$|*xO~OQ*uOo.UO~Oy._O~O!S.`O~O!j.bO'T&cO~Ov.cO~Ov.cO~PGyOQ']O^'Wa_'Wa`'Waa'Wa'T'Wa~Od.gO~OQ'XXQ'kXR'kXZ'kXd'XX}'kX#p'kX(P'kXw'kX$f'kX$|'kX['kXo'kXy'kX!l'kX!q'kX!t'kX#O'kX#P'kX'g'kX'q'kX'r'kX'x'kX'y'kX'z'kX'{'kX'|'kX'}'kX(O'kX(Q'kX(R'kX(T'kX!P'kX!e'kXX'kXP'kXv'kX!S'kX#R'kX~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t.kO#V.mO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(sP~PGaO#Q.tOR%wa#p%wa(P%waw%wa$f%wa$|%wa[%wao%way%wa}%wa!l%wa!q%wa!t%wa#O%wa#P%wa'g%wa'q%wa'r%wa'x%wa'y%wa'z%wa'{%wa'|%wa'}%wa(O%wa(Q%wa(R%wa(T%wa!P%wa!e%waX%waP%wav%wa!S%wa#R%wa~O%^.vO~PGaO(P*POR&Oa#p&Oaw&Oa$f&Oa$|&Oa[&Oao&Oay&Oa}&Oa!l&Oa!q&Oa!t&Oa#O&Oa#P&Oa'g&Oa'q&Oa'r&Oa'x&Oa'y&Oa'z&Oa'{&Oa'|&Oa'}&Oa(O&Oa(Q&Oa(R&Oa(T&Oa!P&Oa!e&OaX&OaP&Oav&Oa!S&Oa#R&Oa~O_%cO!Q!lO!j.xO(P*OO~P#DkO!e.yO(P*PO!P(uX~O!P.{O~OX.|Oy.}O(P*PO~O'Z%eOR(qP~OQ']O})sORfa#pfa(Pfawfa$ffa$|fa[faofayfa!lfa!qfa!tfa#Ofa#Pfa'gfa'qfa'rfa'xfa'yfa'zfa'{fa'|fa'}fa(Ofa(Qfa(Rfa(Tfa!Pfa!efaXfaPfavfa!Sfa#Rfa~OQ']O})sOR&Va#p&Va(P&Vaw&Va$f&Va$|&Va[&Vao&Vay&Va!l&Va!q&Va!t&Va#O&Va#P&Va'g&Va'q&Va'r&Va'x&Va'y&Va'z&Va'{&Va'|&Va'}&Va(O&Va(Q&Va(R&Va(T&Va!P&Va!e&VaX&VaP&Vav&Va!S&Va#R&Va~O!P/UO~Ow$yO$f/ZO$|*xO(P*PO~OQ!QOZ/[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOo/^O'r(pO~O#W/_OP!YiQ!YiS!YiT!YiZ!Yi[!Yi^!Yi_!Yi`!Yia!Yid!Yig!Yio!Yis!Yit!Yiu!Yiw!Yiy!Yi|!Yi}!Yi!Q!Yi!U!Yi!W!Yi!X!Yi!Z!Yi!]!Yi!l!Yi!q!Yi!t!Yi#O!Yi#P!Yi#Y!Yi#p!Yi#r!Yi#{!Yi$O!Yi$b!Yi$d!Yi$f!Yi$i!Yi$m!Yi$q!Yi$s!Yi%T!Yi%V!Yi%Z!Yi%]!Yi%^!Yi%f!Yi%j!Yi%s!Yi&z!Yi'Q!Yi'T!Yi'Z!Yi'^!Yi'g!Yi'q!Yi'r!Yi'x!Yi'y!Yi'z!Yi'{!Yi'|!Yi'}!Yi(O!Yi(P!Yi(Q!Yi(R!Yi(T!YiX!Yi!e!Yi!P!Yiv!Yi!i!Yi!j!Yi#V!Yi#R!Yi~Oy#ziX#zi!e#zi!P#ziv#zi#R#zi~P2gOy$UiX$Ui!e$Ui!P$Uiv$Ui#R$Ui~P2gOv/eO!j&bO'Q`O~P<cOw/nO}/mO~Oy!RX#pbX~Oy/oO~O#p/pO~OR+bO_+dO!Q/sO'T&iO'Z%eO~Oa/zO|!VO'Q#VO'T(ROv(cP~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(eP~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw(`Py(`P~PGaOw*vO~Oy-zO$|*xO~Oa/zO|!VO'Q#VO'T*oOv(gP~Ow+QO~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zO(R0`O~PGaOy0dO~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t0hO'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V0nO!P(jP~P%1}Ow!POy0pO#Q0rO$|*xO~OR0uO!e0sO~P#(kOR0uO!S+UO!e0sO(P*OO~OR0uOo0wO!S+UO!e0sOQ'VXZ'VX}'VX#p'VX(P'VX~OR0uOo0wO!e0sO~OR0uO!e0sO~O$f/ZO(P*PO~Ow$yO~Ow$yO$|*xO~Oo0}Oy0|O!S1OO'r(pO~O!e1POv(pX~Ov1RO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q1VO~Oo1YOQ'VXR'VXZ'VX}'VX!e'VX(P'VX~O!e1ZO(P*POR'YX~O!e1ZOR'YX~O!e1ZO(P*OOR'YX~OR1]O~O!S1^OS'wXT'wXZ'wX['wX_'wXd'wXo'wXs'wXu'wXw'wXy'wX}'wX!P'wX!e'wX!l'wX!q'wX!t'wX!y'wX#O'wX#P'wX#Q'wX#R'wX'Q'wX'Z'wX'^'wX'g'wX'r'wX'v'wX'x'wX'y'wX'z'wX'{'wX'|'wX'}'wX(O'wX(P'wX(Q'wX(R'wXX'wXv'wX~O}1_O~O!P1aO~P#KkOX1bO~P#KkOv1cO~P#KkOS,^OT,^OZ,^O['cO_1dOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~OX1fO~Oy,jO~O!e,sO!P(Va~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P&eX!e&eX~P)xO!e,sO!P(Va~OX&fa!e&fa!P&fa~P2gOX1kO~P2gO!P1mO!e(WO~OP!biZci!S!bi!e!bi!tci'qci'r!bi!O!bio!biy!bi!P!biX!bi!Z!bi#R!biv!bi~O'r(pOP!oi!S!oi!e!oi!O!oio!oiy!oi!P!oiX!oi!Z!oi#R!oiv!oi~O!j&bO!P&`X!e&`XX&`X~P<cO!e-TO!P'maX'ma~O!P1qO~Ov!RX!S!kX!e!RX~O!S1rO~O!e1sOv'oX~Ov1uO~O'T-XO~O!j1xO'T-XO~O(P*POP$Wi!e$Wi~O!S1yO'r(pOP$XX!e$XX~O!S1|O~Ov$_a!e$_a~P2gO!l(|O'Q#VO'T(xOv&hX!e&hX~O!e-oOv([a~Ov2QO~P,cOy2UO~O#p2VO~Oy2WO$|*xO~Ow*vOy2WO}*wO$|*xO~Oo2aO~Ow!POy2fO#Q2hO$|*xO~O!S2jO~Ov2lO~O#Q2mOR%wi#p%wi(P%wiw%wi$f%wi$|%wi[%wio%wiy%wi}%wi!l%wi!q%wi!t%wi#O%wi#P%wi'g%wi'q%wi'r%wi'x%wi'y%wi'z%wi'{%wi'|%wi'}%wi(O%wi(Q%wi(R%wi(T%wi!P%wi!e%wiX%wiP%wiv%wi!S%wi#R%wi~Od2nO~O^2qO!j.sO!q2rO'Q#VO'Z%eO~O(P*PO!P%{X!e%{X~O!e2sO!P(tX~O!P2uO~OQ!QOZ%rO[%qO^2wO_%cO`TOaTOd%jOg%yO}%pO!j2xO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO^2yO!j2xO(P*OO~O!P%aX!e%aX~P#4kO^2yO~O(P*POR&Oi#p&Oiw&Oi$f&Oi$|&Oi[&Oio&Oiy&Oi}&Oi!l&Oi!q&Oi!t&Oi#O&Oi#P&Oi'g&Oi'q&Oi'r&Oi'x&Oi'y&Oi'z&Oi'{&Oi'|&Oi'}&Oi(O&Oi(Q&Oi(R&Oi(T&Oi!P&Oi!e&OiX&OiP&Oiv&Oi!S&Oi#R&Oi~O_%cO!Q!lO!P&yX!e&yX~P#DkO!e.yO!P(ua~OR3QO(P*PO~O!e3ROR(rX~OR3TO~O(P*POR&Pi#p&Piw&Pi$f&Pi$|&Pi[&Pio&Piy&Pi}&Pi!l&Pi!q&Pi!t&Pi#O&Pi#P&Pi'g&Pi'q&Pi'r&Pi'x&Pi'y&Pi'z&Pi'{&Pi'|&Pi'}&Pi(O&Pi(Q&Pi(R&Pi(T&Pi!P&Pi!e&PiX&PiP&Piv&Pi!S&Pi#R&Pi~O!P3UO~O$f3VO(P*PO~Ow$yO$f3VO$|*xO(P*PO~Ow!PO!Z!YO~O!Z3aO#R3_O'r(pO~O!j&bO'Q#VO~P<cOv3eO~Ov3eO!j&bO'Q`O~P<cO!O3hO'r(pO~Ow!PO~P#9vOo3kOy3jO(P*PO~O!P3oO~P%;pOv3rO~P%;pOR0uO!S+UO!e0sO~OR0uOo0wO!S+UO!e0sO~Oa/zO|!VO'Q#VO'T(RO~O!S3uO~O!e3wOv(dX~Ov3yO~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO~PGaO!e3|O(P*PO!P(fX~O!P4OO~O!S4PO(P*OO~O!S+UO(P*PO~O!e4ROw(aXy(aX~OQ4TO~Oy2WO~Oa/zO|!VO'Q#VO'T*oO~Oo4WOw*vO}*wOv%XX!e%XX~O!e4ZOv(hX~Ov4]O~O(P4_Oy(_Xw(_X$|(_XR(_Xo(_X!e(_X~Oy4aO(P*PO~OQ!QOSVOTVO[$gO^4bO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j4cO'Z%eO~P&,sO!S4eO'r(pO~O#V4gO~P%1}O!e4hO!P(kX~O!P4jO~O!P%aX!S!aX!e%aX'r!aX~P!KgO!j&bO~P&,sO!e4hO!P(kX!S'eX'r'eX~O^2yO!j2xO~Ow!POy2fO~O_4pO!Q/sO'T&iO'Z%eOR&lX!e&lX~OR4rO!e0sO~O!S4tO~Ow$yO$|*xO(P*PO~Oy4uO~P2gOo4vOy4uO(P*PO~Ov&uX!e&uX~P!3|O!e1POv(pa~Oo4|Oy4{O(P*PO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UOR&vX!e&vX~P#DkO!e1ZOR'Ya~O!y5SO~O!P5TO~P#KkO!S1^OX'wX#R'wX~O!e,sO!P(Vi~O!P&ea!e&ea~P2gOX5WO~P2gOP!bqZcq!S!bq!e!bq!tcq'qcq'r!bq!O!bqo!bqy!bq!P!bqX!bq!Z!bq#R!bqv!bq~O'r(pO!P&`a!e&`aX&`a~O!i-`O!j-_O!l5YO'T-XOv&aX!e&aX~O!e1sOv'oa~O!S5[O~O!S5`O'r(pOP$Xa!e$Xa~O(P*POP$Wq!e$Wq~Ov$^i!e$^i~P2gOw!POy5bO#Q5dO$|*xO~Oo5gOy5fO(P*PO~Oy5iO~Oy5iO$|*xO~Oy5mO(P*PO~Ow!POy5bO~Oo5tOy5sO(P*PO~O!S5vO~O!e2sO!P(ta~O^2yO!j2xO'Z%eO~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t5zO#V5|O$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&xX!e&xX~PGaOQ!QOZ%rO[%qO^6OO_%cO`TOaTOd%jOg%yO}%pO!j6PO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(P*OO(Q%zO~PGaO!P%aa!e%aa~P#4kO^6QO~O#Q6ROR%wq#p%wq(P%wqw%wq$f%wq$|%wq[%wqo%wqy%wq}%wq!l%wq!q%wq!t%wq#O%wq#P%wq'g%wq'q%wq'r%wq'x%wq'y%wq'z%wq'{%wq'|%wq'}%wq(O%wq(Q%wq(R%wq(T%wq!P%wq!e%wqX%wqP%wqv%wq!S%wq#R%wq~O(P*POR&Oq#p&Oqw&Oq$f&Oq$|&Oq[&Oqo&Oqy&Oq}&Oq!l&Oq!q&Oq!t&Oq#O&Oq#P&Oq'g&Oq'q&Oq'r&Oq'x&Oq'y&Oq'z&Oq'{&Oq'|&Oq'}&Oq(O&Oq(Q&Oq(R&Oq(T&Oq!P&Oq!e&OqX&OqP&Oqv&Oq!S&Oq#R&Oq~O(P*PO!P&ya!e&ya~OX6SO~P2gO'Z%eOR&wX!e&wX~O!e3ROR(ra~O$f6YO(P*PO~Ow![q~P#9vO#R6]O~O!Z3aO#R6]O'r(pO~Ov6bO~O#R6fO~Oy6gO!P6hO~O!P6hO~P%;pOy6kO~Ov6kOy6gO~Ov6kO~P%;pOy6mO~O!e3wOv(da~O!S6pO~Oa/zO|!VO'Q#VO'T(ROv&oX!e&oX~O!e3|O(P*PO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&pX!e&pX~PGaO!e3|O!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw&nX!e&nXy&nX~PGaO!e4ROw(aay(aa~O!e4ZOv(ha~Oo7SOv%Xa!e%Xa~Oo7SOw*vO}*wOv%Xa!e%Xa~Oa/zO|!VO'Q#VO'T*oOv&qX!e&qX~O(P*POy$xaw$xa$|$xaR$xao$xa!e$xa~O(P4_Oy(_aw(_a$|(_aR(_ao(_a!e(_a~O!P%aa!S!aX!e%aa'r!aX~P!KgOQ!QOSVOTVO[$gO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O^7ZO~P&JUO^6QO!j6PO~O!e4hO!P(ka~O!e4hO!P(ka!S'eX'r'eX~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t7_O'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V7aO!P&sX!e&sX~P&L]O!S7cO'r(pO~Ow!POy5bO$|*xO(P*PO~O!S+UOR&la!e&la~Oo0wO!S+UOR&la!e&la~Oo0wOR&la!e&la~O(P*POR$yi!e$yi~Oy7fO~P2gOo7gOy7fO(P*PO~O(P*PORni!eni~O(P*POR&va!e&va~O(P*OOR&va!e&va~OS,^OT,^OZ,^O_,^Od,^Oo,^Os,^Ou,^Oy,^O!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O~O(P7iO(Q7iO(R7iO~P'!qO!P7kO~P#KkO!P&ei!e&ei~P2gO'r(pOv!hi!e!hi~O!S7mO~O(P*POP$Xi!e$Xi~Ov$^q!e$^q~P2gOw!POy7oO~Ow!POy7oO#Q7rO$|*xO~Oy7tO~Oy7uO~Oy7vO(P*PO~Ow!POy7oO$|*xO(P*PO~Oo7{Oy7zO(P*PO~O!e2sO!P(ti~O(P*PO!P%}X!e%}X~O!P%ai!e%ai~P#4kO^8OO~O!e8TO['bXv$`i}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[iv$`i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R#^a~P2gO#R8WO~O!Z3aO#R8XO'r(pO~Ov8[O~Oy8^O~P2gOy8`O~Oy6gO!P8aO~Ov8`Oy6gO~O!e3wOv(di~O(P*POv%Qi!e%Qi~O!e3|O!P(fi~O!e3|O(P*PO!P(fi~O(P*PO!P&pa!e&pa~O(P8hOw(bX!e(bXy(bX~O(P*PO!S$wiy$wiw$wi$|$wiR$wio$wi!e$wi~O!e4ZOv(hi~Ov%Xi!e%Xi~P2gOo8kOv%Xi!e%Xi~O!P%ai!S!aX!e%ai'r!aX~P!KgO(P*PO!P%`i!e%`i~O!e4hO!P(ki~O#V8nO~P&L]O!P&sa!S'eX!e&sa'r'eX~O(P*POR$zq!e$zq~Oy8pO~P2gOy7zO~P2gO(P8rO(Q8rO(R8rO~O(P8rO(Q8rO(R8rO~P'!qO'r(pOv!hq!e!hq~O(P*POP$Xq!e$Xq~Ow!POy8uO$|*xO(P*PO~Ow!POy8uO~Oy8xO~P2gOy8zO~P2gOo8|Oy8zO(P*PO~OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[qv$`q}#[q!i#[q!j#[q!l#[q!q#[q#V#[q'Q#[q'T#[q'^#[q'g#[q~O!e9PO['bXv$`q}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'2fO#R9UO~O!Z3aO#R9UO'r(pO~Oy9WO~O(P*POv%Qq!e%Qq~O!e3|O!P(fq~O(P*PO!P&pi!e&pi~O(P8hOw(ba!e(bay(ba~Ov%Xq!e%Xq~P2gO!P&si!S'eX!e&si'r'eX~O(P*PO!P%`q!e%`q~Oy9]O~P2gO(P9^O(Q9^O(R9^O~O'r(pOv!hy!e!hy~Ow!POy9_O~Ow!POy9_O$|*xO(P*PO~Oy9aO~P2gOQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[yv$`y}#[y!i#[y!j#[y!l#[y!q#[y#V#[y'Q#[y'T#[y'^#[y'g#[y~O!e9dO['bXv$`y}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'9eO!e9eO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R9hO~O(P*PO!P&pq!e&pq~Ov%Xy!e%Xy~P2gOw!POy9iO~Oy9jO~P2gOQ#[!RS#[!RT#[!R[#[!R^#[!R_#[!R`#[!Ra#[!Rd#[!Rs#[!Rt#[!Ru#[!Rv$`!R}#[!R!i#[!R!j#[!R!l#[!R!q#[!R#V#[!R'Q#[!R'T#[!R'^#[!R'g#[!R~O!e9kO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[q}#[q!i#[q!j#[q!l#[q!q#[q!t'bX#V#[q'Q#[q'T#[q'^#[q'g#[q'q'bX(Q'bX~P@[O!e9nO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[y}#[y!i#[y!j#[y!l#[y!q#[y!t'bX#V#[y'Q#[y'T#[y'^#[y'g#[y'q'bX(Q'bX~P@[OwbX~P$|OwjX}jX!tbX'qbX~P!6mOZ'SXd'XXo'SXw'kX!t'SX'q'SX'r'SX~O['SXd'SXw'SX}'SX!l'SX!q'SX#O'SX#P'SX#p'SX'g'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SX~P'GTOP'SX}'kX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTO^9qO_9qO`9qOa9qO'T9oO~O!j:OO~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXw#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sX~P'IxO#Q$uO~P!.cO}'kXP'SX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTOo#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qX~P!.cOo#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zX~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#saw#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#sa~P'IxOo:YO#O:YO#P:VOw#sa~P!B}Ow$Ua~P#9vOQ'XXd'XX}iX~OQlXdlX}jX~O^:sO_:sO`:sOa:sO'T:_O~OQ'XXd'XX}hX~Ow#qa~P#9vOw#za~P#9vO!S&_Oo#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#za~P!.cO#Q*eO~P!.cOw#ci~P#9vO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#ei~O'g#ei(P#ei~P((}O'g#gO(P#gO~P((}O[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#ei~O!q#ei~P(*yO!q#jO~P(*yO[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#ei~O'r#ei~P(,rO'r#lO~P(,rO[#}O}#zO!q#jO#P:VO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#ei~O'}#ei~P(.kO'}#mO~P(.kOo:YO#O:YO#P:VOw#ni~P$1xOo:YO#O:YO#P:VOw#si~P$3yOQ'XXd'XX}'kX~Ow#zi~P#9vOw$Ui~P#9vOd9}O~Ow#ca~P#9vOd:uO~OU'x_'v'P'O'^s!y'^'T'Z~",
      goto: "$Ku(vPPPPPPP(wPP)OPP)^PPPP)d-hP0f5aP7R7R8v7R>wD_DpPDvHQPPPPPPK`P! P! _PPPPP!!VP!$oP!$oPP!&oP!(rP!(w!)n!*f!*f!*f!(w!+]P!(w!.Q!.TPP!.ZP!(w!(w!(w!(wP!(w!(wP!(w!(w!.y!/dP!/dJ}J}J}PPPP!/d!.y!/sPP!$oP!0^!0a!0g!1h!1t!3t!3t!5r!7t!1t!1t!9p!;_!=O!>k!@U!Am!CS!De!1t!1tP!1tP!1t!1t!Et!1tP!Ge!1t!1tP!Ie!1tP!1t!7t!7t!1t!7t!1t!Kl!Mt!Mw!7t!1t!Mz!M}!M}!M}!NR!$oP!$oP!$oP! P! PP!N]! P! PP!Ni# }! PP! PP#!^##c##k#$Z#$_#$e#$e#$mP#&s#&s#&y#'o#'{! PP! PP#(]#(l! PP! PPP#(x#)W#)d#)|#)^! P! PP! P! P! PP#*S#*S#*Y#*`#*S#*S! P! PP#*m#*v#+Q#+Q#,x#.l#.x#.x#.{#.{5a5a5a5a5a5a5a5aP5a#/O#/U#/p#1{#2R#2b#6^#6d#6j#6|#7W#8w#9R#9b#9h#9n#9x#:S#:Y#:g#:m#:s#:}#;]#;g#=u#>R#>`#>f#>n#>u#?PPPPPPPP#?V#BaP#F^#Jx#Ls#Nr$&^P$&aPPP$)_$)h$)z$/U$1d$1m$3fP!(w$4`$7r$:i$>T$>^$>c$>fPPP$>i$A`$A|P$BaPPPPPPPPPP$BvP$EU$EX$E[$Eb$Ee$Eh$Ek$En$Et$HO$HR$HU$HX$H[$H_$Hb$He$Hh$Hk$Hn$Jt$Jw$Jz#*S$KW$K^$Ka$Kd$Kh$Kl$Ko$KrQ!tPT'V!s'Wi!SOlm!P!T$T$W$y%b)U*f/gQ'i#QR,n'l(OSOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%X%_%b&U&Y&[&b&u&z&|'P'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n+z,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1P1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:gS(z$v-oQ*p&eQ*t&hQ-k(yQ-y)ZW0Z+Q0Y4Z7UR4Y0[&w!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#r]Ofgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hb#[b#Q$y'l(b)S)U*Z-t!h$bo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m$b%k!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g!W:y!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:|%n$_%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g$e%l!Q!n$O$u%n%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g'hZOY[fgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r%_%b%i%j&U&Y&[&b&u'a'}(W(Y(d(e(f(j(o(p(r(|)i)p)q*f*i*k*l+Z+n,s,z-R-T-g-m.i.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:x$^%l!Q!n$O$u%n%o%p%q%y%{&P&p&r(q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ&j!hQ&k!iQ&l!jQ&m!kQ&s!oQ)[%QQ)]%RQ)^%SQ)_%TQ)b%WQ+`&oS,R']1ZQ.W)`S/r*u4TR4n0s+yTOY[bfgilmop!O!P!Q!T!Y!Z![!_!`!c!n!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$O$T$W$`$a$e$g$h$q$r$u$y%X%_%b%i%j%n%o%p%q%y%{&P&U&Y&[&b&o&p&r&u&z&|'P']'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(q(r(|)S)U)i)p)q)s)x)y*O*P*R*V*Z*[*^*e*f*i*k*l*n*w*x+U+V+Z+h+n+o+z+},q,s,z-R-T-g-i-m-t-v.U.`.i.p.t.x.y.}/Z/[/^/b/d/g/{/}0`0e0g0m0r0w0}1O1P1Y1Z1h1r1y1|2a2h2j2m2s2v3V3_3a3f3h3k3u3{3|4R4U4W4_4c4e4h4t4v4|5[5`5d5g5t5v6R6Y6]6a6p6v6x7S7^7c7g7m7r7{8W8X8g8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:xQ'[!xQ'h#PQ)l%gU)r%m*T*WR.f)kQ,T']R5P1Z#t%s!Q!n$O$u%p%q&P&p&r(q)x)y*O*R*V*[*^*e*n*w+V+h+o+}-i-v.U.`.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2v3V3u3{3|4U4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)x%oQ+_&oQ,U']n,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7kS.q)s2sQ/O*PQ/Q*SQ/q*uS0Q*x4RQ0a+U[0o+Z.j0g4h5y7^Q2v.pS4d0e2rQ4m0sQ5Q1ZQ6T3RQ6z4PQ7O4TQ7X4_R9Y8h&jVOfgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u']'}(W(Y(b(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1Z1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fU&g!g%P%[o,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7k$nsOfgilm!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y'}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9z9{:O:P:Q:R:S:T:U:V:W:X:Y:eS$tp9xS&O!W#bS&Q!X#cQ&`!bQ*_&RQ*a&VS*d&[:fQ*h&^Q,T']Q-j(wQ/i*jQ0p+[S2f.X0qQ3]/_Q3^/`Q3g/hQ3i/kQ5P1ZU5b2R2g4lU7o5c5e5rQ8]6dS8u7p7qS9_8v8wR9i9`i{Ob!O!P!T$y%_%b)S)U)i-thxOb!O!P!T$y%_%b)S)U)i-tW/v*v/t3w6qQ/}*wW0[+Q0Y4Z7UQ3{/{Q6x3|R8g6v!h$do!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ&d!dQ&f!fQ&n!mW&x!q%X&|1PQ'S!rQ)X$}Q)Y%OQ)a%VU)d%Y'T'UQ*s&hS+s&z'PS-Y(k1sQ-u)WQ-x)ZS.a)e)fS0x+c/sQ1S+zQ1W+{S1v-_-`Q2k.bQ3s/pQ5]1xR5h2V${sOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$zsOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR3]/_V&T!Y!`*i!i$lo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!k$^o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!i$co!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&e^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR(l$fQ-[(kR5Y1sQ(S#|S({$v-oS-Z(k1sQ-l(yW/u*v/t3w6qS1w-_-`Q3v/vR5^1xQ'e#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,o'mk,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ'f#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,p'mR*g&]X/c*f/d/g3f!}aOb!O!P!T#z$v$y%_%b'}(y)S)U)i)s*f*v*w+Q+Z,s-o-t.j/b/d/g/t/{0Y0g1h2s3f3w3|4Z4h5y6a6q6v7U7^Q3`/aQ6_3bQ8Y6`R9V8Z${rOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#nfOfglmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!T9u!Y!_!`*i*l/^3h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#rfOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!X9u!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$srOfglmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#U#oh#d$P$Q$V$s%^&W&X'q't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b}:P&S&]/k3[6d:[:]:c:d:h:j:k:l:m:n:o:p:q:r:v:w:{#W#ph#d$P$Q$V$s%^&W&X'q'r't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b!P:Q&S&]/k3[6d:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{#S#qh#d$P$Q$V$s%^&W&X'q'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b{:R&S&]/k3[6d:[:]:c:d:h:k:l:m:n:o:p:q:r:v:w:{#Q#rh#d$P$Q$V$s%^&W&X'q'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9by:S&S&]/k3[6d:[:]:c:d:h:l:m:n:o:p:q:r:v:w:{#O#sh#d$P$Q$V$s%^&W&X'q'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bw:T&S&]/k3[6d:[:]:c:d:h:m:n:o:p:q:r:v:w:{!|#th#d$P$Q$V$s%^&W&X'q'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bu:U&S&]/k3[6d:[:]:c:d:h:n:o:p:q:r:v:w:{!x#vh#d$P$Q$V$s%^&W&X'q'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bq:W&S&]/k3[6d:[:]:c:d:h:p:q:r:v:w:{!v#wh#d$P$Q$V$s%^&W&X'q'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bo:X&S&]/k3[6d:[:]:c:d:h:q:r:v:w:{$]#{h#`#d$P$Q$V$s%^&S&W&X&]'q'r's't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n/k0z1i1l1}3P3[4w5V5a6^6d6e7R7e7h7s7y8j8q8{9[9b:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{${jOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$v!aOfgilmp!O!P!T!Y!Z!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ&Y![Q&Z!]R:e9{#rpOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hQ&[!^!W9x!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:f:zR$moR-f(rR$wqT(}$v-oQ/f*fS3d/d/gR6c3fQ3m/mQ3p/nQ6i3nR6l3qQ$zwQ)V${Q*q&fQ+f&qQ+i&sQ-w)YW.Z)b+j+k+lS/X*]+gW2b.W.[.].^U3W/Y/]0yU5o2c2d2eS6W3X3ZS7w5p5qS8Q6V6XQ8y7xS8}8R8SR9c9O^|O!O!P!T%_%b)iX)R$y)S)U-tQ&r!nQ*^&PQ*|&jQ+P&kQ+T&lQ+W&mQ+]&nQ+l&sQ-})[Q.Q)]Q.T)^Q.V)_Q.Y)aQ.^)bQ2S-uQ2e.WR4U0VU+a&o*u4TR4o0sQ+Y&mQ+k&sS.])b+l^0v+_+`/q/r4m4n7OS2d.W.^S4Q0R0SR5q2eS0R*x4RQ0a+UR7X4_U+d&o*u4TR4p0sQ*z&jQ+O&kQ+S&lQ+g&qQ+j&sS-{)[*|S.P)]+PS.S)^+TU.[)b+k+lQ/Y*]Q0X*{Q0q+[Q2X-|Q2Y-}Q2].QQ2_.TU2c.W.].^Q2g.XS3Z/]0yS5c2R4lQ5j2ZS5p2d2eQ6X3XS7q5e5rQ7x5qQ8R6VQ8v7pQ9O8SR9`8wQ0T*xR6|4RQ*y&jQ*}&kU-z)[*z*|U.O)]+O+PS2W-{-}S2[.P.QQ4X0ZQ5i2YQ5k2]R7T4YQ/w*vQ3t/tQ6r3wR8d6qQ*{&jS-|)[*|Q2Z-}Q4X0ZR7T4YQ+R&lU.R)^+S+TS2^.S.TR5l2_Q0]+QQ4V0YQ7V4ZR8l7UQ+[&nS.X)a+]S2R-u.YR5e2SQ0i+ZQ4f0gQ7`4hR8m7^Q.m)sQ0i+ZQ2p.jQ4f0gQ5|2sQ7`4hQ7}5yR8m7^Q0i+ZR4f0gX'O!q%X&|1PX&{!q%X&|1PW'O!q%X&|1PS+u&z'PR1U+z_|O!O!P!T%_%b)iQ%a!PS)h%_%bR.d)i$^%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ*U%yR*X%{$c%n!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gW)t%m%x*T*WQ.e)jR2{.vR.m)sR5|2sQ'W!sR,O'WQ!TOQ$TlQ$WmQ%b!P[%|!T$T$W%b)U/gQ)U$yR/g*f$b%i!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g[)n%i)p.i:`:t:xQ)p%jQ.i)qQ:`%nQ:t:aR:x:uQ!vUR'Y!vS!OO!TU%]!O%_)iQ%_!PR)i%b#rYOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hh!yY!|#U$`'a'n(d,q-R9s9|:gQ!|[b#Ub#Q$y'l(b)S)U*Z-t!h$`o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ'a!}Q'n#ZQ(d$aQ,q'oQ-R(e!W9s!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ9|9tR:g9}Q-U(gR1p-UQ1t-[R5Z1tQ,c'bQ,f'cQ,h'dW1`,c,f,h5UR5U1_Q/d*fS3c/d3fR3f/gfbO!O!P!T$y%_%b)S)U)i-tp#Wb'}(y.j/b/t/{0Y0g1h5y6a6q6v7U7^Q'}#zS(y$v-oQ.j)sW/b*f/d/g3fQ/t*vQ/{*wQ0Y+QQ0g+ZQ1h,sQ5y2sQ6q3wQ6v3|Q7U4ZR7^4hQ,t(OQ1g,rT1j,t1gS(X$Q([Q(^$VU,x(X(^,}R,}(`Q(s$mR-h(sQ-p)OR2P-pQ3n/mQ3q/nT6j3n3qQ)S$yS-r)S-tR-t)UQ4`0aR7Y4``0t+^+_+`+a+d/q/r7OR4q0tQ8i6zR9Z8iQ4S0TR6}4SQ3x/wQ6n3tT6s3x6nQ3}/|Q6t3zU6y3}6t8eR8e6uQ4[0]Q7Q4VT7W4[7QhzOb!O!P!T$y%_%b)S)U)i-tQ$|xW%Zz$|%f)v$b%f!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR)v%nS4i0i0nS7]4f4gT7b4i7]W&z!q%X&|1PS+r&z+zR+z'PQ1Q+wR4z1QU1[,S,T,UR5R1[S3S/Q7OR6U3SQ2t.mQ5x2pT5}2t5xQ.z)zR3O.z^_O!O!P!T%_%b)iY#Xb$y)S)U-t$l#_fgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!h$io!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'j#Q'lQ-P(bR/V*Z&v!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!{Y[#U#Z9s9tW&{!q%X&|1P['`!|!}'n'o9|9}S(c$`$aS+t&z'PU,X'a,q:gS-Q(d(eQ1T+zR1n-RS%t!Q&oQ&q!nQ(V$OQ(w$uS)w%o.pQ)z%pQ)}%qS*]&P&rQ+e&pQ,S']Q-d(qQ.l)sU.w)x)y2vS/O*O*PQ/P*RQ/T*VQ/W*[Q/]*^Q/`*eQ/l*nQ/|*wS0S*x4RQ0a+UQ0c+VQ0y+hQ0{+oQ1X+}Q1{-iQ2T-vQ2`.UQ2i.`Q2z.tQ2|.xQ2}.yQ3X/ZQ3Y/[S3z/{/}Q4^0`Q4l0rQ4s0wQ4x1OQ4}1YQ5O1ZQ5_1yQ5n2aQ5r2hQ5u2jQ5w2mQ5{2sQ6V3VQ6o3uQ6u3{Q6w3|Q7P4UQ7X4_Q7[4eQ7d4tQ7n5`Q7p5dQ7|5vQ8P6RQ8S6YQ8c6pS8f6v6xQ8o7cQ8w7rR9X8g$^%m!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)j%nQ*T%yR*W%{$y%h!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x'pWOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$x%g!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x_&y!q%X&z&|'P+z1PR,V']$zrOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!j$]o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ,T']R5P1Z_}O!O!P!T%_%b)i^|O!O!P!T%_%b)iQ#YbX)R$y)S)U-tbhO!O!T3_6]8W8X9U9hS#`f9uQ#dgQ$PiQ$QlQ$VmQ$spW%^!P%_%b)iU&S!Y!`*iQ&W!ZQ&X![Q&]!_Q'q#eQ'r#oS's#p:QQ't#qQ'u#rQ'v#sQ'w#tQ'x#uQ'y#vQ'z#wQ'{#xQ'|#yQ(O#zQ(U#}Q([$TQ(`$WQ*b&YQ*c&[Q,r'}Q,w(WQ,y(YQ-n(|Q/k*lQ0z+nQ1i,sQ1l,zQ1}-mQ3P.}Q3[/^Q4w0}Q5V1hQ5a1|Q6^3aQ6d3hQ6e3kQ7R4WQ7e4vQ7h4|Q7s5gQ7y5tQ8j7SQ8q7gQ8{7{Q9[8kQ9b8|Q:[9wQ:]9xQ:c9zQ:d9{Q:h:OQ:i:PQ:j:RQ:k:SQ:l:TQ:m:UQ:n:VQ:o:WQ:p:XQ:q:YQ:r:ZQ:v:eQ:w:fR:{9v^tO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6[3_Q8V6]Q9R8WQ9T8XQ9g9UR9m9hQ&V!YQ&^!`R/h*iQ$joQ&a!cQ&t!pU(g$e$g(jS(n$h0eQ(u$qQ(v$rQ*`&UQ*m&bQ+p&uQ-S(fS-b(o4cQ-c(pQ-e(rW/a*f/d/g3fQ/j*kW0f+Z0g4h7^Q1o-TQ1z-gQ3b/bQ4k0mQ5X1rQ7l5[Q8Z6aR8t7m!h$_o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mR-P(b'qXOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$zqOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$fo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&d^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!zY[$`$a9s9t['_!|!}(d(e9|9}W)o%i%j:`:aU,W'a-R:gW.h)p)q:t:uT2o.i:xQ(i$eQ(m$gR-W(jV(h$e$g(jR-^(kR-](k$znOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$ko!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'g#O'pj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ,m'jQ.u)uR8_6f`,b'b'c'd,c,f,h1_5UQ1e,lX3l/m/n3n3qj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ7j5TR8s7k^uO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6Z3_Q8U6]Q9Q8WQ9S8XQ9f9UR9l9hR(Q#zR(P#zQ$SlR(]$TR$ooR$noR)Q$vR)P$vQ)O$vR2O-ohwOb!O!P!T$y%_%b)S)U)i-t$l!lz!Q!n$O$u$|%f%n%o%p%q%y%{&P&o&p&r'](q)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR${xR0b+UR0W*xR0U*xR6{4PR/y*vR/x*vR0P*wR0O*wR0_+QR0^+Q%XyObxz!O!P!Q!T!n$O$u$y$|%_%b%f%n%o%p%q%y%{&P&o&p&r'](q)S)U)i)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-t-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR0k+ZR0j+ZQ'R!qQ)c%XQ+w&|R4y1PX'Q!q%X&|1PR+y&|R+x&|T/S*S4TT/R*S4TR.o)sR.n)sR){%p",
      nodeNames: "\u26A0 | < > RawString Float LineComment BlockComment SourceFile ] InnerAttribute ! [ MetaItem self Metavariable super crate Identifier ScopedIdentifier :: QualifiedScope AbstractType impl SelfType MetaType TypeIdentifier ScopedTypeIdentifier ScopeIdentifier TypeArgList TypeBinding = Lifetime String Escape Char Boolean Integer } { Block ; ConstItem Vis pub ( in ) const BoundIdentifier : UnsafeBlock unsafe AsyncBlock async move IfExpression if LetDeclaration let LiteralPattern ArithOp MetaPattern SelfPattern ScopedIdentifier TuplePattern ScopedTypeIdentifier , StructPattern FieldPatternList FieldPattern ref mut FieldIdentifier .. RefPattern SlicePattern CapturedPattern ReferencePattern & MutPattern RangePattern ... OrPattern MacroPattern ParenthesizedTokens TokenBinding Identifier TokenRepetition ArithOp BitOp LogicOp UpdateOp CompareOp -> => ArithOp BracketedTokens BracedTokens _ else MatchExpression match MatchBlock MatchArm Attribute Guard UnaryExpression ArithOp DerefOp LogicOp ReferenceExpression TryExpression BinaryExpression ArithOp ArithOp BitOp BitOp BitOp BitOp LogicOp LogicOp AssignmentExpression TypeCastExpression as ReturnExpression return RangeExpression CallExpression ArgList AwaitExpression await FieldExpression GenericFunction BreakExpression break LoopLabel ContinueExpression continue IndexExpression ArrayExpression TupleExpression MacroInvocation UnitExpression ClosureExpression ParamList Parameter Parameter ParenthesizedExpression StructExpression FieldInitializerList ShorthandFieldInitializer FieldInitializer BaseFieldInitializer MatchArm WhileExpression while LoopExpression loop ForExpression for MacroInvocation MacroDefinition macro_rules MacroRule EmptyStatement ModItem mod DeclarationList AttributeItem ForeignModItem extern StructItem struct TypeParamList ConstrainedTypeParameter TraitBounds HigherRankedTraitBound RemovedTraitBound OptionalTypeParameter ConstParameter WhereClause where LifetimeClause TypeBoundClause FieldDeclarationList FieldDeclaration OrderedFieldDeclarationList UnionItem union EnumItem enum EnumVariantList EnumVariant TypeItem type FunctionItem default fn ParamList Parameter SelfParameter VariadicParameter VariadicParameter ImplItem TraitItem trait AssociatedType LetDeclaration UseDeclaration use ScopedIdentifier UseAsClause ScopedIdentifier UseList ScopedUseList UseWildcard ExternCrateDeclaration StaticItem static ExpressionStatement ExpressionStatement GenericType FunctionType ForLifetimes ParamList VariadicParameter Parameter VariadicParameter Parameter ReferenceType PointerType TupleType UnitType ArrayType MacroInvocation EmptyType DynamicType dyn BoundedType",
      maxTerm: 359,
      nodeProps: [
        ["isolate", -4, 4, 6, 7, 33, ""],
        ["group", -42, 4, 5, 14, 15, 16, 17, 18, 19, 33, 35, 36, 37, 40, 51, 53, 56, 101, 107, 111, 112, 113, 122, 123, 125, 127, 128, 130, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 148, 149, 155, 157, 159, "Expression", -16, 22, 24, 25, 26, 27, 222, 223, 230, 231, 232, 233, 234, 235, 236, 237, 239, "Type", -20, 42, 161, 162, 165, 166, 169, 170, 172, 188, 190, 194, 196, 204, 205, 207, 208, 209, 217, 218, 220, "Statement", -17, 49, 60, 62, 63, 64, 65, 68, 74, 75, 76, 77, 78, 80, 81, 83, 84, 99, "Pattern"],
        ["openedBy", 9, "[", 38, "{", 47, "("],
        ["closedBy", 12, "]", 39, "}", 45, ")"]
      ],
      propSources: [rustHighlighting],
      skippedNodes: [0, 6, 7, 240],
      repeatNodeCount: 32,
      tokenData: "$%h_R!XOX$nXY5gYZ6iZ]$n]^5g^p$npq5gqr7Xrs9cst:Rtu;Tuv>vvwAQwxCbxy!+Tyz!,Vz{!-X{|!/_|}!0g}!O!1i!O!P!3v!P!Q!8[!Q!R!Bw!R![!Dr![!]#+q!]!^#-{!^!_#.}!_!`#1b!`!a#3o!a!b#6S!b!c#7U!c!}#8W!}#O#:T#O#P#;V#P#Q#Cb#Q#R#Dd#R#S#8W#S#T$n#T#U#8W#U#V#El#V#f#8W#f#g#Ic#g#o#8W#o#p$ S#p#q$!U#q#r$$f#r${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$nU$u]'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU%uV'_Q'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S&aV'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S&yVOz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`S'cVOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[S'{UOz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`S(bUOz(t{!P(t!P!Q(_!Q;'S(t;'S;=`*a<%lO(tS(wVOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^S)eV'PS'OSOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^S)}UOz(tz{)z{!P(t!Q;'S(t;'S;=`*a<%lO(tS*dP;=`<%l(tS*jP;=`<%l)^S*pP;=`<%l'`S*vP;=`<%l&[S+OO'PSU+T]'_QOY+|YZ-xZr+|rs'`sz+|z{+O{!P+|!P!Q4y!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|U,R]'_QOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU-P]'_QOY+|YZ-xZr+|rs'`sz+|z{.d{!P+|!P!Q/Z!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|U-}V'_QOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[Q.iV'_QOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.dQ/TO'_QQ/WP;=`<%l.dU/`]'_QOY0XYZ3uZr0Xrs(tsz0Xz{.d{!P0X!P!Q/Z!Q#O0X#O#P(t#P;'S0X;'S;=`4a<%lO0XU0^]'_QOY1VYZ2XZr1Vrs)^sz1Vz{2w{!P1V!P!Q/Z!Q#O1V#O#P)^#P;'S1V;'S;=`4g<%lO1VU1`]'_Q'PS'OSOY1VYZ2XZr1Vrs)^sz1Vz{2w{!P1V!P!Q/Z!Q#O1V#O#P)^#P;'S1V;'S;=`4g<%lO1VU2bV'_Q'PS'OSOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^U2|]'_QOY0XYZ3uZr0Xrs(tsz0Xz{2w{!P0X!P!Q.d!Q#O0X#O#P(t#P;'S0X;'S;=`4a<%lO0XU3zV'_QOz)^z{)z{!P)^!P!Q(_!Q;'S)^;'S;=`*g<%lO)^U4dP;=`<%l0XU4jP;=`<%l1VU4pP;=`<%l+|U4vP;=`<%l$nU5QV'_Q'PSOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.d_5p]'_Q&|X'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_6rV'_Q&|X'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_7b_ZX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_8j]#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_9lV']Q'OS'^XOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_:[]'QX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_;^i'_Q'vW'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!c$n!c!}<{!}#O$n#O#P&[#P#R$n#R#S<{#S#T$n#T#o<{#o${$n${$|<{$|4w$n4w5b<{5b5i$n5i6S<{6S;'S$n;'S;=`4s<%lO$n_=Uj'_Q_X'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![<{![!c$n!c!}<{!}#O$n#O#P&[#P#R$n#R#S<{#S#T$n#T#o<{#o${$n${$|<{$|4w$n4w5b<{5b5i$n5i6S<{6S;'S$n;'S;=`4s<%lO$n_?P_(TP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_@X]#OX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_AZa!qX'_Q'OSOY$nYZ%nZr$nrs&[sv$nvwB`wz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Bi]'}X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Cik'_Q'OSOYE^YZGfZrE^rsHvswE^wxFdxzE^z{Ih{!PE^!P!QKl!Q!cE^!c!}Lp!}#OE^#O#P!!l#P#RE^#R#SLp#S#TE^#T#oLp#o${E^${$|Lp$|4wE^4w5bLp5b5iE^5i6SLp6S;'SE^;'S;=`!*}<%lOE^_Ee_'_Q'OSOY$nYZ%nZr$nrs&[sw$nwxFdxz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Fm]'_Q'OSsXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_GmX'_Q'OSOw&[wxHYxz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]HaV'OSsXOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]H{X'OSOw&[wxHYxz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_Im_'_QOY+|YZ-xZr+|rs'`sw+|wxJlxz+|z{+O{!P+|!P!Q4y!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_Js]'_QsXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_Kq_'_QOY+|YZ-xZr+|rs'`sw+|wxJlxz+|z{.d{!P+|!P!Q/Z!Q#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_Lyl'_Q'OS'ZXOY$nYZ%nZr$nrs&[sw$nwxFdxz$nz{+O{!P$n!P!Q,z!Q![Nq![!c$n!c!}Nq!}#O$n#O#P&[#P#R$n#R#SNq#S#T$n#T#oNq#o${$n${$|Nq$|4w$n4w5bNq5b5i$n5i6SNq6S;'S$n;'S;=`4s<%lO$n_Nzj'_Q'OS'ZXOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![Nq![!c$n!c!}Nq!}#O$n#O#P&[#P#R$n#R#SNq#S#T$n#T#oNq#o${$n${$|Nq$|4w$n4w5bNq5b5i$n5i6SNq6S;'S$n;'S;=`4s<%lO$n]!!qZ'OSOzHvz{!#d{!PHv!P!Q!$n!Q#iHv#i#j!%Z#j#lHv#l#m!'V#m;'SHv;'S;=`!*w<%lOHv]!#gXOw'`wx!$Sxz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`]!$XVsXOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[]!$qWOw'`wx!$Sxz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`]!%`^'OSOz&[z{&v{!P&[!P!Q'x!Q![!&[![!c&[!c!i!&[!i#T&[#T#Z!&[#Z#o&[#o#p!({#p;'S&[;'S;=`*s<%lO&[]!&a['OSOz&[z{&v{!P&[!P!Q'x!Q![!'V![!c&[!c!i!'V!i#T&[#T#Z!'V#Z;'S&[;'S;=`*s<%lO&[]!'[['OSOz&[z{&v{!P&[!P!Q'x!Q![!(Q![!c&[!c!i!(Q!i#T&[#T#Z!(Q#Z;'S&[;'S;=`*s<%lO&[]!(V['OSOz&[z{&v{!P&[!P!Q'x!Q![Hv![!c&[!c!iHv!i#T&[#T#ZHv#Z;'S&[;'S;=`*s<%lO&[]!)Q['OSOz&[z{&v{!P&[!P!Q'x!Q![!)v![!c&[!c!i!)v!i#T&[#T#Z!)v#Z;'S&[;'S;=`*s<%lO&[]!){^'OSOz&[z{&v{!P&[!P!Q'x!Q![!)v![!c&[!c!i!)v!i#T&[#T#Z!)v#Z#q&[#q#rHv#r;'S&[;'S;=`*s<%lO&[]!*zP;=`<%lHv_!+QP;=`<%lE^_!+^]}X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!,`]!PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!-`_(QX'_QOY+|YZ-xZr+|rs'`sz+|z{+O{!P+|!P!Q4y!Q!_+|!_!`!._!`#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_!.f]#OX'_QOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!/h_(PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!0p]!eX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!1r`'gX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`!a!2t!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!2}]#QX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!4P^(OX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!O$n!O!P!4{!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!5U`!lX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!O$n!O!P!6W!P!Q,z!Q!_$n!_!`!7Y!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!6a]!tX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nV!7c]'qP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!8c_'_Q'xXOY+|YZ-xZr+|rs'`sz+|z{!9b{!P+|!P!Q!:O!Q!_+|!_!`!._!`#O+|#O#P'`#P;'S+|;'S;=`4m<%lO+|_!9iV&}]'_QOY.dYZ/OZr.ds#O.d#P;'S.d;'S;=`/T<%lO.d_!:V]'_QUXOY!;OYZ3uZr!;Ors!>jsz!;Oz{!Aq{!P!;O!P!Q!:O!Q#O!;O#O#P!>j#P;'S!;O;'S;=`!Bk<%lO!;O_!;V]'_QUXOY!<OYZ2XZr!<Ors!=Ssz!<Oz{!@q{!P!<O!P!Q!:O!Q#O!<O#O#P!=S#P;'S!<O;'S;=`!Bq<%lO!<O_!<Z]'_QUX'PS'OSOY!<OYZ2XZr!<Ors!=Ssz!<Oz{!@q{!P!<O!P!Q!:O!Q#O!<O#O#P!=S#P;'S!<O;'S;=`!Bq<%lO!<O]!=]XUX'PS'OSOY!=SYZ)^Zz!=Sz{!=x{!P!=S!P!Q!?[!Q;'S!=S;'S;=`!@k<%lO!=S]!=}XUXOY!>jYZ(tZz!>jz{!=x{!P!>j!P!Q!?|!Q;'S!>j;'S;=`!@e<%lO!>j]!>oXUXOY!=SYZ)^Zz!=Sz{!=x{!P!=S!P!Q!?[!Q;'S!=S;'S;=`!@k<%lO!=S]!?aXUXOY!>jYZ(tZz!>jz{!?|{!P!>j!P!Q!?[!Q;'S!>j;'S;=`!@e<%lO!>jX!@RSUXOY!?|Z;'S!?|;'S;=`!@_<%lO!?|X!@bP;=`<%l!?|]!@hP;=`<%l!>j]!@nP;=`<%l!=S_!@x]'_QUXOY!;OYZ3uZr!;Ors!>jsz!;Oz{!@q{!P!;O!P!Q!Aq!Q#O!;O#O#P!>j#P;'S!;O;'S;=`!Bk<%lO!;OZ!AxX'_QUXOY!AqYZ/OZr!Aqrs!?|s#O!Aq#O#P!?|#P;'S!Aq;'S;=`!Be<%lO!AqZ!BhP;=`<%l!Aq_!BnP;=`<%l!;O_!BtP;=`<%l!<O_!CQjuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![!Dr![#O$n#O#P&[#P#R$n#R#S!Dr#S#U$n#U#V#!}#V#]$n#]#^!FZ#^#c$n#c#d#%u#d#i$n#i#j!FZ#j#l$n#l#m#(g#m;'S$n;'S;=`4s<%lO$n_!D{duX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![!Dr![#O$n#O#P&[#P#R$n#R#S!Dr#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_!Fbg'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R$n!R!S!Gy!S!T$n!T!U!K_!U!W$n!W!X!Le!X!Y$n!Y!Z!J]!Z#O$n#O#P&[#P#g$n#g#h!Mk#h;'S$n;'S;=`4s<%lO$n_!HQa'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!S$n!S!T!IV!T!W$n!W!X!J]!X#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!I^_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y$n!Y!Z!J]!Z#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Jf]uX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Kf_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!S$n!S!T!J]!T#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Ll_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!U$n!U!V!J]!V#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_!Mr_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#]$n#]#^!Nq#^;'S$n;'S;=`4s<%lO$n_!Nx_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#n$n#n#o# w#o;'S$n;'S;=`4s<%lO$n_#!O_'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P#X$n#X#Y!J]#Y;'S$n;'S;=`4s<%lO$n_##Ua'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R#$Z!R!S#$Z!S#O$n#O#P&[#P#R$n#R#S#$Z#S;'S$n;'S;=`4s<%lO$n_#$deuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!R#$Z!R!S#$Z!S#O$n#O#P&[#P#R$n#R#S#$Z#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#%|`'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y#'O!Y#O$n#O#P&[#P#R$n#R#S#'O#S;'S$n;'S;=`4s<%lO$n_#'XduX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!Y#'O!Y#O$n#O#P&[#P#R$n#R#S#'O#S#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#(nd'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#)|![!c$n!c!i#)|!i#O$n#O#P&[#P#R$n#R#S#)|#S#T$n#T#Z#)|#Z;'S$n;'S;=`4s<%lO$n_#*VhuX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#)|![!c$n!c!i#)|!i#O$n#O#P&[#P#R$n#R#S#)|#S#T$n#T#Z#)|#Z#]$n#]#^!FZ#^#i$n#i#j!FZ#j;'S$n;'S;=`4s<%lO$n_#+z_!SX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![$n![!]#,y!]#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#-S]dX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#.U]yX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#/W`#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!^$n!^!_#0Y!_!`8a!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#0c_'yX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#1k`oX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`!a#2m!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#2v]#RX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#3x`#PX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`8a!`!a#4z!a#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#5T_'zX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#6]](RX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nV#7_]'pP'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#8cj'_Q'OS!yW'TPOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$n_#:^][X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$nU#;[Z'OSOz#;}z{#<k{!P#;}!P!Q#=V!Q#i#;}#i#j#=n#j#l#;}#l#m#?j#m;'S#;};'S;=`#C[<%lO#;}U#<UVrQ'OSOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[U#<pVrQOz'`z{&v{!P'`!P!Q*y!Q;'S'`;'S;=`*m<%lO'`U#=[UrQOz'`{!P'`!P!Q(_!Q;'S'`;'S;=`*m<%lO'`U#=s^'OSOz&[z{&v{!P&[!P!Q'x!Q![#>o![!c&[!c!i#>o!i#T&[#T#Z#>o#Z#o&[#o#p#A`#p;'S&[;'S;=`*s<%lO&[U#>t['OSOz&[z{&v{!P&[!P!Q'x!Q![#?j![!c&[!c!i#?j!i#T&[#T#Z#?j#Z;'S&[;'S;=`*s<%lO&[U#?o['OSOz&[z{&v{!P&[!P!Q'x!Q![#@e![!c&[!c!i#@e!i#T&[#T#Z#@e#Z;'S&[;'S;=`*s<%lO&[U#@j['OSOz&[z{&v{!P&[!P!Q'x!Q![#;}![!c&[!c!i#;}!i#T&[#T#Z#;}#Z;'S&[;'S;=`*s<%lO&[U#Ae['OSOz&[z{&v{!P&[!P!Q'x!Q![#BZ![!c&[!c!i#BZ!i#T&[#T#Z#BZ#Z;'S&[;'S;=`*s<%lO&[U#B`^'OSOz&[z{&v{!P&[!P!Q'x!Q![#BZ![!c&[!c!i#BZ!i#T&[#T#Z#BZ#Z#q&[#q#r#;}#r;'S&[;'S;=`*s<%lO&[U#C_P;=`<%l#;}_#Ck]XX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#Dm_'{X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_#Ewl'_Q'OS!yW'TPOY$nYZ%nZr$nrs#Gosw$nwx#H]xz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$n]#GvV'OS'^XOz&[z{&v{!P&[!P!Q'x!Q;'S&[;'S;=`*s<%lO&[_#Hd_'_Q'OSOYE^YZGfZrE^rsHvswE^wxFdxzE^z{Ih{!PE^!P!QKl!Q#OE^#O#P!!l#P;'SE^;'S;=`!*}<%lOE^_#Ink'_Q'OS!yW'TPOY$nYZ%nZr$nrs&[st#Kctz$nz{+O{!P$n!P!Q,z!Q![#8W![!c$n!c!}#8W!}#O$n#O#P&[#P#R$n#R#S#8W#S#T$n#T#o#8W#o${$n${$|#8W$|4w$n4w5b#8W5b5i$n5i6S#8W6S;'S$n;'S;=`4s<%lO$nV#Kji'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!c$n!c!}#MX!}#O$n#O#P&[#P#R$n#R#S#MX#S#T$n#T#o#MX#o${$n${$|#MX$|4w$n4w5b#MX5b5i$n5i6S#MX6S;'S$n;'S;=`4s<%lO$nV#Mbj'_Q'OS'TPOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q![#MX![!c$n!c!}#MX!}#O$n#O#P&[#P#R$n#R#S#MX#S#T$n#T#o#MX#o${$n${$|#MX$|4w$n4w5b#MX5b5i$n5i6S#MX6S;'S$n;'S;=`4s<%lO$n_$ ]]wX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_$!_a'rX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q!_$n!_!`@O!`#O$n#O#P&[#P#p$n#p#q$#d#q;'S$n;'S;=`4s<%lO$n_$#m]'|X'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n_$$o]vX'_Q'OSOY$nYZ%nZr$nrs&[sz$nz{+O{!P$n!P!Q,z!Q#O$n#O#P&[#P;'S$n;'S;=`4s<%lO$n",
      tokenizers: [closureParam, tpDelim, literalTokens, 0, 1, 2, 3],
      topRules: { "SourceFile": [0, 8] },
      specialized: [{ term: 281, get: (value) => spec_identifier9[value] || -1 }],
      tokenPrec: 15596
    });
  }
});

// ../../node_modules/@codemirror/lang-rust/dist/index.js
var dist_exports14 = {};
__export(dist_exports14, {
  rust: () => rust,
  rustLanguage: () => rustLanguage
});
function rust() {
  return new LanguageSupport(rustLanguage);
}
var rustLanguage;
var init_dist31 = __esm({
  "../../node_modules/@codemirror/lang-rust/dist/index.js"() {
    init_dist30();
    init_dist5();
    rustLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "rust",
      parser: /* @__PURE__ */ parser14.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            IfExpression: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
            "String BlockComment": () => null,
            "AttributeItem": (cx2) => cx2.continue(),
            "Statement MatchArm": /* @__PURE__ */ continuedIndent()
          }),
          /* @__PURE__ */ foldNodeProp.add((type7) => {
            if (/(Block|edTokens|List)$/.test(type7.name))
              return foldInside;
            if (type7.name == "BlockComment")
              return (tree) => ({ from: tree.from + 2, to: tree.to - 2 });
            return void 0;
          })
        ]
      }),
      languageData: {
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        indentOnInput: /^\s*(?:\{|\})$/,
        closeBrackets: { stringPrefixes: ["b", "r", "br"] }
      }
    });
  }
});

// ../../node_modules/@lezer/sass/dist/index.js
function isAlpha4(ch2) {
  return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isDigit3(ch2) {
  return ch2 >= 48 && ch2 <= 57;
}
function startOfComment(input) {
  let next2;
  return input.next == slash4 && ((next2 = input.peek(1)) == slash4 || next2 == asterisk);
}
function IndentLevel(parent, depth) {
  this.parent = parent;
  this.depth = depth;
  this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
}
var indent2, dedent2, descendantOp3, InterpolationEnd, InterpolationContinue, Unit3, callee2, identifier5, VariableName2, InterpolationStart, newline5, blankLineStart2, eof3, whitespace2, LineComment3, Comment, IndentedMixin, IndentedInclude, Dialect_indented, space7, colon2, parenL2, underscore2, bracketL3, dash3, period2, hash3, percent2, braceL, braceR2, slash4, asterisk, newlineChar, equals, plus2, and2, spaces2, comments, indentedMixins, indentation2, identifiers2, interpolationEnd, descendant3, unitToken3, topIndent3, trackIndent2, cssHighlighting2, spec_identifier10, spec_callee2, spec_AtKeyword3, parser15;
var init_dist32 = __esm({
  "../../node_modules/@lezer/sass/dist/index.js"() {
    init_dist6();
    init_dist4();
    indent2 = 154;
    dedent2 = 155;
    descendantOp3 = 156;
    InterpolationEnd = 1;
    InterpolationContinue = 2;
    Unit3 = 3;
    callee2 = 157;
    identifier5 = 158;
    VariableName2 = 4;
    InterpolationStart = 5;
    newline5 = 159;
    blankLineStart2 = 160;
    eof3 = 161;
    whitespace2 = 162;
    LineComment3 = 6;
    Comment = 7;
    IndentedMixin = 8;
    IndentedInclude = 9;
    Dialect_indented = 0;
    space7 = [
      9,
      10,
      11,
      12,
      13,
      32,
      133,
      160,
      5760,
      8192,
      8193,
      8194,
      8195,
      8196,
      8197,
      8198,
      8199,
      8200,
      8201,
      8202,
      8232,
      8233,
      8239,
      8287,
      12288
    ];
    colon2 = 58;
    parenL2 = 40;
    underscore2 = 95;
    bracketL3 = 91;
    dash3 = 45;
    period2 = 46;
    hash3 = 35;
    percent2 = 37;
    braceL = 123;
    braceR2 = 125;
    slash4 = 47;
    asterisk = 42;
    newlineChar = 10;
    equals = 61;
    plus2 = 43;
    and2 = 38;
    spaces2 = new ExternalTokenizer((input, stack) => {
      if (stack.dialectEnabled(Dialect_indented)) {
        let prev;
        if (input.next < 0 && stack.canShift(eof3)) {
          input.acceptToken(eof3);
        } else if (((prev = input.peek(-1)) == newlineChar || prev < 0) && stack.canShift(blankLineStart2)) {
          let spaces3 = 0;
          while (input.next != newlineChar && space7.includes(input.next)) {
            input.advance();
            spaces3++;
          }
          if (input.next == newlineChar || startOfComment(input))
            input.acceptToken(blankLineStart2, -spaces3);
          else if (spaces3)
            input.acceptToken(whitespace2);
        } else if (input.next == newlineChar) {
          input.acceptToken(newline5, 1);
        } else if (space7.includes(input.next)) {
          input.advance();
          while (input.next != newlineChar && space7.includes(input.next)) input.advance();
          input.acceptToken(whitespace2);
        }
      } else {
        let length = 0;
        while (space7.includes(input.next)) {
          input.advance();
          length++;
        }
        if (length) input.acceptToken(whitespace2);
      }
    }, { contextual: true });
    comments = new ExternalTokenizer((input, stack) => {
      if (!startOfComment(input)) return;
      input.advance();
      if (stack.dialectEnabled(Dialect_indented)) {
        let indentedComment = -1;
        for (let off = 1; ; off++) {
          let prev = input.peek(-off - 1);
          if (prev == newlineChar || prev < 0) {
            indentedComment = off + 1;
            break;
          } else if (!space7.includes(prev)) {
            break;
          }
        }
        if (indentedComment > -1) {
          let block3 = input.next == asterisk, end2 = 0;
          input.advance();
          while (input.next >= 0) {
            if (input.next == newlineChar) {
              input.advance();
              let indented = 0;
              while (input.next != newlineChar && space7.includes(input.next)) {
                indented++;
                input.advance();
              }
              if (indented < indentedComment) {
                end2 = -indented - 1;
                break;
              }
            } else if (block3 && input.next == asterisk && input.peek(1) == slash4) {
              end2 = 2;
              break;
            } else {
              input.advance();
            }
          }
          input.acceptToken(block3 ? Comment : LineComment3, end2);
          return;
        }
      }
      if (input.next == slash4) {
        while (input.next != newlineChar && input.next >= 0) input.advance();
        input.acceptToken(LineComment3);
      } else {
        input.advance();
        while (input.next >= 0) {
          let { next: next2 } = input;
          input.advance();
          if (next2 == asterisk && input.next == slash4) {
            input.advance();
            break;
          }
        }
        input.acceptToken(Comment);
      }
    });
    indentedMixins = new ExternalTokenizer((input, stack) => {
      if ((input.next == plus2 || input.next == equals) && stack.dialectEnabled(Dialect_indented))
        input.acceptToken(input.next == equals ? IndentedMixin : IndentedInclude, 1);
    });
    indentation2 = new ExternalTokenizer((input, stack) => {
      if (!stack.dialectEnabled(Dialect_indented)) return;
      let cDepth = stack.context.depth;
      if (input.next < 0 && cDepth) {
        input.acceptToken(dedent2);
        return;
      }
      let prev = input.peek(-1);
      if (prev == newlineChar) {
        let depth = 0;
        while (input.next != newlineChar && space7.includes(input.next)) {
          input.advance();
          depth++;
        }
        if (depth != cDepth && input.next != newlineChar && !startOfComment(input)) {
          if (depth < cDepth) input.acceptToken(dedent2, -depth);
          else input.acceptToken(indent2);
        }
      }
    });
    identifiers2 = new ExternalTokenizer((input, stack) => {
      for (let inside2 = false, dashes = 0, i = 0; ; i++) {
        let { next: next2 } = input;
        if (isAlpha4(next2) || next2 == dash3 || next2 == underscore2 || inside2 && isDigit3(next2)) {
          if (!inside2 && (next2 != dash3 || i > 0)) inside2 = true;
          if (dashes === i && next2 == dash3) dashes++;
          input.advance();
        } else if (next2 == hash3 && input.peek(1) == braceL) {
          input.acceptToken(InterpolationStart, 2);
          break;
        } else {
          if (inside2)
            input.acceptToken(next2 == parenL2 ? callee2 : dashes == 2 && stack.canShift(VariableName2) ? VariableName2 : identifier5);
          break;
        }
      }
    });
    interpolationEnd = new ExternalTokenizer((input) => {
      if (input.next == braceR2) {
        input.advance();
        while (isAlpha4(input.next) || input.next == dash3 || input.next == underscore2 || isDigit3(input.next))
          input.advance();
        if (input.next == hash3 && input.peek(1) == braceL)
          input.acceptToken(InterpolationContinue, 2);
        else
          input.acceptToken(InterpolationEnd);
      }
    });
    descendant3 = new ExternalTokenizer((input) => {
      if (space7.includes(input.peek(-1))) {
        let { next: next2 } = input;
        if (isAlpha4(next2) || next2 == underscore2 || next2 == hash3 || next2 == period2 || next2 == bracketL3 || next2 == colon2 || next2 == dash3 || next2 == and2)
          input.acceptToken(descendantOp3);
      }
    });
    unitToken3 = new ExternalTokenizer((input) => {
      if (!space7.includes(input.peek(-1))) {
        let { next: next2 } = input;
        if (next2 == percent2) {
          input.advance();
          input.acceptToken(Unit3);
        }
        if (isAlpha4(next2)) {
          do {
            input.advance();
          } while (isAlpha4(input.next));
          input.acceptToken(Unit3);
        }
      }
    });
    topIndent3 = new IndentLevel(null, 0);
    trackIndent2 = new ContextTracker({
      start: topIndent3,
      shift(context, term, stack, input) {
        if (term == indent2) return new IndentLevel(context, stack.pos - input.pos);
        if (term == dedent2) return context.parent;
        return context;
      },
      hash(context) {
        return context.hash;
      }
    });
    cssHighlighting2 = styleTags({
      "AtKeyword import charset namespace keyframes media supports include mixin use forward extend at-root": tags.definitionKeyword,
      "Keyword selector": tags.keyword,
      "ControlKeyword": tags.controlKeyword,
      NamespaceName: tags.namespace,
      KeyframeName: tags.labelName,
      TagName: tags.tagName,
      "ClassName Suffix": tags.className,
      PseudoClassName: tags.constant(tags.className),
      IdName: tags.labelName,
      "FeatureName PropertyName": tags.propertyName,
      AttributeName: tags.attributeName,
      NumberLiteral: tags.number,
      KeywordQuery: tags.keyword,
      UnaryQueryOp: tags.operatorKeyword,
      "CallTag ValueName": tags.atom,
      VariableName: tags.variableName,
      SassVariableName: tags.special(tags.variableName),
      Callee: tags.operatorKeyword,
      Unit: tags.unit,
      "UniversalSelector NestingSelector IndentedMixin IndentedInclude": tags.definitionOperator,
      MatchOp: tags.compareOperator,
      "ChildOp SiblingOp, LogicOp": tags.logicOperator,
      BinOp: tags.arithmeticOperator,
      "Important Global Default": tags.modifier,
      Comment: tags.blockComment,
      LineComment: tags.lineComment,
      ColorLiteral: tags.color,
      "ParenthesizedContent StringLiteral": tags.string,
      "InterpolationStart InterpolationContinue InterpolationEnd": tags.meta,
      ': "..."': tags.punctuation,
      "PseudoOp #": tags.derefOperator,
      "; ,": tags.separator,
      "( )": tags.paren,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });
    spec_identifier10 = { __proto__: null, not: 62, only: 62, using: 179, as: 189, with: 193, without: 193, hide: 207, show: 207, from: 230, to: 232, if: 245, through: 251, in: 257 };
    spec_callee2 = { __proto__: null, url: 80, "url-prefix": 80, domain: 80, regexp: 80, lang: 94, "nth-child": 94, "nth-last-child": 94, "nth-of-type": 94, "nth-last-of-type": 94, dir: 94, "host-context": 94, selector: 172 };
    spec_AtKeyword3 = { __proto__: null, "@import": 156, "@include": 176, "@mixin": 182, "@function": 182, "@use": 186, "@extend": 196, "@at-root": 200, "@forward": 204, "@media": 210, "@charset": 214, "@namespace": 218, "@keyframes": 224, "@supports": 236, "@if": 240, "@else": 242, "@for": 248, "@each": 254, "@while": 260, "@debug": 264, "@warn": 264, "@error": 264, "@return": 264 };
    parser15 = LRParser.deserialize({
      version: 14,
      states: "L|Q`Q+tOOO#fQ+tOOP#mOpOOOOQ#U'#Ch'#ChO#rQ(pO'#CjOOQ#U'#Ci'#CiO%_Q)QO'#FxO%rQ.jO'#CnO&jQ#dO'#DWO'aQ(pO'#CgO'hQ)OO'#DYO'sQ#dO'#DaO'xQ#dO'#DeO'}Q#dO'#DnOOQ#U'#Fx'#FxO(SQ(pO'#FxO(ZQ(nO'#DrO%rQ.jO'#DzO%rQ.jO'#EVO%rQ.jO'#EYO%rQ.jO'#E[O(`Q)OO'#EaO)QQ)OO'#EcO%rQ.jO'#EeO)_Q)OO'#EhO%rQ.jO'#EjO)yQ)OO'#ElO*UQ#dO'#EoO*ZQ)OO'#EuO*oQ)OO'#FVOOQ&Z'#Fw'#FwOOQ&Y'#FY'#FYO*yQ(nO'#FYQ`Q+tOOO%rQ.jO'#EwO+UQ(nO'#E{O+ZQ)OO'#FOO%rQ.jO'#FRO%rQ.jO'#FTOOQ&Z'#Fa'#FaO+cQ+uO'#GRO+pQ(oO'#GRQOQ#SOOP,RO#SO'#FvPOOO)CAk)CAkOOQ#U'#Cm'#CmOOQ#U,59W,59WOOQ#i'#Cp'#CpO%rQ.jO'#CsO,aQ.wO'#CuO.|Q.^O,59YO%rQ.jO'#CzOOQ#S'#DO'#DOO/_Q(nO'#DTOOQ#i'#Fz'#FzO/dQ(nO'#C}OOQ#U'#DX'#DXOOQ#U,59r,59rO&jQ#dO,59rO/iQ)OO,59tO'sQ#dO,59{O'xQ#dO,5:PO(`Q)OO,5:TO(`Q)OO,5:VO(`Q)OO,5:WO(`Q)OO'#F`O/tQ(nO,59RO0PQ+tO'#DpO0WQ#TO'#DpOOQ&Z,59R,59ROOQ#U'#D['#D[OOQ#S'#D_'#D_OOQ#U,59t,59tO0]Q(nO,59tO0bQ(nO,59tOOQ#U'#Dc'#DcOOQ#U,59{,59{OOQ#S'#Dg'#DgO0gQ9`O,5:POOQ#U'#Do'#DoOOQ#U,5:Y,5:YO1gQ.jO,5:^O1qQ.jO,5:fO2jQ.jO,5:qO2wQ.YO,5:tO3YQ.jO,5:vOOQ#U'#Cj'#CjO4RQ(pO,5:{O4`Q(pO,5:}OOQ&Z,5:},5:}O4gQ)OO,5:}O4lQ.jO,5;POOQ#S'#D}'#D}O5[Q)OO'#ESO5cQ(nO'#GTO*ZQ)OO'#ERO5wQ(nO'#ETOOQ#S'#GU'#GUO/wQ(nO,5;SO3`Q.YO,5;UOOQ#d'#En'#EnO*yQ(nO,5;WO5|Q)OO,5;WOOQ#S'#Eq'#EqO6UQ(nO,5;ZO6ZQ(nO,5;aO6fQ(nO,5;qOOQ&Z'#GV'#GVOOQ&Y,5;t,5;tOOQ&Y-E9W-E9WO2wQ.YO,5;cO6tQ)OO,5;gO6yQ)OO'#GXO7RQ)OO,5;jO2wQ.YO,5;mO3`Q.YO,5;oOOQ&Z-E9_-E9_O7WQ(oO,5<mOOQ&Z'#GS'#GSO7iQ+uO'#FdO7WQ(oO,5<mPOO#S'#FX'#FXP7|O#SO,5<bPOOO,5<b,5<bO8[Q.YO,59_OOQ#i,59a,59aO%rQ.jO,59cO%rQ.jO,59hO%rQ.jO'#F]O8jQ#WO1G.tOOQ#k1G.t1G.tO8rQ.oO,59fO;[Q! lO,59oO<XQ.jO'#DPOOQ#i,59i,59iOOQ#U1G/^1G/^OOQ#U1G/`1G/`O0]Q(nO1G/`O0bQ(nO1G/`OOQ#U1G/g1G/gO<cQ9`O1G/kO<|Q(pO1G/oO=pQ(pO1G/qO>dQ(pO1G/rO?WQ(pO,5;zOOQ#S-E9^-E9^OOQ&Z1G.m1G.mO?eQ(nO,5:[O?jQ+uO,5:[O?qQ)OO'#D`O?xQ.jO'#D^OOQ#U1G/k1G/kO%rQ.jO1G/kO@tQ.jO'#DtOAOQ.kO1G/xOOQ#T1G/x1G/xO*yQ(nO1G0QOA{Q+uO'#GVOOQ&Z1G0]1G0]O/dQ(nO1G0]OOQ&Z1G0`1G0`OOQ&Z1G0b1G0bO/dQ(nO1G0bODeQ)OO1G0bOOQ&Z1G0g1G0gOOQ&Z1G0i1G0iODmQ)OO1G0iODrQ(nO1G0iODwQ)OO1G0kOOQ&Z1G0k1G0kOEVQ.jO'#FfOEgQ#dO1G0kOElQ(nO'#D}OEwQ(nO,5:jOE|Q(nO,5:nO*ZQ)OO,5:lOFUQ)OO'#FeOFiQ(nO,5<oOFzQ(nO,5:mO(`Q)OO,5:oOOQ&Z1G0n1G0nOOQ&Z1G0p1G0pOOQ&Z1G0r1G0rO*yQ(nO1G0rOGcQ)OO'#ErOOQ&Z1G0u1G0uOOQ&Z1G0{1G0{OOQ&Z1G1]1G1]OGqQ+uO1G0}O%rQ.jO1G1ROJZQ)OO'#FjOJfQ)OO,5<sO%rQ.jO1G1UOOQ&Z1G1X1G1XOOQ&Z1G1Z1G1ZOJnQ(oO1G2XOKPQ+uO,5<OOOQ#T,5<O,5<OOOQ#T-E9b-E9bPOO#S-E9V-E9VPOOO1G1|1G1|OOQ#i1G.y1G.yOKdQ.oO1G.}OOQ#i1G/S1G/SOM|Q.^O,5;wOOQ#W-E9Z-E9ZOOQ#k7+$`7+$`ON_Q(nO1G/ZONdQ.jO'#FZO! nQ.jO'#F}O!#VQ.jO'#FzO!#^Q(nO,59kOOQ#U7+$z7+$zOOQ#U7+%V7+%VO%rQ.jO7+%VOOQ&Z1G/v1G/vO!#cQ#TO1G/vO!#hQ(pO'#GPO!#rQ(nO,59zO!#wQ.jO'#GOO!$RQ(nO,59xO!$WQ.YO7+%VO!$fQ.YO'#FzO!$wQ(nO,5:`OOQ#T,5:`,5:`O!%PQ.kO'#FcO%rQ.jO'#FcO!&pQ.kO7+%dOOQ#T7+%d7+%dOOQ&Z7+%l7+%lO6fQ(nO7+%wO*yQ(nO7+%|OOQ#d'#E_'#E_O!'dQ)OO7+%|O!'rQ(nO7+&TO*ZQ)OO7+&TOOQ#d-E9d-E9dOOQ&Z7+&V7+&VO!'wQ.jO'#GWOOQ#d,5<Q,5<QODhQ(nO7+&VO%rQ.jO1G0UOOQ#S1G0Y1G0YOOQ#S1G0W1G0WO!(cQ(nO,5<POOQ#S-E9c-E9cO!(wQ(pO1G0ZOOQ&Z7+&^7+&^O!)OQ(vO'#CuO/wQ(nO'#FhO!)ZQ)OO,5;^OOQ&Z,5;^,5;^O!)iQ+uO7+&iO!,RQ)OO7+&iO!,^Q.jO7+&mOOQ#d,5<U,5<UOOQ#d-E9h-E9hO2wQ.YO7+&pOOQ#T1G1j1G1jOOQ#i7+$u7+$uOOQ#d-E9X-E9XO!,oQ.jO'#F[O!,|Q(nO,5<iO!,|Q(nO,5<iO%rQ.jO,5<iOOQ#i1G/V1G/VO!-UQ.YO<<HqOOQ&Z7+%b7+%bO!-dQ)OO'#F_O!-nQ(nO,5<kOOQ#U1G/f1G/fO!-vQ.jO'#F^O!.QQ(nO,5<jOOQ#U1G/d1G/dOOQ#U<<Hq<<HqO0oQ.jO,5;|O!.YQ(nO'#FbOOQ#S-E9`-E9`OOQ#T1G/z1G/zO!._Q.kO,5;}OOQ#e-E9a-E9aOOQ#T<<IO<<IOOOQ&Z<<Ic<<IcOOQ&Z<<Ih<<IhO/dQ(nO<<IhO*ZQ)OO<<IoO!0OQ(nO<<IoO!0WQ.jO'#FgO!0kQ)OO,5<rODwQ)OO<<IqO!0|Q.jO7+%pOOQ#S7+%u7+%uOOQ#d,5<S,5<SOOQ#d-E9f-E9fOOQ&Z1G0x1G0xOOQ&Z-E9g-E9gO!,RQ)OO<<JTO%rQ.jO,5<TOOQ&Z<<JT<<JTO%rQ.jO<<JXOOQ&Z<<J[<<J[O!1TQ.jO,5;vO!1bQ.jO,5;vOOQ#S-E9Y-E9YO!1iQ(nO1G2TO!1qQ.jO1G2TOOQ#UAN>]AN>]O!1{Q(pO,5;yOOQ#S-E9]-E9]O!2VQ.jO,5;xOOQ#S-E9[-E9[O!2aQ.YO1G1hO!2uQ(nO1G1hO*yQ(nOAN?SO!3QQ(nOAN?ZO/wQ(nOAN?ZO!3YQ.jO,5<ROOQ#d-E9e-E9eODwQ)OOAN?]OOQ&ZAN?]AN?]OOQ#S<<I[<<I[P!3tQ)OO'#FiOOQ&ZAN?oAN?oO2wQ.YO1G1oO2wQ.YOAN?sOOQ#S1G1b1G1bO%rQ.jO1G1bO!3yQ(nO7+'oOOQ#S7+'S7+'SOOQ&ZG24nG24nO/wQ(nOG24uOOQ&ZG24uG24uOOQ&ZG24wG24wOOQ&Z7+'Z7+'ZOOQ&ZG25_G25_O!4RQ.jO7+&|OOQ&ZLD*aLD*a",
      stateData: "!4c~O$hOSVOSUOS$fQQ~OS`OTVOWcOXbO_UOc`OtYO}YO!UZO!Y[O!omO!paO!zbO!}cO#PdO#UeO#WfO#YgO#]hO#_iO#ajO#dkO#jlO#lrO#psO#stO#vuO#xvO$dSO$mRO$pWO$t]O~O$_$uP~P`O$f{O~Ot^Xt!gXv^X}^X!U^X!Y^X!^^X!a^X!e^X$b^X$e^X$p^X~Ot$lXv$lX}$lX!U$lX!Y$lX!^$lX!a$lX!e$lX$b$lX$e$lX$p$lX~O$d}O!l$lX$g$lXf$lXe$lX~P$jOS!WOTVO_!WOc!WOf!QOh!WOj!WOo!TOx!VO$c!UO$d!PO$o!RO~O$d!YO~Ot!]O}!]O!U!^O!Y!_O!^!`O!a!bO!e!eO$b!aO$e!fO$p![O~Ov!cO~P&oO!P!lO$c!iO$d!hO~O$d!mO~O$d!oO~O$d!qO~Ot!sO~P$jOt!sO~OTVO_UOtYO}YO!UZO!Y[O$d!xO$mRO$pWO$t]O~Of!|O!e!eO$e!fO~P(`OTVOc#TOf#POo#RO!x#SO$d#OO!e$wP$e$wP~Oj#XOx!VO$d#WO~O$d#ZO~OTVOc#TOf#POo#RO!x#SO$d#OO~O!l$wP$g$wP~P)_O!l#_O$e#_O$g#_O~Oc#cO~Oc#dO#t${P~O$_$uX!m$uX$a$uX~P`O!l#jO$e#jO$_$uX!m$uX$a$uX~OU#mOV#mO$e#oO$h#mO~OR#qOPiXQiXliXmiX$piXTiXciXfiXoiX!liX!xiX$diX$eiX$giX!eiX!{iX#QiX#SiX#ZiXeiXSiX_iXhiXjiXviXxiX!iiX!jiX!kiX$ciX$oiX$_iXuiX!WiX#hiX#qiX!miX$aiX~OP#vOQ#tOl#rOm#rO$p#sO~Of#xO~Of#yO~O!P$OO$c!iO$d!hO~Ov!cO!e!eO$e!fO~O!m$uP~P`O$`$YO~Of$ZO~Of$[O~O!W$]O![$^O~OS!WOTVO_!WOc!WOf$_Oh!WOj!WOo!TOx!VO$c!UO$d!PO$o!RO~O!e!eO$e!fO~P0oOl#rOm#rO$p#sO!l$wP$e$wP$g$wP~P*ZOl#rOm#rO!l#_O$g#_O$p#sO~O!e!eO!{$eO$e$cO~P2XOl#rOm#rO!e!eO$e!fO$p#sO~O#Q$iO#S$hO$e#_O~P2XOt!]O}!]O!U!^O!Y!_O!^!`O!a!bO$b!aO$p![O~O!l#_O$e#_O$g#_O~P3gOf$lO~P&oO#S$mO~O#Q$qO#Z$pO$e#_O~P2XOTVOc#TOf#POo#RO!x#SO~O$d$rO~P4yOm$uOv$vO!e$wX$e$wX!l$wX$g$wX~Of$yO~Oj$}Ox!VO~O!e%OO~Om$uO!e!eO$e!fO~O!e!eO!l#_O$e$cO$g#_O~O#g%TO~Ov%UO#t${X~O#t%WO~O!l#jO$e#jO$_$ua!m$ua$a$ua~O!l$WX$_$WX$e$WX!m$WX$a$WX~P`OU#mOV#mO$e%`O$h#mO~Oe%aOl#rOm#rO$p#sO~OP%fOQ#tO~Ol#rOm#rO$p#sOPnaQnaTnacnafnaona!lna!xna$dna$ena$gna!ena!{na#Qna#Sna#ZnaenaSna_nahnajnavnaxna!ina!jna!kna$cna$ona$_nauna!Wna#hna#qna!mna$ana~Oj%gOy%gO~OS!WOTVO_!WOf!QOh!WOj!WOo!TOx!VO$c!UO$d!PO$o!RO~Oc%jOe$qP~P;dO!W%mO![%nO~Ot!]O}!]O!U!^O!Y!_O$p![O~Ov!]i!^!]i!a!]i!e!]i$b!]i$e!]i!l!]i$g!]if!]ie!]i~P<kOv!_i!^!_i!a!_i!e!_i$b!_i$e!_i!l!_i$g!_if!_ie!_i~P<kOv!`i!^!`i!a!`i!e!`i$b!`i$e!`i!l!`i$g!`if!`ie!`i~P<kOv$Sa!e$Sa$e$Sa~P3gO!m%oO~O$a$uP~P`Oe$sP~P(`Oe$rP~P%rOS!WOTVO_!WOc!WOf!QOh!WOo!TOx!VO$c!UO$d!PO$o!RO~Oe%xOj%vO~P@POl#rOm#rOv%zO!i%|O!j%|O!k%|O$p#sO!l!fi$e!fi$g!fi$_!fi!m!fi$a!fi~P%rO$`$YOS$yXT$yXW$yXX$yX_$yXc$yXt$yX}$yX!U$yX!Y$yX!o$yX!p$yX!z$yX!}$yX#P$yX#U$yX#W$yX#Y$yX#]$yX#_$yX#a$yX#d$yX#j$yX#l$yX#p$yX#s$yX#v$yX#x$yX$_$yX$d$yX$m$yX$p$yX$t$yX!m$yX!l$yX$e$yX$a$yX~O$d!PO$m&QO~O#S&SO~Ot&TO~O!l#_O#Z$pO$e#_O$g#_O~O!l$zP#Z$zP$e$zP$g$zP~P%rO$d!PO~Oe!qXm!qXt!sX~Ot&ZO~Oe&[Om$uO~Ov$XX!e$XX$e$XX!l$XX$g$XX~P*ZOv$vO!e$wa$e$wa!l$wa$g$wa~Om$uOv!ua!e!ua$e!ua!l!ua$g!uae!ua~O!m&eO#g&cO#h&cO$o&bO~O#m&gOS#kiT#kiW#kiX#ki_#kic#kit#ki}#ki!U#ki!Y#ki!o#ki!p#ki!z#ki!}#ki#P#ki#U#ki#W#ki#Y#ki#]#ki#_#ki#a#ki#d#ki#j#ki#l#ki#p#ki#s#ki#v#ki#x#ki$_#ki$d#ki$m#ki$p#ki$t#ki!m#ki!l#ki$e#ki$a#ki~Oc&iOv$^X#t$^X~Ov%UO#t${a~O!l#jO$e#jO$_$ui!m$ui$a$ui~O!l$Wa$_$Wa$e$Wa!m$Wa$a$Wa~P`O$p#sOPkiQkilkimkiTkickifkioki!lki!xki$dki$eki$gki!eki!{ki#Qki#Ski#ZkiekiSki_kihkijkivkixki!iki!jki!kki$cki$oki$_kiuki!Wki#hki#qki!mki$aki~Ol#rOm#rO$p#sOP$PaQ$Pa~Oe&mO~Ol#rOm#rO$p#sOS#}XT#}X_#}Xc#}Xe#}Xf#}Xh#}Xj#}Xo#}Xu#}Xv#}Xx#}X$c#}X$d#}X$o#}X~Ou&qOv&oOe$qX~P%rOS$nXT$nX_$nXc$nXe$nXf$nXh$nXj$nXl$nXm$nXo$nXu$nXv$nXx$nX$c$nX$d$nX$o$nX$p$nX~Ot&rO~P! {Oe&sO~O$a&uO~Ov&vOe$sX~P3gOe&xO~Ov&yOe$rX~P%rOe&{O~Ol#rOm#rO!W&|O$p#sO~Ot&}Oe$nXl$nXm$nX$p$nX~Oe'QOj'OO~Ol#rOm#rO$p#sOS$VXT$VX_$VXc$VXf$VXh$VXj$VXo$VXv$VXx$VX!i$VX!j$VX!k$VX!l$VX$c$VX$d$VX$e$VX$g$VX$o$VX$_$VX!m$VX$a$VX~Ov%zO!i'TO!j'TO!k'TO!l!fq$e!fq$g!fq$_!fq!m!fq$a!fq~P%rO!l#_O#S'WO$e#_O$g#_O~Ot'XO~Ol#rOm#rOv'ZO$p#sO!l$zX#Z$zX$e$zX$g$zX~Om$uOv$Xa!e$Xa$e$Xa!l$Xa$g$Xa~Oe'_O~P3gOR#qO!eiX$eiX~O!m'bO#g&cO#h&cO$o&bO~O#m'dOS#kqT#kqW#kqX#kq_#kqc#kqt#kq}#kq!U#kq!Y#kq!o#kq!p#kq!z#kq!}#kq#P#kq#U#kq#W#kq#Y#kq#]#kq#_#kq#a#kq#d#kq#j#kq#l#kq#p#kq#s#kq#v#kq#x#kq$_#kq$d#kq$m#kq$p#kq$t#kq!m#kq!l#kq$e#kq$a#kq~O!e!eO#n'eO$e!fO~Ol#rOm#rO#h'gO#q'gO$p#sO~Oc'jOe$OXv$OX~P;dOv&oOe$qa~Ol#rOm#rO!W'nO$p#sO~Oe$RXv$RX~P(`Ov&vOe$sa~Oe$QXv$QX~P%rOv&yOe$ra~Ot&}O~Ol#rOm#rO$p#sOS$VaT$Va_$Vac$Vaf$Vah$Vaj$Vao$Vav$Vax$Va!i$Va!j$Va!k$Va!l$Va$c$Va$d$Va$e$Va$g$Va$o$Va$_$Va!m$Va$a$Va~Oe'wOm$uO~Ov$ZX!l$ZX#Z$ZX$e$ZX$g$ZX~P%rOv'ZO!l$za#Z$za$e$za$g$za~Oe'|O~P%rOu(ROe$Oav$Oa~P%rOt(SO~P! {Ov&oOe$qi~Ov&oOe$qi~P%rOe$Rav$Ra~P3gOe$Qav$Qa~P%rOl#rOm#rOv(UO$p#sOe$Uij$Ui~Ov(UOe$Uij$Ui~Oe(WOm$uO~Ol#rOm#rO$p#sOv$Za!l$Za#Z$Za$e$Za$g$Za~O#n'eO~Ov&oOe$qq~Oe$Oqv$Oq~P%rO$o$pl!al~",
      goto: "9{$|PPPPPPPPPPP$}%X%X%lP%X&P&SP'tPP(yP)xP(yPP(yP(y(y*{+zPPP,WPP%X-]%XP-cP-i-o-u%XP-{P%XP.RP%XP%X%XP%X.X.[P/m0P0ZPPPPP$}PP'h'h0a'h'h'h'hP$}PP$}P$}PP0dP$}P$}P$}PP$}P$}P$}P0j$}P0m0pPP$}P$}PPP$}PP$}PP$}P$}P$}P0s0y1P1o1}2T2Z2a2g2s2y3P3Z3a3k3q3w3}PPPPPPPPPPP4T4W4dP5ZPP7b7e7hP7k7t7z8T8o9u9xanOPqx!e#k$Y%[s^OPefqx!`!a!b!c!e#k$Y$Z$y%[&vsTOPefqx!`!a!b!c!e#k$Y$Z$y%[&vR!OUb^ef!`!a!b!c$Z$y&v`_OPqx!e#k$Y%[!x!WVabcdgiruv!Q!T!s#r#s#t#y$[$^$_$`$p%T%W%i%n%s%z%{&Z&o&r&y&}'Z'^'e'g'i'm'q(S(]e#Thlm!t#P#R$u$v&T'X!x!WVabcdgiruv!Q!T!s#r#s#t#y$[$^$_$`$p%T%W%i%n%s%z%{&Z&o&r&y&}'Z'^'e'g'i'm'q(S(]Q&R$iR&Y$q!y!WVabcdgiruv!Q!T!s#r#s#t#y$[$^$_$`$p%T%W%i%n%s%z%{&Z&o&r&y&}'Z'^'e'g'i'm'q(S(]!x!WVabcdgiruv!Q!T!s#r#s#t#y$[$^$_$`$p%T%W%i%n%s%z%{&Z&o&r&y&}'Z'^'e'g'i'm'q(S(]T&c%O&d!y!XVabcdgiruv!Q!T!s#r#s#t#y$[$^$_$`$p%T%W%i%n%s%z%{&Z&o&r&y&}'Z'^'e'g'i'm'q(S(]Q#z!XQ&O$eQ&P$hR'u'W!x!WVabcdgiruv!Q!T!s#r#s#t#y$[$^$_$`$p%T%W%i%n%s%z%{&Z&o&r&y&}'Z'^'e'g'i'm'q(S(]Q#XjR$}#YQ!ZWR#{![Q!jYR#|!]Q#|!lR%l$OQ!kYR#}!]Q#|!kR%l#}Q!nZR$P!^Q!p[R$Q!_R!r]Q!gXQ!{fQ$W!dQ$a!sQ$d!uQ$f!vQ$k!zQ$z#UQ%Q#]Q%R#^Q%S#bQ%X#fQ'U&OQ'`&cQ'f&gQ'h&kQ(O'dQ(X'wQ(Z(PQ([(QR(^(WSpOqUyP!e$YQ#ixQ%]#kR&l%[a`OPqx!e#k$Y%[Q$a!sR't&}R$s#PQ&R$iR']&YR#YjR#[kR%P#[Q#n{R%_#nQqOR#aqQ%i#yQ%s$[^&n%i%s'^'i'm'q(]Q'^&ZQ'i&oQ'm&rQ'q&yR(](SQ&p%iU'k&p'l(TQ'l&qR(T'mQ#u!SR%e#uQ&z%sR'r&zQ&w%qR'p&wQ!dXR$V!dUxP!e$YS#hx%[R%[#kQ%w$_R'P%wQ%{$`R'S%{Q#lyQ%Z#iT%^#l%ZQ$w#QR&_$wQ$n!}S&U$n'zR'z']Q'[&WR'y'[Q&d%OR'a&dQ&f%SR'c&fQ%V#dR&j%VR|QSoOq]wPx!e#k$Y%[`XOPqx!e#k$Y%[Q!yeQ!zfQ$R!`Q$S!aQ$T!bQ$U!cQ%q$ZQ&`$yR'o&vQ!SVQ!taQ!ubQ!vcQ!wdQ!}gQ#ViQ#brQ#fuQ#gvS#p!Q$_Q#w!TQ$`!sQ%b#rQ%c#sQ%d#tl%h#y$[%i%s&Z&o&r&y'^'i'm'q(S(]Q%u$^S%y$`%{Q&W$pQ&h%TQ&k%WQ&t%nQ'R%zQ's&}Q'x'ZQ(P'eR(Q'gR%k#yR%t$[R%r$ZQzPQ$X!eR%p$YX#ky#i#l%ZQ#UhQ#^mR$b!tU#Qhm!tQ#]lQ$t#PQ$x#RQ&]$uQ&^$vQ'Y&TR'v'XQ#`pQ$d!uQ$g!wQ$j!yQ$o!}Q${#VQ$|#XQ%R#^Q%Y#gQ%}$bQ&V$nQ&a$}Q'U&OS'V&P&RQ'{']Q(V'uR(Y'zR&X$pR#et",
      nodeNames: "\u26A0 InterpolationEnd InterpolationContinue Unit VariableName InterpolationStart LineComment Comment IndentedMixin IndentedInclude StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector SuffixedSelector Suffix Interpolation SassVariableName ValueName ) ( ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp LogicOp UnaryExpression LogicOp NamespacedValue CallExpression Callee ArgList : ... , CallLiteral CallTag ParenthesizedContent ClassSelector ClassName PseudoClassSelector :: PseudoClassName PseudoClassName ArgList PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp PlaceholderSelector ClassName Block { Declaration PropertyName Map Important Global Default ; } ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery UnaryQuery ParenthesizedQuery SelectorQuery selector IncludeStatement include Keyword MixinStatement mixin UseStatement use Keyword Star Keyword ExtendStatement extend RootStatement at-root ForwardStatement forward Keyword MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList Keyword Keyword SupportsStatement supports IfStatement ControlKeyword ControlKeyword Keyword ForStatement ControlKeyword Keyword EachStatement ControlKeyword Keyword WhileStatement ControlKeyword OutputStatement ControlKeyword AtRule Styles",
      maxTerm: 181,
      context: trackIndent2,
      nodeProps: [
        ["openedBy", 1, "InterpolationStart", 5, "InterpolationEnd", 21, "(", 75, "{"],
        ["isolate", -3, 6, 7, 26, ""],
        ["closedBy", 22, ")", 67, "}"]
      ],
      propSources: [cssHighlighting2],
      skippedNodes: [0, 6, 7, 135],
      repeatNodeCount: 18,
      tokenData: "!!p~RyOq#rqr$jrs0jst2^tu8{uv;hvw;{wx<^xy={yz>^z{>c{|>||}Co}!ODQ!O!PDo!P!QFY!Q![Fk![!]Gf!]!^Hb!^!_Hs!_!`I[!`!aIs!a!b#r!b!cJt!c!}#r!}#OL^#O#P#r#P#QLo#Q#RMQ#R#T#r#T#UMg#U#c#r#c#dNx#d#o#r#o#p! _#p#qMQ#q#r! p#r#s!!R#s;'S#r;'S;=`!!j<%lO#rW#uSOy$Rz;'S$R;'S;=`$d<%lO$RW$WSyWOy$Rz;'S$R;'S;=`$d<%lO$RW$gP;=`<%l$RY$m[Oy$Rz!_$R!_!`%c!`#W$R#W#X%v#X#Z$R#Z#[)Z#[#]$R#]#^,V#^;'S$R;'S;=`$d<%lO$RY%jSyWlQOy$Rz;'S$R;'S;=`$d<%lO$RY%{UyWOy$Rz#X$R#X#Y&_#Y;'S$R;'S;=`$d<%lO$RY&dUyWOy$Rz#Y$R#Y#Z&v#Z;'S$R;'S;=`$d<%lO$RY&{UyWOy$Rz#T$R#T#U'_#U;'S$R;'S;=`$d<%lO$RY'dUyWOy$Rz#i$R#i#j'v#j;'S$R;'S;=`$d<%lO$RY'{UyWOy$Rz#`$R#`#a(_#a;'S$R;'S;=`$d<%lO$RY(dUyWOy$Rz#h$R#h#i(v#i;'S$R;'S;=`$d<%lO$RY(}S!kQyWOy$Rz;'S$R;'S;=`$d<%lO$RY)`UyWOy$Rz#`$R#`#a)r#a;'S$R;'S;=`$d<%lO$RY)wUyWOy$Rz#c$R#c#d*Z#d;'S$R;'S;=`$d<%lO$RY*`UyWOy$Rz#U$R#U#V*r#V;'S$R;'S;=`$d<%lO$RY*wUyWOy$Rz#T$R#T#U+Z#U;'S$R;'S;=`$d<%lO$RY+`UyWOy$Rz#`$R#`#a+r#a;'S$R;'S;=`$d<%lO$RY+yS!jQyWOy$Rz;'S$R;'S;=`$d<%lO$RY,[UyWOy$Rz#a$R#a#b,n#b;'S$R;'S;=`$d<%lO$RY,sUyWOy$Rz#d$R#d#e-V#e;'S$R;'S;=`$d<%lO$RY-[UyWOy$Rz#c$R#c#d-n#d;'S$R;'S;=`$d<%lO$RY-sUyWOy$Rz#f$R#f#g.V#g;'S$R;'S;=`$d<%lO$RY.[UyWOy$Rz#h$R#h#i.n#i;'S$R;'S;=`$d<%lO$RY.sUyWOy$Rz#T$R#T#U/V#U;'S$R;'S;=`$d<%lO$RY/[UyWOy$Rz#b$R#b#c/n#c;'S$R;'S;=`$d<%lO$RY/sUyWOy$Rz#h$R#h#i0V#i;'S$R;'S;=`$d<%lO$RY0^S!iQyWOy$Rz;'S$R;'S;=`$d<%lO$R~0mWOY0jZr0jrs1Vs#O0j#O#P1[#P;'S0j;'S;=`2W<%lO0j~1[Oj~~1_RO;'S0j;'S;=`1h;=`O0j~1kXOY0jZr0jrs1Vs#O0j#O#P1[#P;'S0j;'S;=`2W;=`<%l0j<%lO0j~2ZP;=`<%l0jZ2cY!UPOy$Rz!Q$R!Q![3R![!c$R!c!i3R!i#T$R#T#Z3R#Z;'S$R;'S;=`$d<%lO$RY3WYyWOy$Rz!Q$R!Q![3v![!c$R!c!i3v!i#T$R#T#Z3v#Z;'S$R;'S;=`$d<%lO$RY3{YyWOy$Rz!Q$R!Q![4k![!c$R!c!i4k!i#T$R#T#Z4k#Z;'S$R;'S;=`$d<%lO$RY4rYhQyWOy$Rz!Q$R!Q![5b![!c$R!c!i5b!i#T$R#T#Z5b#Z;'S$R;'S;=`$d<%lO$RY5iYhQyWOy$Rz!Q$R!Q![6X![!c$R!c!i6X!i#T$R#T#Z6X#Z;'S$R;'S;=`$d<%lO$RY6^YyWOy$Rz!Q$R!Q![6|![!c$R!c!i6|!i#T$R#T#Z6|#Z;'S$R;'S;=`$d<%lO$RY7TYhQyWOy$Rz!Q$R!Q![7s![!c$R!c!i7s!i#T$R#T#Z7s#Z;'S$R;'S;=`$d<%lO$RY7xYyWOy$Rz!Q$R!Q![8h![!c$R!c!i8h!i#T$R#T#Z8h#Z;'S$R;'S;=`$d<%lO$RY8oShQyWOy$Rz;'S$R;'S;=`$d<%lO$R_9O`Oy$Rz}$R}!O:Q!O!Q$R!Q![:Q![!_$R!_!`;T!`!c$R!c!}:Q!}#R$R#R#S:Q#S#T$R#T#o:Q#o;'S$R;'S;=`$d<%lO$RZ:X^yWcROy$Rz}$R}!O:Q!O!Q$R!Q![:Q![!c$R!c!}:Q!}#R$R#R#S:Q#S#T$R#T#o:Q#o;'S$R;'S;=`$d<%lO$R[;[S![SyWOy$Rz;'S$R;'S;=`$d<%lO$RZ;oS$tPlQOy$Rz;'S$R;'S;=`$d<%lO$RZ<QS_ROy$Rz;'S$R;'S;=`$d<%lO$R~<aWOY<^Zw<^wx1Vx#O<^#O#P<y#P;'S<^;'S;=`=u<%lO<^~<|RO;'S<^;'S;=`=V;=`O<^~=YXOY<^Zw<^wx1Vx#O<^#O#P<y#P;'S<^;'S;=`=u;=`<%l<^<%lO<^~=xP;=`<%l<^Z>QSfROy$Rz;'S$R;'S;=`$d<%lO$R~>cOe~_>jU$mPlQOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RZ?TWlQ!aPOy$Rz!O$R!O!P?m!P!Q$R!Q![Br![;'S$R;'S;=`$d<%lO$RZ?rUyWOy$Rz!Q$R!Q![@U![;'S$R;'S;=`$d<%lO$RZ@]YyW$oROy$Rz!Q$R!Q![@U![!g$R!g!h@{!h#X$R#X#Y@{#Y;'S$R;'S;=`$d<%lO$RZAQYyWOy$Rz{$R{|Ap|}$R}!OAp!O!Q$R!Q![BX![;'S$R;'S;=`$d<%lO$RZAuUyWOy$Rz!Q$R!Q![BX![;'S$R;'S;=`$d<%lO$RZB`UyW$oROy$Rz!Q$R!Q![BX![;'S$R;'S;=`$d<%lO$RZBy[yW$oROy$Rz!O$R!O!P@U!P!Q$R!Q![Br![!g$R!g!h@{!h#X$R#X#Y@{#Y;'S$R;'S;=`$d<%lO$RZCtSvROy$Rz;'S$R;'S;=`$d<%lO$RZDVWlQOy$Rz!O$R!O!P?m!P!Q$R!Q![Br![;'S$R;'S;=`$d<%lO$RZDtW$pROy$Rz!O$R!O!PE^!P!Q$R!Q![@U![;'S$R;'S;=`$d<%lO$RYEcUyWOy$Rz!O$R!O!PEu!P;'S$R;'S;=`$d<%lO$RYE|SuQyWOy$Rz;'S$R;'S;=`$d<%lO$RYF_SlQOy$Rz;'S$R;'S;=`$d<%lO$RZFp[$oROy$Rz!O$R!O!P@U!P!Q$R!Q![Br![!g$R!g!h@{!h#X$R#X#Y@{#Y;'S$R;'S;=`$d<%lO$RZGkUtROy$Rz![$R![!]G}!];'S$R;'S;=`$d<%lO$RXHUS}PyWOy$Rz;'S$R;'S;=`$d<%lO$RZHgS!lROy$Rz;'S$R;'S;=`$d<%lO$RYHxUlQOy$Rz!_$R!_!`%c!`;'S$R;'S;=`$d<%lO$R^IaU![SOy$Rz!_$R!_!`%c!`;'S$R;'S;=`$d<%lO$RZIzV!^PlQOy$Rz!_$R!_!`%c!`!aJa!a;'S$R;'S;=`$d<%lO$RXJhS!^PyWOy$Rz;'S$R;'S;=`$d<%lO$RXJwWOy$Rz!c$R!c!}Ka!}#T$R#T#oKa#o;'S$R;'S;=`$d<%lO$RXKh[!oPyWOy$Rz}$R}!OKa!O!Q$R!Q![Ka![!c$R!c!}Ka!}#T$R#T#oKa#o;'S$R;'S;=`$d<%lO$RXLcS!YPOy$Rz;'S$R;'S;=`$d<%lO$R^LtS!WUOy$Rz;'S$R;'S;=`$d<%lO$R[MTUOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RZMjUOy$Rz#b$R#b#cM|#c;'S$R;'S;=`$d<%lO$RZNRUyWOy$Rz#W$R#W#XNe#X;'S$R;'S;=`$d<%lO$RZNlSmRyWOy$Rz;'S$R;'S;=`$d<%lO$RZN{UOy$Rz#f$R#f#gNe#g;'S$R;'S;=`$d<%lO$RZ! dS!eROy$Rz;'S$R;'S;=`$d<%lO$RZ! uS!mROy$Rz;'S$R;'S;=`$d<%lO$R]!!WU!aPOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RW!!mP;=`<%l#r",
      tokenizers: [indentation2, descendant3, interpolationEnd, unitToken3, identifiers2, spaces2, comments, indentedMixins, 0, 1, 2, 3],
      topRules: { "StyleSheet": [0, 10], "Styles": [1, 134] },
      dialects: { indented: 0 },
      specialized: [{ term: 158, get: (value) => spec_identifier10[value] || -1 }, { term: 157, get: (value) => spec_callee2[value] || -1 }, { term: 77, get: (value) => spec_AtKeyword3[value] || -1 }],
      tokenPrec: 3003
    });
  }
});

// ../../node_modules/@codemirror/lang-sass/dist/index.js
var dist_exports15 = {};
__export(dist_exports15, {
  sass: () => sass,
  sassCompletionSource: () => sassCompletionSource,
  sassLanguage: () => sassLanguage
});
function sass(config2) {
  return new LanguageSupport((config2 === null || config2 === void 0 ? void 0 : config2.indented) ? indentedSassLanguage : sassLanguage, sassLanguage.data.of({ autocomplete: sassCompletionSource }));
}
var sassLanguage, indentedSassLanguage, sassCompletionSource;
var init_dist33 = __esm({
  "../../node_modules/@codemirror/lang-sass/dist/index.js"() {
    init_dist32();
    init_dist5();
    init_dist12();
    sassLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "sass",
      parser: /* @__PURE__ */ parser15.configure({
        props: [
          /* @__PURE__ */ foldNodeProp.add({
            Block: foldInside,
            Comment(node, state) {
              return { from: node.from + 2, to: state.sliceDoc(node.to - 2, node.to) == "*/" ? node.to - 2 : node.to };
            }
          }),
          /* @__PURE__ */ indentNodeProp.add({
            Declaration: /* @__PURE__ */ continuedIndent()
          })
        ]
      }),
      languageData: {
        commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
        indentOnInput: /^\s*\}$/,
        wordChars: "$-"
      }
    });
    indentedSassLanguage = /* @__PURE__ */ sassLanguage.configure({
      dialect: "indented",
      props: [
        /* @__PURE__ */ indentNodeProp.add({
          "Block RuleSet": (cx2) => cx2.baseIndent + cx2.unit
        }),
        /* @__PURE__ */ foldNodeProp.add({
          Block: (node) => ({ from: node.from, to: node.to })
        })
      ]
    });
    sassCompletionSource = /* @__PURE__ */ defineCSSCompletionSource((node) => node.name == "VariableName" || node.name == "SassVariableName");
  }
});

// ../../node_modules/@codemirror/lang-wast/dist/index.js
var dist_exports16 = {};
__export(dist_exports16, {
  wast: () => wast,
  wastLanguage: () => wastLanguage
});
function wast() {
  return new LanguageSupport(wastLanguage);
}
var spec_Keyword, parser16, wastLanguage;
var init_dist34 = __esm({
  "../../node_modules/@codemirror/lang-wast/dist/index.js"() {
    init_dist5();
    init_dist4();
    init_dist6();
    spec_Keyword = { __proto__: null, anyref: 34, dataref: 34, eqref: 34, externref: 34, i31ref: 34, funcref: 34, i8: 34, i16: 34, i32: 34, i64: 34, f32: 34, f64: 34 };
    parser16 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h",
      stateData: "!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O",
      goto: "xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV",
      nodeNames: "\u26A0 LineComment BlockComment Module ) ( App Identifier Type Keyword Number String",
      maxTerm: 17,
      nodeProps: [
        ["isolate", -3, 1, 2, 11, ""],
        ["openedBy", 4, "("],
        ["closedBy", 5, ")"],
        ["group", -6, 6, 7, 8, 9, 10, 11, "Expression"]
      ],
      skippedNodes: [0, 1, 2],
      repeatNodeCount: 1,
      tokenData: "0o~R^XY}YZ}]^}pq}rs!Stu#pxy'Uyz(e{|(j}!O(j!Q!R(s!R![*p!]!^.^#T#o.{~!SO_~~!VVOr!Srs!ls#O!S#O#P!q#P;'S!S;'S;=`#j<%lO!S~!qOZ~~!tRO;'S!S;'S;=`!};=`O!S~#QWOr!Srs!ls#O!S#O#P!q#P;'S!S;'S;=`#j;=`<%l!S<%lO!S~#mP;=`<%l!S~#siqr%bst%btu%buv%bvw%bwx%bz{%b{|%b}!O%b!O!P%b!P!Q%b!Q![%b![!]%b!^!_%b!_!`%b!`!a%b!a!b%b!b!c%b!c!}%b#Q#R%b#R#S%b#S#T%b#T#o%b#p#q%b#r#s%b~%giV~qr%bst%btu%buv%bvw%bwx%bz{%b{|%b}!O%b!O!P%b!P!Q%b!Q![%b![!]%b!^!_%b!_!`%b!`!a%b!a!b%b!b!c%b!c!}%b#Q#R%b#R#S%b#S#T%b#T#o%b#p#q%b#r#s%b~'ZPT~!]!^'^~'aTO!]'^!]!^'p!^;'S'^;'S;=`(_<%lO'^~'sVOy'^yz(Yz!]'^!]!^'p!^;'S'^;'S;=`(_<%lO'^~(_OQ~~(bP;=`<%l'^~(jOS~~(mQ!Q!R(s!R![*p~(xUY~!O!P)[!Q![*p!g!h){#R#S+U#X#Y){#l#m+[~)aRY~!Q![)j!g!h){#X#Y){~)oSY~!Q![)j!g!h){#R#S*j#X#Y){~*OR{|*X}!O*X!Q![*_~*[P!Q![*_~*dQY~!Q![*_#R#S*X~*mP!Q![)j~*uTY~!O!P)[!Q![*p!g!h){#R#S+U#X#Y){~+XP!Q![*p~+_R!Q![+h!c!i+h#T#Z+h~+mVY~!O!P,S!Q![+h!c!i+h!r!s-P#R#S+[#T#Z+h#d#e-P~,XTY~!Q![,h!c!i,h!r!s-P#T#Z,h#d#e-P~,mUY~!Q![,h!c!i,h!r!s-P#R#S.Q#T#Z,h#d#e-P~-ST{|-c}!O-c!Q![-o!c!i-o#T#Z-o~-fR!Q![-o!c!i-o#T#Z-o~-tSY~!Q![-o!c!i-o#R#S-c#T#Z-o~.TR!Q![,h!c!i,h#T#Z,h~.aP!]!^.d~.iSP~OY.dZ;'S.d;'S;=`.u<%lO.d~.xP;=`<%l.d~/QiX~qr.{st.{tu.{uv.{vw.{wx.{z{.{{|.{}!O.{!O!P.{!P!Q.{!Q![.{![!].{!^!_.{!_!`.{!`!a.{!a!b.{!b!c.{!c!}.{#Q#R.{#R#S.{#S#T.{#T#o.{#p#q.{#r#s.{",
      tokenizers: [0],
      topRules: { "Module": [0, 3] },
      specialized: [{ term: 9, get: (value) => spec_Keyword[value] || -1 }],
      tokenPrec: 0
    });
    wastLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "wast",
      parser: /* @__PURE__ */ parser16.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            App: /* @__PURE__ */ delimitedIndent({ closing: ")", align: false })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            App: foldInside,
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          }),
          /* @__PURE__ */ styleTags({
            Keyword: tags.keyword,
            Type: tags.typeName,
            Number: tags.number,
            String: tags.string,
            Identifier: tags.variableName,
            LineComment: tags.lineComment,
            BlockComment: tags.blockComment,
            "( )": tags.paren
          })
        ]
      }),
      languageData: {
        commentTokens: { line: ";;", block: { open: "(;", close: ";)" } },
        closeBrackets: { brackets: ["(", '"'] }
      }
    });
  }
});

// ../../node_modules/@lezer/xml/dist/index.js
function nameChar2(ch2) {
  return ch2 == 45 || ch2 == 46 || ch2 == 58 || ch2 >= 65 && ch2 <= 90 || ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isSpace3(ch2) {
  return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
}
function tagNameAfter2(input, offset) {
  let pos = input.pos + offset;
  if (cachedInput2 == input && cachedPos2 == pos) return cachedName2;
  while (isSpace3(input.peek(offset))) offset++;
  let name2 = "";
  for (; ; ) {
    let next2 = input.peek(offset);
    if (!nameChar2(next2)) break;
    name2 += String.fromCharCode(next2);
    offset++;
  }
  cachedInput2 = input;
  cachedPos2 = pos;
  return cachedName2 = name2 || null;
}
function ElementContext2(name2, parent) {
  this.name = name2;
  this.parent = parent;
}
function scanTo(type7, end2) {
  return new ExternalTokenizer((input) => {
    let len = 0, first = end2.charCodeAt(0);
    scan: for (; ; input.advance(), len++) {
      if (input.next < 0) break;
      if (input.next == first) {
        for (let i = 1; i < end2.length; i++)
          if (input.peek(i) != end2.charCodeAt(i)) continue scan;
        break;
      }
    }
    if (len) input.acceptToken(type7);
  });
}
var StartTag2, StartCloseTag2, MissingCloseTag, mismatchedStartCloseTag, incompleteStartCloseTag, commentContent$12, piContent$1, cdataContent$1, Element3, OpenTag2, cachedName2, cachedInput2, cachedPos2, elementContext2, startTag, commentContent2, piContent, cdataContent, xmlHighlighting, parser17;
var init_dist35 = __esm({
  "../../node_modules/@lezer/xml/dist/index.js"() {
    init_dist6();
    init_dist4();
    StartTag2 = 1;
    StartCloseTag2 = 2;
    MissingCloseTag = 3;
    mismatchedStartCloseTag = 4;
    incompleteStartCloseTag = 5;
    commentContent$12 = 36;
    piContent$1 = 37;
    cdataContent$1 = 38;
    Element3 = 11;
    OpenTag2 = 13;
    cachedName2 = null;
    cachedInput2 = null;
    cachedPos2 = 0;
    elementContext2 = new ContextTracker({
      start: null,
      shift(context, term, stack, input) {
        return term == StartTag2 ? new ElementContext2(tagNameAfter2(input, 1) || "", context) : context;
      },
      reduce(context, term) {
        return term == Element3 && context ? context.parent : context;
      },
      reuse(context, node, _stack, input) {
        let type7 = node.type.id;
        return type7 == StartTag2 || type7 == OpenTag2 ? new ElementContext2(tagNameAfter2(input, 1) || "", context) : context;
      },
      strict: false
    });
    startTag = new ExternalTokenizer((input, stack) => {
      if (input.next != 60) return;
      input.advance();
      if (input.next == 47) {
        input.advance();
        let name2 = tagNameAfter2(input, 0);
        if (!name2) return input.acceptToken(incompleteStartCloseTag);
        if (stack.context && name2 == stack.context.name) return input.acceptToken(StartCloseTag2);
        for (let cx2 = stack.context; cx2; cx2 = cx2.parent) if (cx2.name == name2) return input.acceptToken(MissingCloseTag, -2);
        input.acceptToken(mismatchedStartCloseTag);
      } else if (input.next != 33 && input.next != 63) {
        return input.acceptToken(StartTag2);
      }
    }, { contextual: true });
    commentContent2 = scanTo(commentContent$12, "-->");
    piContent = scanTo(piContent$1, "?>");
    cdataContent = scanTo(cdataContent$1, "]]>");
    xmlHighlighting = styleTags({
      Text: tags.content,
      "StartTag StartCloseTag EndTag SelfCloseEndTag": tags.angleBracket,
      TagName: tags.tagName,
      "MismatchedCloseTag/TagName": [tags.tagName, tags.invalid],
      AttributeName: tags.attributeName,
      AttributeValue: tags.attributeValue,
      Is: tags.definitionOperator,
      "EntityReference CharacterReference": tags.character,
      Comment: tags.blockComment,
      ProcessingInst: tags.processingInstruction,
      DoctypeDecl: tags.documentMeta,
      Cdata: tags.special(tags.string)
    });
    parser17 = LRParser.deserialize({
      version: 14,
      states: ",lOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DT'#DTOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C|'#C|O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C}'#C}O$dOrO,59^OOOP,59^,59^OOOS'#DO'#DOO$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6z-E6zOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6{-E6{OOOP1G.x1G.xOOOS-E6|-E6|OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'mO!bO,59eOOOO-E6w-E6wO'{OpO1G.uO'{OpO1G.uOOOP1G.u1G.uO(TOpO7+$fOOOP7+$f7+$fO(]O!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(hO#tO'#CnO(vO&jO'#CnOOOO1G.q1G.qO)UOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO)^O#tO,59YOOOO,59Y,59YOOOO'#C{'#C{O)lO&jO,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.tOOOO-E6y-E6y",
      stateData: ")z~OPQOSVOTWOVWOWWOXWOiXOyPO!QTO!SUO~OvZOx]O~O^`Oz^O~OPQOQcOSVOTWOVWOWWOXWOyPO!QTO!SUO~ORdO~P!SOteO!PgO~OuhO!RjO~O^lOz^O~OvZOxoO~O^qOz^O~O[vO`sOdwOz^O~ORyO~P!SO^{Oz^O~OteO!P}O~OuhO!R!PO~O^!QOz^O~O[!SOz^O~O[!VO`sOd!WOz^O~Oa!YOz^O~Oz^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oz^O~O[!_Oz^O~O[!aOz^O~O[!cO`sOd!dOz^O~O[!cO`sOd!dO~Oa!eOz^O~Oz^O{!gO}!hO~Oz^O[ma`madma~O[!kOz^O~O[!lOz^O~O[!mO`sOd!nO~OW!qOX!qO{!sO|!qO~OW!tOX!tO}!sO!O!tO~O[!vOz^O~OW!qOX!qO{!yO|!qO~OW!tOX!tO}!yO!O!tO~O",
      goto: "%cxPPPPPPPPPPyyP!PP!VPP!`!jP!pyyyP!v!|#S$[$k$q$w$}%TPPPP%ZXWORYbXRORYb_t`qru!T!U!bQ!i!YS!p!e!fR!w!oQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!j!oQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!j!]R!o!eQu`S!UqrU![u!U!bR!b!TQ!r!gR!x!rQ!u!hR!z!uQbRRxbQfTR|fQiUR!OiSXOYTaRb",
      nodeNames: "\u26A0 StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
      maxTerm: 50,
      context: elementContext2,
      nodeProps: [
        ["closedBy", 1, "SelfCloseEndTag EndTag", 13, "CloseTag MissingCloseTag"],
        ["openedBy", 12, "StartTag StartCloseTag", 19, "OpenTag", 20, "StartTag"],
        ["isolate", -6, 13, 18, 19, 21, 22, 24, ""]
      ],
      propSources: [xmlHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 9,
      tokenData: "!)v~R!YOX$qXY)iYZ)iZ]$q]^)i^p$qpq)iqr$qrs*vsv$qvw+fwx/ix}$q}!O0[!O!P$q!P!Q2z!Q![$q![!]4n!]!^$q!^!_8U!_!`!#t!`!a!$l!a!b!%d!b!c$q!c!}4n!}#P$q#P#Q!'W#Q#R$q#R#S4n#S#T$q#T#o4n#o%W$q%W%o4n%o%p$q%p&a4n&a&b$q&b1p4n1p4U$q4U4d4n4d4e$q4e$IS4n$IS$I`$q$I`$Ib4n$Ib$Kh$q$Kh%#t4n%#t&/x$q&/x&Et4n&Et&FV$q&FV;'S4n;'S;:j8O;:j;=`)c<%l?&r$q?&r?Ah4n?Ah?BY$q?BY?Mn4n?MnO$qi$zXVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qa%nVVP!O`Ov%gwx&Tx!^%g!^!_&o!_;'S%g;'S;=`'W<%lO%gP&YTVPOv&Tw!^&T!_;'S&T;'S;=`&i<%lO&TP&lP;=`<%l&T`&tS!O`Ov&ox;'S&o;'S;=`'Q<%lO&o`'TP;=`<%l&oa'ZP;=`<%l%gX'eWVP|WOr'^rs&Tsv'^w!^'^!^!_'}!_;'S'^;'S;=`(i<%lO'^W(ST|WOr'}sv'}w;'S'};'S;=`(c<%lO'}W(fP;=`<%l'}X(lP;=`<%l'^h(vV|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oh)`P;=`<%l(oi)fP;=`<%l$qo)t`VP|W!O`zUOX$qXY)iYZ)iZ]$q]^)i^p$qpq)iqr$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk+PV{YVP!O`Ov%gwx&Tx!^%g!^!_&o!_;'S%g;'S;=`'W<%lO%g~+iast,n![!]-r!c!}-r#R#S-r#T#o-r%W%o-r%p&a-r&b1p-r4U4d-r4e$IS-r$I`$Ib-r$Kh%#t-r&/x&Et-r&FV;'S-r;'S;:j/c?&r?Ah-r?BY?Mn-r~,qQ!Q![,w#l#m-V~,zQ!Q![,w!]!^-Q~-VOX~~-YR!Q![-c!c!i-c#T#Z-c~-fS!Q![-c!]!^-Q!c!i-c#T#Z-c~-ug}!O-r!O!P-r!Q![-r![!]-r!]!^/^!c!}-r#R#S-r#T#o-r$}%O-r%W%o-r%p&a-r&b1p-r1p4U-r4U4d-r4e$IS-r$I`$Ib-r$Je$Jg-r$Kh%#t-r&/x&Et-r&FV;'S-r;'S;:j/c?&r?Ah-r?BY?Mn-r~/cOW~~/fP;=`<%l-rk/rW}bVP|WOr'^rs&Tsv'^w!^'^!^!_'}!_;'S'^;'S;=`(i<%lO'^k0eZVP|W!O`Or$qrs%gsv$qwx'^x}$q}!O1W!O!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk1aZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a2S!a;'S$q;'S;=`)c<%lO$qk2_X!PQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qm3TZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a3v!a;'S$q;'S;=`)c<%lO$qm4RXdSVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qo4{!P`S^QVP|W!O`Or$qrs%gsv$qwx'^x}$q}!O4n!O!P4n!P!Q$q!Q![4n![!]4n!]!^$q!^!_(o!_!c$q!c!}4n!}#R$q#R#S4n#S#T$q#T#o4n#o$}$q$}%O4n%O%W$q%W%o4n%o%p$q%p&a4n&a&b$q&b1p4n1p4U4n4U4d4n4d4e$q4e$IS4n$IS$I`$q$I`$Ib4n$Ib$Je$q$Je$Jg4n$Jg$Kh$q$Kh%#t4n%#t&/x$q&/x&Et4n&Et&FV$q&FV;'S4n;'S;:j8O;:j;=`)c<%l?&r$q?&r?Ah4n?Ah?BY$q?BY?Mn4n?MnO$qo8RP;=`<%l4ni8]Y|W!O`Oq(oqr8{rs&osv(owx'}x!a(o!a!b!#U!b;'S(o;'S;=`)]<%lO(oi9S_|W!O`Or(ors&osv(owx'}x}(o}!O:R!O!f(o!f!g;e!g!}(o!}#ODh#O#W(o#W#XLp#X;'S(o;'S;=`)]<%lO(oi:YX|W!O`Or(ors&osv(owx'}x}(o}!O:u!O;'S(o;'S;=`)]<%lO(oi;OV!QP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oi;lX|W!O`Or(ors&osv(owx'}x!q(o!q!r<X!r;'S(o;'S;=`)]<%lO(oi<`X|W!O`Or(ors&osv(owx'}x!e(o!e!f<{!f;'S(o;'S;=`)]<%lO(oi=SX|W!O`Or(ors&osv(owx'}x!v(o!v!w=o!w;'S(o;'S;=`)]<%lO(oi=vX|W!O`Or(ors&osv(owx'}x!{(o!{!|>c!|;'S(o;'S;=`)]<%lO(oi>jX|W!O`Or(ors&osv(owx'}x!r(o!r!s?V!s;'S(o;'S;=`)]<%lO(oi?^X|W!O`Or(ors&osv(owx'}x!g(o!g!h?y!h;'S(o;'S;=`)]<%lO(oi@QY|W!O`Or?yrs@psv?yvwA[wxBdx!`?y!`!aCr!a;'S?y;'S;=`Db<%lO?ya@uV!O`Ov@pvxA[x!`@p!`!aAy!a;'S@p;'S;=`B^<%lO@pPA_TO!`A[!`!aAn!a;'SA[;'S;=`As<%lOA[PAsOiPPAvP;=`<%lA[aBQSiP!O`Ov&ox;'S&o;'S;=`'Q<%lO&oaBaP;=`<%l@pXBiX|WOrBdrsA[svBdvwA[w!`Bd!`!aCU!a;'SBd;'S;=`Cl<%lOBdXC]TiP|WOr'}sv'}w;'S'};'S;=`(c<%lO'}XCoP;=`<%lBdiC{ViP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oiDeP;=`<%l?yiDoZ|W!O`Or(ors&osv(owx'}x!e(o!e!fEb!f#V(o#V#WIr#W;'S(o;'S;=`)]<%lO(oiEiX|W!O`Or(ors&osv(owx'}x!f(o!f!gFU!g;'S(o;'S;=`)]<%lO(oiF]X|W!O`Or(ors&osv(owx'}x!c(o!c!dFx!d;'S(o;'S;=`)]<%lO(oiGPX|W!O`Or(ors&osv(owx'}x!v(o!v!wGl!w;'S(o;'S;=`)]<%lO(oiGsX|W!O`Or(ors&osv(owx'}x!c(o!c!dH`!d;'S(o;'S;=`)]<%lO(oiHgX|W!O`Or(ors&osv(owx'}x!}(o!}#OIS#O;'S(o;'S;=`)]<%lO(oiI]V|W!O`yPOr(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(oiIyX|W!O`Or(ors&osv(owx'}x#W(o#W#XJf#X;'S(o;'S;=`)]<%lO(oiJmX|W!O`Or(ors&osv(owx'}x#T(o#T#UKY#U;'S(o;'S;=`)]<%lO(oiKaX|W!O`Or(ors&osv(owx'}x#h(o#h#iK|#i;'S(o;'S;=`)]<%lO(oiLTX|W!O`Or(ors&osv(owx'}x#T(o#T#UH`#U;'S(o;'S;=`)]<%lO(oiLwX|W!O`Or(ors&osv(owx'}x#c(o#c#dMd#d;'S(o;'S;=`)]<%lO(oiMkX|W!O`Or(ors&osv(owx'}x#V(o#V#WNW#W;'S(o;'S;=`)]<%lO(oiN_X|W!O`Or(ors&osv(owx'}x#h(o#h#iNz#i;'S(o;'S;=`)]<%lO(oi! RX|W!O`Or(ors&osv(owx'}x#m(o#m#n! n#n;'S(o;'S;=`)]<%lO(oi! uX|W!O`Or(ors&osv(owx'}x#d(o#d#e!!b#e;'S(o;'S;=`)]<%lO(oi!!iX|W!O`Or(ors&osv(owx'}x#X(o#X#Y?y#Y;'S(o;'S;=`)]<%lO(oi!#_V!SP|W!O`Or(ors&osv(owx'}x;'S(o;'S;=`)]<%lO(ok!$PXaQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qo!$wX[UVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk!%mZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a!&`!a;'S$q;'S;=`)c<%lO$qk!&kX!RQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$qk!'aZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_#P$q#P#Q!(S#Q;'S$q;'S;=`)c<%lO$qk!(]ZVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_!`$q!`!a!)O!a;'S$q;'S;=`)c<%lO$qk!)ZXxQVP|W!O`Or$qrs%gsv$qwx'^x!^$q!^!_(o!_;'S$q;'S;=`)c<%lO$q",
      tokenizers: [startTag, commentContent2, piContent, cdataContent, 0, 1, 2, 3, 4],
      topRules: { "Document": [0, 6] },
      tokenPrec: 0
    });
  }
});

// ../../node_modules/@codemirror/lang-xml/dist/index.js
var dist_exports17 = {};
__export(dist_exports17, {
  autoCloseTags: () => autoCloseTags3,
  completeFromSchema: () => completeFromSchema2,
  xml: () => xml,
  xmlLanguage: () => xmlLanguage
});
function tagName(doc2, tag2) {
  let name2 = tag2 && tag2.getChild("TagName");
  return name2 ? doc2.sliceString(name2.from, name2.to) : "";
}
function elementName$1(doc2, tree) {
  let tag2 = tree && tree.firstChild;
  return !tag2 || tag2.name != "OpenTag" ? "" : tagName(doc2, tag2);
}
function attrName(doc2, tag2, pos) {
  let attr = tag2 && tag2.getChildren("Attribute").find((a2) => a2.from <= pos && a2.to >= pos);
  let name2 = attr && attr.getChild("AttributeName");
  return name2 ? doc2.sliceString(name2.from, name2.to) : "";
}
function findParentElement2(tree) {
  for (let cur2 = tree && tree.parent; cur2; cur2 = cur2.parent)
    if (cur2.name == "Element")
      return cur2;
  return null;
}
function findLocation(state, pos) {
  var _a2;
  let at2 = syntaxTree(state).resolveInner(pos, -1), inTag = null;
  for (let cur2 = at2; !inTag && cur2.parent; cur2 = cur2.parent)
    if (cur2.name == "OpenTag" || cur2.name == "CloseTag" || cur2.name == "SelfClosingTag" || cur2.name == "MismatchedCloseTag")
      inTag = cur2;
  if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {
    let elt2 = inTag.parent;
    if (at2.name == "TagName")
      return inTag.name == "CloseTag" || inTag.name == "MismatchedCloseTag" ? { type: "closeTag", from: at2.from, context: elt2 } : { type: "openTag", from: at2.from, context: findParentElement2(elt2) };
    if (at2.name == "AttributeName")
      return { type: "attrName", from: at2.from, context: inTag };
    if (at2.name == "AttributeValue")
      return { type: "attrValue", from: at2.from, context: inTag };
    let before = at2 == inTag || at2.name == "Attribute" ? at2.childBefore(pos) : at2;
    if ((before === null || before === void 0 ? void 0 : before.name) == "StartTag")
      return { type: "openTag", from: pos, context: findParentElement2(elt2) };
    if ((before === null || before === void 0 ? void 0 : before.name) == "StartCloseTag" && before.to <= pos)
      return { type: "closeTag", from: pos, context: elt2 };
    if ((before === null || before === void 0 ? void 0 : before.name) == "Is")
      return { type: "attrValue", from: pos, context: inTag };
    if (before)
      return { type: "attrName", from: pos, context: inTag };
    return null;
  } else if (at2.name == "StartCloseTag") {
    return { type: "closeTag", from: pos, context: at2.parent };
  }
  while (at2.parent && at2.to == pos && !((_a2 = at2.lastChild) === null || _a2 === void 0 ? void 0 : _a2.type.isError))
    at2 = at2.parent;
  if (at2.name == "Element" || at2.name == "Text" || at2.name == "Document")
    return { type: "tag", from: pos, context: at2.name == "Element" ? at2 : findParentElement2(at2) };
  return null;
}
function attrCompletion(spec) {
  return Object.assign(Object.assign({ type: "property" }, spec.completion || {}), { label: spec.name });
}
function valueCompletion(spec) {
  return typeof spec == "string" ? { label: `"${spec}"`, type: "constant" } : /^"/.test(spec.label) ? spec : Object.assign(Object.assign({}, spec), { label: `"${spec.label}"` });
}
function completeFromSchema2(eltSpecs, attrSpecs) {
  let allAttrs = [], globalAttrs = [];
  let attrValues = /* @__PURE__ */ Object.create(null);
  for (let s of attrSpecs) {
    let completion = attrCompletion(s);
    allAttrs.push(completion);
    if (s.global)
      globalAttrs.push(completion);
    if (s.values)
      attrValues[s.name] = s.values.map(valueCompletion);
  }
  let allElements = [], topElements = [];
  let byName = /* @__PURE__ */ Object.create(null);
  for (let s of eltSpecs) {
    let attrs2 = globalAttrs, attrVals = attrValues;
    if (s.attributes)
      attrs2 = attrs2.concat(s.attributes.map((s2) => {
        if (typeof s2 == "string")
          return allAttrs.find((a2) => a2.label == s2) || { label: s2, type: "property" };
        if (s2.values) {
          if (attrVals == attrValues)
            attrVals = Object.create(attrVals);
          attrVals[s2.name] = s2.values.map(valueCompletion);
        }
        return attrCompletion(s2);
      }));
    let elt2 = new Element4(s, attrs2, attrVals);
    byName[elt2.name] = elt2;
    allElements.push(elt2);
    if (s.top)
      topElements.push(elt2);
  }
  if (!topElements.length)
    topElements = allElements;
  for (let i = 0; i < allElements.length; i++) {
    let s = eltSpecs[i], elt2 = allElements[i];
    if (s.children) {
      for (let ch2 of s.children)
        if (byName[ch2])
          elt2.children.push(byName[ch2]);
    } else {
      elt2.children = allElements;
    }
  }
  return (cx2) => {
    var _a2;
    let { doc: doc2 } = cx2.state, loc = findLocation(cx2.state, cx2.pos);
    if (!loc || loc.type == "tag" && !cx2.explicit)
      return null;
    let { type: type7, from: from3, context } = loc;
    if (type7 == "openTag") {
      let children = topElements;
      let parentName = elementName$1(doc2, context);
      if (parentName) {
        let parent = byName[parentName];
        children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;
      }
      return {
        from: from3,
        options: children.map((ch2) => ch2.completion),
        validFor: Identifier5
      };
    } else if (type7 == "closeTag") {
      let parentName = elementName$1(doc2, context);
      return parentName ? {
        from: from3,
        to: cx2.pos + (doc2.sliceString(cx2.pos, cx2.pos + 1) == ">" ? 1 : 0),
        options: [((_a2 = byName[parentName]) === null || _a2 === void 0 ? void 0 : _a2.closeNameCompletion) || { label: parentName + ">", type: "type" }],
        validFor: Identifier5
      } : null;
    } else if (type7 == "attrName") {
      let parent = byName[tagName(doc2, context)];
      return {
        from: from3,
        options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,
        validFor: Identifier5
      };
    } else if (type7 == "attrValue") {
      let attr = attrName(doc2, context, from3);
      if (!attr)
        return null;
      let parent = byName[tagName(doc2, context)];
      let values2 = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];
      if (!values2 || !values2.length)
        return null;
      return {
        from: from3,
        to: cx2.pos + (doc2.sliceString(cx2.pos, cx2.pos + 1) == '"' ? 1 : 0),
        options: values2,
        validFor: /^"[^"]*"?$/
      };
    } else if (type7 == "tag") {
      let parentName = elementName$1(doc2, context), parent = byName[parentName];
      let closing4 = [], last = context && context.lastChild;
      if (parentName && (!last || last.name != "CloseTag" || tagName(doc2, last) != parentName))
        closing4.push(parent ? parent.closeCompletion : { label: "</" + parentName + ">", type: "type", boost: 2 });
      let options = closing4.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map((e) => e.openCompletion));
      if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {
        let openTag = context.firstChild;
        if (openTag.to > cx2.pos - 20 && !/\S/.test(cx2.state.sliceDoc(openTag.to, cx2.pos)))
          options = options.concat(parent.text);
      }
      return {
        from: from3,
        options,
        validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
      };
    } else {
      return null;
    }
  };
}
function xml(conf = {}) {
  let support = [xmlLanguage.data.of({
    autocomplete: completeFromSchema2(conf.elements || [], conf.attributes || [])
  })];
  if (conf.autoCloseTags !== false)
    support.push(autoCloseTags3);
  return new LanguageSupport(xmlLanguage, support);
}
function elementName3(doc2, tree, max = doc2.length) {
  if (!tree)
    return "";
  let tag2 = tree.firstChild;
  let name2 = tag2 && tag2.getChild("TagName");
  return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
}
var Element4, Identifier5, xmlLanguage, autoCloseTags3;
var init_dist36 = __esm({
  "../../node_modules/@codemirror/lang-xml/dist/index.js"() {
    init_dist35();
    init_dist5();
    init_dist2();
    init_dist3();
    Element4 = class {
      constructor(spec, attrs2, attrValues) {
        this.attrs = attrs2;
        this.attrValues = attrValues;
        this.children = [];
        this.name = spec.name;
        this.completion = Object.assign(Object.assign({ type: "type" }, spec.completion || {}), { label: this.name });
        this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name });
        this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 });
        this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" });
        this.text = spec.textContent ? spec.textContent.map((s) => ({ label: s, type: "text" })) : [];
      }
    };
    Identifier5 = /^[:\-\.\w\u00b7-\uffff]*$/;
    xmlLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "xml",
      parser: /* @__PURE__ */ parser17.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Element(context) {
              let closed = /^\s*<\//.test(context.textAfter);
              return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
            },
            "OpenTag CloseTag SelfClosingTag"(context) {
              return context.column(context.node.from) + context.unit;
            }
          }),
          /* @__PURE__ */ foldNodeProp.add({
            Element(subtree) {
              let first = subtree.firstChild, last = subtree.lastChild;
              if (!first || first.name != "OpenTag")
                return null;
              return { from: first.to, to: last.name == "CloseTag" ? last.from : subtree.to };
            }
          }),
          /* @__PURE__ */ bracketMatchingHandle.add({
            "OpenTag CloseTag": (node) => node.getChild("TagName")
          })
        ]
      }),
      languageData: {
        commentTokens: { block: { open: "<!--", close: "-->" } },
        indentOnInput: /^\s*<\/$/
      }
    });
    autoCloseTags3 = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text5, insertTransaction) => {
      if (view.composing || view.state.readOnly || from3 != to || text5 != ">" && text5 != "/" || !xmlLanguage.isActiveAt(view.state, from3, -1))
        return false;
      let base5 = insertTransaction(), { state } = base5;
      let closeTags = state.changeByRange((range) => {
        var _a2, _b2, _c;
        let { head } = range;
        let didType = state.doc.sliceString(head - 1, head) == text5;
        let after = syntaxTree(state).resolveInner(head, -1), name2;
        if (didType && text5 == ">" && after.name == "EndTag") {
          let tag2 = after.parent;
          if (((_b2 = (_a2 = tag2.parent) === null || _a2 === void 0 ? void 0 : _a2.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "CloseTag" && (name2 = elementName3(state.doc, tag2.parent, head))) {
            let to2 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
            let insert2 = `</${name2}>`;
            return { range, changes: { from: head, to: to2, insert: insert2 } };
          }
        } else if (didType && text5 == "/" && after.name == "StartCloseTag") {
          let base6 = after.parent;
          if (after.from == head - 2 && ((_c = base6.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name2 = elementName3(state.doc, base6, head))) {
            let to2 = head + (state.doc.sliceString(head, head + 1) === ">" ? 1 : 0);
            let insert2 = `${name2}>`;
            return {
              range: EditorSelection.cursor(head + insert2.length, -1),
              changes: { from: head, to: to2, insert: insert2 }
            };
          }
        }
        return { range };
      });
      if (closeTags.changes.empty)
        return false;
      view.dispatch([
        base5,
        state.update(closeTags, {
          userEvent: "input.complete",
          scrollIntoView: true
        })
      ]);
      return true;
    });
  }
});

// ../../node_modules/@lezer/yaml/dist/index.js
function findColumn2(input, pos) {
  for (let col = 0, p = pos - input.pos - 1; ; p--, col++) {
    let ch2 = input.peek(p);
    if (isBreakSpace(ch2) || ch2 == -1) return col;
  }
}
function isNonBreakSpace(ch2) {
  return ch2 == 32 || ch2 == 9;
}
function isBreakSpace(ch2) {
  return ch2 == 10 || ch2 == 13;
}
function isSpace4(ch2) {
  return isNonBreakSpace(ch2) || isBreakSpace(ch2);
}
function isSep(ch2) {
  return ch2 < 0 || isSpace4(ch2);
}
function three(input, ch2, off = 0) {
  return input.peek(off) == ch2 && input.peek(off + 1) == ch2 && input.peek(off + 2) == ch2 && isSep(input.peek(off + 3));
}
function uriChar(ch2) {
  return ch2 > 32 && ch2 < 127 && ch2 != 34 && ch2 != 37 && ch2 != 44 && ch2 != 60 && ch2 != 62 && ch2 != 92 && ch2 != 94 && ch2 != 96 && ch2 != 123 && ch2 != 124 && ch2 != 125;
}
function hexChar(ch2) {
  return ch2 >= 48 && ch2 <= 57 || ch2 >= 97 && ch2 <= 102 || ch2 >= 65 && ch2 <= 70;
}
function readUriChar(input, quoted) {
  if (input.next == 37) {
    input.advance();
    if (hexChar(input.next)) input.advance();
    if (hexChar(input.next)) input.advance();
    return true;
  } else if (uriChar(input.next) || quoted && input.next == 44) {
    input.advance();
    return true;
  }
  return false;
}
function readTag(input) {
  input.advance();
  if (input.next == 60) {
    input.advance();
    for (; ; ) {
      if (!readUriChar(input, true)) {
        if (input.next == 62) input.advance();
        break;
      }
    }
  } else {
    while (readUriChar(input, false)) {
    }
  }
}
function readAnchor(input) {
  input.advance();
  while (!isSep(input.next) && charTag(input.tag) != "f") input.advance();
}
function readQuoted(input, scan) {
  let quote4 = input.next, lineBreak = false, start2 = input.pos;
  input.advance();
  for (; ; ) {
    let ch2 = input.next;
    if (ch2 < 0) break;
    input.advance();
    if (ch2 == quote4) {
      if (ch2 == 39) {
        if (input.next == 39) input.advance();
        else break;
      } else {
        break;
      }
    } else if (ch2 == 92 && quote4 == 34) {
      if (input.next >= 0) input.advance();
    } else if (isBreakSpace(ch2)) {
      if (scan) return false;
      lineBreak = true;
    } else if (scan && input.pos >= start2 + 1024) {
      return false;
    }
  }
  return !lineBreak;
}
function scanBrackets(input) {
  for (let stack = [], end2 = input.pos + 1024; ; ) {
    if (input.next == 91 || input.next == 123) {
      stack.push(input.next);
      input.advance();
    } else if (input.next == 39 || input.next == 34) {
      if (!readQuoted(input, true)) return false;
    } else if (input.next == 93 || input.next == 125) {
      if (stack[stack.length - 1] != input.next - 2) return false;
      stack.pop();
      input.advance();
      if (!stack.length) return true;
    } else if (input.next < 0 || input.pos > end2 || isBreakSpace(input.next)) {
      return false;
    } else {
      input.advance();
    }
  }
}
function charTag(ch2) {
  if (ch2 < 33) return "u";
  if (ch2 > 125) return "s";
  return charTable[ch2 - 33];
}
function isSafe(ch2, inFlow) {
  let tag2 = charTag(ch2);
  return tag2 != "u" && !(inFlow && tag2 == "f");
}
function readPlain(input, scan, inFlow, indent7) {
  if (charTag(input.next) == "s" || (input.next == 63 || input.next == 58 || input.next == 45) && isSafe(input.peek(1), inFlow)) {
    input.advance();
  } else {
    return false;
  }
  let start2 = input.pos;
  for (; ; ) {
    let next2 = input.next, off = 0, lineIndent = indent7 + 1;
    while (isSpace4(next2)) {
      if (isBreakSpace(next2)) {
        if (scan) return false;
        lineIndent = 0;
      } else {
        lineIndent++;
      }
      next2 = input.peek(++off);
    }
    let safe = next2 >= 0 && (next2 == 58 ? isSafe(input.peek(off + 1), inFlow) : next2 == 35 ? input.peek(off - 1) != 32 : isSafe(next2, inFlow));
    if (!safe || !inFlow && lineIndent <= indent7 || lineIndent == 0 && !inFlow && (three(input, 45, off) || three(input, 46, off)))
      break;
    if (scan && charTag(next2) == "f") return false;
    for (let i = off; i >= 0; i--) input.advance();
    if (scan && input.pos > start2 + 1024) return false;
  }
  return true;
}
var blockEnd, eof4, DirectiveEnd, DocEnd, sequenceStartMark, sequenceContinueMark, explicitMapStartMark, explicitMapContinueMark, flowMapMark, mapStartMark, mapContinueMark, Literal, QuotedLiteral, Anchor, Alias, Tag2, BlockLiteralContent, BracketL3, FlowSequence, Colon, BraceL3, FlowMapping, BlockLiteralHeader, type_Top, type_Seq, type_Map, type_Flow, type_Lit, Context3, indentation3, newlines2, blockMark, charTable, literals, blockLiteral, yamlHighlighting, parser18;
var init_dist37 = __esm({
  "../../node_modules/@lezer/yaml/dist/index.js"() {
    init_dist6();
    init_dist4();
    blockEnd = 63;
    eof4 = 64;
    DirectiveEnd = 1;
    DocEnd = 2;
    sequenceStartMark = 3;
    sequenceContinueMark = 4;
    explicitMapStartMark = 5;
    explicitMapContinueMark = 6;
    flowMapMark = 7;
    mapStartMark = 65;
    mapContinueMark = 66;
    Literal = 8;
    QuotedLiteral = 9;
    Anchor = 10;
    Alias = 11;
    Tag2 = 12;
    BlockLiteralContent = 13;
    BracketL3 = 19;
    FlowSequence = 20;
    Colon = 29;
    BraceL3 = 33;
    FlowMapping = 34;
    BlockLiteralHeader = 47;
    type_Top = 0;
    type_Seq = 1;
    type_Map = 2;
    type_Flow = 3;
    type_Lit = 4;
    Context3 = class {
      constructor(parent, depth, type7) {
        this.parent = parent;
        this.depth = depth;
        this.type = type7;
        this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4) + type7;
      }
    };
    Context3.top = new Context3(null, -1, type_Top);
    indentation3 = new ContextTracker({
      start: Context3.top,
      reduce(context, term) {
        return context.type == type_Flow && (term == FlowSequence || term == FlowMapping) ? context.parent : context;
      },
      shift(context, term, stack, input) {
        if (term == sequenceStartMark)
          return new Context3(context, findColumn2(input, input.pos), type_Seq);
        if (term == mapStartMark || term == explicitMapStartMark)
          return new Context3(context, findColumn2(input, input.pos), type_Map);
        if (term == blockEnd)
          return context.parent;
        if (term == BracketL3 || term == BraceL3)
          return new Context3(context, 0, type_Flow);
        if (term == BlockLiteralContent && context.type == type_Lit)
          return context.parent;
        if (term == BlockLiteralHeader) {
          let indent7 = /[1-9]/.exec(input.read(input.pos, stack.pos));
          if (indent7) return new Context3(context, context.depth + +indent7[0], type_Lit);
        }
        return context;
      },
      hash(context) {
        return context.hash;
      }
    });
    newlines2 = new ExternalTokenizer((input, stack) => {
      if (input.next == -1 && stack.canShift(eof4))
        return input.acceptToken(eof4);
      let prev = input.peek(-1);
      if ((isBreakSpace(prev) || prev < 0) && stack.context.type != type_Flow) {
        if (three(
          input,
          45
          /* '-' */
        )) {
          if (stack.canShift(blockEnd)) input.acceptToken(blockEnd);
          else return input.acceptToken(DirectiveEnd, 3);
        }
        if (three(
          input,
          46
          /* '.' */
        )) {
          if (stack.canShift(blockEnd)) input.acceptToken(blockEnd);
          else return input.acceptToken(DocEnd, 3);
        }
        let depth = 0;
        while (input.next == 32) {
          depth++;
          input.advance();
        }
        if ((depth < stack.context.depth || depth == stack.context.depth && stack.context.type == type_Seq && (input.next != 45 || !isSep(input.peek(1)))) && // Not blank
        input.next != -1 && !isBreakSpace(input.next) && input.next != 35)
          input.acceptToken(blockEnd, -depth);
      }
    }, { contextual: true });
    blockMark = new ExternalTokenizer((input, stack) => {
      if (stack.context.type == type_Flow) {
        if (input.next == 63) {
          input.advance();
          if (isSep(input.next)) input.acceptToken(flowMapMark);
        }
        return;
      }
      if (input.next == 45) {
        input.advance();
        if (isSep(input.next))
          input.acceptToken(stack.context.type == type_Seq && stack.context.depth == findColumn2(input, input.pos - 1) ? sequenceContinueMark : sequenceStartMark);
      } else if (input.next == 63) {
        input.advance();
        if (isSep(input.next))
          input.acceptToken(stack.context.type == type_Map && stack.context.depth == findColumn2(input, input.pos - 1) ? explicitMapContinueMark : explicitMapStartMark);
      } else {
        let start2 = input.pos;
        for (; ; ) {
          if (isNonBreakSpace(input.next)) {
            if (input.pos == start2) return;
            input.advance();
          } else if (input.next == 33) {
            readTag(input);
          } else if (input.next == 38) {
            readAnchor(input);
          } else if (input.next == 42) {
            readAnchor(input);
            break;
          } else if (input.next == 39 || input.next == 34) {
            if (readQuoted(input, true)) break;
            return;
          } else if (input.next == 91 || input.next == 123) {
            if (!scanBrackets(input)) return;
            break;
          } else {
            readPlain(input, true, false, 0);
            break;
          }
        }
        while (isNonBreakSpace(input.next)) input.advance();
        if (input.next == 58) {
          if (input.pos == start2 && stack.canShift(Colon)) return;
          let after = input.peek(1);
          if (isSep(after))
            input.acceptTokenTo(stack.context.type == type_Map && stack.context.depth == findColumn2(input, start2) ? mapContinueMark : mapStartMark, start2);
        }
      }
    }, { contextual: true });
    charTable = "iiisiiissisfissssssssssssisssiiissssssssssssssssssssssssssfsfssissssssssssssssssssssssssssfif";
    literals = new ExternalTokenizer((input, stack) => {
      if (input.next == 33) {
        readTag(input);
        input.acceptToken(Tag2);
      } else if (input.next == 38 || input.next == 42) {
        let token = input.next == 38 ? Anchor : Alias;
        readAnchor(input);
        input.acceptToken(token);
      } else if (input.next == 39 || input.next == 34) {
        readQuoted(input, false);
        input.acceptToken(QuotedLiteral);
      } else if (readPlain(input, false, stack.context.type == type_Flow, stack.context.depth)) {
        input.acceptToken(Literal);
      }
    });
    blockLiteral = new ExternalTokenizer((input, stack) => {
      let indent7 = stack.context.type == type_Lit ? stack.context.depth : -1, upto = input.pos;
      scan: for (; ; ) {
        let depth = 0, next2 = input.next;
        while (next2 == 32) next2 = input.peek(++depth);
        if (!depth && (three(input, 45, depth) || three(input, 46, depth))) break;
        if (!isBreakSpace(next2)) {
          if (indent7 < 0) indent7 = Math.max(stack.context.depth + 1, depth);
          if (depth < indent7) break;
        }
        for (; ; ) {
          if (input.next < 0) break scan;
          let isBreak = isBreakSpace(input.next);
          input.advance();
          if (isBreak) continue scan;
          upto = input.pos;
        }
      }
      input.acceptTokenTo(BlockLiteralContent, upto);
    });
    yamlHighlighting = styleTags({
      DirectiveName: tags.keyword,
      DirectiveContent: tags.attributeValue,
      "DirectiveEnd DocEnd": tags.meta,
      QuotedLiteral: tags.string,
      BlockLiteralHeader: tags.special(tags.string),
      BlockLiteralContent: tags.content,
      Literal: tags.content,
      "Key/Literal Key/QuotedLiteral": tags.definition(tags.propertyName),
      "Anchor Alias": tags.labelName,
      Tag: tags.typeName,
      Comment: tags.lineComment,
      ": , -": tags.separator,
      "?": tags.punctuation,
      "[ ]": tags.squareBracket,
      "{ }": tags.brace
    });
    parser18 = LRParser.deserialize({
      version: 14,
      states: "5lQ!ZQgOOO#PQfO'#CpO#uQfO'#DOOOQR'#Dv'#DvO$qQgO'#DRO%gQdO'#DUO%nQgO'#DUO&ROaO'#D[OOQR'#Du'#DuO&{QgO'#D^O'rQgO'#D`OOQR'#Dt'#DtO(iOqO'#DbOOQP'#Dj'#DjO(zQaO'#CmO)YQgO'#CmOOQP'#Cm'#CmQ)jQaOOQ)uQgOOQ]QgOOO*PQdO'#CrO*nQdO'#CtOOQO'#Dw'#DwO+]Q`O'#CxO+hQdO'#CwO+rQ`O'#CwOOQO'#Cv'#CvO+wQdO'#CvOOQO'#Cq'#CqO,UQ`O,59[O,^QfO,59[OOQR,59[,59[OOQO'#Cx'#CxO,eQ`O'#DPO,pQdO'#DPOOQO'#Dx'#DxO,zQdO'#DxO-XQ`O,59jO-aQfO,59jOOQR,59j,59jOOQR'#DS'#DSO-hQcO,59mO-sQgO'#DVO.TQ`O'#DVO.YQcO,59pOOQR'#DX'#DXO#|QfO'#DWO.hQcO'#DWOOQR,59v,59vO.yOWO,59vO/OOaO,59vO/WOaO,59vO/cQgO'#D_OOQR,59x,59xO0VQgO'#DaOOQR,59z,59zOOQP,59|,59|O0yOaO,59|O1ROaO,59|O1aOqO,59|OOQP-E7h-E7hO1oQgO,59XOOQP,59X,59XO2PQaO'#DeO2_QgO'#DeO2oQgO'#DkOOQP'#Dk'#DkQ)jQaOOO3PQdO'#CsOOQO,59^,59^O3kQdO'#CuOOQO,59`,59`OOQO,59c,59cO4VQdO,59cO4aQdO'#CzO4kQ`O'#CzOOQO,59b,59bOOQU,5:Q,5:QOOQR1G.v1G.vO4pQ`O1G.vOOQU-E7d-E7dO4xQdO,59kOOQO,59k,59kO5SQdO'#DQO5^Q`O'#DQOOQO,5:d,5:dOOQU,5:R,5:ROOQR1G/U1G/UO5cQ`O1G/UOOQU-E7e-E7eO5kQgO'#DhO5xQcO1G/XOOQR1G/X1G/XOOQR,59q,59qO6TQgO,59qO6eQdO'#DiO6lQgO'#DiO7PQcO1G/[OOQR1G/[1G/[OOQR,59r,59rO#|QfO,59rOOQR1G/b1G/bO7_OWO1G/bO7dOaO1G/bOOQR,59y,59yOOQR,59{,59{OOQP1G/h1G/hO7lOaO1G/hO7tOaO1G/hO8POaO1G/hOOQP1G.s1G.sO8_QgO,5:POOQP,5:P,5:POOQP,5:V,5:VOOQP-E7i-E7iOOQO,59_,59_OOQO,59a,59aOOQO1G.}1G.}OOQO,59f,59fO8oQdO,59fOOQR7+$b7+$bP,XQ`O'#DfOOQO1G/V1G/VOOQO,59l,59lO8yQdO,59lOOQR7+$p7+$pP9TQ`O'#DgOOQR'#DT'#DTOOQR,5:S,5:SOOQR-E7f-E7fOOQR7+$s7+$sOOQR1G/]1G/]O9YQgO'#DYO9jQ`O'#DYOOQR,5:T,5:TO#|QfO'#DZO9oQcO'#DZOOQR-E7g-E7gOOQR7+$v7+$vOOQR1G/^1G/^OOQR7+$|7+$|O:QOWO7+$|OOQP7+%S7+%SO:VOaO7+%SO:_OaO7+%SOOQP1G/k1G/kOOQO1G/Q1G/QOOQO1G/W1G/WOOQR,59t,59tO:jQgO,59tOOQR,59u,59uO#|QfO,59uOOQR<<Hh<<HhOOQP<<Hn<<HnO:zOaO<<HnOOQR1G/`1G/`OOQR1G/a1G/aOOQPAN>YAN>Y",
      stateData: ";S~O!fOS!gOS^OS~OP_OQbORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!V[O!cTO~O`cO~P]OVkOWROXROYeOZfO[dOcPOmhOqQO~OboO~P!bOVtOWROXROYeOZfO[dOcPOmrOqQO~OpwO~P#WORSOTUOWROXROYYOZZO[XOcPOqQO!PVO!cTO~OSvP!avP!bvP~P#|OWROXROYeOZfO[dOcPOqQO~OmzO~P%OOm!OOUzP!azP!bzP!dzP~P#|O^!SO!b!QO!f!TO!g!RO~ORSOTUOWROXROcPOqQO!PVO!cTO~OY!UOP!QXQ!QX!V!QX!`!QXS!QX!a!QX!b!QXU!QXm!QX!d!QX~P&aO[!WOP!SXQ!SX!V!SX!`!SXS!SX!a!SX!b!SXU!SXm!SX!d!SX~P&aO^!ZO!W![O!b!YO!f!]O!g!YO~OP!_O!V[OQaX!`aX~OPaXQaX!VaX!`aX~P#|OP!bOQ!cO!V[O~OP_O!V[O~P#|OWROXROY!fOcPOqQObfXmfXofXpfX~OWROXRO[!hOcPOqQObhXmhXohXphX~ObeXmlXoeX~ObkXokX~P%OOm!kO~Om!lObnPonP~P%OOb!pOo!oO~Ob!pO~P!bOm!sOosXpsX~OosXpsX~P%OOm!uOotPptP~P%OOo!xOp!yO~Op!yO~P#WOS!|O!a#OO!b#OO~OUyX!ayX!byX!dyX~P#|Om#QO~OU#SO!a#UO!b#UO!d#RO~Om#WOUzX!azX!bzX!dzX~O]#XO~O!b#XO!g#YO~O^#ZO!b#XO!g#YO~OP!RXQ!RX!V!RX!`!RXS!RX!a!RX!b!RXU!RXm!RX!d!RX~P&aOP!TXQ!TX!V!TX!`!TXS!TX!a!TX!b!TXU!TXm!TX!d!TX~P&aO!b#^O!g#^O~O^#_O!b#^O!f#`O!g#^O~O^#_O!W#aO!b#^O!g#^O~OPaaQaa!Vaa!`aa~P#|OP#cO!V[OQ!XX!`!XX~OP!XXQ!XX!V!XX!`!XX~P#|OP_O!V[OQ!_X!`!_X~P#|OWROXROcPOqQObgXmgXogXpgX~OWROXROcPOqQObiXmiXoiXpiX~Obkaoka~P%OObnXonX~P%OOm#kO~Ob#lOo!oO~Oosapsa~P%OOotXptX~P%OOm#pO~Oo!xOp#qO~OSwP!awP!bwP~P#|OS!|O!a#vO!b#vO~OUya!aya!bya!dya~P#|Om#xO~P%OOm#{OU}P!a}P!b}P!d}P~P#|OU#SO!a$OO!b$OO!d#RO~O]$QO~O!b$QO!g$RO~O!b$SO!g$SO~O^$TO!b$SO!g$SO~O^$TO!b$SO!f$UO!g$SO~OP!XaQ!Xa!V!Xa!`!Xa~P#|Obnaona~P%OOotapta~P%OOo!xO~OU|X!a|X!b|X!d|X~P#|Om$ZO~Om$]OU}X!a}X!b}X!d}X~O]$^O~O!b$_O!g$_O~O^$`O!b$_O!g$_O~OU|a!a|a!b|a!d|a~P#|O!b$cO!g$cO~O",
      goto: ",]!mPPPPPPPPPPPPPPPPP!nPP!v#v#|$`#|$c$f$j$nP%VPPP!v%Y%^%a%{&O%a&R&U&X&_&b%aP&e&{&e'O'RPP']'a'g'm's'y(XPPPPPPPP(_)e*X+c,VUaObcR#e!c!{ROPQSTUXY_bcdehknrtvz!O!U!W!_!b!c!f!h!k!l!s!u!|#Q#R#S#W#c#k#p#x#{$Z$]QmPR!qnqfPQThknrtv!k!l!s!u#R#k#pR!gdR!ieTlPnTjPnSiPnSqQvQ{TQ!mkQ!trQ!vtR#y#RR!nkTsQvR!wt!RWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]RySR#t!|R|TR|UQ!PUR#|#SR#z#RR#z#SyZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]R!VXR!XYa]O^abc!a!c!eT!da!eQnPR!rnQvQR!{vQ!}yR#u!}Q#T|R#}#TW^Obc!cS!^^!aT!aa!eQ!eaR#f!eW`Obc!cQxSS}U#SQ!`_Q#PzQ#V!OQ#b!_Q#d!bQ#s!|Q#w#QQ$P#WQ$V#cQ$Y#xQ$[#{Q$a$ZR$b$]xZOSU_bcz!O!_!b!c!|#Q#S#W#c#x#{$Z$]Q!VXQ!XYQ#[!UR#]!W!QWOSUXY_bcz!O!U!W!_!b!c!|#Q#S#W#c#x#{$Z$]pfPQThknrtv!k!l!s!u#R#k#pQ!gdQ!ieQ#g!fR#h!hSgPn^pQTkrtv#RQ!jhQ#i!kQ#j!lQ#n!sQ#o!uQ$W#kR$X#pQuQR!zv",
      nodeNames: "\u26A0 DirectiveEnd DocEnd - - ? ? ? Literal QuotedLiteral Anchor Alias Tag BlockLiteralContent Comment Stream BOM Document ] [ FlowSequence Item Tagged Anchored Anchored Tagged FlowMapping Pair Key : Pair , } { FlowMapping Pair Pair BlockSequence Item Item BlockMapping Pair Pair Key Pair Pair BlockLiteral BlockLiteralHeader Tagged Anchored Anchored Tagged Directive DirectiveName DirectiveContent Document",
      maxTerm: 74,
      context: indentation3,
      nodeProps: [
        ["isolate", -3, 8, 9, 14, ""],
        ["openedBy", 18, "[", 32, "{"],
        ["closedBy", 19, "]", 33, "}"]
      ],
      propSources: [yamlHighlighting],
      skippedNodes: [0],
      repeatNodeCount: 6,
      tokenData: "-Y~RnOX#PXY$QYZ$]Z]#P]^$]^p#Ppq$Qqs#Pst$btu#Puv$yv|#P|}&e}![#P![!]'O!]!`#P!`!a'i!a!}#P!}#O*g#O#P#P#P#Q+Q#Q#o#P#o#p+k#p#q'i#q#r,U#r;'S#P;'S;=`#z<%l?HT#P?HT?HU,o?HUO#PQ#UU!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PQ#kTOY#PZs#Pt;'S#P;'S;=`#z<%lO#PQ#}P;=`<%l#P~$VQ!f~XY$Qpq$Q~$bO!g~~$gS^~OY$bZ;'S$b;'S;=`$s<%lO$b~$vP;=`<%l$bR%OX!WQOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR%rX!WQ!VPOX%kXY#PZ]%k]^#P^p%kpq#hq;'S%k;'S;=`&_<%lO%kR&bP;=`<%l%kR&lUoP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'VUmP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR'p[!PP!WQOY#PZp#Ppq#hq{#P{|(f|}#P}!O(f!O!R#P!R![)p![;'S#P;'S;=`#z<%lO#PR(mW!PP!WQOY#PZp#Ppq#hq!R#P!R![)V![;'S#P;'S;=`#z<%lO#PR)^U!PP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR)wY!PP!WQOY#PZp#Ppq#hq{#P{|)V|}#P}!O)V!O;'S#P;'S;=`#z<%lO#PR*nUcP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+XUbP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR+rUqP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,]UpP!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#PR,vU`P!WQOY#PZp#Ppq#hq;'S#P;'S;=`#z<%lO#P",
      tokenizers: [newlines2, blockMark, literals, blockLiteral, 0, 1],
      topRules: { "Stream": [0, 15] },
      tokenPrec: 0
    });
  }
});

// ../../node_modules/@codemirror/lang-yaml/dist/index.js
var dist_exports18 = {};
__export(dist_exports18, {
  yaml: () => yaml,
  yamlFrontmatter: () => yamlFrontmatter,
  yamlLanguage: () => yamlLanguage
});
function yaml() {
  return new LanguageSupport(yamlLanguage);
}
function yamlFrontmatter(config2) {
  let { language: language2, support } = config2.content instanceof LanguageSupport ? config2.content : { language: config2.content, support: [] };
  return new LanguageSupport(frontmatterLanguage.configure({
    wrap: parseMixed((node) => {
      return node.name == "FrontmatterContent" ? { parser: yamlLanguage.parser } : node.name == "Body" ? { parser: language2.parser } : null;
    })
  }), support);
}
var parser19, yamlLanguage, frontmatterLanguage;
var init_dist38 = __esm({
  "../../node_modules/@codemirror/lang-yaml/dist/index.js"() {
    init_dist37();
    init_dist5();
    init_dist();
    init_dist4();
    init_dist6();
    parser19 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "!vOQOPOOO]OPO'#C_OhOPO'#C^OOOO'#Cc'#CcOpOPO'#CaQOOOOOO{OPOOOOOO'#Cb'#CbO!WOPO'#C`O!`OPO,58xOOOO-E6a-E6aOOOO-E6`-E6`OOOO'#C_'#C_OOOO1G.d1G.d",
      stateData: "!h~OXPOYROWTP~OWVXXRXYRX~OYVOXSP~OXROYROWTX~OXROYROWTP~OYVOXSX~OX[O~OXY~",
      goto: "vWPPX[beioRUOQQOR]XRXQTTOUQWQRZWSSOURYS",
      nodeNames: "\u26A0 Document Frontmatter DashLine FrontmatterContent Body",
      maxTerm: 10,
      skippedNodes: [0],
      repeatNodeCount: 2,
      tokenData: "$z~RXOYnYZ!^Z]n]^!^^}n}!O!i!O;'Sn;'S;=`!c<%lOn~qXOYnYZ!^Z]n]^!^^;'Sn;'S;=`!c<%l~n~On~~!^~!cOY~~!fP;=`<%ln~!lZOYnYZ!^Z]n]^!^^}n}!O#_!O;'Sn;'S;=`!c<%l~n~On~~!^~#bZOYnYZ!^Z]n]^!^^}n}!O$T!O;'Sn;'S;=`!c<%l~n~On~~!^~$WXOYnYZ$sZ]n]^$s^;'Sn;'S;=`!c<%l~n~On~~$s~$zOX~Y~",
      tokenizers: [0],
      topRules: { "Document": [0, 1] },
      tokenPrec: 67
    });
    yamlLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "yaml",
      parser: /* @__PURE__ */ parser18.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Stream: (cx2) => {
              for (let before = cx2.node.resolve(cx2.pos, -1); before && before.to >= cx2.pos; before = before.parent) {
                if (before.name == "BlockLiteralContent" && before.from < before.to)
                  return cx2.baseIndentFor(before);
                if (before.name == "BlockLiteral")
                  return cx2.baseIndentFor(before) + cx2.unit;
                if (before.name == "BlockSequence" || before.name == "BlockMapping")
                  return cx2.column(before.from, 1);
                if (before.name == "QuotedLiteral")
                  return null;
                if (before.name == "Literal") {
                  let col = cx2.column(before.from, 1);
                  if (col == cx2.lineIndent(before.from, 1))
                    return col;
                  if (before.to > cx2.pos)
                    return null;
                }
              }
              return null;
            },
            FlowMapping: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
            FlowSequence: /* @__PURE__ */ delimitedIndent({ closing: "]" })
          }),
          /* @__PURE__ */ foldNodeProp.add({
            "FlowMapping FlowSequence": foldInside,
            "Item Pair BlockLiteral": (node, state) => ({ from: state.doc.lineAt(node.from).to, to: node.to })
          })
        ]
      }),
      languageData: {
        commentTokens: { line: "#" },
        indentOnInput: /^\s*[\]\}]$/
      }
    });
    frontmatterLanguage = /* @__PURE__ */ LRLanguage.define({
      name: "yaml-frontmatter",
      parser: /* @__PURE__ */ parser19.configure({
        props: [/* @__PURE__ */ styleTags({ DashLine: tags.meta })]
      })
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/apl.js
var apl_exports = {};
__export(apl_exports, {
  apl: () => apl
});
var builtInFuncs, isOperator, isNiladic, isFunction, isArrow, isComment, stringEater, apl;
var init_apl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/apl.js"() {
    builtInFuncs = {
      "+": ["conjugate", "add"],
      "\u2212": ["negate", "subtract"],
      "\xD7": ["signOf", "multiply"],
      "\xF7": ["reciprocal", "divide"],
      "\u2308": ["ceiling", "greaterOf"],
      "\u230A": ["floor", "lesserOf"],
      "\u2223": ["absolute", "residue"],
      "\u2373": ["indexGenerate", "indexOf"],
      "?": ["roll", "deal"],
      "\u22C6": ["exponentiate", "toThePowerOf"],
      "\u235F": ["naturalLog", "logToTheBase"],
      "\u25CB": ["piTimes", "circularFuncs"],
      "!": ["factorial", "binomial"],
      "\u2339": ["matrixInverse", "matrixDivide"],
      "<": [null, "lessThan"],
      "\u2264": [null, "lessThanOrEqual"],
      "=": [null, "equals"],
      ">": [null, "greaterThan"],
      "\u2265": [null, "greaterThanOrEqual"],
      "\u2260": [null, "notEqual"],
      "\u2261": ["depth", "match"],
      "\u2262": [null, "notMatch"],
      "\u2208": ["enlist", "membership"],
      "\u2377": [null, "find"],
      "\u222A": ["unique", "union"],
      "\u2229": [null, "intersection"],
      "\u223C": ["not", "without"],
      "\u2228": [null, "or"],
      "\u2227": [null, "and"],
      "\u2371": [null, "nor"],
      "\u2372": [null, "nand"],
      "\u2374": ["shapeOf", "reshape"],
      ",": ["ravel", "catenate"],
      "\u236A": [null, "firstAxisCatenate"],
      "\u233D": ["reverse", "rotate"],
      "\u2296": ["axis1Reverse", "axis1Rotate"],
      "\u2349": ["transpose", null],
      "\u2191": ["first", "take"],
      "\u2193": [null, "drop"],
      "\u2282": ["enclose", "partitionWithAxis"],
      "\u2283": ["diclose", "pick"],
      "\u2337": [null, "index"],
      "\u234B": ["gradeUp", null],
      "\u2352": ["gradeDown", null],
      "\u22A4": ["encode", null],
      "\u22A5": ["decode", null],
      "\u2355": ["format", "formatByExample"],
      "\u234E": ["execute", null],
      "\u22A3": ["stop", "left"],
      "\u22A2": ["pass", "right"]
    };
    isOperator = /[\.\/⌿⍀¨⍣]/;
    isNiladic = /⍬/;
    isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
    isArrow = /←/;
    isComment = /[⍝#].*$/;
    stringEater = function(type7) {
      var prev;
      prev = false;
      return function(c2) {
        prev = c2;
        if (c2 === type7) {
          return prev === "\\";
        }
        return true;
      };
    };
    apl = {
      name: "apl",
      startState: function() {
        return {
          prev: false,
          func: false,
          op: false,
          string: false,
          escape: false
        };
      },
      token: function(stream, state) {
        var ch2;
        if (stream.eatSpace()) {
          return null;
        }
        ch2 = stream.next();
        if (ch2 === '"' || ch2 === "'") {
          stream.eatWhile(stringEater(ch2));
          stream.next();
          state.prev = true;
          return "string";
        }
        if (/[\[{\(]/.test(ch2)) {
          state.prev = false;
          return null;
        }
        if (/[\]}\)]/.test(ch2)) {
          state.prev = true;
          return null;
        }
        if (isNiladic.test(ch2)) {
          state.prev = false;
          return "atom";
        }
        if (/[¯\d]/.test(ch2)) {
          if (state.func) {
            state.func = false;
            state.prev = false;
          } else {
            state.prev = true;
          }
          stream.eatWhile(/[\w\.]/);
          return "number";
        }
        if (isOperator.test(ch2)) {
          return "operator";
        }
        if (isArrow.test(ch2)) {
          return "operator";
        }
        if (isFunction.test(ch2)) {
          state.func = true;
          state.prev = false;
          return builtInFuncs[ch2] ? "variableName.function.standard" : "variableName.function";
        }
        if (isComment.test(ch2)) {
          stream.skipToEnd();
          return "comment";
        }
        if (ch2 === "\u2218" && stream.peek() === ".") {
          stream.next();
          return "variableName.function";
        }
        stream.eatWhile(/[\w\$_]/);
        state.prev = true;
        return "keyword";
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/asciiarmor.js
var asciiarmor_exports = {};
__export(asciiarmor_exports, {
  asciiArmor: () => asciiArmor
});
function errorIfNotEmpty(stream) {
  var nonWS = stream.match(/^\s*\S/);
  stream.skipToEnd();
  return nonWS ? "error" : null;
}
var asciiArmor;
var init_asciiarmor = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"() {
    asciiArmor = {
      name: "asciiarmor",
      token: function(stream, state) {
        var m;
        if (state.state == "top") {
          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
            state.state = "headers";
            state.type = m[1];
            return "tag";
          }
          return errorIfNotEmpty(stream);
        } else if (state.state == "headers") {
          if (stream.sol() && stream.match(/^\w+:/)) {
            state.state = "header";
            return "atom";
          } else {
            var result = errorIfNotEmpty(stream);
            if (result) state.state = "body";
            return result;
          }
        } else if (state.state == "header") {
          stream.skipToEnd();
          state.state = "headers";
          return "string";
        } else if (state.state == "body") {
          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
            if (m[1] != state.type) return "error";
            state.state = "end";
            return "tag";
          } else {
            if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
              return null;
            } else {
              stream.next();
              return "error";
            }
          }
        } else if (state.state == "end") {
          return errorIfNotEmpty(stream);
        }
      },
      blankLine: function(state) {
        if (state.state == "headers") state.state = "body";
      },
      startState: function() {
        return { state: "top", type: null };
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/asn1.js
var asn1_exports = {};
__export(asn1_exports, {
  asn1: () => asn1
});
function words(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function asn1(parserConfig4) {
  var keywords49 = parserConfig4.keywords || defaults4.keywords, cmipVerbs = parserConfig4.cmipVerbs || defaults4.cmipVerbs, compareTypes = parserConfig4.compareTypes || defaults4.compareTypes, status = parserConfig4.status || defaults4.status, tags3 = parserConfig4.tags || defaults4.tags, storage = parserConfig4.storage || defaults4.storage, modifier = parserConfig4.modifier || defaults4.modifier, accessTypes = parserConfig4.accessTypes || defaults4.accessTypes, multiLineStrings5 = parserConfig4.multiLineStrings || defaults4.multiLineStrings, indentStatements3 = parserConfig4.indentStatements !== false;
  var isOperatorChar17 = /[\|\^]/;
  var curPunc15;
  function tokenBase48(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString31(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\[\]\(\){}:=,;]/.test(ch2)) {
      curPunc15 = ch2;
      return "punctuation";
    }
    if (ch2 == "-") {
      if (stream.eat("-")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (isOperatorChar17.test(ch2)) {
      stream.eatWhile(isOperatorChar17);
      return "operator";
    }
    stream.eatWhile(/[\w\-]/);
    var cur2 = stream.current();
    if (keywords49.propertyIsEnumerable(cur2)) return "keyword";
    if (cmipVerbs.propertyIsEnumerable(cur2)) return "variableName";
    if (compareTypes.propertyIsEnumerable(cur2)) return "atom";
    if (status.propertyIsEnumerable(cur2)) return "comment";
    if (tags3.propertyIsEnumerable(cur2)) return "typeName";
    if (storage.propertyIsEnumerable(cur2)) return "modifier";
    if (modifier.propertyIsEnumerable(cur2)) return "modifier";
    if (accessTypes.propertyIsEnumerable(cur2)) return "modifier";
    return "variableName";
  }
  function tokenString31(quote4) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote4 && !escaped) {
          var afterNext = stream.peek();
          if (afterNext) {
            afterNext = afterNext.toLowerCase();
            if (afterNext == "b" || afterNext == "h" || afterNext == "o")
              stream.next();
          }
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !(escaped || multiLineStrings5))
        state.tokenize = null;
      return "string";
    };
  }
  function Context17(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext18(state, col, type7) {
    var indent7 = state.indented;
    if (state.context && state.context.type == "statement")
      indent7 = state.context.indented;
    return state.context = new Context17(indent7, col, type7, null, state.context);
  }
  function popContext18(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  return {
    name: "asn1",
    startState: function() {
      return {
        tokenize: null,
        context: new Context17(-2, 0, "top", false),
        indented: 0,
        startOfLine: true
      };
    },
    token: function(stream, state) {
      var ctx = state.context;
      if (stream.sol()) {
        if (ctx.align == null) ctx.align = false;
        state.indented = stream.indentation();
        state.startOfLine = true;
      }
      if (stream.eatSpace()) return null;
      curPunc15 = null;
      var style2 = (state.tokenize || tokenBase48)(stream, state);
      if (style2 == "comment") return style2;
      if (ctx.align == null) ctx.align = true;
      if ((curPunc15 == ";" || curPunc15 == ":" || curPunc15 == ",") && ctx.type == "statement") {
        popContext18(state);
      } else if (curPunc15 == "{") pushContext18(state, stream.column(), "}");
      else if (curPunc15 == "[") pushContext18(state, stream.column(), "]");
      else if (curPunc15 == "(") pushContext18(state, stream.column(), ")");
      else if (curPunc15 == "}") {
        while (ctx.type == "statement") ctx = popContext18(state);
        if (ctx.type == "}") ctx = popContext18(state);
        while (ctx.type == "statement") ctx = popContext18(state);
      } else if (curPunc15 == ctx.type) popContext18(state);
      else if (indentStatements3 && ((ctx.type == "}" || ctx.type == "top") && curPunc15 != ";" || ctx.type == "statement" && curPunc15 == "newstatement"))
        pushContext18(state, stream.column(), "statement");
      state.startOfLine = false;
      return style2;
    },
    languageData: {
      indentOnInput: /^\s*[{}]$/,
      commentTokens: { line: "--" }
    }
  };
}
var defaults4;
var init_asn1 = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/asn1.js"() {
    defaults4 = {
      keywords: words("DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS MINACCESS MAXACCESS REVISION STATUS DESCRIPTION SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY IMPLIED EXPORTS"),
      cmipVerbs: words("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
      compareTypes: words("OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL TEXTUAL-CONVENTION"),
      status: words("current deprecated mandatory obsolete"),
      tags: words("APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS UNIVERSAL"),
      storage: words("BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING UTCTime InterfaceIndex IANAifType CMIP-Attribute REAL PACKAGE PACKAGES IpAddress PhysAddress NetworkAddress BITS BMPString TimeStamp TimeTicks TruthValue RowStatus DisplayString GeneralString GraphicString IA5String NumericString PrintableString SnmpAdminString TeletexString UTF8String VideotexString VisibleString StringStore ISO646String T61String UniversalString Unsigned32 Integer32 Gauge Gauge32 Counter Counter32 Counter64"),
      modifier: words("ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS DEFINED"),
      accessTypes: words("not-accessible accessible-for-notify read-only read-create read-write"),
      multiLineStrings: true
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/asterisk.js
var asterisk_exports = {};
__export(asterisk_exports, {
  asterisk: () => asterisk2
});
function basicToken(stream, state) {
  var cur2 = "";
  var ch2 = stream.next();
  if (state.blockComment) {
    if (ch2 == "-" && stream.match("-;", true)) {
      state.blockComment = false;
    } else if (stream.skipTo("--;")) {
      stream.next();
      stream.next();
      stream.next();
      state.blockComment = false;
    } else {
      stream.skipToEnd();
    }
    return "comment";
  }
  if (ch2 == ";") {
    if (stream.match("--", true)) {
      if (!stream.match("-", false)) {
        state.blockComment = true;
        return "comment";
      }
    }
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 == "[") {
    stream.skipTo("]");
    stream.eat("]");
    return "header";
  }
  if (ch2 == '"') {
    stream.skipTo('"');
    return "string";
  }
  if (ch2 == "'") {
    stream.skipTo("'");
    return "string.special";
  }
  if (ch2 == "#") {
    stream.eatWhile(/\w/);
    cur2 = stream.current();
    if (dpcmd.indexOf(cur2) !== -1) {
      stream.skipToEnd();
      return "strong";
    }
  }
  if (ch2 == "$") {
    var ch1 = stream.peek();
    if (ch1 == "{") {
      stream.skipTo("}");
      stream.eat("}");
      return "variableName.special";
    }
  }
  stream.eatWhile(/\w/);
  cur2 = stream.current();
  if (atoms.indexOf(cur2) !== -1) {
    state.extenStart = true;
    switch (cur2) {
      case "same":
        state.extenSame = true;
        break;
      case "include":
      case "switch":
      case "ignorepat":
        state.extenInclude = true;
        break;
      default:
        break;
    }
    return "atom";
  }
}
var atoms, dpcmd, apps, asterisk2;
var init_asterisk = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/asterisk.js"() {
    atoms = ["exten", "same", "include", "ignorepat", "switch"];
    dpcmd = ["#include", "#exec"];
    apps = [
      "addqueuemember",
      "adsiprog",
      "aelsub",
      "agentlogin",
      "agentmonitoroutgoing",
      "agi",
      "alarmreceiver",
      "amd",
      "answer",
      "authenticate",
      "background",
      "backgrounddetect",
      "bridge",
      "busy",
      "callcompletioncancel",
      "callcompletionrequest",
      "celgenuserevent",
      "changemonitor",
      "chanisavail",
      "channelredirect",
      "chanspy",
      "clearhash",
      "confbridge",
      "congestion",
      "continuewhile",
      "controlplayback",
      "dahdiacceptr2call",
      "dahdibarge",
      "dahdiras",
      "dahdiscan",
      "dahdisendcallreroutingfacility",
      "dahdisendkeypadfacility",
      "datetime",
      "dbdel",
      "dbdeltree",
      "deadagi",
      "dial",
      "dictate",
      "directory",
      "disa",
      "dumpchan",
      "eagi",
      "echo",
      "endwhile",
      "exec",
      "execif",
      "execiftime",
      "exitwhile",
      "extenspy",
      "externalivr",
      "festival",
      "flash",
      "followme",
      "forkcdr",
      "getcpeid",
      "gosub",
      "gosubif",
      "goto",
      "gotoif",
      "gotoiftime",
      "hangup",
      "iax2provision",
      "ices",
      "importvar",
      "incomplete",
      "ivrdemo",
      "jabberjoin",
      "jabberleave",
      "jabbersend",
      "jabbersendgroup",
      "jabberstatus",
      "jack",
      "log",
      "macro",
      "macroexclusive",
      "macroexit",
      "macroif",
      "mailboxexists",
      "meetme",
      "meetmeadmin",
      "meetmechanneladmin",
      "meetmecount",
      "milliwatt",
      "minivmaccmess",
      "minivmdelete",
      "minivmgreet",
      "minivmmwi",
      "minivmnotify",
      "minivmrecord",
      "mixmonitor",
      "monitor",
      "morsecode",
      "mp3player",
      "mset",
      "musiconhold",
      "nbscat",
      "nocdr",
      "noop",
      "odbc",
      "odbc",
      "odbcfinish",
      "originate",
      "ospauth",
      "ospfinish",
      "osplookup",
      "ospnext",
      "page",
      "park",
      "parkandannounce",
      "parkedcall",
      "pausemonitor",
      "pausequeuemember",
      "pickup",
      "pickupchan",
      "playback",
      "playtones",
      "privacymanager",
      "proceeding",
      "progress",
      "queue",
      "queuelog",
      "raiseexception",
      "read",
      "readexten",
      "readfile",
      "receivefax",
      "receivefax",
      "receivefax",
      "record",
      "removequeuemember",
      "resetcdr",
      "retrydial",
      "return",
      "ringing",
      "sayalpha",
      "saycountedadj",
      "saycountednoun",
      "saycountpl",
      "saydigits",
      "saynumber",
      "sayphonetic",
      "sayunixtime",
      "senddtmf",
      "sendfax",
      "sendfax",
      "sendfax",
      "sendimage",
      "sendtext",
      "sendurl",
      "set",
      "setamaflags",
      "setcallerpres",
      "setmusiconhold",
      "sipaddheader",
      "sipdtmfmode",
      "sipremoveheader",
      "skel",
      "slastation",
      "slatrunk",
      "sms",
      "softhangup",
      "speechactivategrammar",
      "speechbackground",
      "speechcreate",
      "speechdeactivategrammar",
      "speechdestroy",
      "speechloadgrammar",
      "speechprocessingsound",
      "speechstart",
      "speechunloadgrammar",
      "stackpop",
      "startmusiconhold",
      "stopmixmonitor",
      "stopmonitor",
      "stopmusiconhold",
      "stopplaytones",
      "system",
      "testclient",
      "testserver",
      "transfer",
      "tryexec",
      "trysystem",
      "unpausemonitor",
      "unpausequeuemember",
      "userevent",
      "verbose",
      "vmauthenticate",
      "vmsayname",
      "voicemail",
      "voicemailmain",
      "wait",
      "waitexten",
      "waitfornoise",
      "waitforring",
      "waitforsilence",
      "waitmusiconhold",
      "waituntil",
      "while",
      "zapateller"
    ];
    asterisk2 = {
      name: "asterisk",
      startState: function() {
        return {
          blockComment: false,
          extenStart: false,
          extenSame: false,
          extenInclude: false,
          extenExten: false,
          extenPriority: false,
          extenApplication: false
        };
      },
      token: function(stream, state) {
        var cur2 = "";
        if (stream.eatSpace()) return null;
        if (state.extenStart) {
          stream.eatWhile(/[^\s]/);
          cur2 = stream.current();
          if (/^=>?$/.test(cur2)) {
            state.extenExten = true;
            state.extenStart = false;
            return "strong";
          } else {
            state.extenStart = false;
            stream.skipToEnd();
            return "error";
          }
        } else if (state.extenExten) {
          state.extenExten = false;
          state.extenPriority = true;
          stream.eatWhile(/[^,]/);
          if (state.extenInclude) {
            stream.skipToEnd();
            state.extenPriority = false;
            state.extenInclude = false;
          }
          if (state.extenSame) {
            state.extenPriority = false;
            state.extenSame = false;
            state.extenApplication = true;
          }
          return "tag";
        } else if (state.extenPriority) {
          state.extenPriority = false;
          state.extenApplication = true;
          stream.next();
          if (state.extenSame) return null;
          stream.eatWhile(/[^,]/);
          return "number";
        } else if (state.extenApplication) {
          stream.eatWhile(/,/);
          cur2 = stream.current();
          if (cur2 === ",") return null;
          stream.eatWhile(/\w/);
          cur2 = stream.current().toLowerCase();
          state.extenApplication = false;
          if (apps.indexOf(cur2) !== -1) {
            return "def";
          }
        } else {
          return basicToken(stream, state);
        }
        return null;
      },
      languageData: {
        commentTokens: { line: ";", block: { open: ";--", close: "--;" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/brainfuck.js
var brainfuck_exports = {};
__export(brainfuck_exports, {
  brainfuck: () => brainfuck
});
var reserve, brainfuck;
var init_brainfuck = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/brainfuck.js"() {
    reserve = "><+-.,[]".split("");
    brainfuck = {
      name: "brainfuck",
      startState: function() {
        return {
          commentLine: false,
          left: 0,
          right: 0,
          commentLoop: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        if (stream.sol()) {
          state.commentLine = false;
        }
        var ch2 = stream.next().toString();
        if (reserve.indexOf(ch2) !== -1) {
          if (state.commentLine === true) {
            if (stream.eol()) {
              state.commentLine = false;
            }
            return "comment";
          }
          if (ch2 === "]" || ch2 === "[") {
            if (ch2 === "[") {
              state.left++;
            } else {
              state.right++;
            }
            return "bracket";
          } else if (ch2 === "+" || ch2 === "-") {
            return "keyword";
          } else if (ch2 === "<" || ch2 === ">") {
            return "atom";
          } else if (ch2 === "." || ch2 === ",") {
            return "def";
          }
        } else {
          state.commentLine = true;
          if (stream.eol()) {
            state.commentLine = false;
          }
          return "comment";
        }
        if (stream.eol()) {
          state.commentLine = false;
        }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/cobol.js
var cobol_exports = {};
__export(cobol_exports, {
  cobol: () => cobol
});
function makeKeywords(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function isNumber(ch2, stream) {
  if (ch2 === "0" && stream.eat(/x/i)) {
    stream.eatWhile(tests.hex);
    return true;
  }
  if ((ch2 == "+" || ch2 == "-") && tests.digit.test(stream.peek())) {
    stream.eat(tests.sign);
    ch2 = stream.next();
  }
  if (tests.digit.test(ch2)) {
    stream.eat(ch2);
    stream.eatWhile(tests.digit);
    if ("." == stream.peek()) {
      stream.eat(".");
      stream.eatWhile(tests.digit);
    }
    if (stream.eat(tests.exponent)) {
      stream.eat(tests.sign);
      stream.eatWhile(tests.digit);
    }
    return true;
  }
  return false;
}
var BUILTIN, COMMENT, STRING, ATOM, NUMBER, KEYWORD, MODTAG, COBOLLINENUM, PERIOD, atoms2, keywords5, builtins, tests, cobol;
var init_cobol = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/cobol.js"() {
    BUILTIN = "builtin";
    COMMENT = "comment";
    STRING = "string";
    ATOM = "atom";
    NUMBER = "number";
    KEYWORD = "keyword";
    MODTAG = "header";
    COBOLLINENUM = "def";
    PERIOD = "link";
    atoms2 = makeKeywords("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ");
    keywords5 = makeKeywords(
      "ACCEPT ACCESS ACQUIRE ADD ADDRESS ADVANCING AFTER ALIAS ALL ALPHABET ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED ALSO ALTER ALTERNATE AND ANY ARE AREA AREAS ARITHMETIC ASCENDING ASSIGN AT ATTRIBUTE AUTHOR AUTO AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP BEFORE BELL BINARY BIT BITS BLANK BLINK BLOCK BOOLEAN BOTTOM BY CALL CANCEL CD CF CH CHARACTER CHARACTERS CLASS CLOCK-UNITS CLOSE COBOL CODE CODE-SET COL COLLATING COLUMN COMMA COMMIT COMMITMENT COMMON COMMUNICATION COMP COMP-0 COMP-1 COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS CONVERTING COPY CORR CORRESPONDING COUNT CRT CRT-UNDER CURRENCY CURRENT CURSOR DATA DATE DATE-COMPILED DATE-WRITTEN DAY DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION DOWN DROP DUPLICATE DUPLICATES DYNAMIC EBCDIC EGI EJECT ELSE EMI EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT END-UNSTRING END-WRITE END-XML ENTER ENTRY ENVIRONMENT EOP EQUAL EQUALS ERASE ERROR ESI EVALUATE EVERY EXCEEDS EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL FILE-STREAM FILES FILLER FINAL FIND FINISH FIRST FOOTING FOR FOREGROUND-COLOR FOREGROUND-COLOUR FORMAT FREE FROM FULL FUNCTION GENERATE GET GIVING GLOBAL GO GOBACK GREATER GROUP HEADING HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL ID IDENTIFICATION IF IN INDEX INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED INDIC INDICATE INDICATOR INDICATORS INITIAL INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT INSTALLATION INTO INVALID INVOKE IS JUST JUSTIFIED KANJI KEEP KEY LABEL LAST LD LEADING LEFT LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE LOCALE LOCALLY LOCK MEMBER MEMORY MERGE MESSAGE METACLASS MODE MODIFIED MODIFY MODULES MOVE MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE NEXT NO NO-ECHO NONE NOT NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS OF OFF OMITTED ON ONLY OPEN OPTIONAL OR ORDER ORGANIZATION OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL PADDING PAGE PAGE-COUNTER PARSE PERFORM PF PH PIC PICTURE PLUS POINTER POSITION POSITIVE PREFIX PRESENT PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID PROMPT PROTECTED PURGE QUEUE QUOTE QUOTES RANDOM RD READ READY REALM RECEIVE RECONNECT RECORD RECORD-NAME RECORDS RECURSIVE REDEFINES REEL REFERENCE REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE REMAINDER REMOVAL RENAMES REPEATED REPLACE REPLACING REPORT REPORTING REPORTS REPOSITORY REQUIRED RERUN RESERVE RESET RETAINING RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO REVERSED REWIND REWRITE RF RH RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED RUN SAME SCREEN SD SEARCH SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT SELECT SEND SENTENCE SEPARATE SEQUENCE SEQUENTIAL SET SHARED SIGN SIZE SKIP1 SKIP2 SKIP3 SORT SORT-MERGE SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 START STARTING STATUS STOP STORE STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT TABLE TALLYING TAPE TENANT TERMINAL TERMINATE TEST TEXT THAN THEN THROUGH THRU TIME TIMES TITLE TO TOP TRAILING TRAILING-SIGN TRANSACTION TYPE TYPEDEF UNDERLINE UNEQUAL UNIT UNSTRING UNTIL UP UPDATE UPON USAGE USAGE-MODE USE USING VALID VALIDATE VALUE VALUES VARYING VLR WAIT WHEN WHEN-COMPILED WITH WITHIN WORDS WORKING-STORAGE WRITE XML XML-CODE XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL "
    );
    builtins = makeKeywords("- * ** / + < <= = > >= ");
    tests = {
      digit: /\d/,
      digit_or_colon: /[\d:]/,
      hex: /[0-9a-f]/i,
      sign: /[+-]/,
      exponent: /e/i,
      keyword_char: /[^\s\(\[\;\)\]]/,
      symbol: /[\w*+\-]/
    };
    cobol = {
      name: "cobol",
      startState: function() {
        return {
          indentStack: null,
          indentation: 0,
          mode: false
        };
      },
      token: function(stream, state) {
        if (state.indentStack == null && stream.sol()) {
          state.indentation = 6;
        }
        if (stream.eatSpace()) {
          return null;
        }
        var returnType = null;
        switch (state.mode) {
          case "string":
            var next2 = false;
            while ((next2 = stream.next()) != null) {
              if ((next2 == '"' || next2 == "'") && !stream.match(/['"]/, false)) {
                state.mode = false;
                break;
              }
            }
            returnType = STRING;
            break;
          default:
            var ch2 = stream.next();
            var col = stream.column();
            if (col >= 0 && col <= 5) {
              returnType = COBOLLINENUM;
            } else if (col >= 72 && col <= 79) {
              stream.skipToEnd();
              returnType = MODTAG;
            } else if (ch2 == "*" && col == 6) {
              stream.skipToEnd();
              returnType = COMMENT;
            } else if (ch2 == '"' || ch2 == "'") {
              state.mode = "string";
              returnType = STRING;
            } else if (ch2 == "'" && !tests.digit_or_colon.test(stream.peek())) {
              returnType = ATOM;
            } else if (ch2 == ".") {
              returnType = PERIOD;
            } else if (isNumber(ch2, stream)) {
              returnType = NUMBER;
            } else {
              if (stream.current().match(tests.symbol)) {
                while (col < 71) {
                  if (stream.eat(tests.symbol) === void 0) {
                    break;
                  } else {
                    col++;
                  }
                }
              }
              if (keywords5 && keywords5.propertyIsEnumerable(stream.current().toUpperCase())) {
                returnType = KEYWORD;
              } else if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) {
                returnType = BUILTIN;
              } else if (atoms2 && atoms2.propertyIsEnumerable(stream.current().toUpperCase())) {
                returnType = ATOM;
              } else returnType = null;
            }
        }
        return returnType;
      },
      indent: function(state) {
        if (state.indentStack == null) return state.indentation;
        return state.indentStack.indent;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/clike.js
var clike_exports = {};
__export(clike_exports, {
  c: () => c,
  ceylon: () => ceylon,
  clike: () => clike,
  cpp: () => cpp2,
  csharp: () => csharp,
  dart: () => dart,
  java: () => java2,
  kotlin: () => kotlin,
  nesC: () => nesC,
  objectiveC: () => objectiveC,
  objectiveCpp: () => objectiveCpp,
  scala: () => scala,
  shader: () => shader,
  squirrel: () => squirrel
});
function Context4(indented, column, type7, info, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.info = info;
  this.align = align;
  this.prev = prev;
}
function pushContext(state, col, type7, info) {
  var indent7 = state.indented;
  if (state.context && state.context.type == "statement" && type7 != "statement")
    indent7 = state.context.indented;
  return state.context = new Context4(indent7, col, type7, info, null, state.context);
}
function popContext(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
function typeBefore(stream, state, pos) {
  if (state.prevToken == "variable" || state.prevToken == "type") return true;
  if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos))) return true;
  if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;
}
function isTopScope(context) {
  for (; ; ) {
    if (!context || context.type == "top") return true;
    if (context.type == "}" && context.prev.info != "namespace") return false;
    context = context.prev;
  }
}
function clike(parserConfig4) {
  var statementIndentUnit2 = parserConfig4.statementIndentUnit, dontAlignCalls = parserConfig4.dontAlignCalls, keywords49 = parserConfig4.keywords || {}, types8 = parserConfig4.types || {}, builtin5 = parserConfig4.builtin || {}, blockKeywords6 = parserConfig4.blockKeywords || {}, defKeywords = parserConfig4.defKeywords || {}, atoms18 = parserConfig4.atoms || {}, hooks4 = parserConfig4.hooks || {}, multiLineStrings5 = parserConfig4.multiLineStrings, indentStatements3 = parserConfig4.indentStatements !== false, indentSwitch = parserConfig4.indentSwitch !== false, namespaceSeparator = parserConfig4.namespaceSeparator, isPunctuationChar = parserConfig4.isPunctuationChar || /[\[\]{}\(\),;\:\.]/, numberStart = parserConfig4.numberStart || /[\d\.]/, number3 = parserConfig4.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i, isOperatorChar17 = parserConfig4.isOperatorChar || /[+\-*&%=<>!?|\/]/, isIdentifierChar = parserConfig4.isIdentifierChar || /[\w\$_\xa1-\uffff]/, isReservedIdentifier = parserConfig4.isReservedIdentifier || false;
  var curPunc15, isDefKeyword;
  function tokenBase48(stream, state) {
    var ch2 = stream.next();
    if (hooks4[ch2]) {
      var result = hooks4[ch2](stream, state);
      if (result !== false) return result;
    }
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString31(ch2);
      return state.tokenize(stream, state);
    }
    if (numberStart.test(ch2)) {
      stream.backUp(1);
      if (stream.match(number3)) return "number";
      stream.next();
    }
    if (isPunctuationChar.test(ch2)) {
      curPunc15 = ch2;
      return null;
    }
    if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment22;
        return tokenComment22(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar17.test(ch2)) {
      while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar17)) {
      }
      return "operator";
    }
    stream.eatWhile(isIdentifierChar);
    if (namespaceSeparator) while (stream.match(namespaceSeparator))
      stream.eatWhile(isIdentifierChar);
    var cur2 = stream.current();
    if (contains2(keywords49, cur2)) {
      if (contains2(blockKeywords6, cur2)) curPunc15 = "newstatement";
      if (contains2(defKeywords, cur2)) isDefKeyword = true;
      return "keyword";
    }
    if (contains2(types8, cur2)) return "type";
    if (contains2(builtin5, cur2) || isReservedIdentifier && isReservedIdentifier(cur2)) {
      if (contains2(blockKeywords6, cur2)) curPunc15 = "newstatement";
      return "builtin";
    }
    if (contains2(atoms18, cur2)) return "atom";
    return "variable";
  }
  function tokenString31(quote4) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote4 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !(escaped || multiLineStrings5))
        state.tokenize = null;
      return "string";
    };
  }
  function tokenComment22(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function maybeEOL(stream, state) {
    if (parserConfig4.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
      state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
  }
  return {
    name: parserConfig4.name,
    startState: function(indentUnit2) {
      return {
        tokenize: null,
        context: new Context4(-indentUnit2, 0, "top", null, false),
        indented: 0,
        startOfLine: true,
        prevToken: null
      };
    },
    token: function(stream, state) {
      var ctx = state.context;
      if (stream.sol()) {
        if (ctx.align == null) ctx.align = false;
        state.indented = stream.indentation();
        state.startOfLine = true;
      }
      if (stream.eatSpace()) {
        maybeEOL(stream, state);
        return null;
      }
      curPunc15 = isDefKeyword = null;
      var style2 = (state.tokenize || tokenBase48)(stream, state);
      if (style2 == "comment" || style2 == "meta") return style2;
      if (ctx.align == null) ctx.align = true;
      if (curPunc15 == ";" || curPunc15 == ":" || curPunc15 == "," && stream.match(/^\s*(?:\/\/.*)?$/, false))
        while (state.context.type == "statement") popContext(state);
      else if (curPunc15 == "{") pushContext(state, stream.column(), "}");
      else if (curPunc15 == "[") pushContext(state, stream.column(), "]");
      else if (curPunc15 == "(") pushContext(state, stream.column(), ")");
      else if (curPunc15 == "}") {
        while (ctx.type == "statement") ctx = popContext(state);
        if (ctx.type == "}") ctx = popContext(state);
        while (ctx.type == "statement") ctx = popContext(state);
      } else if (curPunc15 == ctx.type) popContext(state);
      else if (indentStatements3 && ((ctx.type == "}" || ctx.type == "top") && curPunc15 != ";" || ctx.type == "statement" && curPunc15 == "newstatement")) {
        pushContext(state, stream.column(), "statement", stream.current());
      }
      if (style2 == "variable" && (state.prevToken == "def" || parserConfig4.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\s*\(/, false)))
        style2 = "def";
      if (hooks4.token) {
        var result = hooks4.token(stream, state, style2);
        if (result !== void 0) style2 = result;
      }
      if (style2 == "def" && parserConfig4.styleDefs === false) style2 = "variable";
      state.startOfLine = false;
      state.prevToken = isDefKeyword ? "def" : style2 || curPunc15;
      maybeEOL(stream, state);
      return style2;
    },
    indent: function(state, textAfter, context) {
      if (state.tokenize != tokenBase48 && state.tokenize != null || state.typeAtEndOfLine && isTopScope(state.context))
        return null;
      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
      var closing4 = firstChar == ctx.type;
      if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
      if (parserConfig4.dontIndentStatements)
        while (ctx.type == "statement" && parserConfig4.dontIndentStatements.test(ctx.info))
          ctx = ctx.prev;
      if (hooks4.indent) {
        var hook = hooks4.indent(state, ctx, textAfter, context.unit);
        if (typeof hook == "number") return hook;
      }
      var switchBlock = ctx.prev && ctx.prev.info == "switch";
      if (parserConfig4.allmanIndentation && /[{(]/.test(firstChar)) {
        while (ctx.type != "top" && ctx.type != "}") ctx = ctx.prev;
        return ctx.indented;
      }
      if (ctx.type == "statement")
        return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit2 || context.unit);
      if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
        return ctx.column + (closing4 ? 0 : 1);
      if (ctx.type == ")" && !closing4)
        return ctx.indented + (statementIndentUnit2 || context.unit);
      return ctx.indented + (closing4 ? 0 : context.unit) + (!closing4 && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? context.unit : 0);
    },
    languageData: {
      indentOnInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
      commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
      autocomplete: Object.keys(keywords49).concat(Object.keys(types8)).concat(Object.keys(builtin5)).concat(Object.keys(atoms18)),
      ...parserConfig4.languageData
    }
  };
}
function words2(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function contains2(words22, word) {
  if (typeof words22 === "function") {
    return words22(word);
  } else {
    return words22.propertyIsEnumerable(word);
  }
}
function cTypes(identifier8) {
  return contains2(basicCTypes, identifier8) || /.+_t$/.test(identifier8);
}
function objCTypes(identifier8) {
  return cTypes(identifier8) || contains2(basicObjCTypes, identifier8);
}
function cppHook(stream, state) {
  if (!state.startOfLine) return false;
  for (var ch2, next2 = null; ch2 = stream.peek(); ) {
    if (ch2 == "\\" && stream.match(/^.$/)) {
      next2 = cppHook;
      break;
    } else if (ch2 == "/" && stream.match(/^\/[\/\*]/, false)) {
      break;
    }
    stream.next();
  }
  state.tokenize = next2;
  return "meta";
}
function pointerHook(_stream, state) {
  if (state.prevToken == "type") return "type";
  return false;
}
function cIsReservedIdentifier(token) {
  if (!token || token.length < 2) return false;
  if (token[0] != "_") return false;
  return token[1] == "_" || token[1] !== token[1].toLowerCase();
}
function cpp14Literal(stream) {
  stream.eatWhile(/[\w\.']/);
  return "number";
}
function cpp11StringHook(stream, state) {
  stream.backUp(1);
  if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
    var match2 = stream.match(/^"([^\s\\()]{0,16})\(/);
    if (!match2) {
      return false;
    }
    state.cpp11RawStringDelim = match2[1];
    state.tokenize = tokenRawString;
    return tokenRawString(stream, state);
  }
  if (stream.match(/^(?:u8|u|U|L)/)) {
    if (stream.match(
      /^["']/,
      /* eat */
      false
    )) {
      return "string";
    }
    return false;
  }
  stream.next();
  return false;
}
function cppLooksLikeConstructor(word) {
  var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
  return lastTwo && lastTwo[1] == lastTwo[2];
}
function tokenAtString(stream, state) {
  var next2;
  while ((next2 = stream.next()) != null) {
    if (next2 == '"' && !stream.eat('"')) {
      state.tokenize = null;
      break;
    }
  }
  return "string";
}
function tokenRawString(stream, state) {
  var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&");
  var match2 = stream.match(new RegExp(".*?\\)" + delim + '"'));
  if (match2)
    state.tokenize = null;
  else
    stream.skipToEnd();
  return "string";
}
function tokenTripleString(stream, state) {
  var escaped = false;
  while (!stream.eol()) {
    if (!escaped && stream.match('"""')) {
      state.tokenize = null;
      break;
    }
    escaped = stream.next() == "\\" && !escaped;
  }
  return "string";
}
function tokenNestedComment(depth) {
  return function(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "*" && stream.eat("/")) {
        if (depth == 1) {
          state.tokenize = null;
          break;
        } else {
          state.tokenize = tokenNestedComment(depth - 1);
          return state.tokenize(stream, state);
        }
      } else if (ch2 == "/" && stream.eat("*")) {
        state.tokenize = tokenNestedComment(depth + 1);
        return state.tokenize(stream, state);
      }
    }
    return "comment";
  };
}
function tokenKotlinString(tripleString) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while (!stream.eol()) {
      if (!tripleString && !escaped && stream.match('"')) {
        end2 = true;
        break;
      }
      if (tripleString && stream.match('"""')) {
        end2 = true;
        break;
      }
      next2 = stream.next();
      if (!escaped && next2 == "$" && stream.match("{"))
        stream.skipTo("}");
      escaped = !escaped && next2 == "\\" && !tripleString;
    }
    if (end2 || !tripleString)
      state.tokenize = null;
    return "string";
  };
}
function tokenCeylonString(type7) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while (!stream.eol()) {
      if (!escaped && stream.match('"') && (type7 == "single" || stream.match('""'))) {
        end2 = true;
        break;
      }
      if (!escaped && stream.match("``")) {
        stringTokenizer = tokenCeylonString(type7);
        end2 = true;
        break;
      }
      next2 = stream.next();
      escaped = type7 == "single" && !escaped && next2 == "\\";
    }
    if (end2)
      state.tokenize = null;
    return "string";
  };
}
function pushInterpolationStack(state) {
  (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
}
function popInterpolationStack(state) {
  return (state.interpolationStack || (state.interpolationStack = [])).pop();
}
function sizeInterpolationStack(state) {
  return state.interpolationStack ? state.interpolationStack.length : 0;
}
function tokenDartString(quote4, stream, state, raw2) {
  var tripleQuoted = false;
  if (stream.eat(quote4)) {
    if (stream.eat(quote4)) tripleQuoted = true;
    else return "string";
  }
  function tokenStringHelper(stream2, state2) {
    var escaped = false;
    while (!stream2.eol()) {
      if (!raw2 && !escaped && stream2.peek() == "$") {
        pushInterpolationStack(state2);
        state2.tokenize = tokenInterpolation;
        return "string";
      }
      var next2 = stream2.next();
      if (next2 == quote4 && !escaped && (!tripleQuoted || stream2.match(quote4 + quote4))) {
        state2.tokenize = null;
        break;
      }
      escaped = !raw2 && !escaped && next2 == "\\";
    }
    return "string";
  }
  state.tokenize = tokenStringHelper;
  return tokenStringHelper(stream, state);
}
function tokenInterpolation(stream, state) {
  stream.eat("$");
  if (stream.eat("{")) {
    state.tokenize = null;
  } else {
    state.tokenize = tokenInterpolationIdentifier;
  }
  return null;
}
function tokenInterpolationIdentifier(stream, state) {
  stream.eatWhile(/[\w_]/);
  state.tokenize = popInterpolationStack(state);
  return "variable";
}
var cKeywords, cppKeywords, objCKeywords, objCBuiltins, basicCTypes, basicObjCTypes, cBlockKeywords, cDefKeywords, c, cpp2, java2, csharp, scala, kotlin, shader, nesC, objectiveC, objectiveCpp, squirrel, stringTokenizer, ceylon, dart;
var init_clike = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/clike.js"() {
    cKeywords = "auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile inline restrict asm fortran";
    cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch class compl concept constexpr const_cast decltype delete dynamic_cast explicit export final friend import module mutable namespace new noexcept not not_eq operator or or_eq override private protected public reinterpret_cast requires static_assert static_cast template this thread_local throw try typeid typename using virtual xor xor_eq";
    objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd @interface @implementation @end @protocol @encode @property @synthesize @dynamic @class @public @package @private @protected @required @optional @try @catch @finally @import @selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";
    objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION  NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";
    basicCTypes = words2("int long char short double float unsigned signed void bool");
    basicObjCTypes = words2("SEL instancetype id Class Protocol BOOL");
    cBlockKeywords = "case do else for if switch while struct enum union";
    cDefKeywords = "struct enum union";
    c = clike({
      name: "c",
      keywords: words2(cKeywords),
      types: cTypes,
      blockKeywords: words2(cBlockKeywords),
      defKeywords: words2(cDefKeywords),
      typeFirstDefinitions: true,
      atoms: words2("NULL true false"),
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook
      }
    });
    cpp2 = clike({
      name: "cpp",
      keywords: words2(cKeywords + " " + cppKeywords),
      types: cTypes,
      blockKeywords: words2(cBlockKeywords + " class try catch"),
      defKeywords: words2(cDefKeywords + " class namespace"),
      typeFirstDefinitions: true,
      atoms: words2("true false NULL nullptr"),
      dontIndentStatements: /^template$/,
      isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook,
        "u": cpp11StringHook,
        "U": cpp11StringHook,
        "L": cpp11StringHook,
        "R": cpp11StringHook,
        "0": cpp14Literal,
        "1": cpp14Literal,
        "2": cpp14Literal,
        "3": cpp14Literal,
        "4": cpp14Literal,
        "5": cpp14Literal,
        "6": cpp14Literal,
        "7": cpp14Literal,
        "8": cpp14Literal,
        "9": cpp14Literal,
        token: function(stream, state, style2) {
          if (style2 == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
            return "def";
        }
      },
      namespaceSeparator: "::"
    });
    java2 = clike({
      name: "java",
      keywords: words2("abstract assert break case catch class const continue default do else enum extends final finally for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),
      types: words2("var byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),
      blockKeywords: words2("catch class do else finally for if switch try while"),
      defKeywords: words2("class interface enum @interface"),
      typeFirstDefinitions: true,
      atoms: words2("true false null"),
      number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
      hooks: {
        "@": function(stream) {
          if (stream.match("interface", false)) return false;
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        '"': function(stream, state) {
          if (!stream.match(/""$/)) return false;
          state.tokenize = tokenTripleString;
          return state.tokenize(stream, state);
        }
      }
    });
    csharp = clike({
      name: "csharp",
      keywords: words2("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in init interface internal is lock namespace new operator out override params private protected public readonly record ref required return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),
      types: words2("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),
      blockKeywords: words2("catch class do else finally for foreach if struct switch try while"),
      defKeywords: words2("class interface namespace record struct var"),
      typeFirstDefinitions: true,
      atoms: words2("true false null"),
      hooks: {
        "@": function(stream, state) {
          if (stream.eat('"')) {
            state.tokenize = tokenAtString;
            return tokenAtString(stream, state);
          }
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        }
      }
    });
    scala = clike({
      name: "scala",
      keywords: words2(
        /* scala */
        "abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"
      ),
      types: words2(
        "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
      ),
      multiLineStrings: true,
      blockKeywords: words2("catch class enum do else finally for forSome if match switch try while"),
      defKeywords: words2("class enum def object package trait type val var"),
      atoms: words2("true false null"),
      indentStatements: false,
      indentSwitch: false,
      isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        '"': function(stream, state) {
          if (!stream.match('""')) return false;
          state.tokenize = tokenTripleString;
          return state.tokenize(stream, state);
        },
        "'": function(stream) {
          if (stream.match(/^(\\[^'\s]+|[^\\'])'/)) return "character";
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          return "atom";
        },
        "=": function(stream, state) {
          var cx2 = state.context;
          if (cx2.type == "}" && cx2.align && stream.eat(">")) {
            state.context = new Context4(cx2.indented, cx2.column, cx2.type, cx2.info, null, cx2.prev);
            return "operator";
          } else {
            return false;
          }
        },
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenNestedComment(1);
          return state.tokenize(stream, state);
        }
      },
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
      }
    });
    kotlin = clike({
      name: "kotlin",
      keywords: words2(
        /*keywords*/
        "package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"
      ),
      types: words2(
        /* package java.lang */
        "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
      ),
      intendSwitch: false,
      indentStatements: false,
      multiLineStrings: true,
      number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
      blockKeywords: words2("catch class do else finally for if where try while enum"),
      defKeywords: words2("class val var object interface fun"),
      atoms: words2("true false null this"),
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        "*": function(_stream, state) {
          return state.prevToken == "." ? "variable" : "operator";
        },
        '"': function(stream, state) {
          state.tokenize = tokenKotlinString(stream.match('""'));
          return state.tokenize(stream, state);
        },
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenNestedComment(1);
          return state.tokenize(stream, state);
        },
        indent: function(state, ctx, textAfter, indentUnit2) {
          var firstChar = textAfter && textAfter.charAt(0);
          if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
            return state.indented;
          if (state.prevToken == "operator" && textAfter != "}" && state.context.type != "}" || state.prevToken == "variable" && firstChar == "." || (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
            return indentUnit2 * 2 + ctx.indented;
          if (ctx.align && ctx.type == "}")
            return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit2);
        }
      },
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
      }
    });
    shader = clike({
      name: "shader",
      keywords: words2("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),
      types: words2("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),
      blockKeywords: words2("for while do if else struct"),
      builtin: words2("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),
      atoms: words2("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),
      indentSwitch: false,
      hooks: { "#": cppHook }
    });
    nesC = clike({
      name: "nesc",
      keywords: words2(cKeywords + " as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),
      types: cTypes,
      blockKeywords: words2(cBlockKeywords),
      atoms: words2("null true false"),
      hooks: { "#": cppHook }
    });
    objectiveC = clike({
      name: "objectivec",
      keywords: words2(cKeywords + " " + objCKeywords),
      types: objCTypes,
      builtin: words2(objCBuiltins),
      blockKeywords: words2(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
      defKeywords: words2(cDefKeywords + " @interface @implementation @protocol @class"),
      dontIndentStatements: /^@.*$/,
      typeFirstDefinitions: true,
      atoms: words2("YES NO NULL Nil nil true false nullptr"),
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook
      }
    });
    objectiveCpp = clike({
      name: "objectivecpp",
      keywords: words2(cKeywords + " " + objCKeywords + " " + cppKeywords),
      types: objCTypes,
      builtin: words2(objCBuiltins),
      blockKeywords: words2(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
      defKeywords: words2(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
      dontIndentStatements: /^@.*$|^template$/,
      typeFirstDefinitions: true,
      atoms: words2("YES NO NULL Nil nil true false nullptr"),
      isReservedIdentifier: cIsReservedIdentifier,
      hooks: {
        "#": cppHook,
        "*": pointerHook,
        "u": cpp11StringHook,
        "U": cpp11StringHook,
        "L": cpp11StringHook,
        "R": cpp11StringHook,
        "0": cpp14Literal,
        "1": cpp14Literal,
        "2": cpp14Literal,
        "3": cpp14Literal,
        "4": cpp14Literal,
        "5": cpp14Literal,
        "6": cpp14Literal,
        "7": cpp14Literal,
        "8": cpp14Literal,
        "9": cpp14Literal,
        token: function(stream, state, style2) {
          if (style2 == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
            return "def";
        }
      },
      namespaceSeparator: "::"
    });
    squirrel = clike({
      name: "squirrel",
      keywords: words2("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),
      types: cTypes,
      blockKeywords: words2("case catch class else for foreach if switch try while"),
      defKeywords: words2("function local class"),
      typeFirstDefinitions: true,
      atoms: words2("true false null"),
      hooks: { "#": cppHook }
    });
    stringTokenizer = null;
    ceylon = clike({
      name: "ceylon",
      keywords: words2("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),
      types: function(word) {
        var first = word.charAt(0);
        return first === first.toUpperCase() && first !== first.toLowerCase();
      },
      blockKeywords: words2("case catch class dynamic else finally for function if interface module new object switch try while"),
      defKeywords: words2("class dynamic function interface module object package value"),
      builtin: words2("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),
      isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
      isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
      numberStart: /[\d#$]/,
      number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
      multiLineStrings: true,
      typeFirstDefinitions: true,
      atoms: words2("true false null larger smaller equal empty finished"),
      indentSwitch: false,
      styleDefs: false,
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        },
        '"': function(stream, state) {
          state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
          return state.tokenize(stream, state);
        },
        "`": function(stream, state) {
          if (!stringTokenizer || !stream.match("`")) return false;
          state.tokenize = stringTokenizer;
          stringTokenizer = null;
          return state.tokenize(stream, state);
        },
        "'": function(stream) {
          if (stream.match(/^(\\[^'\s]+|[^\\'])'/)) return "string.special";
          stream.eatWhile(/[\w\$_\xa1-\uffff]/);
          return "atom";
        },
        token: function(_stream, state, style2) {
          if ((style2 == "variable" || style2 == "type") && state.prevToken == ".") {
            return "variableName.special";
          }
        }
      },
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
      }
    });
    dart = clike({
      name: "dart",
      keywords: words2("this super static final const abstract class extends external factory implements mixin get native set typedef with enum throw rethrow assert break case continue default in return new deferred async await covariant try catch finally do else for if switch while import library export part of show hide is as extension on yield late required sealed base interface when inline"),
      blockKeywords: words2("try catch finally do else for if switch while"),
      builtin: words2("void bool num int double dynamic var String Null Never"),
      atoms: words2("true false null"),
      // clike numbers without the suffixes, and with '_' separators.
      number: /^(?:0x[a-f\d_]+|(?:[\d_]+\.?[\d_]*|\.[\d_]+)(?:e[-+]?[\d_]+)?)/i,
      hooks: {
        "@": function(stream) {
          stream.eatWhile(/[\w\$_\.]/);
          return "meta";
        },
        // custom string handling to deal with triple-quoted strings and string interpolation
        "'": function(stream, state) {
          return tokenDartString("'", stream, state, false);
        },
        '"': function(stream, state) {
          return tokenDartString('"', stream, state, false);
        },
        "r": function(stream, state) {
          var peek = stream.peek();
          if (peek == "'" || peek == '"') {
            return tokenDartString(stream.next(), stream, state, true);
          }
          return false;
        },
        "}": function(_stream, state) {
          if (sizeInterpolationStack(state) > 0) {
            state.tokenize = popInterpolationStack(state);
            return null;
          }
          return false;
        },
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenNestedComment(1);
          return state.tokenize(stream, state);
        },
        token: function(stream, _, style2) {
          if (style2 == "variable") {
            var isUpper = RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$", "g");
            if (isUpper.test(stream.current())) {
              return "type";
            }
          }
        }
      }
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/clojure.js
var clojure_exports = {};
__export(clojure_exports, {
  clojure: () => clojure
});
function base3(stream, state) {
  if (stream.eatSpace() || stream.eat(",")) return ["space", null];
  if (stream.match(numberLiteral)) return [null, "number"];
  if (stream.match(characterLiteral)) return [null, "string.special"];
  if (stream.eat(/^"/)) return (state.tokenize = inString2)(stream, state);
  if (stream.eat(/^[(\[{]/)) return ["open", "bracket"];
  if (stream.eat(/^[)\]}]/)) return ["close", "bracket"];
  if (stream.eat(/^;/)) {
    stream.skipToEnd();
    return ["space", "comment"];
  }
  if (stream.eat(/^[#'@^`~]/)) return [null, "meta"];
  var matches = stream.match(qualifiedSymbol);
  var symbol4 = matches && matches[0];
  if (!symbol4) {
    stream.next();
    stream.eatWhile(function(c2) {
      return !is(c2, delimiter);
    });
    return [null, "error"];
  }
  if (symbol4 === "comment" && state.lastToken === "(")
    return (state.tokenize = inComment)(stream, state);
  if (is(symbol4, atom) || symbol4.charAt(0) === ":") return ["symbol", "atom"];
  if (is(symbol4, specialForm) || is(symbol4, coreSymbol)) return ["symbol", "keyword"];
  if (state.lastToken === "(") return ["symbol", "builtin"];
  return ["symbol", "variable"];
}
function inString2(stream, state) {
  var escaped = false, next2;
  while (next2 = stream.next()) {
    if (next2 === '"' && !escaped) {
      state.tokenize = base3;
      break;
    }
    escaped = !escaped && next2 === "\\";
  }
  return [null, "string"];
}
function inComment(stream, state) {
  var parenthesisCount = 1;
  var next2;
  while (next2 = stream.next()) {
    if (next2 === ")") parenthesisCount--;
    if (next2 === "(") parenthesisCount++;
    if (parenthesisCount === 0) {
      stream.backUp(1);
      state.tokenize = base3;
      break;
    }
  }
  return ["space", "comment"];
}
function createLookupMap(words22) {
  var obj = {};
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function is(value, test) {
  if (test instanceof RegExp) return test.test(value);
  if (test instanceof Object) return test.propertyIsEnumerable(value);
}
var atoms3, specialForms, coreSymbols, haveBodyParameter, atom, specialForm, coreSymbol, hasBodyParameter, delimiter, numberLiteral, characterLiteral, qualifiedSymbol, clojure;
var init_clojure = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/clojure.js"() {
    atoms3 = ["false", "nil", "true"];
    specialForms = [
      ".",
      "catch",
      "def",
      "do",
      "if",
      "monitor-enter",
      "monitor-exit",
      "new",
      "quote",
      "recur",
      "set!",
      "throw",
      "try",
      "var"
    ];
    coreSymbols = [
      "*",
      "*'",
      "*1",
      "*2",
      "*3",
      "*agent*",
      "*allow-unresolved-vars*",
      "*assert*",
      "*clojure-version*",
      "*command-line-args*",
      "*compile-files*",
      "*compile-path*",
      "*compiler-options*",
      "*data-readers*",
      "*default-data-reader-fn*",
      "*e",
      "*err*",
      "*file*",
      "*flush-on-newline*",
      "*fn-loader*",
      "*in*",
      "*math-context*",
      "*ns*",
      "*out*",
      "*print-dup*",
      "*print-length*",
      "*print-level*",
      "*print-meta*",
      "*print-namespace-maps*",
      "*print-readably*",
      "*read-eval*",
      "*reader-resolver*",
      "*source-path*",
      "*suppress-read*",
      "*unchecked-math*",
      "*use-context-classloader*",
      "*verbose-defrecords*",
      "*warn-on-reflection*",
      "+",
      "+'",
      "-",
      "-'",
      "->",
      "->>",
      "->ArrayChunk",
      "->Eduction",
      "->Vec",
      "->VecNode",
      "->VecSeq",
      "-cache-protocol-fn",
      "-reset-methods",
      "..",
      "/",
      "<",
      "<=",
      "=",
      "==",
      ">",
      ">=",
      "EMPTY-NODE",
      "Inst",
      "StackTraceElement->vec",
      "Throwable->map",
      "accessor",
      "aclone",
      "add-classpath",
      "add-watch",
      "agent",
      "agent-error",
      "agent-errors",
      "aget",
      "alength",
      "alias",
      "all-ns",
      "alter",
      "alter-meta!",
      "alter-var-root",
      "amap",
      "ancestors",
      "and",
      "any?",
      "apply",
      "areduce",
      "array-map",
      "as->",
      "aset",
      "aset-boolean",
      "aset-byte",
      "aset-char",
      "aset-double",
      "aset-float",
      "aset-int",
      "aset-long",
      "aset-short",
      "assert",
      "assoc",
      "assoc!",
      "assoc-in",
      "associative?",
      "atom",
      "await",
      "await-for",
      "await1",
      "bases",
      "bean",
      "bigdec",
      "bigint",
      "biginteger",
      "binding",
      "bit-and",
      "bit-and-not",
      "bit-clear",
      "bit-flip",
      "bit-not",
      "bit-or",
      "bit-set",
      "bit-shift-left",
      "bit-shift-right",
      "bit-test",
      "bit-xor",
      "boolean",
      "boolean-array",
      "boolean?",
      "booleans",
      "bound-fn",
      "bound-fn*",
      "bound?",
      "bounded-count",
      "butlast",
      "byte",
      "byte-array",
      "bytes",
      "bytes?",
      "case",
      "cast",
      "cat",
      "char",
      "char-array",
      "char-escape-string",
      "char-name-string",
      "char?",
      "chars",
      "chunk",
      "chunk-append",
      "chunk-buffer",
      "chunk-cons",
      "chunk-first",
      "chunk-next",
      "chunk-rest",
      "chunked-seq?",
      "class",
      "class?",
      "clear-agent-errors",
      "clojure-version",
      "coll?",
      "comment",
      "commute",
      "comp",
      "comparator",
      "compare",
      "compare-and-set!",
      "compile",
      "complement",
      "completing",
      "concat",
      "cond",
      "cond->",
      "cond->>",
      "condp",
      "conj",
      "conj!",
      "cons",
      "constantly",
      "construct-proxy",
      "contains?",
      "count",
      "counted?",
      "create-ns",
      "create-struct",
      "cycle",
      "dec",
      "dec'",
      "decimal?",
      "declare",
      "dedupe",
      "default-data-readers",
      "definline",
      "definterface",
      "defmacro",
      "defmethod",
      "defmulti",
      "defn",
      "defn-",
      "defonce",
      "defprotocol",
      "defrecord",
      "defstruct",
      "deftype",
      "delay",
      "delay?",
      "deliver",
      "denominator",
      "deref",
      "derive",
      "descendants",
      "destructure",
      "disj",
      "disj!",
      "dissoc",
      "dissoc!",
      "distinct",
      "distinct?",
      "doall",
      "dorun",
      "doseq",
      "dosync",
      "dotimes",
      "doto",
      "double",
      "double-array",
      "double?",
      "doubles",
      "drop",
      "drop-last",
      "drop-while",
      "eduction",
      "empty",
      "empty?",
      "ensure",
      "ensure-reduced",
      "enumeration-seq",
      "error-handler",
      "error-mode",
      "eval",
      "even?",
      "every-pred",
      "every?",
      "ex-data",
      "ex-info",
      "extend",
      "extend-protocol",
      "extend-type",
      "extenders",
      "extends?",
      "false?",
      "ffirst",
      "file-seq",
      "filter",
      "filterv",
      "find",
      "find-keyword",
      "find-ns",
      "find-protocol-impl",
      "find-protocol-method",
      "find-var",
      "first",
      "flatten",
      "float",
      "float-array",
      "float?",
      "floats",
      "flush",
      "fn",
      "fn?",
      "fnext",
      "fnil",
      "for",
      "force",
      "format",
      "frequencies",
      "future",
      "future-call",
      "future-cancel",
      "future-cancelled?",
      "future-done?",
      "future?",
      "gen-class",
      "gen-interface",
      "gensym",
      "get",
      "get-in",
      "get-method",
      "get-proxy-class",
      "get-thread-bindings",
      "get-validator",
      "group-by",
      "halt-when",
      "hash",
      "hash-combine",
      "hash-map",
      "hash-ordered-coll",
      "hash-set",
      "hash-unordered-coll",
      "ident?",
      "identical?",
      "identity",
      "if-let",
      "if-not",
      "if-some",
      "ifn?",
      "import",
      "in-ns",
      "inc",
      "inc'",
      "indexed?",
      "init-proxy",
      "inst-ms",
      "inst-ms*",
      "inst?",
      "instance?",
      "int",
      "int-array",
      "int?",
      "integer?",
      "interleave",
      "intern",
      "interpose",
      "into",
      "into-array",
      "ints",
      "io!",
      "isa?",
      "iterate",
      "iterator-seq",
      "juxt",
      "keep",
      "keep-indexed",
      "key",
      "keys",
      "keyword",
      "keyword?",
      "last",
      "lazy-cat",
      "lazy-seq",
      "let",
      "letfn",
      "line-seq",
      "list",
      "list*",
      "list?",
      "load",
      "load-file",
      "load-reader",
      "load-string",
      "loaded-libs",
      "locking",
      "long",
      "long-array",
      "longs",
      "loop",
      "macroexpand",
      "macroexpand-1",
      "make-array",
      "make-hierarchy",
      "map",
      "map-entry?",
      "map-indexed",
      "map?",
      "mapcat",
      "mapv",
      "max",
      "max-key",
      "memfn",
      "memoize",
      "merge",
      "merge-with",
      "meta",
      "method-sig",
      "methods",
      "min",
      "min-key",
      "mix-collection-hash",
      "mod",
      "munge",
      "name",
      "namespace",
      "namespace-munge",
      "nat-int?",
      "neg-int?",
      "neg?",
      "newline",
      "next",
      "nfirst",
      "nil?",
      "nnext",
      "not",
      "not-any?",
      "not-empty",
      "not-every?",
      "not=",
      "ns",
      "ns-aliases",
      "ns-imports",
      "ns-interns",
      "ns-map",
      "ns-name",
      "ns-publics",
      "ns-refers",
      "ns-resolve",
      "ns-unalias",
      "ns-unmap",
      "nth",
      "nthnext",
      "nthrest",
      "num",
      "number?",
      "numerator",
      "object-array",
      "odd?",
      "or",
      "parents",
      "partial",
      "partition",
      "partition-all",
      "partition-by",
      "pcalls",
      "peek",
      "persistent!",
      "pmap",
      "pop",
      "pop!",
      "pop-thread-bindings",
      "pos-int?",
      "pos?",
      "pr",
      "pr-str",
      "prefer-method",
      "prefers",
      "primitives-classnames",
      "print",
      "print-ctor",
      "print-dup",
      "print-method",
      "print-simple",
      "print-str",
      "printf",
      "println",
      "println-str",
      "prn",
      "prn-str",
      "promise",
      "proxy",
      "proxy-call-with-super",
      "proxy-mappings",
      "proxy-name",
      "proxy-super",
      "push-thread-bindings",
      "pvalues",
      "qualified-ident?",
      "qualified-keyword?",
      "qualified-symbol?",
      "quot",
      "rand",
      "rand-int",
      "rand-nth",
      "random-sample",
      "range",
      "ratio?",
      "rational?",
      "rationalize",
      "re-find",
      "re-groups",
      "re-matcher",
      "re-matches",
      "re-pattern",
      "re-seq",
      "read",
      "read-line",
      "read-string",
      "reader-conditional",
      "reader-conditional?",
      "realized?",
      "record?",
      "reduce",
      "reduce-kv",
      "reduced",
      "reduced?",
      "reductions",
      "ref",
      "ref-history-count",
      "ref-max-history",
      "ref-min-history",
      "ref-set",
      "refer",
      "refer-clojure",
      "reify",
      "release-pending-sends",
      "rem",
      "remove",
      "remove-all-methods",
      "remove-method",
      "remove-ns",
      "remove-watch",
      "repeat",
      "repeatedly",
      "replace",
      "replicate",
      "require",
      "reset!",
      "reset-meta!",
      "reset-vals!",
      "resolve",
      "rest",
      "restart-agent",
      "resultset-seq",
      "reverse",
      "reversible?",
      "rseq",
      "rsubseq",
      "run!",
      "satisfies?",
      "second",
      "select-keys",
      "send",
      "send-off",
      "send-via",
      "seq",
      "seq?",
      "seqable?",
      "seque",
      "sequence",
      "sequential?",
      "set",
      "set-agent-send-executor!",
      "set-agent-send-off-executor!",
      "set-error-handler!",
      "set-error-mode!",
      "set-validator!",
      "set?",
      "short",
      "short-array",
      "shorts",
      "shuffle",
      "shutdown-agents",
      "simple-ident?",
      "simple-keyword?",
      "simple-symbol?",
      "slurp",
      "some",
      "some->",
      "some->>",
      "some-fn",
      "some?",
      "sort",
      "sort-by",
      "sorted-map",
      "sorted-map-by",
      "sorted-set",
      "sorted-set-by",
      "sorted?",
      "special-symbol?",
      "spit",
      "split-at",
      "split-with",
      "str",
      "string?",
      "struct",
      "struct-map",
      "subs",
      "subseq",
      "subvec",
      "supers",
      "swap!",
      "swap-vals!",
      "symbol",
      "symbol?",
      "sync",
      "tagged-literal",
      "tagged-literal?",
      "take",
      "take-last",
      "take-nth",
      "take-while",
      "test",
      "the-ns",
      "thread-bound?",
      "time",
      "to-array",
      "to-array-2d",
      "trampoline",
      "transduce",
      "transient",
      "tree-seq",
      "true?",
      "type",
      "unchecked-add",
      "unchecked-add-int",
      "unchecked-byte",
      "unchecked-char",
      "unchecked-dec",
      "unchecked-dec-int",
      "unchecked-divide-int",
      "unchecked-double",
      "unchecked-float",
      "unchecked-inc",
      "unchecked-inc-int",
      "unchecked-int",
      "unchecked-long",
      "unchecked-multiply",
      "unchecked-multiply-int",
      "unchecked-negate",
      "unchecked-negate-int",
      "unchecked-remainder-int",
      "unchecked-short",
      "unchecked-subtract",
      "unchecked-subtract-int",
      "underive",
      "unquote",
      "unquote-splicing",
      "unreduced",
      "unsigned-bit-shift-right",
      "update",
      "update-in",
      "update-proxy",
      "uri?",
      "use",
      "uuid?",
      "val",
      "vals",
      "var-get",
      "var-set",
      "var?",
      "vary-meta",
      "vec",
      "vector",
      "vector-of",
      "vector?",
      "volatile!",
      "volatile?",
      "vreset!",
      "vswap!",
      "when",
      "when-first",
      "when-let",
      "when-not",
      "when-some",
      "while",
      "with-bindings",
      "with-bindings*",
      "with-in-str",
      "with-loading-context",
      "with-local-vars",
      "with-meta",
      "with-open",
      "with-out-str",
      "with-precision",
      "with-redefs",
      "with-redefs-fn",
      "xml-seq",
      "zero?",
      "zipmap"
    ];
    haveBodyParameter = [
      "->",
      "->>",
      "as->",
      "binding",
      "bound-fn",
      "case",
      "catch",
      "comment",
      "cond",
      "cond->",
      "cond->>",
      "condp",
      "def",
      "definterface",
      "defmethod",
      "defn",
      "defmacro",
      "defprotocol",
      "defrecord",
      "defstruct",
      "deftype",
      "do",
      "doseq",
      "dotimes",
      "doto",
      "extend",
      "extend-protocol",
      "extend-type",
      "fn",
      "for",
      "future",
      "if",
      "if-let",
      "if-not",
      "if-some",
      "let",
      "letfn",
      "locking",
      "loop",
      "ns",
      "proxy",
      "reify",
      "struct-map",
      "some->",
      "some->>",
      "try",
      "when",
      "when-first",
      "when-let",
      "when-not",
      "when-some",
      "while",
      "with-bindings",
      "with-bindings*",
      "with-in-str",
      "with-loading-context",
      "with-local-vars",
      "with-meta",
      "with-open",
      "with-out-str",
      "with-precision",
      "with-redefs",
      "with-redefs-fn"
    ];
    atom = createLookupMap(atoms3);
    specialForm = createLookupMap(specialForms);
    coreSymbol = createLookupMap(coreSymbols);
    hasBodyParameter = createLookupMap(haveBodyParameter);
    delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
    numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
    characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;
    qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;
    clojure = {
      name: "clojure",
      startState: function() {
        return {
          ctx: { prev: null, start: 0, indentTo: 0 },
          lastToken: null,
          tokenize: base3
        };
      },
      token: function(stream, state) {
        if (stream.sol() && typeof state.ctx.indentTo !== "number")
          state.ctx.indentTo = state.ctx.start + 1;
        var typeStylePair = state.tokenize(stream, state);
        var type7 = typeStylePair[0];
        var style2 = typeStylePair[1];
        var current = stream.current();
        if (type7 !== "space") {
          if (state.lastToken === "(" && state.ctx.indentTo === null) {
            if (type7 === "symbol" && is(current, hasBodyParameter))
              state.ctx.indentTo = state.ctx.start + stream.indentUnit;
            else state.ctx.indentTo = "next";
          } else if (state.ctx.indentTo === "next") {
            state.ctx.indentTo = stream.column();
          }
          state.lastToken = current;
        }
        if (type7 === "open")
          state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
        else if (type7 === "close") state.ctx = state.ctx.prev || state.ctx;
        return style2;
      },
      indent: function(state) {
        var i = state.ctx.indentTo;
        return typeof i === "number" ? i : state.ctx.start + 1;
      },
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", '"'] },
        commentTokens: { line: ";;" },
        autocomplete: [].concat(atoms3, specialForms, coreSymbols)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/css.js
var css_exports = {};
__export(css_exports, {
  css: () => css2,
  gss: () => gss,
  keywords: () => keywords6,
  less: () => less2,
  mkCSS: () => mkCSS,
  sCSS: () => sCSS
});
function mkCSS(parserConfig4) {
  parserConfig4 = { ...defaults5, ...parserConfig4 };
  var inline = parserConfig4.inline;
  var tokenHooks = parserConfig4.tokenHooks, documentTypes3 = parserConfig4.documentTypes || {}, mediaTypes3 = parserConfig4.mediaTypes || {}, mediaFeatures3 = parserConfig4.mediaFeatures || {}, mediaValueKeywords2 = parserConfig4.mediaValueKeywords || {}, propertyKeywords3 = parserConfig4.propertyKeywords || {}, nonStandardPropertyKeywords3 = parserConfig4.nonStandardPropertyKeywords || {}, fontProperties3 = parserConfig4.fontProperties || {}, counterDescriptors2 = parserConfig4.counterDescriptors || {}, colorKeywords3 = parserConfig4.colorKeywords || {}, valueKeywords3 = parserConfig4.valueKeywords || {}, allowNested = parserConfig4.allowNested, lineComment = parserConfig4.lineComment, supportsAtComponent = parserConfig4.supportsAtComponent === true, highlightNonStandardPropertyKeywords = parserConfig4.highlightNonStandardPropertyKeywords !== false;
  var type7, override2;
  function ret4(style2, tp) {
    type7 = tp;
    return style2;
  }
  function tokenBase48(stream, state) {
    var ch2 = stream.next();
    if (tokenHooks[ch2]) {
      var result = tokenHooks[ch2](stream, state);
      if (result !== false) return result;
    }
    if (ch2 == "@") {
      stream.eatWhile(/[\w\\\-]/);
      return ret4("def", stream.current());
    } else if (ch2 == "=" || (ch2 == "~" || ch2 == "|") && stream.eat("=")) {
      return ret4(null, "compare");
    } else if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString31(ch2);
      return state.tokenize(stream, state);
    } else if (ch2 == "#") {
      stream.eatWhile(/[\w\\\-]/);
      return ret4("atom", "hash");
    } else if (ch2 == "!") {
      stream.match(/^\s*\w*/);
      return ret4("keyword", "important");
    } else if (/\d/.test(ch2) || ch2 == "." && stream.eat(/\d/)) {
      stream.eatWhile(/[\w.%]/);
      return ret4("number", "unit");
    } else if (ch2 === "-") {
      if (/[\d.]/.test(stream.peek())) {
        stream.eatWhile(/[\w.%]/);
        return ret4("number", "unit");
      } else if (stream.match(/^-[\w\\\-]*/)) {
        stream.eatWhile(/[\w\\\-]/);
        if (stream.match(/^\s*:/, false))
          return ret4("def", "variable-definition");
        return ret4("variableName", "variable");
      } else if (stream.match(/^\w+-/)) {
        return ret4("meta", "meta");
      }
    } else if (/[,+>*\/]/.test(ch2)) {
      return ret4(null, "select-op");
    } else if (ch2 == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
      return ret4("qualifier", "qualifier");
    } else if (/[:;{}\[\]\(\)]/.test(ch2)) {
      return ret4(null, ch2);
    } else if (stream.match(/^[\w-.]+(?=\()/)) {
      if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {
        state.tokenize = tokenParenthesized2;
      }
      return ret4("variableName.function", "variable");
    } else if (/[\w\\\-]/.test(ch2)) {
      stream.eatWhile(/[\w\\\-]/);
      return ret4("property", "word");
    } else {
      return ret4(null, null);
    }
  }
  function tokenString31(quote4) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote4 && !escaped) {
          if (quote4 == ")") stream.backUp(1);
          break;
        }
        escaped = !escaped && ch2 == "\\";
      }
      if (ch2 == quote4 || !escaped && quote4 != ")") state.tokenize = null;
      return ret4("string", "string");
    };
  }
  function tokenParenthesized2(stream, state) {
    stream.next();
    if (!stream.match(/^\s*[\"\')]/, false))
      state.tokenize = tokenString31(")");
    else
      state.tokenize = null;
    return ret4(null, "(");
  }
  function Context17(type8, indent7, prev) {
    this.type = type8;
    this.indent = indent7;
    this.prev = prev;
  }
  function pushContext18(state, stream, type8, indent7) {
    state.context = new Context17(type8, stream.indentation() + (indent7 === false ? 0 : stream.indentUnit), state.context);
    return type8;
  }
  function popContext18(state) {
    if (state.context.prev)
      state.context = state.context.prev;
    return state.context.type;
  }
  function pass4(type8, stream, state) {
    return states2[state.context.type](type8, stream, state);
  }
  function popAndPass2(type8, stream, state, n) {
    for (var i = n || 1; i > 0; i--)
      state.context = state.context.prev;
    return pass4(type8, stream, state);
  }
  function wordAsValue2(stream) {
    var word = stream.current().toLowerCase();
    if (valueKeywords3.hasOwnProperty(word))
      override2 = "atom";
    else if (colorKeywords3.hasOwnProperty(word))
      override2 = "keyword";
    else
      override2 = "variable";
  }
  var states2 = {};
  states2.top = function(type8, stream, state) {
    if (type8 == "{") {
      return pushContext18(state, stream, "block");
    } else if (type8 == "}" && state.context.prev) {
      return popContext18(state);
    } else if (supportsAtComponent && /@component/i.test(type8)) {
      return pushContext18(state, stream, "atComponentBlock");
    } else if (/^@(-moz-)?document$/i.test(type8)) {
      return pushContext18(state, stream, "documentTypes");
    } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type8)) {
      return pushContext18(state, stream, "atBlock");
    } else if (/^@(font-face|counter-style)/i.test(type8)) {
      state.stateArg = type8;
      return "restricted_atBlock_before";
    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type8)) {
      return "keyframes";
    } else if (type8 && type8.charAt(0) == "@") {
      return pushContext18(state, stream, "at");
    } else if (type8 == "hash") {
      override2 = "builtin";
    } else if (type8 == "word") {
      override2 = "tag";
    } else if (type8 == "variable-definition") {
      return "maybeprop";
    } else if (type8 == "interpolation") {
      return pushContext18(state, stream, "interpolation");
    } else if (type8 == ":") {
      return "pseudo";
    } else if (allowNested && type8 == "(") {
      return pushContext18(state, stream, "parens");
    }
    return state.context.type;
  };
  states2.block = function(type8, stream, state) {
    if (type8 == "word") {
      var word = stream.current().toLowerCase();
      if (propertyKeywords3.hasOwnProperty(word)) {
        override2 = "property";
        return "maybeprop";
      } else if (nonStandardPropertyKeywords3.hasOwnProperty(word)) {
        override2 = highlightNonStandardPropertyKeywords ? "string.special" : "property";
        return "maybeprop";
      } else if (allowNested) {
        override2 = stream.match(/^\s*:(?:\s|$)/, false) ? "property" : "tag";
        return "block";
      } else {
        override2 = "error";
        return "maybeprop";
      }
    } else if (type8 == "meta") {
      return "block";
    } else if (!allowNested && (type8 == "hash" || type8 == "qualifier")) {
      override2 = "error";
      return "block";
    } else {
      return states2.top(type8, stream, state);
    }
  };
  states2.maybeprop = function(type8, stream, state) {
    if (type8 == ":") return pushContext18(state, stream, "prop");
    return pass4(type8, stream, state);
  };
  states2.prop = function(type8, stream, state) {
    if (type8 == ";") return popContext18(state);
    if (type8 == "{" && allowNested) return pushContext18(state, stream, "propBlock");
    if (type8 == "}" || type8 == "{") return popAndPass2(type8, stream, state);
    if (type8 == "(") return pushContext18(state, stream, "parens");
    if (type8 == "hash" && !/^#([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(stream.current())) {
      override2 = "error";
    } else if (type8 == "word") {
      wordAsValue2(stream);
    } else if (type8 == "interpolation") {
      return pushContext18(state, stream, "interpolation");
    }
    return "prop";
  };
  states2.propBlock = function(type8, _stream, state) {
    if (type8 == "}") return popContext18(state);
    if (type8 == "word") {
      override2 = "property";
      return "maybeprop";
    }
    return state.context.type;
  };
  states2.parens = function(type8, stream, state) {
    if (type8 == "{" || type8 == "}") return popAndPass2(type8, stream, state);
    if (type8 == ")") return popContext18(state);
    if (type8 == "(") return pushContext18(state, stream, "parens");
    if (type8 == "interpolation") return pushContext18(state, stream, "interpolation");
    if (type8 == "word") wordAsValue2(stream);
    return "parens";
  };
  states2.pseudo = function(type8, stream, state) {
    if (type8 == "meta") return "pseudo";
    if (type8 == "word") {
      override2 = "variableName.constant";
      return state.context.type;
    }
    return pass4(type8, stream, state);
  };
  states2.documentTypes = function(type8, stream, state) {
    if (type8 == "word" && documentTypes3.hasOwnProperty(stream.current())) {
      override2 = "tag";
      return state.context.type;
    } else {
      return states2.atBlock(type8, stream, state);
    }
  };
  states2.atBlock = function(type8, stream, state) {
    if (type8 == "(") return pushContext18(state, stream, "atBlock_parens");
    if (type8 == "}" || type8 == ";") return popAndPass2(type8, stream, state);
    if (type8 == "{") return popContext18(state) && pushContext18(state, stream, allowNested ? "block" : "top");
    if (type8 == "interpolation") return pushContext18(state, stream, "interpolation");
    if (type8 == "word") {
      var word = stream.current().toLowerCase();
      if (word == "only" || word == "not" || word == "and" || word == "or")
        override2 = "keyword";
      else if (mediaTypes3.hasOwnProperty(word))
        override2 = "attribute";
      else if (mediaFeatures3.hasOwnProperty(word))
        override2 = "property";
      else if (mediaValueKeywords2.hasOwnProperty(word))
        override2 = "keyword";
      else if (propertyKeywords3.hasOwnProperty(word))
        override2 = "property";
      else if (nonStandardPropertyKeywords3.hasOwnProperty(word))
        override2 = highlightNonStandardPropertyKeywords ? "string.special" : "property";
      else if (valueKeywords3.hasOwnProperty(word))
        override2 = "atom";
      else if (colorKeywords3.hasOwnProperty(word))
        override2 = "keyword";
      else
        override2 = "error";
    }
    return state.context.type;
  };
  states2.atComponentBlock = function(type8, stream, state) {
    if (type8 == "}")
      return popAndPass2(type8, stream, state);
    if (type8 == "{")
      return popContext18(state) && pushContext18(state, stream, allowNested ? "block" : "top", false);
    if (type8 == "word")
      override2 = "error";
    return state.context.type;
  };
  states2.atBlock_parens = function(type8, stream, state) {
    if (type8 == ")") return popContext18(state);
    if (type8 == "{" || type8 == "}") return popAndPass2(type8, stream, state, 2);
    return states2.atBlock(type8, stream, state);
  };
  states2.restricted_atBlock_before = function(type8, stream, state) {
    if (type8 == "{")
      return pushContext18(state, stream, "restricted_atBlock");
    if (type8 == "word" && state.stateArg == "@counter-style") {
      override2 = "variable";
      return "restricted_atBlock_before";
    }
    return pass4(type8, stream, state);
  };
  states2.restricted_atBlock = function(type8, stream, state) {
    if (type8 == "}") {
      state.stateArg = null;
      return popContext18(state);
    }
    if (type8 == "word") {
      if (state.stateArg == "@font-face" && !fontProperties3.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == "@counter-style" && !counterDescriptors2.hasOwnProperty(stream.current().toLowerCase()))
        override2 = "error";
      else
        override2 = "property";
      return "maybeprop";
    }
    return "restricted_atBlock";
  };
  states2.keyframes = function(type8, stream, state) {
    if (type8 == "word") {
      override2 = "variable";
      return "keyframes";
    }
    if (type8 == "{") return pushContext18(state, stream, "top");
    return pass4(type8, stream, state);
  };
  states2.at = function(type8, stream, state) {
    if (type8 == ";") return popContext18(state);
    if (type8 == "{" || type8 == "}") return popAndPass2(type8, stream, state);
    if (type8 == "word") override2 = "tag";
    else if (type8 == "hash") override2 = "builtin";
    return "at";
  };
  states2.interpolation = function(type8, stream, state) {
    if (type8 == "}") return popContext18(state);
    if (type8 == "{" || type8 == ";") return popAndPass2(type8, stream, state);
    if (type8 == "word") override2 = "variable";
    else if (type8 != "variable" && type8 != "(" && type8 != ")") override2 = "error";
    return "interpolation";
  };
  return {
    name: parserConfig4.name,
    startState: function() {
      return {
        tokenize: null,
        state: inline ? "block" : "top",
        stateArg: null,
        context: new Context17(inline ? "block" : "top", 0, null)
      };
    },
    token: function(stream, state) {
      if (!state.tokenize && stream.eatSpace()) return null;
      var style2 = (state.tokenize || tokenBase48)(stream, state);
      if (style2 && typeof style2 == "object") {
        type7 = style2[1];
        style2 = style2[0];
      }
      override2 = style2;
      if (type7 != "comment")
        state.state = states2[state.state](type7, stream, state);
      return override2;
    },
    indent: function(state, textAfter, iCx) {
      var cx2 = state.context, ch2 = textAfter && textAfter.charAt(0);
      var indent7 = cx2.indent;
      if (cx2.type == "prop" && (ch2 == "}" || ch2 == ")")) cx2 = cx2.prev;
      if (cx2.prev) {
        if (ch2 == "}" && (cx2.type == "block" || cx2.type == "top" || cx2.type == "interpolation" || cx2.type == "restricted_atBlock")) {
          cx2 = cx2.prev;
          indent7 = cx2.indent;
        } else if (ch2 == ")" && (cx2.type == "parens" || cx2.type == "atBlock_parens") || ch2 == "{" && (cx2.type == "at" || cx2.type == "atBlock")) {
          indent7 = Math.max(0, cx2.indent - iCx.unit);
        }
      }
      return indent7;
    },
    languageData: {
      indentOnInput: /^\s*\}$/,
      commentTokens: { line: lineComment, block: { open: "/*", close: "*/" } },
      autocomplete: allWords
    }
  };
}
function keySet(array2) {
  var keys2 = {};
  for (var i = 0; i < array2.length; ++i) {
    keys2[array2[i].toLowerCase()] = true;
  }
  return keys2;
}
function tokenCComment(stream, state) {
  var maybeEnd = false, ch2;
  while ((ch2 = stream.next()) != null) {
    if (maybeEnd && ch2 == "/") {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return ["comment", "comment"];
}
var documentTypes_, documentTypes, mediaTypes_, mediaTypes, mediaFeatures_, mediaFeatures, mediaValueKeywords_, mediaValueKeywords, propertyKeywords_, propertyKeywords, nonStandardPropertyKeywords_, nonStandardPropertyKeywords, fontProperties_, fontProperties, counterDescriptors_, counterDescriptors, colorKeywords_, colorKeywords, valueKeywords_, valueKeywords, allWords, keywords6, defaults5, css2, sCSS, less2, gss;
var init_css = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/css.js"() {
    documentTypes_ = [
      "domain",
      "regexp",
      "url",
      "url-prefix"
    ];
    documentTypes = keySet(documentTypes_);
    mediaTypes_ = [
      "all",
      "aural",
      "braille",
      "handheld",
      "print",
      "projection",
      "screen",
      "tty",
      "tv",
      "embossed"
    ];
    mediaTypes = keySet(mediaTypes_);
    mediaFeatures_ = [
      "width",
      "min-width",
      "max-width",
      "height",
      "min-height",
      "max-height",
      "device-width",
      "min-device-width",
      "max-device-width",
      "device-height",
      "min-device-height",
      "max-device-height",
      "aspect-ratio",
      "min-aspect-ratio",
      "max-aspect-ratio",
      "device-aspect-ratio",
      "min-device-aspect-ratio",
      "max-device-aspect-ratio",
      "color",
      "min-color",
      "max-color",
      "color-index",
      "min-color-index",
      "max-color-index",
      "monochrome",
      "min-monochrome",
      "max-monochrome",
      "resolution",
      "min-resolution",
      "max-resolution",
      "scan",
      "grid",
      "orientation",
      "device-pixel-ratio",
      "min-device-pixel-ratio",
      "max-device-pixel-ratio",
      "pointer",
      "any-pointer",
      "hover",
      "any-hover",
      "prefers-color-scheme",
      "dynamic-range",
      "video-dynamic-range"
    ];
    mediaFeatures = keySet(mediaFeatures_);
    mediaValueKeywords_ = [
      "landscape",
      "portrait",
      "none",
      "coarse",
      "fine",
      "on-demand",
      "hover",
      "interlace",
      "progressive",
      "dark",
      "light",
      "standard",
      "high"
    ];
    mediaValueKeywords = keySet(mediaValueKeywords_);
    propertyKeywords_ = [
      "align-content",
      "align-items",
      "align-self",
      "alignment-adjust",
      "alignment-baseline",
      "all",
      "anchor-point",
      "animation",
      "animation-delay",
      "animation-direction",
      "animation-duration",
      "animation-fill-mode",
      "animation-iteration-count",
      "animation-name",
      "animation-play-state",
      "animation-timing-function",
      "appearance",
      "azimuth",
      "backdrop-filter",
      "backface-visibility",
      "background",
      "background-attachment",
      "background-blend-mode",
      "background-clip",
      "background-color",
      "background-image",
      "background-origin",
      "background-position",
      "background-position-x",
      "background-position-y",
      "background-repeat",
      "background-size",
      "baseline-shift",
      "binding",
      "bleed",
      "block-size",
      "bookmark-label",
      "bookmark-level",
      "bookmark-state",
      "bookmark-target",
      "border",
      "border-bottom",
      "border-bottom-color",
      "border-bottom-left-radius",
      "border-bottom-right-radius",
      "border-bottom-style",
      "border-bottom-width",
      "border-collapse",
      "border-color",
      "border-image",
      "border-image-outset",
      "border-image-repeat",
      "border-image-slice",
      "border-image-source",
      "border-image-width",
      "border-left",
      "border-left-color",
      "border-left-style",
      "border-left-width",
      "border-radius",
      "border-right",
      "border-right-color",
      "border-right-style",
      "border-right-width",
      "border-spacing",
      "border-style",
      "border-top",
      "border-top-color",
      "border-top-left-radius",
      "border-top-right-radius",
      "border-top-style",
      "border-top-width",
      "border-width",
      "bottom",
      "box-decoration-break",
      "box-shadow",
      "box-sizing",
      "break-after",
      "break-before",
      "break-inside",
      "caption-side",
      "caret-color",
      "clear",
      "clip",
      "color",
      "color-profile",
      "column-count",
      "column-fill",
      "column-gap",
      "column-rule",
      "column-rule-color",
      "column-rule-style",
      "column-rule-width",
      "column-span",
      "column-width",
      "columns",
      "contain",
      "content",
      "counter-increment",
      "counter-reset",
      "crop",
      "cue",
      "cue-after",
      "cue-before",
      "cursor",
      "direction",
      "display",
      "dominant-baseline",
      "drop-initial-after-adjust",
      "drop-initial-after-align",
      "drop-initial-before-adjust",
      "drop-initial-before-align",
      "drop-initial-size",
      "drop-initial-value",
      "elevation",
      "empty-cells",
      "fit",
      "fit-content",
      "fit-position",
      "flex",
      "flex-basis",
      "flex-direction",
      "flex-flow",
      "flex-grow",
      "flex-shrink",
      "flex-wrap",
      "float",
      "float-offset",
      "flow-from",
      "flow-into",
      "font",
      "font-family",
      "font-feature-settings",
      "font-kerning",
      "font-language-override",
      "font-optical-sizing",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-synthesis",
      "font-variant",
      "font-variant-alternates",
      "font-variant-caps",
      "font-variant-east-asian",
      "font-variant-ligatures",
      "font-variant-numeric",
      "font-variant-position",
      "font-variation-settings",
      "font-weight",
      "gap",
      "grid",
      "grid-area",
      "grid-auto-columns",
      "grid-auto-flow",
      "grid-auto-rows",
      "grid-column",
      "grid-column-end",
      "grid-column-gap",
      "grid-column-start",
      "grid-gap",
      "grid-row",
      "grid-row-end",
      "grid-row-gap",
      "grid-row-start",
      "grid-template",
      "grid-template-areas",
      "grid-template-columns",
      "grid-template-rows",
      "hanging-punctuation",
      "height",
      "hyphens",
      "icon",
      "image-orientation",
      "image-rendering",
      "image-resolution",
      "inline-box-align",
      "inset",
      "inset-block",
      "inset-block-end",
      "inset-block-start",
      "inset-inline",
      "inset-inline-end",
      "inset-inline-start",
      "isolation",
      "justify-content",
      "justify-items",
      "justify-self",
      "left",
      "letter-spacing",
      "line-break",
      "line-height",
      "line-height-step",
      "line-stacking",
      "line-stacking-ruby",
      "line-stacking-shift",
      "line-stacking-strategy",
      "list-style",
      "list-style-image",
      "list-style-position",
      "list-style-type",
      "margin",
      "margin-bottom",
      "margin-left",
      "margin-right",
      "margin-top",
      "marks",
      "marquee-direction",
      "marquee-loop",
      "marquee-play-count",
      "marquee-speed",
      "marquee-style",
      "mask-clip",
      "mask-composite",
      "mask-image",
      "mask-mode",
      "mask-origin",
      "mask-position",
      "mask-repeat",
      "mask-size",
      "mask-type",
      "max-block-size",
      "max-height",
      "max-inline-size",
      "max-width",
      "min-block-size",
      "min-height",
      "min-inline-size",
      "min-width",
      "mix-blend-mode",
      "move-to",
      "nav-down",
      "nav-index",
      "nav-left",
      "nav-right",
      "nav-up",
      "object-fit",
      "object-position",
      "offset",
      "offset-anchor",
      "offset-distance",
      "offset-path",
      "offset-position",
      "offset-rotate",
      "opacity",
      "order",
      "orphans",
      "outline",
      "outline-color",
      "outline-offset",
      "outline-style",
      "outline-width",
      "overflow",
      "overflow-style",
      "overflow-wrap",
      "overflow-x",
      "overflow-y",
      "padding",
      "padding-bottom",
      "padding-left",
      "padding-right",
      "padding-top",
      "page",
      "page-break-after",
      "page-break-before",
      "page-break-inside",
      "page-policy",
      "pause",
      "pause-after",
      "pause-before",
      "perspective",
      "perspective-origin",
      "pitch",
      "pitch-range",
      "place-content",
      "place-items",
      "place-self",
      "play-during",
      "position",
      "presentation-level",
      "punctuation-trim",
      "quotes",
      "region-break-after",
      "region-break-before",
      "region-break-inside",
      "region-fragment",
      "rendering-intent",
      "resize",
      "rest",
      "rest-after",
      "rest-before",
      "richness",
      "right",
      "rotate",
      "rotation",
      "rotation-point",
      "row-gap",
      "ruby-align",
      "ruby-overhang",
      "ruby-position",
      "ruby-span",
      "scale",
      "scroll-behavior",
      "scroll-margin",
      "scroll-margin-block",
      "scroll-margin-block-end",
      "scroll-margin-block-start",
      "scroll-margin-bottom",
      "scroll-margin-inline",
      "scroll-margin-inline-end",
      "scroll-margin-inline-start",
      "scroll-margin-left",
      "scroll-margin-right",
      "scroll-margin-top",
      "scroll-padding",
      "scroll-padding-block",
      "scroll-padding-block-end",
      "scroll-padding-block-start",
      "scroll-padding-bottom",
      "scroll-padding-inline",
      "scroll-padding-inline-end",
      "scroll-padding-inline-start",
      "scroll-padding-left",
      "scroll-padding-right",
      "scroll-padding-top",
      "scroll-snap-align",
      "scroll-snap-type",
      "shape-image-threshold",
      "shape-inside",
      "shape-margin",
      "shape-outside",
      "size",
      "speak",
      "speak-as",
      "speak-header",
      "speak-numeral",
      "speak-punctuation",
      "speech-rate",
      "stress",
      "string-set",
      "tab-size",
      "table-layout",
      "target",
      "target-name",
      "target-new",
      "target-position",
      "text-align",
      "text-align-last",
      "text-combine-upright",
      "text-decoration",
      "text-decoration-color",
      "text-decoration-line",
      "text-decoration-skip",
      "text-decoration-skip-ink",
      "text-decoration-style",
      "text-emphasis",
      "text-emphasis-color",
      "text-emphasis-position",
      "text-emphasis-style",
      "text-height",
      "text-indent",
      "text-justify",
      "text-orientation",
      "text-outline",
      "text-overflow",
      "text-rendering",
      "text-shadow",
      "text-size-adjust",
      "text-space-collapse",
      "text-transform",
      "text-underline-position",
      "text-wrap",
      "top",
      "touch-action",
      "transform",
      "transform-origin",
      "transform-style",
      "transition",
      "transition-delay",
      "transition-duration",
      "transition-property",
      "transition-timing-function",
      "translate",
      "unicode-bidi",
      "user-select",
      "vertical-align",
      "visibility",
      "voice-balance",
      "voice-duration",
      "voice-family",
      "voice-pitch",
      "voice-range",
      "voice-rate",
      "voice-stress",
      "voice-volume",
      "volume",
      "white-space",
      "widows",
      "width",
      "will-change",
      "word-break",
      "word-spacing",
      "word-wrap",
      "writing-mode",
      "z-index",
      // SVG-specific
      "clip-path",
      "clip-rule",
      "mask",
      "enable-background",
      "filter",
      "flood-color",
      "flood-opacity",
      "lighting-color",
      "stop-color",
      "stop-opacity",
      "pointer-events",
      "color-interpolation",
      "color-interpolation-filters",
      "color-rendering",
      "fill",
      "fill-opacity",
      "fill-rule",
      "image-rendering",
      "marker",
      "marker-end",
      "marker-mid",
      "marker-start",
      "paint-order",
      "shape-rendering",
      "stroke",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-rendering",
      "baseline-shift",
      "dominant-baseline",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "text-anchor",
      "writing-mode"
    ];
    propertyKeywords = keySet(propertyKeywords_);
    nonStandardPropertyKeywords_ = [
      "accent-color",
      "aspect-ratio",
      "border-block",
      "border-block-color",
      "border-block-end",
      "border-block-end-color",
      "border-block-end-style",
      "border-block-end-width",
      "border-block-start",
      "border-block-start-color",
      "border-block-start-style",
      "border-block-start-width",
      "border-block-style",
      "border-block-width",
      "border-inline",
      "border-inline-color",
      "border-inline-end",
      "border-inline-end-color",
      "border-inline-end-style",
      "border-inline-end-width",
      "border-inline-start",
      "border-inline-start-color",
      "border-inline-start-style",
      "border-inline-start-width",
      "border-inline-style",
      "border-inline-width",
      "content-visibility",
      "margin-block",
      "margin-block-end",
      "margin-block-start",
      "margin-inline",
      "margin-inline-end",
      "margin-inline-start",
      "overflow-anchor",
      "overscroll-behavior",
      "padding-block",
      "padding-block-end",
      "padding-block-start",
      "padding-inline",
      "padding-inline-end",
      "padding-inline-start",
      "scroll-snap-stop",
      "scrollbar-3d-light-color",
      "scrollbar-arrow-color",
      "scrollbar-base-color",
      "scrollbar-dark-shadow-color",
      "scrollbar-face-color",
      "scrollbar-highlight-color",
      "scrollbar-shadow-color",
      "scrollbar-track-color",
      "searchfield-cancel-button",
      "searchfield-decoration",
      "searchfield-results-button",
      "searchfield-results-decoration",
      "shape-inside",
      "zoom"
    ];
    nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);
    fontProperties_ = [
      "font-display",
      "font-family",
      "src",
      "unicode-range",
      "font-variant",
      "font-feature-settings",
      "font-stretch",
      "font-weight",
      "font-style"
    ];
    fontProperties = keySet(fontProperties_);
    counterDescriptors_ = [
      "additive-symbols",
      "fallback",
      "negative",
      "pad",
      "prefix",
      "range",
      "speak-as",
      "suffix",
      "symbols",
      "system"
    ];
    counterDescriptors = keySet(counterDescriptors_);
    colorKeywords_ = [
      "aliceblue",
      "antiquewhite",
      "aqua",
      "aquamarine",
      "azure",
      "beige",
      "bisque",
      "black",
      "blanchedalmond",
      "blue",
      "blueviolet",
      "brown",
      "burlywood",
      "cadetblue",
      "chartreuse",
      "chocolate",
      "coral",
      "cornflowerblue",
      "cornsilk",
      "crimson",
      "cyan",
      "darkblue",
      "darkcyan",
      "darkgoldenrod",
      "darkgray",
      "darkgreen",
      "darkgrey",
      "darkkhaki",
      "darkmagenta",
      "darkolivegreen",
      "darkorange",
      "darkorchid",
      "darkred",
      "darksalmon",
      "darkseagreen",
      "darkslateblue",
      "darkslategray",
      "darkslategrey",
      "darkturquoise",
      "darkviolet",
      "deeppink",
      "deepskyblue",
      "dimgray",
      "dimgrey",
      "dodgerblue",
      "firebrick",
      "floralwhite",
      "forestgreen",
      "fuchsia",
      "gainsboro",
      "ghostwhite",
      "gold",
      "goldenrod",
      "gray",
      "grey",
      "green",
      "greenyellow",
      "honeydew",
      "hotpink",
      "indianred",
      "indigo",
      "ivory",
      "khaki",
      "lavender",
      "lavenderblush",
      "lawngreen",
      "lemonchiffon",
      "lightblue",
      "lightcoral",
      "lightcyan",
      "lightgoldenrodyellow",
      "lightgray",
      "lightgreen",
      "lightgrey",
      "lightpink",
      "lightsalmon",
      "lightseagreen",
      "lightskyblue",
      "lightslategray",
      "lightslategrey",
      "lightsteelblue",
      "lightyellow",
      "lime",
      "limegreen",
      "linen",
      "magenta",
      "maroon",
      "mediumaquamarine",
      "mediumblue",
      "mediumorchid",
      "mediumpurple",
      "mediumseagreen",
      "mediumslateblue",
      "mediumspringgreen",
      "mediumturquoise",
      "mediumvioletred",
      "midnightblue",
      "mintcream",
      "mistyrose",
      "moccasin",
      "navajowhite",
      "navy",
      "oldlace",
      "olive",
      "olivedrab",
      "orange",
      "orangered",
      "orchid",
      "palegoldenrod",
      "palegreen",
      "paleturquoise",
      "palevioletred",
      "papayawhip",
      "peachpuff",
      "peru",
      "pink",
      "plum",
      "powderblue",
      "purple",
      "rebeccapurple",
      "red",
      "rosybrown",
      "royalblue",
      "saddlebrown",
      "salmon",
      "sandybrown",
      "seagreen",
      "seashell",
      "sienna",
      "silver",
      "skyblue",
      "slateblue",
      "slategray",
      "slategrey",
      "snow",
      "springgreen",
      "steelblue",
      "tan",
      "teal",
      "thistle",
      "tomato",
      "turquoise",
      "violet",
      "wheat",
      "white",
      "whitesmoke",
      "yellow",
      "yellowgreen"
    ];
    colorKeywords = keySet(colorKeywords_);
    valueKeywords_ = [
      "above",
      "absolute",
      "activeborder",
      "additive",
      "activecaption",
      "afar",
      "after-white-space",
      "ahead",
      "alias",
      "all",
      "all-scroll",
      "alphabetic",
      "alternate",
      "always",
      "amharic",
      "amharic-abegede",
      "antialiased",
      "appworkspace",
      "arabic-indic",
      "armenian",
      "asterisks",
      "attr",
      "auto",
      "auto-flow",
      "avoid",
      "avoid-column",
      "avoid-page",
      "avoid-region",
      "axis-pan",
      "background",
      "backwards",
      "baseline",
      "below",
      "bidi-override",
      "binary",
      "bengali",
      "blink",
      "block",
      "block-axis",
      "blur",
      "bold",
      "bolder",
      "border",
      "border-box",
      "both",
      "bottom",
      "break",
      "break-all",
      "break-word",
      "brightness",
      "bullets",
      "button",
      "buttonface",
      "buttonhighlight",
      "buttonshadow",
      "buttontext",
      "calc",
      "cambodian",
      "capitalize",
      "caps-lock-indicator",
      "caption",
      "captiontext",
      "caret",
      "cell",
      "center",
      "checkbox",
      "circle",
      "cjk-decimal",
      "cjk-earthly-branch",
      "cjk-heavenly-stem",
      "cjk-ideographic",
      "clear",
      "clip",
      "close-quote",
      "col-resize",
      "collapse",
      "color",
      "color-burn",
      "color-dodge",
      "column",
      "column-reverse",
      "compact",
      "condensed",
      "conic-gradient",
      "contain",
      "content",
      "contents",
      "content-box",
      "context-menu",
      "continuous",
      "contrast",
      "copy",
      "counter",
      "counters",
      "cover",
      "crop",
      "cross",
      "crosshair",
      "cubic-bezier",
      "currentcolor",
      "cursive",
      "cyclic",
      "darken",
      "dashed",
      "decimal",
      "decimal-leading-zero",
      "default",
      "default-button",
      "dense",
      "destination-atop",
      "destination-in",
      "destination-out",
      "destination-over",
      "devanagari",
      "difference",
      "disc",
      "discard",
      "disclosure-closed",
      "disclosure-open",
      "document",
      "dot-dash",
      "dot-dot-dash",
      "dotted",
      "double",
      "down",
      "drop-shadow",
      "e-resize",
      "ease",
      "ease-in",
      "ease-in-out",
      "ease-out",
      "element",
      "ellipse",
      "ellipsis",
      "embed",
      "end",
      "ethiopic",
      "ethiopic-abegede",
      "ethiopic-abegede-am-et",
      "ethiopic-abegede-gez",
      "ethiopic-abegede-ti-er",
      "ethiopic-abegede-ti-et",
      "ethiopic-halehame-aa-er",
      "ethiopic-halehame-aa-et",
      "ethiopic-halehame-am-et",
      "ethiopic-halehame-gez",
      "ethiopic-halehame-om-et",
      "ethiopic-halehame-sid-et",
      "ethiopic-halehame-so-et",
      "ethiopic-halehame-ti-er",
      "ethiopic-halehame-ti-et",
      "ethiopic-halehame-tig",
      "ethiopic-numeric",
      "ew-resize",
      "exclusion",
      "expanded",
      "extends",
      "extra-condensed",
      "extra-expanded",
      "fantasy",
      "fast",
      "fill",
      "fill-box",
      "fixed",
      "flat",
      "flex",
      "flex-end",
      "flex-start",
      "footnotes",
      "forwards",
      "from",
      "geometricPrecision",
      "georgian",
      "grayscale",
      "graytext",
      "grid",
      "groove",
      "gujarati",
      "gurmukhi",
      "hand",
      "hangul",
      "hangul-consonant",
      "hard-light",
      "hebrew",
      "help",
      "hidden",
      "hide",
      "higher",
      "highlight",
      "highlighttext",
      "hiragana",
      "hiragana-iroha",
      "horizontal",
      "hsl",
      "hsla",
      "hue",
      "hue-rotate",
      "icon",
      "ignore",
      "inactiveborder",
      "inactivecaption",
      "inactivecaptiontext",
      "infinite",
      "infobackground",
      "infotext",
      "inherit",
      "initial",
      "inline",
      "inline-axis",
      "inline-block",
      "inline-flex",
      "inline-grid",
      "inline-table",
      "inset",
      "inside",
      "intrinsic",
      "invert",
      "italic",
      "japanese-formal",
      "japanese-informal",
      "justify",
      "kannada",
      "katakana",
      "katakana-iroha",
      "keep-all",
      "khmer",
      "korean-hangul-formal",
      "korean-hanja-formal",
      "korean-hanja-informal",
      "landscape",
      "lao",
      "large",
      "larger",
      "left",
      "level",
      "lighter",
      "lighten",
      "line-through",
      "linear",
      "linear-gradient",
      "lines",
      "list-item",
      "listbox",
      "listitem",
      "local",
      "logical",
      "loud",
      "lower",
      "lower-alpha",
      "lower-armenian",
      "lower-greek",
      "lower-hexadecimal",
      "lower-latin",
      "lower-norwegian",
      "lower-roman",
      "lowercase",
      "ltr",
      "luminosity",
      "malayalam",
      "manipulation",
      "match",
      "matrix",
      "matrix3d",
      "media-play-button",
      "media-slider",
      "media-sliderthumb",
      "media-volume-slider",
      "media-volume-sliderthumb",
      "medium",
      "menu",
      "menulist",
      "menulist-button",
      "menutext",
      "message-box",
      "middle",
      "min-intrinsic",
      "mix",
      "mongolian",
      "monospace",
      "move",
      "multiple",
      "multiple_mask_images",
      "multiply",
      "myanmar",
      "n-resize",
      "narrower",
      "ne-resize",
      "nesw-resize",
      "no-close-quote",
      "no-drop",
      "no-open-quote",
      "no-repeat",
      "none",
      "normal",
      "not-allowed",
      "nowrap",
      "ns-resize",
      "numbers",
      "numeric",
      "nw-resize",
      "nwse-resize",
      "oblique",
      "octal",
      "opacity",
      "open-quote",
      "optimizeLegibility",
      "optimizeSpeed",
      "oriya",
      "oromo",
      "outset",
      "outside",
      "outside-shape",
      "overlay",
      "overline",
      "padding",
      "padding-box",
      "painted",
      "page",
      "paused",
      "persian",
      "perspective",
      "pinch-zoom",
      "plus-darker",
      "plus-lighter",
      "pointer",
      "polygon",
      "portrait",
      "pre",
      "pre-line",
      "pre-wrap",
      "preserve-3d",
      "progress",
      "push-button",
      "radial-gradient",
      "radio",
      "read-only",
      "read-write",
      "read-write-plaintext-only",
      "rectangle",
      "region",
      "relative",
      "repeat",
      "repeating-linear-gradient",
      "repeating-radial-gradient",
      "repeating-conic-gradient",
      "repeat-x",
      "repeat-y",
      "reset",
      "reverse",
      "rgb",
      "rgba",
      "ridge",
      "right",
      "rotate",
      "rotate3d",
      "rotateX",
      "rotateY",
      "rotateZ",
      "round",
      "row",
      "row-resize",
      "row-reverse",
      "rtl",
      "run-in",
      "running",
      "s-resize",
      "sans-serif",
      "saturate",
      "saturation",
      "scale",
      "scale3d",
      "scaleX",
      "scaleY",
      "scaleZ",
      "screen",
      "scroll",
      "scrollbar",
      "scroll-position",
      "se-resize",
      "searchfield",
      "searchfield-cancel-button",
      "searchfield-decoration",
      "searchfield-results-button",
      "searchfield-results-decoration",
      "self-start",
      "self-end",
      "semi-condensed",
      "semi-expanded",
      "separate",
      "sepia",
      "serif",
      "show",
      "sidama",
      "simp-chinese-formal",
      "simp-chinese-informal",
      "single",
      "skew",
      "skewX",
      "skewY",
      "skip-white-space",
      "slide",
      "slider-horizontal",
      "slider-vertical",
      "sliderthumb-horizontal",
      "sliderthumb-vertical",
      "slow",
      "small",
      "small-caps",
      "small-caption",
      "smaller",
      "soft-light",
      "solid",
      "somali",
      "source-atop",
      "source-in",
      "source-out",
      "source-over",
      "space",
      "space-around",
      "space-between",
      "space-evenly",
      "spell-out",
      "square",
      "square-button",
      "start",
      "static",
      "status-bar",
      "stretch",
      "stroke",
      "stroke-box",
      "sub",
      "subpixel-antialiased",
      "svg_masks",
      "super",
      "sw-resize",
      "symbolic",
      "symbols",
      "system-ui",
      "table",
      "table-caption",
      "table-cell",
      "table-column",
      "table-column-group",
      "table-footer-group",
      "table-header-group",
      "table-row",
      "table-row-group",
      "tamil",
      "telugu",
      "text",
      "text-bottom",
      "text-top",
      "textarea",
      "textfield",
      "thai",
      "thick",
      "thin",
      "threeddarkshadow",
      "threedface",
      "threedhighlight",
      "threedlightshadow",
      "threedshadow",
      "tibetan",
      "tigre",
      "tigrinya-er",
      "tigrinya-er-abegede",
      "tigrinya-et",
      "tigrinya-et-abegede",
      "to",
      "top",
      "trad-chinese-formal",
      "trad-chinese-informal",
      "transform",
      "translate",
      "translate3d",
      "translateX",
      "translateY",
      "translateZ",
      "transparent",
      "ultra-condensed",
      "ultra-expanded",
      "underline",
      "unidirectional-pan",
      "unset",
      "up",
      "upper-alpha",
      "upper-armenian",
      "upper-greek",
      "upper-hexadecimal",
      "upper-latin",
      "upper-norwegian",
      "upper-roman",
      "uppercase",
      "urdu",
      "url",
      "var",
      "vertical",
      "vertical-text",
      "view-box",
      "visible",
      "visibleFill",
      "visiblePainted",
      "visibleStroke",
      "visual",
      "w-resize",
      "wait",
      "wave",
      "wider",
      "window",
      "windowframe",
      "windowtext",
      "words",
      "wrap",
      "wrap-reverse",
      "x-large",
      "x-small",
      "xor",
      "xx-large",
      "xx-small"
    ];
    valueKeywords = keySet(valueKeywords_);
    allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);
    keywords6 = {
      properties: propertyKeywords_,
      colors: colorKeywords_,
      fonts: fontProperties_,
      values: valueKeywords_,
      all: allWords
    };
    defaults5 = {
      documentTypes,
      mediaTypes,
      mediaFeatures,
      mediaValueKeywords,
      propertyKeywords,
      nonStandardPropertyKeywords,
      fontProperties,
      counterDescriptors,
      colorKeywords,
      valueKeywords,
      tokenHooks: {
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenCComment;
          return tokenCComment(stream, state);
        }
      }
    };
    css2 = mkCSS({ name: "css" });
    sCSS = mkCSS({
      name: "scss",
      mediaTypes,
      mediaFeatures,
      mediaValueKeywords,
      propertyKeywords,
      nonStandardPropertyKeywords,
      colorKeywords,
      valueKeywords,
      fontProperties,
      allowNested: true,
      lineComment: "//",
      tokenHooks: {
        "/": function(stream, state) {
          if (stream.eat("/")) {
            stream.skipToEnd();
            return ["comment", "comment"];
          } else if (stream.eat("*")) {
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          } else {
            return ["operator", "operator"];
          }
        },
        ":": function(stream) {
          if (stream.match(/^\s*\{/, false))
            return [null, null];
          return false;
        },
        "$": function(stream) {
          stream.match(/^[\w-]+/);
          if (stream.match(/^\s*:/, false))
            return ["def", "variable-definition"];
          return ["variableName.special", "variable"];
        },
        "#": function(stream) {
          if (!stream.eat("{")) return false;
          return [null, "interpolation"];
        }
      }
    });
    less2 = mkCSS({
      name: "less",
      mediaTypes,
      mediaFeatures,
      mediaValueKeywords,
      propertyKeywords,
      nonStandardPropertyKeywords,
      colorKeywords,
      valueKeywords,
      fontProperties,
      allowNested: true,
      lineComment: "//",
      tokenHooks: {
        "/": function(stream, state) {
          if (stream.eat("/")) {
            stream.skipToEnd();
            return ["comment", "comment"];
          } else if (stream.eat("*")) {
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          } else {
            return ["operator", "operator"];
          }
        },
        "@": function(stream) {
          if (stream.eat("{")) return [null, "interpolation"];
          if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, false)) return false;
          stream.eatWhile(/[\w\\\-]/);
          if (stream.match(/^\s*:/, false))
            return ["def", "variable-definition"];
          return ["variableName", "variable"];
        },
        "&": function() {
          return ["atom", "atom"];
        }
      }
    });
    gss = mkCSS({
      name: "gss",
      documentTypes,
      mediaTypes,
      mediaFeatures,
      propertyKeywords,
      nonStandardPropertyKeywords,
      fontProperties,
      counterDescriptors,
      colorKeywords,
      valueKeywords,
      supportsAtComponent: true,
      tokenHooks: {
        "/": function(stream, state) {
          if (!stream.eat("*")) return false;
          state.tokenize = tokenCComment;
          return tokenCComment(stream, state);
        }
      }
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/cmake.js
var cmake_exports = {};
__export(cmake_exports, {
  cmake: () => cmake
});
function tokenString(stream, state) {
  var current, prev, found_var = false;
  while (!stream.eol() && (current = stream.next()) != state.pending) {
    if (current === "$" && prev != "\\" && state.pending == '"') {
      found_var = true;
      break;
    }
    prev = current;
  }
  if (found_var) {
    stream.backUp(1);
  }
  if (current == state.pending) {
    state.continueString = false;
  } else {
    state.continueString = true;
  }
  return "string";
}
function tokenize(stream, state) {
  var ch2 = stream.next();
  if (ch2 === "$") {
    if (stream.match(variable_regex)) {
      return "variableName.special";
    }
    return "variable";
  }
  if (state.continueString) {
    stream.backUp(1);
    return tokenString(stream, state);
  }
  if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
    stream.backUp(1);
    return "def";
  }
  if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 == "'" || ch2 == '"') {
    state.pending = ch2;
    return tokenString(stream, state);
  }
  if (ch2 == "(" || ch2 == ")") {
    return "bracket";
  }
  if (ch2.match(/[0-9]/)) {
    return "number";
  }
  stream.eatWhile(/[\w-]/);
  return null;
}
var variable_regex, cmake;
var init_cmake = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/cmake.js"() {
    variable_regex = /({)?[a-zA-Z0-9_]+(})?/;
    cmake = {
      name: "cmake",
      startState: function() {
        var state = {};
        state.inDefinition = false;
        state.inInclude = false;
        state.continueString = false;
        state.pending = false;
        return state;
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return tokenize(stream, state);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/coffeescript.js
var coffeescript_exports = {};
__export(coffeescript_exports, {
  coffeeScript: () => coffeeScript
});
function wordRegexp(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b");
}
function tokenBase(stream, state) {
  if (stream.sol()) {
    if (state.scope.align === null) state.scope.align = false;
    var scopeOffset = state.scope.offset;
    if (stream.eatSpace()) {
      var lineOffset = stream.indentation();
      if (lineOffset > scopeOffset && state.scope.type == "coffee") {
        return "indent";
      } else if (lineOffset < scopeOffset) {
        return "dedent";
      }
      return null;
    } else {
      if (scopeOffset > 0) {
        dedent3(stream, state);
      }
    }
  }
  if (stream.eatSpace()) {
    return null;
  }
  var ch2 = stream.peek();
  if (stream.match("####")) {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match("###")) {
    state.tokenize = longComment;
    return state.tokenize(stream, state);
  }
  if (ch2 === "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^-?[0-9\.]/, false)) {
    var floatLiteral = false;
    if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
      floatLiteral = true;
    }
    if (stream.match(/^-?\d+\.\d*/)) {
      floatLiteral = true;
    }
    if (stream.match(/^-?\.\d+/)) {
      floatLiteral = true;
    }
    if (floatLiteral) {
      if (stream.peek() == ".") {
        stream.backUp(1);
      }
      return "number";
    }
    var intLiteral = false;
    if (stream.match(/^-?0x[0-9a-f]+/i)) {
      intLiteral = true;
    }
    if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
      intLiteral = true;
    }
    if (stream.match(/^-?0(?![\dx])/i)) {
      intLiteral = true;
    }
    if (intLiteral) {
      return "number";
    }
  }
  if (stream.match(stringPrefixes)) {
    state.tokenize = tokenFactory(stream.current(), false, "string");
    return state.tokenize(stream, state);
  }
  if (stream.match(regexPrefixes)) {
    if (stream.current() != "/" || stream.match(/^.*\//, false)) {
      state.tokenize = tokenFactory(stream.current(), true, "string.special");
      return state.tokenize(stream, state);
    } else {
      stream.backUp(1);
    }
  }
  if (stream.match(operators) || stream.match(wordOperators)) {
    return "operator";
  }
  if (stream.match(delimiters)) {
    return "punctuation";
  }
  if (stream.match(constants)) {
    return "atom";
  }
  if (stream.match(atProp) || state.prop && stream.match(identifiers3)) {
    return "property";
  }
  if (stream.match(keywords7)) {
    return "keyword";
  }
  if (stream.match(identifiers3)) {
    return "variable";
  }
  stream.next();
  return ERRORCLASS;
}
function tokenFactory(delimiter2, singleline, outclass) {
  return function(stream, state) {
    while (!stream.eol()) {
      stream.eatWhile(/[^'"\/\\]/);
      if (stream.eat("\\")) {
        stream.next();
        if (singleline && stream.eol()) {
          return outclass;
        }
      } else if (stream.match(delimiter2)) {
        state.tokenize = tokenBase;
        return outclass;
      } else {
        stream.eat(/['"\/]/);
      }
    }
    if (singleline) {
      state.tokenize = tokenBase;
    }
    return outclass;
  };
}
function longComment(stream, state) {
  while (!stream.eol()) {
    stream.eatWhile(/[^#]/);
    if (stream.match("###")) {
      state.tokenize = tokenBase;
      break;
    }
    stream.eatWhile("#");
  }
  return "comment";
}
function indent3(stream, state, type7 = "coffee") {
  var offset = 0, align = false, alignOffset = null;
  for (var scope = state.scope; scope; scope = scope.prev) {
    if (scope.type === "coffee" || scope.type == "}") {
      offset = scope.offset + stream.indentUnit;
      break;
    }
  }
  if (type7 !== "coffee") {
    align = null;
    alignOffset = stream.column() + stream.current().length;
  } else if (state.scope.align) {
    state.scope.align = false;
  }
  state.scope = {
    offset,
    type: type7,
    prev: state.scope,
    align,
    alignOffset
  };
}
function dedent3(stream, state) {
  if (!state.scope.prev) return;
  if (state.scope.type === "coffee") {
    var _indent = stream.indentation();
    var matched = false;
    for (var scope = state.scope; scope; scope = scope.prev) {
      if (_indent === scope.offset) {
        matched = true;
        break;
      }
    }
    if (!matched) {
      return true;
    }
    while (state.scope.prev && state.scope.offset !== _indent) {
      state.scope = state.scope.prev;
    }
    return false;
  } else {
    state.scope = state.scope.prev;
    return false;
  }
}
function tokenLexer(stream, state) {
  var style2 = state.tokenize(stream, state);
  var current = stream.current();
  if (current === "return") {
    state.dedent = true;
  }
  if ((current === "->" || current === "=>") && stream.eol() || style2 === "indent") {
    indent3(stream, state);
  }
  var delimiter_index = "[({".indexOf(current);
  if (delimiter_index !== -1) {
    indent3(stream, state, "])}".slice(delimiter_index, delimiter_index + 1));
  }
  if (indentKeywords.exec(current)) {
    indent3(stream, state);
  }
  if (current == "then") {
    dedent3(stream, state);
  }
  if (style2 === "dedent") {
    if (dedent3(stream, state)) {
      return ERRORCLASS;
    }
  }
  delimiter_index = "])}".indexOf(current);
  if (delimiter_index !== -1) {
    while (state.scope.type == "coffee" && state.scope.prev)
      state.scope = state.scope.prev;
    if (state.scope.type == current)
      state.scope = state.scope.prev;
  }
  if (state.dedent && stream.eol()) {
    if (state.scope.type == "coffee" && state.scope.prev)
      state.scope = state.scope.prev;
    state.dedent = false;
  }
  return style2 == "indent" || style2 == "dedent" ? null : style2;
}
var ERRORCLASS, operators, delimiters, identifiers3, atProp, wordOperators, indentKeywords, commonKeywords, keywords7, stringPrefixes, regexPrefixes, commonConstants, constants, coffeeScript;
var init_coffeescript = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/coffeescript.js"() {
    ERRORCLASS = "error";
    operators = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
    delimiters = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
    identifiers3 = /^[_A-Za-z$][_A-Za-z$0-9]*/;
    atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;
    wordOperators = wordRegexp([
      "and",
      "or",
      "not",
      "is",
      "isnt",
      "in",
      "instanceof",
      "typeof"
    ]);
    indentKeywords = [
      "for",
      "while",
      "loop",
      "if",
      "unless",
      "else",
      "switch",
      "try",
      "catch",
      "finally",
      "class"
    ];
    commonKeywords = [
      "break",
      "by",
      "continue",
      "debugger",
      "delete",
      "do",
      "in",
      "of",
      "new",
      "return",
      "then",
      "this",
      "@",
      "throw",
      "when",
      "until",
      "extends"
    ];
    keywords7 = wordRegexp(indentKeywords.concat(commonKeywords));
    indentKeywords = wordRegexp(indentKeywords);
    stringPrefixes = /^('{3}|\"{3}|['\"])/;
    regexPrefixes = /^(\/{3}|\/)/;
    commonConstants = ["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"];
    constants = wordRegexp(commonConstants);
    coffeeScript = {
      name: "coffeescript",
      startState: function() {
        return {
          tokenize: tokenBase,
          scope: { offset: 0, type: "coffee", prev: null, align: false },
          prop: false,
          dedent: 0
        };
      },
      token: function(stream, state) {
        var fillAlign = state.scope.align === null && state.scope;
        if (fillAlign && stream.sol()) fillAlign.align = false;
        var style2 = tokenLexer(stream, state);
        if (style2 && style2 != "comment") {
          if (fillAlign) fillAlign.align = true;
          state.prop = style2 == "punctuation" && stream.current() == ".";
        }
        return style2;
      },
      indent: function(state, text5) {
        if (state.tokenize != tokenBase) return 0;
        var scope = state.scope;
        var closer = text5 && "])}".indexOf(text5.charAt(0)) > -1;
        if (closer) while (scope.type == "coffee" && scope.prev) scope = scope.prev;
        var closes = closer && scope.type === text5.charAt(0);
        if (scope.align)
          return scope.alignOffset - (closes ? 1 : 0);
        else
          return (closes ? scope.prev : scope).offset;
      },
      languageData: {
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/commonlisp.js
var commonlisp_exports = {};
__export(commonlisp_exports, {
  commonLisp: () => commonLisp
});
function readSym(stream) {
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "\\") stream.next();
    else if (!symbol.test(ch2)) {
      stream.backUp(1);
      break;
    }
  }
  return stream.current();
}
function base4(stream, state) {
  if (stream.eatSpace()) {
    type = "ws";
    return null;
  }
  if (stream.match(numLiteral)) return "number";
  var ch2 = stream.next();
  if (ch2 == "\\") ch2 = stream.next();
  if (ch2 == '"') return (state.tokenize = inString3)(stream, state);
  else if (ch2 == "(") {
    type = "open";
    return "bracket";
  } else if (ch2 == ")") {
    type = "close";
    return "bracket";
  } else if (ch2 == ";") {
    stream.skipToEnd();
    type = "ws";
    return "comment";
  } else if (/['`,@]/.test(ch2)) return null;
  else if (ch2 == "|") {
    if (stream.skipTo("|")) {
      stream.next();
      return "variableName";
    } else {
      stream.skipToEnd();
      return "error";
    }
  } else if (ch2 == "#") {
    var ch2 = stream.next();
    if (ch2 == "(") {
      type = "open";
      return "bracket";
    } else if (/[+\-=\.']/.test(ch2)) return null;
    else if (/\d/.test(ch2) && stream.match(/^\d*#/)) return null;
    else if (ch2 == "|") return (state.tokenize = inComment2)(stream, state);
    else if (ch2 == ":") {
      readSym(stream);
      return "meta";
    } else if (ch2 == "\\") {
      stream.next();
      readSym(stream);
      return "string.special";
    } else return "error";
  } else {
    var name2 = readSym(stream);
    if (name2 == ".") return null;
    type = "symbol";
    if (name2 == "nil" || name2 == "t" || name2.charAt(0) == ":") return "atom";
    if (state.lastType == "open" && (specialForm2.test(name2) || assumeBody.test(name2))) return "keyword";
    if (name2.charAt(0) == "&") return "variableName.special";
    return "variableName";
  }
}
function inString3(stream, state) {
  var escaped = false, next2;
  while (next2 = stream.next()) {
    if (next2 == '"' && !escaped) {
      state.tokenize = base4;
      break;
    }
    escaped = !escaped && next2 == "\\";
  }
  return "string";
}
function inComment2(stream, state) {
  var next2, last;
  while (next2 = stream.next()) {
    if (next2 == "#" && last == "|") {
      state.tokenize = base4;
      break;
    }
    last = next2;
  }
  type = "ws";
  return "comment";
}
var specialForm2, assumeBody, numLiteral, symbol, type, commonLisp;
var init_commonlisp = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/commonlisp.js"() {
    specialForm2 = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
    assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
    numLiteral = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
    symbol = /[^\s'`,@()\[\]";]/;
    commonLisp = {
      name: "commonlisp",
      startState: function() {
        return { ctx: { prev: null, start: 0, indentTo: 0 }, lastType: null, tokenize: base4 };
      },
      token: function(stream, state) {
        if (stream.sol() && typeof state.ctx.indentTo != "number")
          state.ctx.indentTo = state.ctx.start + 1;
        type = null;
        var style2 = state.tokenize(stream, state);
        if (type != "ws") {
          if (state.ctx.indentTo == null) {
            if (type == "symbol" && assumeBody.test(stream.current()))
              state.ctx.indentTo = state.ctx.start + stream.indentUnit;
            else
              state.ctx.indentTo = "next";
          } else if (state.ctx.indentTo == "next") {
            state.ctx.indentTo = stream.column();
          }
          state.lastType = type;
        }
        if (type == "open") state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
        else if (type == "close") state.ctx = state.ctx.prev || state.ctx;
        return style2;
      },
      indent: function(state) {
        var i = state.ctx.indentTo;
        return typeof i == "number" ? i : state.ctx.start + 1;
      },
      languageData: {
        commentTokens: { line: ";;", block: { open: "#|", close: "|#" } },
        closeBrackets: { brackets: ["(", "[", "{", '"'] }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/cypher.js
var cypher_exports = {};
__export(cypher_exports, {
  cypher: () => cypher
});
var wordRegexp2, tokenBase2, pushContext2, popContext2, curPunc, funcs, preds, keywords8, systemKeywords, operatorChars, cypher;
var init_cypher = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/cypher.js"() {
    wordRegexp2 = function(words22) {
      return new RegExp("^(?:" + words22.join("|") + ")$", "i");
    };
    tokenBase2 = function(stream) {
      curPunc = null;
      var ch2 = stream.next();
      if (ch2 === '"') {
        stream.match(/^.*?"/);
        return "string";
      }
      if (ch2 === "'") {
        stream.match(/^.*?'/);
        return "string";
      }
      if (/[{}\(\),\.;\[\]]/.test(ch2)) {
        curPunc = ch2;
        return "punctuation";
      } else if (ch2 === "/" && stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      } else if (operatorChars.test(ch2)) {
        stream.eatWhile(operatorChars);
        return null;
      } else {
        stream.eatWhile(/[_\w\d]/);
        if (stream.eat(":")) {
          stream.eatWhile(/[\w\d_\-]/);
          return "atom";
        }
        var word = stream.current();
        if (funcs.test(word)) return "builtin";
        if (preds.test(word)) return "def";
        if (keywords8.test(word) || systemKeywords.test(word)) return "keyword";
        return "variable";
      }
    };
    pushContext2 = function(state, type7, col) {
      return state.context = {
        prev: state.context,
        indent: state.indent,
        col,
        type: type7
      };
    };
    popContext2 = function(state) {
      state.indent = state.context.indent;
      return state.context = state.context.prev;
    };
    funcs = wordRegexp2(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);
    preds = wordRegexp2(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);
    keywords8 = wordRegexp2(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]);
    systemKeywords = wordRegexp2(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]);
    operatorChars = /[*+\-<>=&|~%^]/;
    cypher = {
      name: "cypher",
      startState: function() {
        return {
          tokenize: tokenBase2,
          context: null,
          indent: 0,
          col: 0
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null) {
            state.context.align = false;
          }
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) {
          return null;
        }
        var style2 = state.tokenize(stream, state);
        if (style2 !== "comment" && state.context && state.context.align == null && state.context.type !== "pattern") {
          state.context.align = true;
        }
        if (curPunc === "(") {
          pushContext2(state, ")", stream.column());
        } else if (curPunc === "[") {
          pushContext2(state, "]", stream.column());
        } else if (curPunc === "{") {
          pushContext2(state, "}", stream.column());
        } else if (/[\]\}\)]/.test(curPunc)) {
          while (state.context && state.context.type === "pattern") {
            popContext2(state);
          }
          if (state.context && curPunc === state.context.type) {
            popContext2(state);
          }
        } else if (curPunc === "." && state.context && state.context.type === "pattern") {
          popContext2(state);
        } else if (/atom|string|variable/.test(style2) && state.context) {
          if (/[\}\]]/.test(state.context.type)) {
            pushContext2(state, "pattern", stream.column());
          } else if (state.context.type === "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar)) {
          while (context && context.type === "pattern") {
            context = context.prev;
          }
        }
        var closing4 = context && firstChar === context.type;
        if (!context) return 0;
        if (context.type === "keywords") return null;
        if (context.align) return context.col + (closing4 ? 0 : 1);
        return context.indent + (closing4 ? 0 : cx2.unit);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/python.js
var python_exports = {};
__export(python_exports, {
  cython: () => cython,
  mkPython: () => mkPython,
  python: () => python2
});
function wordRegexp3(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b");
}
function top2(state) {
  return state.scopes[state.scopes.length - 1];
}
function mkPython(parserConf) {
  var ERRORCLASS3 = "error";
  var delimiters3 = parserConf.delimiters || parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.\\]/;
  var operators8 = [
    parserConf.singleOperators,
    parserConf.doubleOperators,
    parserConf.doubleDelimiters,
    parserConf.tripleDelimiters,
    parserConf.operators || /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/
  ];
  for (var i = 0; i < operators8.length; i++) if (!operators8[i]) operators8.splice(i--, 1);
  var hangingIndent = parserConf.hangingIndent;
  var myKeywords = commonKeywords2, myBuiltins = commonBuiltins;
  if (parserConf.extra_keywords != void 0)
    myKeywords = myKeywords.concat(parserConf.extra_keywords);
  if (parserConf.extra_builtins != void 0)
    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);
  var py3 = !(parserConf.version && Number(parserConf.version) < 3);
  if (py3) {
    var identifiers12 = parserConf.identifiers || /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
    myKeywords = myKeywords.concat(["nonlocal", "None", "aiter", "anext", "async", "await", "breakpoint", "match", "case"]);
    myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
    var stringPrefixes4 = new RegExp(`^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|"{3}|['"]))`, "i");
  } else {
    var identifiers12 = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;
    myKeywords = myKeywords.concat(["exec", "print"]);
    myBuiltins = myBuiltins.concat([
      "apply",
      "basestring",
      "buffer",
      "cmp",
      "coerce",
      "execfile",
      "file",
      "intern",
      "long",
      "raw_input",
      "reduce",
      "reload",
      "unichr",
      "unicode",
      "xrange",
      "None"
    ]);
    var stringPrefixes4 = new RegExp(`^(([rubf]|(ur)|(br))?('{3}|"{3}|['"]))`, "i");
  }
  var keywords49 = wordRegexp3(myKeywords);
  var builtins11 = wordRegexp3(myBuiltins);
  function tokenBase48(stream, state) {
    var sol = stream.sol() && state.lastToken != "\\";
    if (sol) state.indent = stream.indentation();
    if (sol && top2(state).type == "py") {
      var scopeOffset = top2(state).offset;
      if (stream.eatSpace()) {
        var lineOffset = stream.indentation();
        if (lineOffset > scopeOffset)
          pushPyScope(stream, state);
        else if (lineOffset < scopeOffset && dedent5(stream, state) && stream.peek() != "#")
          state.errorToken = true;
        return null;
      } else {
        var style2 = tokenBaseInner(stream, state);
        if (scopeOffset > 0 && dedent5(stream, state))
          style2 += " " + ERRORCLASS3;
        return style2;
      }
    }
    return tokenBaseInner(stream, state);
  }
  function tokenBaseInner(stream, state, inFormat) {
    if (stream.eatSpace()) return null;
    if (!inFormat && stream.match(/^#.*/)) return "comment";
    if (stream.match(/^[0-9\.]/, false)) {
      var floatLiteral = false;
      if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) {
        floatLiteral = true;
      }
      if (stream.match(/^[\d_]+\.\d*/)) {
        floatLiteral = true;
      }
      if (stream.match(/^\.\d+/)) {
        floatLiteral = true;
      }
      if (floatLiteral) {
        stream.eat(/J/i);
        return "number";
      }
      var intLiteral = false;
      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;
      if (stream.match(/^0b[01_]+/i)) intLiteral = true;
      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;
      if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
        stream.eat(/J/i);
        intLiteral = true;
      }
      if (stream.match(/^0(?![\dx])/i)) intLiteral = true;
      if (intLiteral) {
        stream.eat(/L/i);
        return "number";
      }
    }
    if (stream.match(stringPrefixes4)) {
      var isFmtString = stream.current().toLowerCase().indexOf("f") !== -1;
      if (!isFmtString) {
        state.tokenize = tokenStringFactory3(stream.current(), state.tokenize);
        return state.tokenize(stream, state);
      } else {
        state.tokenize = formatStringFactory(stream.current(), state.tokenize);
        return state.tokenize(stream, state);
      }
    }
    for (var i2 = 0; i2 < operators8.length; i2++)
      if (stream.match(operators8[i2])) return "operator";
    if (stream.match(delimiters3)) return "punctuation";
    if (state.lastToken == "." && stream.match(identifiers12))
      return "property";
    if (stream.match(keywords49) || stream.match(wordOperators2))
      return "keyword";
    if (stream.match(builtins11))
      return "builtin";
    if (stream.match(/^(self|cls)\b/))
      return "self";
    if (stream.match(identifiers12)) {
      if (state.lastToken == "def" || state.lastToken == "class")
        return "def";
      return "variable";
    }
    stream.next();
    return inFormat ? null : ERRORCLASS3;
  }
  function formatStringFactory(delimiter2, tokenOuter) {
    while ("rubf".indexOf(delimiter2.charAt(0).toLowerCase()) >= 0)
      delimiter2 = delimiter2.substr(1);
    var singleline = delimiter2.length == 1;
    var OUTCLASS = "string";
    function tokenNestedExpr(depth) {
      return function(stream, state) {
        var inner = tokenBaseInner(stream, state, true);
        if (inner == "punctuation") {
          if (stream.current() == "{") {
            state.tokenize = tokenNestedExpr(depth + 1);
          } else if (stream.current() == "}") {
            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);
            else state.tokenize = tokenString31;
          }
        }
        return inner;
      };
    }
    function tokenString31(stream, state) {
      while (!stream.eol()) {
        stream.eatWhile(/[^'"\{\}\\]/);
        if (stream.eat("\\")) {
          stream.next();
          if (singleline && stream.eol())
            return OUTCLASS;
        } else if (stream.match(delimiter2)) {
          state.tokenize = tokenOuter;
          return OUTCLASS;
        } else if (stream.match("{{")) {
          return OUTCLASS;
        } else if (stream.match("{", false)) {
          state.tokenize = tokenNestedExpr(0);
          if (stream.current()) return OUTCLASS;
          else return state.tokenize(stream, state);
        } else if (stream.match("}}")) {
          return OUTCLASS;
        } else if (stream.match("}")) {
          return ERRORCLASS3;
        } else {
          stream.eat(/['"]/);
        }
      }
      if (singleline) {
        if (parserConf.singleLineStringErrors)
          return ERRORCLASS3;
        else
          state.tokenize = tokenOuter;
      }
      return OUTCLASS;
    }
    tokenString31.isString = true;
    return tokenString31;
  }
  function tokenStringFactory3(delimiter2, tokenOuter) {
    while ("rubf".indexOf(delimiter2.charAt(0).toLowerCase()) >= 0)
      delimiter2 = delimiter2.substr(1);
    var singleline = delimiter2.length == 1;
    var OUTCLASS = "string";
    function tokenString31(stream, state) {
      while (!stream.eol()) {
        stream.eatWhile(/[^'"\\]/);
        if (stream.eat("\\")) {
          stream.next();
          if (singleline && stream.eol())
            return OUTCLASS;
        } else if (stream.match(delimiter2)) {
          state.tokenize = tokenOuter;
          return OUTCLASS;
        } else {
          stream.eat(/['"]/);
        }
      }
      if (singleline) {
        if (parserConf.singleLineStringErrors)
          return ERRORCLASS3;
        else
          state.tokenize = tokenOuter;
      }
      return OUTCLASS;
    }
    tokenString31.isString = true;
    return tokenString31;
  }
  function pushPyScope(stream, state) {
    while (top2(state).type != "py") state.scopes.pop();
    state.scopes.push({
      offset: top2(state).offset + stream.indentUnit,
      type: "py",
      align: null
    });
  }
  function pushBracketScope(stream, state, type7) {
    var align = stream.match(/^[\s\[\{\(]*(?:#|$)/, false) ? null : stream.column() + 1;
    state.scopes.push({
      offset: state.indent + (hangingIndent || stream.indentUnit),
      type: type7,
      align
    });
  }
  function dedent5(stream, state) {
    var indented = stream.indentation();
    while (state.scopes.length > 1 && top2(state).offset > indented) {
      if (top2(state).type != "py") return true;
      state.scopes.pop();
    }
    return top2(state).offset != indented;
  }
  function tokenLexer3(stream, state) {
    if (stream.sol()) {
      state.beginningOfLine = true;
      state.dedent = false;
    }
    var style2 = state.tokenize(stream, state);
    var current = stream.current();
    if (state.beginningOfLine && current == "@")
      return stream.match(identifiers12, false) ? "meta" : py3 ? "operator" : ERRORCLASS3;
    if (/\S/.test(current)) state.beginningOfLine = false;
    if ((style2 == "variable" || style2 == "builtin") && state.lastToken == "meta")
      style2 = "meta";
    if (current == "pass" || current == "return")
      state.dedent = true;
    if (current == "lambda") state.lambda = true;
    if (current == ":" && !state.lambda && top2(state).type == "py" && stream.match(/^\s*(?:#|$)/, false))
      pushPyScope(stream, state);
    if (current.length == 1 && !/string|comment/.test(style2)) {
      var delimiter_index = "[({".indexOf(current);
      if (delimiter_index != -1)
        pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index + 1));
      delimiter_index = "])}".indexOf(current);
      if (delimiter_index != -1) {
        if (top2(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);
        else return ERRORCLASS3;
      }
    }
    if (state.dedent && stream.eol() && top2(state).type == "py" && state.scopes.length > 1)
      state.scopes.pop();
    return style2;
  }
  return {
    name: "python",
    startState: function() {
      return {
        tokenize: tokenBase48,
        scopes: [{ offset: 0, type: "py", align: null }],
        indent: 0,
        lastToken: null,
        lambda: false,
        dedent: 0
      };
    },
    token: function(stream, state) {
      var addErr = state.errorToken;
      if (addErr) state.errorToken = false;
      var style2 = tokenLexer3(stream, state);
      if (style2 && style2 != "comment")
        state.lastToken = style2 == "keyword" || style2 == "punctuation" ? stream.current() : style2;
      if (style2 == "punctuation") style2 = null;
      if (stream.eol() && state.lambda)
        state.lambda = false;
      return addErr ? ERRORCLASS3 : style2;
    },
    indent: function(state, textAfter, cx2) {
      if (state.tokenize != tokenBase48)
        return state.tokenize.isString ? null : 0;
      var scope = top2(state);
      var closing4 = scope.type == textAfter.charAt(0) || scope.type == "py" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);
      if (scope.align != null)
        return scope.align - (closing4 ? 1 : 0);
      else
        return scope.offset - (closing4 ? hangingIndent || cx2.unit : 0);
    },
    languageData: {
      autocomplete: commonKeywords2.concat(commonBuiltins).concat(["exec", "print"]),
      indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/,
      commentTokens: { line: "#" },
      closeBrackets: { brackets: ["(", "[", "{", "'", '"', "'''", '"""'] }
    }
  };
}
var wordOperators2, commonKeywords2, commonBuiltins, words3, python2, cython;
var init_python = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/python.js"() {
    wordOperators2 = wordRegexp3(["and", "or", "not", "is"]);
    commonKeywords2 = [
      "as",
      "assert",
      "break",
      "class",
      "continue",
      "def",
      "del",
      "elif",
      "else",
      "except",
      "finally",
      "for",
      "from",
      "global",
      "if",
      "import",
      "lambda",
      "pass",
      "raise",
      "return",
      "try",
      "while",
      "with",
      "yield",
      "in",
      "False",
      "True"
    ];
    commonBuiltins = [
      "abs",
      "all",
      "any",
      "bin",
      "bool",
      "bytearray",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip",
      "__import__",
      "NotImplemented",
      "Ellipsis",
      "__debug__"
    ];
    words3 = function(str) {
      return str.split(" ");
    };
    python2 = mkPython({});
    cython = mkPython({
      extra_keywords: words3("by cdef cimport cpdef ctypedef enum except extern gil include nogil property public readonly struct union DEF IF ELIF ELSE")
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/crystal.js
var crystal_exports = {};
__export(crystal_exports, {
  crystal: () => crystal
});
function wordRegExp(words22, end2) {
  return new RegExp((end2 ? "" : "^") + "(?:" + words22.join("|") + ")" + (end2 ? "$" : "\\b"));
}
function chain(tokenize6, stream, state) {
  state.tokenize.push(tokenize6);
  return tokenize6(stream, state);
}
function tokenBase3(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  if (state.lastToken != "\\" && stream.match("{%", false)) {
    return chain(tokenMacro("%", "%"), stream, state);
  }
  if (state.lastToken != "\\" && stream.match("{{", false)) {
    return chain(tokenMacro("{", "}"), stream, state);
  }
  if (stream.peek() == "#") {
    stream.skipToEnd();
    return "comment";
  }
  var matched;
  if (stream.match(idents)) {
    stream.eat(/[?!]/);
    matched = stream.current();
    if (stream.eat(":")) {
      return "atom";
    } else if (state.lastToken == ".") {
      return "property";
    } else if (keywords9.test(matched)) {
      if (indentKeywords2.test(matched)) {
        if (!(matched == "fun" && state.blocks.indexOf("lib") >= 0) && !(matched == "def" && state.lastToken == "abstract")) {
          state.blocks.push(matched);
          state.currentIndent += 1;
        }
      } else if ((state.lastStyle == "operator" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {
        state.blocks.push(matched);
        state.currentIndent += 1;
      } else if (matched == "end") {
        state.blocks.pop();
        state.currentIndent -= 1;
      }
      if (nextTokenizer.hasOwnProperty(matched)) {
        state.tokenize.push(nextTokenizer[matched]);
      }
      return "keyword";
    } else if (atomWords.test(matched)) {
      return "atom";
    }
    return "variable";
  }
  if (stream.eat("@")) {
    if (stream.peek() == "[") {
      return chain(tokenNest("[", "]", "meta"), stream, state);
    }
    stream.eat("@");
    stream.match(idents) || stream.match(types2);
    return "propertyName";
  }
  if (stream.match(types2)) {
    return "tag";
  }
  if (stream.eat(":")) {
    if (stream.eat('"')) {
      return chain(tokenQuote('"', "atom", false), stream, state);
    } else if (stream.match(idents) || stream.match(types2) || stream.match(operators2) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {
      return "atom";
    }
    stream.eat(":");
    return "operator";
  }
  if (stream.eat('"')) {
    return chain(tokenQuote('"', "string", true), stream, state);
  }
  if (stream.peek() == "%") {
    var style2 = "string";
    var embed = true;
    var delim;
    if (stream.match("%r")) {
      style2 = "string.special";
      delim = stream.next();
    } else if (stream.match("%w")) {
      embed = false;
      delim = stream.next();
    } else if (stream.match("%q")) {
      embed = false;
      delim = stream.next();
    } else {
      if (delim = stream.match(/^%([^\w\s=])/)) {
        delim = delim[1];
      } else if (stream.match(/^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/)) {
        return "meta";
      } else if (stream.eat("%")) {
        return "operator";
      }
    }
    if (matching.hasOwnProperty(delim)) {
      delim = matching[delim];
    }
    return chain(tokenQuote(delim, style2, embed), stream, state);
  }
  if (matched = stream.match(/^<<-('?)([A-Z]\w*)\1/)) {
    return chain(tokenHereDoc(matched[2], !matched[1]), stream, state);
  }
  if (stream.eat("'")) {
    stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/);
    stream.eat("'");
    return "atom";
  }
  if (stream.eat("0")) {
    if (stream.eat("x")) {
      stream.match(/^[0-9a-fA-F_]+/);
    } else if (stream.eat("o")) {
      stream.match(/^[0-7_]+/);
    } else if (stream.eat("b")) {
      stream.match(/^[01_]+/);
    }
    return "number";
  }
  if (stream.eat(/^\d/)) {
    stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/);
    return "number";
  }
  if (stream.match(operators2)) {
    stream.eat("=");
    return "operator";
  }
  if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {
    return "operator";
  }
  if (matched = stream.match(/[({[]/, false)) {
    matched = matched[0];
    return chain(tokenNest(matched, matching[matched], null), stream, state);
  }
  if (stream.eat("\\")) {
    stream.next();
    return "meta";
  }
  stream.next();
  return null;
}
function tokenNest(begin, end2, style2, started) {
  return function(stream, state) {
    if (!started && stream.match(begin)) {
      state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end2, style2, true);
      state.currentIndent += 1;
      return style2;
    }
    var nextStyle = tokenBase3(stream, state);
    if (stream.current() === end2) {
      state.tokenize.pop();
      state.currentIndent -= 1;
      nextStyle = style2;
    }
    return nextStyle;
  };
}
function tokenMacro(begin, end2, started) {
  return function(stream, state) {
    if (!started && stream.match("{" + begin)) {
      state.currentIndent += 1;
      state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end2, true);
      return "meta";
    }
    if (stream.match(end2 + "}")) {
      state.currentIndent -= 1;
      state.tokenize.pop();
      return "meta";
    }
    return tokenBase3(stream, state);
  };
}
function tokenMacroDef(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  var matched;
  if (matched = stream.match(idents)) {
    if (matched == "def") {
      return "keyword";
    }
    stream.eat(/[?!]/);
  }
  state.tokenize.pop();
  return "def";
}
function tokenFollowIdent(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  if (stream.match(idents)) {
    stream.eat(/[!?]/);
  } else {
    stream.match(operators2) || stream.match(conditionalOperators) || stream.match(indexingOperators);
  }
  state.tokenize.pop();
  return "def";
}
function tokenFollowType(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  stream.match(types2);
  state.tokenize.pop();
  return "def";
}
function tokenQuote(end2, style2, embed) {
  return function(stream, state) {
    var escaped = false;
    while (stream.peek()) {
      if (!escaped) {
        if (stream.match("{%", false)) {
          state.tokenize.push(tokenMacro("%", "%"));
          return style2;
        }
        if (stream.match("{{", false)) {
          state.tokenize.push(tokenMacro("{", "}"));
          return style2;
        }
        if (embed && stream.match("#{", false)) {
          state.tokenize.push(tokenNest("#{", "}", "meta"));
          return style2;
        }
        var ch2 = stream.next();
        if (ch2 == end2) {
          state.tokenize.pop();
          return style2;
        }
        escaped = embed && ch2 == "\\";
      } else {
        stream.next();
        escaped = false;
      }
    }
    return style2;
  };
}
function tokenHereDoc(phrase2, embed) {
  return function(stream, state) {
    if (stream.sol()) {
      stream.eatSpace();
      if (stream.match(phrase2)) {
        state.tokenize.pop();
        return "string";
      }
    }
    var escaped = false;
    while (stream.peek()) {
      if (!escaped) {
        if (stream.match("{%", false)) {
          state.tokenize.push(tokenMacro("%", "%"));
          return "string";
        }
        if (stream.match("{{", false)) {
          state.tokenize.push(tokenMacro("{", "}"));
          return "string";
        }
        if (embed && stream.match("#{", false)) {
          state.tokenize.push(tokenNest("#{", "}", "meta"));
          return "string";
        }
        escaped = stream.next() == "\\" && embed;
      } else {
        stream.next();
        escaped = false;
      }
    }
    return "string";
  };
}
var operators2, conditionalOperators, indexingOperators, anotherOperators, idents, types2, keywords9, atomWords, indentKeywordsArray, indentKeywords2, indentExpressionKeywordsArray, indentExpressionKeywords, dedentKeywordsArray, dedentKeywords, dedentPunctualsArray, dedentPunctuals, nextTokenizer, matching, crystal;
var init_crystal = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/crystal.js"() {
    operators2 = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
    conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
    indexingOperators = /^(?:\[\][?=]?)/;
    anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
    idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
    types2 = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
    keywords9 = wordRegExp([
      "abstract",
      "alias",
      "as",
      "asm",
      "begin",
      "break",
      "case",
      "class",
      "def",
      "do",
      "else",
      "elsif",
      "end",
      "ensure",
      "enum",
      "extend",
      "for",
      "fun",
      "if",
      "include",
      "instance_sizeof",
      "lib",
      "macro",
      "module",
      "next",
      "of",
      "out",
      "pointerof",
      "private",
      "protected",
      "rescue",
      "return",
      "require",
      "select",
      "sizeof",
      "struct",
      "super",
      "then",
      "type",
      "typeof",
      "uninitialized",
      "union",
      "unless",
      "until",
      "when",
      "while",
      "with",
      "yield",
      "__DIR__",
      "__END_LINE__",
      "__FILE__",
      "__LINE__"
    ]);
    atomWords = wordRegExp(["true", "false", "nil", "self"]);
    indentKeywordsArray = [
      "def",
      "fun",
      "macro",
      "class",
      "module",
      "struct",
      "lib",
      "enum",
      "union",
      "do",
      "for"
    ];
    indentKeywords2 = wordRegExp(indentKeywordsArray);
    indentExpressionKeywordsArray = ["if", "unless", "case", "while", "until", "begin", "then"];
    indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);
    dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
    dedentKeywords = wordRegExp(dedentKeywordsArray);
    dedentPunctualsArray = ["\\)", "\\}", "\\]"];
    dedentPunctuals = new RegExp("^(?:" + dedentPunctualsArray.join("|") + ")$");
    nextTokenizer = {
      "def": tokenFollowIdent,
      "fun": tokenFollowIdent,
      "macro": tokenMacroDef,
      "class": tokenFollowType,
      "module": tokenFollowType,
      "struct": tokenFollowType,
      "lib": tokenFollowType,
      "enum": tokenFollowType,
      "union": tokenFollowType
    };
    matching = { "[": "]", "{": "}", "(": ")", "<": ">" };
    crystal = {
      name: "crystal",
      startState: function() {
        return {
          tokenize: [tokenBase3],
          currentIndent: 0,
          lastToken: null,
          lastStyle: null,
          blocks: []
        };
      },
      token: function(stream, state) {
        var style2 = state.tokenize[state.tokenize.length - 1](stream, state);
        var token = stream.current();
        if (style2 && style2 != "comment") {
          state.lastToken = token;
          state.lastStyle = style2;
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        textAfter = textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, "");
        if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {
          return cx2.unit * (state.currentIndent - 1);
        }
        return cx2.unit * state.currentIndent;
      },
      languageData: {
        indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/d.js
var d_exports = {};
__export(d_exports, {
  d: () => d
});
function words4(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function tokenBase4(stream, state) {
  var ch2 = stream.next();
  if (hooks[ch2]) {
    var result = hooks[ch2](stream, state);
    if (result !== false) return result;
  }
  if (ch2 == '"' || ch2 == "'" || ch2 == "`") {
    state.tokenize = tokenString2(ch2);
    return state.tokenize(stream, state);
  }
  if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
    curPunc2 = ch2;
    return null;
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  if (ch2 == "/") {
    if (stream.eat("+")) {
      state.tokenize = tokenNestedComment2;
      return tokenNestedComment2(stream, state);
    }
    if (stream.eat("*")) {
      state.tokenize = tokenComment;
      return tokenComment(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar.test(ch2)) {
    stream.eatWhile(isOperatorChar);
    return "operator";
  }
  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
  var cur2 = stream.current();
  if (keywords10.propertyIsEnumerable(cur2)) {
    if (blockKeywords.propertyIsEnumerable(cur2)) curPunc2 = "newstatement";
    return "keyword";
  }
  if (builtin.propertyIsEnumerable(cur2)) {
    if (blockKeywords.propertyIsEnumerable(cur2)) curPunc2 = "newstatement";
    return "builtin";
  }
  if (atoms4.propertyIsEnumerable(cur2)) return "atom";
  return "variable";
}
function tokenString2(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !(escaped || multiLineStrings))
      state.tokenize = null;
    return "string";
  };
}
function tokenComment(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenNestedComment2(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "+";
  }
  return "comment";
}
function Context5(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext3(state, col, type7) {
  var indent7 = state.indented;
  if (state.context && state.context.type == "statement")
    indent7 = state.context.indented;
  return state.context = new Context5(indent7, col, type7, null, state.context);
}
function popContext3(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var blockKeywordsStr, parserConfig, statementIndentUnit, keywords10, builtin, blockKeywords, atoms4, hooks, multiLineStrings, isOperatorChar, curPunc2, d;
var init_d = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/d.js"() {
    blockKeywordsStr = "body catch class do else enum for foreach foreach_reverse if in interface mixin out scope struct switch try union unittest version while with";
    parserConfig = {
      keywords: words4("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue debug default delegate delete deprecated export extern final finally function goto immutable import inout invariant is lazy macro module new nothrow override package pragma private protected public pure ref return shared short static super synchronized template this throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " + blockKeywordsStr),
      blockKeywords: words4(blockKeywordsStr),
      builtin: words4("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
      atoms: words4("exit failure success true false null"),
      hooks: {
        "@": function(stream, _state) {
          stream.eatWhile(/[\w\$_]/);
          return "meta";
        }
      }
    };
    statementIndentUnit = parserConfig.statementIndentUnit;
    keywords10 = parserConfig.keywords;
    builtin = parserConfig.builtin;
    blockKeywords = parserConfig.blockKeywords;
    atoms4 = parserConfig.atoms;
    hooks = parserConfig.hooks;
    multiLineStrings = parserConfig.multiLineStrings;
    isOperatorChar = /[+\-*&%=<>!?|\/]/;
    d = {
      name: "d",
      startState: function(indentUnit2) {
        return {
          tokenize: null,
          context: new Context5(-indentUnit2, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc2 = null;
        var style2 = (state.tokenize || tokenBase4)(stream, state);
        if (style2 == "comment" || style2 == "meta") return style2;
        if (ctx.align == null) ctx.align = true;
        if ((curPunc2 == ";" || curPunc2 == ":" || curPunc2 == ",") && ctx.type == "statement") popContext3(state);
        else if (curPunc2 == "{") pushContext3(state, stream.column(), "}");
        else if (curPunc2 == "[") pushContext3(state, stream.column(), "]");
        else if (curPunc2 == "(") pushContext3(state, stream.column(), ")");
        else if (curPunc2 == "}") {
          while (ctx.type == "statement") ctx = popContext3(state);
          if (ctx.type == "}") ctx = popContext3(state);
          while (ctx.type == "statement") ctx = popContext3(state);
        } else if (curPunc2 == ctx.type) popContext3(state);
        else if ((ctx.type == "}" || ctx.type == "top") && curPunc2 != ";" || ctx.type == "statement" && curPunc2 == "newstatement")
          pushContext3(state, stream.column(), "statement");
        state.startOfLine = false;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase4 && state.tokenize != null) return null;
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
        var closing4 = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx2.unit);
        else if (ctx.align) return ctx.column + (closing4 ? 0 : 1);
        else return ctx.indented + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/diff.js
var diff_exports = {};
__export(diff_exports, {
  diff: () => diff
});
var TOKEN_NAMES, diff;
var init_diff = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/diff.js"() {
    TOKEN_NAMES = {
      "+": "inserted",
      "-": "deleted",
      "@": "meta"
    };
    diff = {
      name: "diff",
      token: function(stream) {
        var tw_pos = stream.string.search(/[\t ]+?$/);
        if (!stream.sol() || tw_pos === 0) {
          stream.skipToEnd();
          return ("error " + (TOKEN_NAMES[stream.string.charAt(0)] || "")).replace(/ $/, "");
        }
        var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();
        if (tw_pos === -1) {
          stream.skipToEnd();
        } else {
          stream.pos = tw_pos;
        }
        return token_name;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/simple-mode.js
function simpleMode(states2) {
  ensureState(states2, "start");
  var states_ = {}, meta2 = states2.languageData || {}, hasIndentation = false;
  for (var state in states2) if (state != meta2 && states2.hasOwnProperty(state)) {
    var list2 = states_[state] = [], orig = states2[state];
    for (var i = 0; i < orig.length; i++) {
      var data2 = orig[i];
      list2.push(new Rule2(data2, states2));
      if (data2.indent || data2.dedent) hasIndentation = true;
    }
  }
  return {
    name: meta2.name,
    startState: function() {
      return { state: "start", pending: null, indent: hasIndentation ? [] : null };
    },
    copyState: function(state2) {
      var s = { state: state2.state, pending: state2.pending, indent: state2.indent && state2.indent.slice(0) };
      if (state2.stack)
        s.stack = state2.stack.slice(0);
      return s;
    },
    token: tokenFunction(states_),
    indent: indentFunction(states_, meta2),
    mergeTokens: meta2.mergeTokens,
    languageData: meta2
  };
}
function ensureState(states2, name2) {
  if (!states2.hasOwnProperty(name2))
    throw new Error("Undefined state " + name2 + " in simple mode");
}
function toRegex(val, caret) {
  if (!val) return /(?:)/;
  var flags = "";
  if (val instanceof RegExp) {
    if (val.ignoreCase) flags = "i";
    val = val.source;
  } else {
    val = String(val);
  }
  return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
}
function asToken(val) {
  if (!val) return null;
  if (val.apply) return val;
  if (typeof val == "string") return val.replace(/\./g, " ");
  var result = [];
  for (var i = 0; i < val.length; i++)
    result.push(val[i] && val[i].replace(/\./g, " "));
  return result;
}
function Rule2(data2, states2) {
  if (data2.next || data2.push) ensureState(states2, data2.next || data2.push);
  this.regex = toRegex(data2.regex);
  this.token = asToken(data2.token);
  this.data = data2;
}
function tokenFunction(states2) {
  return function(stream, state) {
    if (state.pending) {
      var pend = state.pending.shift();
      if (state.pending.length == 0) state.pending = null;
      stream.pos += pend.text.length;
      return pend.token;
    }
    var curState2 = states2[state.state];
    for (var i = 0; i < curState2.length; i++) {
      var rule = curState2[i];
      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
      if (matches) {
        if (rule.data.next) {
          state.state = rule.data.next;
        } else if (rule.data.push) {
          (state.stack || (state.stack = [])).push(state.state);
          state.state = rule.data.push;
        } else if (rule.data.pop && state.stack && state.stack.length) {
          state.state = state.stack.pop();
        }
        if (rule.data.indent)
          state.indent.push(stream.indentation() + stream.indentUnit);
        if (rule.data.dedent)
          state.indent.pop();
        var token = rule.token;
        if (token && token.apply) token = token(matches);
        if (matches.length > 2 && rule.token && typeof rule.token != "string") {
          state.pending = [];
          for (var j = 2; j < matches.length; j++)
            if (matches[j])
              state.pending.push({ text: matches[j], token: rule.token[j - 1] });
          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
          return token[0];
        } else if (token && token.join) {
          return token[0];
        } else {
          return token;
        }
      }
    }
    stream.next();
    return null;
  };
}
function indentFunction(states2, meta2) {
  return function(state, textAfter) {
    if (state.indent == null || meta2.dontIndentStates && meta2.dontIndentStates.indexOf(state.state) > -1)
      return null;
    var pos = state.indent.length - 1, rules = states2[state.state];
    scan: for (; ; ) {
      for (var i = 0; i < rules.length; i++) {
        var rule = rules[i];
        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
          var m = rule.regex.exec(textAfter);
          if (m && m[0]) {
            pos--;
            if (rule.next || rule.push) rules = states2[rule.next || rule.push];
            textAfter = textAfter.slice(m[0].length);
            continue scan;
          }
        }
      }
      break;
    }
    return pos < 0 ? 0 : state.indent[pos];
  };
}
var init_simple_mode = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/simple-mode.js"() {
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/dockerfile.js
var dockerfile_exports = {};
__export(dockerfile_exports, {
  dockerFile: () => dockerFile
});
var from2, fromRegex, shells, shellsAsArrayRegex, expose, exposeRegex, others, instructions, instructionRegex, instructionOnlyLine, instructionWithArguments, dockerFile;
var init_dockerfile = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/dockerfile.js"() {
    init_simple_mode();
    from2 = "from";
    fromRegex = new RegExp("^(\\s*)\\b(" + from2 + ")\\b", "i");
    shells = ["run", "cmd", "entrypoint", "shell"];
    shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join("|") + ")(\\s+\\[)", "i");
    expose = "expose";
    exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");
    others = [
      "arg",
      "from",
      "maintainer",
      "label",
      "env",
      "add",
      "copy",
      "volume",
      "user",
      "workdir",
      "onbuild",
      "stopsignal",
      "healthcheck",
      "shell"
    ];
    instructions = [from2, expose].concat(shells).concat(others);
    instructionRegex = "(" + instructions.join("|") + ")";
    instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i");
    instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");
    dockerFile = simpleMode({
      start: [
        // Block comment: This is a line starting with a comment
        {
          regex: /^\s*#.*$/,
          sol: true,
          token: "comment"
        },
        {
          regex: fromRegex,
          token: [null, "keyword"],
          sol: true,
          next: "from"
        },
        // Highlight an instruction without any arguments (for convenience)
        {
          regex: instructionOnlyLine,
          token: [null, "keyword", null, "error"],
          sol: true
        },
        {
          regex: shellsAsArrayRegex,
          token: [null, "keyword", null],
          sol: true,
          next: "array"
        },
        {
          regex: exposeRegex,
          token: [null, "keyword", null],
          sol: true,
          next: "expose"
        },
        // Highlight an instruction followed by arguments
        {
          regex: instructionWithArguments,
          token: [null, "keyword", null],
          sol: true,
          next: "arguments"
        },
        {
          regex: /./,
          token: null
        }
      ],
      from: [
        {
          regex: /\s*$/,
          token: null,
          next: "start"
        },
        {
          // Line comment without instruction arguments is an error
          regex: /(\s*)(#.*)$/,
          token: [null, "error"],
          next: "start"
        },
        {
          regex: /(\s*\S+\s+)(as)/i,
          token: [null, "keyword"],
          next: "start"
        },
        // Fail safe return to start
        {
          token: null,
          next: "start"
        }
      ],
      single: [
        {
          regex: /(?:[^\\']|\\.)/,
          token: "string"
        },
        {
          regex: /'/,
          token: "string",
          pop: true
        }
      ],
      double: [
        {
          regex: /(?:[^\\"]|\\.)/,
          token: "string"
        },
        {
          regex: /"/,
          token: "string",
          pop: true
        }
      ],
      array: [
        {
          regex: /\]/,
          token: null,
          next: "start"
        },
        {
          regex: /"(?:[^\\"]|\\.)*"?/,
          token: "string"
        }
      ],
      expose: [
        {
          regex: /\d+$/,
          token: "number",
          next: "start"
        },
        {
          regex: /[^\d]+$/,
          token: null,
          next: "start"
        },
        {
          regex: /\d+/,
          token: "number"
        },
        {
          regex: /[^\d]+/,
          token: null
        },
        // Fail safe return to start
        {
          token: null,
          next: "start"
        }
      ],
      arguments: [
        {
          regex: /^\s*#.*$/,
          sol: true,
          token: "comment"
        },
        {
          regex: /"(?:[^\\"]|\\.)*"?$/,
          token: "string",
          next: "start"
        },
        {
          regex: /"/,
          token: "string",
          push: "double"
        },
        {
          regex: /'(?:[^\\']|\\.)*'?$/,
          token: "string",
          next: "start"
        },
        {
          regex: /'/,
          token: "string",
          push: "single"
        },
        {
          regex: /[^#"']+[\\`]$/,
          token: null
        },
        {
          regex: /[^#"']+$/,
          token: null,
          next: "start"
        },
        {
          regex: /[^#"']+/,
          token: null
        },
        // Fail safe return to start
        {
          token: null,
          next: "start"
        }
      ],
      languageData: {
        commentTokens: { line: "#" }
      }
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/dtd.js
var dtd_exports = {};
__export(dtd_exports, {
  dtd: () => dtd
});
function ret(style2, tp) {
  type2 = tp;
  return style2;
}
function tokenBase5(stream, state) {
  var ch2 = stream.next();
  if (ch2 == "<" && stream.eat("!")) {
    if (stream.eatWhile(/[\-]/)) {
      state.tokenize = tokenSGMLComment;
      return tokenSGMLComment(stream, state);
    } else if (stream.eatWhile(/[\w]/)) return ret("keyword", "doindent");
  } else if (ch2 == "<" && stream.eat("?")) {
    state.tokenize = inBlock("meta", "?>");
    return ret("meta", ch2);
  } else if (ch2 == "#" && stream.eatWhile(/[\w]/)) return ret("atom", "tag");
  else if (ch2 == "|") return ret("keyword", "separator");
  else if (ch2.match(/[\(\)\[\]\-\.,\+\?>]/)) return ret(null, ch2);
  else if (ch2.match(/[\[\]]/)) return ret("rule", ch2);
  else if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString3(ch2);
    return state.tokenize(stream, state);
  } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
    var sc = stream.current();
    if (sc.substr(sc.length - 1, sc.length).match(/\?|\+/) !== null) stream.backUp(1);
    return ret("tag", "tag");
  } else if (ch2 == "%" || ch2 == "*") return ret("number", "number");
  else {
    stream.eatWhile(/[\w\\\-_%.{,]/);
    return ret(null, null);
  }
}
function tokenSGMLComment(stream, state) {
  var dashes = 0, ch2;
  while ((ch2 = stream.next()) != null) {
    if (dashes >= 2 && ch2 == ">") {
      state.tokenize = tokenBase5;
      break;
    }
    dashes = ch2 == "-" ? dashes + 1 : 0;
  }
  return ret("comment", "comment");
}
function tokenString3(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped) {
        state.tokenize = tokenBase5;
        break;
      }
      escaped = !escaped && ch2 == "\\";
    }
    return ret("string", "tag");
  };
}
function inBlock(style2, terminator) {
  return function(stream, state) {
    while (!stream.eol()) {
      if (stream.match(terminator)) {
        state.tokenize = tokenBase5;
        break;
      }
      stream.next();
    }
    return style2;
  };
}
var type2, dtd;
var init_dtd = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/dtd.js"() {
    dtd = {
      name: "dtd",
      startState: function() {
        return {
          tokenize: tokenBase5,
          baseIndent: 0,
          stack: []
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        var context = state.stack[state.stack.length - 1];
        if (stream.current() == "[" || type2 === "doindent" || type2 == "[") state.stack.push("rule");
        else if (type2 === "endtag") state.stack[state.stack.length - 1] = "endtag";
        else if (stream.current() == "]" || type2 == "]" || type2 == ">" && context == "rule") state.stack.pop();
        else if (type2 == "[") state.stack.push("[");
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var n = state.stack.length;
        if (textAfter.charAt(0) === "]") n--;
        else if (textAfter.substr(textAfter.length - 1, textAfter.length) === ">") {
          if (textAfter.substr(0, 1) === "<") {
          } else if (type2 == "doindent" && textAfter.length > 1) {
          } else if (type2 == "doindent") n--;
          else if (type2 == ">" && textAfter.length > 1) {
          } else if (type2 == "tag" && textAfter !== ">") {
          } else if (type2 == "tag" && state.stack[state.stack.length - 1] == "rule") n--;
          else if (type2 == "tag") n++;
          else if (textAfter === ">" && state.stack[state.stack.length - 1] == "rule" && type2 === ">") n--;
          else if (textAfter === ">" && state.stack[state.stack.length - 1] == "rule") {
          } else if (textAfter.substr(0, 1) !== "<" && textAfter.substr(0, 1) === ">") n = n - 1;
          else if (textAfter === ">") {
          } else n = n - 1;
          if (type2 == null || type2 == "]") n--;
        }
        return state.baseIndent + n * cx2.unit;
      },
      languageData: {
        indentOnInput: /^\s*[\]>]$/
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/dylan.js
var dylan_exports = {};
__export(dylan_exports, {
  dylan: () => dylan
});
function forEach(arr, f) {
  for (var i = 0; i < arr.length; i++) f(arr[i], i);
}
function some(arr, f) {
  for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true;
  return false;
}
function chain2(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenBase6(stream, state) {
  var ch2 = stream.peek();
  if (ch2 == "'" || ch2 == '"') {
    stream.next();
    return chain2(stream, state, tokenString4(ch2, "string"));
  } else if (ch2 == "/") {
    stream.next();
    if (stream.eat("*")) {
      return chain2(stream, state, tokenComment2);
    } else if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
    stream.backUp(1);
  } else if (/[+\-\d\.]/.test(ch2)) {
    if (stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\d+/)) {
      return "number";
    }
  } else if (ch2 == "#") {
    stream.next();
    ch2 = stream.peek();
    if (ch2 == '"') {
      stream.next();
      return chain2(stream, state, tokenString4('"', "string"));
    } else if (ch2 == "b") {
      stream.next();
      stream.eatWhile(/[01]/);
      return "number";
    } else if (ch2 == "x") {
      stream.next();
      stream.eatWhile(/[\da-f]/i);
      return "number";
    } else if (ch2 == "o") {
      stream.next();
      stream.eatWhile(/[0-7]/);
      return "number";
    } else if (ch2 == "#") {
      stream.next();
      return "punctuation";
    } else if (ch2 == "[" || ch2 == "(") {
      stream.next();
      return "bracket";
    } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {
      return "atom";
    } else {
      stream.eatWhile(/[-a-zA-Z]/);
      return "error";
    }
  } else if (ch2 == "~") {
    stream.next();
    ch2 = stream.peek();
    if (ch2 == "=") {
      stream.next();
      ch2 = stream.peek();
      if (ch2 == "=") {
        stream.next();
        return "operator";
      }
      return "operator";
    }
    return "operator";
  } else if (ch2 == ":") {
    stream.next();
    ch2 = stream.peek();
    if (ch2 == "=") {
      stream.next();
      return "operator";
    } else if (ch2 == ":") {
      stream.next();
      return "punctuation";
    }
  } else if ("[](){}".indexOf(ch2) != -1) {
    stream.next();
    return "bracket";
  } else if (".,".indexOf(ch2) != -1) {
    stream.next();
    return "punctuation";
  } else if (stream.match("end")) {
    return "keyword";
  }
  for (var name2 in patterns) {
    if (patterns.hasOwnProperty(name2)) {
      var pattern = patterns[name2];
      if (pattern instanceof Array && some(pattern, function(p) {
        return stream.match(p);
      }) || stream.match(pattern))
        return patternStyles[name2];
    }
  }
  if (/[+\-*\/^=<>&|]/.test(ch2)) {
    stream.next();
    return "operator";
  }
  if (stream.match("define")) {
    return "def";
  } else {
    stream.eatWhile(/[\w\-]/);
    if (wordLookup.hasOwnProperty(stream.current())) {
      return styleLookup[stream.current()];
    } else if (stream.current().match(symbol2)) {
      return "variable";
    } else {
      stream.next();
      return "variableName.standard";
    }
  }
}
function tokenComment2(stream, state) {
  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      if (nestedCount > 0) {
        nestedCount--;
      } else {
        state.tokenize = tokenBase6;
        break;
      }
    } else if (ch2 == "*" && maybeNested) {
      nestedCount++;
    }
    maybeEnd = ch2 == "*";
    maybeNested = ch2 == "/";
  }
  return "comment";
}
function tokenString4(quote4, style2) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !escaped) {
      state.tokenize = tokenBase6;
    }
    return style2;
  };
}
var words5, symbolPattern, symbol2, patterns, patternStyles, patternName, styles, wordLookup, styleLookup, dylan;
var init_dylan = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/dylan.js"() {
    words5 = {
      // Words that introduce unnamed definitions like "define interface"
      unnamedDefinition: ["interface"],
      // Words that introduce simple named definitions like "define library"
      namedDefinition: [
        "module",
        "library",
        "macro",
        "C-struct",
        "C-union",
        "C-function",
        "C-callable-wrapper"
      ],
      // Words that introduce type definitions like "define class".
      // These are also parameterized like "define method" and are
      // appended to otherParameterizedDefinitionWords
      typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],
      // Words that introduce trickier definitions like "define method".
      // These require special definitions to be added to startExpressions
      otherParameterizedDefinition: [
        "method",
        "function",
        "C-variable",
        "C-address"
      ],
      // Words that introduce module constant definitions.
      // These must also be simple definitions and are
      // appended to otherSimpleDefinitionWords
      constantSimpleDefinition: ["constant"],
      // Words that introduce module variable definitions.
      // These must also be simple definitions and are
      // appended to otherSimpleDefinitionWords
      variableSimpleDefinition: ["variable"],
      // Other words that introduce simple definitions
      // (without implicit bodies).
      otherSimpleDefinition: [
        "generic",
        "domain",
        "C-pointer-type",
        "table"
      ],
      // Words that begin statements with implicit bodies.
      statement: [
        "if",
        "block",
        "begin",
        "method",
        "case",
        "for",
        "select",
        "when",
        "unless",
        "until",
        "while",
        "iterate",
        "profiling",
        "dynamic-bind"
      ],
      // Patterns that act as separators in compound statements.
      // This may include any general pattern that must be indented
      // specially.
      separator: [
        "finally",
        "exception",
        "cleanup",
        "else",
        "elseif",
        "afterwards"
      ],
      // Keywords that do not require special indentation handling,
      // but which should be highlighted
      other: [
        "above",
        "below",
        "by",
        "from",
        "handler",
        "in",
        "instance",
        "let",
        "local",
        "otherwise",
        "slot",
        "subclass",
        "then",
        "to",
        "keyed-by",
        "virtual"
      ],
      // Condition signaling function calls
      signalingCalls: [
        "signal",
        "error",
        "cerror",
        "break",
        "check-type",
        "abort"
      ]
    };
    words5["otherDefinition"] = words5["unnamedDefinition"].concat(words5["namedDefinition"]).concat(words5["otherParameterizedDefinition"]);
    words5["definition"] = words5["typeParameterizedDefinition"].concat(words5["otherDefinition"]);
    words5["parameterizedDefinition"] = words5["typeParameterizedDefinition"].concat(words5["otherParameterizedDefinition"]);
    words5["simpleDefinition"] = words5["constantSimpleDefinition"].concat(words5["variableSimpleDefinition"]).concat(words5["otherSimpleDefinition"]);
    words5["keyword"] = words5["statement"].concat(words5["separator"]).concat(words5["other"]);
    symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
    symbol2 = new RegExp("^" + symbolPattern);
    patterns = {
      // Symbols with special syntax
      symbolKeyword: symbolPattern + ":",
      symbolClass: "<" + symbolPattern + ">",
      symbolGlobal: "\\*" + symbolPattern + "\\*",
      symbolConstant: "\\$" + symbolPattern
    };
    patternStyles = {
      symbolKeyword: "atom",
      symbolClass: "tag",
      symbolGlobal: "variableName.standard",
      symbolConstant: "variableName.constant"
    };
    for (patternName in patterns)
      if (patterns.hasOwnProperty(patternName))
        patterns[patternName] = new RegExp("^" + patterns[patternName]);
    patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];
    styles = {};
    styles["keyword"] = "keyword";
    styles["definition"] = "def";
    styles["simpleDefinition"] = "def";
    styles["signalingCalls"] = "builtin";
    wordLookup = {};
    styleLookup = {};
    forEach([
      "keyword",
      "definition",
      "simpleDefinition",
      "signalingCalls"
    ], function(type7) {
      forEach(words5[type7], function(word) {
        wordLookup[word] = type7;
        styleLookup[word] = styles[type7];
      });
    });
    dylan = {
      name: "dylan",
      startState: function() {
        return {
          tokenize: tokenBase6,
          currentIndent: 0
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace())
          return null;
        var style2 = state.tokenize(stream, state);
        return style2;
      },
      languageData: {
        commentTokens: { block: { open: "/*", close: "*/" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/ebnf.js
var ebnf_exports = {};
__export(ebnf_exports, {
  ebnf: () => ebnf
});
var commentType, stateType, ebnf;
var init_ebnf = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/ebnf.js"() {
    commentType = { slash: 0, parenthesis: 1 };
    stateType = { comment: 0, _string: 1, characterClass: 2 };
    ebnf = {
      name: "ebnf",
      startState: function() {
        return {
          stringType: null,
          commentType: null,
          braced: 0,
          lhs: true,
          localState: null,
          stack: [],
          inDefinition: false
        };
      },
      token: function(stream, state) {
        if (!stream) return;
        if (state.stack.length === 0) {
          if (stream.peek() == '"' || stream.peek() == "'") {
            state.stringType = stream.peek();
            stream.next();
            state.stack.unshift(stateType._string);
          } else if (stream.match("/*")) {
            state.stack.unshift(stateType.comment);
            state.commentType = commentType.slash;
          } else if (stream.match("(*")) {
            state.stack.unshift(stateType.comment);
            state.commentType = commentType.parenthesis;
          }
        }
        switch (state.stack[0]) {
          case stateType._string:
            while (state.stack[0] === stateType._string && !stream.eol()) {
              if (stream.peek() === state.stringType) {
                stream.next();
                state.stack.shift();
              } else if (stream.peek() === "\\") {
                stream.next();
                stream.next();
              } else {
                stream.match(/^.[^\\\"\']*/);
              }
            }
            return state.lhs ? "property" : "string";
          // Token style
          case stateType.comment:
            while (state.stack[0] === stateType.comment && !stream.eol()) {
              if (state.commentType === commentType.slash && stream.match("*/")) {
                state.stack.shift();
                state.commentType = null;
              } else if (state.commentType === commentType.parenthesis && stream.match("*)")) {
                state.stack.shift();
                state.commentType = null;
              } else {
                stream.match(/^.[^\*]*/);
              }
            }
            return "comment";
          case stateType.characterClass:
            while (state.stack[0] === stateType.characterClass && !stream.eol()) {
              if (!(stream.match(/^[^\]\\]+/) || stream.match("."))) {
                state.stack.shift();
              }
            }
            return "operator";
        }
        var peek = stream.peek();
        switch (peek) {
          case "[":
            stream.next();
            state.stack.unshift(stateType.characterClass);
            return "bracket";
          case ":":
          case "|":
          case ";":
            stream.next();
            return "operator";
          case "%":
            if (stream.match("%%")) {
              return "header";
            } else if (stream.match(/[%][A-Za-z]+/)) {
              return "keyword";
            } else if (stream.match(/[%][}]/)) {
              return "bracket";
            }
            break;
          case "/":
            if (stream.match(/[\/][A-Za-z]+/)) {
              return "keyword";
            }
          case "\\":
            if (stream.match(/[\][a-z]+/)) {
              return "string.special";
            }
          case ".":
            if (stream.match(".")) {
              return "atom";
            }
          case "*":
          case "-":
          case "+":
          case "^":
            if (stream.match(peek)) {
              return "atom";
            }
          case "$":
            if (stream.match("$$")) {
              return "builtin";
            } else if (stream.match(/[$][0-9]+/)) {
              return "variableName.special";
            }
          case "<":
            if (stream.match(/<<[a-zA-Z_]+>>/)) {
              return "builtin";
            }
        }
        if (stream.match("//")) {
          stream.skipToEnd();
          return "comment";
        } else if (stream.match("return")) {
          return "operator";
        } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
          if (stream.match(/(?=[\(.])/)) {
            return "variable";
          } else if (stream.match(/(?=[\s\n]*[:=])/)) {
            return "def";
          }
          return "variableName.special";
        } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
          stream.next();
          return "bracket";
        } else if (!stream.eatSpace()) {
          stream.next();
        }
        return null;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/ecl.js
var ecl_exports = {};
__export(ecl_exports, {
  ecl: () => ecl
});
function words6(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function metaHook(stream, state) {
  if (!state.startOfLine) return false;
  stream.skipToEnd();
  return "meta";
}
function tokenBase7(stream, state) {
  var ch2 = stream.next();
  if (hooks2[ch2]) {
    var result = hooks2[ch2](stream, state);
    if (result !== false) return result;
  }
  if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString5(ch2);
    return state.tokenize(stream, state);
  }
  if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
    curPunc3 = ch2;
    return null;
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  if (ch2 == "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment3;
      return tokenComment3(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar2.test(ch2)) {
    stream.eatWhile(isOperatorChar2);
    return "operator";
  }
  stream.eatWhile(/[\w\$_]/);
  var cur2 = stream.current().toLowerCase();
  if (keyword2.propertyIsEnumerable(cur2)) {
    if (blockKeywords2.propertyIsEnumerable(cur2)) curPunc3 = "newstatement";
    return "keyword";
  } else if (variable2.propertyIsEnumerable(cur2)) {
    if (blockKeywords2.propertyIsEnumerable(cur2)) curPunc3 = "newstatement";
    return "variable";
  } else if (variable_2.propertyIsEnumerable(cur2)) {
    if (blockKeywords2.propertyIsEnumerable(cur2)) curPunc3 = "newstatement";
    return "modifier";
  } else if (variable_3.propertyIsEnumerable(cur2)) {
    if (blockKeywords2.propertyIsEnumerable(cur2)) curPunc3 = "newstatement";
    return "type";
  } else if (builtin2.propertyIsEnumerable(cur2)) {
    if (blockKeywords2.propertyIsEnumerable(cur2)) curPunc3 = "newstatement";
    return "builtin";
  } else {
    var i = cur2.length - 1;
    while (i >= 0 && (!isNaN(cur2[i]) || cur2[i] == "_"))
      --i;
    if (i > 0) {
      var cur22 = cur2.substr(0, i + 1);
      if (variable_3.propertyIsEnumerable(cur22)) {
        if (blockKeywords2.propertyIsEnumerable(cur22)) curPunc3 = "newstatement";
        return "type";
      }
    }
  }
  if (atoms5.propertyIsEnumerable(cur2)) return "atom";
  return null;
}
function tokenString5(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !escaped)
      state.tokenize = tokenBase7;
    return "string";
  };
}
function tokenComment3(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = tokenBase7;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function Context6(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext4(state, col, type7) {
  return state.context = new Context6(state.indented, col, type7, null, state.context);
}
function popContext4(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var keyword2, variable2, variable_2, variable_3, builtin2, blockKeywords2, atoms5, hooks2, isOperatorChar2, curPunc3, ecl;
var init_ecl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/ecl.js"() {
    keyword2 = words6("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode");
    variable2 = words6("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait");
    variable_2 = words6("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath");
    variable_3 = words6("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode");
    builtin2 = words6("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when");
    blockKeywords2 = words6("catch class do else finally for if switch try while");
    atoms5 = words6("true false null");
    hooks2 = { "#": metaHook };
    isOperatorChar2 = /[+\-*&%=<>!?|\/]/;
    ecl = {
      name: "ecl",
      startState: function(indentUnit2) {
        return {
          tokenize: null,
          context: new Context6(-indentUnit2, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc3 = null;
        var style2 = (state.tokenize || tokenBase7)(stream, state);
        if (style2 == "comment" || style2 == "meta") return style2;
        if (ctx.align == null) ctx.align = true;
        if ((curPunc3 == ";" || curPunc3 == ":") && ctx.type == "statement") popContext4(state);
        else if (curPunc3 == "{") pushContext4(state, stream.column(), "}");
        else if (curPunc3 == "[") pushContext4(state, stream.column(), "]");
        else if (curPunc3 == "(") pushContext4(state, stream.column(), ")");
        else if (curPunc3 == "}") {
          while (ctx.type == "statement") ctx = popContext4(state);
          if (ctx.type == "}") ctx = popContext4(state);
          while (ctx.type == "statement") ctx = popContext4(state);
        } else if (curPunc3 == ctx.type) popContext4(state);
        else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc3 == "newstatement")
          pushContext4(state, stream.column(), "statement");
        state.startOfLine = false;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase7 && state.tokenize != null) return 0;
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
        var closing4 = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx2.unit);
        else if (ctx.align) return ctx.column + (closing4 ? 0 : 1);
        else return ctx.indented + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/eiffel.js
var eiffel_exports = {};
__export(eiffel_exports, {
  eiffel: () => eiffel
});
function wordObj(words22) {
  var o = {};
  for (var i = 0, e = words22.length; i < e; ++i) o[words22[i]] = true;
  return o;
}
function chain3(newtok, stream, state) {
  state.tokenize.push(newtok);
  return newtok(stream, state);
}
function tokenBase8(stream, state) {
  if (stream.eatSpace()) return null;
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    return chain3(readQuoted2(ch2, "string"), stream, state);
  } else if (ch2 == "-" && stream.eat("-")) {
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == ":" && stream.eat("=")) {
    return "operator";
  } else if (/[0-9]/.test(ch2)) {
    stream.eatWhile(/[xXbBCc0-9\.]/);
    stream.eat(/[\?\!]/);
    return "variable";
  } else if (/[a-zA-Z_0-9]/.test(ch2)) {
    stream.eatWhile(/[a-zA-Z_0-9]/);
    stream.eat(/[\?\!]/);
    return "variable";
  } else if (/[=+\-\/*^%<>~]/.test(ch2)) {
    stream.eatWhile(/[=+\-\/*^%<>~]/);
    return "operator";
  } else {
    return null;
  }
}
function readQuoted2(quote4, style2, unescaped) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && (unescaped || !escaped)) {
        state.tokenize.pop();
        break;
      }
      escaped = !escaped && ch2 == "%";
    }
    return style2;
  };
}
var keywords11, operators3, eiffel;
var init_eiffel = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/eiffel.js"() {
    keywords11 = wordObj([
      "note",
      "across",
      "when",
      "variant",
      "until",
      "unique",
      "undefine",
      "then",
      "strip",
      "select",
      "retry",
      "rescue",
      "require",
      "rename",
      "reference",
      "redefine",
      "prefix",
      "once",
      "old",
      "obsolete",
      "loop",
      "local",
      "like",
      "is",
      "inspect",
      "infix",
      "include",
      "if",
      "frozen",
      "from",
      "external",
      "export",
      "ensure",
      "end",
      "elseif",
      "else",
      "do",
      "creation",
      "create",
      "check",
      "alias",
      "agent",
      "separate",
      "invariant",
      "inherit",
      "indexing",
      "feature",
      "expanded",
      "deferred",
      "class",
      "Void",
      "True",
      "Result",
      "Precursor",
      "False",
      "Current",
      "create",
      "attached",
      "detachable",
      "as",
      "and",
      "implies",
      "not",
      "or"
    ]);
    operators3 = wordObj([":=", "and then", "and", "or", "<<", ">>"]);
    eiffel = {
      name: "eiffel",
      startState: function() {
        return { tokenize: [tokenBase8] };
      },
      token: function(stream, state) {
        var style2 = state.tokenize[state.tokenize.length - 1](stream, state);
        if (style2 == "variable") {
          var word = stream.current();
          style2 = keywords11.propertyIsEnumerable(stream.current()) ? "keyword" : operators3.propertyIsEnumerable(stream.current()) ? "operator" : /^[A-Z][A-Z_0-9]*$/g.test(word) ? "tag" : /^0[bB][0-1]+$/g.test(word) ? "number" : /^0[cC][0-7]+$/g.test(word) ? "number" : /^0[xX][a-fA-F0-9]+$/g.test(word) ? "number" : /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word) ? "number" : /^[0-9]+$/g.test(word) ? "number" : "variable";
        }
        return style2;
      },
      languageData: {
        commentTokens: { line: "--" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/elm.js
var elm_exports = {};
__export(elm_exports, {
  elm: () => elm
});
function switchState(source, setState, f) {
  setState(f);
  return f(source, setState);
}
function normal() {
  return function(source, setState) {
    if (source.eatWhile(spacesRE)) {
      return null;
    }
    var char = source.next();
    if (specialRE.test(char)) {
      return char === "{" && source.eat("-") ? switchState(source, setState, chompMultiComment(1)) : char === "[" && source.match("glsl|") ? switchState(source, setState, chompGlsl) : "builtin";
    }
    if (char === "'") {
      return switchState(source, setState, chompChar);
    }
    if (char === '"') {
      return source.eat('"') ? source.eat('"') ? switchState(source, setState, chompMultiString) : "string" : switchState(source, setState, chompSingleString);
    }
    if (upperRE.test(char)) {
      source.eatWhile(innerRE);
      return "type";
    }
    if (lowerRE.test(char)) {
      var isDef = source.pos === 1;
      source.eatWhile(innerRE);
      return isDef ? "def" : "variable";
    }
    if (digitRE.test(char)) {
      if (char === "0") {
        if (source.eat(/[xX]/)) {
          source.eatWhile(hexRE);
          return "number";
        }
      } else {
        source.eatWhile(digitRE);
      }
      if (source.eat(".")) {
        source.eatWhile(digitRE);
      }
      if (source.eat(/[eE]/)) {
        source.eat(/[-+]/);
        source.eatWhile(digitRE);
      }
      return "number";
    }
    if (symbolRE.test(char)) {
      if (char === "-" && source.eat("-")) {
        source.skipToEnd();
        return "comment";
      }
      source.eatWhile(symbolRE);
      return "keyword";
    }
    if (char === "_") {
      return "keyword";
    }
    return "error";
  };
}
function chompMultiComment(nest) {
  if (nest == 0) {
    return normal();
  }
  return function(source, setState) {
    while (!source.eol()) {
      var char = source.next();
      if (char == "{" && source.eat("-")) {
        ++nest;
      } else if (char == "-" && source.eat("}")) {
        --nest;
        if (nest === 0) {
          setState(normal());
          return "comment";
        }
      }
    }
    setState(chompMultiComment(nest));
    return "comment";
  };
}
function chompMultiString(source, setState) {
  while (!source.eol()) {
    var char = source.next();
    if (char === '"' && source.eat('"') && source.eat('"')) {
      setState(normal());
      return "string";
    }
  }
  return "string";
}
function chompSingleString(source, setState) {
  while (source.skipTo('\\"')) {
    source.next();
    source.next();
  }
  if (source.skipTo('"')) {
    source.next();
    setState(normal());
    return "string";
  }
  source.skipToEnd();
  setState(normal());
  return "error";
}
function chompChar(source, setState) {
  while (source.skipTo("\\'")) {
    source.next();
    source.next();
  }
  if (source.skipTo("'")) {
    source.next();
    setState(normal());
    return "string";
  }
  source.skipToEnd();
  setState(normal());
  return "error";
}
function chompGlsl(source, setState) {
  while (!source.eol()) {
    var char = source.next();
    if (char === "|" && source.eat("]")) {
      setState(normal());
      return "string";
    }
  }
  return "string";
}
var lowerRE, upperRE, innerRE, digitRE, hexRE, symbolRE, specialRE, spacesRE, wellKnownWords, elm;
var init_elm = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/elm.js"() {
    lowerRE = /[a-z]/;
    upperRE = /[A-Z]/;
    innerRE = /[a-zA-Z0-9_]/;
    digitRE = /[0-9]/;
    hexRE = /[0-9A-Fa-f]/;
    symbolRE = /[-&*+.\\/<>=?^|:]/;
    specialRE = /[(),[\]{}]/;
    spacesRE = /[ \v\f]/;
    wellKnownWords = {
      case: 1,
      of: 1,
      as: 1,
      if: 1,
      then: 1,
      else: 1,
      let: 1,
      in: 1,
      type: 1,
      alias: 1,
      module: 1,
      where: 1,
      import: 1,
      exposing: 1,
      port: 1
    };
    elm = {
      name: "elm",
      startState: function() {
        return { f: normal() };
      },
      copyState: function(s) {
        return { f: s.f };
      },
      token: function(stream, state) {
        var type7 = state.f(stream, function(s) {
          state.f = s;
        });
        var word = stream.current();
        return wellKnownWords.hasOwnProperty(word) ? "keyword" : type7;
      },
      languageData: {
        commentTokens: { line: "--" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/erlang.js
var erlang_exports = {};
__export(erlang_exports, {
  erlang: () => erlang
});
function tokenizer(stream, state) {
  if (state.in_string) {
    state.in_string = !doubleQuote2(stream);
    return rval(state, stream, "string");
  }
  if (state.in_atom) {
    state.in_atom = !singleQuote2(stream);
    return rval(state, stream, "atom");
  }
  if (stream.eatSpace()) {
    return rval(state, stream, "whitespace");
  }
  if (!peekToken(state) && stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)) {
    if (is_member(stream.current(), typeWords)) {
      return rval(state, stream, "type");
    } else {
      return rval(state, stream, "attribute");
    }
  }
  var ch2 = stream.next();
  if (ch2 == "%") {
    stream.skipToEnd();
    return rval(state, stream, "comment");
  }
  if (ch2 == ":") {
    return rval(state, stream, "colon");
  }
  if (ch2 == "?") {
    stream.eatSpace();
    stream.eatWhile(anumRE);
    return rval(state, stream, "macro");
  }
  if (ch2 == "#") {
    stream.eatSpace();
    stream.eatWhile(anumRE);
    return rval(state, stream, "record");
  }
  if (ch2 == "$") {
    if (stream.next() == "\\" && !stream.match(escapesRE)) {
      return rval(state, stream, "error");
    }
    return rval(state, stream, "number");
  }
  if (ch2 == ".") {
    return rval(state, stream, "dot");
  }
  if (ch2 == "'") {
    if (!(state.in_atom = !singleQuote2(stream))) {
      if (stream.match(/\s*\/\s*[0-9]/, false)) {
        stream.match(/\s*\/\s*[0-9]/, true);
        return rval(state, stream, "fun");
      }
      if (stream.match(/\s*\(/, false) || stream.match(/\s*:/, false)) {
        return rval(state, stream, "function");
      }
    }
    return rval(state, stream, "atom");
  }
  if (ch2 == '"') {
    state.in_string = !doubleQuote2(stream);
    return rval(state, stream, "string");
  }
  if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch2)) {
    stream.eatWhile(anumRE);
    return rval(state, stream, "variable");
  }
  if (/[a-z_ß-öø-ÿ]/.test(ch2)) {
    stream.eatWhile(anumRE);
    if (stream.match(/\s*\/\s*[0-9]/, false)) {
      stream.match(/\s*\/\s*[0-9]/, true);
      return rval(state, stream, "fun");
    }
    var w = stream.current();
    if (is_member(w, keywordWords)) {
      return rval(state, stream, "keyword");
    } else if (is_member(w, operatorAtomWords)) {
      return rval(state, stream, "operator");
    } else if (stream.match(/\s*\(/, false)) {
      if (is_member(w, bifWords) && (peekToken(state).token != ":" || peekToken(state, 2).token == "erlang")) {
        return rval(state, stream, "builtin");
      } else if (is_member(w, guardWords)) {
        return rval(state, stream, "guard");
      } else {
        return rval(state, stream, "function");
      }
    } else if (lookahead(stream) == ":") {
      if (w == "erlang") {
        return rval(state, stream, "builtin");
      } else {
        return rval(state, stream, "function");
      }
    } else if (is_member(w, ["true", "false"])) {
      return rval(state, stream, "boolean");
    } else {
      return rval(state, stream, "atom");
    }
  }
  var digitRE3 = /[0-9]/;
  var radixRE = /[0-9a-zA-Z]/;
  if (digitRE3.test(ch2)) {
    stream.eatWhile(digitRE3);
    if (stream.eat("#")) {
      if (!stream.eatWhile(radixRE)) {
        stream.backUp(1);
      }
    } else if (stream.eat(".")) {
      if (!stream.eatWhile(digitRE3)) {
        stream.backUp(1);
      } else {
        if (stream.eat(/[eE]/)) {
          if (stream.eat(/[-+]/)) {
            if (!stream.eatWhile(digitRE3)) {
              stream.backUp(2);
            }
          } else {
            if (!stream.eatWhile(digitRE3)) {
              stream.backUp(1);
            }
          }
        }
      }
    }
    return rval(state, stream, "number");
  }
  if (nongreedy(stream, openParenRE, openParenWords)) {
    return rval(state, stream, "open_paren");
  }
  if (nongreedy(stream, closeParenRE, closeParenWords)) {
    return rval(state, stream, "close_paren");
  }
  if (greedy(stream, separatorRE, separatorWords)) {
    return rval(state, stream, "separator");
  }
  if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {
    return rval(state, stream, "operator");
  }
  return rval(state, stream, null);
}
function nongreedy(stream, re, words22) {
  if (stream.current().length == 1 && re.test(stream.current())) {
    stream.backUp(1);
    while (re.test(stream.peek())) {
      stream.next();
      if (is_member(stream.current(), words22)) {
        return true;
      }
    }
    stream.backUp(stream.current().length - 1);
  }
  return false;
}
function greedy(stream, re, words22) {
  if (stream.current().length == 1 && re.test(stream.current())) {
    while (re.test(stream.peek())) {
      stream.next();
    }
    while (0 < stream.current().length) {
      if (is_member(stream.current(), words22)) {
        return true;
      } else {
        stream.backUp(1);
      }
    }
    stream.next();
  }
  return false;
}
function doubleQuote2(stream) {
  return quote(stream, '"', "\\");
}
function singleQuote2(stream) {
  return quote(stream, "'", "\\");
}
function quote(stream, quoteChar, escapeChar) {
  while (!stream.eol()) {
    var ch2 = stream.next();
    if (ch2 == quoteChar) {
      return true;
    } else if (ch2 == escapeChar) {
      stream.next();
    }
  }
  return false;
}
function lookahead(stream) {
  var m = stream.match(/^\s*([^\s%])/, false);
  return m ? m[1] : "";
}
function is_member(element2, list2) {
  return -1 < list2.indexOf(element2);
}
function rval(state, stream, type7) {
  pushToken(state, realToken(type7, stream));
  switch (type7) {
    case "atom":
      return "atom";
    case "attribute":
      return "attribute";
    case "boolean":
      return "atom";
    case "builtin":
      return "builtin";
    case "close_paren":
      return null;
    case "colon":
      return null;
    case "comment":
      return "comment";
    case "dot":
      return null;
    case "error":
      return "error";
    case "fun":
      return "meta";
    case "function":
      return "tag";
    case "guard":
      return "property";
    case "keyword":
      return "keyword";
    case "macro":
      return "macroName";
    case "number":
      return "number";
    case "open_paren":
      return null;
    case "operator":
      return "operator";
    case "record":
      return "bracket";
    case "separator":
      return null;
    case "string":
      return "string";
    case "type":
      return "def";
    case "variable":
      return "variable";
    default:
      return null;
  }
}
function aToken(tok, col, ind, typ) {
  return {
    token: tok,
    column: col,
    indent: ind,
    type: typ
  };
}
function realToken(type7, stream) {
  return aToken(
    stream.current(),
    stream.column(),
    stream.indentation(),
    type7
  );
}
function fakeToken(type7) {
  return aToken(type7, 0, 0, type7);
}
function peekToken(state, depth) {
  var len = state.tokenStack.length;
  var dep = depth ? depth : 1;
  if (len < dep) {
    return false;
  } else {
    return state.tokenStack[len - dep];
  }
}
function pushToken(state, token) {
  if (!(token.type == "comment" || token.type == "whitespace")) {
    state.tokenStack = maybe_drop_pre(state.tokenStack, token);
    state.tokenStack = maybe_drop_post(state.tokenStack);
  }
}
function maybe_drop_pre(s, token) {
  var last = s.length - 1;
  if (0 < last && s[last].type === "record" && token.type === "dot") {
    s.pop();
  } else if (0 < last && s[last].type === "group") {
    s.pop();
    s.push(token);
  } else {
    s.push(token);
  }
  return s;
}
function maybe_drop_post(s) {
  if (!s.length) return s;
  var last = s.length - 1;
  if (s[last].type === "dot") {
    return [];
  }
  if (last > 1 && s[last].type === "fun" && s[last - 1].token === "fun") {
    return s.slice(0, last - 1);
  }
  switch (s[last].token) {
    case "}":
      return d2(s, { g: ["{"] });
    case "]":
      return d2(s, { i: ["["] });
    case ")":
      return d2(s, { i: ["("] });
    case ">>":
      return d2(s, { i: ["<<"] });
    case "end":
      return d2(s, { i: ["begin", "case", "fun", "if", "receive", "try"] });
    case ",":
      return d2(s, { e: [
        "begin",
        "try",
        "when",
        "->",
        ",",
        "(",
        "[",
        "{",
        "<<"
      ] });
    case "->":
      return d2(s, {
        r: ["when"],
        m: ["try", "if", "case", "receive"]
      });
    case ";":
      return d2(s, { E: ["case", "fun", "if", "receive", "try", "when"] });
    case "catch":
      return d2(s, { e: ["try"] });
    case "of":
      return d2(s, { e: ["case"] });
    case "after":
      return d2(s, { e: ["receive", "try"] });
    default:
      return s;
  }
}
function d2(stack, tt) {
  for (var type7 in tt) {
    var len = stack.length - 1;
    var tokens2 = tt[type7];
    for (var i = len - 1; -1 < i; i--) {
      if (is_member(stack[i].token, tokens2)) {
        var ss = stack.slice(0, i);
        switch (type7) {
          case "m":
            return ss.concat(stack[i]).concat(stack[len]);
          case "r":
            return ss.concat(stack[len]);
          case "i":
            return ss;
          case "g":
            return ss.concat(fakeToken("group"));
          case "E":
            return ss.concat(stack[i]);
          case "e":
            return ss.concat(stack[i]);
        }
      }
    }
  }
  return type7 == "E" ? [] : stack;
}
function indenter(state, textAfter, cx2) {
  var t2;
  var wordAfter = wordafter(textAfter);
  var currT = peekToken(state, 1);
  var prevT = peekToken(state, 2);
  if (state.in_string || state.in_atom) {
    return null;
  } else if (!prevT) {
    return 0;
  } else if (currT.token == "when") {
    return currT.column + cx2.unit;
  } else if (wordAfter === "when" && prevT.type === "function") {
    return prevT.indent + cx2.unit;
  } else if (wordAfter === "(" && currT.token === "fun") {
    return currT.column + 3;
  } else if (wordAfter === "catch" && (t2 = getToken(state, ["try"]))) {
    return t2.column;
  } else if (is_member(wordAfter, ["end", "after", "of"])) {
    t2 = getToken(state, ["begin", "case", "fun", "if", "receive", "try"]);
    return t2 ? t2.column : null;
  } else if (is_member(wordAfter, closeParenWords)) {
    t2 = getToken(state, openParenWords);
    return t2 ? t2.column : null;
  } else if (is_member(currT.token, [",", "|", "||"]) || is_member(wordAfter, [",", "|", "||"])) {
    t2 = postcommaToken(state);
    return t2 ? t2.column + t2.token.length : cx2.unit;
  } else if (currT.token == "->") {
    if (is_member(prevT.token, ["receive", "case", "if", "try"])) {
      return prevT.column + cx2.unit + cx2.unit;
    } else {
      return prevT.column + cx2.unit;
    }
  } else if (is_member(currT.token, openParenWords)) {
    return currT.column + currT.token.length;
  } else {
    t2 = defaultToken(state);
    return truthy(t2) ? t2.column + cx2.unit : 0;
  }
}
function wordafter(str) {
  var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);
  return truthy(m) && m.index === 0 ? m[0] : "";
}
function postcommaToken(state) {
  var objs = state.tokenStack.slice(0, -1);
  var i = getTokenIndex(objs, "type", ["open_paren"]);
  return truthy(objs[i]) ? objs[i] : false;
}
function defaultToken(state) {
  var objs = state.tokenStack;
  var stop = getTokenIndex(objs, "type", ["open_paren", "separator", "keyword"]);
  var oper = getTokenIndex(objs, "type", ["operator"]);
  if (truthy(stop) && truthy(oper) && stop < oper) {
    return objs[stop + 1];
  } else if (truthy(stop)) {
    return objs[stop];
  } else {
    return false;
  }
}
function getToken(state, tokens2) {
  var objs = state.tokenStack;
  var i = getTokenIndex(objs, "token", tokens2);
  return truthy(objs[i]) ? objs[i] : false;
}
function getTokenIndex(objs, propname, propvals) {
  for (var i = objs.length - 1; -1 < i; i--) {
    if (is_member(objs[i][propname], propvals)) {
      return i;
    }
  }
  return false;
}
function truthy(x) {
  return x !== false && x != null;
}
var typeWords, keywordWords, separatorRE, separatorWords, operatorAtomWords, operatorSymbolRE, operatorSymbolWords, openParenRE, openParenWords, closeParenRE, closeParenWords, guardWords, bifWords, anumRE, escapesRE, erlang;
var init_erlang = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/erlang.js"() {
    typeWords = [
      "-type",
      "-spec",
      "-export_type",
      "-opaque"
    ];
    keywordWords = [
      "after",
      "begin",
      "catch",
      "case",
      "cond",
      "end",
      "fun",
      "if",
      "let",
      "of",
      "query",
      "receive",
      "try",
      "when"
    ];
    separatorRE = /[\->,;]/;
    separatorWords = [
      "->",
      ";",
      ","
    ];
    operatorAtomWords = [
      "and",
      "andalso",
      "band",
      "bnot",
      "bor",
      "bsl",
      "bsr",
      "bxor",
      "div",
      "not",
      "or",
      "orelse",
      "rem",
      "xor"
    ];
    operatorSymbolRE = /[\+\-\*\/<>=\|:!]/;
    operatorSymbolWords = [
      "=",
      "+",
      "-",
      "*",
      "/",
      ">",
      ">=",
      "<",
      "=<",
      "=:=",
      "==",
      "=/=",
      "/=",
      "||",
      "<-",
      "!"
    ];
    openParenRE = /[<\(\[\{]/;
    openParenWords = [
      "<<",
      "(",
      "[",
      "{"
    ];
    closeParenRE = /[>\)\]\}]/;
    closeParenWords = [
      "}",
      "]",
      ")",
      ">>"
    ];
    guardWords = [
      "is_atom",
      "is_binary",
      "is_bitstring",
      "is_boolean",
      "is_float",
      "is_function",
      "is_integer",
      "is_list",
      "is_number",
      "is_pid",
      "is_port",
      "is_record",
      "is_reference",
      "is_tuple",
      "atom",
      "binary",
      "bitstring",
      "boolean",
      "function",
      "integer",
      "list",
      "number",
      "pid",
      "port",
      "record",
      "reference",
      "tuple"
    ];
    bifWords = [
      "abs",
      "adler32",
      "adler32_combine",
      "alive",
      "apply",
      "atom_to_binary",
      "atom_to_list",
      "binary_to_atom",
      "binary_to_existing_atom",
      "binary_to_list",
      "binary_to_term",
      "bit_size",
      "bitstring_to_list",
      "byte_size",
      "check_process_code",
      "contact_binary",
      "crc32",
      "crc32_combine",
      "date",
      "decode_packet",
      "delete_module",
      "disconnect_node",
      "element",
      "erase",
      "exit",
      "float",
      "float_to_list",
      "garbage_collect",
      "get",
      "get_keys",
      "group_leader",
      "halt",
      "hd",
      "integer_to_list",
      "internal_bif",
      "iolist_size",
      "iolist_to_binary",
      "is_alive",
      "is_atom",
      "is_binary",
      "is_bitstring",
      "is_boolean",
      "is_float",
      "is_function",
      "is_integer",
      "is_list",
      "is_number",
      "is_pid",
      "is_port",
      "is_process_alive",
      "is_record",
      "is_reference",
      "is_tuple",
      "length",
      "link",
      "list_to_atom",
      "list_to_binary",
      "list_to_bitstring",
      "list_to_existing_atom",
      "list_to_float",
      "list_to_integer",
      "list_to_pid",
      "list_to_tuple",
      "load_module",
      "make_ref",
      "module_loaded",
      "monitor_node",
      "node",
      "node_link",
      "node_unlink",
      "nodes",
      "notalive",
      "now",
      "open_port",
      "pid_to_list",
      "port_close",
      "port_command",
      "port_connect",
      "port_control",
      "pre_loaded",
      "process_flag",
      "process_info",
      "processes",
      "purge_module",
      "put",
      "register",
      "registered",
      "round",
      "self",
      "setelement",
      "size",
      "spawn",
      "spawn_link",
      "spawn_monitor",
      "spawn_opt",
      "split_binary",
      "statistics",
      "term_to_binary",
      "time",
      "throw",
      "tl",
      "trunc",
      "tuple_size",
      "tuple_to_list",
      "unlink",
      "unregister",
      "whereis"
    ];
    anumRE = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
    escapesRE = /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;
    erlang = {
      name: "erlang",
      startState() {
        return {
          tokenStack: [],
          in_string: false,
          in_atom: false
        };
      },
      token: tokenizer,
      indent: indenter,
      languageData: {
        commentTokens: { line: "%" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/sql.js
var sql_exports = {};
__export(sql_exports, {
  cassandra: () => cassandra,
  esper: () => esper,
  gpSQL: () => gpSQL,
  gql: () => gql,
  hive: () => hive,
  mariaDB: () => mariaDB,
  msSQL: () => msSQL,
  mySQL: () => mySQL,
  pgSQL: () => pgSQL,
  plSQL: () => plSQL,
  sparkSQL: () => sparkSQL,
  sql: () => sql2,
  sqlite: () => sqlite,
  standardSQL: () => standardSQL
});
function sql2(parserConfig4) {
  var client = parserConfig4.client || {}, atoms18 = parserConfig4.atoms || { "false": true, "true": true, "null": true }, builtin5 = parserConfig4.builtin || set(defaultBuiltin), keywords49 = parserConfig4.keywords || set(sqlKeywords), operatorChars4 = parserConfig4.operatorChars || /^[*+\-%<>!=&|~^\/]/, support = parserConfig4.support || {}, hooks4 = parserConfig4.hooks || {}, dateSQL = parserConfig4.dateSQL || { "date": true, "time": true, "timestamp": true }, backslashStringEscapes = parserConfig4.backslashStringEscapes !== false, brackets2 = parserConfig4.brackets || /^[\{}\(\)\[\]]/, punctuation3 = parserConfig4.punctuation || /^[;.,:]/;
  function tokenBase48(stream, state) {
    var ch2 = stream.next();
    if (hooks4[ch2]) {
      var result = hooks4[ch2](stream, state);
      if (result !== false) return result;
    }
    if (support.hexNumber && (ch2 == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || (ch2 == "x" || ch2 == "X") && stream.match(/^'[0-9a-fA-F]*'/))) {
      return "number";
    } else if (support.binaryNumber && ((ch2 == "b" || ch2 == "B") && stream.match(/^'[01]+'/) || ch2 == "0" && stream.match(/^b[01]*/))) {
      return "number";
    } else if (ch2.charCodeAt(0) > 47 && ch2.charCodeAt(0) < 58) {
      stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
      support.decimallessFloat && stream.match(/^\.(?!\.)/);
      return "number";
    } else if (ch2 == "?" && (stream.eatSpace() || stream.eol() || stream.eat(";"))) {
      return "macroName";
    } else if (ch2 == "'" || ch2 == '"' && support.doubleQuote) {
      state.tokenize = tokenLiteral3(ch2);
      return state.tokenize(stream, state);
    } else if ((support.nCharCast && (ch2 == "n" || ch2 == "N") || support.charsetCast && ch2 == "_" && stream.match(/[a-z][a-z0-9]*/i)) && (stream.peek() == "'" || stream.peek() == '"')) {
      return "keyword";
    } else if (support.escapeConstant && (ch2 == "e" || ch2 == "E") && (stream.peek() == "'" || stream.peek() == '"' && support.doubleQuote)) {
      state.tokenize = function(stream2, state2) {
        return (state2.tokenize = tokenLiteral3(stream2.next(), true))(stream2, state2);
      };
      return "keyword";
    } else if (support.commentSlashSlash && ch2 == "/" && stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    } else if (support.commentHash && ch2 == "#" || ch2 == "-" && stream.eat("-") && (!support.commentSpaceRequired || stream.eat(" "))) {
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == "/" && stream.eat("*")) {
      state.tokenize = tokenComment22(1);
      return state.tokenize(stream, state);
    } else if (ch2 == ".") {
      if (support.zerolessFloat && stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i))
        return "number";
      if (stream.match(/^\.+/))
        return null;
      if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
        return "type";
    } else if (operatorChars4.test(ch2)) {
      stream.eatWhile(operatorChars4);
      return "operator";
    } else if (brackets2.test(ch2)) {
      return "bracket";
    } else if (punctuation3.test(ch2)) {
      stream.eatWhile(punctuation3);
      return "punctuation";
    } else if (ch2 == "{" && (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))) {
      return "number";
    } else {
      stream.eatWhile(/^[_\w\d]/);
      var word = stream.current().toLowerCase();
      if (dateSQL.hasOwnProperty(word) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+"[^"]*"/)))
        return "number";
      if (atoms18.hasOwnProperty(word)) return "atom";
      if (builtin5.hasOwnProperty(word)) return "type";
      if (keywords49.hasOwnProperty(word)) return "keyword";
      if (client.hasOwnProperty(word)) return "builtin";
      return null;
    }
  }
  function tokenLiteral3(quote4, backslashEscapes) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote4 && !escaped) {
          state.tokenize = tokenBase48;
          break;
        }
        escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch2 == "\\";
      }
      return "string";
    };
  }
  function tokenComment22(depth) {
    return function(stream, state) {
      var m = stream.match(/^.*?(\/\*|\*\/)/);
      if (!m) stream.skipToEnd();
      else if (m[1] == "/*") state.tokenize = tokenComment22(depth + 1);
      else if (depth > 1) state.tokenize = tokenComment22(depth - 1);
      else state.tokenize = tokenBase48;
      return "comment";
    };
  }
  function pushContext18(stream, state, type7) {
    state.context = {
      prev: state.context,
      indent: stream.indentation(),
      col: stream.column(),
      type: type7
    };
  }
  function popContext18(state) {
    state.indent = state.context.indent;
    state.context = state.context.prev;
  }
  return {
    name: "sql",
    startState: function() {
      return { tokenize: tokenBase48, context: null };
    },
    token: function(stream, state) {
      if (stream.sol()) {
        if (state.context && state.context.align == null)
          state.context.align = false;
      }
      if (state.tokenize == tokenBase48 && stream.eatSpace()) return null;
      var style2 = state.tokenize(stream, state);
      if (style2 == "comment") return style2;
      if (state.context && state.context.align == null)
        state.context.align = true;
      var tok = stream.current();
      if (tok == "(")
        pushContext18(stream, state, ")");
      else if (tok == "[")
        pushContext18(stream, state, "]");
      else if (state.context && state.context.type == tok)
        popContext18(state);
      return style2;
    },
    indent: function(state, textAfter, iCx) {
      var cx2 = state.context;
      if (!cx2) return null;
      var closing4 = textAfter.charAt(0) == cx2.type;
      if (cx2.align) return cx2.col + (closing4 ? 0 : 1);
      else return cx2.indent + (closing4 ? 0 : iCx.unit);
    },
    languageData: {
      commentTokens: {
        line: support.commentSlashSlash ? "//" : support.commentHash ? "#" : "--",
        block: { open: "/*", close: "*/" }
      },
      closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
    }
  };
}
function hookIdentifier(stream) {
  var ch2;
  while ((ch2 = stream.next()) != null) {
    if (ch2 == "`" && !stream.eat("`")) return "string.special";
  }
  stream.backUp(stream.current().length - 1);
  return stream.eatWhile(/\w/) ? "string.special" : null;
}
function hookIdentifierDoublequote(stream) {
  var ch2;
  while ((ch2 = stream.next()) != null) {
    if (ch2 == '"' && !stream.eat('"')) return "string.special";
  }
  stream.backUp(stream.current().length - 1);
  return stream.eatWhile(/\w/) ? "string.special" : null;
}
function hookVar(stream) {
  if (stream.eat("@")) {
    stream.match("session.");
    stream.match("local.");
    stream.match("global.");
  }
  if (stream.eat("'")) {
    stream.match(/^.*'/);
    return "string.special";
  } else if (stream.eat('"')) {
    stream.match(/^.*"/);
    return "string.special";
  } else if (stream.eat("`")) {
    stream.match(/^.*`/);
    return "string.special";
  } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
    return "string.special";
  }
  return null;
}
function hookClient(stream) {
  if (stream.eat("N")) {
    return "atom";
  }
  return stream.match(/^[a-zA-Z.#!?]/) ? "string.special" : null;
}
function set(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
var sqlKeywords, defaultBuiltin, standardSQL, msSQL, mySQL, mariaDB, sqlite, cassandra, plSQL, hive, pgSQL, gql, gpSQL, sparkSQL, esper;
var init_sql = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/sql.js"() {
    sqlKeywords = "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";
    defaultBuiltin = "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";
    standardSQL = sql2({
      keywords: set(sqlKeywords + "begin"),
      builtin: set(defaultBuiltin),
      atoms: set("false true null unknown"),
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
    });
    msSQL = sql2({
      client: set("$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"),
      keywords: set(sqlKeywords + "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"),
      builtin: set("bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "),
      atoms: set("is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"),
      operatorChars: /^[*+\-%<>!=^\&|\/]/,
      brackets: /^[\{}\(\)]/,
      punctuation: /^[;.,:/]/,
      backslashStringEscapes: false,
      dateSQL: set("date datetimeoffset datetime2 smalldatetime datetime time"),
      hooks: {
        "@": hookVar
      }
    });
    mySQL = sql2({
      client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
      keywords: set(sqlKeywords + "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
      builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=&|^]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
      hooks: {
        "@": hookVar,
        "`": hookIdentifier,
        "\\": hookClient
      }
    });
    mariaDB = sql2({
      client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
      keywords: set(sqlKeywords + "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group group_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
      builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=&|^]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
      hooks: {
        "@": hookVar,
        "`": hookIdentifier,
        "\\": hookClient
      }
    });
    sqlite = sql2({
      // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
      client: set("auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"),
      // ref: http://sqlite.org/lang_keywords.html
      keywords: set(sqlKeywords + "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"),
      // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
      builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"),
      // ref: http://sqlite.org/syntax/literal-value.html
      atoms: set("null current_date current_time current_timestamp"),
      // ref: http://sqlite.org/lang_expr.html#binaryops
      operatorChars: /^[*+\-%<>!=&|/~]/,
      // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
      dateSQL: set("date time timestamp datetime"),
      support: set("decimallessFloat zerolessFloat"),
      identifierQuote: '"',
      //ref: http://sqlite.org/lang_keywords.html
      hooks: {
        // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
        "@": hookVar,
        ":": hookVar,
        "?": hookVar,
        "$": hookVar,
        // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
        '"': hookIdentifierDoublequote,
        // there is also support for backticks, ref: http://sqlite.org/lang_keywords.html
        "`": hookIdentifier
      }
    });
    cassandra = sql2({
      client: {},
      keywords: set("add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"),
      builtin: set("ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"),
      atoms: set("false true infinity NaN"),
      operatorChars: /^[<>=]/,
      dateSQL: {},
      support: set("commentSlashSlash decimallessFloat"),
      hooks: {}
    });
    plSQL = sql2({
      client: set("appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"),
      keywords: set("abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"),
      builtin: set("abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"),
      operatorChars: /^[*\/+\-%<>!=~]/,
      dateSQL: set("date time timestamp"),
      support: set("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")
    });
    hive = sql2({
      keywords: set("select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"),
      builtin: set("bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=]/,
      dateSQL: set("date timestamp"),
      support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
    });
    pgSQL = sql2({
      client: set("source"),
      // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
      // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
      keywords: set(sqlKeywords + "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"),
      // https://www.postgresql.org/docs/11/datatype.html
      builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
      backslashStringEscapes: false,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant")
    });
    gql = sql2({
      keywords: set("ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"),
      atoms: set("false true"),
      builtin: set("blob datetime first key __key__ string integer double boolean null"),
      operatorChars: /^[*+\-%<>!=]/
    });
    gpSQL = sql2({
      client: set("source"),
      //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
      keywords: set("abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"),
      builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
      atoms: set("false true null unknown"),
      operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast")
    });
    sparkSQL = sql2({
      keywords: set("add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"),
      builtin: set("tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"),
      atoms: set("false true null"),
      operatorChars: /^[*\/+\-%<>!=~&|^]/,
      dateSQL: set("date time timestamp"),
      support: set("ODBCdotTable doubleQuote zerolessFloat")
    });
    esper = sql2({
      client: set("source"),
      // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
      keywords: set("alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"),
      builtin: {},
      atoms: set("false true null"),
      operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
      dateSQL: set("time"),
      support: set("decimallessFloat zerolessFloat binaryNumber hexNumber")
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/factor.js
var factor_exports = {};
__export(factor_exports, {
  factor: () => factor
});
var factor;
var init_factor = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/factor.js"() {
    init_simple_mode();
    factor = simpleMode({
      start: [
        // comments
        { regex: /#?!.*/, token: "comment" },
        // strings """, multiline --> state
        { regex: /"""/, token: "string", next: "string3" },
        { regex: /(STRING:)(\s)/, token: ["keyword", null], next: "string2" },
        { regex: /\S*?"/, token: "string", next: "string" },
        // numbers: dec, hex, unicode, bin, fractional, complex
        { regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/, token: "number" },
        //{regex: /[+-]?/} //fractional
        // definition: defining word, defined word, etc
        { regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/, token: ["keyword", null, "def", null, "bracket"], next: "stack" },
        // method definition: defining word, type, defined word, etc
        { regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/, token: ["keyword", null, "def", null, "tag"] },
        // vocabulary using --> state
        { regex: /USING\:/, token: "keyword", next: "vocabulary" },
        // vocabulary definition/use
        { regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "tag"] },
        // definition: a defining word, defined word
        { regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "def"] },
        // "keywords", incl. ; t f . [ ] { } defining words
        { regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/, token: "keyword" },
        // <constructors> and the like
        { regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin" },
        { regex: /[\)><]+\S+(?=\s|$)/, token: "builtin" },
        // operators
        { regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword" },
        // any id (?)
        { regex: /\S+/, token: "variable" },
        { regex: /\s+|./, token: null }
      ],
      vocabulary: [
        { regex: /;/, token: "keyword", next: "start" },
        { regex: /\S+/, token: "tag" },
        { regex: /\s+|./, token: null }
      ],
      string: [
        { regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start" },
        { regex: /.*/, token: "string" }
      ],
      string2: [
        { regex: /^;/, token: "keyword", next: "start" },
        { regex: /.*/, token: "string" }
      ],
      string3: [
        { regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start" },
        { regex: /.*/, token: "string" }
      ],
      stack: [
        { regex: /\)/, token: "bracket", next: "start" },
        { regex: /--/, token: "bracket" },
        { regex: /\S+/, token: "meta" },
        { regex: /\s+|./, token: null }
      ],
      languageData: {
        name: "factor",
        dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
        commentTokens: { line: "!" }
      }
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/fcl.js
var fcl_exports = {};
__export(fcl_exports, {
  fcl: () => fcl
});
function tokenBase9(stream, state) {
  var ch2 = stream.next();
  if (/[\d\.]/.test(ch2)) {
    if (ch2 == ".") {
      stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
    } else if (ch2 == "0") {
      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
    } else {
      stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
    }
    return "number";
  }
  if (ch2 == "/" || ch2 == "(") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment4;
      return tokenComment4(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar3.test(ch2)) {
    stream.eatWhile(isOperatorChar3);
    return "operator";
  }
  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
  var cur2 = stream.current().toLowerCase();
  if (keywords12.propertyIsEnumerable(cur2) || start_blocks.propertyIsEnumerable(cur2) || end_blocks.propertyIsEnumerable(cur2)) {
    return "keyword";
  }
  if (atoms6.propertyIsEnumerable(cur2)) return "atom";
  return "variable";
}
function tokenComment4(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if ((ch2 == "/" || ch2 == ")") && maybeEnd) {
      state.tokenize = tokenBase9;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function Context7(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext5(state, col, type7) {
  return state.context = new Context7(state.indented, col, type7, null, state.context);
}
function popContext5(state) {
  if (!state.context.prev) return;
  var t2 = state.context.type;
  if (t2 == "end_block")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var keywords12, start_blocks, end_blocks, atoms6, isOperatorChar3, fcl;
var init_fcl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/fcl.js"() {
    keywords12 = {
      "term": true,
      "method": true,
      "accu": true,
      "rule": true,
      "then": true,
      "is": true,
      "and": true,
      "or": true,
      "if": true,
      "default": true
    };
    start_blocks = {
      "var_input": true,
      "var_output": true,
      "fuzzify": true,
      "defuzzify": true,
      "function_block": true,
      "ruleblock": true
    };
    end_blocks = {
      "end_ruleblock": true,
      "end_defuzzify": true,
      "end_function_block": true,
      "end_fuzzify": true,
      "end_var": true
    };
    atoms6 = {
      "true": true,
      "false": true,
      "nan": true,
      "real": true,
      "min": true,
      "max": true,
      "cog": true,
      "cogs": true
    };
    isOperatorChar3 = /[+\-*&^%:=<>!|\/]/;
    fcl = {
      name: "fcl",
      startState: function(indentUnit2) {
        return {
          tokenize: null,
          context: new Context7(-indentUnit2, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        var style2 = (state.tokenize || tokenBase9)(stream, state);
        if (style2 == "comment") return style2;
        if (ctx.align == null) ctx.align = true;
        var cur2 = stream.current().toLowerCase();
        if (start_blocks.propertyIsEnumerable(cur2)) pushContext5(state, stream.column(), "end_block");
        else if (end_blocks.propertyIsEnumerable(cur2)) popContext5(state);
        state.startOfLine = false;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase9 && state.tokenize != null) return 0;
        var ctx = state.context;
        var closing4 = end_blocks.propertyIsEnumerable(textAfter);
        if (ctx.align) return ctx.column + (closing4 ? 0 : 1);
        else return ctx.indented + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        commentTokens: { line: "//", block: { open: "(*", close: "*)" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/forth.js
var forth_exports = {};
__export(forth_exports, {
  forth: () => forth
});
function toWordList(words22) {
  var ret4 = [];
  words22.split(" ").forEach(function(e) {
    ret4.push({ name: e });
  });
  return ret4;
}
function searchWordList(wordList2, word) {
  var i;
  for (i = wordList2.length - 1; i >= 0; i--) {
    if (wordList2[i].name === word.toUpperCase()) {
      return wordList2[i];
    }
  }
  return void 0;
}
var coreWordList, immediateWordList, forth;
var init_forth = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/forth.js"() {
    coreWordList = toWordList(
      "INVERT AND OR XOR 2* 2/ LSHIFT RSHIFT 0= = 0< < > U< MIN MAX 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP >R R> R@ + - 1+ 1- ABS NEGATE S>D * M* UM* FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2! ALIGN ALIGNED +! ALLOT CHAR [CHAR] [ ] BL FIND EXECUTE IMMEDIATE COUNT LITERAL STATE ; DOES> >BODY EVALUATE SOURCE >IN <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL FILL MOVE . CR EMIT SPACE SPACES TYPE U. .R U.R ACCEPT TRUE FALSE <> U> 0<> 0> NIP TUCK ROLL PICK 2>R 2R@ 2R> WITHIN UNUSED MARKER I J TO COMPILE, [COMPILE] SAVE-INPUT RESTORE-INPUT PAD ERASE 2LITERAL DNEGATE D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS M+ M*/ D. D.R 2ROT DU< CATCH THROW FREE RESIZE ALLOCATE CS-PICK CS-ROLL GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL"
    );
    immediateWordList = toWordList("IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE");
    forth = {
      name: "forth",
      startState: function() {
        return {
          state: "",
          base: 10,
          coreWordList,
          immediateWordList,
          wordList: []
        };
      },
      token: function(stream, stt) {
        var mat;
        if (stream.eatSpace()) {
          return null;
        }
        if (stt.state === "") {
          if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
            stt.state = " compilation";
            return "builtin";
          }
          mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
          if (mat) {
            stt.wordList.push({ name: mat[2].toUpperCase() });
            stt.state = " compilation";
            return "def";
          }
          mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
          if (mat) {
            stt.wordList.push({ name: mat[2].toUpperCase() });
            return "def";
          }
          mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
          if (mat) {
            return "builtin";
          }
        } else {
          if (stream.match(/^(\;|\[)(\s)/)) {
            stt.state = "";
            stream.backUp(1);
            return "builtin";
          }
          if (stream.match(/^(\;|\[)($)/)) {
            stt.state = "";
            return "builtin";
          }
          if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
            return "builtin";
          }
        }
        mat = stream.match(/^(\S+)(\s+|$)/);
        if (mat) {
          if (searchWordList(stt.wordList, mat[1]) !== void 0) {
            return "variable";
          }
          if (mat[1] === "\\") {
            stream.skipToEnd();
            return "comment";
          }
          if (searchWordList(stt.coreWordList, mat[1]) !== void 0) {
            return "builtin";
          }
          if (searchWordList(stt.immediateWordList, mat[1]) !== void 0) {
            return "keyword";
          }
          if (mat[1] === "(") {
            stream.eatWhile(function(s) {
              return s !== ")";
            });
            stream.eat(")");
            return "comment";
          }
          if (mat[1] === ".(") {
            stream.eatWhile(function(s) {
              return s !== ")";
            });
            stream.eat(")");
            return "string";
          }
          if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
            stream.eatWhile(function(s) {
              return s !== '"';
            });
            stream.eat('"');
            return "string";
          }
          if (mat[1] - 68719476735) {
            return "number";
          }
          return "atom";
        }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/fortran.js
var fortran_exports = {};
__export(fortran_exports, {
  fortran: () => fortran
});
function words7(array2) {
  var keys2 = {};
  for (var i = 0; i < array2.length; ++i) {
    keys2[array2[i]] = true;
  }
  return keys2;
}
function tokenBase10(stream, state) {
  if (stream.match(litOperator)) {
    return "operator";
  }
  var ch2 = stream.next();
  if (ch2 == "!") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString6(ch2);
    return state.tokenize(stream, state);
  }
  if (/[\[\]\(\),]/.test(ch2)) {
    return null;
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  if (isOperatorChar4.test(ch2)) {
    stream.eatWhile(isOperatorChar4);
    return "operator";
  }
  stream.eatWhile(/[\w\$_]/);
  var word = stream.current().toLowerCase();
  if (keywords13.hasOwnProperty(word)) {
    return "keyword";
  }
  if (builtins2.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {
    return "builtin";
  }
  return "variable";
}
function tokenString6(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !escaped) state.tokenize = null;
    return "string";
  };
}
var keywords13, builtins2, dataTypes, isOperatorChar4, litOperator, fortran;
var init_fortran = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/fortran.js"() {
    keywords13 = words7([
      "abstract",
      "accept",
      "allocatable",
      "allocate",
      "array",
      "assign",
      "asynchronous",
      "backspace",
      "bind",
      "block",
      "byte",
      "call",
      "case",
      "class",
      "close",
      "common",
      "contains",
      "continue",
      "cycle",
      "data",
      "deallocate",
      "decode",
      "deferred",
      "dimension",
      "do",
      "elemental",
      "else",
      "encode",
      "end",
      "endif",
      "entry",
      "enumerator",
      "equivalence",
      "exit",
      "external",
      "extrinsic",
      "final",
      "forall",
      "format",
      "function",
      "generic",
      "go",
      "goto",
      "if",
      "implicit",
      "import",
      "include",
      "inquire",
      "intent",
      "interface",
      "intrinsic",
      "module",
      "namelist",
      "non_intrinsic",
      "non_overridable",
      "none",
      "nopass",
      "nullify",
      "open",
      "optional",
      "options",
      "parameter",
      "pass",
      "pause",
      "pointer",
      "print",
      "private",
      "program",
      "protected",
      "public",
      "pure",
      "read",
      "recursive",
      "result",
      "return",
      "rewind",
      "save",
      "select",
      "sequence",
      "stop",
      "subroutine",
      "target",
      "then",
      "to",
      "type",
      "use",
      "value",
      "volatile",
      "where",
      "while",
      "write"
    ]);
    builtins2 = words7([
      "abort",
      "abs",
      "access",
      "achar",
      "acos",
      "adjustl",
      "adjustr",
      "aimag",
      "aint",
      "alarm",
      "all",
      "allocated",
      "alog",
      "amax",
      "amin",
      "amod",
      "and",
      "anint",
      "any",
      "asin",
      "associated",
      "atan",
      "besj",
      "besjn",
      "besy",
      "besyn",
      "bit_size",
      "btest",
      "cabs",
      "ccos",
      "ceiling",
      "cexp",
      "char",
      "chdir",
      "chmod",
      "clog",
      "cmplx",
      "command_argument_count",
      "complex",
      "conjg",
      "cos",
      "cosh",
      "count",
      "cpu_time",
      "cshift",
      "csin",
      "csqrt",
      "ctime",
      "c_funloc",
      "c_loc",
      "c_associated",
      "c_null_ptr",
      "c_null_funptr",
      "c_f_pointer",
      "c_null_char",
      "c_alert",
      "c_backspace",
      "c_form_feed",
      "c_new_line",
      "c_carriage_return",
      "c_horizontal_tab",
      "c_vertical_tab",
      "dabs",
      "dacos",
      "dasin",
      "datan",
      "date_and_time",
      "dbesj",
      "dbesj",
      "dbesjn",
      "dbesy",
      "dbesy",
      "dbesyn",
      "dble",
      "dcos",
      "dcosh",
      "ddim",
      "derf",
      "derfc",
      "dexp",
      "digits",
      "dim",
      "dint",
      "dlog",
      "dlog",
      "dmax",
      "dmin",
      "dmod",
      "dnint",
      "dot_product",
      "dprod",
      "dsign",
      "dsinh",
      "dsin",
      "dsqrt",
      "dtanh",
      "dtan",
      "dtime",
      "eoshift",
      "epsilon",
      "erf",
      "erfc",
      "etime",
      "exit",
      "exp",
      "exponent",
      "extends_type_of",
      "fdate",
      "fget",
      "fgetc",
      "float",
      "floor",
      "flush",
      "fnum",
      "fputc",
      "fput",
      "fraction",
      "fseek",
      "fstat",
      "ftell",
      "gerror",
      "getarg",
      "get_command",
      "get_command_argument",
      "get_environment_variable",
      "getcwd",
      "getenv",
      "getgid",
      "getlog",
      "getpid",
      "getuid",
      "gmtime",
      "hostnm",
      "huge",
      "iabs",
      "iachar",
      "iand",
      "iargc",
      "ibclr",
      "ibits",
      "ibset",
      "ichar",
      "idate",
      "idim",
      "idint",
      "idnint",
      "ieor",
      "ierrno",
      "ifix",
      "imag",
      "imagpart",
      "index",
      "int",
      "ior",
      "irand",
      "isatty",
      "ishft",
      "ishftc",
      "isign",
      "iso_c_binding",
      "is_iostat_end",
      "is_iostat_eor",
      "itime",
      "kill",
      "kind",
      "lbound",
      "len",
      "len_trim",
      "lge",
      "lgt",
      "link",
      "lle",
      "llt",
      "lnblnk",
      "loc",
      "log",
      "logical",
      "long",
      "lshift",
      "lstat",
      "ltime",
      "matmul",
      "max",
      "maxexponent",
      "maxloc",
      "maxval",
      "mclock",
      "merge",
      "move_alloc",
      "min",
      "minexponent",
      "minloc",
      "minval",
      "mod",
      "modulo",
      "mvbits",
      "nearest",
      "new_line",
      "nint",
      "not",
      "or",
      "pack",
      "perror",
      "precision",
      "present",
      "product",
      "radix",
      "rand",
      "random_number",
      "random_seed",
      "range",
      "real",
      "realpart",
      "rename",
      "repeat",
      "reshape",
      "rrspacing",
      "rshift",
      "same_type_as",
      "scale",
      "scan",
      "second",
      "selected_int_kind",
      "selected_real_kind",
      "set_exponent",
      "shape",
      "short",
      "sign",
      "signal",
      "sinh",
      "sin",
      "sleep",
      "sngl",
      "spacing",
      "spread",
      "sqrt",
      "srand",
      "stat",
      "sum",
      "symlnk",
      "system",
      "system_clock",
      "tan",
      "tanh",
      "time",
      "tiny",
      "transfer",
      "transpose",
      "trim",
      "ttynam",
      "ubound",
      "umask",
      "unlink",
      "unpack",
      "verify",
      "xor",
      "zabs",
      "zcos",
      "zexp",
      "zlog",
      "zsin",
      "zsqrt"
    ]);
    dataTypes = words7([
      "c_bool",
      "c_char",
      "c_double",
      "c_double_complex",
      "c_float",
      "c_float_complex",
      "c_funptr",
      "c_int",
      "c_int16_t",
      "c_int32_t",
      "c_int64_t",
      "c_int8_t",
      "c_int_fast16_t",
      "c_int_fast32_t",
      "c_int_fast64_t",
      "c_int_fast8_t",
      "c_int_least16_t",
      "c_int_least32_t",
      "c_int_least64_t",
      "c_int_least8_t",
      "c_intmax_t",
      "c_intptr_t",
      "c_long",
      "c_long_double",
      "c_long_double_complex",
      "c_long_long",
      "c_ptr",
      "c_short",
      "c_signed_char",
      "c_size_t",
      "character",
      "complex",
      "double",
      "integer",
      "logical",
      "real"
    ]);
    isOperatorChar4 = /[+\-*&=<>\/\:]/;
    litOperator = /^\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\./i;
    fortran = {
      name: "fortran",
      startState: function() {
        return { tokenize: null };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = (state.tokenize || tokenBase10)(stream, state);
        if (style2 == "comment" || style2 == "meta") return style2;
        return style2;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/mllike.js
var mllike_exports = {};
__export(mllike_exports, {
  fSharp: () => fSharp,
  oCaml: () => oCaml,
  sml: () => sml
});
function mlLike(parserConfig4) {
  var words22 = {
    "as": "keyword",
    "do": "keyword",
    "else": "keyword",
    "end": "keyword",
    "exception": "keyword",
    "fun": "keyword",
    "functor": "keyword",
    "if": "keyword",
    "in": "keyword",
    "include": "keyword",
    "let": "keyword",
    "of": "keyword",
    "open": "keyword",
    "rec": "keyword",
    "struct": "keyword",
    "then": "keyword",
    "type": "keyword",
    "val": "keyword",
    "while": "keyword",
    "with": "keyword"
  };
  var extraWords = parserConfig4.extraWords || {};
  for (var prop in extraWords) {
    if (extraWords.hasOwnProperty(prop)) {
      words22[prop] = parserConfig4.extraWords[prop];
    }
  }
  var hintWords2 = [];
  for (var k in words22) {
    hintWords2.push(k);
  }
  function tokenBase48(stream, state) {
    var ch2 = stream.next();
    if (ch2 === '"') {
      state.tokenize = tokenString31;
      return state.tokenize(stream, state);
    }
    if (ch2 === "{") {
      if (stream.eat("|")) {
        state.longString = true;
        state.tokenize = tokenLongString;
        return state.tokenize(stream, state);
      }
    }
    if (ch2 === "(") {
      if (stream.match(/^\*(?!\))/)) {
        state.commentLevel++;
        state.tokenize = tokenComment22;
        return state.tokenize(stream, state);
      }
    }
    if (ch2 === "~" || ch2 === "?") {
      stream.eatWhile(/\w/);
      return "variableName.special";
    }
    if (ch2 === "`") {
      stream.eatWhile(/\w/);
      return "quote";
    }
    if (ch2 === "/" && parserConfig4.slashComments && stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
    if (/\d/.test(ch2)) {
      if (ch2 === "0" && stream.eat(/[bB]/)) {
        stream.eatWhile(/[01]/);
      }
      if (ch2 === "0" && stream.eat(/[xX]/)) {
        stream.eatWhile(/[0-9a-fA-F]/);
      }
      if (ch2 === "0" && stream.eat(/[oO]/)) {
        stream.eatWhile(/[0-7]/);
      } else {
        stream.eatWhile(/[\d_]/);
        if (stream.eat(".")) {
          stream.eatWhile(/[\d]/);
        }
        if (stream.eat(/[eE]/)) {
          stream.eatWhile(/[\d\-+]/);
        }
      }
      return "number";
    }
    if (/[+\-*&%=<>!?|@\.~:]/.test(ch2)) {
      return "operator";
    }
    if (/[\w\xa1-\uffff]/.test(ch2)) {
      stream.eatWhile(/[\w\xa1-\uffff]/);
      var cur2 = stream.current();
      return words22.hasOwnProperty(cur2) ? words22[cur2] : "variable";
    }
    return null;
  }
  function tokenString31(stream, state) {
    var next2, end2 = false, escaped = false;
    while ((next2 = stream.next()) != null) {
      if (next2 === '"' && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 === "\\";
    }
    if (end2 && !escaped) {
      state.tokenize = tokenBase48;
    }
    return "string";
  }
  ;
  function tokenComment22(stream, state) {
    var prev, next2;
    while (state.commentLevel > 0 && (next2 = stream.next()) != null) {
      if (prev === "(" && next2 === "*") state.commentLevel++;
      if (prev === "*" && next2 === ")") state.commentLevel--;
      prev = next2;
    }
    if (state.commentLevel <= 0) {
      state.tokenize = tokenBase48;
    }
    return "comment";
  }
  function tokenLongString(stream, state) {
    var prev, next2;
    while (state.longString && (next2 = stream.next()) != null) {
      if (prev === "|" && next2 === "}") state.longString = false;
      prev = next2;
    }
    if (!state.longString) {
      state.tokenize = tokenBase48;
    }
    return "string";
  }
  return {
    startState: function() {
      return { tokenize: tokenBase48, commentLevel: 0, longString: false };
    },
    token: function(stream, state) {
      if (stream.eatSpace()) return null;
      return state.tokenize(stream, state);
    },
    languageData: {
      autocomplete: hintWords2,
      commentTokens: {
        line: parserConfig4.slashComments ? "//" : void 0,
        block: { open: "(*", close: "*)" }
      }
    }
  };
}
var oCaml, fSharp, sml;
var init_mllike = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/mllike.js"() {
    oCaml = mlLike({
      name: "ocaml",
      extraWords: {
        "and": "keyword",
        "assert": "keyword",
        "begin": "keyword",
        "class": "keyword",
        "constraint": "keyword",
        "done": "keyword",
        "downto": "keyword",
        "external": "keyword",
        "function": "keyword",
        "initializer": "keyword",
        "lazy": "keyword",
        "match": "keyword",
        "method": "keyword",
        "module": "keyword",
        "mutable": "keyword",
        "new": "keyword",
        "nonrec": "keyword",
        "object": "keyword",
        "private": "keyword",
        "sig": "keyword",
        "to": "keyword",
        "try": "keyword",
        "value": "keyword",
        "virtual": "keyword",
        "when": "keyword",
        // builtins
        "raise": "builtin",
        "failwith": "builtin",
        "true": "builtin",
        "false": "builtin",
        // Pervasives builtins
        "asr": "builtin",
        "land": "builtin",
        "lor": "builtin",
        "lsl": "builtin",
        "lsr": "builtin",
        "lxor": "builtin",
        "mod": "builtin",
        "or": "builtin",
        // More Pervasives
        "raise_notrace": "builtin",
        "trace": "builtin",
        "exit": "builtin",
        "print_string": "builtin",
        "print_endline": "builtin",
        "int": "type",
        "float": "type",
        "bool": "type",
        "char": "type",
        "string": "type",
        "unit": "type",
        // Modules
        "List": "builtin"
      }
    });
    fSharp = mlLike({
      name: "fsharp",
      extraWords: {
        "abstract": "keyword",
        "assert": "keyword",
        "base": "keyword",
        "begin": "keyword",
        "class": "keyword",
        "default": "keyword",
        "delegate": "keyword",
        "do!": "keyword",
        "done": "keyword",
        "downcast": "keyword",
        "downto": "keyword",
        "elif": "keyword",
        "extern": "keyword",
        "finally": "keyword",
        "for": "keyword",
        "function": "keyword",
        "global": "keyword",
        "inherit": "keyword",
        "inline": "keyword",
        "interface": "keyword",
        "internal": "keyword",
        "lazy": "keyword",
        "let!": "keyword",
        "match": "keyword",
        "member": "keyword",
        "module": "keyword",
        "mutable": "keyword",
        "namespace": "keyword",
        "new": "keyword",
        "null": "keyword",
        "override": "keyword",
        "private": "keyword",
        "public": "keyword",
        "return!": "keyword",
        "return": "keyword",
        "select": "keyword",
        "static": "keyword",
        "to": "keyword",
        "try": "keyword",
        "upcast": "keyword",
        "use!": "keyword",
        "use": "keyword",
        "void": "keyword",
        "when": "keyword",
        "yield!": "keyword",
        "yield": "keyword",
        // Reserved words
        "atomic": "keyword",
        "break": "keyword",
        "checked": "keyword",
        "component": "keyword",
        "const": "keyword",
        "constraint": "keyword",
        "constructor": "keyword",
        "continue": "keyword",
        "eager": "keyword",
        "event": "keyword",
        "external": "keyword",
        "fixed": "keyword",
        "method": "keyword",
        "mixin": "keyword",
        "object": "keyword",
        "parallel": "keyword",
        "process": "keyword",
        "protected": "keyword",
        "pure": "keyword",
        "sealed": "keyword",
        "tailcall": "keyword",
        "trait": "keyword",
        "virtual": "keyword",
        "volatile": "keyword",
        // builtins
        "List": "builtin",
        "Seq": "builtin",
        "Map": "builtin",
        "Set": "builtin",
        "Option": "builtin",
        "int": "builtin",
        "string": "builtin",
        "not": "builtin",
        "true": "builtin",
        "false": "builtin",
        "raise": "builtin",
        "failwith": "builtin"
      },
      slashComments: true
    });
    sml = mlLike({
      name: "sml",
      extraWords: {
        "abstype": "keyword",
        "and": "keyword",
        "andalso": "keyword",
        "case": "keyword",
        "datatype": "keyword",
        "fn": "keyword",
        "handle": "keyword",
        "infix": "keyword",
        "infixr": "keyword",
        "local": "keyword",
        "nonfix": "keyword",
        "op": "keyword",
        "orelse": "keyword",
        "raise": "keyword",
        "withtype": "keyword",
        "eqtype": "keyword",
        "sharing": "keyword",
        "sig": "keyword",
        "signature": "keyword",
        "structure": "keyword",
        "where": "keyword",
        "true": "keyword",
        "false": "keyword",
        // types
        "int": "builtin",
        "real": "builtin",
        "string": "builtin",
        "char": "builtin",
        "bool": "builtin"
      },
      slashComments: true
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/gas.js
var gas_exports = {};
__export(gas_exports, {
  gas: () => gas,
  gasArm: () => gasArm
});
function mkGas(arch2) {
  var custom = [];
  var lineCommentStartSymbol = "";
  var directives = {
    ".abort": "builtin",
    ".align": "builtin",
    ".altmacro": "builtin",
    ".ascii": "builtin",
    ".asciz": "builtin",
    ".balign": "builtin",
    ".balignw": "builtin",
    ".balignl": "builtin",
    ".bundle_align_mode": "builtin",
    ".bundle_lock": "builtin",
    ".bundle_unlock": "builtin",
    ".byte": "builtin",
    ".cfi_startproc": "builtin",
    ".comm": "builtin",
    ".data": "builtin",
    ".def": "builtin",
    ".desc": "builtin",
    ".dim": "builtin",
    ".double": "builtin",
    ".eject": "builtin",
    ".else": "builtin",
    ".elseif": "builtin",
    ".end": "builtin",
    ".endef": "builtin",
    ".endfunc": "builtin",
    ".endif": "builtin",
    ".equ": "builtin",
    ".equiv": "builtin",
    ".eqv": "builtin",
    ".err": "builtin",
    ".error": "builtin",
    ".exitm": "builtin",
    ".extern": "builtin",
    ".fail": "builtin",
    ".file": "builtin",
    ".fill": "builtin",
    ".float": "builtin",
    ".func": "builtin",
    ".global": "builtin",
    ".gnu_attribute": "builtin",
    ".hidden": "builtin",
    ".hword": "builtin",
    ".ident": "builtin",
    ".if": "builtin",
    ".incbin": "builtin",
    ".include": "builtin",
    ".int": "builtin",
    ".internal": "builtin",
    ".irp": "builtin",
    ".irpc": "builtin",
    ".lcomm": "builtin",
    ".lflags": "builtin",
    ".line": "builtin",
    ".linkonce": "builtin",
    ".list": "builtin",
    ".ln": "builtin",
    ".loc": "builtin",
    ".loc_mark_labels": "builtin",
    ".local": "builtin",
    ".long": "builtin",
    ".macro": "builtin",
    ".mri": "builtin",
    ".noaltmacro": "builtin",
    ".nolist": "builtin",
    ".octa": "builtin",
    ".offset": "builtin",
    ".org": "builtin",
    ".p2align": "builtin",
    ".popsection": "builtin",
    ".previous": "builtin",
    ".print": "builtin",
    ".protected": "builtin",
    ".psize": "builtin",
    ".purgem": "builtin",
    ".pushsection": "builtin",
    ".quad": "builtin",
    ".reloc": "builtin",
    ".rept": "builtin",
    ".sbttl": "builtin",
    ".scl": "builtin",
    ".section": "builtin",
    ".set": "builtin",
    ".short": "builtin",
    ".single": "builtin",
    ".size": "builtin",
    ".skip": "builtin",
    ".sleb128": "builtin",
    ".space": "builtin",
    ".stab": "builtin",
    ".string": "builtin",
    ".struct": "builtin",
    ".subsection": "builtin",
    ".symver": "builtin",
    ".tag": "builtin",
    ".text": "builtin",
    ".title": "builtin",
    ".type": "builtin",
    ".uleb128": "builtin",
    ".val": "builtin",
    ".version": "builtin",
    ".vtable_entry": "builtin",
    ".vtable_inherit": "builtin",
    ".warning": "builtin",
    ".weak": "builtin",
    ".weakref": "builtin",
    ".word": "builtin"
  };
  var registers = {};
  function x86() {
    lineCommentStartSymbol = "#";
    registers.al = "variable";
    registers.ah = "variable";
    registers.ax = "variable";
    registers.eax = "variableName.special";
    registers.rax = "variableName.special";
    registers.bl = "variable";
    registers.bh = "variable";
    registers.bx = "variable";
    registers.ebx = "variableName.special";
    registers.rbx = "variableName.special";
    registers.cl = "variable";
    registers.ch = "variable";
    registers.cx = "variable";
    registers.ecx = "variableName.special";
    registers.rcx = "variableName.special";
    registers.dl = "variable";
    registers.dh = "variable";
    registers.dx = "variable";
    registers.edx = "variableName.special";
    registers.rdx = "variableName.special";
    registers.si = "variable";
    registers.esi = "variableName.special";
    registers.rsi = "variableName.special";
    registers.di = "variable";
    registers.edi = "variableName.special";
    registers.rdi = "variableName.special";
    registers.sp = "variable";
    registers.esp = "variableName.special";
    registers.rsp = "variableName.special";
    registers.bp = "variable";
    registers.ebp = "variableName.special";
    registers.rbp = "variableName.special";
    registers.ip = "variable";
    registers.eip = "variableName.special";
    registers.rip = "variableName.special";
    registers.cs = "keyword";
    registers.ds = "keyword";
    registers.ss = "keyword";
    registers.es = "keyword";
    registers.fs = "keyword";
    registers.gs = "keyword";
  }
  function armv6() {
    lineCommentStartSymbol = "@";
    directives.syntax = "builtin";
    registers.r0 = "variable";
    registers.r1 = "variable";
    registers.r2 = "variable";
    registers.r3 = "variable";
    registers.r4 = "variable";
    registers.r5 = "variable";
    registers.r6 = "variable";
    registers.r7 = "variable";
    registers.r8 = "variable";
    registers.r9 = "variable";
    registers.r10 = "variable";
    registers.r11 = "variable";
    registers.r12 = "variable";
    registers.sp = "variableName.special";
    registers.lr = "variableName.special";
    registers.pc = "variableName.special";
    registers.r13 = registers.sp;
    registers.r14 = registers.lr;
    registers.r15 = registers.pc;
    custom.push(function(ch2, stream) {
      if (ch2 === "#") {
        stream.eatWhile(/\w/);
        return "number";
      }
    });
  }
  if (arch2 === "x86") {
    x86();
  } else if (arch2 === "arm" || arch2 === "armv6") {
    armv6();
  }
  function nextUntilUnescaped(stream, end2) {
    var escaped = false, next2;
    while ((next2 = stream.next()) != null) {
      if (next2 === end2 && !escaped) {
        return false;
      }
      escaped = !escaped && next2 === "\\";
    }
    return escaped;
  }
  function clikeComment(stream, state) {
    var maybeEnd = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 === "/" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 === "*";
    }
    return "comment";
  }
  return {
    name: "gas",
    startState: function() {
      return {
        tokenize: null
      };
    },
    token: function(stream, state) {
      if (state.tokenize) {
        return state.tokenize(stream, state);
      }
      if (stream.eatSpace()) {
        return null;
      }
      var style2, cur2, ch2 = stream.next();
      if (ch2 === "/") {
        if (stream.eat("*")) {
          state.tokenize = clikeComment;
          return clikeComment(stream, state);
        }
      }
      if (ch2 === lineCommentStartSymbol) {
        stream.skipToEnd();
        return "comment";
      }
      if (ch2 === '"') {
        nextUntilUnescaped(stream, '"');
        return "string";
      }
      if (ch2 === ".") {
        stream.eatWhile(/\w/);
        cur2 = stream.current().toLowerCase();
        style2 = directives[cur2];
        return style2 || null;
      }
      if (ch2 === "=") {
        stream.eatWhile(/\w/);
        return "tag";
      }
      if (ch2 === "{") {
        return "bracket";
      }
      if (ch2 === "}") {
        return "bracket";
      }
      if (/\d/.test(ch2)) {
        if (ch2 === "0" && stream.eat("x")) {
          stream.eatWhile(/[0-9a-fA-F]/);
          return "number";
        }
        stream.eatWhile(/\d/);
        return "number";
      }
      if (/\w/.test(ch2)) {
        stream.eatWhile(/\w/);
        if (stream.eat(":")) {
          return "tag";
        }
        cur2 = stream.current().toLowerCase();
        style2 = registers[cur2];
        return style2 || null;
      }
      for (var i = 0; i < custom.length; i++) {
        style2 = custom[i](ch2, stream, state);
        if (style2) {
          return style2;
        }
      }
    },
    languageData: {
      commentTokens: {
        line: lineCommentStartSymbol,
        block: { open: "/*", close: "*/" }
      }
    }
  };
}
var gas, gasArm;
var init_gas = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/gas.js"() {
    gas = mkGas("x86");
    gasArm = mkGas("arm");
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/gherkin.js
var gherkin_exports = {};
__export(gherkin_exports, {
  gherkin: () => gherkin
});
var gherkin;
var init_gherkin = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/gherkin.js"() {
    gherkin = {
      name: "gherkin",
      startState: function() {
        return {
          lineNumber: 0,
          tableHeaderLine: false,
          allowFeature: true,
          allowBackground: false,
          allowScenario: false,
          allowSteps: false,
          allowPlaceholders: false,
          allowMultilineArgument: false,
          inMultilineString: false,
          inMultilineTable: false,
          inKeywordLine: false
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          state.lineNumber++;
          state.inKeywordLine = false;
          if (state.inMultilineTable) {
            state.tableHeaderLine = false;
            if (!stream.match(/\s*\|/, false)) {
              state.allowMultilineArgument = false;
              state.inMultilineTable = false;
            }
          }
        }
        stream.eatSpace();
        if (state.allowMultilineArgument) {
          if (state.inMultilineString) {
            if (stream.match('"""')) {
              state.inMultilineString = false;
              state.allowMultilineArgument = false;
            } else {
              stream.match(/.*/);
            }
            return "string";
          }
          if (state.inMultilineTable) {
            if (stream.match(/\|\s*/)) {
              return "bracket";
            } else {
              stream.match(/[^\|]*/);
              return state.tableHeaderLine ? "header" : "string";
            }
          }
          if (stream.match('"""')) {
            state.inMultilineString = true;
            return "string";
          } else if (stream.match("|")) {
            state.inMultilineTable = true;
            state.tableHeaderLine = true;
            return "bracket";
          }
        }
        if (stream.match(/#.*/)) {
          return "comment";
        } else if (!state.inKeywordLine && stream.match(/@\S+/)) {
          return "tag";
        } else if (!state.inKeywordLine && state.allowFeature && stream.match(/(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/)) {
          state.allowScenario = true;
          state.allowBackground = true;
          state.allowPlaceholders = false;
          state.allowSteps = false;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";
        } else if (!state.inKeywordLine && state.allowBackground && stream.match(/(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/)) {
          state.allowPlaceholders = false;
          state.allowSteps = true;
          state.allowBackground = false;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";
        } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/)) {
          state.allowPlaceholders = true;
          state.allowSteps = true;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";
        } else if (state.allowScenario && stream.match(/(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/)) {
          state.allowPlaceholders = false;
          state.allowSteps = true;
          state.allowBackground = false;
          state.allowMultilineArgument = true;
          return "keyword";
        } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/)) {
          state.allowPlaceholders = false;
          state.allowSteps = true;
          state.allowBackground = false;
          state.allowMultilineArgument = false;
          state.inKeywordLine = true;
          return "keyword";
        } else if (!state.inKeywordLine && state.allowSteps && stream.match(/(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/)) {
          state.inStep = true;
          state.allowPlaceholders = true;
          state.allowMultilineArgument = true;
          state.inKeywordLine = true;
          return "keyword";
        } else if (stream.match(/"[^"]*"?/)) {
          return "string";
        } else if (state.allowPlaceholders && stream.match(/<[^>]*>?/)) {
          return "variable";
        } else {
          stream.next();
          stream.eatWhile(/[^@"<#]/);
          return null;
        }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/groovy.js
var groovy_exports = {};
__export(groovy_exports, {
  groovy: () => groovy
});
function words8(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function tokenBase11(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    return startString(ch2, stream, state);
  }
  if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
    curPunc4 = ch2;
    return null;
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    if (stream.eat(/eE/)) {
      stream.eat(/\+\-/);
      stream.eatWhile(/\d/);
    }
    return "number";
  }
  if (ch2 == "/") {
    if (stream.eat("*")) {
      state.tokenize.push(tokenComment5);
      return tokenComment5(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
    if (expectExpression(state.lastToken, false)) {
      return startString(ch2, stream, state);
    }
  }
  if (ch2 == "-" && stream.eat(">")) {
    curPunc4 = "->";
    return null;
  }
  if (/[+\-*&%=<>!?|\/~]/.test(ch2)) {
    stream.eatWhile(/[+\-*&%=<>|~]/);
    return "operator";
  }
  stream.eatWhile(/[\w\$_]/);
  if (ch2 == "@") {
    stream.eatWhile(/[\w\$_\.]/);
    return "meta";
  }
  if (state.lastToken == ".") return "property";
  if (stream.eat(":")) {
    curPunc4 = "proplabel";
    return "property";
  }
  var cur2 = stream.current();
  if (atoms7.propertyIsEnumerable(cur2)) {
    return "atom";
  }
  if (keywords14.propertyIsEnumerable(cur2)) {
    if (blockKeywords3.propertyIsEnumerable(cur2)) curPunc4 = "newstatement";
    else if (standaloneKeywords.propertyIsEnumerable(cur2)) curPunc4 = "standalone";
    return "keyword";
  }
  return "variable";
}
function startString(quote4, stream, state) {
  var tripleQuoted = false;
  if (quote4 != "/" && stream.eat(quote4)) {
    if (stream.eat(quote4)) tripleQuoted = true;
    else return "string";
  }
  function t2(stream2, state2) {
    var escaped = false, next2, end2 = !tripleQuoted;
    while ((next2 = stream2.next()) != null) {
      if (next2 == quote4 && !escaped) {
        if (!tripleQuoted) {
          break;
        }
        if (stream2.match(quote4 + quote4)) {
          end2 = true;
          break;
        }
      }
      if (quote4 == '"' && next2 == "$" && !escaped) {
        if (stream2.eat("{")) {
          state2.tokenize.push(tokenBaseUntilBrace());
          return "string";
        } else if (stream2.match(/^\w/, false)) {
          state2.tokenize.push(tokenVariableDeref);
          return "string";
        }
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2) state2.tokenize.pop();
    return "string";
  }
  state.tokenize.push(t2);
  return t2(stream, state);
}
function tokenBaseUntilBrace() {
  var depth = 1;
  function t2(stream, state) {
    if (stream.peek() == "}") {
      depth--;
      if (depth == 0) {
        state.tokenize.pop();
        return state.tokenize[state.tokenize.length - 1](stream, state);
      }
    } else if (stream.peek() == "{") {
      depth++;
    }
    return tokenBase11(stream, state);
  }
  t2.isBase = true;
  return t2;
}
function tokenVariableDeref(stream, state) {
  var next2 = stream.match(/^(\.|[\w\$_]+)/);
  if (!next2 || !stream.match(next2[0] == "." ? /^[\w$_]/ : /^\./)) state.tokenize.pop();
  if (!next2) return state.tokenize[state.tokenize.length - 1](stream, state);
  return next2[0] == "." ? null : "variable";
}
function tokenComment5(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize.pop();
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function expectExpression(last, newline8) {
  return !last || last == "operator" || last == "->" || /[\.\[\{\(,;:]/.test(last) || last == "newstatement" || last == "keyword" || last == "proplabel" || last == "standalone" && !newline8;
}
function Context8(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext6(state, col, type7) {
  return state.context = new Context8(state.indented, col, type7, null, state.context);
}
function popContext6(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var keywords14, blockKeywords3, standaloneKeywords, atoms7, curPunc4, groovy;
var init_groovy = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/groovy.js"() {
    keywords14 = words8(
      "abstract as assert boolean break byte case catch char class const continue def default do double else enum extends final finally float for goto if implements import in instanceof int interface long native new package private protected public return short static strictfp super switch synchronized threadsafe throw throws trait transient try void volatile while"
    );
    blockKeywords3 = words8("catch class def do else enum finally for if interface switch trait try while");
    standaloneKeywords = words8("return break continue");
    atoms7 = words8("null true false this");
    tokenBase11.isBase = true;
    groovy = {
      name: "groovy",
      startState: function(indentUnit2) {
        return {
          tokenize: [tokenBase11],
          context: new Context8(-indentUnit2, 0, "top", false),
          indented: 0,
          startOfLine: true,
          lastToken: null
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
          if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) {
            popContext6(state);
            ctx = state.context;
          }
        }
        if (stream.eatSpace()) return null;
        curPunc4 = null;
        var style2 = state.tokenize[state.tokenize.length - 1](stream, state);
        if (style2 == "comment") return style2;
        if (ctx.align == null) ctx.align = true;
        if ((curPunc4 == ";" || curPunc4 == ":") && ctx.type == "statement") popContext6(state);
        else if (curPunc4 == "->" && ctx.type == "statement" && ctx.prev.type == "}") {
          popContext6(state);
          state.context.align = false;
        } else if (curPunc4 == "{") pushContext6(state, stream.column(), "}");
        else if (curPunc4 == "[") pushContext6(state, stream.column(), "]");
        else if (curPunc4 == "(") pushContext6(state, stream.column(), ")");
        else if (curPunc4 == "}") {
          while (ctx.type == "statement") ctx = popContext6(state);
          if (ctx.type == "}") ctx = popContext6(state);
          while (ctx.type == "statement") ctx = popContext6(state);
        } else if (curPunc4 == ctx.type) popContext6(state);
        else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc4 == "newstatement")
          pushContext6(state, stream.column(), "statement");
        state.startOfLine = false;
        state.lastToken = curPunc4 || style2;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (!state.tokenize[state.tokenize.length - 1].isBase) return null;
        var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;
        if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;
        var closing4 = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx2.unit);
        else if (ctx.align) return ctx.column + (closing4 ? 0 : 1);
        else return ctx.indented + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "'''", '"""'] }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/haskell.js
var haskell_exports = {};
__export(haskell_exports, {
  haskell: () => haskell
});
function switchState2(source, setState, f) {
  setState(f);
  return f(source, setState);
}
function normal2(source, setState) {
  if (source.eatWhile(whiteCharRE)) {
    return null;
  }
  var ch2 = source.next();
  if (specialRE2.test(ch2)) {
    if (ch2 == "{" && source.eat("-")) {
      var t2 = "comment";
      if (source.eat("#")) {
        t2 = "meta";
      }
      return switchState2(source, setState, ncomment(t2, 1));
    }
    return null;
  }
  if (ch2 == "'") {
    if (source.eat("\\")) {
      source.next();
    } else {
      source.next();
    }
    if (source.eat("'")) {
      return "string";
    }
    return "error";
  }
  if (ch2 == '"') {
    return switchState2(source, setState, stringLiteral);
  }
  if (largeRE.test(ch2)) {
    source.eatWhile(idRE);
    if (source.eat(".")) {
      return "qualifier";
    }
    return "type";
  }
  if (smallRE.test(ch2)) {
    source.eatWhile(idRE);
    return "variable";
  }
  if (digitRE2.test(ch2)) {
    if (ch2 == "0") {
      if (source.eat(/[xX]/)) {
        source.eatWhile(hexitRE);
        return "integer";
      }
      if (source.eat(/[oO]/)) {
        source.eatWhile(octitRE);
        return "number";
      }
    }
    source.eatWhile(digitRE2);
    var t2 = "number";
    if (source.match(/^\.\d+/)) {
      t2 = "number";
    }
    if (source.eat(/[eE]/)) {
      t2 = "number";
      source.eat(/[-+]/);
      source.eatWhile(digitRE2);
    }
    return t2;
  }
  if (ch2 == "." && source.eat("."))
    return "keyword";
  if (symbolRE2.test(ch2)) {
    if (ch2 == "-" && source.eat(/-/)) {
      source.eatWhile(/-/);
      if (!source.eat(symbolRE2)) {
        source.skipToEnd();
        return "comment";
      }
    }
    source.eatWhile(symbolRE2);
    return "variable";
  }
  return "error";
}
function ncomment(type7, nest) {
  if (nest == 0) {
    return normal2;
  }
  return function(source, setState) {
    var currNest = nest;
    while (!source.eol()) {
      var ch2 = source.next();
      if (ch2 == "{" && source.eat("-")) {
        ++currNest;
      } else if (ch2 == "-" && source.eat("}")) {
        --currNest;
        if (currNest == 0) {
          setState(normal2);
          return type7;
        }
      }
    }
    setState(ncomment(type7, currNest));
    return type7;
  };
}
function stringLiteral(source, setState) {
  while (!source.eol()) {
    var ch2 = source.next();
    if (ch2 == '"') {
      setState(normal2);
      return "string";
    }
    if (ch2 == "\\") {
      if (source.eol() || source.eat(whiteCharRE)) {
        setState(stringGap);
        return "string";
      }
      if (source.eat("&")) {
      } else {
        source.next();
      }
    }
  }
  setState(normal2);
  return "error";
}
function stringGap(source, setState) {
  if (source.eat("\\")) {
    return switchState2(source, setState, stringLiteral);
  }
  source.next();
  setState(normal2);
  return "error";
}
var smallRE, largeRE, digitRE2, hexitRE, octitRE, idRE, symbolRE2, specialRE2, whiteCharRE, wellKnownWords2, haskell;
var init_haskell = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/haskell.js"() {
    smallRE = /[a-z_]/;
    largeRE = /[A-Z]/;
    digitRE2 = /\d/;
    hexitRE = /[0-9A-Fa-f]/;
    octitRE = /[0-7]/;
    idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
    symbolRE2 = /[-!#$%&*+.\/<=>?@\\^|~:]/;
    specialRE2 = /[(),;[\]`{}]/;
    whiteCharRE = /[ \t\v\f]/;
    wellKnownWords2 = function() {
      var wkw = {};
      function setType(t2) {
        return function() {
          for (var i = 0; i < arguments.length; i++)
            wkw[arguments[i]] = t2;
        };
      }
      setType("keyword")(
        "case",
        "class",
        "data",
        "default",
        "deriving",
        "do",
        "else",
        "foreign",
        "if",
        "import",
        "in",
        "infix",
        "infixl",
        "infixr",
        "instance",
        "let",
        "module",
        "newtype",
        "of",
        "then",
        "type",
        "where",
        "_"
      );
      setType("keyword")(
        "..",
        ":",
        "::",
        "=",
        "\\",
        "<-",
        "->",
        "@",
        "~",
        "=>"
      );
      setType("builtin")(
        "!!",
        "$!",
        "$",
        "&&",
        "+",
        "++",
        "-",
        ".",
        "/",
        "/=",
        "<",
        "<*",
        "<=",
        "<$>",
        "<*>",
        "=<<",
        "==",
        ">",
        ">=",
        ">>",
        ">>=",
        "^",
        "^^",
        "||",
        "*",
        "*>",
        "**"
      );
      setType("builtin")(
        "Applicative",
        "Bool",
        "Bounded",
        "Char",
        "Double",
        "EQ",
        "Either",
        "Enum",
        "Eq",
        "False",
        "FilePath",
        "Float",
        "Floating",
        "Fractional",
        "Functor",
        "GT",
        "IO",
        "IOError",
        "Int",
        "Integer",
        "Integral",
        "Just",
        "LT",
        "Left",
        "Maybe",
        "Monad",
        "Nothing",
        "Num",
        "Ord",
        "Ordering",
        "Rational",
        "Read",
        "ReadS",
        "Real",
        "RealFloat",
        "RealFrac",
        "Right",
        "Show",
        "ShowS",
        "String",
        "True"
      );
      setType("builtin")(
        "abs",
        "acos",
        "acosh",
        "all",
        "and",
        "any",
        "appendFile",
        "asTypeOf",
        "asin",
        "asinh",
        "atan",
        "atan2",
        "atanh",
        "break",
        "catch",
        "ceiling",
        "compare",
        "concat",
        "concatMap",
        "const",
        "cos",
        "cosh",
        "curry",
        "cycle",
        "decodeFloat",
        "div",
        "divMod",
        "drop",
        "dropWhile",
        "either",
        "elem",
        "encodeFloat",
        "enumFrom",
        "enumFromThen",
        "enumFromThenTo",
        "enumFromTo",
        "error",
        "even",
        "exp",
        "exponent",
        "fail",
        "filter",
        "flip",
        "floatDigits",
        "floatRadix",
        "floatRange",
        "floor",
        "fmap",
        "foldl",
        "foldl1",
        "foldr",
        "foldr1",
        "fromEnum",
        "fromInteger",
        "fromIntegral",
        "fromRational",
        "fst",
        "gcd",
        "getChar",
        "getContents",
        "getLine",
        "head",
        "id",
        "init",
        "interact",
        "ioError",
        "isDenormalized",
        "isIEEE",
        "isInfinite",
        "isNaN",
        "isNegativeZero",
        "iterate",
        "last",
        "lcm",
        "length",
        "lex",
        "lines",
        "log",
        "logBase",
        "lookup",
        "map",
        "mapM",
        "mapM_",
        "max",
        "maxBound",
        "maximum",
        "maybe",
        "min",
        "minBound",
        "minimum",
        "mod",
        "negate",
        "not",
        "notElem",
        "null",
        "odd",
        "or",
        "otherwise",
        "pi",
        "pred",
        "print",
        "product",
        "properFraction",
        "pure",
        "putChar",
        "putStr",
        "putStrLn",
        "quot",
        "quotRem",
        "read",
        "readFile",
        "readIO",
        "readList",
        "readLn",
        "readParen",
        "reads",
        "readsPrec",
        "realToFrac",
        "recip",
        "rem",
        "repeat",
        "replicate",
        "return",
        "reverse",
        "round",
        "scaleFloat",
        "scanl",
        "scanl1",
        "scanr",
        "scanr1",
        "seq",
        "sequence",
        "sequence_",
        "show",
        "showChar",
        "showList",
        "showParen",
        "showString",
        "shows",
        "showsPrec",
        "significand",
        "signum",
        "sin",
        "sinh",
        "snd",
        "span",
        "splitAt",
        "sqrt",
        "subtract",
        "succ",
        "sum",
        "tail",
        "take",
        "takeWhile",
        "tan",
        "tanh",
        "toEnum",
        "toInteger",
        "toRational",
        "truncate",
        "uncurry",
        "undefined",
        "unlines",
        "until",
        "unwords",
        "unzip",
        "unzip3",
        "userError",
        "words",
        "writeFile",
        "zip",
        "zip3",
        "zipWith",
        "zipWith3"
      );
      return wkw;
    }();
    haskell = {
      name: "haskell",
      startState: function() {
        return { f: normal2 };
      },
      copyState: function(s) {
        return { f: s.f };
      },
      token: function(stream, state) {
        var t2 = state.f(stream, function(s) {
          state.f = s;
        });
        var w = stream.current();
        return wellKnownWords2.hasOwnProperty(w) ? wellKnownWords2[w] : t2;
      },
      languageData: {
        commentTokens: { line: "--", block: { open: "{-", close: "-}" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/haxe.js
var haxe_exports = {};
__export(haxe_exports, {
  haxe: () => haxe,
  hxml: () => hxml
});
function kw(type7) {
  return { type: type7, style: "keyword" };
}
function chain4(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function toUnescaped(stream, end2) {
  var escaped = false, next2;
  while ((next2 = stream.next()) != null) {
    if (next2 == end2 && !escaped)
      return true;
    escaped = !escaped && next2 == "\\";
  }
}
function ret2(tp, style2, cont3) {
  type3 = tp;
  content2 = cont3;
  return style2;
}
function haxeTokenBase(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    return chain4(stream, state, haxeTokenString(ch2));
  } else if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
    return ret2(ch2);
  } else if (ch2 == "0" && stream.eat(/x/i)) {
    stream.eatWhile(/[\da-f]/i);
    return ret2("number", "number");
  } else if (/\d/.test(ch2) || ch2 == "-" && stream.eat(/\d/)) {
    stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
    return ret2("number", "number");
  } else if (state.reAllowed && (ch2 == "~" && stream.eat(/\//))) {
    toUnescaped(stream, "/");
    stream.eatWhile(/[gimsu]/);
    return ret2("regexp", "string.special");
  } else if (ch2 == "/") {
    if (stream.eat("*")) {
      return chain4(stream, state, haxeTokenComment);
    } else if (stream.eat("/")) {
      stream.skipToEnd();
      return ret2("comment", "comment");
    } else {
      stream.eatWhile(isOperatorChar5);
      return ret2("operator", null, stream.current());
    }
  } else if (ch2 == "#") {
    stream.skipToEnd();
    return ret2("conditional", "meta");
  } else if (ch2 == "@") {
    stream.eat(/:/);
    stream.eatWhile(/[\w_]/);
    return ret2("metadata", "meta");
  } else if (isOperatorChar5.test(ch2)) {
    stream.eatWhile(isOperatorChar5);
    return ret2("operator", null, stream.current());
  } else {
    var word;
    if (/[A-Z]/.test(ch2)) {
      stream.eatWhile(/[\w_<>]/);
      word = stream.current();
      return ret2("type", "type", word);
    } else {
      stream.eatWhile(/[\w_]/);
      var word = stream.current(), known = keywords15.propertyIsEnumerable(word) && keywords15[word];
      return known && state.kwAllowed ? ret2(known.type, known.style, word) : ret2("variable", "variable", word);
    }
  }
}
function haxeTokenString(quote4) {
  return function(stream, state) {
    if (toUnescaped(stream, quote4))
      state.tokenize = haxeTokenBase;
    return ret2("string", "string");
  };
}
function haxeTokenComment(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = haxeTokenBase;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return ret2("comment", "comment");
}
function HaxeLexical(indented, column, type7, align, prev, info) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.prev = prev;
  this.info = info;
  if (align != null) this.align = align;
}
function inScope(state, varname) {
  for (var v = state.localVars; v; v = v.next)
    if (v.name == varname) return true;
}
function parseHaxe(state, style2, type7, content3, stream) {
  var cc = state.cc;
  cx.state = state;
  cx.stream = stream;
  cx.marked = null, cx.cc = cc;
  if (!state.lexical.hasOwnProperty("align"))
    state.lexical.align = true;
  while (true) {
    var combinator = cc.length ? cc.pop() : statement;
    if (combinator(type7, content3)) {
      while (cc.length && cc[cc.length - 1].lex)
        cc.pop()();
      if (cx.marked) return cx.marked;
      if (type7 == "variable" && inScope(state, content3)) return "variableName.local";
      if (type7 == "variable" && imported(state, content3)) return "variableName.special";
      return style2;
    }
  }
}
function imported(state, typename) {
  if (/[a-z]/.test(typename.charAt(0)))
    return false;
  var len = state.importedtypes.length;
  for (var i = 0; i < len; i++)
    if (state.importedtypes[i] == typename) return true;
}
function registerimport(importname) {
  var state = cx.state;
  for (var t2 = state.importedtypes; t2; t2 = t2.next)
    if (t2.name == importname) return;
  state.importedtypes = { name: importname, next: state.importedtypes };
}
function pass() {
  for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
}
function cont() {
  pass.apply(null, arguments);
  return true;
}
function inList2(name2, list2) {
  for (var v = list2; v; v = v.next)
    if (v.name == name2) return true;
  return false;
}
function register(varname) {
  var state = cx.state;
  if (state.context) {
    cx.marked = "def";
    if (inList2(varname, state.localVars)) return;
    state.localVars = { name: varname, next: state.localVars };
  } else if (state.globalVars) {
    if (inList2(varname, state.globalVars)) return;
    state.globalVars = { name: varname, next: state.globalVars };
  }
}
function pushcontext() {
  if (!cx.state.context) cx.state.localVars = defaultVars;
  cx.state.context = { prev: cx.state.context, vars: cx.state.localVars };
}
function popcontext() {
  cx.state.localVars = cx.state.context.vars;
  cx.state.context = cx.state.context.prev;
}
function pushlex(type7, info) {
  var result = function() {
    var state = cx.state;
    state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type7, null, state.lexical, info);
  };
  result.lex = true;
  return result;
}
function poplex() {
  var state = cx.state;
  if (state.lexical.prev) {
    if (state.lexical.type == ")")
      state.indented = state.lexical.indented;
    state.lexical = state.lexical.prev;
  }
}
function expect(wanted) {
  function f(type7) {
    if (type7 == wanted) return cont();
    else if (wanted == ";") return pass();
    else return cont(f);
  }
  return f;
}
function statement(type7) {
  if (type7 == "@") return cont(metadef);
  if (type7 == "var") return cont(pushlex("vardef"), vardef1, expect(";"), poplex);
  if (type7 == "keyword a") return cont(pushlex("form"), expression2, statement, poplex);
  if (type7 == "keyword b") return cont(pushlex("form"), statement, poplex);
  if (type7 == "{") return cont(pushlex("}"), pushcontext, block, poplex, popcontext);
  if (type7 == ";") return cont();
  if (type7 == "attribute") return cont(maybeattribute);
  if (type7 == "function") return cont(functiondef);
  if (type7 == "for") return cont(
    pushlex("form"),
    expect("("),
    pushlex(")"),
    forspec1,
    expect(")"),
    poplex,
    statement,
    poplex
  );
  if (type7 == "variable") return cont(pushlex("stat"), maybelabel);
  if (type7 == "switch") return cont(
    pushlex("form"),
    expression2,
    pushlex("}", "switch"),
    expect("{"),
    block,
    poplex,
    poplex
  );
  if (type7 == "case") return cont(expression2, expect(":"));
  if (type7 == "default") return cont(expect(":"));
  if (type7 == "catch") return cont(
    pushlex("form"),
    pushcontext,
    expect("("),
    funarg,
    expect(")"),
    statement,
    poplex,
    popcontext
  );
  if (type7 == "import") return cont(importdef, expect(";"));
  if (type7 == "typedef") return cont(typedef);
  return pass(pushlex("stat"), expression2, expect(";"), poplex);
}
function expression2(type7) {
  if (atomicTypes.hasOwnProperty(type7)) return cont(maybeoperator);
  if (type7 == "type") return cont(maybeoperator);
  if (type7 == "function") return cont(functiondef);
  if (type7 == "keyword c") return cont(maybeexpression);
  if (type7 == "(") return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeoperator);
  if (type7 == "operator") return cont(expression2);
  if (type7 == "[") return cont(pushlex("]"), commasep(maybeexpression, "]"), poplex, maybeoperator);
  if (type7 == "{") return cont(pushlex("}"), commasep(objprop, "}"), poplex, maybeoperator);
  return cont();
}
function maybeexpression(type7) {
  if (type7.match(/[;\}\)\],]/)) return pass();
  return pass(expression2);
}
function maybeoperator(type7, value) {
  if (type7 == "operator" && /\+\+|--/.test(value)) return cont(maybeoperator);
  if (type7 == "operator" || type7 == ":") return cont(expression2);
  if (type7 == ";") return;
  if (type7 == "(") return cont(pushlex(")"), commasep(expression2, ")"), poplex, maybeoperator);
  if (type7 == ".") return cont(property, maybeoperator);
  if (type7 == "[") return cont(pushlex("]"), expression2, expect("]"), poplex, maybeoperator);
}
function maybeattribute(type7) {
  if (type7 == "attribute") return cont(maybeattribute);
  if (type7 == "function") return cont(functiondef);
  if (type7 == "var") return cont(vardef1);
}
function metadef(type7) {
  if (type7 == ":") return cont(metadef);
  if (type7 == "variable") return cont(metadef);
  if (type7 == "(") return cont(pushlex(")"), commasep(metaargs, ")"), poplex, statement);
}
function metaargs(type7) {
  if (type7 == "variable") return cont();
}
function importdef(type7, value) {
  if (type7 == "variable" && /[A-Z]/.test(value.charAt(0))) {
    registerimport(value);
    return cont();
  } else if (type7 == "variable" || type7 == "property" || type7 == "." || value == "*") return cont(importdef);
}
function typedef(type7, value) {
  if (type7 == "variable" && /[A-Z]/.test(value.charAt(0))) {
    registerimport(value);
    return cont();
  } else if (type7 == "type" && /[A-Z]/.test(value.charAt(0))) {
    return cont();
  }
}
function maybelabel(type7) {
  if (type7 == ":") return cont(poplex, statement);
  return pass(maybeoperator, expect(";"), poplex);
}
function property(type7) {
  if (type7 == "variable") {
    cx.marked = "property";
    return cont();
  }
}
function objprop(type7) {
  if (type7 == "variable") cx.marked = "property";
  if (atomicTypes.hasOwnProperty(type7)) return cont(expect(":"), expression2);
}
function commasep(what, end2) {
  function proceed(type7) {
    if (type7 == ",") return cont(what, proceed);
    if (type7 == end2) return cont();
    return cont(expect(end2));
  }
  return function(type7) {
    if (type7 == end2) return cont();
    else return pass(what, proceed);
  };
}
function block(type7) {
  if (type7 == "}") return cont();
  return pass(statement, block);
}
function vardef1(type7, value) {
  if (type7 == "variable") {
    register(value);
    return cont(typeuse, vardef2);
  }
  return cont();
}
function vardef2(type7, value) {
  if (value == "=") return cont(expression2, vardef2);
  if (type7 == ",") return cont(vardef1);
}
function forspec1(type7, value) {
  if (type7 == "variable") {
    register(value);
    return cont(forin, expression2);
  } else {
    return pass();
  }
}
function forin(_type, value) {
  if (value == "in") return cont();
}
function functiondef(type7, value) {
  if (type7 == "variable" || type7 == "type") {
    register(value);
    return cont(functiondef);
  }
  if (value == "new") return cont(functiondef);
  if (type7 == "(") return cont(pushlex(")"), pushcontext, commasep(funarg, ")"), poplex, typeuse, statement, popcontext);
}
function typeuse(type7) {
  if (type7 == ":") return cont(typestring);
}
function typestring(type7) {
  if (type7 == "type") return cont();
  if (type7 == "variable") return cont();
  if (type7 == "{") return cont(pushlex("}"), commasep(typeprop, "}"), poplex);
}
function typeprop(type7) {
  if (type7 == "variable") return cont(typeuse);
}
function funarg(type7, value) {
  if (type7 == "variable") {
    register(value);
    return cont(typeuse);
  }
}
var A2, B, C2, operator2, atom2, attribute, type3, keywords15, isOperatorChar5, type3, content2, atomicTypes, cx, defaultVars, haxe, hxml;
var init_haxe = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/haxe.js"() {
    A2 = kw("keyword a");
    B = kw("keyword b");
    C2 = kw("keyword c");
    operator2 = kw("operator");
    atom2 = { type: "atom", style: "atom" };
    attribute = { type: "attribute", style: "attribute" };
    type3 = kw("typedef");
    keywords15 = {
      "if": A2,
      "while": A2,
      "else": B,
      "do": B,
      "try": B,
      "return": C2,
      "break": C2,
      "continue": C2,
      "new": C2,
      "throw": C2,
      "var": kw("var"),
      "inline": attribute,
      "static": attribute,
      "using": kw("import"),
      "public": attribute,
      "private": attribute,
      "cast": kw("cast"),
      "import": kw("import"),
      "macro": kw("macro"),
      "function": kw("function"),
      "catch": kw("catch"),
      "untyped": kw("untyped"),
      "callback": kw("cb"),
      "for": kw("for"),
      "switch": kw("switch"),
      "case": kw("case"),
      "default": kw("default"),
      "in": operator2,
      "never": kw("property_access"),
      "trace": kw("trace"),
      "class": type3,
      "abstract": type3,
      "enum": type3,
      "interface": type3,
      "typedef": type3,
      "extends": type3,
      "implements": type3,
      "dynamic": type3,
      "true": atom2,
      "false": atom2,
      "null": atom2
    };
    isOperatorChar5 = /[+\-*&%=<>!?|]/;
    atomicTypes = { "atom": true, "number": true, "variable": true, "string": true, "regexp": true };
    cx = { state: null, column: null, marked: null, cc: null };
    defaultVars = { name: "this", next: null };
    popcontext.lex = true;
    poplex.lex = true;
    haxe = {
      name: "haxe",
      startState: function(indentUnit2) {
        var defaulttypes = ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"];
        var state = {
          tokenize: haxeTokenBase,
          reAllowed: true,
          kwAllowed: true,
          cc: [],
          lexical: new HaxeLexical(-indentUnit2, 0, "block", false),
          importedtypes: defaulttypes,
          context: null,
          indented: 0
        };
        return state;
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (!state.lexical.hasOwnProperty("align"))
            state.lexical.align = false;
          state.indented = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        if (type3 == "comment") return style2;
        state.reAllowed = !!(type3 == "operator" || type3 == "keyword c" || type3.match(/^[\[{}\(,;:]$/));
        state.kwAllowed = type3 != ".";
        return parseHaxe(state, style2, type3, content2, stream);
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != haxeTokenBase) return 0;
        var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
        if (lexical.type == "stat" && firstChar == "}") lexical = lexical.prev;
        var type7 = lexical.type, closing4 = firstChar == type7;
        if (type7 == "vardef") return lexical.indented + 4;
        else if (type7 == "form" && firstChar == "{") return lexical.indented;
        else if (type7 == "stat" || type7 == "form") return lexical.indented + cx2.unit;
        else if (lexical.info == "switch" && !closing4)
          return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx2.unit : 2 * cx2.unit);
        else if (lexical.align) return lexical.column + (closing4 ? 0 : 1);
        else return lexical.indented + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
      }
    };
    hxml = {
      name: "hxml",
      startState: function() {
        return {
          define: false,
          inString: false
        };
      },
      token: function(stream, state) {
        var ch2 = stream.peek();
        var sol = stream.sol();
        if (ch2 == "#") {
          stream.skipToEnd();
          return "comment";
        }
        if (sol && ch2 == "-") {
          var style2 = "variable-2";
          stream.eat(/-/);
          if (stream.peek() == "-") {
            stream.eat(/-/);
            style2 = "keyword a";
          }
          if (stream.peek() == "D") {
            stream.eat(/[D]/);
            style2 = "keyword c";
            state.define = true;
          }
          stream.eatWhile(/[A-Z]/i);
          return style2;
        }
        var ch2 = stream.peek();
        if (state.inString == false && ch2 == "'") {
          state.inString = true;
          stream.next();
        }
        if (state.inString == true) {
          if (stream.skipTo("'")) {
          } else {
            stream.skipToEnd();
          }
          if (stream.peek() == "'") {
            stream.next();
            state.inString = false;
          }
          return "string";
        }
        stream.next();
        return null;
      },
      languageData: {
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/http.js
var http_exports = {};
__export(http_exports, {
  http: () => http
});
function failFirstLine(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return "error";
}
function start(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d/)) {
    state.cur = responseStatusCode;
    return "keyword";
  } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
    state.cur = requestPath;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}
function responseStatusCode(stream, state) {
  var code2 = stream.match(/^\d+/);
  if (!code2) return failFirstLine(stream, state);
  state.cur = responseStatusText;
  var status = Number(code2[0]);
  if (status >= 100 && status < 400) {
    return "atom";
  } else {
    return "error";
  }
}
function responseStatusText(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return null;
}
function requestPath(stream, state) {
  stream.eatWhile(/\S/);
  state.cur = requestProtocol;
  return "string.special";
}
function requestProtocol(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d$/)) {
    state.cur = header;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}
function header(stream) {
  if (stream.sol() && !stream.eat(/[ \t]/)) {
    if (stream.match(/^.*?:/)) {
      return "atom";
    } else {
      stream.skipToEnd();
      return "error";
    }
  } else {
    stream.skipToEnd();
    return "string";
  }
}
function body(stream) {
  stream.skipToEnd();
  return null;
}
var http;
var init_http = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/http.js"() {
    http = {
      name: "http",
      token: function(stream, state) {
        var cur2 = state.cur;
        if (cur2 != header && cur2 != body && stream.eatSpace()) return null;
        return cur2(stream, state);
      },
      blankLine: function(state) {
        state.cur = body;
      },
      startState: function() {
        return { cur: start };
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/idl.js
var idl_exports = {};
__export(idl_exports, {
  idl: () => idl
});
function wordRegexp4(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
}
function tokenBase12(stream) {
  if (stream.eatSpace()) return null;
  if (stream.match(";")) {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^[0-9\.+-]/, false)) {
    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
      return "number";
    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
      return "number";
    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
      return "number";
  }
  if (stream.match(/^"([^"]|(""))*"/)) {
    return "string";
  }
  if (stream.match(/^'([^']|(''))*'/)) {
    return "string";
  }
  if (stream.match(keywords16)) {
    return "keyword";
  }
  if (stream.match(builtins3)) {
    return "builtin";
  }
  if (stream.match(identifiers4)) {
    return "variable";
  }
  if (stream.match(singleOperators) || stream.match(boolOperators)) {
    return "operator";
  }
  stream.next();
  return null;
}
var builtinArray, builtins3, keywordArray, keywords16, identifiers4, singleOperators, boolOperators, idl;
var init_idl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/idl.js"() {
    builtinArray = [
      "a_correlate",
      "abs",
      "acos",
      "adapt_hist_equal",
      "alog",
      "alog2",
      "alog10",
      "amoeba",
      "annotate",
      "app_user_dir",
      "app_user_dir_query",
      "arg_present",
      "array_equal",
      "array_indices",
      "arrow",
      "ascii_template",
      "asin",
      "assoc",
      "atan",
      "axis",
      "axis",
      "bandpass_filter",
      "bandreject_filter",
      "barplot",
      "bar_plot",
      "beseli",
      "beselj",
      "beselk",
      "besely",
      "beta",
      "biginteger",
      "bilinear",
      "bin_date",
      "binary_template",
      "bindgen",
      "binomial",
      "bit_ffs",
      "bit_population",
      "blas_axpy",
      "blk_con",
      "boolarr",
      "boolean",
      "boxplot",
      "box_cursor",
      "breakpoint",
      "broyden",
      "bubbleplot",
      "butterworth",
      "bytarr",
      "byte",
      "byteorder",
      "bytscl",
      "c_correlate",
      "calendar",
      "caldat",
      "call_external",
      "call_function",
      "call_method",
      "call_procedure",
      "canny",
      "catch",
      "cd",
      "cdf",
      "ceil",
      "chebyshev",
      "check_math",
      "chisqr_cvf",
      "chisqr_pdf",
      "choldc",
      "cholsol",
      "cindgen",
      "cir_3pnt",
      "clipboard",
      "close",
      "clust_wts",
      "cluster",
      "cluster_tree",
      "cmyk_convert",
      "code_coverage",
      "color_convert",
      "color_exchange",
      "color_quan",
      "color_range_map",
      "colorbar",
      "colorize_sample",
      "colormap_applicable",
      "colormap_gradient",
      "colormap_rotation",
      "colortable",
      "comfit",
      "command_line_args",
      "common",
      "compile_opt",
      "complex",
      "complexarr",
      "complexround",
      "compute_mesh_normals",
      "cond",
      "congrid",
      "conj",
      "constrained_min",
      "contour",
      "contour",
      "convert_coord",
      "convol",
      "convol_fft",
      "coord2to3",
      "copy_lun",
      "correlate",
      "cos",
      "cosh",
      "cpu",
      "cramer",
      "createboxplotdata",
      "create_cursor",
      "create_struct",
      "create_view",
      "crossp",
      "crvlength",
      "ct_luminance",
      "cti_test",
      "cursor",
      "curvefit",
      "cv_coord",
      "cvttobm",
      "cw_animate",
      "cw_animate_getp",
      "cw_animate_load",
      "cw_animate_run",
      "cw_arcball",
      "cw_bgroup",
      "cw_clr_index",
      "cw_colorsel",
      "cw_defroi",
      "cw_field",
      "cw_filesel",
      "cw_form",
      "cw_fslider",
      "cw_light_editor",
      "cw_light_editor_get",
      "cw_light_editor_set",
      "cw_orient",
      "cw_palette_editor",
      "cw_palette_editor_get",
      "cw_palette_editor_set",
      "cw_pdmenu",
      "cw_rgbslider",
      "cw_tmpl",
      "cw_zoom",
      "db_exists",
      "dblarr",
      "dcindgen",
      "dcomplex",
      "dcomplexarr",
      "define_key",
      "define_msgblk",
      "define_msgblk_from_file",
      "defroi",
      "defsysv",
      "delvar",
      "dendro_plot",
      "dendrogram",
      "deriv",
      "derivsig",
      "determ",
      "device",
      "dfpmin",
      "diag_matrix",
      "dialog_dbconnect",
      "dialog_message",
      "dialog_pickfile",
      "dialog_printersetup",
      "dialog_printjob",
      "dialog_read_image",
      "dialog_write_image",
      "dictionary",
      "digital_filter",
      "dilate",
      "dindgen",
      "dissolve",
      "dist",
      "distance_measure",
      "dlm_load",
      "dlm_register",
      "doc_library",
      "double",
      "draw_roi",
      "edge_dog",
      "efont",
      "eigenql",
      "eigenvec",
      "ellipse",
      "elmhes",
      "emboss",
      "empty",
      "enable_sysrtn",
      "eof",
      "eos",
      "erase",
      "erf",
      "erfc",
      "erfcx",
      "erode",
      "errorplot",
      "errplot",
      "estimator_filter",
      "execute",
      "exit",
      "exp",
      "expand",
      "expand_path",
      "expint",
      "extract",
      "extract_slice",
      "f_cvf",
      "f_pdf",
      "factorial",
      "fft",
      "file_basename",
      "file_chmod",
      "file_copy",
      "file_delete",
      "file_dirname",
      "file_expand_path",
      "file_gunzip",
      "file_gzip",
      "file_info",
      "file_lines",
      "file_link",
      "file_mkdir",
      "file_move",
      "file_poll_input",
      "file_readlink",
      "file_same",
      "file_search",
      "file_tar",
      "file_test",
      "file_untar",
      "file_unzip",
      "file_which",
      "file_zip",
      "filepath",
      "findgen",
      "finite",
      "fix",
      "flick",
      "float",
      "floor",
      "flow3",
      "fltarr",
      "flush",
      "format_axis_values",
      "forward_function",
      "free_lun",
      "fstat",
      "fulstr",
      "funct",
      "function",
      "fv_test",
      "fx_root",
      "fz_roots",
      "gamma",
      "gamma_ct",
      "gauss_cvf",
      "gauss_pdf",
      "gauss_smooth",
      "gauss2dfit",
      "gaussfit",
      "gaussian_function",
      "gaussint",
      "get_drive_list",
      "get_dxf_objects",
      "get_kbrd",
      "get_login_info",
      "get_lun",
      "get_screen_size",
      "getenv",
      "getwindows",
      "greg2jul",
      "grib",
      "grid_input",
      "grid_tps",
      "grid3",
      "griddata",
      "gs_iter",
      "h_eq_ct",
      "h_eq_int",
      "hanning",
      "hash",
      "hdf",
      "hdf5",
      "heap_free",
      "heap_gc",
      "heap_nosave",
      "heap_refcount",
      "heap_save",
      "help",
      "hilbert",
      "hist_2d",
      "hist_equal",
      "histogram",
      "hls",
      "hough",
      "hqr",
      "hsv",
      "i18n_multibytetoutf8",
      "i18n_multibytetowidechar",
      "i18n_utf8tomultibyte",
      "i18n_widechartomultibyte",
      "ibeta",
      "icontour",
      "iconvertcoord",
      "idelete",
      "identity",
      "idl_base64",
      "idl_container",
      "idl_validname",
      "idlexbr_assistant",
      "idlitsys_createtool",
      "idlunit",
      "iellipse",
      "igamma",
      "igetcurrent",
      "igetdata",
      "igetid",
      "igetproperty",
      "iimage",
      "image",
      "image_cont",
      "image_statistics",
      "image_threshold",
      "imaginary",
      "imap",
      "indgen",
      "int_2d",
      "int_3d",
      "int_tabulated",
      "intarr",
      "interpol",
      "interpolate",
      "interval_volume",
      "invert",
      "ioctl",
      "iopen",
      "ir_filter",
      "iplot",
      "ipolygon",
      "ipolyline",
      "iputdata",
      "iregister",
      "ireset",
      "iresolve",
      "irotate",
      "isa",
      "isave",
      "iscale",
      "isetcurrent",
      "isetproperty",
      "ishft",
      "isocontour",
      "isosurface",
      "isurface",
      "itext",
      "itranslate",
      "ivector",
      "ivolume",
      "izoom",
      "journal",
      "json_parse",
      "json_serialize",
      "jul2greg",
      "julday",
      "keyword_set",
      "krig2d",
      "kurtosis",
      "kw_test",
      "l64indgen",
      "la_choldc",
      "la_cholmprove",
      "la_cholsol",
      "la_determ",
      "la_eigenproblem",
      "la_eigenql",
      "la_eigenvec",
      "la_elmhes",
      "la_gm_linear_model",
      "la_hqr",
      "la_invert",
      "la_least_square_equality",
      "la_least_squares",
      "la_linear_equation",
      "la_ludc",
      "la_lumprove",
      "la_lusol",
      "la_svd",
      "la_tridc",
      "la_trimprove",
      "la_triql",
      "la_trired",
      "la_trisol",
      "label_date",
      "label_region",
      "ladfit",
      "laguerre",
      "lambda",
      "lambdap",
      "lambertw",
      "laplacian",
      "least_squares_filter",
      "leefilt",
      "legend",
      "legendre",
      "linbcg",
      "lindgen",
      "linfit",
      "linkimage",
      "list",
      "ll_arc_distance",
      "lmfit",
      "lmgr",
      "lngamma",
      "lnp_test",
      "loadct",
      "locale_get",
      "logical_and",
      "logical_or",
      "logical_true",
      "lon64arr",
      "lonarr",
      "long",
      "long64",
      "lsode",
      "lu_complex",
      "ludc",
      "lumprove",
      "lusol",
      "m_correlate",
      "machar",
      "make_array",
      "make_dll",
      "make_rt",
      "map",
      "mapcontinents",
      "mapgrid",
      "map_2points",
      "map_continents",
      "map_grid",
      "map_image",
      "map_patch",
      "map_proj_forward",
      "map_proj_image",
      "map_proj_info",
      "map_proj_init",
      "map_proj_inverse",
      "map_set",
      "matrix_multiply",
      "matrix_power",
      "max",
      "md_test",
      "mean",
      "meanabsdev",
      "mean_filter",
      "median",
      "memory",
      "mesh_clip",
      "mesh_decimate",
      "mesh_issolid",
      "mesh_merge",
      "mesh_numtriangles",
      "mesh_obj",
      "mesh_smooth",
      "mesh_surfacearea",
      "mesh_validate",
      "mesh_volume",
      "message",
      "min",
      "min_curve_surf",
      "mk_html_help",
      "modifyct",
      "moment",
      "morph_close",
      "morph_distance",
      "morph_gradient",
      "morph_hitormiss",
      "morph_open",
      "morph_thin",
      "morph_tophat",
      "multi",
      "n_elements",
      "n_params",
      "n_tags",
      "ncdf",
      "newton",
      "noise_hurl",
      "noise_pick",
      "noise_scatter",
      "noise_slur",
      "norm",
      "obj_class",
      "obj_destroy",
      "obj_hasmethod",
      "obj_isa",
      "obj_new",
      "obj_valid",
      "objarr",
      "on_error",
      "on_ioerror",
      "online_help",
      "openr",
      "openu",
      "openw",
      "oplot",
      "oploterr",
      "orderedhash",
      "p_correlate",
      "parse_url",
      "particle_trace",
      "path_cache",
      "path_sep",
      "pcomp",
      "plot",
      "plot3d",
      "plot",
      "plot_3dbox",
      "plot_field",
      "ploterr",
      "plots",
      "polar_contour",
      "polar_surface",
      "polyfill",
      "polyshade",
      "pnt_line",
      "point_lun",
      "polarplot",
      "poly",
      "poly_2d",
      "poly_area",
      "poly_fit",
      "polyfillv",
      "polygon",
      "polyline",
      "polywarp",
      "popd",
      "powell",
      "pref_commit",
      "pref_get",
      "pref_set",
      "prewitt",
      "primes",
      "print",
      "printf",
      "printd",
      "pro",
      "product",
      "profile",
      "profiler",
      "profiles",
      "project_vol",
      "ps_show_fonts",
      "psafm",
      "pseudo",
      "ptr_free",
      "ptr_new",
      "ptr_valid",
      "ptrarr",
      "pushd",
      "qgrid3",
      "qhull",
      "qromb",
      "qromo",
      "qsimp",
      "query_*",
      "query_ascii",
      "query_bmp",
      "query_csv",
      "query_dicom",
      "query_gif",
      "query_image",
      "query_jpeg",
      "query_jpeg2000",
      "query_mrsid",
      "query_pict",
      "query_png",
      "query_ppm",
      "query_srf",
      "query_tiff",
      "query_video",
      "query_wav",
      "r_correlate",
      "r_test",
      "radon",
      "randomn",
      "randomu",
      "ranks",
      "rdpix",
      "read",
      "readf",
      "read_ascii",
      "read_binary",
      "read_bmp",
      "read_csv",
      "read_dicom",
      "read_gif",
      "read_image",
      "read_interfile",
      "read_jpeg",
      "read_jpeg2000",
      "read_mrsid",
      "read_pict",
      "read_png",
      "read_ppm",
      "read_spr",
      "read_srf",
      "read_sylk",
      "read_tiff",
      "read_video",
      "read_wav",
      "read_wave",
      "read_x11_bitmap",
      "read_xwd",
      "reads",
      "readu",
      "real_part",
      "rebin",
      "recall_commands",
      "recon3",
      "reduce_colors",
      "reform",
      "region_grow",
      "register_cursor",
      "regress",
      "replicate",
      "replicate_inplace",
      "resolve_all",
      "resolve_routine",
      "restore",
      "retall",
      "return",
      "reverse",
      "rk4",
      "roberts",
      "rot",
      "rotate",
      "round",
      "routine_filepath",
      "routine_info",
      "rs_test",
      "s_test",
      "save",
      "savgol",
      "scale3",
      "scale3d",
      "scatterplot",
      "scatterplot3d",
      "scope_level",
      "scope_traceback",
      "scope_varfetch",
      "scope_varname",
      "search2d",
      "search3d",
      "sem_create",
      "sem_delete",
      "sem_lock",
      "sem_release",
      "set_plot",
      "set_shading",
      "setenv",
      "sfit",
      "shade_surf",
      "shade_surf_irr",
      "shade_volume",
      "shift",
      "shift_diff",
      "shmdebug",
      "shmmap",
      "shmunmap",
      "shmvar",
      "show3",
      "showfont",
      "signum",
      "simplex",
      "sin",
      "sindgen",
      "sinh",
      "size",
      "skewness",
      "skip_lun",
      "slicer3",
      "slide_image",
      "smooth",
      "sobel",
      "socket",
      "sort",
      "spawn",
      "sph_4pnt",
      "sph_scat",
      "spher_harm",
      "spl_init",
      "spl_interp",
      "spline",
      "spline_p",
      "sprsab",
      "sprsax",
      "sprsin",
      "sprstp",
      "sqrt",
      "standardize",
      "stddev",
      "stop",
      "strarr",
      "strcmp",
      "strcompress",
      "streamline",
      "streamline",
      "stregex",
      "stretch",
      "string",
      "strjoin",
      "strlen",
      "strlowcase",
      "strmatch",
      "strmessage",
      "strmid",
      "strpos",
      "strput",
      "strsplit",
      "strtrim",
      "struct_assign",
      "struct_hide",
      "strupcase",
      "surface",
      "surface",
      "surfr",
      "svdc",
      "svdfit",
      "svsol",
      "swap_endian",
      "swap_endian_inplace",
      "symbol",
      "systime",
      "t_cvf",
      "t_pdf",
      "t3d",
      "tag_names",
      "tan",
      "tanh",
      "tek_color",
      "temporary",
      "terminal_size",
      "tetra_clip",
      "tetra_surface",
      "tetra_volume",
      "text",
      "thin",
      "thread",
      "threed",
      "tic",
      "time_test2",
      "timegen",
      "timer",
      "timestamp",
      "timestamptovalues",
      "tm_test",
      "toc",
      "total",
      "trace",
      "transpose",
      "tri_surf",
      "triangulate",
      "trigrid",
      "triql",
      "trired",
      "trisol",
      "truncate_lun",
      "ts_coef",
      "ts_diff",
      "ts_fcast",
      "ts_smooth",
      "tv",
      "tvcrs",
      "tvlct",
      "tvrd",
      "tvscl",
      "typename",
      "uindgen",
      "uint",
      "uintarr",
      "ul64indgen",
      "ulindgen",
      "ulon64arr",
      "ulonarr",
      "ulong",
      "ulong64",
      "uniq",
      "unsharp_mask",
      "usersym",
      "value_locate",
      "variance",
      "vector",
      "vector_field",
      "vel",
      "velovect",
      "vert_t3d",
      "voigt",
      "volume",
      "voronoi",
      "voxel_proj",
      "wait",
      "warp_tri",
      "watershed",
      "wdelete",
      "wf_draw",
      "where",
      "widget_base",
      "widget_button",
      "widget_combobox",
      "widget_control",
      "widget_displaycontextmenu",
      "widget_draw",
      "widget_droplist",
      "widget_event",
      "widget_info",
      "widget_label",
      "widget_list",
      "widget_propertysheet",
      "widget_slider",
      "widget_tab",
      "widget_table",
      "widget_text",
      "widget_tree",
      "widget_tree_move",
      "widget_window",
      "wiener_filter",
      "window",
      "window",
      "write_bmp",
      "write_csv",
      "write_gif",
      "write_image",
      "write_jpeg",
      "write_jpeg2000",
      "write_nrif",
      "write_pict",
      "write_png",
      "write_ppm",
      "write_spr",
      "write_srf",
      "write_sylk",
      "write_tiff",
      "write_video",
      "write_wav",
      "write_wave",
      "writeu",
      "wset",
      "wshow",
      "wtn",
      "wv_applet",
      "wv_cwt",
      "wv_cw_wavelet",
      "wv_denoise",
      "wv_dwt",
      "wv_fn_coiflet",
      "wv_fn_daubechies",
      "wv_fn_gaussian",
      "wv_fn_haar",
      "wv_fn_morlet",
      "wv_fn_paul",
      "wv_fn_symlet",
      "wv_import_data",
      "wv_import_wavelet",
      "wv_plot3d_wps",
      "wv_plot_multires",
      "wv_pwt",
      "wv_tool_denoise",
      "xbm_edit",
      "xdisplayfile",
      "xdxf",
      "xfont",
      "xinteranimate",
      "xloadct",
      "xmanager",
      "xmng_tmpl",
      "xmtool",
      "xobjview",
      "xobjview_rotate",
      "xobjview_write_image",
      "xpalette",
      "xpcolor",
      "xplot3d",
      "xregistered",
      "xroi",
      "xsq_test",
      "xsurface",
      "xvaredit",
      "xvolume",
      "xvolume_rotate",
      "xvolume_write_image",
      "xyouts",
      "zlib_compress",
      "zlib_uncompress",
      "zoom",
      "zoom_24"
    ];
    builtins3 = wordRegexp4(builtinArray);
    keywordArray = [
      "begin",
      "end",
      "endcase",
      "endfor",
      "endwhile",
      "endif",
      "endrep",
      "endforeach",
      "break",
      "case",
      "continue",
      "for",
      "foreach",
      "goto",
      "if",
      "then",
      "else",
      "repeat",
      "until",
      "switch",
      "while",
      "do",
      "pro",
      "function"
    ];
    keywords16 = wordRegexp4(keywordArray);
    identifiers4 = new RegExp("^[_a-z\xA1-\uFFFF][_a-z0-9\xA1-\uFFFF]*", "i");
    singleOperators = /[+\-*&=<>\/@#~$]/;
    boolOperators = new RegExp("(and|or|eq|lt|le|gt|ge|ne|not)", "i");
    idl = {
      name: "idl",
      token: function(stream) {
        return tokenBase12(stream);
      },
      languageData: {
        autocomplete: builtinArray.concat(keywordArray)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/javascript.js
var javascript_exports = {};
__export(javascript_exports, {
  javascript: () => javascript2,
  json: () => json2,
  jsonld: () => jsonld,
  typescript: () => typescript
});
function mkJavaScript(parserConfig4) {
  var statementIndent = parserConfig4.statementIndent;
  var jsonldMode = parserConfig4.jsonld;
  var jsonMode = parserConfig4.json || jsonldMode;
  var isTS = parserConfig4.typescript;
  var wordRE2 = parserConfig4.wordCharacters || /[\w$\xa1-\uffff]/;
  var keywords49 = function() {
    function kw2(type8) {
      return { type: type8, style: "keyword" };
    }
    var A3 = kw2("keyword a"), B2 = kw2("keyword b"), C3 = kw2("keyword c"), D = kw2("keyword d");
    var operator4 = kw2("operator"), atom4 = { type: "atom", style: "atom" };
    return {
      "if": kw2("if"),
      "while": A3,
      "with": A3,
      "else": B2,
      "do": B2,
      "try": B2,
      "finally": B2,
      "return": D,
      "break": D,
      "continue": D,
      "new": kw2("new"),
      "delete": C3,
      "void": C3,
      "throw": C3,
      "debugger": kw2("debugger"),
      "var": kw2("var"),
      "const": kw2("var"),
      "let": kw2("var"),
      "function": kw2("function"),
      "catch": kw2("catch"),
      "for": kw2("for"),
      "switch": kw2("switch"),
      "case": kw2("case"),
      "default": kw2("default"),
      "in": operator4,
      "typeof": operator4,
      "instanceof": operator4,
      "true": atom4,
      "false": atom4,
      "null": atom4,
      "undefined": atom4,
      "NaN": atom4,
      "Infinity": atom4,
      "this": kw2("this"),
      "class": kw2("class"),
      "super": kw2("atom"),
      "yield": C3,
      "export": kw2("export"),
      "import": kw2("import"),
      "extends": C3,
      "await": C3
    };
  }();
  var isOperatorChar17 = /[+\-*&%=<>!?|~^@]/;
  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;
  function readRegexp(stream) {
    var escaped = false, next2, inSet = false;
    while ((next2 = stream.next()) != null) {
      if (!escaped) {
        if (next2 == "/" && !inSet) return;
        if (next2 == "[") inSet = true;
        else if (inSet && next2 == "]") inSet = false;
      }
      escaped = !escaped && next2 == "\\";
    }
  }
  var type7, content3;
  function ret4(tp, style2, cont4) {
    type7 = tp;
    content3 = cont4;
    return style2;
  }
  function tokenBase48(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString31(ch2);
      return state.tokenize(stream, state);
    } else if (ch2 == "." && stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)) {
      return ret4("number", "number");
    } else if (ch2 == "." && stream.match("..")) {
      return ret4("spread", "meta");
    } else if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      return ret4(ch2);
    } else if (ch2 == "=" && stream.eat(">")) {
      return ret4("=>", "operator");
    } else if (ch2 == "0" && stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {
      return ret4("number", "number");
    } else if (/\d/.test(ch2)) {
      stream.match(/^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/);
      return ret4("number", "number");
    } else if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment22;
        return tokenComment22(stream, state);
      } else if (stream.eat("/")) {
        stream.skipToEnd();
        return ret4("comment", "comment");
      } else if (expressionAllowed(stream, state, 1)) {
        readRegexp(stream);
        stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
        return ret4("regexp", "string.special");
      } else {
        stream.eat("=");
        return ret4("operator", "operator", stream.current());
      }
    } else if (ch2 == "`") {
      state.tokenize = tokenQuasi;
      return tokenQuasi(stream, state);
    } else if (ch2 == "#" && stream.peek() == "!") {
      stream.skipToEnd();
      return ret4("meta", "meta");
    } else if (ch2 == "#" && stream.eatWhile(wordRE2)) {
      return ret4("variable", "property");
    } else if (ch2 == "<" && stream.match("!--") || ch2 == "-" && stream.match("->") && !/\S/.test(stream.string.slice(0, stream.start))) {
      stream.skipToEnd();
      return ret4("comment", "comment");
    } else if (isOperatorChar17.test(ch2)) {
      if (ch2 != ">" || !state.lexical || state.lexical.type != ">") {
        if (stream.eat("=")) {
          if (ch2 == "!" || ch2 == "=") stream.eat("=");
        } else if (/[<>*+\-|&?]/.test(ch2)) {
          stream.eat(ch2);
          if (ch2 == ">") stream.eat(ch2);
        }
      }
      if (ch2 == "?" && stream.eat(".")) return ret4(".");
      return ret4("operator", "operator", stream.current());
    } else if (wordRE2.test(ch2)) {
      stream.eatWhile(wordRE2);
      var word = stream.current();
      if (state.lastType != ".") {
        if (keywords49.propertyIsEnumerable(word)) {
          var kw2 = keywords49[word];
          return ret4(kw2.type, kw2.style, word);
        }
        if (word == "async" && stream.match(/^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/, false))
          return ret4("async", "keyword", word);
      }
      return ret4("variable", "variable", word);
    }
  }
  function tokenString31(quote4) {
    return function(stream, state) {
      var escaped = false, next2;
      if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)) {
        state.tokenize = tokenBase48;
        return ret4("jsonld-keyword", "meta");
      }
      while ((next2 = stream.next()) != null) {
        if (next2 == quote4 && !escaped) break;
        escaped = !escaped && next2 == "\\";
      }
      if (!escaped) state.tokenize = tokenBase48;
      return ret4("string", "string");
    };
  }
  function tokenComment22(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase48;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return ret4("comment", "comment");
  }
  function tokenQuasi(stream, state) {
    var escaped = false, next2;
    while ((next2 = stream.next()) != null) {
      if (!escaped && (next2 == "`" || next2 == "$" && stream.eat("{"))) {
        state.tokenize = tokenBase48;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    return ret4("quasi", "string.special", stream.current());
  }
  var brackets2 = "([{}])";
  function findFatArrow(stream, state) {
    if (state.fatArrowAt) state.fatArrowAt = null;
    var arrow = stream.string.indexOf("=>", stream.start);
    if (arrow < 0) return;
    if (isTS) {
      var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(stream.string.slice(stream.start, arrow));
      if (m) arrow = m.index;
    }
    var depth = 0, sawSomething = false;
    for (var pos = arrow - 1; pos >= 0; --pos) {
      var ch2 = stream.string.charAt(pos);
      var bracket2 = brackets2.indexOf(ch2);
      if (bracket2 >= 0 && bracket2 < 3) {
        if (!depth) {
          ++pos;
          break;
        }
        if (--depth == 0) {
          if (ch2 == "(") sawSomething = true;
          break;
        }
      } else if (bracket2 >= 3 && bracket2 < 6) {
        ++depth;
      } else if (wordRE2.test(ch2)) {
        sawSomething = true;
      } else if (/["'\/`]/.test(ch2)) {
        for (; ; --pos) {
          if (pos == 0) return;
          var next2 = stream.string.charAt(pos - 1);
          if (next2 == ch2 && stream.string.charAt(pos - 2) != "\\") {
            pos--;
            break;
          }
        }
      } else if (sawSomething && !depth) {
        ++pos;
        break;
      }
    }
    if (sawSomething && !depth) state.fatArrowAt = pos;
  }
  var atomicTypes2 = {
    "atom": true,
    "number": true,
    "variable": true,
    "string": true,
    "regexp": true,
    "this": true,
    "import": true,
    "jsonld-keyword": true
  };
  function JSLexical(indented, column, type8, align, prev, info) {
    this.indented = indented;
    this.column = column;
    this.type = type8;
    this.prev = prev;
    this.info = info;
    if (align != null) this.align = align;
  }
  function inScope2(state, varname) {
    for (var v = state.localVars; v; v = v.next)
      if (v.name == varname) return true;
    for (var cx3 = state.context; cx3; cx3 = cx3.prev) {
      for (var v = cx3.vars; v; v = v.next)
        if (v.name == varname) return true;
    }
  }
  function parseJS(state, style2, type8, content4, stream) {
    var cc = state.cc;
    cx2.state = state;
    cx2.stream = stream;
    cx2.marked = null;
    cx2.cc = cc;
    cx2.style = style2;
    if (!state.lexical.hasOwnProperty("align"))
      state.lexical.align = true;
    while (true) {
      var combinator = cc.length ? cc.pop() : jsonMode ? expression3 : statement2;
      if (combinator(type8, content4)) {
        while (cc.length && cc[cc.length - 1].lex)
          cc.pop()();
        if (cx2.marked) return cx2.marked;
        if (type8 == "variable" && inScope2(state, content4)) return "variableName.local";
        return style2;
      }
    }
  }
  var cx2 = { state: null, column: null, marked: null, cc: null };
  function pass4() {
    for (var i = arguments.length - 1; i >= 0; i--) cx2.cc.push(arguments[i]);
  }
  function cont3() {
    pass4.apply(null, arguments);
    return true;
  }
  function inList3(name2, list2) {
    for (var v = list2; v; v = v.next) if (v.name == name2) return true;
    return false;
  }
  function register2(varname) {
    var state = cx2.state;
    cx2.marked = "def";
    if (state.context) {
      if (state.lexical.info == "var" && state.context && state.context.block) {
        var newContext = registerVarScoped(varname, state.context);
        if (newContext != null) {
          state.context = newContext;
          return;
        }
      } else if (!inList3(varname, state.localVars)) {
        state.localVars = new Var(varname, state.localVars);
        return;
      }
    }
    if (parserConfig4.globalVars && !inList3(varname, state.globalVars))
      state.globalVars = new Var(varname, state.globalVars);
  }
  function registerVarScoped(varname, context) {
    if (!context) {
      return null;
    } else if (context.block) {
      var inner = registerVarScoped(varname, context.prev);
      if (!inner) return null;
      if (inner == context.prev) return context;
      return new Context17(inner, context.vars, true);
    } else if (inList3(varname, context.vars)) {
      return context;
    } else {
      return new Context17(context.prev, new Var(varname, context.vars), false);
    }
  }
  function isModifier(name2) {
    return name2 == "public" || name2 == "private" || name2 == "protected" || name2 == "abstract" || name2 == "readonly";
  }
  function Context17(prev, vars, block4) {
    this.prev = prev;
    this.vars = vars;
    this.block = block4;
  }
  function Var(name2, next2) {
    this.name = name2;
    this.next = next2;
  }
  var defaultVars2 = new Var("this", new Var("arguments", null));
  function pushcontext2() {
    cx2.state.context = new Context17(cx2.state.context, cx2.state.localVars, false);
    cx2.state.localVars = defaultVars2;
  }
  function pushblockcontext() {
    cx2.state.context = new Context17(cx2.state.context, cx2.state.localVars, true);
    cx2.state.localVars = null;
  }
  pushcontext2.lex = pushblockcontext.lex = true;
  function popcontext2() {
    cx2.state.localVars = cx2.state.context.vars;
    cx2.state.context = cx2.state.context.prev;
  }
  popcontext2.lex = true;
  function pushlex2(type8, info) {
    var result = function() {
      var state = cx2.state, indent7 = state.indented;
      if (state.lexical.type == "stat") indent7 = state.lexical.indented;
      else for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
        indent7 = outer.indented;
      state.lexical = new JSLexical(indent7, cx2.stream.column(), type8, null, state.lexical, info);
    };
    result.lex = true;
    return result;
  }
  function poplex2() {
    var state = cx2.state;
    if (state.lexical.prev) {
      if (state.lexical.type == ")")
        state.indented = state.lexical.indented;
      state.lexical = state.lexical.prev;
    }
  }
  poplex2.lex = true;
  function expect2(wanted) {
    function exp(type8) {
      if (type8 == wanted) return cont3();
      else if (wanted == ";" || type8 == "}" || type8 == ")" || type8 == "]") return pass4();
      else return cont3(exp);
    }
    ;
    return exp;
  }
  function statement2(type8, value) {
    if (type8 == "var") return cont3(pushlex2("vardef", value), vardef, expect2(";"), poplex2);
    if (type8 == "keyword a") return cont3(pushlex2("form"), parenExpr, statement2, poplex2);
    if (type8 == "keyword b") return cont3(pushlex2("form"), statement2, poplex2);
    if (type8 == "keyword d") return cx2.stream.match(/^\s*$/, false) ? cont3() : cont3(pushlex2("stat"), maybeexpression2, expect2(";"), poplex2);
    if (type8 == "debugger") return cont3(expect2(";"));
    if (type8 == "{") return cont3(pushlex2("}"), pushblockcontext, block3, poplex2, popcontext2);
    if (type8 == ";") return cont3();
    if (type8 == "if") {
      if (cx2.state.lexical.info == "else" && cx2.state.cc[cx2.state.cc.length - 1] == poplex2)
        cx2.state.cc.pop()();
      return cont3(pushlex2("form"), parenExpr, statement2, poplex2, maybeelse);
    }
    if (type8 == "function") return cont3(functiondef2);
    if (type8 == "for") return cont3(pushlex2("form"), pushblockcontext, forspec, statement2, popcontext2, poplex2);
    if (type8 == "class" || isTS && value == "interface") {
      cx2.marked = "keyword";
      return cont3(pushlex2("form", type8 == "class" ? type8 : value), className2, poplex2);
    }
    if (type8 == "variable") {
      if (isTS && value == "declare") {
        cx2.marked = "keyword";
        return cont3(statement2);
      } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx2.stream.match(/^\s*\w/, false)) {
        cx2.marked = "keyword";
        if (value == "enum") return cont3(enumdef);
        else if (value == "type") return cont3(typename, expect2("operator"), typeexpr, expect2(";"));
        else return cont3(pushlex2("form"), pattern, expect2("{"), pushlex2("}"), block3, poplex2, poplex2);
      } else if (isTS && value == "namespace") {
        cx2.marked = "keyword";
        return cont3(pushlex2("form"), expression3, statement2, poplex2);
      } else if (isTS && value == "abstract") {
        cx2.marked = "keyword";
        return cont3(statement2);
      } else {
        return cont3(pushlex2("stat"), maybelabel2);
      }
    }
    if (type8 == "switch") return cont3(
      pushlex2("form"),
      parenExpr,
      expect2("{"),
      pushlex2("}", "switch"),
      pushblockcontext,
      block3,
      poplex2,
      poplex2,
      popcontext2
    );
    if (type8 == "case") return cont3(expression3, expect2(":"));
    if (type8 == "default") return cont3(expect2(":"));
    if (type8 == "catch") return cont3(pushlex2("form"), pushcontext2, maybeCatchBinding, statement2, poplex2, popcontext2);
    if (type8 == "export") return cont3(pushlex2("stat"), afterExport, poplex2);
    if (type8 == "import") return cont3(pushlex2("stat"), afterImport, poplex2);
    if (type8 == "async") return cont3(statement2);
    if (value == "@") return cont3(expression3, statement2);
    return pass4(pushlex2("stat"), expression3, expect2(";"), poplex2);
  }
  function maybeCatchBinding(type8) {
    if (type8 == "(") return cont3(funarg2, expect2(")"));
  }
  function expression3(type8, value) {
    return expressionInner(type8, value, false);
  }
  function expressionNoComma(type8, value) {
    return expressionInner(type8, value, true);
  }
  function parenExpr(type8) {
    if (type8 != "(") return pass4();
    return cont3(pushlex2(")"), maybeexpression2, expect2(")"), poplex2);
  }
  function expressionInner(type8, value, noComma) {
    if (cx2.state.fatArrowAt == cx2.stream.start) {
      var body2 = noComma ? arrowBodyNoComma : arrowBody;
      if (type8 == "(") return cont3(pushcontext2, pushlex2(")"), commasep2(funarg2, ")"), poplex2, expect2("=>"), body2, popcontext2);
      else if (type8 == "variable") return pass4(pushcontext2, pattern, expect2("=>"), body2, popcontext2);
    }
    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
    if (atomicTypes2.hasOwnProperty(type8)) return cont3(maybeop);
    if (type8 == "function") return cont3(functiondef2, maybeop);
    if (type8 == "class" || isTS && value == "interface") {
      cx2.marked = "keyword";
      return cont3(pushlex2("form"), classExpression, poplex2);
    }
    if (type8 == "keyword c" || type8 == "async") return cont3(noComma ? expressionNoComma : expression3);
    if (type8 == "(") return cont3(pushlex2(")"), maybeexpression2, expect2(")"), poplex2, maybeop);
    if (type8 == "operator" || type8 == "spread") return cont3(noComma ? expressionNoComma : expression3);
    if (type8 == "[") return cont3(pushlex2("]"), arrayLiteral, poplex2, maybeop);
    if (type8 == "{") return contCommasep(objprop2, "}", null, maybeop);
    if (type8 == "quasi") return pass4(quasi, maybeop);
    if (type8 == "new") return cont3(maybeTarget(noComma));
    return cont3();
  }
  function maybeexpression2(type8) {
    if (type8.match(/[;\}\)\],]/)) return pass4();
    return pass4(expression3);
  }
  function maybeoperatorComma(type8, value) {
    if (type8 == ",") return cont3(maybeexpression2);
    return maybeoperatorNoComma(type8, value, false);
  }
  function maybeoperatorNoComma(type8, value, noComma) {
    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
    var expr = noComma == false ? expression3 : expressionNoComma;
    if (type8 == "=>") return cont3(pushcontext2, noComma ? arrowBodyNoComma : arrowBody, popcontext2);
    if (type8 == "operator") {
      if (/\+\+|--/.test(value) || isTS && value == "!") return cont3(me);
      if (isTS && value == "<" && cx2.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false))
        return cont3(pushlex2(">"), commasep2(typeexpr, ">"), poplex2, me);
      if (value == "?") return cont3(expression3, expect2(":"), expr);
      return cont3(expr);
    }
    if (type8 == "quasi") {
      return pass4(quasi, me);
    }
    if (type8 == ";") return;
    if (type8 == "(") return contCommasep(expressionNoComma, ")", "call", me);
    if (type8 == ".") return cont3(property3, me);
    if (type8 == "[") return cont3(pushlex2("]"), maybeexpression2, expect2("]"), poplex2, me);
    if (isTS && value == "as") {
      cx2.marked = "keyword";
      return cont3(typeexpr, me);
    }
    if (type8 == "regexp") {
      cx2.state.lastType = cx2.marked = "operator";
      cx2.stream.backUp(cx2.stream.pos - cx2.stream.start - 1);
      return cont3(expr);
    }
  }
  function quasi(type8, value) {
    if (type8 != "quasi") return pass4();
    if (value.slice(value.length - 2) != "${") return cont3(quasi);
    return cont3(maybeexpression2, continueQuasi);
  }
  function continueQuasi(type8) {
    if (type8 == "}") {
      cx2.marked = "string.special";
      cx2.state.tokenize = tokenQuasi;
      return cont3(quasi);
    }
  }
  function arrowBody(type8) {
    findFatArrow(cx2.stream, cx2.state);
    return pass4(type8 == "{" ? statement2 : expression3);
  }
  function arrowBodyNoComma(type8) {
    findFatArrow(cx2.stream, cx2.state);
    return pass4(type8 == "{" ? statement2 : expressionNoComma);
  }
  function maybeTarget(noComma) {
    return function(type8) {
      if (type8 == ".") return cont3(noComma ? targetNoComma : target);
      else if (type8 == "variable" && isTS) return cont3(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);
      else return pass4(noComma ? expressionNoComma : expression3);
    };
  }
  function target(_, value) {
    if (value == "target") {
      cx2.marked = "keyword";
      return cont3(maybeoperatorComma);
    }
  }
  function targetNoComma(_, value) {
    if (value == "target") {
      cx2.marked = "keyword";
      return cont3(maybeoperatorNoComma);
    }
  }
  function maybelabel2(type8) {
    if (type8 == ":") return cont3(poplex2, statement2);
    return pass4(maybeoperatorComma, expect2(";"), poplex2);
  }
  function property3(type8) {
    if (type8 == "variable") {
      cx2.marked = "property";
      return cont3();
    }
  }
  function objprop2(type8, value) {
    if (type8 == "async") {
      cx2.marked = "property";
      return cont3(objprop2);
    } else if (type8 == "variable" || cx2.style == "keyword") {
      cx2.marked = "property";
      if (value == "get" || value == "set") return cont3(getterSetter);
      var m;
      if (isTS && cx2.state.fatArrowAt == cx2.stream.start && (m = cx2.stream.match(/^\s*:\s*/, false)))
        cx2.state.fatArrowAt = cx2.stream.pos + m[0].length;
      return cont3(afterprop);
    } else if (type8 == "number" || type8 == "string") {
      cx2.marked = jsonldMode ? "property" : cx2.style + " property";
      return cont3(afterprop);
    } else if (type8 == "jsonld-keyword") {
      return cont3(afterprop);
    } else if (isTS && isModifier(value)) {
      cx2.marked = "keyword";
      return cont3(objprop2);
    } else if (type8 == "[") {
      return cont3(expression3, maybetype, expect2("]"), afterprop);
    } else if (type8 == "spread") {
      return cont3(expressionNoComma, afterprop);
    } else if (value == "*") {
      cx2.marked = "keyword";
      return cont3(objprop2);
    } else if (type8 == ":") {
      return pass4(afterprop);
    }
  }
  function getterSetter(type8) {
    if (type8 != "variable") return pass4(afterprop);
    cx2.marked = "property";
    return cont3(functiondef2);
  }
  function afterprop(type8) {
    if (type8 == ":") return cont3(expressionNoComma);
    if (type8 == "(") return pass4(functiondef2);
  }
  function commasep2(what, end2, sep) {
    function proceed(type8, value) {
      if (sep ? sep.indexOf(type8) > -1 : type8 == ",") {
        var lex = cx2.state.lexical;
        if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
        return cont3(function(type9, value2) {
          if (type9 == end2 || value2 == end2) return pass4();
          return pass4(what);
        }, proceed);
      }
      if (type8 == end2 || value == end2) return cont3();
      if (sep && sep.indexOf(";") > -1) return pass4(what);
      return cont3(expect2(end2));
    }
    return function(type8, value) {
      if (type8 == end2 || value == end2) return cont3();
      return pass4(what, proceed);
    };
  }
  function contCommasep(what, end2, info) {
    for (var i = 3; i < arguments.length; i++)
      cx2.cc.push(arguments[i]);
    return cont3(pushlex2(end2, info), commasep2(what, end2), poplex2);
  }
  function block3(type8) {
    if (type8 == "}") return cont3();
    return pass4(statement2, block3);
  }
  function maybetype(type8, value) {
    if (isTS) {
      if (type8 == ":") return cont3(typeexpr);
      if (value == "?") return cont3(maybetype);
    }
  }
  function maybetypeOrIn(type8, value) {
    if (isTS && (type8 == ":" || value == "in")) return cont3(typeexpr);
  }
  function mayberettype(type8) {
    if (isTS && type8 == ":") {
      if (cx2.stream.match(/^\s*\w+\s+is\b/, false)) return cont3(expression3, isKW, typeexpr);
      else return cont3(typeexpr);
    }
  }
  function isKW(_, value) {
    if (value == "is") {
      cx2.marked = "keyword";
      return cont3();
    }
  }
  function typeexpr(type8, value) {
    if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
      cx2.marked = "keyword";
      return cont3(value == "typeof" ? expressionNoComma : typeexpr);
    }
    if (type8 == "variable" || value == "void") {
      cx2.marked = "type";
      return cont3(afterType);
    }
    if (value == "|" || value == "&") return cont3(typeexpr);
    if (type8 == "string" || type8 == "number" || type8 == "atom") return cont3(afterType);
    if (type8 == "[") return cont3(pushlex2("]"), commasep2(typeexpr, "]", ","), poplex2, afterType);
    if (type8 == "{") return cont3(pushlex2("}"), typeprops, poplex2, afterType);
    if (type8 == "(") return cont3(commasep2(typearg, ")"), maybeReturnType, afterType);
    if (type8 == "<") return cont3(commasep2(typeexpr, ">"), typeexpr);
    if (type8 == "quasi") return pass4(quasiType, afterType);
  }
  function maybeReturnType(type8) {
    if (type8 == "=>") return cont3(typeexpr);
  }
  function typeprops(type8) {
    if (type8.match(/[\}\)\]]/)) return cont3();
    if (type8 == "," || type8 == ";") return cont3(typeprops);
    return pass4(typeprop2, typeprops);
  }
  function typeprop2(type8, value) {
    if (type8 == "variable" || cx2.style == "keyword") {
      cx2.marked = "property";
      return cont3(typeprop2);
    } else if (value == "?" || type8 == "number" || type8 == "string") {
      return cont3(typeprop2);
    } else if (type8 == ":") {
      return cont3(typeexpr);
    } else if (type8 == "[") {
      return cont3(expect2("variable"), maybetypeOrIn, expect2("]"), typeprop2);
    } else if (type8 == "(") {
      return pass4(functiondecl, typeprop2);
    } else if (!type8.match(/[;\}\)\],]/)) {
      return cont3();
    }
  }
  function quasiType(type8, value) {
    if (type8 != "quasi") return pass4();
    if (value.slice(value.length - 2) != "${") return cont3(quasiType);
    return cont3(typeexpr, continueQuasiType);
  }
  function continueQuasiType(type8) {
    if (type8 == "}") {
      cx2.marked = "string.special";
      cx2.state.tokenize = tokenQuasi;
      return cont3(quasiType);
    }
  }
  function typearg(type8, value) {
    if (type8 == "variable" && cx2.stream.match(/^\s*[?:]/, false) || value == "?") return cont3(typearg);
    if (type8 == ":") return cont3(typeexpr);
    if (type8 == "spread") return cont3(typearg);
    return pass4(typeexpr);
  }
  function afterType(type8, value) {
    if (value == "<") return cont3(pushlex2(">"), commasep2(typeexpr, ">"), poplex2, afterType);
    if (value == "|" || type8 == "." || value == "&") return cont3(typeexpr);
    if (type8 == "[") return cont3(typeexpr, expect2("]"), afterType);
    if (value == "extends" || value == "implements") {
      cx2.marked = "keyword";
      return cont3(typeexpr);
    }
    if (value == "?") return cont3(typeexpr, expect2(":"), typeexpr);
  }
  function maybeTypeArgs(_, value) {
    if (value == "<") return cont3(pushlex2(">"), commasep2(typeexpr, ">"), poplex2, afterType);
  }
  function typeparam() {
    return pass4(typeexpr, maybeTypeDefault);
  }
  function maybeTypeDefault(_, value) {
    if (value == "=") return cont3(typeexpr);
  }
  function vardef(_, value) {
    if (value == "enum") {
      cx2.marked = "keyword";
      return cont3(enumdef);
    }
    return pass4(pattern, maybetype, maybeAssign, vardefCont);
  }
  function pattern(type8, value) {
    if (isTS && isModifier(value)) {
      cx2.marked = "keyword";
      return cont3(pattern);
    }
    if (type8 == "variable") {
      register2(value);
      return cont3();
    }
    if (type8 == "spread") return cont3(pattern);
    if (type8 == "[") return contCommasep(eltpattern, "]");
    if (type8 == "{") return contCommasep(proppattern, "}");
  }
  function proppattern(type8, value) {
    if (type8 == "variable" && !cx2.stream.match(/^\s*:/, false)) {
      register2(value);
      return cont3(maybeAssign);
    }
    if (type8 == "variable") cx2.marked = "property";
    if (type8 == "spread") return cont3(pattern);
    if (type8 == "}") return pass4();
    if (type8 == "[") return cont3(expression3, expect2("]"), expect2(":"), proppattern);
    return cont3(expect2(":"), pattern, maybeAssign);
  }
  function eltpattern() {
    return pass4(pattern, maybeAssign);
  }
  function maybeAssign(_type, value) {
    if (value == "=") return cont3(expressionNoComma);
  }
  function vardefCont(type8) {
    if (type8 == ",") return cont3(vardef);
  }
  function maybeelse(type8, value) {
    if (type8 == "keyword b" && value == "else") return cont3(pushlex2("form", "else"), statement2, poplex2);
  }
  function forspec(type8, value) {
    if (value == "await") return cont3(forspec);
    if (type8 == "(") return cont3(pushlex2(")"), forspec12, poplex2);
  }
  function forspec12(type8) {
    if (type8 == "var") return cont3(vardef, forspec2);
    if (type8 == "variable") return cont3(forspec2);
    return pass4(forspec2);
  }
  function forspec2(type8, value) {
    if (type8 == ")") return cont3();
    if (type8 == ";") return cont3(forspec2);
    if (value == "in" || value == "of") {
      cx2.marked = "keyword";
      return cont3(expression3, forspec2);
    }
    return pass4(expression3, forspec2);
  }
  function functiondef2(type8, value) {
    if (value == "*") {
      cx2.marked = "keyword";
      return cont3(functiondef2);
    }
    if (type8 == "variable") {
      register2(value);
      return cont3(functiondef2);
    }
    if (type8 == "(") return cont3(pushcontext2, pushlex2(")"), commasep2(funarg2, ")"), poplex2, mayberettype, statement2, popcontext2);
    if (isTS && value == "<") return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2, functiondef2);
  }
  function functiondecl(type8, value) {
    if (value == "*") {
      cx2.marked = "keyword";
      return cont3(functiondecl);
    }
    if (type8 == "variable") {
      register2(value);
      return cont3(functiondecl);
    }
    if (type8 == "(") return cont3(pushcontext2, pushlex2(")"), commasep2(funarg2, ")"), poplex2, mayberettype, popcontext2);
    if (isTS && value == "<") return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2, functiondecl);
  }
  function typename(type8, value) {
    if (type8 == "keyword" || type8 == "variable") {
      cx2.marked = "type";
      return cont3(typename);
    } else if (value == "<") {
      return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2);
    }
  }
  function funarg2(type8, value) {
    if (value == "@") cont3(expression3, funarg2);
    if (type8 == "spread") return cont3(funarg2);
    if (isTS && isModifier(value)) {
      cx2.marked = "keyword";
      return cont3(funarg2);
    }
    if (isTS && type8 == "this") return cont3(maybetype, maybeAssign);
    return pass4(pattern, maybetype, maybeAssign);
  }
  function classExpression(type8, value) {
    if (type8 == "variable") return className2(type8, value);
    return classNameAfter(type8, value);
  }
  function className2(type8, value) {
    if (type8 == "variable") {
      register2(value);
      return cont3(classNameAfter);
    }
  }
  function classNameAfter(type8, value) {
    if (value == "<") return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2, classNameAfter);
    if (value == "extends" || value == "implements" || isTS && type8 == ",") {
      if (value == "implements") cx2.marked = "keyword";
      return cont3(isTS ? typeexpr : expression3, classNameAfter);
    }
    if (type8 == "{") return cont3(pushlex2("}"), classBody, poplex2);
  }
  function classBody(type8, value) {
    if (type8 == "async" || type8 == "variable" && (value == "static" || value == "get" || value == "set" || isTS && isModifier(value)) && cx2.stream.match(/^\s+#?[\w$\xa1-\uffff]/, false)) {
      cx2.marked = "keyword";
      return cont3(classBody);
    }
    if (type8 == "variable" || cx2.style == "keyword") {
      cx2.marked = "property";
      return cont3(classfield, classBody);
    }
    if (type8 == "number" || type8 == "string") return cont3(classfield, classBody);
    if (type8 == "[")
      return cont3(expression3, maybetype, expect2("]"), classfield, classBody);
    if (value == "*") {
      cx2.marked = "keyword";
      return cont3(classBody);
    }
    if (isTS && type8 == "(") return pass4(functiondecl, classBody);
    if (type8 == ";" || type8 == ",") return cont3(classBody);
    if (type8 == "}") return cont3();
    if (value == "@") return cont3(expression3, classBody);
  }
  function classfield(type8, value) {
    if (value == "!" || value == "?") return cont3(classfield);
    if (type8 == ":") return cont3(typeexpr, maybeAssign);
    if (value == "=") return cont3(expressionNoComma);
    var context = cx2.state.lexical.prev, isInterface = context && context.info == "interface";
    return pass4(isInterface ? functiondecl : functiondef2);
  }
  function afterExport(type8, value) {
    if (value == "*") {
      cx2.marked = "keyword";
      return cont3(maybeFrom, expect2(";"));
    }
    if (value == "default") {
      cx2.marked = "keyword";
      return cont3(expression3, expect2(";"));
    }
    if (type8 == "{") return cont3(commasep2(exportField, "}"), maybeFrom, expect2(";"));
    return pass4(statement2);
  }
  function exportField(type8, value) {
    if (value == "as") {
      cx2.marked = "keyword";
      return cont3(expect2("variable"));
    }
    if (type8 == "variable") return pass4(expressionNoComma, exportField);
  }
  function afterImport(type8) {
    if (type8 == "string") return cont3();
    if (type8 == "(") return pass4(expression3);
    if (type8 == ".") return pass4(maybeoperatorComma);
    return pass4(importSpec, maybeMoreImports, maybeFrom);
  }
  function importSpec(type8, value) {
    if (type8 == "{") return contCommasep(importSpec, "}");
    if (type8 == "variable") register2(value);
    if (value == "*") cx2.marked = "keyword";
    return cont3(maybeAs);
  }
  function maybeMoreImports(type8) {
    if (type8 == ",") return cont3(importSpec, maybeMoreImports);
  }
  function maybeAs(_type, value) {
    if (value == "as") {
      cx2.marked = "keyword";
      return cont3(importSpec);
    }
  }
  function maybeFrom(_type, value) {
    if (value == "from") {
      cx2.marked = "keyword";
      return cont3(expression3);
    }
  }
  function arrayLiteral(type8) {
    if (type8 == "]") return cont3();
    return pass4(commasep2(expressionNoComma, "]"));
  }
  function enumdef() {
    return pass4(pushlex2("form"), pattern, expect2("{"), pushlex2("}"), commasep2(enummember, "}"), poplex2, poplex2);
  }
  function enummember() {
    return pass4(pattern, maybeAssign);
  }
  function isContinuedStatement(state, textAfter) {
    return state.lastType == "operator" || state.lastType == "," || isOperatorChar17.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));
  }
  function expressionAllowed(stream, state, backUp) {
    return state.tokenize == tokenBase48 && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(state.lastType) || state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));
  }
  return {
    name: parserConfig4.name,
    startState: function(indentUnit2) {
      var state = {
        tokenize: tokenBase48,
        lastType: "sof",
        cc: [],
        lexical: new JSLexical(-indentUnit2, 0, "block", false),
        localVars: parserConfig4.localVars,
        context: parserConfig4.localVars && new Context17(null, null, false),
        indented: 0
      };
      if (parserConfig4.globalVars && typeof parserConfig4.globalVars == "object")
        state.globalVars = parserConfig4.globalVars;
      return state;
    },
    token: function(stream, state) {
      if (stream.sol()) {
        if (!state.lexical.hasOwnProperty("align"))
          state.lexical.align = false;
        state.indented = stream.indentation();
        findFatArrow(stream, state);
      }
      if (state.tokenize != tokenComment22 && stream.eatSpace()) return null;
      var style2 = state.tokenize(stream, state);
      if (type7 == "comment") return style2;
      state.lastType = type7 == "operator" && (content3 == "++" || content3 == "--") ? "incdec" : type7;
      return parseJS(state, style2, type7, content3, stream);
    },
    indent: function(state, textAfter, cx3) {
      if (state.tokenize == tokenComment22 || state.tokenize == tokenQuasi) return null;
      if (state.tokenize != tokenBase48) return 0;
      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top3;
      if (!/^\s*else\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {
        var c2 = state.cc[i];
        if (c2 == poplex2) lexical = lexical.prev;
        else if (c2 != maybeelse && c2 != popcontext2) break;
      }
      while ((lexical.type == "stat" || lexical.type == "form") && (firstChar == "}" || (top3 = state.cc[state.cc.length - 1]) && (top3 == maybeoperatorComma || top3 == maybeoperatorNoComma) && !/^[,\.=+\-*:?[\(]/.test(textAfter)))
        lexical = lexical.prev;
      if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
        lexical = lexical.prev;
      var type8 = lexical.type, closing4 = firstChar == type8;
      if (type8 == "vardef") return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);
      else if (type8 == "form" && firstChar == "{") return lexical.indented;
      else if (type8 == "form") return lexical.indented + cx3.unit;
      else if (type8 == "stat")
        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx3.unit : 0);
      else if (lexical.info == "switch" && !closing4 && parserConfig4.doubleIndentSwitch != false)
        return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx3.unit : 2 * cx3.unit);
      else if (lexical.align) return lexical.column + (closing4 ? 0 : 1);
      else return lexical.indented + (closing4 ? 0 : cx3.unit);
    },
    languageData: {
      indentOnInput: /^\s*(?:case .*?:|default:|\{|\})$/,
      commentTokens: jsonMode ? void 0 : { line: "//", block: { open: "/*", close: "*/" } },
      closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
      wordChars: "$"
    }
  };
}
var javascript2, json2, jsonld, typescript;
var init_javascript = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/javascript.js"() {
    javascript2 = mkJavaScript({ name: "javascript" });
    json2 = mkJavaScript({ name: "json", json: true });
    jsonld = mkJavaScript({ name: "json", jsonld: true });
    typescript = mkJavaScript({ name: "typescript", typescript: true });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/jinja2.js
var jinja2_exports = {};
__export(jinja2_exports, {
  jinja2: () => jinja2
});
function tokenBase13(stream, state) {
  var ch2 = stream.peek();
  if (state.incomment) {
    if (!stream.skipTo("#}")) {
      stream.skipToEnd();
    } else {
      stream.eatWhile(/\#|}/);
      state.incomment = false;
    }
    return "comment";
  } else if (state.intag) {
    if (state.operator) {
      state.operator = false;
      if (stream.match(atom3)) {
        return "atom";
      }
      if (stream.match(number2)) {
        return "number";
      }
    }
    if (state.sign) {
      state.sign = false;
      if (stream.match(atom3)) {
        return "atom";
      }
      if (stream.match(number2)) {
        return "number";
      }
    }
    if (state.instring) {
      if (ch2 == state.instring) {
        state.instring = false;
      }
      stream.next();
      return "string";
    } else if (ch2 == "'" || ch2 == '"') {
      state.instring = ch2;
      stream.next();
      return "string";
    } else if (state.inbraces > 0 && ch2 == ")") {
      stream.next();
      state.inbraces--;
    } else if (ch2 == "(") {
      stream.next();
      state.inbraces++;
    } else if (state.inbrackets > 0 && ch2 == "]") {
      stream.next();
      state.inbrackets--;
    } else if (ch2 == "[") {
      stream.next();
      state.inbrackets++;
    } else if (!state.lineTag && (stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}"))) {
      state.intag = false;
      return "tag";
    } else if (stream.match(operator3)) {
      state.operator = true;
      return "operator";
    } else if (stream.match(sign)) {
      state.sign = true;
    } else {
      if (stream.column() == 1 && state.lineTag && stream.match(keywords17)) {
        return "keyword";
      }
      if (stream.eat(" ") || stream.sol()) {
        if (stream.match(keywords17)) {
          return "keyword";
        }
        if (stream.match(atom3)) {
          return "atom";
        }
        if (stream.match(number2)) {
          return "number";
        }
        if (stream.sol()) {
          stream.next();
        }
      } else {
        stream.next();
      }
    }
    return "variable";
  } else if (stream.eat("{")) {
    if (stream.eat("#")) {
      state.incomment = true;
      if (!stream.skipTo("#}")) {
        stream.skipToEnd();
      } else {
        stream.eatWhile(/\#|}/);
        state.incomment = false;
      }
      return "comment";
    } else if (ch2 = stream.eat(/\{|%/)) {
      state.intag = ch2;
      state.inbraces = 0;
      state.inbrackets = 0;
      if (ch2 == "{") {
        state.intag = "}";
      }
      stream.eat("-");
      return "tag";
    }
  } else if (stream.eat("#")) {
    if (stream.peek() == "#") {
      stream.skipToEnd();
      return "comment";
    } else if (!stream.eol()) {
      state.intag = true;
      state.lineTag = true;
      state.inbraces = 0;
      state.inbrackets = 0;
      return "tag";
    }
  }
  stream.next();
}
var keywords17, operator3, sign, atom3, number2, jinja2;
var init_jinja2 = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/jinja2.js"() {
    keywords17 = [
      "and",
      "as",
      "block",
      "endblock",
      "by",
      "cycle",
      "debug",
      "else",
      "elif",
      "extends",
      "filter",
      "endfilter",
      "firstof",
      "do",
      "for",
      "endfor",
      "if",
      "endif",
      "ifchanged",
      "endifchanged",
      "ifequal",
      "endifequal",
      "ifnotequal",
      "set",
      "raw",
      "endraw",
      "endifnotequal",
      "in",
      "include",
      "load",
      "not",
      "now",
      "or",
      "parsed",
      "regroup",
      "reversed",
      "spaceless",
      "call",
      "endcall",
      "macro",
      "endmacro",
      "endspaceless",
      "ssi",
      "templatetag",
      "openblock",
      "closeblock",
      "openvariable",
      "closevariable",
      "without",
      "context",
      "openbrace",
      "closebrace",
      "opencomment",
      "closecomment",
      "widthratio",
      "url",
      "with",
      "endwith",
      "get_current_language",
      "trans",
      "endtrans",
      "noop",
      "blocktrans",
      "endblocktrans",
      "get_available_languages",
      "get_current_language_bidi",
      "pluralize",
      "autoescape",
      "endautoescape"
    ];
    operator3 = /^[+\-*&%=<>!?|~^]/;
    sign = /^[:\[\(\{]/;
    atom3 = ["true", "false"];
    number2 = /^(\d[+\-\*\/])?\d+(\.\d+)?/;
    keywords17 = new RegExp("((" + keywords17.join(")|(") + "))\\b");
    atom3 = new RegExp("((" + atom3.join(")|(") + "))\\b");
    jinja2 = {
      name: "jinja2",
      startState: function() {
        return { tokenize: tokenBase13, inbrackets: 0, inbraces: 0 };
      },
      token: function(stream, state) {
        var style2 = state.tokenize(stream, state);
        if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {
          state.intag = false;
          state.lineTag = false;
        }
        return style2;
      },
      languageData: {
        commentTokens: { block: { open: "{#", close: "#}", line: "##" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/julia.js
var julia_exports = {};
__export(julia_exports, {
  julia: () => julia
});
function wordRegexp5(words22, end2, pre) {
  if (typeof pre === "undefined") pre = "";
  if (typeof end2 === "undefined") {
    end2 = "\\b";
  }
  return new RegExp("^" + pre + "((" + words22.join(")|(") + "))" + end2);
}
function inArray(state) {
  return state.nestedArrays > 0;
}
function inGenerator(state) {
  return state.nestedGenerators > 0;
}
function currentScope(state, n) {
  if (typeof n === "undefined") {
    n = 0;
  }
  if (state.scopes.length <= n) {
    return null;
  }
  return state.scopes[state.scopes.length - (n + 1)];
}
function tokenBase14(stream, state) {
  if (stream.match("#=", false)) {
    state.tokenize = tokenComment6;
    return state.tokenize(stream, state);
  }
  var leavingExpr = state.leavingExpr;
  if (stream.sol()) {
    leavingExpr = false;
  }
  state.leavingExpr = false;
  if (leavingExpr) {
    if (stream.match(/^'+/)) {
      return "operator";
    }
  }
  if (stream.match(/\.{4,}/)) {
    return "error";
  } else if (stream.match(/\.{1,3}/)) {
    return "operator";
  }
  if (stream.eatSpace()) {
    return null;
  }
  var ch2 = stream.peek();
  if (ch2 === "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 === "[") {
    state.scopes.push("[");
    state.nestedArrays++;
  }
  if (ch2 === "(") {
    state.scopes.push("(");
    state.nestedGenerators++;
  }
  if (inArray(state) && ch2 === "]") {
    while (state.scopes.length && currentScope(state) !== "[") {
      state.scopes.pop();
    }
    state.scopes.pop();
    state.nestedArrays--;
    state.leavingExpr = true;
  }
  if (inGenerator(state) && ch2 === ")") {
    while (state.scopes.length && currentScope(state) !== "(") {
      state.scopes.pop();
    }
    state.scopes.pop();
    state.nestedGenerators--;
    state.leavingExpr = true;
  }
  if (inArray(state)) {
    if (state.lastToken == "end" && stream.match(":")) {
      return "operator";
    }
    if (stream.match("end")) {
      return "number";
    }
  }
  var match2;
  if (match2 = stream.match(openers, false)) {
    state.scopes.push(match2[0]);
  }
  if (stream.match(closers, false)) {
    state.scopes.pop();
  }
  if (stream.match(/^::(?![:\$])/)) {
    state.tokenize = tokenAnnotation;
    return state.tokenize(stream, state);
  }
  if (!leavingExpr && (stream.match(symbol3) || stream.match(symbolOperators))) {
    return "builtin";
  }
  if (stream.match(operators4)) {
    return "operator";
  }
  if (stream.match(/^\.?\d/, false)) {
    var imMatcher = RegExp(/^im\b/);
    var numberLiteral2 = false;
    if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) {
      numberLiteral2 = true;
    }
    if (stream.match(/^0x[0-9a-f_]+/i)) {
      numberLiteral2 = true;
    }
    if (stream.match(/^0b[01_]+/i)) {
      numberLiteral2 = true;
    }
    if (stream.match(/^0o[0-7_]+/i)) {
      numberLiteral2 = true;
    }
    if (stream.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i)) {
      numberLiteral2 = true;
    }
    if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) {
      numberLiteral2 = true;
    }
    if (numberLiteral2) {
      stream.match(imMatcher);
      state.leavingExpr = true;
      return "number";
    }
  }
  if (stream.match("'")) {
    state.tokenize = tokenChar;
    return state.tokenize(stream, state);
  }
  if (stream.match(stringPrefixes2)) {
    state.tokenize = tokenStringFactory(stream.current());
    return state.tokenize(stream, state);
  }
  if (stream.match(macro) || stream.match(macroOperators)) {
    return "meta";
  }
  if (stream.match(delimiters2)) {
    return null;
  }
  if (stream.match(keywords18)) {
    return "keyword";
  }
  if (stream.match(builtins4)) {
    return "builtin";
  }
  var isDefinition = state.isDefinition || state.lastToken == "function" || state.lastToken == "macro" || state.lastToken == "type" || state.lastToken == "struct" || state.lastToken == "immutable";
  if (stream.match(identifiers5)) {
    if (isDefinition) {
      if (stream.peek() === ".") {
        state.isDefinition = true;
        return "variable";
      }
      state.isDefinition = false;
      return "def";
    }
    state.leavingExpr = true;
    return "variable";
  }
  stream.next();
  return "error";
}
function tokenAnnotation(stream, state) {
  stream.match(/.*?(?=[,;{}()=\s]|$)/);
  if (stream.match("{")) {
    state.nestedParameters++;
  } else if (stream.match("}") && state.nestedParameters > 0) {
    state.nestedParameters--;
  }
  if (state.nestedParameters > 0) {
    stream.match(/.*?(?={|})/) || stream.next();
  } else if (state.nestedParameters == 0) {
    state.tokenize = tokenBase14;
  }
  return "builtin";
}
function tokenComment6(stream, state) {
  if (stream.match("#=")) {
    state.nestedComments++;
  }
  if (!stream.match(/.*?(?=(#=|=#))/)) {
    stream.skipToEnd();
  }
  if (stream.match("=#")) {
    state.nestedComments--;
    if (state.nestedComments == 0)
      state.tokenize = tokenBase14;
  }
  return "comment";
}
function tokenChar(stream, state) {
  var isChar = false, match2;
  if (stream.match(chars)) {
    isChar = true;
  } else if (match2 = stream.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
    var value = parseInt(match2[1], 16);
    if (value <= 55295 || value >= 57344) {
      isChar = true;
      stream.next();
    }
  } else if (match2 = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
    var value = parseInt(match2[1], 16);
    if (value <= 1114111) {
      isChar = true;
      stream.next();
    }
  }
  if (isChar) {
    state.leavingExpr = true;
    state.tokenize = tokenBase14;
    return "string";
  }
  if (!stream.match(/^[^']+(?=')/)) {
    stream.skipToEnd();
  }
  if (stream.match("'")) {
    state.tokenize = tokenBase14;
  }
  return "error";
}
function tokenStringFactory(delimiter2) {
  if (delimiter2.substr(-3) === '"""') {
    delimiter2 = '"""';
  } else if (delimiter2.substr(-1) === '"') {
    delimiter2 = '"';
  }
  function tokenString31(stream, state) {
    if (stream.eat("\\")) {
      stream.next();
    } else if (stream.match(delimiter2)) {
      state.tokenize = tokenBase14;
      state.leavingExpr = true;
      return "string";
    } else {
      stream.eat(/[`"]/);
    }
    stream.eatWhile(/[^\\`"]/);
    return "string";
  }
  return tokenString31;
}
var octChar, hexChar2, sChar, uChar, asciiOperatorsList, operators4, delimiters2, identifiers5, chars, openersList, closersList, keywordsList, builtinsList, openers, closers, keywords18, builtins4, macro, symbol3, stringPrefixes2, macroOperators, symbolOperators, julia;
var init_julia = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/julia.js"() {
    octChar = "\\\\[0-7]{1,3}";
    hexChar2 = "\\\\x[A-Fa-f0-9]{1,2}";
    sChar = `\\\\[abefnrtv0%?'"\\\\]`;
    uChar = "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";
    asciiOperatorsList = [
      "[<>]:",
      "[<>=]=",
      "<<=?",
      ">>>?=?",
      "=>",
      "--?>",
      "<--[->]?",
      "\\/\\/",
      "\\.{2,3}",
      "[\\.\\\\%*+\\-<>!\\/^|&]=?",
      "\\?",
      "\\$",
      "~",
      ":"
    ];
    operators4 = wordRegexp5([
      "[<>]:",
      "[<>=]=",
      "[!=]==",
      "<<=?",
      ">>>?=?",
      "=>?",
      "--?>",
      "<--[->]?",
      "\\/\\/",
      "[\\\\%*+\\-<>!\\/^|&\\u00F7\\u22BB]=?",
      "\\?",
      "\\$",
      "~",
      ":",
      "\\u00D7",
      "\\u2208",
      "\\u2209",
      "\\u220B",
      "\\u220C",
      "\\u2218",
      "\\u221A",
      "\\u221B",
      "\\u2229",
      "\\u222A",
      "\\u2260",
      "\\u2264",
      "\\u2265",
      "\\u2286",
      "\\u2288",
      "\\u228A",
      "\\u22C5",
      "\\b(in|isa)\\b(?!.?\\()"
    ], "");
    delimiters2 = /^[;,()[\]{}]/;
    identifiers5 = /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;
    chars = wordRegexp5([octChar, hexChar2, sChar, uChar], "'");
    openersList = [
      "begin",
      "function",
      "type",
      "struct",
      "immutable",
      "let",
      "macro",
      "for",
      "while",
      "quote",
      "if",
      "else",
      "elseif",
      "try",
      "finally",
      "catch",
      "do"
    ];
    closersList = ["end", "else", "elseif", "catch", "finally"];
    keywordsList = [
      "if",
      "else",
      "elseif",
      "while",
      "for",
      "begin",
      "let",
      "end",
      "do",
      "try",
      "catch",
      "finally",
      "return",
      "break",
      "continue",
      "global",
      "local",
      "const",
      "export",
      "import",
      "importall",
      "using",
      "function",
      "where",
      "macro",
      "module",
      "baremodule",
      "struct",
      "type",
      "mutable",
      "immutable",
      "quote",
      "typealias",
      "abstract",
      "primitive",
      "bitstype"
    ];
    builtinsList = ["true", "false", "nothing", "NaN", "Inf"];
    openers = wordRegexp5(openersList);
    closers = wordRegexp5(closersList);
    keywords18 = wordRegexp5(keywordsList);
    builtins4 = wordRegexp5(builtinsList);
    macro = /^@[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
    symbol3 = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
    stringPrefixes2 = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;
    macroOperators = wordRegexp5(asciiOperatorsList, "", "@");
    symbolOperators = wordRegexp5(asciiOperatorsList, "", ":");
    julia = {
      name: "julia",
      startState: function() {
        return {
          tokenize: tokenBase14,
          scopes: [],
          lastToken: null,
          leavingExpr: false,
          isDefinition: false,
          nestedArrays: 0,
          nestedComments: 0,
          nestedGenerators: 0,
          nestedParameters: 0,
          firstParenPos: -1
        };
      },
      token: function(stream, state) {
        var style2 = state.tokenize(stream, state);
        var current = stream.current();
        if (current && style2) {
          state.lastToken = current;
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var delta = 0;
        if (textAfter === "]" || textAfter === ")" || /^end\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\b/.test(textAfter) || /^elseif\b/.test(textAfter) || /^finally/.test(textAfter)) {
          delta = -1;
        }
        return (state.scopes.length + delta) * cx2.unit;
      },
      languageData: {
        indentOnInput: /^\s*(end|else|catch|finally)\b$/,
        commentTokens: { line: "#", block: { open: "#=", close: "=#" } },
        closeBrackets: { brackets: ["(", "[", "{", '"'] },
        autocomplete: keywordsList.concat(builtinsList)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/livescript.js
var livescript_exports = {};
__export(livescript_exports, {
  liveScript: () => liveScript
});
var tokenBase15, identifier6, indenter2, keywordend, stringfill, Rules, r2, rr, i, len, idx, liveScript;
var init_livescript = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/livescript.js"() {
    tokenBase15 = function(stream, state) {
      var next_rule = state.next || "start";
      if (next_rule) {
        state.next = state.next;
        var nr = Rules[next_rule];
        if (nr.splice) {
          for (var i$ = 0; i$ < nr.length; ++i$) {
            var r2 = nr[i$];
            if (r2.regex && stream.match(r2.regex)) {
              state.next = r2.next || state.next;
              return r2.token;
            }
          }
          stream.next();
          return "error";
        }
        if (stream.match(r2 = Rules[next_rule])) {
          if (r2.regex && stream.match(r2.regex)) {
            state.next = r2.next;
            return r2.token;
          } else {
            stream.next();
            return "error";
          }
        }
      }
      stream.next();
      return "error";
    };
    identifier6 = "(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*";
    indenter2 = RegExp("(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*" + identifier6 + ")?))\\s*$");
    keywordend = "(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))";
    stringfill = {
      token: "string",
      regex: ".+"
    };
    Rules = {
      start: [
        {
          token: "docComment",
          regex: "/\\*",
          next: "comment"
        },
        {
          token: "comment",
          regex: "#.*"
        },
        {
          token: "keyword",
          regex: "(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)" + keywordend
        },
        {
          token: "atom",
          regex: "(?:true|false|yes|no|on|off|null|void|undefined)" + keywordend
        },
        {
          token: "invalid",
          regex: "(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)" + keywordend
        },
        {
          token: "className.standard",
          regex: "(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)" + keywordend
        },
        {
          token: "variableName.function.standard",
          regex: "(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)" + keywordend
        },
        {
          token: "variableName.standard",
          regex: "(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)" + keywordend
        },
        {
          token: "variableName",
          regex: identifier6 + "\\s*:(?![:=])"
        },
        {
          token: "variableName",
          regex: identifier6
        },
        {
          token: "operatorKeyword",
          regex: "(?:\\.{3}|\\s+\\?)"
        },
        {
          token: "keyword",
          regex: "(?:@+|::|\\.\\.)",
          next: "key"
        },
        {
          token: "operatorKeyword",
          regex: "\\.\\s*",
          next: "key"
        },
        {
          token: "string",
          regex: "\\\\\\S[^\\s,;)}\\]]*"
        },
        {
          token: "docString",
          regex: "'''",
          next: "qdoc"
        },
        {
          token: "docString",
          regex: '"""',
          next: "qqdoc"
        },
        {
          token: "string",
          regex: "'",
          next: "qstring"
        },
        {
          token: "string",
          regex: '"',
          next: "qqstring"
        },
        {
          token: "string",
          regex: "`",
          next: "js"
        },
        {
          token: "string",
          regex: "<\\[",
          next: "words"
        },
        {
          token: "regexp",
          regex: "//",
          next: "heregex"
        },
        {
          token: "regexp",
          regex: "\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}",
          next: "key"
        },
        {
          token: "number",
          regex: "(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)"
        },
        {
          token: "paren",
          regex: "[({[]"
        },
        {
          token: "paren",
          regex: "[)}\\]]",
          next: "key"
        },
        {
          token: "operatorKeyword",
          regex: "\\S+"
        },
        {
          token: "content",
          regex: "\\s+"
        }
      ],
      heregex: [
        {
          token: "regexp",
          regex: ".*?//[gimy$?]{0,4}",
          next: "start"
        },
        {
          token: "regexp",
          regex: "\\s*#{"
        },
        {
          token: "comment",
          regex: "\\s+(?:#.*)?"
        },
        {
          token: "regexp",
          regex: "\\S+"
        }
      ],
      key: [
        {
          token: "operatorKeyword",
          regex: "[.?@!]+"
        },
        {
          token: "variableName",
          regex: identifier6,
          next: "start"
        },
        {
          token: "content",
          regex: "",
          next: "start"
        }
      ],
      comment: [
        {
          token: "docComment",
          regex: ".*?\\*/",
          next: "start"
        },
        {
          token: "docComment",
          regex: ".+"
        }
      ],
      qdoc: [
        {
          token: "string",
          regex: ".*?'''",
          next: "key"
        },
        stringfill
      ],
      qqdoc: [
        {
          token: "string",
          regex: '.*?"""',
          next: "key"
        },
        stringfill
      ],
      qstring: [
        {
          token: "string",
          regex: "[^\\\\']*(?:\\\\.[^\\\\']*)*'",
          next: "key"
        },
        stringfill
      ],
      qqstring: [
        {
          token: "string",
          regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
          next: "key"
        },
        stringfill
      ],
      js: [
        {
          token: "string",
          regex: "[^\\\\`]*(?:\\\\.[^\\\\`]*)*`",
          next: "key"
        },
        stringfill
      ],
      words: [
        {
          token: "string",
          regex: ".*?\\]>",
          next: "key"
        },
        stringfill
      ]
    };
    for (idx in Rules) {
      r2 = Rules[idx];
      if (r2.splice) {
        for (i = 0, len = r2.length; i < len; ++i) {
          rr = r2[i];
          if (typeof rr.regex === "string") {
            Rules[idx][i].regex = new RegExp("^" + rr.regex);
          }
        }
      } else if (typeof rr.regex === "string") {
        Rules[idx].regex = new RegExp("^" + r2.regex);
      }
    }
    liveScript = {
      name: "livescript",
      startState: function() {
        return {
          next: "start",
          lastToken: { style: null, indent: 0, content: "" }
        };
      },
      token: function(stream, state) {
        while (stream.pos == stream.start)
          var style2 = tokenBase15(stream, state);
        state.lastToken = {
          style: style2,
          indent: stream.indentation(),
          content: stream.current()
        };
        return style2.replace(/\./g, " ");
      },
      indent: function(state) {
        var indentation5 = state.lastToken.indent;
        if (state.lastToken.content.match(indenter2)) {
          indentation5 += 2;
        }
        return indentation5;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/lua.js
var lua_exports = {};
__export(lua_exports, {
  lua: () => lua
});
function prefixRE(words22) {
  return new RegExp("^(?:" + words22.join("|") + ")", "i");
}
function wordRE(words22) {
  return new RegExp("^(?:" + words22.join("|") + ")$", "i");
}
function readBracket(stream) {
  var level = 0;
  while (stream.eat("=")) ++level;
  stream.eat("[");
  return level;
}
function normal3(stream, state) {
  var ch2 = stream.next();
  if (ch2 == "-" && stream.eat("-")) {
    if (stream.eat("[") && stream.eat("["))
      return (state.cur = bracketed2(readBracket(stream), "comment"))(stream, state);
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 == '"' || ch2 == "'")
    return (state.cur = string2(ch2))(stream, state);
  if (ch2 == "[" && /[\[=]/.test(stream.peek()))
    return (state.cur = bracketed2(readBracket(stream), "string"))(stream, state);
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w.%]/);
    return "number";
  }
  if (/[\w_]/.test(ch2)) {
    stream.eatWhile(/[\w\\\-_.]/);
    return "variable";
  }
  return null;
}
function bracketed2(level, style2) {
  return function(stream, state) {
    var curlev = null, ch2;
    while ((ch2 = stream.next()) != null) {
      if (curlev == null) {
        if (ch2 == "]") curlev = 0;
      } else if (ch2 == "=") ++curlev;
      else if (ch2 == "]" && curlev == level) {
        state.cur = normal3;
        break;
      } else curlev = null;
    }
    return style2;
  };
}
function string2(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped) break;
      escaped = !escaped && ch2 == "\\";
    }
    if (!escaped) state.cur = normal3;
    return "string";
  };
}
var builtins5, keywords19, indentTokens, dedentTokens, dedentPartial, lua;
var init_lua = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/lua.js"() {
    builtins5 = wordRE([
      "_G",
      "_VERSION",
      "assert",
      "collectgarbage",
      "dofile",
      "error",
      "getfenv",
      "getmetatable",
      "ipairs",
      "load",
      "loadfile",
      "loadstring",
      "module",
      "next",
      "pairs",
      "pcall",
      "print",
      "rawequal",
      "rawget",
      "rawset",
      "require",
      "select",
      "setfenv",
      "setmetatable",
      "tonumber",
      "tostring",
      "type",
      "unpack",
      "xpcall",
      "coroutine.create",
      "coroutine.resume",
      "coroutine.running",
      "coroutine.status",
      "coroutine.wrap",
      "coroutine.yield",
      "debug.debug",
      "debug.getfenv",
      "debug.gethook",
      "debug.getinfo",
      "debug.getlocal",
      "debug.getmetatable",
      "debug.getregistry",
      "debug.getupvalue",
      "debug.setfenv",
      "debug.sethook",
      "debug.setlocal",
      "debug.setmetatable",
      "debug.setupvalue",
      "debug.traceback",
      "close",
      "flush",
      "lines",
      "read",
      "seek",
      "setvbuf",
      "write",
      "io.close",
      "io.flush",
      "io.input",
      "io.lines",
      "io.open",
      "io.output",
      "io.popen",
      "io.read",
      "io.stderr",
      "io.stdin",
      "io.stdout",
      "io.tmpfile",
      "io.type",
      "io.write",
      "math.abs",
      "math.acos",
      "math.asin",
      "math.atan",
      "math.atan2",
      "math.ceil",
      "math.cos",
      "math.cosh",
      "math.deg",
      "math.exp",
      "math.floor",
      "math.fmod",
      "math.frexp",
      "math.huge",
      "math.ldexp",
      "math.log",
      "math.log10",
      "math.max",
      "math.min",
      "math.modf",
      "math.pi",
      "math.pow",
      "math.rad",
      "math.random",
      "math.randomseed",
      "math.sin",
      "math.sinh",
      "math.sqrt",
      "math.tan",
      "math.tanh",
      "os.clock",
      "os.date",
      "os.difftime",
      "os.execute",
      "os.exit",
      "os.getenv",
      "os.remove",
      "os.rename",
      "os.setlocale",
      "os.time",
      "os.tmpname",
      "package.cpath",
      "package.loaded",
      "package.loaders",
      "package.loadlib",
      "package.path",
      "package.preload",
      "package.seeall",
      "string.byte",
      "string.char",
      "string.dump",
      "string.find",
      "string.format",
      "string.gmatch",
      "string.gsub",
      "string.len",
      "string.lower",
      "string.match",
      "string.rep",
      "string.reverse",
      "string.sub",
      "string.upper",
      "table.concat",
      "table.insert",
      "table.maxn",
      "table.remove",
      "table.sort"
    ]);
    keywords19 = wordRE([
      "and",
      "break",
      "elseif",
      "false",
      "nil",
      "not",
      "or",
      "return",
      "true",
      "function",
      "end",
      "if",
      "then",
      "else",
      "do",
      "while",
      "repeat",
      "until",
      "for",
      "in",
      "local"
    ]);
    indentTokens = wordRE(["function", "if", "repeat", "do", "\\(", "{"]);
    dedentTokens = wordRE(["end", "until", "\\)", "}"]);
    dedentPartial = prefixRE(["end", "until", "\\)", "}", "else", "elseif"]);
    lua = {
      name: "lua",
      startState: function() {
        return { basecol: 0, indentDepth: 0, cur: normal3 };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = state.cur(stream, state);
        var word = stream.current();
        if (style2 == "variable") {
          if (keywords19.test(word)) style2 = "keyword";
          else if (builtins5.test(word)) style2 = "builtin";
        }
        if (style2 != "comment" && style2 != "string") {
          if (indentTokens.test(word)) ++state.indentDepth;
          else if (dedentTokens.test(word)) --state.indentDepth;
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var closing4 = dedentPartial.test(textAfter);
        return state.basecol + cx2.unit * (state.indentDepth - (closing4 ? 1 : 0));
      },
      languageData: {
        indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
        commentTokens: { line: "--", block: { open: "--[[", close: "]]--" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/mirc.js
var mirc_exports = {};
__export(mirc_exports, {
  mirc: () => mirc
});
function parseWords(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function chain5(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenBase16(stream, state) {
  var beforeParams = state.beforeParams;
  state.beforeParams = false;
  var ch2 = stream.next();
  if (/[\[\]{}\(\),\.]/.test(ch2)) {
    if (ch2 == "(" && beforeParams) state.inParams = true;
    else if (ch2 == ")") state.inParams = false;
    return null;
  } else if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  } else if (ch2 == "\\") {
    stream.eat("\\");
    stream.eat(/./);
    return "number";
  } else if (ch2 == "/" && stream.eat("*")) {
    return chain5(stream, state, tokenComment7);
  } else if (ch2 == ";" && stream.match(/ *\( *\(/)) {
    return chain5(stream, state, tokenUnparsed);
  } else if (ch2 == ";" && !state.inParams) {
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == '"') {
    stream.eat(/"/);
    return "keyword";
  } else if (ch2 == "$") {
    stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
    if (specials && specials.propertyIsEnumerable(stream.current().toLowerCase())) {
      return "keyword";
    } else {
      state.beforeParams = true;
      return "builtin";
    }
  } else if (ch2 == "%") {
    stream.eatWhile(/[^,\s()]/);
    state.beforeParams = true;
    return "string";
  } else if (isOperatorChar6.test(ch2)) {
    stream.eatWhile(isOperatorChar6);
    return "operator";
  } else {
    stream.eatWhile(/[\w\$_{}]/);
    var word = stream.current().toLowerCase();
    if (keywords20 && keywords20.propertyIsEnumerable(word))
      return "keyword";
    if (functions && functions.propertyIsEnumerable(word)) {
      state.beforeParams = true;
      return "keyword";
    }
    return null;
  }
}
function tokenComment7(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = tokenBase16;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenUnparsed(stream, state) {
  var maybeEnd = 0, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == ";" && maybeEnd == 2) {
      state.tokenize = tokenBase16;
      break;
    }
    if (ch2 == ")")
      maybeEnd++;
    else if (ch2 != " ")
      maybeEnd = 0;
  }
  return "meta";
}
var specials, keywords20, functions, isOperatorChar6, mirc;
var init_mirc = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/mirc.js"() {
    specials = parseWords("$! $$ $& $? $+ $abook $abs $active $activecid $activewid $address $addtok $agent $agentname $agentstat $agentver $alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime $asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind $binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes $chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color $com $comcall $comchan $comerr $compact $compress $comval $cos $count $cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight $dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress $deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll $dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error $eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir $finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve $fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt $group $halted $hash $height $hfind $hget $highlight $hnick $hotline $hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil $inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect $insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile $isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive $lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock $lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer $maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext $menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode $modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile $nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly $opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree $pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo $readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex $reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline $sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin $site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname $sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped $syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp $timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel $ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver $version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor");
    keywords20 = parseWords("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice away background ban bcopy beep bread break breplace bset btrunc bunset bwrite channel clear clearall cline clipboard close cnick color comclose comopen comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver debug dec describe dialog did didtok disable disconnect dlevel dline dll dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable events exit fclose filter findtext finger firewall flash flist flood flush flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear ialmark identd if ignore iline inc invite iuser join kick linesep links list load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice qme qmsg query queryn quit raw reload remini remote remove rename renwin reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini say scid scon server set showmirc signam sline sockaccept sockclose socklist socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs elseif else goto menu nicklist status title icon size option text edit button check radio box scroll list combo link tab item");
    functions = parseWords("if elseif else and not or eq ne in ni for foreach while switch");
    isOperatorChar6 = /[+\-*&%=<>!?^\/\|]/;
    mirc = {
      name: "mirc",
      startState: function() {
        return {
          tokenize: tokenBase16,
          beforeParams: false,
          inParams: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/mathematica.js
var mathematica_exports = {};
__export(mathematica_exports, {
  mathematica: () => mathematica
});
function tokenBase17(stream, state) {
  var ch2;
  ch2 = stream.next();
  if (ch2 === '"') {
    state.tokenize = tokenString7;
    return state.tokenize(stream, state);
  }
  if (ch2 === "(") {
    if (stream.eat("*")) {
      state.commentLevel++;
      state.tokenize = tokenComment8;
      return state.tokenize(stream, state);
    }
  }
  stream.backUp(1);
  if (stream.match(reBaseForm, true, false)) {
    return "number";
  }
  if (stream.match(reFloatForm, true, false)) {
    return "number";
  }
  if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
    return "atom";
  }
  if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, true, false)) {
    return "meta";
  }
  if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, true, false)) {
    return "string.special";
  }
  if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, true, false)) {
    return "variableName.special";
  }
  if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
    return "variableName.special";
  }
  if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
    return "variableName.special";
  }
  if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
    return "variableName.special";
  }
  if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
    return "character";
  }
  if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
    return "bracket";
  }
  if (stream.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, true, false)) {
    return "variableName.constant";
  }
  if (stream.match(reIdInContext, true, false)) {
    return "keyword";
  }
  if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, true, false)) {
    return "operator";
  }
  stream.next();
  return "error";
}
function tokenString7(stream, state) {
  var next2, end2 = false, escaped = false;
  while ((next2 = stream.next()) != null) {
    if (next2 === '"' && !escaped) {
      end2 = true;
      break;
    }
    escaped = !escaped && next2 === "\\";
  }
  if (end2 && !escaped) {
    state.tokenize = tokenBase17;
  }
  return "string";
}
function tokenComment8(stream, state) {
  var prev, next2;
  while (state.commentLevel > 0 && (next2 = stream.next()) != null) {
    if (prev === "(" && next2 === "*") state.commentLevel++;
    if (prev === "*" && next2 === ")") state.commentLevel--;
    prev = next2;
  }
  if (state.commentLevel <= 0) {
    state.tokenize = tokenBase17;
  }
  return "comment";
}
var Identifier6, pBase, pFloat, pFloatBase, pPrecision, reBaseForm, reFloatForm, reIdInContext, mathematica;
var init_mathematica = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/mathematica.js"() {
    Identifier6 = "[a-zA-Z\\$][a-zA-Z0-9\\$]*";
    pBase = "(?:\\d+)";
    pFloat = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
    pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
    pPrecision = "(?:`(?:`?" + pFloat + ")?)";
    reBaseForm = new RegExp("(?:" + pBase + "(?:\\^\\^" + pFloatBase + pPrecision + "?(?:\\*\\^[+-]?\\d+)?))");
    reFloatForm = new RegExp("(?:" + pFloat + pPrecision + "?(?:\\*\\^[+-]?\\d+)?)");
    reIdInContext = new RegExp("(?:`?)(?:" + Identifier6 + ")(?:`(?:" + Identifier6 + "))*(?:`?)");
    mathematica = {
      name: "mathematica",
      startState: function() {
        return { tokenize: tokenBase17, commentLevel: 0 };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: { block: { open: "(*", close: "*)" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/modelica.js
var modelica_exports = {};
__export(modelica_exports, {
  modelica: () => modelica
});
function words9(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i)
    obj[words22[i]] = true;
  return obj;
}
function tokenLineComment(stream, state) {
  stream.skipToEnd();
  state.tokenize = null;
  return "comment";
}
function tokenBlockComment(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (maybeEnd && ch2 == "/") {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenString8(stream, state) {
  var escaped = false, ch2;
  while ((ch2 = stream.next()) != null) {
    if (ch2 == '"' && !escaped) {
      state.tokenize = null;
      state.sol = false;
      break;
    }
    escaped = !escaped && ch2 == "\\";
  }
  return "string";
}
function tokenIdent(stream, state) {
  stream.eatWhile(isDigit4);
  while (stream.eat(isDigit4) || stream.eat(isNonDigit)) {
  }
  var cur2 = stream.current();
  if (state.sol && (cur2 == "package" || cur2 == "model" || cur2 == "when" || cur2 == "connector")) state.level++;
  else if (state.sol && cur2 == "end" && state.level > 0) state.level--;
  state.tokenize = null;
  state.sol = false;
  if (keywords21.propertyIsEnumerable(cur2)) return "keyword";
  else if (builtin3.propertyIsEnumerable(cur2)) return "builtin";
  else if (atoms8.propertyIsEnumerable(cur2)) return "atom";
  else return "variable";
}
function tokenQIdent(stream, state) {
  while (stream.eat(/[^']/)) {
  }
  state.tokenize = null;
  state.sol = false;
  if (stream.eat("'"))
    return "variable";
  else
    return "error";
}
function tokenUnsignedNumber(stream, state) {
  stream.eatWhile(isDigit4);
  if (stream.eat(".")) {
    stream.eatWhile(isDigit4);
  }
  if (stream.eat("e") || stream.eat("E")) {
    if (!stream.eat("-"))
      stream.eat("+");
    stream.eatWhile(isDigit4);
  }
  state.tokenize = null;
  state.sol = false;
  return "number";
}
var keywords21, builtin3, atoms8, completions2, isSingleOperatorChar, isDoubleOperatorChar, isDigit4, isNonDigit, modelica;
var init_modelica = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/modelica.js"() {
    keywords21 = words9("algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within");
    builtin3 = words9("abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh");
    atoms8 = words9("Real Boolean Integer String");
    completions2 = [].concat(Object.keys(keywords21), Object.keys(builtin3), Object.keys(atoms8));
    isSingleOperatorChar = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
    isDoubleOperatorChar = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
    isDigit4 = /[0-9]/;
    isNonDigit = /[_a-zA-Z]/;
    modelica = {
      name: "modelica",
      startState: function() {
        return {
          tokenize: null,
          level: 0,
          sol: true
        };
      },
      token: function(stream, state) {
        if (state.tokenize != null) {
          return state.tokenize(stream, state);
        }
        if (stream.sol()) {
          state.sol = true;
        }
        if (stream.eatSpace()) {
          state.tokenize = null;
          return null;
        }
        var ch2 = stream.next();
        if (ch2 == "/" && stream.eat("/")) {
          state.tokenize = tokenLineComment;
        } else if (ch2 == "/" && stream.eat("*")) {
          state.tokenize = tokenBlockComment;
        } else if (isDoubleOperatorChar.test(ch2 + stream.peek())) {
          stream.next();
          state.tokenize = null;
          return "operator";
        } else if (isSingleOperatorChar.test(ch2)) {
          state.tokenize = null;
          return "operator";
        } else if (isNonDigit.test(ch2)) {
          state.tokenize = tokenIdent;
        } else if (ch2 == "'" && stream.peek() && stream.peek() != "'") {
          state.tokenize = tokenQIdent;
        } else if (ch2 == '"') {
          state.tokenize = tokenString8;
        } else if (isDigit4.test(ch2)) {
          state.tokenize = tokenUnsignedNumber;
        } else {
          state.tokenize = null;
          return "error";
        }
        return state.tokenize(stream, state);
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != null) return null;
        var level = state.level;
        if (/(algorithm)/.test(textAfter)) level--;
        if (/(equation)/.test(textAfter)) level--;
        if (/(initial algorithm)/.test(textAfter)) level--;
        if (/(initial equation)/.test(textAfter)) level--;
        if (/(end)/.test(textAfter)) level--;
        if (level > 0)
          return cx2.unit * level;
        else
          return 0;
      },
      languageData: {
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        autocomplete: completions2
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/mumps.js
var mumps_exports = {};
__export(mumps_exports, {
  mumps: () => mumps
});
function wordRegexp6(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
}
function tokenBase18(stream, state) {
  if (stream.sol()) {
    state.label = true;
    state.commandMode = 0;
  }
  var ch2 = stream.peek();
  if (ch2 == " " || ch2 == "	") {
    state.label = false;
    if (state.commandMode == 0)
      state.commandMode = 1;
    else if (state.commandMode < 0 || state.commandMode == 2)
      state.commandMode = 0;
  } else if (ch2 != "." && state.commandMode > 0) {
    if (ch2 == ":")
      state.commandMode = -1;
    else
      state.commandMode = 2;
  }
  if (ch2 === "(" || ch2 === "	")
    state.label = false;
  if (ch2 === ";") {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
    return "number";
  if (ch2 == '"') {
    if (stream.skipTo('"')) {
      stream.next();
      return "string";
    } else {
      stream.skipToEnd();
      return "error";
    }
  }
  if (stream.match(doubleOperators) || stream.match(singleOperators2))
    return "operator";
  if (stream.match(singleDelimiters))
    return null;
  if (brackets.test(ch2)) {
    stream.next();
    return "bracket";
  }
  if (state.commandMode > 0 && stream.match(command))
    return "controlKeyword";
  if (stream.match(intrinsicFuncs))
    return "builtin";
  if (stream.match(identifiers6))
    return "variable";
  if (ch2 === "$" || ch2 === "^") {
    stream.next();
    return "builtin";
  }
  if (ch2 === "@") {
    stream.next();
    return "string.special";
  }
  if (/[\w%]/.test(ch2)) {
    stream.eatWhile(/[\w%]/);
    return "variable";
  }
  stream.next();
  return "error";
}
var singleOperators2, doubleOperators, singleDelimiters, brackets, identifiers6, commandKeywords, intrinsicFuncsWords, intrinsicFuncs, command, mumps;
var init_mumps = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/mumps.js"() {
    singleOperators2 = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
    doubleOperators = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
    singleDelimiters = new RegExp("^[\\.,:]");
    brackets = new RegExp("[()]");
    identifiers6 = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
    commandKeywords = ["break", "close", "do", "else", "for", "goto", "halt", "hang", "if", "job", "kill", "lock", "merge", "new", "open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
    intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
    intrinsicFuncs = wordRegexp6(intrinsicFuncsWords);
    command = wordRegexp6(commandKeywords);
    mumps = {
      name: "mumps",
      startState: function() {
        return {
          label: false,
          commandMode: 0
        };
      },
      token: function(stream, state) {
        var style2 = tokenBase18(stream, state);
        if (state.label) return "tag";
        return style2;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/mbox.js
var mbox_exports = {};
__export(mbox_exports, {
  mbox: () => mbox
});
function styleForHeader(header3) {
  if (header3 === "Subject") return "header";
  return "string";
}
function readToken3(stream, state) {
  if (stream.sol()) {
    state.inSeparator = false;
    if (state.inHeader && stream.match(whitespace3)) {
      return null;
    } else {
      state.inHeader = false;
      state.header = null;
    }
    if (stream.match(separator)) {
      state.inHeaders = true;
      state.inSeparator = true;
      return "atom";
    }
    var match2;
    var emailPermitted = false;
    if ((match2 = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match2 = stream.match(rfc2822Header))) {
      state.inHeaders = true;
      state.inHeader = true;
      state.emailPermitted = emailPermitted;
      state.header = match2[1];
      return "atom";
    }
    if (state.inHeaders && (match2 = stream.match(header2))) {
      state.inHeader = true;
      state.emailPermitted = true;
      state.header = match2[1];
      return "atom";
    }
    state.inHeaders = false;
    stream.skipToEnd();
    return null;
  }
  if (state.inSeparator) {
    if (stream.match(email)) return "link";
    if (stream.match(untilEmail)) return "atom";
    stream.skipToEnd();
    return "atom";
  }
  if (state.inHeader) {
    var style2 = styleForHeader(state.header);
    if (state.emailPermitted) {
      if (stream.match(bracketedEmail)) return style2 + " link";
      if (stream.match(untilBracketedEmail)) return style2;
    }
    stream.skipToEnd();
    return style2;
  }
  stream.skipToEnd();
  return null;
}
var rfc2822, rfc2822NoEmail, whitespace3, separator, rfc2822Header, rfc2822HeaderNoEmail, header2, email, untilEmail, bracketedEmail, untilBracketedEmail, mbox;
var init_mbox = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/mbox.js"() {
    rfc2822 = [
      "From",
      "Sender",
      "Reply-To",
      "To",
      "Cc",
      "Bcc",
      "Message-ID",
      "In-Reply-To",
      "References",
      "Resent-From",
      "Resent-Sender",
      "Resent-To",
      "Resent-Cc",
      "Resent-Bcc",
      "Resent-Message-ID",
      "Return-Path",
      "Received"
    ];
    rfc2822NoEmail = [
      "Date",
      "Subject",
      "Comments",
      "Keywords",
      "Resent-Date"
    ];
    whitespace3 = /^[ \t]/;
    separator = /^From /;
    rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
    rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
    header2 = /^[^:]+:/;
    email = /^[^ ]+@[^ ]+/;
    untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
    bracketedEmail = /^<.*?>/;
    untilBracketedEmail = /^.*?(?=<.*>)/;
    mbox = {
      name: "mbox",
      startState: function() {
        return {
          // Is in a mbox separator
          inSeparator: false,
          // Is in a mail header
          inHeader: false,
          // If bracketed email is permitted. Only applicable when inHeader
          emailPermitted: false,
          // Name of current header
          header: null,
          // Is in a region of mail headers
          inHeaders: false
        };
      },
      token: readToken3,
      blankLine: function(state) {
        state.inHeaders = state.inSeparator = state.inHeader = false;
      },
      languageData: {
        autocomplete: rfc2822.concat(rfc2822NoEmail)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/nginx.js
var nginx_exports = {};
__export(nginx_exports, {
  nginx: () => nginx
});
function words10(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function ret3(style2, tp) {
  type4 = tp;
  return style2;
}
function tokenBase19(stream, state) {
  stream.eatWhile(/[\w\$_]/);
  var cur2 = stream.current();
  if (keywords22.propertyIsEnumerable(cur2)) {
    return "keyword";
  } else if (keywords_block.propertyIsEnumerable(cur2)) {
    return "controlKeyword";
  } else if (keywords_important.propertyIsEnumerable(cur2)) {
    return "controlKeyword";
  }
  var ch2 = stream.next();
  if (ch2 == "@") {
    stream.eatWhile(/[\w\\\-]/);
    return ret3("meta", stream.current());
  } else if (ch2 == "/" && stream.eat("*")) {
    state.tokenize = tokenCComment2;
    return tokenCComment2(stream, state);
  } else if (ch2 == "<" && stream.eat("!")) {
    state.tokenize = tokenSGMLComment2;
    return tokenSGMLComment2(stream, state);
  } else if (ch2 == "=") ret3(null, "compare");
  else if ((ch2 == "~" || ch2 == "|") && stream.eat("=")) return ret3(null, "compare");
  else if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString9(ch2);
    return state.tokenize(stream, state);
  } else if (ch2 == "#") {
    stream.skipToEnd();
    return ret3("comment", "comment");
  } else if (ch2 == "!") {
    stream.match(/^\s*\w*/);
    return ret3("keyword", "important");
  } else if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w.%]/);
    return ret3("number", "unit");
  } else if (/[,.+>*\/]/.test(ch2)) {
    return ret3(null, "select-op");
  } else if (/[;{}:\[\]]/.test(ch2)) {
    return ret3(null, ch2);
  } else {
    stream.eatWhile(/[\w\\\-]/);
    return ret3("variable", "variable");
  }
}
function tokenCComment2(stream, state) {
  var maybeEnd = false, ch2;
  while ((ch2 = stream.next()) != null) {
    if (maybeEnd && ch2 == "/") {
      state.tokenize = tokenBase19;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return ret3("comment", "comment");
}
function tokenSGMLComment2(stream, state) {
  var dashes = 0, ch2;
  while ((ch2 = stream.next()) != null) {
    if (dashes >= 2 && ch2 == ">") {
      state.tokenize = tokenBase19;
      break;
    }
    dashes = ch2 == "-" ? dashes + 1 : 0;
  }
  return ret3("comment", "comment");
}
function tokenString9(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped)
        break;
      escaped = !escaped && ch2 == "\\";
    }
    if (!escaped) state.tokenize = tokenBase19;
    return ret3("string", "string");
  };
}
var keywords22, keywords_block, keywords_important, type4, nginx;
var init_nginx = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/nginx.js"() {
    keywords22 = words10(
      /* ngxDirectiveControl */
      "break return rewrite set accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
    );
    keywords_block = words10(
      /* ngxDirectiveBlock */
      "http mail events server types location upstream charset_map limit_except if geo map"
    );
    keywords_important = words10(
      /* ngxDirectiveImportant */
      "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
    );
    nginx = {
      name: "nginx",
      startState: function() {
        return {
          tokenize: tokenBase19,
          baseIndent: 0,
          stack: []
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        type4 = null;
        var style2 = state.tokenize(stream, state);
        var context = state.stack[state.stack.length - 1];
        if (type4 == "hash" && context == "rule") style2 = "atom";
        else if (style2 == "variable") {
          if (context == "rule") style2 = "number";
          else if (!context || context == "@media{") style2 = "tag";
        }
        if (context == "rule" && /^[\{\};]$/.test(type4))
          state.stack.pop();
        if (type4 == "{") {
          if (context == "@media") state.stack[state.stack.length - 1] = "@media{";
          else state.stack.push("{");
        } else if (type4 == "}") state.stack.pop();
        else if (type4 == "@media") state.stack.push("@media");
        else if (context == "{" && type4 != "comment") state.stack.push("rule");
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var n = state.stack.length;
        if (/^\}/.test(textAfter))
          n -= state.stack[state.stack.length - 1] == "rule" ? 2 : 1;
        return state.baseIndent + n * cx2.unit;
      },
      languageData: {
        indentOnInput: /^\s*\}$/
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/nsis.js
var nsis_exports = {};
__export(nsis_exports, {
  nsis: () => nsis
});
var nsis;
var init_nsis = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/nsis.js"() {
    init_simple_mode();
    nsis = simpleMode({
      start: [
        // Numbers
        { regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number" },
        // Strings
        { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
        { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
        { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },
        // Compile Time Commands
        { regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|assert|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i, token: "keyword" },
        // Conditional Compilation
        { regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i, token: "keyword", indent: true },
        { regex: /^\s*(?:\!(else|endif|macroend))\b/i, token: "keyword", dedent: true },
        // Runtime Commands
        { regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Target|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i, token: "keyword" },
        { regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i, token: "keyword", indent: true },
        { regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i, token: "keyword", dedent: true },
        // Command Options
        { regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i, token: "atom" },
        { regex: /\b(?:admin|all|amd64-unicode|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|x-86-(ansi|unicode)|zlib)\b/i, token: "builtin" },
        // LogicLib.nsh
        { regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:2|3|4|5|Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i, token: "variable-2", indent: true },
        // FileFunc.nsh
        { regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i, token: "variable-2", dedent: true },
        // Memento.nsh
        { regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i, token: "variable-2", dedent: true },
        // TextFunc.nsh
        { regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i, token: "variable-2", dedent: true },
        // WinVer.nsh
        { regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i, token: "variable", dedent: true },
        // WordFunc.nsh
        { regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i, token: "keyword", dedent: true },
        // x64.nsh
        { regex: /\$\{(?:RunningX64)\}/i, token: "variable", dedent: true },
        { regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i, token: "keyword", dedent: true },
        // Line Comment
        { regex: /(#|;).*/, token: "comment" },
        // Block Comment
        { regex: /\/\*/, token: "comment", next: "comment" },
        // Operator
        { regex: /[-+\/*=<>!]+/, token: "operator" },
        // Variable
        { regex: /\$\w[\w\.]*/, token: "variable" },
        // Constant
        { regex: /\${[\!\w\.:-]+}/, token: "variableName.constant" },
        // Language String
        { regex: /\$\([\!\w\.:-]+\)/, token: "atom" }
      ],
      comment: [
        { regex: /.*?\*\//, token: "comment", next: "start" },
        { regex: /.*/, token: "comment" }
      ],
      languageData: {
        name: "nsis",
        indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
        commentTokens: { line: "#", block: { open: "/*", close: "*/" } }
      }
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/ntriples.js
var ntriples_exports = {};
__export(ntriples_exports, {
  ntriples: () => ntriples
});
function transitState(currState, c2) {
  var currLocation = currState.location;
  var ret4;
  if (currLocation == Location.PRE_SUBJECT && c2 == "<") ret4 = Location.WRITING_SUB_URI;
  else if (currLocation == Location.PRE_SUBJECT && c2 == "_") ret4 = Location.WRITING_BNODE_URI;
  else if (currLocation == Location.PRE_PRED && c2 == "<") ret4 = Location.WRITING_PRED_URI;
  else if (currLocation == Location.PRE_OBJ && c2 == "<") ret4 = Location.WRITING_OBJ_URI;
  else if (currLocation == Location.PRE_OBJ && c2 == "_") ret4 = Location.WRITING_OBJ_BNODE;
  else if (currLocation == Location.PRE_OBJ && c2 == '"') ret4 = Location.WRITING_OBJ_LITERAL;
  else if (currLocation == Location.WRITING_SUB_URI && c2 == ">") ret4 = Location.PRE_PRED;
  else if (currLocation == Location.WRITING_BNODE_URI && c2 == " ") ret4 = Location.PRE_PRED;
  else if (currLocation == Location.WRITING_PRED_URI && c2 == ">") ret4 = Location.PRE_OBJ;
  else if (currLocation == Location.WRITING_OBJ_URI && c2 == ">") ret4 = Location.POST_OBJ;
  else if (currLocation == Location.WRITING_OBJ_BNODE && c2 == " ") ret4 = Location.POST_OBJ;
  else if (currLocation == Location.WRITING_OBJ_LITERAL && c2 == '"') ret4 = Location.POST_OBJ;
  else if (currLocation == Location.WRITING_LIT_LANG && c2 == " ") ret4 = Location.POST_OBJ;
  else if (currLocation == Location.WRITING_LIT_TYPE && c2 == ">") ret4 = Location.POST_OBJ;
  else if (currLocation == Location.WRITING_OBJ_LITERAL && c2 == "@") ret4 = Location.WRITING_LIT_LANG;
  else if (currLocation == Location.WRITING_OBJ_LITERAL && c2 == "^") ret4 = Location.WRITING_LIT_TYPE;
  else if (c2 == " " && (currLocation == Location.PRE_SUBJECT || currLocation == Location.PRE_PRED || currLocation == Location.PRE_OBJ || currLocation == Location.POST_OBJ)) ret4 = currLocation;
  else if (currLocation == Location.POST_OBJ && c2 == ".") ret4 = Location.PRE_SUBJECT;
  else ret4 = Location.ERROR;
  currState.location = ret4;
}
var Location, ntriples;
var init_ntriples = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/ntriples.js"() {
    Location = {
      PRE_SUBJECT: 0,
      WRITING_SUB_URI: 1,
      WRITING_BNODE_URI: 2,
      PRE_PRED: 3,
      WRITING_PRED_URI: 4,
      PRE_OBJ: 5,
      WRITING_OBJ_URI: 6,
      WRITING_OBJ_BNODE: 7,
      WRITING_OBJ_LITERAL: 8,
      WRITING_LIT_LANG: 9,
      WRITING_LIT_TYPE: 10,
      POST_OBJ: 11,
      ERROR: 12
    };
    ntriples = {
      name: "ntriples",
      startState: function() {
        return {
          location: Location.PRE_SUBJECT,
          uris: [],
          anchors: [],
          bnodes: [],
          langs: [],
          types: []
        };
      },
      token: function(stream, state) {
        var ch2 = stream.next();
        if (ch2 == "<") {
          transitState(state, ch2);
          var parsedURI = "";
          stream.eatWhile(function(c2) {
            if (c2 != "#" && c2 != ">") {
              parsedURI += c2;
              return true;
            }
            return false;
          });
          state.uris.push(parsedURI);
          if (stream.match("#", false)) return "variable";
          stream.next();
          transitState(state, ">");
          return "variable";
        }
        if (ch2 == "#") {
          var parsedAnchor = "";
          stream.eatWhile(function(c2) {
            if (c2 != ">" && c2 != " ") {
              parsedAnchor += c2;
              return true;
            }
            return false;
          });
          state.anchors.push(parsedAnchor);
          return "url";
        }
        if (ch2 == ">") {
          transitState(state, ">");
          return "variable";
        }
        if (ch2 == "_") {
          transitState(state, ch2);
          var parsedBNode = "";
          stream.eatWhile(function(c2) {
            if (c2 != " ") {
              parsedBNode += c2;
              return true;
            }
            return false;
          });
          state.bnodes.push(parsedBNode);
          stream.next();
          transitState(state, " ");
          return "builtin";
        }
        if (ch2 == '"') {
          transitState(state, ch2);
          stream.eatWhile(function(c2) {
            return c2 != '"';
          });
          stream.next();
          if (stream.peek() != "@" && stream.peek() != "^") {
            transitState(state, '"');
          }
          return "string";
        }
        if (ch2 == "@") {
          transitState(state, "@");
          var parsedLang = "";
          stream.eatWhile(function(c2) {
            if (c2 != " ") {
              parsedLang += c2;
              return true;
            }
            return false;
          });
          state.langs.push(parsedLang);
          stream.next();
          transitState(state, " ");
          return "string.special";
        }
        if (ch2 == "^") {
          stream.next();
          transitState(state, "^");
          var parsedType = "";
          stream.eatWhile(function(c2) {
            if (c2 != ">") {
              parsedType += c2;
              return true;
            }
            return false;
          });
          state.types.push(parsedType);
          stream.next();
          transitState(state, ">");
          return "variable";
        }
        if (ch2 == " ") {
          transitState(state, ch2);
        }
        if (ch2 == ".") {
          transitState(state, ch2);
        }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/octave.js
var octave_exports = {};
__export(octave_exports, {
  octave: () => octave
});
function wordRegexp7(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b");
}
function tokenTranspose(stream, state) {
  if (!stream.sol() && stream.peek() === "'") {
    stream.next();
    state.tokenize = tokenBase20;
    return "operator";
  }
  state.tokenize = tokenBase20;
  return tokenBase20(stream, state);
}
function tokenComment9(stream, state) {
  if (stream.match(/^.*%}/)) {
    state.tokenize = tokenBase20;
    return "comment";
  }
  ;
  stream.skipToEnd();
  return "comment";
}
function tokenBase20(stream, state) {
  if (stream.eatSpace()) return null;
  if (stream.match("%{")) {
    state.tokenize = tokenComment9;
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^[%#]/)) {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^[0-9\.+-]/, false)) {
    if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
      stream.tokenize = tokenBase20;
      return "number";
    }
    ;
    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) {
      return "number";
    }
    ;
    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) {
      return "number";
    }
    ;
  }
  if (stream.match(wordRegexp7(["nan", "NaN", "inf", "Inf"]))) {
    return "number";
  }
  ;
  var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);
  if (m) {
    return m[1] ? "string" : "error";
  }
  if (stream.match(keywords23)) {
    return "keyword";
  }
  ;
  if (stream.match(builtins6)) {
    return "builtin";
  }
  ;
  if (stream.match(identifiers7)) {
    return "variable";
  }
  ;
  if (stream.match(singleOperators3) || stream.match(doubleOperators2)) {
    return "operator";
  }
  ;
  if (stream.match(singleDelimiters2) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {
    return null;
  }
  ;
  if (stream.match(expressionEnd)) {
    state.tokenize = tokenTranspose;
    return null;
  }
  ;
  stream.next();
  return "error";
}
var singleOperators3, singleDelimiters2, doubleOperators2, doubleDelimiters, tripleDelimiters, expressionEnd, identifiers7, builtins6, keywords23, octave;
var init_octave = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/octave.js"() {
    singleOperators3 = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
    singleDelimiters2 = new RegExp("^[\\(\\[\\{\\},:=;\\.]");
    doubleOperators2 = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
    doubleDelimiters = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
    tripleDelimiters = new RegExp("^((>>=)|(<<=))");
    expressionEnd = new RegExp("^[\\]\\)]");
    identifiers7 = new RegExp("^[_A-Za-z\xA1-\uFFFF][_A-Za-z0-9\xA1-\uFFFF]*");
    builtins6 = wordRegexp7([
      "error",
      "eval",
      "function",
      "abs",
      "acos",
      "atan",
      "asin",
      "cos",
      "cosh",
      "exp",
      "log",
      "prod",
      "sum",
      "log10",
      "max",
      "min",
      "sign",
      "sin",
      "sinh",
      "sqrt",
      "tan",
      "reshape",
      "break",
      "zeros",
      "default",
      "margin",
      "round",
      "ones",
      "rand",
      "syn",
      "ceil",
      "floor",
      "size",
      "clear",
      "zeros",
      "eye",
      "mean",
      "std",
      "cov",
      "det",
      "eig",
      "inv",
      "norm",
      "rank",
      "trace",
      "expm",
      "logm",
      "sqrtm",
      "linspace",
      "plot",
      "title",
      "xlabel",
      "ylabel",
      "legend",
      "text",
      "grid",
      "meshgrid",
      "mesh",
      "num2str",
      "fft",
      "ifft",
      "arrayfun",
      "cellfun",
      "input",
      "fliplr",
      "flipud",
      "ismember"
    ]);
    keywords23 = wordRegexp7([
      "return",
      "case",
      "switch",
      "else",
      "elseif",
      "end",
      "endif",
      "endfunction",
      "if",
      "otherwise",
      "do",
      "for",
      "while",
      "try",
      "catch",
      "classdef",
      "properties",
      "events",
      "methods",
      "global",
      "persistent",
      "endfor",
      "endwhile",
      "printf",
      "sprintf",
      "disp",
      "until",
      "continue",
      "pkg"
    ]);
    octave = {
      name: "octave",
      startState: function() {
        return {
          tokenize: tokenBase20
        };
      },
      token: function(stream, state) {
        var style2 = state.tokenize(stream, state);
        if (style2 === "number" || style2 === "variable") {
          state.tokenize = tokenTranspose;
        }
        return style2;
      },
      languageData: {
        commentTokens: { line: "%" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/oz.js
var oz_exports = {};
__export(oz_exports, {
  oz: () => oz
});
function wordRegexp8(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b");
}
function tokenBase21(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  if (stream.match(/[{}]/)) {
    return "bracket";
  }
  if (stream.match("[]")) {
    return "keyword";
  }
  if (stream.match(tripleOperators) || stream.match(doubleOperators3)) {
    return "operator";
  }
  if (stream.match(atoms9)) {
    return "atom";
  }
  var matched = stream.match(openingKeywords);
  if (matched) {
    if (!state.doInCurrentLine)
      state.currentIndent++;
    else
      state.doInCurrentLine = false;
    if (matched[0] == "proc" || matched[0] == "fun")
      state.tokenize = tokenFunProc;
    else if (matched[0] == "class")
      state.tokenize = tokenClass;
    else if (matched[0] == "meth")
      state.tokenize = tokenMeth;
    return "keyword";
  }
  if (stream.match(middleKeywords) || stream.match(commonKeywords3)) {
    return "keyword";
  }
  if (stream.match(endKeywords)) {
    state.currentIndent--;
    return "keyword";
  }
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString10(ch2);
    return state.tokenize(stream, state);
  }
  if (/[~\d]/.test(ch2)) {
    if (ch2 == "~") {
      if (!/^[0-9]/.test(stream.peek()))
        return null;
      else if (stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
        return "number";
    }
    if (ch2 == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
      return "number";
    return null;
  }
  if (ch2 == "%") {
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment10;
      return tokenComment10(stream, state);
    }
  }
  if (singleOperators4.test(ch2)) {
    return "operator";
  }
  stream.eatWhile(/\w/);
  return "variable";
}
function tokenClass(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
  state.tokenize = tokenBase21;
  return "type";
}
function tokenMeth(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
  state.tokenize = tokenBase21;
  return "def";
}
function tokenFunProc(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  if (!state.hasPassedFirstStage && stream.eat("{")) {
    state.hasPassedFirstStage = true;
    return "bracket";
  } else if (state.hasPassedFirstStage) {
    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
    state.hasPassedFirstStage = false;
    state.tokenize = tokenBase21;
    return "def";
  } else {
    state.tokenize = tokenBase21;
    return null;
  }
}
function tokenComment10(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = tokenBase21;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenString10(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !escaped)
      state.tokenize = tokenBase21;
    return "string";
  };
}
function buildElectricInputRegEx() {
  var allClosings = middle.concat(end);
  return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
}
var singleOperators4, doubleOperators3, tripleOperators, middle, end, atoms9, commonKeywords3, openingKeywords, middleKeywords, endKeywords, oz;
var init_oz = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/oz.js"() {
    singleOperators4 = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
    doubleOperators3 = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
    tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;
    middle = [
      "in",
      "then",
      "else",
      "of",
      "elseof",
      "elsecase",
      "elseif",
      "catch",
      "finally",
      "with",
      "require",
      "prepare",
      "import",
      "export",
      "define",
      "do"
    ];
    end = ["end"];
    atoms9 = wordRegexp8(["true", "false", "nil", "unit"]);
    commonKeywords3 = wordRegexp8([
      "andthen",
      "at",
      "attr",
      "declare",
      "feat",
      "from",
      "lex",
      "mod",
      "div",
      "mode",
      "orelse",
      "parser",
      "prod",
      "prop",
      "scanner",
      "self",
      "syn",
      "token"
    ]);
    openingKeywords = wordRegexp8([
      "local",
      "proc",
      "fun",
      "case",
      "class",
      "if",
      "cond",
      "or",
      "dis",
      "choice",
      "not",
      "thread",
      "try",
      "raise",
      "lock",
      "for",
      "suchthat",
      "meth",
      "functor"
    ]);
    middleKeywords = wordRegexp8(middle);
    endKeywords = wordRegexp8(end);
    oz = {
      name: "oz",
      startState: function() {
        return {
          tokenize: tokenBase21,
          currentIndent: 0,
          doInCurrentLine: false,
          hasPassedFirstStage: false
        };
      },
      token: function(stream, state) {
        if (stream.sol())
          state.doInCurrentLine = 0;
        return state.tokenize(stream, state);
      },
      indent: function(state, textAfter, cx2) {
        var trueText = textAfter.replace(/^\s+|\s+$/g, "");
        if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\[])/))
          return cx2.unit * (state.currentIndent - 1);
        if (state.currentIndent < 0)
          return 0;
        return state.currentIndent * cx2.unit;
      },
      languageData: {
        indentOnInut: buildElectricInputRegEx(),
        commentTokens: { line: "%", block: { open: "/*", close: "*/" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/pascal.js
var pascal_exports = {};
__export(pascal_exports, {
  pascal: () => pascal
});
function words11(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function tokenBase22(stream, state) {
  var ch2 = stream.next();
  if (ch2 == "#" && state.startOfLine) {
    stream.skipToEnd();
    return "meta";
  }
  if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString11(ch2);
    return state.tokenize(stream, state);
  }
  if (ch2 == "(" && stream.eat("*")) {
    state.tokenize = tokenComment11;
    return tokenComment11(stream, state);
  }
  if (ch2 == "{") {
    state.tokenize = tokenCommentBraces;
    return tokenCommentBraces(stream, state);
  }
  if (/[\[\]\(\),;\:\.]/.test(ch2)) {
    return null;
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  if (ch2 == "/") {
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar7.test(ch2)) {
    stream.eatWhile(isOperatorChar7);
    return "operator";
  }
  stream.eatWhile(/[\w\$_]/);
  var cur2 = stream.current().toLowerCase();
  if (keywords24.propertyIsEnumerable(cur2)) return "keyword";
  if (atoms10.propertyIsEnumerable(cur2)) return "atom";
  return "variable";
}
function tokenString11(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !escaped) state.tokenize = null;
    return "string";
  };
}
function tokenComment11(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == ")" && maybeEnd) {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenCommentBraces(stream, state) {
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "}") {
      state.tokenize = null;
      break;
    }
  }
  return "comment";
}
var keywords24, atoms10, isOperatorChar7, pascal;
var init_pascal = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/pascal.js"() {
    keywords24 = words11(
      "absolute and array asm begin case const constructor destructor div do downto else end file for function goto if implementation in inherited inline interface label mod nil not object of operator or packed procedure program record reintroduce repeat self set shl shr string then to type unit until uses var while with xor as class dispinterface except exports finalization finally initialization inline is library on out packed property raise resourcestring threadvar try absolute abstract alias assembler bitpacked break cdecl continue cppdecl cvar default deprecated dynamic enumerator experimental export external far far16 forward generic helper implements index interrupt iocheck local message name near nodefault noreturn nostackframe oldfpccall otherwise overload override pascal platform private protected public published read register reintroduce result safecall saveregisters softfloat specialize static stdcall stored strict unaligned unimplemented varargs virtual write"
    );
    atoms10 = { "null": true };
    isOperatorChar7 = /[+\-*&%=<>!?|\/]/;
    pascal = {
      name: "pascal",
      startState: function() {
        return { tokenize: null };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = (state.tokenize || tokenBase22)(stream, state);
        if (style2 == "comment" || style2 == "meta") return style2;
        return style2;
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { block: { open: "(*", close: "*)" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/perl.js
var perl_exports = {};
__export(perl_exports, {
  perl: () => perl
});
function look(stream, c2) {
  return stream.string.charAt(stream.pos + (c2 || 0));
}
function prefix(stream, c2) {
  if (c2) {
    var x = stream.pos - c2;
    return stream.string.substr(x >= 0 ? x : 0, c2);
  } else {
    return stream.string.substr(0, stream.pos - 1);
  }
}
function suffix(stream, c2) {
  var y = stream.string.length;
  var x = y - stream.pos + 1;
  return stream.string.substr(stream.pos, c2 && c2 < y ? c2 : x);
}
function eatSuffix(stream, c2) {
  var x = stream.pos + c2;
  var y;
  if (x <= 0)
    stream.pos = 0;
  else if (x >= (y = stream.string.length - 1))
    stream.pos = y;
  else
    stream.pos = x;
}
function tokenChain(stream, state, chain12, style2, tail) {
  state.chain = null;
  state.style = null;
  state.tail = null;
  state.tokenize = function(stream2, state2) {
    var e = false, c2, i = 0;
    while (c2 = stream2.next()) {
      if (c2 === chain12[i] && !e) {
        if (chain12[++i] !== void 0) {
          state2.chain = chain12[i];
          state2.style = style2;
          state2.tail = tail;
        } else if (tail)
          stream2.eatWhile(tail);
        state2.tokenize = tokenPerl;
        return style2;
      }
      e = !e && c2 == "\\";
    }
    return style2;
  };
  return state.tokenize(stream, state);
}
function tokenSOMETHING(stream, state, string3) {
  state.tokenize = function(stream2, state2) {
    if (stream2.string == string3)
      state2.tokenize = tokenPerl;
    stream2.skipToEnd();
    return "string";
  };
  return state.tokenize(stream, state);
}
function tokenPerl(stream, state) {
  if (stream.eatSpace())
    return null;
  if (state.chain)
    return tokenChain(stream, state, state.chain, state.style, state.tail);
  if (stream.match(/^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/))
    return "number";
  if (stream.match(/^<<(?=[_a-zA-Z])/)) {
    stream.eatWhile(/\w/);
    return tokenSOMETHING(stream, state, stream.current().substr(2));
  }
  if (stream.sol() && stream.match(/^\=item(?!\w)/)) {
    return tokenSOMETHING(stream, state, "=cut");
  }
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    if (prefix(stream, 3) == "<<" + ch2) {
      var p = stream.pos;
      stream.eatWhile(/\w/);
      var n = stream.current().substr(1);
      if (n && stream.eat(ch2))
        return tokenSOMETHING(stream, state, n);
      stream.pos = p;
    }
    return tokenChain(stream, state, [ch2], "string");
  }
  if (ch2 == "q") {
    var c2 = look(stream, -2);
    if (!(c2 && /\w/.test(c2))) {
      c2 = look(stream, 0);
      if (c2 == "x") {
        c2 = look(stream, 1);
        if (c2 == "(") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
        }
        if (c2 == "[") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
        }
        if (c2 == "{") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
        }
        if (c2 == "<") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
        }
        if (/[\^'"!~\/]/.test(c2)) {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, [stream.eat(c2)], RXstyle, RXmodifiers);
        }
      } else if (c2 == "q") {
        c2 = look(stream, 1);
        if (c2 == "(") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [")"], "string");
        }
        if (c2 == "[") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["]"], "string");
        }
        if (c2 == "{") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["}"], "string");
        }
        if (c2 == "<") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [">"], "string");
        }
        if (/[\^'"!~\/]/.test(c2)) {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, [stream.eat(c2)], "string");
        }
      } else if (c2 == "w") {
        c2 = look(stream, 1);
        if (c2 == "(") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [")"], "bracket");
        }
        if (c2 == "[") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["]"], "bracket");
        }
        if (c2 == "{") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["}"], "bracket");
        }
        if (c2 == "<") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [">"], "bracket");
        }
        if (/[\^'"!~\/]/.test(c2)) {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, [stream.eat(c2)], "bracket");
        }
      } else if (c2 == "r") {
        c2 = look(stream, 1);
        if (c2 == "(") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
        }
        if (c2 == "[") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
        }
        if (c2 == "{") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
        }
        if (c2 == "<") {
          eatSuffix(stream, 2);
          return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
        }
        if (/[\^'"!~\/]/.test(c2)) {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, [stream.eat(c2)], RXstyle, RXmodifiers);
        }
      } else if (/[\^'"!~\/(\[{<]/.test(c2)) {
        if (c2 == "(") {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, [")"], "string");
        }
        if (c2 == "[") {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, ["]"], "string");
        }
        if (c2 == "{") {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, ["}"], "string");
        }
        if (c2 == "<") {
          eatSuffix(stream, 1);
          return tokenChain(stream, state, [">"], "string");
        }
        if (/[\^'"!~\/]/.test(c2)) {
          return tokenChain(stream, state, [stream.eat(c2)], "string");
        }
      }
    }
  }
  if (ch2 == "m") {
    var c2 = look(stream, -2);
    if (!(c2 && /\w/.test(c2))) {
      c2 = stream.eat(/[(\[{<\^'"!~\/]/);
      if (c2) {
        if (/[\^'"!~\/]/.test(c2)) {
          return tokenChain(stream, state, [c2], RXstyle, RXmodifiers);
        }
        if (c2 == "(") {
          return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
        }
        if (c2 == "[") {
          return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
        }
        if (c2 == "{") {
          return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
        }
        if (c2 == "<") {
          return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
        }
      }
    }
  }
  if (ch2 == "s") {
    var c2 = /[\/>\]})\w]/.test(look(stream, -2));
    if (!c2) {
      c2 = stream.eat(/[(\[{<\^'"!~\/]/);
      if (c2) {
        if (c2 == "[")
          return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
        if (c2 == "{")
          return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
        if (c2 == "<")
          return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
        if (c2 == "(")
          return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
        return tokenChain(stream, state, [c2, c2], RXstyle, RXmodifiers);
      }
    }
  }
  if (ch2 == "y") {
    var c2 = /[\/>\]})\w]/.test(look(stream, -2));
    if (!c2) {
      c2 = stream.eat(/[(\[{<\^'"!~\/]/);
      if (c2) {
        if (c2 == "[")
          return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
        if (c2 == "{")
          return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
        if (c2 == "<")
          return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
        if (c2 == "(")
          return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
        return tokenChain(stream, state, [c2, c2], RXstyle, RXmodifiers);
      }
    }
  }
  if (ch2 == "t") {
    var c2 = /[\/>\]})\w]/.test(look(stream, -2));
    if (!c2) {
      c2 = stream.eat("r");
      if (c2) {
        c2 = stream.eat(/[(\[{<\^'"!~\/]/);
        if (c2) {
          if (c2 == "[")
            return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
          if (c2 == "{")
            return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
          if (c2 == "<")
            return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
          if (c2 == "(")
            return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
          return tokenChain(stream, state, [c2, c2], RXstyle, RXmodifiers);
        }
      }
    }
  }
  if (ch2 == "`") {
    return tokenChain(stream, state, [ch2], "builtin");
  }
  if (ch2 == "/") {
    if (!/~\s*$/.test(prefix(stream)))
      return "operator";
    else
      return tokenChain(stream, state, [ch2], RXstyle, RXmodifiers);
  }
  if (ch2 == "$") {
    var p = stream.pos;
    if (stream.eatWhile(/\d/) || stream.eat("{") && stream.eatWhile(/\d/) && stream.eat("}"))
      return "builtin";
    else
      stream.pos = p;
  }
  if (/[$@%]/.test(ch2)) {
    var p = stream.pos;
    if (stream.eat("^") && stream.eat(/[A-Z]/) || !/[@$%&]/.test(look(stream, -2)) && stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)) {
      var c2 = stream.current();
      if (PERL[c2])
        return "builtin";
    }
    stream.pos = p;
  }
  if (/[$@%&]/.test(ch2)) {
    if (stream.eatWhile(/[\w$]/) || stream.eat("{") && stream.eatWhile(/[\w$]/) && stream.eat("}")) {
      var c2 = stream.current();
      if (PERL[c2])
        return "builtin";
      else
        return "variable";
    }
  }
  if (ch2 == "#") {
    if (look(stream, -2) != "$") {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch2)) {
    var p = stream.pos;
    stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
    if (PERL[stream.current()])
      return "operator";
    else
      stream.pos = p;
  }
  if (ch2 == "_") {
    if (stream.pos == 1) {
      if (suffix(stream, 6) == "_END__") {
        return tokenChain(stream, state, ["\0"], "comment");
      } else if (suffix(stream, 7) == "_DATA__") {
        return tokenChain(stream, state, ["\0"], "builtin");
      } else if (suffix(stream, 7) == "_C__") {
        return tokenChain(stream, state, ["\0"], "string");
      }
    }
  }
  if (/\w/.test(ch2)) {
    var p = stream.pos;
    if (look(stream, -2) == "{" && (look(stream, 0) == "}" || stream.eatWhile(/\w/) && look(stream, 0) == "}"))
      return "string";
    else
      stream.pos = p;
  }
  if (/[A-Z]/.test(ch2)) {
    var l = look(stream, -2);
    var p = stream.pos;
    stream.eatWhile(/[A-Z_]/);
    if (/[\da-z]/.test(look(stream, 0))) {
      stream.pos = p;
    } else {
      var c2 = PERL[stream.current()];
      if (!c2)
        return "meta";
      if (c2[1])
        c2 = c2[0];
      if (l != ":") {
        if (c2 == 1)
          return "keyword";
        else if (c2 == 2)
          return "def";
        else if (c2 == 3)
          return "atom";
        else if (c2 == 4)
          return "operator";
        else if (c2 == 5)
          return "builtin";
        else
          return "meta";
      } else
        return "meta";
    }
  }
  if (/[a-zA-Z_]/.test(ch2)) {
    var l = look(stream, -2);
    stream.eatWhile(/\w/);
    var c2 = PERL[stream.current()];
    if (!c2)
      return "meta";
    if (c2[1])
      c2 = c2[0];
    if (l != ":") {
      if (c2 == 1)
        return "keyword";
      else if (c2 == 2)
        return "def";
      else if (c2 == 3)
        return "atom";
      else if (c2 == 4)
        return "operator";
      else if (c2 == 5)
        return "builtin";
      else
        return "meta";
    } else
      return "meta";
  }
  return null;
}
var PERL, RXstyle, RXmodifiers, perl;
var init_perl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/perl.js"() {
    PERL = {
      //   null - magic touch
      //   1 - keyword
      //   2 - def
      //   3 - atom
      //   4 - operator
      //   5 - builtin (predefined)
      //   [x,y] - x=1,2,3; y=must be defined if x{...}
      //      PERL operators
      "->": 4,
      "++": 4,
      "--": 4,
      "**": 4,
      //   ! ~ \ and unary + and -
      "=~": 4,
      "!~": 4,
      "*": 4,
      "/": 4,
      "%": 4,
      "x": 4,
      "+": 4,
      "-": 4,
      ".": 4,
      "<<": 4,
      ">>": 4,
      //   named unary operators
      "<": 4,
      ">": 4,
      "<=": 4,
      ">=": 4,
      "lt": 4,
      "gt": 4,
      "le": 4,
      "ge": 4,
      "==": 4,
      "!=": 4,
      "<=>": 4,
      "eq": 4,
      "ne": 4,
      "cmp": 4,
      "~~": 4,
      "&": 4,
      "|": 4,
      "^": 4,
      "&&": 4,
      "||": 4,
      "//": 4,
      "..": 4,
      "...": 4,
      "?": 4,
      ":": 4,
      "=": 4,
      "+=": 4,
      "-=": 4,
      "*=": 4,
      //   etc. ???
      ",": 4,
      "=>": 4,
      "::": 4,
      //   list operators (rightward)
      "not": 4,
      "and": 4,
      "or": 4,
      "xor": 4,
      //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
      "BEGIN": [5, 1],
      "END": [5, 1],
      "PRINT": [5, 1],
      "PRINTF": [5, 1],
      "GETC": [5, 1],
      "READ": [5, 1],
      "READLINE": [5, 1],
      "DESTROY": [5, 1],
      "TIE": [5, 1],
      "TIEHANDLE": [5, 1],
      "UNTIE": [5, 1],
      "STDIN": 5,
      "STDIN_TOP": 5,
      "STDOUT": 5,
      "STDOUT_TOP": 5,
      "STDERR": 5,
      "STDERR_TOP": 5,
      "$ARG": 5,
      "$_": 5,
      "@ARG": 5,
      "@_": 5,
      "$LIST_SEPARATOR": 5,
      '$"': 5,
      "$PROCESS_ID": 5,
      "$PID": 5,
      "$$": 5,
      "$REAL_GROUP_ID": 5,
      "$GID": 5,
      "$(": 5,
      "$EFFECTIVE_GROUP_ID": 5,
      "$EGID": 5,
      "$)": 5,
      "$PROGRAM_NAME": 5,
      "$0": 5,
      "$SUBSCRIPT_SEPARATOR": 5,
      "$SUBSEP": 5,
      "$;": 5,
      "$REAL_USER_ID": 5,
      "$UID": 5,
      "$<": 5,
      "$EFFECTIVE_USER_ID": 5,
      "$EUID": 5,
      "$>": 5,
      "$a": 5,
      "$b": 5,
      "$COMPILING": 5,
      "$^C": 5,
      "$DEBUGGING": 5,
      "$^D": 5,
      "${^ENCODING}": 5,
      "$ENV": 5,
      "%ENV": 5,
      "$SYSTEM_FD_MAX": 5,
      "$^F": 5,
      "@F": 5,
      "${^GLOBAL_PHASE}": 5,
      "$^H": 5,
      "%^H": 5,
      "@INC": 5,
      "%INC": 5,
      "$INPLACE_EDIT": 5,
      "$^I": 5,
      "$^M": 5,
      "$OSNAME": 5,
      "$^O": 5,
      "${^OPEN}": 5,
      "$PERLDB": 5,
      "$^P": 5,
      "$SIG": 5,
      "%SIG": 5,
      "$BASETIME": 5,
      "$^T": 5,
      "${^TAINT}": 5,
      "${^UNICODE}": 5,
      "${^UTF8CACHE}": 5,
      "${^UTF8LOCALE}": 5,
      "$PERL_VERSION": 5,
      "$^V": 5,
      "${^WIN32_SLOPPY_STAT}": 5,
      "$EXECUTABLE_NAME": 5,
      "$^X": 5,
      "$1": 5,
      // - regexp $1, $2...
      "$MATCH": 5,
      "$&": 5,
      "${^MATCH}": 5,
      "$PREMATCH": 5,
      "$`": 5,
      "${^PREMATCH}": 5,
      "$POSTMATCH": 5,
      "$'": 5,
      "${^POSTMATCH}": 5,
      "$LAST_PAREN_MATCH": 5,
      "$+": 5,
      "$LAST_SUBMATCH_RESULT": 5,
      "$^N": 5,
      "@LAST_MATCH_END": 5,
      "@+": 5,
      "%LAST_PAREN_MATCH": 5,
      "%+": 5,
      "@LAST_MATCH_START": 5,
      "@-": 5,
      "%LAST_MATCH_START": 5,
      "%-": 5,
      "$LAST_REGEXP_CODE_RESULT": 5,
      "$^R": 5,
      "${^RE_DEBUG_FLAGS}": 5,
      "${^RE_TRIE_MAXBUF}": 5,
      "$ARGV": 5,
      "@ARGV": 5,
      "ARGV": 5,
      "ARGVOUT": 5,
      "$OUTPUT_FIELD_SEPARATOR": 5,
      "$OFS": 5,
      "$,": 5,
      "$INPUT_LINE_NUMBER": 5,
      "$NR": 5,
      "$.": 5,
      "$INPUT_RECORD_SEPARATOR": 5,
      "$RS": 5,
      "$/": 5,
      "$OUTPUT_RECORD_SEPARATOR": 5,
      "$ORS": 5,
      "$\\": 5,
      "$OUTPUT_AUTOFLUSH": 5,
      "$|": 5,
      "$ACCUMULATOR": 5,
      "$^A": 5,
      "$FORMAT_FORMFEED": 5,
      "$^L": 5,
      "$FORMAT_PAGE_NUMBER": 5,
      "$%": 5,
      "$FORMAT_LINES_LEFT": 5,
      "$-": 5,
      "$FORMAT_LINE_BREAK_CHARACTERS": 5,
      "$:": 5,
      "$FORMAT_LINES_PER_PAGE": 5,
      "$=": 5,
      "$FORMAT_TOP_NAME": 5,
      "$^": 5,
      "$FORMAT_NAME": 5,
      "$~": 5,
      "${^CHILD_ERROR_NATIVE}": 5,
      "$EXTENDED_OS_ERROR": 5,
      "$^E": 5,
      "$EXCEPTIONS_BEING_CAUGHT": 5,
      "$^S": 5,
      "$WARNING": 5,
      "$^W": 5,
      "${^WARNING_BITS}": 5,
      "$OS_ERROR": 5,
      "$ERRNO": 5,
      "$!": 5,
      "%OS_ERROR": 5,
      "%ERRNO": 5,
      "%!": 5,
      "$CHILD_ERROR": 5,
      "$?": 5,
      "$EVAL_ERROR": 5,
      "$@": 5,
      "$OFMT": 5,
      "$#": 5,
      "$*": 5,
      "$ARRAY_BASE": 5,
      "$[": 5,
      "$OLD_PERL_VERSION": 5,
      "$]": 5,
      //      PERL blocks
      "if": [1, 1],
      elsif: [1, 1],
      "else": [1, 1],
      "while": [1, 1],
      unless: [1, 1],
      "for": [1, 1],
      foreach: [1, 1],
      //      PERL functions
      "abs": 1,
      // - absolute value function
      accept: 1,
      // - accept an incoming socket connect
      alarm: 1,
      // - schedule a SIGALRM
      "atan2": 1,
      // - arctangent of Y/X in the range -PI to PI
      bind: 1,
      // - binds an address to a socket
      binmode: 1,
      // - prepare binary files for I/O
      bless: 1,
      // - create an object
      bootstrap: 1,
      //
      "break": 1,
      // - break out of a "given" block
      caller: 1,
      // - get context of the current subroutine call
      chdir: 1,
      // - change your current working directory
      chmod: 1,
      // - changes the permissions on a list of files
      chomp: 1,
      // - remove a trailing record separator from a string
      chop: 1,
      // - remove the last character from a string
      chown: 1,
      // - change the ownership on a list of files
      chr: 1,
      // - get character this number represents
      chroot: 1,
      // - make directory new root for path lookups
      close: 1,
      // - close file (or pipe or socket) handle
      closedir: 1,
      // - close directory handle
      connect: 1,
      // - connect to a remote socket
      "continue": [1, 1],
      // - optional trailing block in a while or foreach
      "cos": 1,
      // - cosine function
      crypt: 1,
      // - one-way passwd-style encryption
      dbmclose: 1,
      // - breaks binding on a tied dbm file
      dbmopen: 1,
      // - create binding on a tied dbm file
      "default": 1,
      //
      defined: 1,
      // - test whether a value, variable, or function is defined
      "delete": 1,
      // - deletes a value from a hash
      die: 1,
      // - raise an exception or bail out
      "do": 1,
      // - turn a BLOCK into a TERM
      dump: 1,
      // - create an immediate core dump
      each: 1,
      // - retrieve the next key/value pair from a hash
      endgrent: 1,
      // - be done using group file
      endhostent: 1,
      // - be done using hosts file
      endnetent: 1,
      // - be done using networks file
      endprotoent: 1,
      // - be done using protocols file
      endpwent: 1,
      // - be done using passwd file
      endservent: 1,
      // - be done using services file
      eof: 1,
      // - test a filehandle for its end
      "eval": 1,
      // - catch exceptions or compile and run code
      "exec": 1,
      // - abandon this program to run another
      exists: 1,
      // - test whether a hash key is present
      exit: 1,
      // - terminate this program
      "exp": 1,
      // - raise I to a power
      fcntl: 1,
      // - file control system call
      fileno: 1,
      // - return file descriptor from filehandle
      flock: 1,
      // - lock an entire file with an advisory lock
      fork: 1,
      // - create a new process just like this one
      format: 1,
      // - declare a picture format with use by the write() function
      formline: 1,
      // - internal function used for formats
      getc: 1,
      // - get the next character from the filehandle
      getgrent: 1,
      // - get next group record
      getgrgid: 1,
      // - get group record given group user ID
      getgrnam: 1,
      // - get group record given group name
      gethostbyaddr: 1,
      // - get host record given its address
      gethostbyname: 1,
      // - get host record given name
      gethostent: 1,
      // - get next hosts record
      getlogin: 1,
      // - return who logged in at this tty
      getnetbyaddr: 1,
      // - get network record given its address
      getnetbyname: 1,
      // - get networks record given name
      getnetent: 1,
      // - get next networks record
      getpeername: 1,
      // - find the other end of a socket connection
      getpgrp: 1,
      // - get process group
      getppid: 1,
      // - get parent process ID
      getpriority: 1,
      // - get current nice value
      getprotobyname: 1,
      // - get protocol record given name
      getprotobynumber: 1,
      // - get protocol record numeric protocol
      getprotoent: 1,
      // - get next protocols record
      getpwent: 1,
      // - get next passwd record
      getpwnam: 1,
      // - get passwd record given user login name
      getpwuid: 1,
      // - get passwd record given user ID
      getservbyname: 1,
      // - get services record given its name
      getservbyport: 1,
      // - get services record given numeric port
      getservent: 1,
      // - get next services record
      getsockname: 1,
      // - retrieve the sockaddr for a given socket
      getsockopt: 1,
      // - get socket options on a given socket
      given: 1,
      //
      glob: 1,
      // - expand filenames using wildcards
      gmtime: 1,
      // - convert UNIX time into record or string using Greenwich time
      "goto": 1,
      // - create spaghetti code
      grep: 1,
      // - locate elements in a list test true against a given criterion
      hex: 1,
      // - convert a string to a hexadecimal number
      "import": 1,
      // - patch a module's namespace into your own
      index: 1,
      // - find a substring within a string
      "int": 1,
      // - get the integer portion of a number
      ioctl: 1,
      // - system-dependent device control system call
      "join": 1,
      // - join a list into a string using a separator
      keys: 1,
      // - retrieve list of indices from a hash
      kill: 1,
      // - send a signal to a process or process group
      last: 1,
      // - exit a block prematurely
      lc: 1,
      // - return lower-case version of a string
      lcfirst: 1,
      // - return a string with just the next letter in lower case
      length: 1,
      // - return the number of bytes in a string
      "link": 1,
      // - create a hard link in the filesystem
      listen: 1,
      // - register your socket as a server
      local: 2,
      // - create a temporary value for a global variable (dynamic scoping)
      localtime: 1,
      // - convert UNIX time into record or string using local time
      lock: 1,
      // - get a thread lock on a variable, subroutine, or method
      "log": 1,
      // - retrieve the natural logarithm for a number
      lstat: 1,
      // - stat a symbolic link
      m: null,
      // - match a string with a regular expression pattern
      map: 1,
      // - apply a change to a list to get back a new list with the changes
      mkdir: 1,
      // - create a directory
      msgctl: 1,
      // - SysV IPC message control operations
      msgget: 1,
      // - get SysV IPC message queue
      msgrcv: 1,
      // - receive a SysV IPC message from a message queue
      msgsnd: 1,
      // - send a SysV IPC message to a message queue
      my: 2,
      // - declare and assign a local variable (lexical scoping)
      "new": 1,
      //
      next: 1,
      // - iterate a block prematurely
      no: 1,
      // - unimport some module symbols or semantics at compile time
      oct: 1,
      // - convert a string to an octal number
      open: 1,
      // - open a file, pipe, or descriptor
      opendir: 1,
      // - open a directory
      ord: 1,
      // - find a character's numeric representation
      our: 2,
      // - declare and assign a package variable (lexical scoping)
      pack: 1,
      // - convert a list into a binary representation
      "package": 1,
      // - declare a separate global namespace
      pipe: 1,
      // - open a pair of connected filehandles
      pop: 1,
      // - remove the last element from an array and return it
      pos: 1,
      // - find or set the offset for the last/next m//g search
      print: 1,
      // - output a list to a filehandle
      printf: 1,
      // - output a formatted list to a filehandle
      prototype: 1,
      // - get the prototype (if any) of a subroutine
      push: 1,
      // - append one or more elements to an array
      q: null,
      // - singly quote a string
      qq: null,
      // - doubly quote a string
      qr: null,
      // - Compile pattern
      quotemeta: null,
      // - quote regular expression magic characters
      qw: null,
      // - quote a list of words
      qx: null,
      // - backquote quote a string
      rand: 1,
      // - retrieve the next pseudorandom number
      read: 1,
      // - fixed-length buffered input from a filehandle
      readdir: 1,
      // - get a directory from a directory handle
      readline: 1,
      // - fetch a record from a file
      readlink: 1,
      // - determine where a symbolic link is pointing
      readpipe: 1,
      // - execute a system command and collect standard output
      recv: 1,
      // - receive a message over a Socket
      redo: 1,
      // - start this loop iteration over again
      ref: 1,
      // - find out the type of thing being referenced
      rename: 1,
      // - change a filename
      require: 1,
      // - load in external functions from a library at runtime
      reset: 1,
      // - clear all variables of a given name
      "return": 1,
      // - get out of a function early
      reverse: 1,
      // - flip a string or a list
      rewinddir: 1,
      // - reset directory handle
      rindex: 1,
      // - right-to-left substring search
      rmdir: 1,
      // - remove a directory
      s: null,
      // - replace a pattern with a string
      say: 1,
      // - print with newline
      scalar: 1,
      // - force a scalar context
      seek: 1,
      // - reposition file pointer for random-access I/O
      seekdir: 1,
      // - reposition directory pointer
      select: 1,
      // - reset default output or do I/O multiplexing
      semctl: 1,
      // - SysV semaphore control operations
      semget: 1,
      // - get set of SysV semaphores
      semop: 1,
      // - SysV semaphore operations
      send: 1,
      // - send a message over a socket
      setgrent: 1,
      // - prepare group file for use
      sethostent: 1,
      // - prepare hosts file for use
      setnetent: 1,
      // - prepare networks file for use
      setpgrp: 1,
      // - set the process group of a process
      setpriority: 1,
      // - set a process's nice value
      setprotoent: 1,
      // - prepare protocols file for use
      setpwent: 1,
      // - prepare passwd file for use
      setservent: 1,
      // - prepare services file for use
      setsockopt: 1,
      // - set some socket options
      shift: 1,
      // - remove the first element of an array, and return it
      shmctl: 1,
      // - SysV shared memory operations
      shmget: 1,
      // - get SysV shared memory segment identifier
      shmread: 1,
      // - read SysV shared memory
      shmwrite: 1,
      // - write SysV shared memory
      shutdown: 1,
      // - close down just half of a socket connection
      "sin": 1,
      // - return the sine of a number
      sleep: 1,
      // - block for some number of seconds
      socket: 1,
      // - create a socket
      socketpair: 1,
      // - create a pair of sockets
      "sort": 1,
      // - sort a list of values
      splice: 1,
      // - add or remove elements anywhere in an array
      "split": 1,
      // - split up a string using a regexp delimiter
      sprintf: 1,
      // - formatted print into a string
      "sqrt": 1,
      // - square root function
      srand: 1,
      // - seed the random number generator
      stat: 1,
      // - get a file's status information
      state: 1,
      // - declare and assign a state variable (persistent lexical scoping)
      study: 1,
      // - optimize input data for repeated searches
      "sub": 1,
      // - declare a subroutine, possibly anonymously
      "substr": 1,
      // - get or alter a portion of a string
      symlink: 1,
      // - create a symbolic link to a file
      syscall: 1,
      // - execute an arbitrary system call
      sysopen: 1,
      // - open a file, pipe, or descriptor
      sysread: 1,
      // - fixed-length unbuffered input from a filehandle
      sysseek: 1,
      // - position I/O pointer on handle used with sysread and syswrite
      system: 1,
      // - run a separate program
      syswrite: 1,
      // - fixed-length unbuffered output to a filehandle
      tell: 1,
      // - get current seekpointer on a filehandle
      telldir: 1,
      // - get current seekpointer on a directory handle
      tie: 1,
      // - bind a variable to an object class
      tied: 1,
      // - get a reference to the object underlying a tied variable
      time: 1,
      // - return number of seconds since 1970
      times: 1,
      // - return elapsed time for self and child processes
      tr: null,
      // - transliterate a string
      truncate: 1,
      // - shorten a file
      uc: 1,
      // - return upper-case version of a string
      ucfirst: 1,
      // - return a string with just the next letter in upper case
      umask: 1,
      // - set file creation mode mask
      undef: 1,
      // - remove a variable or function definition
      unlink: 1,
      // - remove one link to a file
      unpack: 1,
      // - convert binary structure into normal perl variables
      unshift: 1,
      // - prepend more elements to the beginning of a list
      untie: 1,
      // - break a tie binding to a variable
      use: 1,
      // - load in a module at compile time
      utime: 1,
      // - set a file's last access and modify times
      values: 1,
      // - return a list of the values in a hash
      vec: 1,
      // - test or set particular bits in a string
      wait: 1,
      // - wait for any child process to die
      waitpid: 1,
      // - wait for a particular child process to die
      wantarray: 1,
      // - get void vs scalar vs list context of current subroutine call
      warn: 1,
      // - print debugging info
      when: 1,
      //
      write: 1,
      // - print a picture record
      y: null
    };
    RXstyle = "string.special";
    RXmodifiers = /[goseximacplud]/;
    perl = {
      name: "perl",
      startState: function() {
        return {
          tokenize: tokenPerl,
          chain: null,
          style: null,
          tail: null
        };
      },
      token: function(stream, state) {
        return (state.tokenize || tokenPerl)(stream, state);
      },
      languageData: {
        commentTokens: { line: "#" },
        wordChars: "$"
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/pig.js
var pig_exports = {};
__export(pig_exports, {
  pig: () => pig
});
function words12(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function chain6(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenComment12(stream, state) {
  var isEnd = false;
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && isEnd) {
      state.tokenize = tokenBase23;
      break;
    }
    isEnd = ch2 == "*";
  }
  return "comment";
}
function tokenString12(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !escaped)
      state.tokenize = tokenBase23;
    return "error";
  };
}
function tokenBase23(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'")
    return chain6(stream, state, tokenString12(ch2));
  else if (/[\[\]{}\(\),;\.]/.test(ch2))
    return null;
  else if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  } else if (ch2 == "/") {
    if (stream.eat("*")) {
      return chain6(stream, state, tokenComment12);
    } else {
      stream.eatWhile(isOperatorChar8);
      return "operator";
    }
  } else if (ch2 == "-") {
    if (stream.eat("-")) {
      stream.skipToEnd();
      return "comment";
    } else {
      stream.eatWhile(isOperatorChar8);
      return "operator";
    }
  } else if (isOperatorChar8.test(ch2)) {
    stream.eatWhile(isOperatorChar8);
    return "operator";
  } else {
    stream.eatWhile(/[\w\$_]/);
    if (keywords25 && keywords25.propertyIsEnumerable(stream.current().toUpperCase())) {
      if (!stream.eat(")") && !stream.eat("."))
        return "keyword";
    }
    if (builtins7 && builtins7.propertyIsEnumerable(stream.current().toUpperCase()))
      return "builtin";
    if (types3 && types3.propertyIsEnumerable(stream.current().toUpperCase()))
      return "type";
    return "variable";
  }
}
var pBuiltins, pKeywords, pTypes, builtins7, keywords25, types3, isOperatorChar8, pig;
var init_pig = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/pig.js"() {
    pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";
    pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE NEQ MATCHES TRUE FALSE DUMP";
    pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";
    builtins7 = words12(pBuiltins);
    keywords25 = words12(pKeywords);
    types3 = words12(pTypes);
    isOperatorChar8 = /[*+\-%<>=&?:\/!|]/;
    pig = {
      name: "pig",
      startState: function() {
        return {
          tokenize: tokenBase23,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        return style2;
      },
      languageData: {
        autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/powershell.js
var powershell_exports = {};
__export(powershell_exports, {
  powerShell: () => powerShell
});
function buildRegexp(patterns2, options) {
  options = options || {};
  var prefix2 = options.prefix !== void 0 ? options.prefix : "^";
  var suffix2 = options.suffix !== void 0 ? options.suffix : "\\b";
  for (var i = 0; i < patterns2.length; i++) {
    if (patterns2[i] instanceof RegExp) {
      patterns2[i] = patterns2[i].source;
    } else {
      patterns2[i] = patterns2[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
  }
  return new RegExp(prefix2 + "(" + patterns2.join("|") + ")" + suffix2, "i");
}
function tokenBase24(stream, state) {
  var parent = state.returnStack[state.returnStack.length - 1];
  if (parent && parent.shouldReturnFrom(state)) {
    state.tokenize = parent.tokenize;
    state.returnStack.pop();
    return state.tokenize(stream, state);
  }
  if (stream.eatSpace()) {
    return null;
  }
  if (stream.eat("(")) {
    state.bracketNesting += 1;
    return "punctuation";
  }
  if (stream.eat(")")) {
    state.bracketNesting -= 1;
    return "punctuation";
  }
  for (var key in grammar) {
    if (stream.match(grammar[key])) {
      return key;
    }
  }
  var ch2 = stream.next();
  if (ch2 === "'") {
    return tokenSingleQuoteString(stream, state);
  }
  if (ch2 === "$") {
    return tokenVariable(stream, state);
  }
  if (ch2 === '"') {
    return tokenDoubleQuoteString(stream, state);
  }
  if (ch2 === "<" && stream.eat("#")) {
    state.tokenize = tokenComment13;
    return tokenComment13(stream, state);
  }
  if (ch2 === "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 === "@") {
    var quoteMatch = stream.eat(/["']/);
    if (quoteMatch && stream.eol()) {
      state.tokenize = tokenMultiString;
      state.startQuote = quoteMatch[0];
      return tokenMultiString(stream, state);
    } else if (stream.eol()) {
      return "error";
    } else if (stream.peek().match(/[({]/)) {
      return "punctuation";
    } else if (stream.peek().match(varNames)) {
      return tokenVariable(stream, state);
    }
  }
  return "error";
}
function tokenSingleQuoteString(stream, state) {
  var ch2;
  while ((ch2 = stream.peek()) != null) {
    stream.next();
    if (ch2 === "'" && !stream.eat("'")) {
      state.tokenize = tokenBase24;
      return "string";
    }
  }
  return "error";
}
function tokenDoubleQuoteString(stream, state) {
  var ch2;
  while ((ch2 = stream.peek()) != null) {
    if (ch2 === "$") {
      state.tokenize = tokenStringInterpolation;
      return "string";
    }
    stream.next();
    if (ch2 === "`") {
      stream.next();
      continue;
    }
    if (ch2 === '"' && !stream.eat('"')) {
      state.tokenize = tokenBase24;
      return "string";
    }
  }
  return "error";
}
function tokenStringInterpolation(stream, state) {
  return tokenInterpolation2(stream, state, tokenDoubleQuoteString);
}
function tokenMultiStringReturn(stream, state) {
  state.tokenize = tokenMultiString;
  state.startQuote = '"';
  return tokenMultiString(stream, state);
}
function tokenHereStringInterpolation(stream, state) {
  return tokenInterpolation2(stream, state, tokenMultiStringReturn);
}
function tokenInterpolation2(stream, state, parentTokenize) {
  if (stream.match("$(")) {
    var savedBracketNesting = state.bracketNesting;
    state.returnStack.push({
      /*jshint loopfunc:true */
      shouldReturnFrom: function(state2) {
        return state2.bracketNesting === savedBracketNesting;
      },
      tokenize: parentTokenize
    });
    state.tokenize = tokenBase24;
    state.bracketNesting += 1;
    return "punctuation";
  } else {
    stream.next();
    state.returnStack.push({
      shouldReturnFrom: function() {
        return true;
      },
      tokenize: parentTokenize
    });
    state.tokenize = tokenVariable;
    return state.tokenize(stream, state);
  }
}
function tokenComment13(stream, state) {
  var maybeEnd = false, ch2;
  while ((ch2 = stream.next()) != null) {
    if (maybeEnd && ch2 == ">") {
      state.tokenize = tokenBase24;
      break;
    }
    maybeEnd = ch2 === "#";
  }
  return "comment";
}
function tokenVariable(stream, state) {
  var ch2 = stream.peek();
  if (stream.eat("{")) {
    state.tokenize = tokenVariableWithBraces;
    return tokenVariableWithBraces(stream, state);
  } else if (ch2 != void 0 && ch2.match(varNames)) {
    stream.eatWhile(varNames);
    state.tokenize = tokenBase24;
    return "variable";
  } else {
    state.tokenize = tokenBase24;
    return "error";
  }
}
function tokenVariableWithBraces(stream, state) {
  var ch2;
  while ((ch2 = stream.next()) != null) {
    if (ch2 === "}") {
      state.tokenize = tokenBase24;
      break;
    }
  }
  return "variable";
}
function tokenMultiString(stream, state) {
  var quote4 = state.startQuote;
  if (stream.sol() && stream.match(new RegExp(quote4 + "@"))) {
    state.tokenize = tokenBase24;
  } else if (quote4 === '"') {
    while (!stream.eol()) {
      var ch2 = stream.peek();
      if (ch2 === "$") {
        state.tokenize = tokenHereStringInterpolation;
        return "string";
      }
      stream.next();
      if (ch2 === "`") {
        stream.next();
      }
    }
  } else {
    stream.skipToEnd();
  }
  return "string";
}
var notCharacterOrDash, varNames, keywords26, punctuation2, wordOperators3, symbolOperators2, operators5, numbers, identifiers8, symbolBuiltins, namedBuiltins, variableBuiltins, builtins8, grammar, powerShell;
var init_powershell = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/powershell.js"() {
    notCharacterOrDash = "(?=[^A-Za-z\\d\\-_]|$)";
    varNames = /[\w\-:]/;
    keywords26 = buildRegexp([
      /begin|break|catch|continue|data|default|do|dynamicparam/,
      /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
      /param|process|return|switch|throw|trap|try|until|where|while/
    ], { suffix: notCharacterOrDash });
    punctuation2 = /[\[\]{},;`\\\.]|@[({]/;
    wordOperators3 = buildRegexp([
      "f",
      /b?not/,
      /[ic]?split/,
      "join",
      /is(not)?/,
      "as",
      /[ic]?(eq|ne|[gl][te])/,
      /[ic]?(not)?(like|match|contains)/,
      /[ic]?replace/,
      /b?(and|or|xor)/
    ], { prefix: "-" });
    symbolOperators2 = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
    operators5 = buildRegexp([wordOperators3, symbolOperators2], { suffix: "" });
    numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;
    identifiers8 = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;
    symbolBuiltins = /[A-Z]:|%|\?/i;
    namedBuiltins = buildRegexp([
      /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
      /Checkpoint-Computer/,
      /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
      /Compare-Object/,
      /Complete-Transaction/,
      /Connect-PSSession/,
      /ConvertFrom-(Csv|Json|SecureString|StringData)/,
      /Convert-Path/,
      /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
      /Copy-Item(Property)?/,
      /Debug-Process/,
      /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
      /Disconnect-PSSession/,
      /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
      /(Enter|Exit)-PSSession/,
      /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
      /ForEach-Object/,
      /Format-(Custom|List|Table|Wide)/,
      new RegExp("Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)"),
      /Group-Object/,
      /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
      /ImportSystemModules/,
      /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
      /Join-Path/,
      /Limit-EventLog/,
      /Measure-(Command|Object)/,
      /Move-Item(Property)?/,
      new RegExp("New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)"),
      /Out-(Default|File|GridView|Host|Null|Printer|String)/,
      /Pause/,
      /(Pop|Push)-Location/,
      /Read-Host/,
      /Receive-(Job|PSSession)/,
      /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
      /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
      /Rename-(Computer|Item(Property)?)/,
      /Reset-ComputerMachinePassword/,
      /Resolve-Path/,
      /Restart-(Computer|Service)/,
      /Restore-Computer/,
      /Resume-(Job|Service)/,
      /Save-Help/,
      /Select-(Object|String|Xml)/,
      /Send-MailMessage/,
      new RegExp("Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)"),
      /Show-(Command|ControlPanelItem|EventLog)/,
      /Sort-Object/,
      /Split-Path/,
      /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
      /Stop-(Computer|Job|Process|Service|Transcript)/,
      /Suspend-(Job|Service)/,
      /TabExpansion2/,
      /Tee-Object/,
      /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
      /Trace-Command/,
      /Unblock-File/,
      /Undo-Transaction/,
      /Unregister-(Event|PSSessionConfiguration)/,
      /Update-(FormatData|Help|List|TypeData)/,
      /Use-Transaction/,
      /Wait-(Event|Job|Process)/,
      /Where-Object/,
      /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
      /cd|help|mkdir|more|oss|prompt/,
      /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
      /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
      /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
      /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
      /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
      /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
    ], { prefix: "", suffix: "" });
    variableBuiltins = buildRegexp([
      /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
      /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
      /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
      /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
      /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
      /WarningPreference|WhatIfPreference/,
      /Event|EventArgs|EventSubscriber|Sender/,
      /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
      /true|false|null/
    ], { prefix: "\\$", suffix: "" });
    builtins8 = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });
    grammar = {
      keyword: keywords26,
      number: numbers,
      operator: operators5,
      builtin: builtins8,
      punctuation: punctuation2,
      variable: identifiers8
    };
    powerShell = {
      name: "powershell",
      startState: function() {
        return {
          returnStack: [],
          bracketNesting: 0,
          tokenize: tokenBase24
        };
      },
      token: function(stream, state) {
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: { line: "#", block: { open: "<#", close: "#>" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/properties.js
var properties_exports = {};
__export(properties_exports, {
  properties: () => properties2
});
var properties2;
var init_properties = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/properties.js"() {
    properties2 = {
      name: "properties",
      token: function(stream, state) {
        var sol = stream.sol() || state.afterSection;
        var eol2 = stream.eol();
        state.afterSection = false;
        if (sol) {
          if (state.nextMultiline) {
            state.inMultiline = true;
            state.nextMultiline = false;
          } else {
            state.position = "def";
          }
        }
        if (eol2 && !state.nextMultiline) {
          state.inMultiline = false;
          state.position = "def";
        }
        if (sol) {
          while (stream.eatSpace()) {
          }
        }
        var ch2 = stream.next();
        if (sol && (ch2 === "#" || ch2 === "!" || ch2 === ";")) {
          state.position = "comment";
          stream.skipToEnd();
          return "comment";
        } else if (sol && ch2 === "[") {
          state.afterSection = true;
          stream.skipTo("]");
          stream.eat("]");
          return "header";
        } else if (ch2 === "=" || ch2 === ":") {
          state.position = "quote";
          return null;
        } else if (ch2 === "\\" && state.position === "quote") {
          if (stream.eol()) {
            state.nextMultiline = true;
          }
        }
        return state.position;
      },
      startState: function() {
        return {
          position: "def",
          // Current position, "def", "quote" or "comment"
          nextMultiline: false,
          // Is the next line multiline value
          inMultiline: false,
          // Is the current line a multiline value
          afterSection: false
          // Did we just open a section
        };
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/protobuf.js
var protobuf_exports = {};
__export(protobuf_exports, {
  protobuf: () => protobuf
});
function wordRegexp9(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
}
function tokenBase25(stream) {
  if (stream.eatSpace()) return null;
  if (stream.match("//")) {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^[0-9\.+-]/, false)) {
    if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
      return "number";
    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
      return "number";
    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
      return "number";
  }
  if (stream.match(/^"([^"]|(""))*"/)) {
    return "string";
  }
  if (stream.match(/^'([^']|(''))*'/)) {
    return "string";
  }
  if (stream.match(keywords27)) {
    return "keyword";
  }
  if (stream.match(identifiers9)) {
    return "variable";
  }
  ;
  stream.next();
  return null;
}
var keywordArray2, keywords27, identifiers9, protobuf;
var init_protobuf = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/protobuf.js"() {
    keywordArray2 = [
      "package",
      "message",
      "import",
      "syntax",
      "required",
      "optional",
      "repeated",
      "reserved",
      "default",
      "extensions",
      "packed",
      "bool",
      "bytes",
      "double",
      "enum",
      "float",
      "string",
      "int32",
      "int64",
      "uint32",
      "uint64",
      "sint32",
      "sint64",
      "fixed32",
      "fixed64",
      "sfixed32",
      "sfixed64",
      "option",
      "service",
      "rpc",
      "returns"
    ];
    keywords27 = wordRegexp9(keywordArray2);
    identifiers9 = new RegExp("^[_A-Za-z\xA1-\uFFFF][_A-Za-z0-9\xA1-\uFFFF]*");
    protobuf = {
      name: "protobuf",
      token: tokenBase25,
      languageData: {
        autocomplete: keywordArray2
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/pug.js
var pug_exports = {};
__export(pug_exports, {
  pug: () => pug
});
function defaultCopyState2(state) {
  if (typeof state != "object") return state;
  let newState = {};
  for (let prop in state) {
    let val = state[prop];
    newState[prop] = val instanceof Array ? val.slice() : val;
  }
  return newState;
}
function javaScript(stream, state) {
  if (stream.sol()) {
    state.javaScriptLine = false;
    state.javaScriptLineExcludesColon = false;
  }
  if (state.javaScriptLine) {
    if (state.javaScriptLineExcludesColon && stream.peek() === ":") {
      state.javaScriptLine = false;
      state.javaScriptLineExcludesColon = false;
      return;
    }
    var tok = javascript2.token(stream, state.jsState);
    if (stream.eol()) state.javaScriptLine = false;
    return tok || true;
  }
}
function javaScriptArguments(stream, state) {
  if (state.javaScriptArguments) {
    if (state.javaScriptArgumentsDepth === 0 && stream.peek() !== "(") {
      state.javaScriptArguments = false;
      return;
    }
    if (stream.peek() === "(") {
      state.javaScriptArgumentsDepth++;
    } else if (stream.peek() === ")") {
      state.javaScriptArgumentsDepth--;
    }
    if (state.javaScriptArgumentsDepth === 0) {
      state.javaScriptArguments = false;
      return;
    }
    var tok = javascript2.token(stream, state.jsState);
    return tok || true;
  }
}
function yieldStatement(stream) {
  if (stream.match(/^yield\b/)) {
    return "keyword";
  }
}
function doctype(stream) {
  if (stream.match(/^(?:doctype) *([^\n]+)?/)) return "meta";
}
function interpolation(stream, state) {
  if (stream.match("#{")) {
    state.isInterpolating = true;
    state.interpolationNesting = 0;
    return "punctuation";
  }
}
function interpolationContinued(stream, state) {
  if (state.isInterpolating) {
    if (stream.peek() === "}") {
      state.interpolationNesting--;
      if (state.interpolationNesting < 0) {
        stream.next();
        state.isInterpolating = false;
        return "punctuation";
      }
    } else if (stream.peek() === "{") {
      state.interpolationNesting++;
    }
    return javascript2.token(stream, state.jsState) || true;
  }
}
function caseStatement(stream, state) {
  if (stream.match(/^case\b/)) {
    state.javaScriptLine = true;
    return "keyword";
  }
}
function when(stream, state) {
  if (stream.match(/^when\b/)) {
    state.javaScriptLine = true;
    state.javaScriptLineExcludesColon = true;
    return "keyword";
  }
}
function defaultStatement(stream) {
  if (stream.match(/^default\b/)) {
    return "keyword";
  }
}
function extendsStatement(stream, state) {
  if (stream.match(/^extends?\b/)) {
    state.restOfLine = "string";
    return "keyword";
  }
}
function append(stream, state) {
  if (stream.match(/^append\b/)) {
    state.restOfLine = "variable";
    return "keyword";
  }
}
function prepend(stream, state) {
  if (stream.match(/^prepend\b/)) {
    state.restOfLine = "variable";
    return "keyword";
  }
}
function block2(stream, state) {
  if (stream.match(/^block\b *(?:(prepend|append)\b)?/)) {
    state.restOfLine = "variable";
    return "keyword";
  }
}
function include2(stream, state) {
  if (stream.match(/^include\b/)) {
    state.restOfLine = "string";
    return "keyword";
  }
}
function includeFiltered(stream, state) {
  if (stream.match(/^include:([a-zA-Z0-9\-]+)/, false) && stream.match("include")) {
    state.isIncludeFiltered = true;
    return "keyword";
  }
}
function includeFilteredContinued(stream, state) {
  if (state.isIncludeFiltered) {
    var tok = filter(stream, state);
    state.isIncludeFiltered = false;
    state.restOfLine = "string";
    return tok;
  }
}
function mixin(stream, state) {
  if (stream.match(/^mixin\b/)) {
    state.javaScriptLine = true;
    return "keyword";
  }
}
function call(stream, state) {
  if (stream.match(/^\+([-\w]+)/)) {
    if (!stream.match(/^\( *[-\w]+ *=/, false)) {
      state.javaScriptArguments = true;
      state.javaScriptArgumentsDepth = 0;
    }
    return "variable";
  }
  if (stream.match("+#{", false)) {
    stream.next();
    state.mixinCallAfter = true;
    return interpolation(stream, state);
  }
}
function callArguments(stream, state) {
  if (state.mixinCallAfter) {
    state.mixinCallAfter = false;
    if (!stream.match(/^\( *[-\w]+ *=/, false)) {
      state.javaScriptArguments = true;
      state.javaScriptArgumentsDepth = 0;
    }
    return true;
  }
}
function conditional(stream, state) {
  if (stream.match(/^(if|unless|else if|else)\b/)) {
    state.javaScriptLine = true;
    return "keyword";
  }
}
function each(stream, state) {
  if (stream.match(/^(- *)?(each|for)\b/)) {
    state.isEach = true;
    return "keyword";
  }
}
function eachContinued(stream, state) {
  if (state.isEach) {
    if (stream.match(/^ in\b/)) {
      state.javaScriptLine = true;
      state.isEach = false;
      return "keyword";
    } else if (stream.sol() || stream.eol()) {
      state.isEach = false;
    } else if (stream.next()) {
      while (!stream.match(/^ in\b/, false) && stream.next()) {
      }
      return "variable";
    }
  }
}
function whileStatement(stream, state) {
  if (stream.match(/^while\b/)) {
    state.javaScriptLine = true;
    return "keyword";
  }
}
function tag(stream, state) {
  var captures;
  if (captures = stream.match(/^(\w(?:[-:\w]*\w)?)\/?/)) {
    state.lastTag = captures[1].toLowerCase();
    return "tag";
  }
}
function filter(stream, state) {
  if (stream.match(/^:([\w\-]+)/)) {
    setStringMode(stream, state);
    return "atom";
  }
}
function code(stream, state) {
  if (stream.match(/^(!?=|-)/)) {
    state.javaScriptLine = true;
    return "punctuation";
  }
}
function id2(stream) {
  if (stream.match(/^#([\w-]+)/)) {
    return "builtin";
  }
}
function className(stream) {
  if (stream.match(/^\.([\w-]+)/)) {
    return "className";
  }
}
function attrs(stream, state) {
  if (stream.peek() == "(") {
    stream.next();
    state.isAttrs = true;
    state.attrsNest = [];
    state.inAttributeName = true;
    state.attrValue = "";
    state.attributeIsType = false;
    return "punctuation";
  }
}
function attrsContinued(stream, state) {
  if (state.isAttrs) {
    if (ATTRS_NEST[stream.peek()]) {
      state.attrsNest.push(ATTRS_NEST[stream.peek()]);
    }
    if (state.attrsNest[state.attrsNest.length - 1] === stream.peek()) {
      state.attrsNest.pop();
    } else if (stream.eat(")")) {
      state.isAttrs = false;
      return "punctuation";
    }
    if (state.inAttributeName && stream.match(/^[^=,\)!]+/)) {
      if (stream.peek() === "=" || stream.peek() === "!") {
        state.inAttributeName = false;
        state.jsState = javascript2.startState(2);
        if (state.lastTag === "script" && stream.current().trim().toLowerCase() === "type") {
          state.attributeIsType = true;
        } else {
          state.attributeIsType = false;
        }
      }
      return "attribute";
    }
    var tok = javascript2.token(stream, state.jsState);
    if (state.attrsNest.length === 0 && (tok === "string" || tok === "variable" || tok === "keyword")) {
      try {
        Function("", "var x " + state.attrValue.replace(/,\s*$/, "").replace(/^!/, ""));
        state.inAttributeName = true;
        state.attrValue = "";
        stream.backUp(stream.current().length);
        return attrsContinued(stream, state);
      } catch (ex) {
      }
    }
    state.attrValue += stream.current();
    return tok || true;
  }
}
function attributesBlock(stream, state) {
  if (stream.match(/^&attributes\b/)) {
    state.javaScriptArguments = true;
    state.javaScriptArgumentsDepth = 0;
    return "keyword";
  }
}
function indent4(stream) {
  if (stream.sol() && stream.eatSpace()) {
    return "indent";
  }
}
function comment3(stream, state) {
  if (stream.match(/^ *\/\/(-)?([^\n]*)/)) {
    state.indentOf = stream.indentation();
    state.indentToken = "comment";
    return "comment";
  }
}
function colon3(stream) {
  if (stream.match(/^: */)) {
    return "colon";
  }
}
function text2(stream, state) {
  if (stream.match(/^(?:\| ?| )([^\n]+)/)) {
    return "string";
  }
  if (stream.match(/^(<[^\n]*)/, false)) {
    setStringMode(stream, state);
    stream.skipToEnd();
    return state.indentToken;
  }
}
function dot3(stream, state) {
  if (stream.eat(".")) {
    setStringMode(stream, state);
    return "dot";
  }
}
function fail(stream) {
  stream.next();
  return null;
}
function setStringMode(stream, state) {
  state.indentOf = stream.indentation();
  state.indentToken = "string";
}
function restOfLine(stream, state) {
  if (stream.sol()) {
    state.restOfLine = "";
  }
  if (state.restOfLine) {
    stream.skipToEnd();
    var tok = state.restOfLine;
    state.restOfLine = "";
    return tok;
  }
}
function startState(indentUnit2) {
  return new State(indentUnit2);
}
function copyState(state) {
  return state.copy();
}
function nextToken(stream, state) {
  var tok = restOfLine(stream, state) || interpolationContinued(stream, state) || includeFilteredContinued(stream, state) || eachContinued(stream, state) || attrsContinued(stream, state) || javaScript(stream, state) || javaScriptArguments(stream, state) || callArguments(stream, state) || yieldStatement(stream) || doctype(stream) || interpolation(stream, state) || caseStatement(stream, state) || when(stream, state) || defaultStatement(stream) || extendsStatement(stream, state) || append(stream, state) || prepend(stream, state) || block2(stream, state) || include2(stream, state) || includeFiltered(stream, state) || mixin(stream, state) || call(stream, state) || conditional(stream, state) || each(stream, state) || whileStatement(stream, state) || tag(stream, state) || filter(stream, state) || code(stream, state) || id2(stream) || className(stream) || attrs(stream, state) || attributesBlock(stream, state) || indent4(stream) || text2(stream, state) || comment3(stream, state) || colon3(stream) || dot3(stream, state) || fail(stream);
  return tok === true ? null : tok;
}
var ATTRS_NEST, State, pug;
var init_pug = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/pug.js"() {
    init_javascript();
    ATTRS_NEST = {
      "{": "}",
      "(": ")",
      "[": "]"
    };
    State = class _State {
      constructor(indentUnit2) {
        this.indentUnit = indentUnit2;
        this.javaScriptLine = false;
        this.javaScriptLineExcludesColon = false;
        this.javaScriptArguments = false;
        this.javaScriptArgumentsDepth = 0;
        this.isInterpolating = false;
        this.interpolationNesting = 0;
        this.jsState = javascript2.startState(indentUnit2);
        this.restOfLine = "";
        this.isIncludeFiltered = false;
        this.isEach = false;
        this.lastTag = "";
        this.isAttrs = false;
        this.attrsNest = [];
        this.inAttributeName = true;
        this.attributeIsType = false;
        this.attrValue = "";
        this.indentOf = Infinity;
        this.indentToken = "";
      }
      copy() {
        var res = new _State(this.indentUnit);
        res.javaScriptLine = this.javaScriptLine;
        res.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon;
        res.javaScriptArguments = this.javaScriptArguments;
        res.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth;
        res.isInterpolating = this.isInterpolating;
        res.interpolationNesting = this.interpolationNesting;
        res.jsState = (javascript2.copyState || defaultCopyState2)(this.jsState);
        res.restOfLine = this.restOfLine;
        res.isIncludeFiltered = this.isIncludeFiltered;
        res.isEach = this.isEach;
        res.lastTag = this.lastTag;
        res.isAttrs = this.isAttrs;
        res.attrsNest = this.attrsNest.slice();
        res.inAttributeName = this.inAttributeName;
        res.attributeIsType = this.attributeIsType;
        res.attrValue = this.attrValue;
        res.indentOf = this.indentOf;
        res.indentToken = this.indentToken;
        return res;
      }
    };
    pug = {
      startState,
      copyState,
      token: nextToken
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/puppet.js
var puppet_exports = {};
__export(puppet_exports, {
  puppet: () => puppet
});
function define(style2, string3) {
  var split = string3.split(" ");
  for (var i = 0; i < split.length; i++) {
    words13[split[i]] = style2;
  }
}
function tokenString13(stream, state) {
  var current, prev, found_var = false;
  while (!stream.eol() && (current = stream.next()) != state.pending) {
    if (current === "$" && prev != "\\" && state.pending == '"') {
      found_var = true;
      break;
    }
    prev = current;
  }
  if (found_var) {
    stream.backUp(1);
  }
  if (current == state.pending) {
    state.continueString = false;
  } else {
    state.continueString = true;
  }
  return "string";
}
function tokenize2(stream, state) {
  var word = stream.match(/[\w]+/, false);
  var attribute3 = stream.match(/(\s+)?\w+\s+=>.*/, false);
  var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
  var special_resource = stream.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, false);
  var ch2 = stream.next();
  if (ch2 === "$") {
    if (stream.match(variable_regex2)) {
      return state.continueString ? "variableName.special" : "variable";
    }
    return "error";
  }
  if (state.continueString) {
    stream.backUp(1);
    return tokenString13(stream, state);
  }
  if (state.inDefinition) {
    if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
      return "def";
    }
    stream.match(/\s+{/);
    state.inDefinition = false;
  }
  if (state.inInclude) {
    stream.match(/(\s+)?\S+(\s+)?/);
    state.inInclude = false;
    return "def";
  }
  if (stream.match(/(\s+)?\w+\(/)) {
    stream.backUp(1);
    return "def";
  }
  if (attribute3) {
    stream.match(/(\s+)?\w+/);
    return "tag";
  }
  if (word && words13.hasOwnProperty(word)) {
    stream.backUp(1);
    stream.match(/[\w]+/);
    if (stream.match(/\s+\S+\s+{/, false)) {
      state.inDefinition = true;
    }
    if (word == "include") {
      state.inInclude = true;
    }
    return words13[word];
  }
  if (/(^|\s+)[A-Z][\w:_]+/.test(word)) {
    stream.backUp(1);
    stream.match(/(^|\s+)[A-Z][\w:_]+/);
    return "def";
  }
  if (resource) {
    stream.match(/(\s+)?[\w:_]+/);
    return "def";
  }
  if (special_resource) {
    stream.match(/(\s+)?[@]{1,2}/);
    return "atom";
  }
  if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 == "'" || ch2 == '"') {
    state.pending = ch2;
    return tokenString13(stream, state);
  }
  if (ch2 == "{" || ch2 == "}") {
    return "bracket";
  }
  if (ch2 == "/") {
    stream.match(/^[^\/]*\//);
    return "string.special";
  }
  if (ch2.match(/[0-9]/)) {
    stream.eatWhile(/[0-9]+/);
    return "number";
  }
  if (ch2 == "=") {
    if (stream.peek() == ">") {
      stream.next();
    }
    return "operator";
  }
  stream.eatWhile(/[\w-]/);
  return null;
}
var words13, variable_regex2, puppet;
var init_puppet = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/puppet.js"() {
    words13 = {};
    variable_regex2 = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;
    define("keyword", "class define site node include import inherits");
    define("keyword", "case if else in and elsif default or");
    define("atom", "false true running present absent file directory undef");
    define("builtin", "action augeas burst chain computer cron destination dport exec file filebucket group host icmp iniface interface jump k5login limit log_level log_prefix macauthorization mailalias maillist mcx mount nagios_command nagios_contact nagios_contactgroup nagios_host nagios_hostdependency nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo nagios_servicegroup nagios_timeperiod name notify outiface package proto reject resources router schedule scheduled_task selboolean selmodule service source sport ssh_authorized_key sshkey stage state table tidy todest toports tosource user vlan yumrepo zfs zone zpool");
    puppet = {
      name: "puppet",
      startState: function() {
        var state = {};
        state.inDefinition = false;
        state.inInclude = false;
        state.continueString = false;
        state.pending = false;
        return state;
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return tokenize2(stream, state);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/q.js
var q_exports = {};
__export(q_exports, {
  q: () => q
});
function buildRE(w) {
  return new RegExp("^(" + w.join("|") + ")$");
}
function tokenBase26(stream, state) {
  var sol = stream.sol(), c2 = stream.next();
  curPunc5 = null;
  if (sol) {
    if (c2 == "/")
      return (state.tokenize = tokenLineComment2)(stream, state);
    else if (c2 == "\\") {
      if (stream.eol() || /\s/.test(stream.peek()))
        return stream.skipToEnd(), /^\\\s*$/.test(stream.current()) ? (state.tokenize = tokenCommentToEOF)(stream) : state.tokenize = tokenBase26, "comment";
      else
        return state.tokenize = tokenBase26, "builtin";
    }
  }
  if (/\s/.test(c2))
    return stream.peek() == "/" ? (stream.skipToEnd(), "comment") : "null";
  if (c2 == '"')
    return (state.tokenize = tokenString14)(stream, state);
  if (c2 == "`")
    return stream.eatWhile(/[A-Za-z\d_:\/.]/), "macroName";
  if ("." == c2 && /\d/.test(stream.peek()) || /\d/.test(c2)) {
    var t2 = null;
    stream.backUp(1);
    if (stream.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/) || stream.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/) || stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/) || stream.match(/^\d+[ptuv]{1}/))
      t2 = "temporal";
    else if (stream.match(/^0[NwW]{1}/) || stream.match(/^0x[\da-fA-F]*/) || stream.match(/^[01]+[b]{1}/) || stream.match(/^\d+[chijn]{1}/) || stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/))
      t2 = "number";
    return t2 && (!(c2 = stream.peek()) || E.test(c2)) ? t2 : (stream.next(), "error");
  }
  if (/[A-Za-z]|\./.test(c2))
    return stream.eatWhile(/[A-Za-z._\d]/), keywords28.test(stream.current()) ? "keyword" : "variable";
  if (/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c2))
    return null;
  if (/[{}\(\[\]\)]/.test(c2))
    return null;
  return "error";
}
function tokenLineComment2(stream, state) {
  return stream.skipToEnd(), /\/\s*$/.test(stream.current()) ? (state.tokenize = tokenBlockComment2)(stream, state) : state.tokenize = tokenBase26, "comment";
}
function tokenBlockComment2(stream, state) {
  var f = stream.sol() && stream.peek() == "\\";
  stream.skipToEnd();
  if (f && /^\\\s*$/.test(stream.current()))
    state.tokenize = tokenBase26;
  return "comment";
}
function tokenCommentToEOF(stream) {
  return stream.skipToEnd(), "comment";
}
function tokenString14(stream, state) {
  var escaped = false, next2, end2 = false;
  while (next2 = stream.next()) {
    if (next2 == '"' && !escaped) {
      end2 = true;
      break;
    }
    escaped = !escaped && next2 == "\\";
  }
  if (end2) state.tokenize = tokenBase26;
  return "string";
}
function pushContext7(state, type7, col) {
  state.context = { prev: state.context, indent: state.indent, col, type: type7 };
}
function popContext7(state) {
  state.indent = state.context.indent;
  state.context = state.context.prev;
}
var curPunc5, keywords28, E, q;
var init_q = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/q.js"() {
    keywords28 = buildRE(["abs", "acos", "aj", "aj0", "all", "and", "any", "asc", "asin", "asof", "atan", "attr", "avg", "avgs", "bin", "by", "ceiling", "cols", "cor", "cos", "count", "cov", "cross", "csv", "cut", "delete", "deltas", "desc", "dev", "differ", "distinct", "div", "do", "each", "ej", "enlist", "eval", "except", "exec", "exit", "exp", "fby", "fills", "first", "fkeys", "flip", "floor", "from", "get", "getenv", "group", "gtime", "hclose", "hcount", "hdel", "hopen", "hsym", "iasc", "idesc", "if", "ij", "in", "insert", "inter", "inv", "key", "keys", "last", "like", "list", "lj", "load", "log", "lower", "lsq", "ltime", "ltrim", "mavg", "max", "maxs", "mcount", "md5", "mdev", "med", "meta", "min", "mins", "mmax", "mmin", "mmu", "mod", "msum", "neg", "next", "not", "null", "or", "over", "parse", "peach", "pj", "plist", "prd", "prds", "prev", "prior", "rand", "rank", "ratios", "raze", "read0", "read1", "reciprocal", "reverse", "rload", "rotate", "rsave", "rtrim", "save", "scan", "select", "set", "setenv", "show", "signum", "sin", "sqrt", "ss", "ssr", "string", "sublist", "sum", "sums", "sv", "system", "tables", "tan", "til", "trim", "txf", "type", "uj", "ungroup", "union", "update", "upper", "upsert", "value", "var", "view", "views", "vs", "wavg", "where", "where", "while", "within", "wj", "wj1", "wsum", "xasc", "xbar", "xcol", "xcols", "xdesc", "xexp", "xgroup", "xkey", "xlog", "xprev", "xrank"]);
    E = /[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
    q = {
      name: "q",
      startState: function() {
        return {
          tokenize: tokenBase26,
          context: null,
          indent: 0,
          col: 0
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null)
            state.context.align = false;
          state.indent = stream.indentation();
        }
        var style2 = state.tokenize(stream, state);
        if (style2 != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
          state.context.align = true;
        }
        if (curPunc5 == "(") pushContext7(state, ")", stream.column());
        else if (curPunc5 == "[") pushContext7(state, "]", stream.column());
        else if (curPunc5 == "{") pushContext7(state, "}", stream.column());
        else if (/[\]\}\)]/.test(curPunc5)) {
          while (state.context && state.context.type == "pattern") popContext7(state);
          if (state.context && curPunc5 == state.context.type) popContext7(state);
        } else if (curPunc5 == "." && state.context && state.context.type == "pattern") popContext7(state);
        else if (/atom|string|variable/.test(style2) && state.context) {
          if (/[\}\]]/.test(state.context.type))
            pushContext7(state, "pattern", stream.column());
          else if (state.context.type == "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar))
          while (context && context.type == "pattern") context = context.prev;
        var closing4 = context && firstChar == context.type;
        if (!context)
          return 0;
        else if (context.type == "pattern")
          return context.col;
        else if (context.align)
          return context.col + (closing4 ? 0 : 1);
        else
          return context.indent + (closing4 ? 0 : cx2.unit);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/r.js
var r_exports = {};
__export(r_exports, {
  r: () => r
});
function wordObj2(words22) {
  var res = {};
  for (var i = 0; i < words22.length; ++i) res[words22[i]] = true;
  return res;
}
function tokenBase27(stream, state) {
  curPunc6 = null;
  var ch2 = stream.next();
  if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == "0" && stream.eat("x")) {
    stream.eatWhile(/[\da-f]/i);
    return "number";
  } else if (ch2 == "." && stream.eat(/\d/)) {
    stream.match(/\d*(?:e[+\-]?\d+)?/);
    return "number";
  } else if (/\d/.test(ch2)) {
    stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
    return "number";
  } else if (ch2 == "'" || ch2 == '"') {
    state.tokenize = tokenString15(ch2);
    return "string";
  } else if (ch2 == "`") {
    stream.match(/[^`]+`/);
    return "string.special";
  } else if (ch2 == "." && stream.match(/.(?:[.]|\d+)/)) {
    return "keyword";
  } else if (/[a-zA-Z\.]/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    var word = stream.current();
    if (atoms11.propertyIsEnumerable(word)) return "atom";
    if (keywords29.propertyIsEnumerable(word)) {
      if (blockkeywords.propertyIsEnumerable(word) && !stream.match(/\s*if(\s+|$)/, false))
        curPunc6 = "block";
      return "keyword";
    }
    if (builtins9.propertyIsEnumerable(word)) return "builtin";
    return "variable";
  } else if (ch2 == "%") {
    if (stream.skipTo("%")) stream.next();
    return "variableName.special";
  } else if (ch2 == "<" && stream.eat("-") || ch2 == "<" && stream.match("<-") || ch2 == "-" && stream.match(/>>?/)) {
    return "operator";
  } else if (ch2 == "=" && state.ctx.argList) {
    return "operator";
  } else if (opChars.test(ch2)) {
    if (ch2 == "$") return "operator";
    stream.eatWhile(opChars);
    return "operator";
  } else if (/[\(\){}\[\];]/.test(ch2)) {
    curPunc6 = ch2;
    if (ch2 == ";") return "punctuation";
    return null;
  } else {
    return null;
  }
}
function tokenString15(quote4) {
  return function(stream, state) {
    if (stream.eat("\\")) {
      var ch2 = stream.next();
      if (ch2 == "x") stream.match(/^[a-f0-9]{2}/i);
      else if ((ch2 == "u" || ch2 == "U") && stream.eat("{") && stream.skipTo("}")) stream.next();
      else if (ch2 == "u") stream.match(/^[a-f0-9]{4}/i);
      else if (ch2 == "U") stream.match(/^[a-f0-9]{8}/i);
      else if (/[0-7]/.test(ch2)) stream.match(/^[0-7]{1,2}/);
      return "string.special";
    } else {
      var next2;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote4) {
          state.tokenize = tokenBase27;
          break;
        }
        if (next2 == "\\") {
          stream.backUp(1);
          break;
        }
      }
      return "string";
    }
  };
}
function push(state, type7, stream) {
  state.ctx = {
    type: type7,
    indent: state.indent,
    flags: 0,
    column: stream.column(),
    prev: state.ctx
  };
}
function setFlag(state, flag2) {
  var ctx = state.ctx;
  state.ctx = {
    type: ctx.type,
    indent: ctx.indent,
    flags: ctx.flags | flag2,
    column: ctx.column,
    prev: ctx.prev
  };
}
function pop(state) {
  state.indent = state.ctx.indent;
  state.ctx = state.ctx.prev;
}
var commonAtoms, commonBuiltins2, commonKeywords4, commonBlockKeywords, atoms11, builtins9, keywords29, blockkeywords, opChars, curPunc6, ALIGN_YES, ALIGN_NO, BRACELESS, r;
var init_r = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/r.js"() {
    commonAtoms = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
    commonBuiltins2 = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
    commonKeywords4 = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
    commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];
    atoms11 = wordObj2(commonAtoms);
    builtins9 = wordObj2(commonBuiltins2);
    keywords29 = wordObj2(commonKeywords4);
    blockkeywords = wordObj2(commonBlockKeywords);
    opChars = /[+\-*\/^<>=!&|~$:]/;
    ALIGN_YES = 1;
    ALIGN_NO = 2;
    BRACELESS = 4;
    r = {
      name: "r",
      startState: function(indentUnit2) {
        return {
          tokenize: tokenBase27,
          ctx: {
            type: "top",
            indent: -indentUnit2,
            flags: ALIGN_NO
          },
          indent: 0,
          afterIdent: false
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;
          if (state.ctx.flags & BRACELESS) pop(state);
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        if (style2 != "comment" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES);
        if ((curPunc6 == ";" || curPunc6 == "{" || curPunc6 == "}") && state.ctx.type == "block") pop(state);
        if (curPunc6 == "{") push(state, "}", stream);
        else if (curPunc6 == "(") {
          push(state, ")", stream);
          if (state.afterIdent) state.ctx.argList = true;
        } else if (curPunc6 == "[") push(state, "]", stream);
        else if (curPunc6 == "block") push(state, "block", stream);
        else if (curPunc6 == state.ctx.type) pop(state);
        else if (state.ctx.type == "block" && style2 != "comment") setFlag(state, BRACELESS);
        state.afterIdent = style2 == "variable" || style2 == "keyword";
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase27) return 0;
        var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx, closing4 = firstChar == ctx.type;
        if (ctx.flags & BRACELESS) ctx = ctx.prev;
        if (ctx.type == "block") return ctx.indent + (firstChar == "{" ? 0 : cx2.unit);
        else if (ctx.flags & ALIGN_YES) return ctx.column + (closing4 ? 0 : 1);
        else return ctx.indent + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        wordChars: ".",
        commentTokens: { line: "#" },
        autocomplete: commonAtoms.concat(commonBuiltins2, commonKeywords4)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/rpm.js
var rpm_exports = {};
__export(rpm_exports, {
  rpmChanges: () => rpmChanges,
  rpmSpec: () => rpmSpec
});
var headerSeparator, headerLine, simpleEmail, rpmChanges, arch, preamble, section, control_flow_complex, control_flow_simple, operators6, rpmSpec;
var init_rpm = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/rpm.js"() {
    headerSeparator = /^-+$/;
    headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
    simpleEmail = /^[\w+.-]+@[\w.-]+/;
    rpmChanges = {
      name: "rpmchanges",
      token: function(stream) {
        if (stream.sol()) {
          if (stream.match(headerSeparator)) {
            return "tag";
          }
          if (stream.match(headerLine)) {
            return "tag";
          }
        }
        if (stream.match(simpleEmail)) {
          return "string";
        }
        stream.next();
        return null;
      }
    };
    arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;
    preamble = /^[a-zA-Z0-9()]+:/;
    section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
    control_flow_complex = /^%(ifnarch|ifarch|if)/;
    control_flow_simple = /^%(else|endif)/;
    operators6 = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/;
    rpmSpec = {
      name: "rpmspec",
      startState: function() {
        return {
          controlFlow: false,
          macroParameters: false,
          section: false
        };
      },
      token: function(stream, state) {
        var ch2 = stream.peek();
        if (ch2 == "#") {
          stream.skipToEnd();
          return "comment";
        }
        if (stream.sol()) {
          if (stream.match(preamble)) {
            return "header";
          }
          if (stream.match(section)) {
            return "atom";
          }
        }
        if (stream.match(/^\$\w+/)) {
          return "def";
        }
        if (stream.match(/^\$\{\w+\}/)) {
          return "def";
        }
        if (stream.match(control_flow_simple)) {
          return "keyword";
        }
        if (stream.match(control_flow_complex)) {
          state.controlFlow = true;
          return "keyword";
        }
        if (state.controlFlow) {
          if (stream.match(operators6)) {
            return "operator";
          }
          if (stream.match(/^(\d+)/)) {
            return "number";
          }
          if (stream.eol()) {
            state.controlFlow = false;
          }
        }
        if (stream.match(arch)) {
          if (stream.eol()) {
            state.controlFlow = false;
          }
          return "number";
        }
        if (stream.match(/^%[\w]+/)) {
          if (stream.match("(")) {
            state.macroParameters = true;
          }
          return "keyword";
        }
        if (state.macroParameters) {
          if (stream.match(/^\d+/)) {
            return "number";
          }
          if (stream.match(")")) {
            state.macroParameters = false;
            return "keyword";
          }
        }
        if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
          if (stream.eol()) {
            state.controlFlow = false;
          }
          return "def";
        }
        stream.next();
        return null;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/ruby.js
var ruby_exports = {};
__export(ruby_exports, {
  ruby: () => ruby
});
function wordObj3(words22) {
  var o = {};
  for (var i = 0, e = words22.length; i < e; ++i) o[words22[i]] = true;
  return o;
}
function chain7(newtok, stream, state) {
  state.tokenize.push(newtok);
  return newtok(stream, state);
}
function tokenBase28(stream, state) {
  if (stream.sol() && stream.match("=begin") && stream.eol()) {
    state.tokenize.push(readBlockComment);
    return "comment";
  }
  if (stream.eatSpace()) return null;
  var ch2 = stream.next(), m;
  if (ch2 == "`" || ch2 == "'" || ch2 == '"') {
    return chain7(readQuoted3(ch2, "string", ch2 == '"' || ch2 == "`"), stream, state);
  } else if (ch2 == "/") {
    if (regexpAhead(stream))
      return chain7(readQuoted3(ch2, "string.special", true), stream, state);
    else
      return "operator";
  } else if (ch2 == "%") {
    var style2 = "string", embed = true;
    if (stream.eat("s")) style2 = "atom";
    else if (stream.eat(/[WQ]/)) style2 = "string";
    else if (stream.eat(/[r]/)) style2 = "string.special";
    else if (stream.eat(/[wxq]/)) {
      style2 = "string";
      embed = false;
    }
    var delim = stream.eat(/[^\w\s=]/);
    if (!delim) return "operator";
    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];
    return chain7(readQuoted3(delim, style2, embed, true), stream, state);
  } else if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
    return chain7(readHereDoc(m[2], m[1]), stream, state);
  } else if (ch2 == "0") {
    if (stream.eat("x")) stream.eatWhile(/[\da-fA-F]/);
    else if (stream.eat("b")) stream.eatWhile(/[01]/);
    else stream.eatWhile(/[0-7]/);
    return "number";
  } else if (/\d/.test(ch2)) {
    stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
    return "number";
  } else if (ch2 == "?") {
    while (stream.match(/^\\[CM]-/)) {
    }
    if (stream.eat("\\")) stream.eatWhile(/\w/);
    else stream.next();
    return "string";
  } else if (ch2 == ":") {
    if (stream.eat("'")) return chain7(readQuoted3("'", "atom", false), stream, state);
    if (stream.eat('"')) return chain7(readQuoted3('"', "atom", true), stream, state);
    if (stream.eat(/[\<\>]/)) {
      stream.eat(/[\<\>]/);
      return "atom";
    }
    if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
      return "atom";
    }
    if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
      stream.eatWhile(/[\w$\xa1-\uffff]/);
      stream.eat(/[\?\!\=]/);
      return "atom";
    }
    return "operator";
  } else if (ch2 == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
    stream.eat("@");
    stream.eatWhile(/[\w\xa1-\uffff]/);
    return "propertyName";
  } else if (ch2 == "$") {
    if (stream.eat(/[a-zA-Z_]/)) {
      stream.eatWhile(/[\w]/);
    } else if (stream.eat(/\d/)) {
      stream.eat(/\d/);
    } else {
      stream.next();
    }
    return "variableName.special";
  } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch2)) {
    stream.eatWhile(/[\w\xa1-\uffff]/);
    stream.eat(/[\?\!]/);
    if (stream.eat(":")) return "atom";
    return "variable";
  } else if (ch2 == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
    curPunc7 = "|";
    return null;
  } else if (/[\(\)\[\]{}\\;]/.test(ch2)) {
    curPunc7 = ch2;
    return null;
  } else if (ch2 == "-" && stream.eat(">")) {
    return "operator";
  } else if (/[=+\-\/*:\.^%<>~|]/.test(ch2)) {
    var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
    if (ch2 == "." && !more) curPunc7 = ".";
    return "operator";
  } else {
    return null;
  }
}
function regexpAhead(stream) {
  var start2 = stream.pos, depth = 0, next2, found = false, escaped = false;
  while ((next2 = stream.next()) != null) {
    if (!escaped) {
      if ("[{(".indexOf(next2) > -1) {
        depth++;
      } else if ("]})".indexOf(next2) > -1) {
        depth--;
        if (depth < 0) break;
      } else if (next2 == "/" && depth == 0) {
        found = true;
        break;
      }
      escaped = next2 == "\\";
    } else {
      escaped = false;
    }
  }
  stream.backUp(stream.pos - start2);
  return found;
}
function tokenBaseUntilBrace2(depth) {
  if (!depth) depth = 1;
  return function(stream, state) {
    if (stream.peek() == "}") {
      if (depth == 1) {
        state.tokenize.pop();
        return state.tokenize[state.tokenize.length - 1](stream, state);
      } else {
        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace2(depth - 1);
      }
    } else if (stream.peek() == "{") {
      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace2(depth + 1);
    }
    return tokenBase28(stream, state);
  };
}
function tokenBaseOnce() {
  var alreadyCalled = false;
  return function(stream, state) {
    if (alreadyCalled) {
      state.tokenize.pop();
      return state.tokenize[state.tokenize.length - 1](stream, state);
    }
    alreadyCalled = true;
    return tokenBase28(stream, state);
  };
}
function readQuoted3(quote4, style2, embed, unescaped) {
  return function(stream, state) {
    var escaped = false, ch2;
    if (state.context.type === "read-quoted-paused") {
      state.context = state.context.prev;
      stream.eat("}");
    }
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && (unescaped || !escaped)) {
        state.tokenize.pop();
        break;
      }
      if (embed && ch2 == "#" && !escaped) {
        if (stream.eat("{")) {
          if (quote4 == "}") {
            state.context = { prev: state.context, type: "read-quoted-paused" };
          }
          state.tokenize.push(tokenBaseUntilBrace2());
          break;
        } else if (/[@\$]/.test(stream.peek())) {
          state.tokenize.push(tokenBaseOnce());
          break;
        }
      }
      escaped = !escaped && ch2 == "\\";
    }
    return style2;
  };
}
function readHereDoc(phrase2, mayIndent) {
  return function(stream, state) {
    if (mayIndent) stream.eatSpace();
    if (stream.match(phrase2)) state.tokenize.pop();
    else stream.skipToEnd();
    return "string";
  };
}
function readBlockComment(stream, state) {
  if (stream.sol() && stream.match("=end") && stream.eol())
    state.tokenize.pop();
  stream.skipToEnd();
  return "comment";
}
var keywordList, keywords30, indentWords, dedentWords, opening, closing2, curPunc7, ruby;
var init_ruby = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/ruby.js"() {
    keywordList = [
      "alias",
      "and",
      "BEGIN",
      "begin",
      "break",
      "case",
      "class",
      "def",
      "defined?",
      "do",
      "else",
      "elsif",
      "END",
      "end",
      "ensure",
      "false",
      "for",
      "if",
      "in",
      "module",
      "next",
      "not",
      "or",
      "redo",
      "rescue",
      "retry",
      "return",
      "self",
      "super",
      "then",
      "true",
      "undef",
      "unless",
      "until",
      "when",
      "while",
      "yield",
      "nil",
      "raise",
      "throw",
      "catch",
      "fail",
      "loop",
      "callcc",
      "caller",
      "lambda",
      "proc",
      "public",
      "protected",
      "private",
      "require",
      "load",
      "require_relative",
      "extend",
      "autoload",
      "__END__",
      "__FILE__",
      "__LINE__",
      "__dir__"
    ];
    keywords30 = wordObj3(keywordList);
    indentWords = wordObj3([
      "def",
      "class",
      "case",
      "for",
      "while",
      "until",
      "module",
      "catch",
      "loop",
      "proc",
      "begin"
    ]);
    dedentWords = wordObj3(["end", "until"]);
    opening = { "[": "]", "{": "}", "(": ")" };
    closing2 = { "]": "[", "}": "{", ")": "(" };
    ruby = {
      name: "ruby",
      startState: function(indentUnit2) {
        return {
          tokenize: [tokenBase28],
          indented: 0,
          context: { type: "top", indented: -indentUnit2 },
          continuedLine: false,
          lastTok: null,
          varList: false
        };
      },
      token: function(stream, state) {
        curPunc7 = null;
        if (stream.sol()) state.indented = stream.indentation();
        var style2 = state.tokenize[state.tokenize.length - 1](stream, state), kwtype;
        var thisTok = curPunc7;
        if (style2 == "variable") {
          var word = stream.current();
          style2 = state.lastTok == "." ? "property" : keywords30.propertyIsEnumerable(stream.current()) ? "keyword" : /^[A-Z]/.test(word) ? "tag" : state.lastTok == "def" || state.lastTok == "class" || state.varList ? "def" : "variable";
          if (style2 == "keyword") {
            thisTok = word;
            if (indentWords.propertyIsEnumerable(word)) kwtype = "indent";
            else if (dedentWords.propertyIsEnumerable(word)) kwtype = "dedent";
            else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())
              kwtype = "indent";
            else if (word == "do" && state.context.indented < state.indented)
              kwtype = "indent";
          }
        }
        if (curPunc7 || style2 && style2 != "comment") state.lastTok = thisTok;
        if (curPunc7 == "|") state.varList = !state.varList;
        if (kwtype == "indent" || /[\(\[\{]/.test(curPunc7))
          state.context = { prev: state.context, type: curPunc7 || style2, indented: state.indented };
        else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc7)) && state.context.prev)
          state.context = state.context.prev;
        if (stream.eol())
          state.continuedLine = curPunc7 == "\\" || style2 == "operator";
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize[state.tokenize.length - 1] != tokenBase28) return null;
        var firstChar = textAfter && textAfter.charAt(0);
        var ct = state.context;
        var closed = ct.type == closing2[firstChar] || ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
        return ct.indented + (closed ? 0 : cx2.unit) + (state.continuedLine ? cx2.unit : 0);
      },
      languageData: {
        indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
        commentTokens: { line: "#" },
        autocomplete: keywordList
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/sas.js
var sas_exports = {};
__export(sas_exports, {
  sas: () => sas
});
function define2(style2, string3, context) {
  if (context) {
    var split = string3.split(" ");
    for (var i = 0; i < split.length; i++) {
      words14[split[i]] = { style: style2, state: context };
    }
  }
}
function tokenize3(stream, state) {
  var ch2 = stream.next();
  if (ch2 === "/" && stream.eat("*")) {
    state.continueComment = true;
    return "comment";
  } else if (state.continueComment === true) {
    if (ch2 === "*" && stream.peek() === "/") {
      stream.next();
      state.continueComment = false;
    } else if (stream.skipTo("*")) {
      stream.skipTo("*");
      stream.next();
      if (stream.eat("/"))
        state.continueComment = false;
    } else {
      stream.skipToEnd();
    }
    return "comment";
  }
  if (ch2 == "*" && stream.column() == stream.indentation()) {
    stream.skipToEnd();
    return "comment";
  }
  var doubleOperator = ch2 + stream.peek();
  if ((ch2 === '"' || ch2 === "'") && !state.continueString) {
    state.continueString = ch2;
    return "string";
  } else if (state.continueString) {
    if (state.continueString == ch2) {
      state.continueString = null;
    } else if (stream.skipTo(state.continueString)) {
      stream.next();
      state.continueString = null;
    } else {
      stream.skipToEnd();
    }
    return "string";
  } else if (state.continueString !== null && stream.eol()) {
    stream.skipTo(state.continueString) || stream.skipToEnd();
    return "string";
  } else if (/[\d\.]/.test(ch2)) {
    if (ch2 === ".")
      stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
    else if (ch2 === "0")
      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
    else
      stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
    return "number";
  } else if (isDoubleOperatorChar2.test(ch2 + stream.peek())) {
    stream.next();
    return "operator";
  } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
    stream.next();
    if (stream.peek() === " ")
      return isDoubleOperatorSym[doubleOperator.toLowerCase()];
  } else if (isSingleOperatorChar2.test(ch2)) {
    return "operator";
  }
  var word;
  if (stream.match(/[%&;\w]+/, false) != null) {
    word = ch2 + stream.match(/[%&;\w]+/, true);
    if (/&/.test(word)) return "variable";
  } else {
    word = ch2;
  }
  if (state.nextword) {
    stream.match(/[\w]+/);
    if (stream.peek() === ".") stream.skipTo(" ");
    state.nextword = false;
    return "variableName.special";
  }
  word = word.toLowerCase();
  if (state.inDataStep) {
    if (word === "run;" || stream.match(/run\s;/)) {
      state.inDataStep = false;
      return "builtin";
    }
    if (word && stream.next() === ".") {
      if (/\w/.test(stream.peek())) return "variableName.special";
      else return "variable";
    }
    if (word && words14.hasOwnProperty(word) && (words14[word].state.indexOf("inDataStep") !== -1 || words14[word].state.indexOf("ALL") !== -1)) {
      if (stream.start < stream.pos)
        stream.backUp(stream.pos - stream.start);
      for (var i = 0; i < word.length; ++i) stream.next();
      return words14[word].style;
    }
  }
  if (state.inProc) {
    if (word === "run;" || word === "quit;") {
      state.inProc = false;
      return "builtin";
    }
    if (word && words14.hasOwnProperty(word) && (words14[word].state.indexOf("inProc") !== -1 || words14[word].state.indexOf("ALL") !== -1)) {
      stream.match(/[\w]+/);
      return words14[word].style;
    }
  }
  if (state.inMacro) {
    if (word === "%mend") {
      if (stream.peek() === ";") stream.next();
      state.inMacro = false;
      return "builtin";
    }
    if (word && words14.hasOwnProperty(word) && (words14[word].state.indexOf("inMacro") !== -1 || words14[word].state.indexOf("ALL") !== -1)) {
      stream.match(/[\w]+/);
      return words14[word].style;
    }
    return "atom";
  }
  if (word && words14.hasOwnProperty(word)) {
    stream.backUp(1);
    stream.match(/[\w]+/);
    if (word === "data" && /=/.test(stream.peek()) === false) {
      state.inDataStep = true;
      state.nextword = true;
      return "builtin";
    }
    if (word === "proc") {
      state.inProc = true;
      state.nextword = true;
      return "builtin";
    }
    if (word === "%macro") {
      state.inMacro = true;
      state.nextword = true;
      return "builtin";
    }
    if (/title[1-9]/.test(word)) return "def";
    if (word === "footnote") {
      stream.eat(/[1-9]/);
      return "def";
    }
    if (state.inDataStep === true && words14[word].state.indexOf("inDataStep") !== -1)
      return words14[word].style;
    if (state.inProc === true && words14[word].state.indexOf("inProc") !== -1)
      return words14[word].style;
    if (state.inMacro === true && words14[word].state.indexOf("inMacro") !== -1)
      return words14[word].style;
    if (words14[word].state.indexOf("ALL") !== -1)
      return words14[word].style;
    return null;
  }
  return null;
}
var words14, isDoubleOperatorSym, isDoubleOperatorChar2, isSingleOperatorChar2, sas;
var init_sas = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/sas.js"() {
    words14 = {};
    isDoubleOperatorSym = {
      eq: "operator",
      lt: "operator",
      le: "operator",
      gt: "operator",
      ge: "operator",
      "in": "operator",
      ne: "operator",
      or: "operator"
    };
    isDoubleOperatorChar2 = /(<=|>=|!=|<>)/;
    isSingleOperatorChar2 = /[=\(:\),{}.*<>+\-\/^\[\]]/;
    define2("def", "stack pgm view source debug nesting nolist", ["inDataStep"]);
    define2("def", "if while until for do do; end end; then else cancel", ["inDataStep"]);
    define2("def", "label format _n_ _error_", ["inDataStep"]);
    define2("def", "ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME", ["inDataStep"]);
    define2("def", "filevar finfo finv fipname fipnamel fipstate first firstobs floor", ["inDataStep"]);
    define2("def", "varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday", ["inDataStep"]);
    define2("def", "zipfips zipname zipnamel zipstate", ["inDataStep"]);
    define2("def", "put putc putn", ["inDataStep"]);
    define2("builtin", "data run", ["inDataStep"]);
    define2("def", "data", ["inProc"]);
    define2("def", "%if %end %end; %else %else; %do %do; %then", ["inMacro"]);
    define2("builtin", "proc run; quit; libname filename %macro %mend option options", ["ALL"]);
    define2("def", "footnote title libname ods", ["ALL"]);
    define2("def", "%let %put %global %sysfunc %eval ", ["ALL"]);
    define2("variable", "&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext", ["ALL"]);
    define2("def", "source2 nosource2 page pageno pagesize", ["ALL"]);
    define2("def", "_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max", ["inDataStep", "inProc"]);
    define2("operator", "and not ", ["inDataStep", "inProc"]);
    sas = {
      name: "sas",
      startState: function() {
        return {
          inDataStep: false,
          inProc: false,
          inMacro: false,
          nextword: false,
          continueString: null,
          continueComment: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return tokenize3(stream, state);
      },
      languageData: {
        commentTokens: { block: { open: "/*", close: "*/" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/scheme.js
var scheme_exports = {};
__export(scheme_exports, {
  scheme: () => scheme
});
function makeKeywords2(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function stateStack(indent7, type7, prev) {
  this.indent = indent7;
  this.type = type7;
  this.prev = prev;
}
function pushStack(state, indent7, type7) {
  state.indentStack = new stateStack(indent7, type7, state.indentStack);
}
function popStack(state) {
  state.indentStack = state.indentStack.prev;
}
function isBinaryNumber(stream) {
  return stream.match(binaryMatcher);
}
function isOctalNumber(stream) {
  return stream.match(octalMatcher);
}
function isDecimalNumber(stream, backup) {
  if (backup === true) {
    stream.backUp(1);
  }
  return stream.match(decimalMatcher);
}
function isHexNumber(stream) {
  return stream.match(hexMatcher);
}
function processEscapedSequence(stream, options) {
  var next2, escaped = false;
  while ((next2 = stream.next()) != null) {
    if (next2 == options.token && !escaped) {
      options.state.mode = false;
      break;
    }
    escaped = !escaped && next2 == "\\";
  }
}
var BUILTIN2, COMMENT2, STRING2, SYMBOL, ATOM2, NUMBER2, BRACKET, INDENT_WORD_SKIP, keywords31, indentKeys, binaryMatcher, octalMatcher, hexMatcher, decimalMatcher, scheme;
var init_scheme = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/scheme.js"() {
    BUILTIN2 = "builtin";
    COMMENT2 = "comment";
    STRING2 = "string";
    SYMBOL = "symbol";
    ATOM2 = "atom";
    NUMBER2 = "number";
    BRACKET = "bracket";
    INDENT_WORD_SKIP = 2;
    keywords31 = makeKeywords2("\u03BB case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");
    indentKeys = makeKeywords2("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless");
    binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);
    octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);
    hexMatcher = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);
    decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);
    scheme = {
      name: "scheme",
      startState: function() {
        return {
          indentStack: null,
          indentation: 0,
          mode: false,
          sExprComment: false,
          sExprQuote: false
        };
      },
      token: function(stream, state) {
        if (state.indentStack == null && stream.sol()) {
          state.indentation = stream.indentation();
        }
        if (stream.eatSpace()) {
          return null;
        }
        var returnType = null;
        switch (state.mode) {
          case "string":
            processEscapedSequence(stream, {
              token: '"',
              state
            });
            returnType = STRING2;
            break;
          case "symbol":
            processEscapedSequence(stream, {
              token: "|",
              state
            });
            returnType = SYMBOL;
            break;
          case "comment":
            var next2, maybeEnd = false;
            while ((next2 = stream.next()) != null) {
              if (next2 == "#" && maybeEnd) {
                state.mode = false;
                break;
              }
              maybeEnd = next2 == "|";
            }
            returnType = COMMENT2;
            break;
          case "s-expr-comment":
            state.mode = false;
            if (stream.peek() == "(" || stream.peek() == "[") {
              state.sExprComment = 0;
            } else {
              stream.eatWhile(/[^\s\(\)\[\]]/);
              returnType = COMMENT2;
              break;
            }
          default:
            var ch2 = stream.next();
            if (ch2 == '"') {
              state.mode = "string";
              returnType = STRING2;
            } else if (ch2 == "'") {
              if (stream.peek() == "(" || stream.peek() == "[") {
                if (typeof state.sExprQuote != "number") {
                  state.sExprQuote = 0;
                }
                returnType = ATOM2;
              } else {
                stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
                returnType = ATOM2;
              }
            } else if (ch2 == "|") {
              state.mode = "symbol";
              returnType = SYMBOL;
            } else if (ch2 == "#") {
              if (stream.eat("|")) {
                state.mode = "comment";
                returnType = COMMENT2;
              } else if (stream.eat(/[tf]/i)) {
                returnType = ATOM2;
              } else if (stream.eat(";")) {
                state.mode = "s-expr-comment";
                returnType = COMMENT2;
              } else {
                var numTest = null, hasExactness = false, hasRadix = true;
                if (stream.eat(/[ei]/i)) {
                  hasExactness = true;
                } else {
                  stream.backUp(1);
                }
                if (stream.match(/^#b/i)) {
                  numTest = isBinaryNumber;
                } else if (stream.match(/^#o/i)) {
                  numTest = isOctalNumber;
                } else if (stream.match(/^#x/i)) {
                  numTest = isHexNumber;
                } else if (stream.match(/^#d/i)) {
                  numTest = isDecimalNumber;
                } else if (stream.match(/^[-+0-9.]/, false)) {
                  hasRadix = false;
                  numTest = isDecimalNumber;
                } else if (!hasExactness) {
                  stream.eat("#");
                }
                if (numTest != null) {
                  if (hasRadix && !hasExactness) {
                    stream.match(/^#[ei]/i);
                  }
                  if (numTest(stream))
                    returnType = NUMBER2;
                }
              }
            } else if (/^[-+0-9.]/.test(ch2) && isDecimalNumber(stream, true)) {
              returnType = NUMBER2;
            } else if (ch2 == ";") {
              stream.skipToEnd();
              returnType = COMMENT2;
            } else if (ch2 == "(" || ch2 == "[") {
              var keyWord = "";
              var indentTemp = stream.column(), letter;
              while ((letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null) {
                keyWord += letter;
              }
              if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {
                pushStack(state, indentTemp + INDENT_WORD_SKIP, ch2);
              } else {
                stream.eatSpace();
                if (stream.eol() || stream.peek() == ";") {
                  pushStack(state, indentTemp + 1, ch2);
                } else {
                  pushStack(state, indentTemp + stream.current().length, ch2);
                }
              }
              stream.backUp(stream.current().length - 1);
              if (typeof state.sExprComment == "number") state.sExprComment++;
              if (typeof state.sExprQuote == "number") state.sExprQuote++;
              returnType = BRACKET;
            } else if (ch2 == ")" || ch2 == "]") {
              returnType = BRACKET;
              if (state.indentStack != null && state.indentStack.type == (ch2 == ")" ? "(" : "[")) {
                popStack(state);
                if (typeof state.sExprComment == "number") {
                  if (--state.sExprComment == 0) {
                    returnType = COMMENT2;
                    state.sExprComment = false;
                  }
                }
                if (typeof state.sExprQuote == "number") {
                  if (--state.sExprQuote == 0) {
                    returnType = ATOM2;
                    state.sExprQuote = false;
                  }
                }
              }
            } else {
              stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
              if (keywords31 && keywords31.propertyIsEnumerable(stream.current())) {
                returnType = BUILTIN2;
              } else returnType = "variable";
            }
        }
        return typeof state.sExprComment == "number" ? COMMENT2 : typeof state.sExprQuote == "number" ? ATOM2 : returnType;
      },
      indent: function(state) {
        if (state.indentStack == null) return state.indentation;
        return state.indentStack.indent;
      },
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", '"'] },
        commentTokens: { line: ";;" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/shell.js
var shell_exports = {};
__export(shell_exports, {
  shell: () => shell
});
function define3(style2, dict) {
  for (var i = 0; i < dict.length; i++) {
    words15[dict[i]] = style2;
  }
}
function tokenBase29(stream, state) {
  if (stream.eatSpace()) return null;
  var sol = stream.sol();
  var ch2 = stream.next();
  if (ch2 === "\\") {
    stream.next();
    return null;
  }
  if (ch2 === "'" || ch2 === '"' || ch2 === "`") {
    state.tokens.unshift(tokenString16(ch2, ch2 === "`" ? "quote" : "string"));
    return tokenize4(stream, state);
  }
  if (ch2 === "#") {
    if (sol && stream.eat("!")) {
      stream.skipToEnd();
      return "meta";
    }
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 === "$") {
    state.tokens.unshift(tokenDollar);
    return tokenize4(stream, state);
  }
  if (ch2 === "+" || ch2 === "=") {
    return "operator";
  }
  if (ch2 === "-") {
    stream.eat("-");
    stream.eatWhile(/\w/);
    return "attribute";
  }
  if (ch2 == "<") {
    if (stream.match("<<")) return "operator";
    var heredoc = stream.match(/^<-?\s*(?:['"]([^'"]*)['"]|([^'"\s]*))/);
    if (heredoc) {
      state.tokens.unshift(tokenHeredoc(heredoc[1] || heredoc[2]));
      return "string.special";
    }
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/\d/);
    if (stream.eol() || !/\w/.test(stream.peek())) {
      return "number";
    }
  }
  stream.eatWhile(/[\w-]/);
  var cur2 = stream.current();
  if (stream.peek() === "=" && /\w+/.test(cur2)) return "def";
  return words15.hasOwnProperty(cur2) ? words15[cur2] : null;
}
function tokenString16(quote4, style2) {
  var close = quote4 == "(" ? ")" : quote4 == "{" ? "}" : quote4;
  return function(stream, state) {
    var next2, escaped = false;
    while ((next2 = stream.next()) != null) {
      if (next2 === close && !escaped) {
        state.tokens.shift();
        break;
      } else if (next2 === "$" && !escaped && quote4 !== "'" && stream.peek() != close) {
        escaped = true;
        stream.backUp(1);
        state.tokens.unshift(tokenDollar);
        break;
      } else if (!escaped && quote4 !== close && next2 === quote4) {
        state.tokens.unshift(tokenString16(quote4, style2));
        return tokenize4(stream, state);
      } else if (!escaped && /['"]/.test(next2) && !/['"]/.test(quote4)) {
        state.tokens.unshift(tokenStringStart(next2, "string"));
        stream.backUp(1);
        break;
      }
      escaped = !escaped && next2 === "\\";
    }
    return style2;
  };
}
function tokenStringStart(quote4, style2) {
  return function(stream, state) {
    state.tokens[0] = tokenString16(quote4, style2);
    stream.next();
    return tokenize4(stream, state);
  };
}
function tokenHeredoc(delim) {
  return function(stream, state) {
    if (stream.sol() && stream.string == delim) state.tokens.shift();
    stream.skipToEnd();
    return "string.special";
  };
}
function tokenize4(stream, state) {
  return (state.tokens[0] || tokenBase29)(stream, state);
}
var words15, commonAtoms2, commonKeywords5, commonCommands, tokenDollar, shell;
var init_shell = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/shell.js"() {
    words15 = {};
    commonAtoms2 = ["true", "false"];
    commonKeywords5 = [
      "if",
      "then",
      "do",
      "else",
      "elif",
      "while",
      "until",
      "for",
      "in",
      "esac",
      "fi",
      "fin",
      "fil",
      "done",
      "exit",
      "set",
      "unset",
      "export",
      "function"
    ];
    commonCommands = [
      "ab",
      "awk",
      "bash",
      "beep",
      "cat",
      "cc",
      "cd",
      "chown",
      "chmod",
      "chroot",
      "clear",
      "cp",
      "curl",
      "cut",
      "diff",
      "echo",
      "find",
      "gawk",
      "gcc",
      "get",
      "git",
      "grep",
      "hg",
      "kill",
      "killall",
      "ln",
      "ls",
      "make",
      "mkdir",
      "openssl",
      "mv",
      "nc",
      "nl",
      "node",
      "npm",
      "ping",
      "ps",
      "restart",
      "rm",
      "rmdir",
      "sed",
      "service",
      "sh",
      "shopt",
      "shred",
      "source",
      "sort",
      "sleep",
      "ssh",
      "start",
      "stop",
      "su",
      "sudo",
      "svn",
      "tee",
      "telnet",
      "top",
      "touch",
      "vi",
      "vim",
      "wall",
      "wc",
      "wget",
      "who",
      "write",
      "yes",
      "zsh"
    ];
    define3("atom", commonAtoms2);
    define3("keyword", commonKeywords5);
    define3("builtin", commonCommands);
    tokenDollar = function(stream, state) {
      if (state.tokens.length > 1) stream.eat("$");
      var ch2 = stream.next();
      if (/['"({]/.test(ch2)) {
        state.tokens[0] = tokenString16(ch2, ch2 == "(" ? "quote" : ch2 == "{" ? "def" : "string");
        return tokenize4(stream, state);
      }
      if (!/\d/.test(ch2)) stream.eatWhile(/\w/);
      state.tokens.shift();
      return "def";
    };
    shell = {
      name: "shell",
      startState: function() {
        return { tokens: [] };
      },
      token: function(stream, state) {
        return tokenize4(stream, state);
      },
      languageData: {
        autocomplete: commonAtoms2.concat(commonKeywords5, commonCommands),
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/sieve.js
var sieve_exports = {};
__export(sieve_exports, {
  sieve: () => sieve
});
function words16(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function tokenBase30(stream, state) {
  var ch2 = stream.next();
  if (ch2 == "/" && stream.eat("*")) {
    state.tokenize = tokenCComment3;
    return tokenCComment3(stream, state);
  }
  if (ch2 === "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (ch2 == '"') {
    state.tokenize = tokenString17(ch2);
    return state.tokenize(stream, state);
  }
  if (ch2 == "(") {
    state._indent.push("(");
    state._indent.push("{");
    return null;
  }
  if (ch2 === "{") {
    state._indent.push("{");
    return null;
  }
  if (ch2 == ")") {
    state._indent.pop();
    state._indent.pop();
  }
  if (ch2 === "}") {
    state._indent.pop();
    return null;
  }
  if (ch2 == ",")
    return null;
  if (ch2 == ";")
    return null;
  if (/[{}\(\),;]/.test(ch2))
    return null;
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\d]/);
    stream.eat(/[KkMmGg]/);
    return "number";
  }
  if (ch2 == ":") {
    stream.eatWhile(/[a-zA-Z_]/);
    stream.eatWhile(/[a-zA-Z0-9_]/);
    return "operator";
  }
  stream.eatWhile(/\w/);
  var cur2 = stream.current();
  if (cur2 == "text" && stream.eat(":")) {
    state.tokenize = tokenMultiLineString;
    return "string";
  }
  if (keywords32.propertyIsEnumerable(cur2))
    return "keyword";
  if (atoms12.propertyIsEnumerable(cur2))
    return "atom";
  return null;
}
function tokenMultiLineString(stream, state) {
  state._multiLineString = true;
  if (!stream.sol()) {
    stream.eatSpace();
    if (stream.peek() == "#") {
      stream.skipToEnd();
      return "comment";
    }
    stream.skipToEnd();
    return "string";
  }
  if (stream.next() == "." && stream.eol()) {
    state._multiLineString = false;
    state.tokenize = tokenBase30;
  }
  return "string";
}
function tokenCComment3(stream, state) {
  var maybeEnd = false, ch2;
  while ((ch2 = stream.next()) != null) {
    if (maybeEnd && ch2 == "/") {
      state.tokenize = tokenBase30;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenString17(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped)
        break;
      escaped = !escaped && ch2 == "\\";
    }
    if (!escaped) state.tokenize = tokenBase30;
    return "string";
  };
}
var keywords32, atoms12, sieve;
var init_sieve = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/sieve.js"() {
    keywords32 = words16("if elsif else stop require");
    atoms12 = words16("true false not");
    sieve = {
      name: "sieve",
      startState: function(base5) {
        return {
          tokenize: tokenBase30,
          baseIndent: base5 || 0,
          _indent: []
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace())
          return null;
        return (state.tokenize || tokenBase30)(stream, state);
      },
      indent: function(state, _textAfter, cx2) {
        var length = state._indent.length;
        if (_textAfter && _textAfter[0] == "}")
          length--;
        if (length < 0)
          length = 0;
        return length * cx2.unit;
      },
      languageData: {
        indentOnInput: /^\s*\}$/
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/smalltalk.js
var smalltalk_exports = {};
__export(smalltalk_exports, {
  smalltalk: () => smalltalk
});
var specialChars, keywords33, Context9, Token, State2, next, nextComment, nextString, nextSymbol, nextTemporaries, smalltalk;
var init_smalltalk = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/smalltalk.js"() {
    specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
    keywords33 = /true|false|nil|self|super|thisContext/;
    Context9 = function(tokenizer2, parent) {
      this.next = tokenizer2;
      this.parent = parent;
    };
    Token = function(name2, context, eos) {
      this.name = name2;
      this.context = context;
      this.eos = eos;
    };
    State2 = function() {
      this.context = new Context9(next, null);
      this.expectVariable = true;
      this.indentation = 0;
      this.userIndentationDelta = 0;
    };
    State2.prototype.userIndent = function(indentation5, indentUnit2) {
      this.userIndentationDelta = indentation5 > 0 ? indentation5 / indentUnit2 - this.indentation : 0;
    };
    next = function(stream, context, state) {
      var token = new Token(null, context, false);
      var aChar = stream.next();
      if (aChar === '"') {
        token = nextComment(stream, new Context9(nextComment, context));
      } else if (aChar === "'") {
        token = nextString(stream, new Context9(nextString, context));
      } else if (aChar === "#") {
        if (stream.peek() === "'") {
          stream.next();
          token = nextSymbol(stream, new Context9(nextSymbol, context));
        } else {
          if (stream.eatWhile(/[^\s.{}\[\]()]/))
            token.name = "string.special";
          else
            token.name = "meta";
        }
      } else if (aChar === "$") {
        if (stream.next() === "<") {
          stream.eatWhile(/[^\s>]/);
          stream.next();
        }
        token.name = "string.special";
      } else if (aChar === "|" && state.expectVariable) {
        token.context = new Context9(nextTemporaries, context);
      } else if (/[\[\]{}()]/.test(aChar)) {
        token.name = "bracket";
        token.eos = /[\[{(]/.test(aChar);
        if (aChar === "[") {
          state.indentation++;
        } else if (aChar === "]") {
          state.indentation = Math.max(0, state.indentation - 1);
        }
      } else if (specialChars.test(aChar)) {
        stream.eatWhile(specialChars);
        token.name = "operator";
        token.eos = aChar !== ";";
      } else if (/\d/.test(aChar)) {
        stream.eatWhile(/[\w\d]/);
        token.name = "number";
      } else if (/[\w_]/.test(aChar)) {
        stream.eatWhile(/[\w\d_]/);
        token.name = state.expectVariable ? keywords33.test(stream.current()) ? "keyword" : "variable" : null;
      } else {
        token.eos = state.expectVariable;
      }
      return token;
    };
    nextComment = function(stream, context) {
      stream.eatWhile(/[^"]/);
      return new Token("comment", stream.eat('"') ? context.parent : context, true);
    };
    nextString = function(stream, context) {
      stream.eatWhile(/[^']/);
      return new Token("string", stream.eat("'") ? context.parent : context, false);
    };
    nextSymbol = function(stream, context) {
      stream.eatWhile(/[^']/);
      return new Token("string.special", stream.eat("'") ? context.parent : context, false);
    };
    nextTemporaries = function(stream, context) {
      var token = new Token(null, context, false);
      var aChar = stream.next();
      if (aChar === "|") {
        token.context = context.parent;
        token.eos = true;
      } else {
        stream.eatWhile(/[^|]/);
        token.name = "variable";
      }
      return token;
    };
    smalltalk = {
      name: "smalltalk",
      startState: function() {
        return new State2();
      },
      token: function(stream, state) {
        state.userIndent(stream.indentation(), stream.indentUnit);
        if (stream.eatSpace()) {
          return null;
        }
        var token = state.context.next(stream, state.context, state);
        state.context = token.context;
        state.expectVariable = token.eos;
        return token.name;
      },
      blankLine: function(state, indentUnit2) {
        state.userIndent(0, indentUnit2);
      },
      indent: function(state, textAfter, cx2) {
        var i = state.context.next === next && textAfter && textAfter.charAt(0) === "]" ? -1 : state.userIndentationDelta;
        return (state.indentation + i) * cx2.unit;
      },
      languageData: {
        indentOnInput: /^\s*\]$/
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/solr.js
var solr_exports = {};
__export(solr_exports, {
  solr: () => solr
});
function isNumber2(word) {
  return parseFloat(word).toString() === word;
}
function tokenString18(quote4) {
  return function(stream, state) {
    var escaped = false, next2;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) break;
      escaped = !escaped && next2 == "\\";
    }
    if (!escaped) state.tokenize = tokenBase31;
    return "string";
  };
}
function tokenOperator(operator4) {
  return function(stream, state) {
    if (operator4 == "|")
      stream.eat(/\|/);
    else if (operator4 == "&")
      stream.eat(/\&/);
    state.tokenize = tokenBase31;
    return "operator";
  };
}
function tokenWord(ch2) {
  return function(stream, state) {
    var word = ch2;
    while ((ch2 = stream.peek()) && ch2.match(isStringChar) != null) {
      word += stream.next();
    }
    state.tokenize = tokenBase31;
    if (isOperatorString.test(word))
      return "operator";
    else if (isNumber2(word))
      return "number";
    else if (stream.peek() == ":")
      return "propertyName";
    else
      return "string";
  };
}
function tokenBase31(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"')
    state.tokenize = tokenString18(ch2);
  else if (isOperatorChar9.test(ch2))
    state.tokenize = tokenOperator(ch2);
  else if (isStringChar.test(ch2))
    state.tokenize = tokenWord(ch2);
  return state.tokenize != tokenBase31 ? state.tokenize(stream, state) : null;
}
var isStringChar, isOperatorChar9, isOperatorString, solr;
var init_solr = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/solr.js"() {
    isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
    isOperatorChar9 = /[\|\!\+\-\*\?\~\^\&]/;
    isOperatorString = /^(OR|AND|NOT|TO)$/;
    solr = {
      name: "solr",
      startState: function() {
        return {
          tokenize: tokenBase31
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/sparql.js
var sparql_exports = {};
__export(sparql_exports, {
  sparql: () => sparql
});
function wordRegexp10(words22) {
  return new RegExp("^(?:" + words22.join("|") + ")$", "i");
}
function tokenBase32(stream, state) {
  var ch2 = stream.next();
  curPunc8 = null;
  if (ch2 == "$" || ch2 == "?") {
    if (ch2 == "?" && stream.match(/\s/, false)) {
      return "operator";
    }
    stream.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/);
    return "variableName.local";
  } else if (ch2 == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
    stream.match(/^[^\s\u00a0>]*>?/);
    return "atom";
  } else if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenLiteral(ch2);
    return state.tokenize(stream, state);
  } else if (/[{}\(\),\.;\[\]]/.test(ch2)) {
    curPunc8 = ch2;
    return "bracket";
  } else if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  } else if (operatorChars2.test(ch2)) {
    return "operator";
  } else if (ch2 == ":") {
    eatPnLocal(stream);
    return "atom";
  } else if (ch2 == "@") {
    stream.eatWhile(/[a-z\d\-]/i);
    return "meta";
  } else if (PREFIX_START.test(ch2) && stream.match(PREFIX_REMAINDER)) {
    eatPnLocal(stream);
    return "atom";
  }
  stream.eatWhile(/[_\w\d]/);
  var word = stream.current();
  if (ops.test(word))
    return "builtin";
  else if (keywords34.test(word))
    return "keyword";
  else
    return "variable";
}
function eatPnLocal(stream) {
  stream.match(/(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i);
}
function tokenLiteral(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped) {
        state.tokenize = tokenBase32;
        break;
      }
      escaped = !escaped && ch2 == "\\";
    }
    return "string";
  };
}
function pushContext8(state, type7, col) {
  state.context = { prev: state.context, indent: state.indent, col, type: type7 };
}
function popContext8(state) {
  state.indent = state.context.indent;
  state.context = state.context.prev;
}
var curPunc8, ops, keywords34, operatorChars2, PN_CHARS, PREFIX_START, PREFIX_REMAINDER, sparql;
var init_sparql = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/sparql.js"() {
    ops = wordRegexp10([
      "str",
      "lang",
      "langmatches",
      "datatype",
      "bound",
      "sameterm",
      "isiri",
      "isuri",
      "iri",
      "uri",
      "bnode",
      "count",
      "sum",
      "min",
      "max",
      "avg",
      "sample",
      "group_concat",
      "rand",
      "abs",
      "ceil",
      "floor",
      "round",
      "concat",
      "substr",
      "strlen",
      "replace",
      "ucase",
      "lcase",
      "encode_for_uri",
      "contains",
      "strstarts",
      "strends",
      "strbefore",
      "strafter",
      "year",
      "month",
      "day",
      "hours",
      "minutes",
      "seconds",
      "timezone",
      "tz",
      "now",
      "uuid",
      "struuid",
      "md5",
      "sha1",
      "sha256",
      "sha384",
      "sha512",
      "coalesce",
      "if",
      "strlang",
      "strdt",
      "isnumeric",
      "regex",
      "exists",
      "isblank",
      "isliteral",
      "a",
      "bind"
    ]);
    keywords34 = wordRegexp10([
      "base",
      "prefix",
      "select",
      "distinct",
      "reduced",
      "construct",
      "describe",
      "ask",
      "from",
      "named",
      "where",
      "order",
      "limit",
      "offset",
      "filter",
      "optional",
      "graph",
      "by",
      "asc",
      "desc",
      "as",
      "having",
      "undef",
      "values",
      "group",
      "minus",
      "in",
      "not",
      "service",
      "silent",
      "using",
      "insert",
      "delete",
      "union",
      "true",
      "false",
      "with",
      "data",
      "copy",
      "to",
      "move",
      "add",
      "create",
      "drop",
      "clear",
      "load",
      "into"
    ]);
    operatorChars2 = /[*+\-<>=&|\^\/!\?]/;
    PN_CHARS = "[A-Za-z_\\-0-9]";
    PREFIX_START = new RegExp("[A-Za-z]");
    PREFIX_REMAINDER = new RegExp("((" + PN_CHARS + "|\\.)*(" + PN_CHARS + "))?:");
    sparql = {
      name: "sparql",
      startState: function() {
        return {
          tokenize: tokenBase32,
          context: null,
          indent: 0,
          col: 0
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null) state.context.align = false;
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        if (style2 != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
          state.context.align = true;
        }
        if (curPunc8 == "(") pushContext8(state, ")", stream.column());
        else if (curPunc8 == "[") pushContext8(state, "]", stream.column());
        else if (curPunc8 == "{") pushContext8(state, "}", stream.column());
        else if (/[\]\}\)]/.test(curPunc8)) {
          while (state.context && state.context.type == "pattern") popContext8(state);
          if (state.context && curPunc8 == state.context.type) {
            popContext8(state);
            if (curPunc8 == "}" && state.context && state.context.type == "pattern")
              popContext8(state);
          }
        } else if (curPunc8 == "." && state.context && state.context.type == "pattern") popContext8(state);
        else if (/atom|string|variable/.test(style2) && state.context) {
          if (/[\}\]]/.test(state.context.type))
            pushContext8(state, "pattern", stream.column());
          else if (state.context.type == "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar))
          while (context && context.type == "pattern") context = context.prev;
        var closing4 = context && firstChar == context.type;
        if (!context)
          return 0;
        else if (context.type == "pattern")
          return context.col;
        else if (context.align)
          return context.col + (closing4 ? 0 : 1);
        else
          return context.indent + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/spreadsheet.js
var spreadsheet_exports = {};
__export(spreadsheet_exports, {
  spreadsheet: () => spreadsheet
});
var spreadsheet;
var init_spreadsheet = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/spreadsheet.js"() {
    spreadsheet = {
      name: "spreadsheet",
      startState: function() {
        return {
          stringType: null,
          stack: []
        };
      },
      token: function(stream, state) {
        if (!stream) return;
        if (state.stack.length === 0) {
          if (stream.peek() == '"' || stream.peek() == "'") {
            state.stringType = stream.peek();
            stream.next();
            state.stack.unshift("string");
          }
        }
        switch (state.stack[0]) {
          case "string":
            while (state.stack[0] === "string" && !stream.eol()) {
              if (stream.peek() === state.stringType) {
                stream.next();
                state.stack.shift();
              } else if (stream.peek() === "\\") {
                stream.next();
                stream.next();
              } else {
                stream.match(/^.[^\\\"\']*/);
              }
            }
            return "string";
          case "characterClass":
            while (state.stack[0] === "characterClass" && !stream.eol()) {
              if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./)))
                state.stack.shift();
            }
            return "operator";
        }
        var peek = stream.peek();
        switch (peek) {
          case "[":
            stream.next();
            state.stack.unshift("characterClass");
            return "bracket";
          case ":":
            stream.next();
            return "operator";
          case "\\":
            if (stream.match(/\\[a-z]+/)) return "string.special";
            else {
              stream.next();
              return "atom";
            }
          case ".":
          case ",":
          case ";":
          case "*":
          case "-":
          case "+":
          case "^":
          case "<":
          case "/":
          case "=":
            stream.next();
            return "atom";
          case "$":
            stream.next();
            return "builtin";
        }
        if (stream.match(/\d+/)) {
          if (stream.match(/^\w+/)) return "error";
          return "number";
        } else if (stream.match(/^[a-zA-Z_]\w*/)) {
          if (stream.match(/(?=[\(.])/, false)) return "keyword";
          return "variable";
        } else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
          stream.next();
          return "bracket";
        } else if (!stream.eatSpace()) {
          stream.next();
        }
        return null;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/stylus.js
var stylus_exports = {};
__export(stylus_exports, {
  stylus: () => stylus
});
function wordRegexp11(words22) {
  words22 = words22.sort(function(a2, b) {
    return b > a2;
  });
  return new RegExp("^((" + words22.join(")|(") + "))\\b");
}
function keySet2(array2) {
  var keys2 = {};
  for (var i = 0; i < array2.length; ++i) keys2[array2[i]] = true;
  return keys2;
}
function escapeRegExp(text5) {
  return text5.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
function tokenBase33(stream, state) {
  firstWordMatch = stream.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/);
  state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\s*/, "") : "";
  state.context.line.indent = stream.indentation();
  ch = stream.peek();
  if (stream.match("//")) {
    stream.skipToEnd();
    return ["comment", "comment"];
  }
  if (stream.match("/*")) {
    state.tokenize = tokenCComment4;
    return tokenCComment4(stream, state);
  }
  if (ch == '"' || ch == "'") {
    stream.next();
    state.tokenize = tokenString19(ch);
    return state.tokenize(stream, state);
  }
  if (ch == "@") {
    stream.next();
    stream.eatWhile(/[\w\\-]/);
    return ["def", stream.current()];
  }
  if (ch == "#") {
    stream.next();
    if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i)) {
      return ["atom", "atom"];
    }
    if (stream.match(/^[a-z][\w-]*/i)) {
      return ["builtin", "hash"];
    }
  }
  if (stream.match(vendorPrefixesRegexp)) {
    return ["meta", "vendor-prefixes"];
  }
  if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
    stream.eatWhile(/[a-z%]/i);
    return ["number", "unit"];
  }
  if (ch == "!") {
    stream.next();
    return [stream.match(/^(important|optional)/i) ? "keyword" : "operator", "important"];
  }
  if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
    return ["qualifier", "qualifier"];
  }
  if (stream.match(documentTypesRegexp)) {
    if (stream.peek() == "(") state.tokenize = tokenParenthesized;
    return ["property", "word"];
  }
  if (stream.match(/^[a-z][\w-]*\(/i)) {
    stream.backUp(1);
    return ["keyword", "mixin"];
  }
  if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
    stream.backUp(1);
    return ["keyword", "block-mixin"];
  }
  if (stream.string.match(/^\s*&/) && stream.match(/^[-_]+[a-z][\w-]*/)) {
    return ["qualifier", "qualifier"];
  }
  if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
    stream.backUp(1);
    return ["variableName.special", "reference"];
  }
  if (stream.match(/^&{1}\s*$/)) {
    return ["variableName.special", "reference"];
  }
  if (stream.match(wordOperatorKeywordsRegexp)) {
    return ["operator", "operator"];
  }
  if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
    if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
      if (!wordIsTag(stream.current())) {
        stream.match(".");
        return ["variable", "variable-name"];
      }
    }
    return ["variable", "word"];
  }
  if (stream.match(operatorsRegexp)) {
    return ["operator", stream.current()];
  }
  if (/[:;,{}\[\]\(\)]/.test(ch)) {
    stream.next();
    return [null, ch];
  }
  stream.next();
  return [null, null];
}
function tokenCComment4(stream, state) {
  var maybeEnd = false, ch2;
  while ((ch2 = stream.next()) != null) {
    if (maybeEnd && ch2 == "/") {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return ["comment", "comment"];
}
function tokenString19(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped) {
        if (quote4 == ")") stream.backUp(1);
        break;
      }
      escaped = !escaped && ch2 == "\\";
    }
    if (ch2 == quote4 || !escaped && quote4 != ")") state.tokenize = null;
    return ["string", "string"];
  };
}
function tokenParenthesized(stream, state) {
  stream.next();
  if (!stream.match(/\s*[\"\')]/, false))
    state.tokenize = tokenString19(")");
  else
    state.tokenize = null;
  return [null, "("];
}
function Context10(type7, indent7, prev, line) {
  this.type = type7;
  this.indent = indent7;
  this.prev = prev;
  this.line = line || { firstWord: "", indent: 0 };
}
function pushContext9(state, stream, type7, indent7) {
  indent7 = indent7 >= 0 ? indent7 : stream.indentUnit;
  state.context = new Context10(type7, stream.indentation() + indent7, state.context);
  return type7;
}
function popContext9(state, stream, currentIndent) {
  var contextIndent = state.context.indent - stream.indentUnit;
  currentIndent = currentIndent || false;
  state.context = state.context.prev;
  if (currentIndent) state.context.indent = contextIndent;
  return state.context.type;
}
function pass2(type7, stream, state) {
  return states[state.context.type](type7, stream, state);
}
function popAndPass(type7, stream, state, n) {
  for (var i = n || 1; i > 0; i--)
    state.context = state.context.prev;
  return pass2(type7, stream, state);
}
function wordIsTag(word) {
  return word.toLowerCase() in tagKeywords;
}
function wordIsProperty(word) {
  word = word.toLowerCase();
  return word in propertyKeywords2 || word in fontProperties2;
}
function wordIsBlock(word) {
  return word.toLowerCase() in blockKeywords4;
}
function wordIsVendorPrefix(word) {
  return word.toLowerCase().match(vendorPrefixesRegexp);
}
function wordAsValue(word) {
  var wordLC = word.toLowerCase();
  var override2 = "variable";
  if (wordIsTag(word)) override2 = "tag";
  else if (wordIsBlock(word)) override2 = "block-keyword";
  else if (wordIsProperty(word)) override2 = "property";
  else if (wordLC in valueKeywords2 || wordLC in commonAtoms3) override2 = "atom";
  else if (wordLC == "return" || wordLC in colorKeywords2) override2 = "keyword";
  else if (word.match(/^[A-Z]/)) override2 = "string";
  return override2;
}
function typeIsBlock(type7, stream) {
  return endOfLine(stream) && (type7 == "{" || type7 == "]" || type7 == "hash" || type7 == "qualifier") || type7 == "block-mixin";
}
function typeIsInterpolation(type7, stream) {
  return type7 == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
}
function typeIsPseudo(type7, stream) {
  return type7 == ":" && stream.match(/^[a-z-]+/, false);
}
function startOfLine(stream) {
  return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));
}
function endOfLine(stream) {
  return stream.eol() || stream.match(/^\s*$/, false);
}
function firstWordOfLine(line) {
  var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
  var result = typeof line == "string" ? line.match(re) : line.string.match(re);
  return result ? result[0].replace(/^\s*/, "") : "";
}
var tagKeywords_, documentTypes_2, mediaTypes_2, mediaFeatures_2, propertyKeywords_2, nonStandardPropertyKeywords_2, fontProperties_2, colorKeywords_2, valueKeywords_2, wordOperatorKeywords_, blockKeywords_, commonAtoms_, commonDef_, hintWords, tagKeywords, tagVariablesRegexp, propertyKeywords2, nonStandardPropertyKeywords2, valueKeywords2, colorKeywords2, documentTypes2, documentTypesRegexp, mediaFeatures2, mediaTypes2, fontProperties2, operatorsRegexp, wordOperatorKeywordsRegexp, blockKeywords4, vendorPrefixesRegexp, commonAtoms3, firstWordMatch, states, ch, style, type5, override, stylus;
var init_stylus = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/stylus.js"() {
    tagKeywords_ = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "bgsound", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "nobr", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video"];
    documentTypes_2 = ["domain", "regexp", "url-prefix", "url"];
    mediaTypes_2 = ["all", "aural", "braille", "handheld", "print", "projection", "screen", "tty", "tv", "embossed"];
    mediaFeatures_2 = ["width", "min-width", "max-width", "height", "min-height", "max-height", "device-width", "min-device-width", "max-device-width", "device-height", "min-device-height", "max-device-height", "aspect-ratio", "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio", "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color", "max-color", "color-index", "min-color-index", "max-color-index", "monochrome", "min-monochrome", "max-monochrome", "resolution", "min-resolution", "max-resolution", "scan", "grid", "dynamic-range", "video-dynamic-range"];
    propertyKeywords_2 = ["align-content", "align-items", "align-self", "alignment-adjust", "alignment-baseline", "anchor-point", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timing-function", "appearance", "azimuth", "backface-visibility", "background", "background-attachment", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-repeat", "background-size", "baseline-shift", "binding", "bleed", "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target", "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "clear", "clip", "color", "color-profile", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after", "cue-before", "cursor", "direction", "display", "dominant-baseline", "drop-initial-after-adjust", "drop-initial-after-align", "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size", "drop-initial-value", "elevation", "empty-cells", "fit", "fit-position", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into", "font", "font-feature-settings", "font-family", "font-kerning", "font-language-override", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-weight", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-position", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-start", "grid-row", "grid-row-end", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon", "image-orientation", "image-rendering", "image-resolution", "inline-box-align", "justify-content", "left", "letter-spacing", "line-break", "line-height", "line-stacking", "line-stacking-ruby", "line-stacking-shift", "line-stacking-strategy", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "marker-offset", "marks", "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed", "marquee-style", "max-height", "max-width", "min-height", "min-width", "move-to", "nav-down", "nav-index", "nav-left", "nav-right", "nav-up", "object-fit", "object-position", "opacity", "order", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-style", "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "page", "page-break-after", "page-break-before", "page-break-inside", "page-policy", "pause", "pause-after", "pause-before", "perspective", "perspective-origin", "pitch", "pitch-range", "play-during", "position", "presentation-level", "punctuation-trim", "quotes", "region-break-after", "region-break-before", "region-break-inside", "region-fragment", "rendering-intent", "resize", "rest", "rest-after", "rest-before", "richness", "right", "rotation", "rotation-point", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span", "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside", "size", "speak", "speak-as", "speak-header", "speak-numeral", "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size", "table-layout", "target", "target-name", "target-new", "target-position", "text-align", "text-align-last", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-style", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-height", "text-indent", "text-justify", "text-outline", "text-overflow", "text-shadow", "text-size-adjust", "text-space-collapse", "text-transform", "text-underline-position", "text-wrap", "top", "transform", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "unicode-bidi", "vertical-align", "visibility", "voice-balance", "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate", "voice-stress", "voice-volume", "volume", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "z-index", "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color", "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events", "color-interpolation", "color-interpolation-filters", "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering", "marker", "marker-end", "marker-mid", "marker-start", "shape-rendering", "stroke", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering", "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal", "glyph-orientation-vertical", "text-anchor", "writing-mode", "font-smoothing", "osx-font-smoothing"];
    nonStandardPropertyKeywords_2 = ["scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color", "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color", "scrollbar-3d-light-color", "scrollbar-track-color", "shape-inside", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "zoom"];
    fontProperties_2 = ["font-family", "src", "unicode-range", "font-variant", "font-feature-settings", "font-stretch", "font-weight", "font-style"];
    colorKeywords_2 = ["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"];
    valueKeywords_2 = ["above", "absolute", "activeborder", "additive", "activecaption", "afar", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "amharic", "amharic-abegede", "antialiased", "appworkspace", "arabic-indic", "armenian", "asterisks", "attr", "auto", "avoid", "avoid-column", "avoid-page", "avoid-region", "background", "backwards", "baseline", "below", "bidi-override", "binary", "bengali", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch", "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote", "col-resize", "collapse", "column", "compact", "condensed", "conic-gradient", "contain", "content", "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "destination-atop", "destination-in", "destination-out", "destination-over", "devanagari", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede", "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er", "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er", "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et", "ethiopic-halehame-gez", "ethiopic-halehame-om-et", "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et", "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig", "ethiopic-numeric", "ew-resize", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fixed", "flat", "flex", "footnotes", "forwards", "from", "geometricPrecision", "georgian", "graytext", "groove", "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hebrew", "help", "hidden", "hide", "high", "higher", "highlight", "highlighttext", "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "japanese-formal", "japanese-informal", "justify", "kannada", "katakana", "katakana-iroha", "keep-all", "khmer", "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal", "landscape", "lao", "large", "larger", "left", "level", "lighter", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian", "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lower-roman", "lowercase", "ltr", "malayalam", "match", "matrix", "matrix3d", "media-play-button", "media-slider", "media-sliderthumb", "media-volume-slider", "media-volume-sliderthumb", "medium", "menu", "menulist", "menulist-button", "menutext", "message-box", "middle", "min-intrinsic", "mix", "mongolian", "monospace", "move", "multiple", "myanmar", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "open-quote", "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "persian", "perspective", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeating-conic-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row-resize", "rtl", "run-in", "running", "s-resize", "sans-serif", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "semi-condensed", "semi-expanded", "separate", "serif", "show", "sidama", "simp-chinese-formal", "simp-chinese-informal", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "solid", "somali", "source-atop", "source-in", "source-out", "source-over", "space", "spell-out", "square", "square-button", "standard", "start", "static", "status-bar", "stretch", "stroke", "sub", "subpixel-antialiased", "super", "sw-resize", "symbolic", "symbols", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "tamil", "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er", "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top", "trad-chinese-formal", "trad-chinese-informal", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "up", "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal", "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url", "var", "vertical", "vertical-text", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "x-large", "x-small", "xor", "xx-large", "xx-small", "bicubic", "optimizespeed", "grayscale", "row", "row-reverse", "wrap", "wrap-reverse", "column-reverse", "flex-start", "flex-end", "space-between", "space-around", "unset"];
    wordOperatorKeywords_ = ["in", "and", "or", "not", "is not", "is a", "is", "isnt", "defined", "if unless"];
    blockKeywords_ = ["for", "if", "else", "unless", "from", "to"];
    commonAtoms_ = ["null", "true", "false", "href", "title", "type", "not-allowed", "readonly", "disabled"];
    commonDef_ = ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"];
    hintWords = tagKeywords_.concat(
      documentTypes_2,
      mediaTypes_2,
      mediaFeatures_2,
      propertyKeywords_2,
      nonStandardPropertyKeywords_2,
      colorKeywords_2,
      valueKeywords_2,
      fontProperties_2,
      wordOperatorKeywords_,
      blockKeywords_,
      commonAtoms_,
      commonDef_
    );
    tagKeywords = keySet2(tagKeywords_);
    tagVariablesRegexp = /^(a|b|i|s|col|em)$/i;
    propertyKeywords2 = keySet2(propertyKeywords_2);
    nonStandardPropertyKeywords2 = keySet2(nonStandardPropertyKeywords_2);
    valueKeywords2 = keySet2(valueKeywords_2);
    colorKeywords2 = keySet2(colorKeywords_2);
    documentTypes2 = keySet2(documentTypes_2);
    documentTypesRegexp = wordRegexp11(documentTypes_2);
    mediaFeatures2 = keySet2(mediaFeatures_2);
    mediaTypes2 = keySet2(mediaTypes_2);
    fontProperties2 = keySet2(fontProperties_2);
    operatorsRegexp = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/;
    wordOperatorKeywordsRegexp = wordRegexp11(wordOperatorKeywords_);
    blockKeywords4 = keySet2(blockKeywords_);
    vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i);
    commonAtoms3 = keySet2(commonAtoms_);
    firstWordMatch = "";
    states = {};
    states.block = function(type7, stream, state) {
      if (type7 == "comment" && startOfLine(stream) || type7 == "," && endOfLine(stream) || type7 == "mixin") {
        return pushContext9(state, stream, "block", 0);
      }
      if (typeIsInterpolation(type7, stream)) {
        return pushContext9(state, stream, "interpolation");
      }
      if (endOfLine(stream) && type7 == "]") {
        if (!/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {
          return pushContext9(state, stream, "block", 0);
        }
      }
      if (typeIsBlock(type7, stream)) {
        return pushContext9(state, stream, "block");
      }
      if (type7 == "}" && endOfLine(stream)) {
        return pushContext9(state, stream, "block", 0);
      }
      if (type7 == "variable-name") {
        if (stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {
          return pushContext9(state, stream, "variableName");
        } else {
          return pushContext9(state, stream, "variableName", 0);
        }
      }
      if (type7 == "=") {
        if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {
          return pushContext9(state, stream, "block", 0);
        }
        return pushContext9(state, stream, "block");
      }
      if (type7 == "*") {
        if (endOfLine(stream) || stream.match(/\s*(,|\.|#|\[|:|{)/, false)) {
          override = "tag";
          return pushContext9(state, stream, "block");
        }
      }
      if (typeIsPseudo(type7, stream)) {
        return pushContext9(state, stream, "pseudo");
      }
      if (/@(font-face|media|supports|(-moz-)?document)/.test(type7)) {
        return pushContext9(state, stream, endOfLine(stream) ? "block" : "atBlock");
      }
      if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type7)) {
        return pushContext9(state, stream, "keyframes");
      }
      if (/@extends?/.test(type7)) {
        return pushContext9(state, stream, "extend", 0);
      }
      if (type7 && type7.charAt(0) == "@") {
        if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {
          override = "variable";
          return "block";
        }
        if (/(@import|@require|@charset)/.test(type7)) {
          return pushContext9(state, stream, "block", 0);
        }
        return pushContext9(state, stream, "block");
      }
      if (type7 == "reference" && endOfLine(stream)) {
        return pushContext9(state, stream, "block");
      }
      if (type7 == "(") {
        return pushContext9(state, stream, "parens");
      }
      if (type7 == "vendor-prefixes") {
        return pushContext9(state, stream, "vendorPrefixes");
      }
      if (type7 == "word") {
        var word = stream.current();
        override = wordAsValue(word);
        if (override == "property") {
          if (startOfLine(stream)) {
            return pushContext9(state, stream, "block", 0);
          } else {
            override = "atom";
            return "block";
          }
        }
        if (override == "tag") {
          if (/embed|menu|pre|progress|sub|table/.test(word)) {
            if (wordIsProperty(firstWordOfLine(stream))) {
              override = "atom";
              return "block";
            }
          }
          if (stream.string.match(new RegExp("\\[\\s*" + word + "|" + word + "\\s*\\]"))) {
            override = "atom";
            return "block";
          }
          if (tagVariablesRegexp.test(word)) {
            if (startOfLine(stream) && stream.string.match(/=/) || !startOfLine(stream) && !stream.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) && !wordIsTag(firstWordOfLine(stream))) {
              override = "variable";
              if (wordIsBlock(firstWordOfLine(stream))) return "block";
              return pushContext9(state, stream, "block", 0);
            }
          }
          if (endOfLine(stream)) return pushContext9(state, stream, "block");
        }
        if (override == "block-keyword") {
          override = "keyword";
          if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
            return "block";
          }
          return pushContext9(state, stream, "block");
        }
        if (word == "return") return pushContext9(state, stream, "block", 0);
        if (override == "variable" && stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)) {
          return pushContext9(state, stream, "block");
        }
      }
      return state.context.type;
    };
    states.parens = function(type7, stream, state) {
      if (type7 == "(") return pushContext9(state, stream, "parens");
      if (type7 == ")") {
        if (state.context.prev.type == "parens") {
          return popContext9(state, stream);
        }
        if (stream.string.match(/^[a-z][\w-]*\(/i) && endOfLine(stream) || wordIsBlock(firstWordOfLine(stream)) || /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(firstWordOfLine(stream)) || !stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) && wordIsTag(firstWordOfLine(stream))) {
          return pushContext9(state, stream, "block");
        }
        if (stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) || stream.string.match(/^\s*(\(|\)|[0-9])/) || stream.string.match(/^\s+[a-z][\w-]*\(/i) || stream.string.match(/^\s+[\$-]?[a-z]/i)) {
          return pushContext9(state, stream, "block", 0);
        }
        if (endOfLine(stream)) return pushContext9(state, stream, "block");
        else return pushContext9(state, stream, "block", 0);
      }
      if (type7 && type7.charAt(0) == "@" && wordIsProperty(stream.current().slice(1))) {
        override = "variable";
      }
      if (type7 == "word") {
        var word = stream.current();
        override = wordAsValue(word);
        if (override == "tag" && tagVariablesRegexp.test(word)) {
          override = "variable";
        }
        if (override == "property" || word == "to") override = "atom";
      }
      if (type7 == "variable-name") {
        return pushContext9(state, stream, "variableName");
      }
      if (typeIsPseudo(type7, stream)) {
        return pushContext9(state, stream, "pseudo");
      }
      return state.context.type;
    };
    states.vendorPrefixes = function(type7, stream, state) {
      if (type7 == "word") {
        override = "property";
        return pushContext9(state, stream, "block", 0);
      }
      return popContext9(state, stream);
    };
    states.pseudo = function(type7, stream, state) {
      if (!wordIsProperty(firstWordOfLine(stream.string))) {
        stream.match(/^[a-z-]+/);
        override = "variableName.special";
        if (endOfLine(stream)) return pushContext9(state, stream, "block");
        return popContext9(state, stream);
      }
      return popAndPass(type7, stream, state);
    };
    states.atBlock = function(type7, stream, state) {
      if (type7 == "(") return pushContext9(state, stream, "atBlock_parens");
      if (typeIsBlock(type7, stream)) {
        return pushContext9(state, stream, "block");
      }
      if (typeIsInterpolation(type7, stream)) {
        return pushContext9(state, stream, "interpolation");
      }
      if (type7 == "word") {
        var word = stream.current().toLowerCase();
        if (/^(only|not|and|or)$/.test(word))
          override = "keyword";
        else if (documentTypes2.hasOwnProperty(word))
          override = "tag";
        else if (mediaTypes2.hasOwnProperty(word))
          override = "attribute";
        else if (mediaFeatures2.hasOwnProperty(word))
          override = "property";
        else if (nonStandardPropertyKeywords2.hasOwnProperty(word))
          override = "string.special";
        else override = wordAsValue(stream.current());
        if (override == "tag" && endOfLine(stream)) {
          return pushContext9(state, stream, "block");
        }
      }
      if (type7 == "operator" && /^(not|and|or)$/.test(stream.current())) {
        override = "keyword";
      }
      return state.context.type;
    };
    states.atBlock_parens = function(type7, stream, state) {
      if (type7 == "{" || type7 == "}") return state.context.type;
      if (type7 == ")") {
        if (endOfLine(stream)) return pushContext9(state, stream, "block");
        else return pushContext9(state, stream, "atBlock");
      }
      if (type7 == "word") {
        var word = stream.current().toLowerCase();
        override = wordAsValue(word);
        if (/^(max|min)/.test(word)) override = "property";
        if (override == "tag") {
          tagVariablesRegexp.test(word) ? override = "variable" : override = "atom";
        }
        return state.context.type;
      }
      return states.atBlock(type7, stream, state);
    };
    states.keyframes = function(type7, stream, state) {
      if (stream.indentation() == "0" && (type7 == "}" && startOfLine(stream) || type7 == "]" || type7 == "hash" || type7 == "qualifier" || wordIsTag(stream.current()))) {
        return popAndPass(type7, stream, state);
      }
      if (type7 == "{") return pushContext9(state, stream, "keyframes");
      if (type7 == "}") {
        if (startOfLine(stream)) return popContext9(state, stream, true);
        else return pushContext9(state, stream, "keyframes");
      }
      if (type7 == "unit" && /^[0-9]+\%$/.test(stream.current())) {
        return pushContext9(state, stream, "keyframes");
      }
      if (type7 == "word") {
        override = wordAsValue(stream.current());
        if (override == "block-keyword") {
          override = "keyword";
          return pushContext9(state, stream, "keyframes");
        }
      }
      if (/@(font-face|media|supports|(-moz-)?document)/.test(type7)) {
        return pushContext9(state, stream, endOfLine(stream) ? "block" : "atBlock");
      }
      if (type7 == "mixin") {
        return pushContext9(state, stream, "block", 0);
      }
      return state.context.type;
    };
    states.interpolation = function(type7, stream, state) {
      if (type7 == "{") popContext9(state, stream) && pushContext9(state, stream, "block");
      if (type7 == "}") {
        if (stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) || stream.string.match(/^\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream))) {
          return pushContext9(state, stream, "block");
        }
        if (!stream.string.match(/^(\{|\s*\&)/) || stream.match(/\s*[\w-]/, false)) {
          return pushContext9(state, stream, "block", 0);
        }
        return pushContext9(state, stream, "block");
      }
      if (type7 == "variable-name") {
        return pushContext9(state, stream, "variableName", 0);
      }
      if (type7 == "word") {
        override = wordAsValue(stream.current());
        if (override == "tag") override = "atom";
      }
      return state.context.type;
    };
    states.extend = function(type7, stream, state) {
      if (type7 == "[" || type7 == "=") return "extend";
      if (type7 == "]") return popContext9(state, stream);
      if (type7 == "word") {
        override = wordAsValue(stream.current());
        return "extend";
      }
      return popContext9(state, stream);
    };
    states.variableName = function(type7, stream, state) {
      if (type7 == "string" || type7 == "[" || type7 == "]" || stream.current().match(/^(\.|\$)/)) {
        if (stream.current().match(/^\.[\w-]+/i)) override = "variable";
        return "variableName";
      }
      return popAndPass(type7, stream, state);
    };
    stylus = {
      name: "stylus",
      startState: function() {
        return {
          tokenize: null,
          state: "block",
          context: new Context10("block", 0, null)
        };
      },
      token: function(stream, state) {
        if (!state.tokenize && stream.eatSpace()) return null;
        style = (state.tokenize || tokenBase33)(stream, state);
        if (style && typeof style == "object") {
          type5 = style[1];
          style = style[0];
        }
        override = style;
        state.state = states[state.state](type5, stream, state);
        return override;
      },
      indent: function(state, textAfter, iCx) {
        var cx2 = state.context, ch2 = textAfter && textAfter.charAt(0), indent7 = cx2.indent, lineFirstWord = firstWordOfLine(textAfter), lineIndent = cx2.line.indent, prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : "", prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;
        if (cx2.prev && (ch2 == "}" && (cx2.type == "block" || cx2.type == "atBlock" || cx2.type == "keyframes") || ch2 == ")" && (cx2.type == "parens" || cx2.type == "atBlock_parens") || ch2 == "{" && cx2.type == "at")) {
          indent7 = cx2.indent - iCx.unit;
        } else if (!/(\})/.test(ch2)) {
          if (/@|\$|\d/.test(ch2) || /^\{/.test(textAfter) || /^\s*\/(\/|\*)/.test(textAfter) || /^\s*\/\*/.test(prevLineFirstWord) || /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) || /^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) || /^return/.test(textAfter) || wordIsBlock(lineFirstWord)) {
            indent7 = lineIndent;
          } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch2) || wordIsTag(lineFirstWord)) {
            if (/\,\s*$/.test(prevLineFirstWord)) {
              indent7 = prevLineIndent;
            } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord)) {
              indent7 = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
            } else {
              indent7 = lineIndent;
            }
          } else if (!/,\s*$/.test(textAfter) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {
            if (wordIsBlock(prevLineFirstWord)) {
              indent7 = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
            } else if (/^\{/.test(prevLineFirstWord)) {
              indent7 = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + iCx.unit;
            } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {
              indent7 = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;
            } else if (/^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(prevLineFirstWord) || /=\s*$/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord) || /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)) {
              indent7 = prevLineIndent + iCx.unit;
            } else {
              indent7 = lineIndent;
            }
          }
        }
        return indent7;
      },
      languageData: {
        indentOnInput: /^\s*\}$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        autocomplete: hintWords
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/swift.js
var swift_exports = {};
__export(swift_exports, {
  swift: () => swift
});
function wordSet(words22) {
  var set2 = {};
  for (var i = 0; i < words22.length; i++) set2[words22[i]] = true;
  return set2;
}
function tokenBase34(stream, state, prev) {
  if (stream.sol()) state.indented = stream.indentation();
  if (stream.eatSpace()) return null;
  var ch2 = stream.peek();
  if (ch2 == "/") {
    if (stream.match("//")) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match("/*")) {
      state.tokenize.push(tokenComment14);
      return tokenComment14(stream, state);
    }
  }
  if (stream.match(instruction)) return "builtin";
  if (stream.match(attribute2)) return "attribute";
  if (stream.match(binary)) return "number";
  if (stream.match(octal)) return "number";
  if (stream.match(hexadecimal)) return "number";
  if (stream.match(decimal)) return "number";
  if (stream.match(property2)) return "property";
  if (operators7.indexOf(ch2) > -1) {
    stream.next();
    return "operator";
  }
  if (punc.indexOf(ch2) > -1) {
    stream.next();
    stream.match("..");
    return "punctuation";
  }
  var stringMatch;
  if (stringMatch = stream.match(/("""|"|')/)) {
    var tokenize6 = tokenString20.bind(null, stringMatch[0]);
    state.tokenize.push(tokenize6);
    return tokenize6(stream, state);
  }
  if (stream.match(identifier7)) {
    var ident = stream.current();
    if (types4.hasOwnProperty(ident)) return "type";
    if (atoms13.hasOwnProperty(ident)) return "atom";
    if (keywords35.hasOwnProperty(ident)) {
      if (definingKeywords.hasOwnProperty(ident))
        state.prev = "define";
      return "keyword";
    }
    if (prev == "define") return "def";
    return "variable";
  }
  stream.next();
  return null;
}
function tokenUntilClosingParen() {
  var depth = 0;
  return function(stream, state, prev) {
    var inner = tokenBase34(stream, state, prev);
    if (inner == "punctuation") {
      if (stream.current() == "(") ++depth;
      else if (stream.current() == ")") {
        if (depth == 0) {
          stream.backUp(1);
          state.tokenize.pop();
          return state.tokenize[state.tokenize.length - 1](stream, state);
        } else --depth;
      }
    }
    return inner;
  };
}
function tokenString20(openQuote, stream, state) {
  var singleLine = openQuote.length == 1;
  var ch2, escaped = false;
  while (ch2 = stream.peek()) {
    if (escaped) {
      stream.next();
      if (ch2 == "(") {
        state.tokenize.push(tokenUntilClosingParen());
        return "string";
      }
      escaped = false;
    } else if (stream.match(openQuote)) {
      state.tokenize.pop();
      return "string";
    } else {
      stream.next();
      escaped = ch2 == "\\";
    }
  }
  if (singleLine) {
    state.tokenize.pop();
  }
  return "string";
}
function tokenComment14(stream, state) {
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 === "/" && stream.eat("*")) {
      state.tokenize.push(tokenComment14);
    } else if (ch2 === "*" && stream.eat("/")) {
      state.tokenize.pop();
      break;
    }
  }
  return "comment";
}
function Context11(prev, align, indented) {
  this.prev = prev;
  this.align = align;
  this.indented = indented;
}
function pushContext10(state, stream) {
  var align = stream.match(/^\s*($|\/[\/\*]|[)}\]])/, false) ? null : stream.column() + 1;
  state.context = new Context11(state.context, align, state.indented);
}
function popContext10(state) {
  if (state.context) {
    state.indented = state.context.indented;
    state.context = state.context.prev;
  }
}
var keywords35, definingKeywords, atoms13, types4, operators7, punc, binary, octal, hexadecimal, decimal, identifier7, property2, instruction, attribute2, swift;
var init_swift = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/swift.js"() {
    keywords35 = wordSet([
      "_",
      "var",
      "let",
      "actor",
      "class",
      "enum",
      "extension",
      "import",
      "protocol",
      "struct",
      "func",
      "typealias",
      "associatedtype",
      "open",
      "public",
      "internal",
      "fileprivate",
      "private",
      "deinit",
      "init",
      "new",
      "override",
      "self",
      "subscript",
      "super",
      "convenience",
      "dynamic",
      "final",
      "indirect",
      "lazy",
      "required",
      "static",
      "unowned",
      "unowned(safe)",
      "unowned(unsafe)",
      "weak",
      "as",
      "is",
      "break",
      "case",
      "continue",
      "default",
      "else",
      "fallthrough",
      "for",
      "guard",
      "if",
      "in",
      "repeat",
      "switch",
      "where",
      "while",
      "defer",
      "return",
      "inout",
      "mutating",
      "nonmutating",
      "isolated",
      "nonisolated",
      "catch",
      "do",
      "rethrows",
      "throw",
      "throws",
      "async",
      "await",
      "try",
      "didSet",
      "get",
      "set",
      "willSet",
      "assignment",
      "associativity",
      "infix",
      "left",
      "none",
      "operator",
      "postfix",
      "precedence",
      "precedencegroup",
      "prefix",
      "right",
      "Any",
      "AnyObject",
      "Type",
      "dynamicType",
      "Self",
      "Protocol",
      "__COLUMN__",
      "__FILE__",
      "__FUNCTION__",
      "__LINE__"
    ]);
    definingKeywords = wordSet(["var", "let", "actor", "class", "enum", "extension", "import", "protocol", "struct", "func", "typealias", "associatedtype", "for"]);
    atoms13 = wordSet(["true", "false", "nil", "self", "super", "_"]);
    types4 = wordSet([
      "Array",
      "Bool",
      "Character",
      "Dictionary",
      "Double",
      "Float",
      "Int",
      "Int8",
      "Int16",
      "Int32",
      "Int64",
      "Never",
      "Optional",
      "Set",
      "String",
      "UInt8",
      "UInt16",
      "UInt32",
      "UInt64",
      "Void"
    ]);
    operators7 = "+-/*%=|&<>~^?!";
    punc = ":;,.(){}[]";
    binary = /^\-?0b[01][01_]*/;
    octal = /^\-?0o[0-7][0-7_]*/;
    hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
    decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
    identifier7 = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
    property2 = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
    instruction = /^\#[A-Za-z]+/;
    attribute2 = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
    swift = {
      name: "swift",
      startState: function() {
        return {
          prev: null,
          context: null,
          indented: 0,
          tokenize: []
        };
      },
      token: function(stream, state) {
        var prev = state.prev;
        state.prev = null;
        var tokenize6 = state.tokenize[state.tokenize.length - 1] || tokenBase34;
        var style2 = tokenize6(stream, state, prev);
        if (!style2 || style2 == "comment") state.prev = prev;
        else if (!state.prev) state.prev = style2;
        if (style2 == "punctuation") {
          var bracket2 = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
          if (bracket2) (bracket2[1] ? popContext10 : pushContext10)(state, stream);
        }
        return style2;
      },
      indent: function(state, textAfter, iCx) {
        var cx2 = state.context;
        if (!cx2) return 0;
        var closing4 = /^[\]\}\)]/.test(textAfter);
        if (cx2.align != null) return cx2.align - (closing4 ? 1 : 0);
        return cx2.indented + (closing4 ? 0 : iCx.unit);
      },
      languageData: {
        indentOnInput: /^\s*[\)\}\]]$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/stex.js
var stex_exports = {};
__export(stex_exports, {
  stex: () => stex,
  stexMath: () => stexMath
});
function mkStex(mathMode) {
  function pushCommand(state, command3) {
    state.cmdState.push(command3);
  }
  function peekCommand(state) {
    if (state.cmdState.length > 0) {
      return state.cmdState[state.cmdState.length - 1];
    } else {
      return null;
    }
  }
  function popCommand(state) {
    var plug = state.cmdState.pop();
    if (plug) {
      plug.closeBracket();
    }
  }
  function getMostPowerful(state) {
    var context = state.cmdState;
    for (var i = context.length - 1; i >= 0; i--) {
      var plug = context[i];
      if (plug.name == "DEFAULT") {
        continue;
      }
      return plug;
    }
    return { styleIdentifier: function() {
      return null;
    } };
  }
  function addPluginPattern(pluginName2, cmdStyle, styles2) {
    return function() {
      this.name = pluginName2;
      this.bracketNo = 0;
      this.style = cmdStyle;
      this.styles = styles2;
      this.argument = null;
      this.styleIdentifier = function() {
        return this.styles[this.bracketNo - 1] || null;
      };
      this.openBracket = function() {
        this.bracketNo++;
        return "bracket";
      };
      this.closeBracket = function() {
      };
    };
  }
  var plugins = {};
  plugins["importmodule"] = addPluginPattern("importmodule", "tag", ["string", "builtin"]);
  plugins["documentclass"] = addPluginPattern("documentclass", "tag", ["", "atom"]);
  plugins["usepackage"] = addPluginPattern("usepackage", "tag", ["atom"]);
  plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
  plugins["end"] = addPluginPattern("end", "tag", ["atom"]);
  plugins["label"] = addPluginPattern("label", "tag", ["atom"]);
  plugins["ref"] = addPluginPattern("ref", "tag", ["atom"]);
  plugins["eqref"] = addPluginPattern("eqref", "tag", ["atom"]);
  plugins["cite"] = addPluginPattern("cite", "tag", ["atom"]);
  plugins["bibitem"] = addPluginPattern("bibitem", "tag", ["atom"]);
  plugins["Bibitem"] = addPluginPattern("Bibitem", "tag", ["atom"]);
  plugins["RBibitem"] = addPluginPattern("RBibitem", "tag", ["atom"]);
  plugins["DEFAULT"] = function() {
    this.name = "DEFAULT";
    this.style = "tag";
    this.styleIdentifier = this.openBracket = this.closeBracket = function() {
    };
  };
  function setState(state, f) {
    state.f = f;
  }
  function normal4(source, state) {
    var plug;
    if (source.match(/^\\[a-zA-Z@\xc0-\u1fff\u2060-\uffff]+/)) {
      var cmdName = source.current().slice(1);
      plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins["DEFAULT"];
      plug = new plug();
      pushCommand(state, plug);
      setState(state, beginParams);
      return plug.style;
    }
    if (source.match(/^\\[$&%#{}_]/)) {
      return "tag";
    }
    if (source.match(/^\\[,;!\/\\]/)) {
      return "tag";
    }
    if (source.match("\\[")) {
      setState(state, function(source2, state2) {
        return inMathMode(source2, state2, "\\]");
      });
      return "keyword";
    }
    if (source.match("\\(")) {
      setState(state, function(source2, state2) {
        return inMathMode(source2, state2, "\\)");
      });
      return "keyword";
    }
    if (source.match("$$")) {
      setState(state, function(source2, state2) {
        return inMathMode(source2, state2, "$$");
      });
      return "keyword";
    }
    if (source.match("$")) {
      setState(state, function(source2, state2) {
        return inMathMode(source2, state2, "$");
      });
      return "keyword";
    }
    var ch2 = source.next();
    if (ch2 == "%") {
      source.skipToEnd();
      return "comment";
    } else if (ch2 == "}" || ch2 == "]") {
      plug = peekCommand(state);
      if (plug) {
        plug.closeBracket(ch2);
        setState(state, beginParams);
      } else {
        return "error";
      }
      return "bracket";
    } else if (ch2 == "{" || ch2 == "[") {
      plug = plugins["DEFAULT"];
      plug = new plug();
      pushCommand(state, plug);
      return "bracket";
    } else if (/\d/.test(ch2)) {
      source.eatWhile(/[\w.%]/);
      return "atom";
    } else {
      source.eatWhile(/[\w\-_]/);
      plug = getMostPowerful(state);
      if (plug.name == "begin") {
        plug.argument = source.current();
      }
      return plug.styleIdentifier();
    }
  }
  function inMathMode(source, state, endModeSeq) {
    if (source.eatSpace()) {
      return null;
    }
    if (endModeSeq && source.match(endModeSeq)) {
      setState(state, normal4);
      return "keyword";
    }
    if (source.match(/^\\[a-zA-Z@]+/)) {
      return "tag";
    }
    if (source.match(/^[a-zA-Z]+/)) {
      return "variableName.special";
    }
    if (source.match(/^\\[$&%#{}_]/)) {
      return "tag";
    }
    if (source.match(/^\\[,;!\/]/)) {
      return "tag";
    }
    if (source.match(/^[\^_&]/)) {
      return "tag";
    }
    if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
      return null;
    }
    if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
      return "number";
    }
    var ch2 = source.next();
    if (ch2 == "{" || ch2 == "}" || ch2 == "[" || ch2 == "]" || ch2 == "(" || ch2 == ")") {
      return "bracket";
    }
    if (ch2 == "%") {
      source.skipToEnd();
      return "comment";
    }
    return "error";
  }
  function beginParams(source, state) {
    var ch2 = source.peek(), lastPlug;
    if (ch2 == "{" || ch2 == "[") {
      lastPlug = peekCommand(state);
      lastPlug.openBracket(ch2);
      source.eat(ch2);
      setState(state, normal4);
      return "bracket";
    }
    if (/[ \t\r]/.test(ch2)) {
      source.eat(ch2);
      return null;
    }
    setState(state, normal4);
    popCommand(state);
    return normal4(source, state);
  }
  return {
    name: "stex",
    startState: function() {
      var f = mathMode ? function(source, state) {
        return inMathMode(source, state);
      } : normal4;
      return {
        cmdState: [],
        f
      };
    },
    copyState: function(s) {
      return {
        cmdState: s.cmdState.slice(),
        f: s.f
      };
    },
    token: function(stream, state) {
      return state.f(stream, state);
    },
    blankLine: function(state) {
      state.f = normal4;
      state.cmdState.length = 0;
    },
    languageData: {
      commentTokens: { line: "%" }
    }
  };
}
var stex, stexMath;
var init_stex = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/stex.js"() {
    stex = mkStex(false);
    stexMath = mkStex(true);
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/verilog.js
var verilog_exports = {};
__export(verilog_exports, {
  tlv: () => tlv,
  verilog: () => verilog
});
function mkVerilog(parserConfig4) {
  var statementIndentUnit2 = parserConfig4.statementIndentUnit, dontAlignCalls = parserConfig4.dontAlignCalls, noIndentKeywords = parserConfig4.noIndentKeywords || [], multiLineStrings5 = parserConfig4.multiLineStrings, hooks4 = parserConfig4.hooks || {};
  function words22(str) {
    var obj = {}, words23 = str.split(" ");
    for (var i2 = 0; i2 < words23.length; ++i2) obj[words23[i2]] = true;
    return obj;
  }
  var keywords49 = words22(
    "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor"
  );
  var isOperatorChar17 = /[\+\-\*\/!~&|^%=?:]/;
  var isBracketChar = /[\[\]{}()]/;
  var unsignedNumber = /\d[0-9_]*/;
  var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
  var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
  var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
  var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
  var realLiteral = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;
  var closingBracketOrWord = /^((\w+)|[)}\]])/;
  var closingBracket = /[)}\]]/;
  var curPunc15;
  var curKeyword;
  var blockKeywords6 = words22(
    "case checker class clocking config function generate interface module package primitive program property specify sequence table task"
  );
  var openClose = {};
  for (var keyword3 in blockKeywords6) {
    openClose[keyword3] = "end" + keyword3;
  }
  openClose["begin"] = "end";
  openClose["casex"] = "endcase";
  openClose["casez"] = "endcase";
  openClose["do"] = "while";
  openClose["fork"] = "join;join_any;join_none";
  openClose["covergroup"] = "endgroup";
  for (var i in noIndentKeywords) {
    var keyword3 = noIndentKeywords[i];
    if (openClose[keyword3]) {
      openClose[keyword3] = void 0;
    }
  }
  var statementKeywords = words22("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");
  function tokenBase48(stream, state) {
    var ch2 = stream.peek(), style2;
    if (hooks4[ch2] && (style2 = hooks4[ch2](stream, state)) != false) return style2;
    if (hooks4.tokenBase && (style2 = hooks4.tokenBase(stream, state)) != false)
      return style2;
    if (/[,;:\.]/.test(ch2)) {
      curPunc15 = stream.next();
      return null;
    }
    if (isBracketChar.test(ch2)) {
      curPunc15 = stream.next();
      return "bracket";
    }
    if (ch2 == "`") {
      stream.next();
      if (stream.eatWhile(/[\w\$_]/)) {
        return "def";
      } else {
        return null;
      }
    }
    if (ch2 == "$") {
      stream.next();
      if (stream.eatWhile(/[\w\$_]/)) {
        return "meta";
      } else {
        return null;
      }
    }
    if (ch2 == "#") {
      stream.next();
      stream.eatWhile(/[\d_.]/);
      return "def";
    }
    if (ch2 == '"') {
      stream.next();
      state.tokenize = tokenString31(ch2);
      return state.tokenize(stream, state);
    }
    if (ch2 == "/") {
      stream.next();
      if (stream.eat("*")) {
        state.tokenize = tokenComment22;
        return tokenComment22(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
      stream.backUp(1);
    }
    if (stream.match(realLiteral) || stream.match(decimalLiteral) || stream.match(binaryLiteral) || stream.match(octLiteral) || stream.match(hexLiteral) || stream.match(unsignedNumber) || stream.match(realLiteral)) {
      return "number";
    }
    if (stream.eatWhile(isOperatorChar17)) {
      return "meta";
    }
    if (stream.eatWhile(/[\w\$_]/)) {
      var cur2 = stream.current();
      if (keywords49[cur2]) {
        if (openClose[cur2]) {
          curPunc15 = "newblock";
        }
        if (statementKeywords[cur2]) {
          curPunc15 = "newstatement";
        }
        curKeyword = cur2;
        return "keyword";
      }
      return "variable";
    }
    stream.next();
    return null;
  }
  function tokenString31(quote4) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote4 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !(escaped || multiLineStrings5))
        state.tokenize = tokenBase48;
      return "string";
    };
  }
  function tokenComment22(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase48;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function Context17(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext18(state, col, type7) {
    var indent7 = state.indented;
    var c2 = new Context17(indent7, col, type7, null, state.context);
    return state.context = c2;
  }
  function popContext18(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}") {
      state.indented = state.context.indented;
    }
    return state.context = state.context.prev;
  }
  function isClosing(text5, contextClosing) {
    if (text5 == contextClosing) {
      return true;
    } else {
      var closingKeywords = contextClosing.split(";");
      for (var i2 in closingKeywords) {
        if (text5 == closingKeywords[i2]) {
          return true;
        }
      }
      return false;
    }
  }
  function buildElectricInputRegEx2() {
    var allClosings = [];
    for (var i2 in openClose) {
      if (openClose[i2]) {
        var closings = openClose[i2].split(";");
        for (var j in closings) {
          allClosings.push(closings[j]);
        }
      }
    }
    var re = new RegExp("[{}()\\[\\]]|(" + allClosings.join("|") + ")$");
    return re;
  }
  return {
    name: "verilog",
    startState: function(indentUnit2) {
      var state = {
        tokenize: null,
        context: new Context17(-indentUnit2, 0, "top", false),
        indented: 0,
        startOfLine: true
      };
      if (hooks4.startState) hooks4.startState(state);
      return state;
    },
    token: function(stream, state) {
      var ctx = state.context;
      if (stream.sol()) {
        if (ctx.align == null) ctx.align = false;
        state.indented = stream.indentation();
        state.startOfLine = true;
      }
      if (hooks4.token) {
        var style2 = hooks4.token(stream, state);
        if (style2 !== void 0) {
          return style2;
        }
      }
      if (stream.eatSpace()) return null;
      curPunc15 = null;
      curKeyword = null;
      var style2 = (state.tokenize || tokenBase48)(stream, state);
      if (style2 == "comment" || style2 == "meta" || style2 == "variable") return style2;
      if (ctx.align == null) ctx.align = true;
      if (curPunc15 == ctx.type) {
        popContext18(state);
      } else if (curPunc15 == ";" && ctx.type == "statement" || ctx.type && isClosing(curKeyword, ctx.type)) {
        ctx = popContext18(state);
        while (ctx && ctx.type == "statement") ctx = popContext18(state);
      } else if (curPunc15 == "{") {
        pushContext18(state, stream.column(), "}");
      } else if (curPunc15 == "[") {
        pushContext18(state, stream.column(), "]");
      } else if (curPunc15 == "(") {
        pushContext18(state, stream.column(), ")");
      } else if (ctx && ctx.type == "endcase" && curPunc15 == ":") {
        pushContext18(state, stream.column(), "statement");
      } else if (curPunc15 == "newstatement") {
        pushContext18(state, stream.column(), "statement");
      } else if (curPunc15 == "newblock") {
        if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) {
        } else if (curKeyword == "task" && ctx && ctx.type == "statement") {
        } else {
          var close = openClose[curKeyword];
          pushContext18(state, stream.column(), close);
        }
      }
      state.startOfLine = false;
      return style2;
    },
    indent: function(state, textAfter, cx2) {
      if (state.tokenize != tokenBase48 && state.tokenize != null) return null;
      if (hooks4.indent) {
        var fromHook = hooks4.indent(state);
        if (fromHook >= 0) return fromHook;
      }
      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
      if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
      var closing4 = false;
      var possibleClosing = textAfter.match(closingBracketOrWord);
      if (possibleClosing)
        closing4 = isClosing(possibleClosing[0], ctx.type);
      if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit2 || cx2.unit);
      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing4 ? 0 : 1);
      else if (ctx.type == ")" && !closing4) return ctx.indented + (statementIndentUnit2 || cx2.unit);
      else return ctx.indented + (closing4 ? 0 : cx2.unit);
    },
    languageData: {
      indentOnInput: buildElectricInputRegEx2(),
      commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
    }
  };
}
var verilog, tlvIdentifierStyle, tlvScopePrefixChars, tlvIndentUnit, tlvTrackStatements, tlvIdentMatch, tlvLineIndentationMatch, tlvCommentMatch, tlv;
var init_verilog = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/verilog.js"() {
    verilog = mkVerilog({});
    tlvIdentifierStyle = {
      "|": "link",
      ">": "property",
      // Should condition this off for > TLV 1c.
      "$": "variable",
      "$$": "variable",
      "?$": "qualifier",
      "?*": "qualifier",
      "-": "contentSeparator",
      "/": "property",
      "/-": "property",
      "@": "variableName.special",
      "@-": "variableName.special",
      "@++": "variableName.special",
      "@+=": "variableName.special",
      "@+=-": "variableName.special",
      "@--": "variableName.special",
      "@-=": "variableName.special",
      "%+": "tag",
      "%-": "tag",
      "%": "tag",
      ">>": "tag",
      "<<": "tag",
      "<>": "tag",
      "#": "tag",
      // Need to choose a style for this.
      "^": "attribute",
      "^^": "attribute",
      "^!": "attribute",
      "*": "variable",
      "**": "variable",
      "\\": "keyword",
      '"': "comment"
    };
    tlvScopePrefixChars = {
      "/": "beh-hier",
      ">": "beh-hier",
      "-": "phys-hier",
      "|": "pipe",
      "?": "when",
      "@": "stage",
      "\\": "keyword"
    };
    tlvIndentUnit = 3;
    tlvTrackStatements = false;
    tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;
    tlvLineIndentationMatch = /^[! ] */;
    tlvCommentMatch = /^\/[\/\*]/;
    tlv = mkVerilog({
      hooks: {
        electricInput: false,
        // Return undefined for verilog tokenizing, or style for TLV token (null not used).
        // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
        // can be enabled with the definition of cm-tlv-* styles, including highlighting for:
        //   - M4 tokens
        //   - TLV scope indentation
        //   - Statement delimitation (enabled by tlvTrackStatements)
        token: function(stream, state) {
          var style2 = void 0;
          var match2;
          if (stream.sol() && !state.tlvInBlockComment) {
            if (stream.peek() == "\\") {
              style2 = "def";
              stream.skipToEnd();
              if (stream.string.match(/\\SV/)) {
                state.tlvCodeActive = false;
              } else if (stream.string.match(/\\TLV/)) {
                state.tlvCodeActive = true;
              }
            }
            if (state.tlvCodeActive && stream.pos == 0 && state.indented == 0 && (match2 = stream.match(tlvLineIndentationMatch, false))) {
              state.indented = match2[0].length;
            }
            var indented = state.indented;
            var depth = indented / tlvIndentUnit;
            if (depth <= state.tlvIndentationStyle.length) {
              var blankline = stream.string.length == indented;
              var chPos = depth * tlvIndentUnit;
              if (chPos < stream.string.length) {
                var bodyString = stream.string.slice(chPos);
                var ch2 = bodyString[0];
                if (tlvScopePrefixChars[ch2] && ((match2 = bodyString.match(tlvIdentMatch)) && tlvIdentifierStyle[match2[1]])) {
                  indented += tlvIndentUnit;
                  if (!(ch2 == "\\" && chPos > 0)) {
                    state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch2];
                    if (tlvTrackStatements) {
                      state.statementComment = false;
                    }
                    depth++;
                  }
                }
              }
              if (!blankline) {
                while (state.tlvIndentationStyle.length > depth) {
                  state.tlvIndentationStyle.pop();
                }
              }
            }
            state.tlvNextIndent = indented;
          }
          if (state.tlvCodeActive) {
            var beginStatement = false;
            if (tlvTrackStatements) {
              beginStatement = stream.peek() != " " && // not a space
              style2 === void 0 && // not a region identifier
              !state.tlvInBlockComment && // not in block comment
              //!stream.match(tlvCommentMatch, false) && // not comment start
              stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit;
              if (beginStatement) {
                if (state.statementComment) {
                  beginStatement = false;
                }
                state.statementComment = stream.match(tlvCommentMatch, false);
              }
            }
            var match2;
            if (style2 !== void 0) {
            } else if (state.tlvInBlockComment) {
              if (stream.match(/^.*?\*\//)) {
                state.tlvInBlockComment = false;
                if (tlvTrackStatements && !stream.eol()) {
                  state.statementComment = false;
                }
              } else {
                stream.skipToEnd();
              }
              style2 = "comment";
            } else if ((match2 = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {
              if (match2[0] == "//") {
                stream.skipToEnd();
              } else {
                state.tlvInBlockComment = true;
              }
              style2 = "comment";
            } else if (match2 = stream.match(tlvIdentMatch)) {
              var prefix2 = match2[1];
              var mnemonic = match2[2];
              if (
                // is identifier prefix
                tlvIdentifierStyle.hasOwnProperty(prefix2) && // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
                (mnemonic.length > 0 || stream.eol())
              ) {
                style2 = tlvIdentifierStyle[prefix2];
              } else {
                stream.backUp(stream.current().length - 1);
              }
            } else if (stream.match(/^\t+/)) {
              style2 = "invalid";
            } else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
              style2 = "meta";
            } else if (match2 = stream.match(/^[mM]4([\+_])?[\w\d_]*/)) {
              style2 = match2[1] == "+" ? "keyword.special" : "keyword";
            } else if (stream.match(/^ +/)) {
              if (stream.eol()) {
                style2 = "error";
              }
            } else if (stream.match(/^[\w\d_]+/)) {
              style2 = "number";
            } else {
              stream.next();
            }
          } else {
            if (stream.match(/^[mM]4([\w\d_]*)/)) {
              style2 = "keyword";
            }
          }
          return style2;
        },
        indent: function(state) {
          return state.tlvCodeActive == true ? state.tlvNextIndent : -1;
        },
        startState: function(state) {
          state.tlvIndentationStyle = [];
          state.tlvCodeActive = true;
          state.tlvNextIndent = -1;
          state.tlvInBlockComment = false;
          if (tlvTrackStatements) {
            state.statementComment = false;
          }
        }
      }
    });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/tcl.js
var tcl_exports = {};
__export(tcl_exports, {
  tcl: () => tcl
});
function parseWords2(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function chain8(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenBase35(stream, state) {
  var beforeParams = state.beforeParams;
  state.beforeParams = false;
  var ch2 = stream.next();
  if ((ch2 == '"' || ch2 == "'") && state.inParams) {
    return chain8(stream, state, tokenString21(ch2));
  } else if (/[\[\]{}\(\),;\.]/.test(ch2)) {
    if (ch2 == "(" && beforeParams) state.inParams = true;
    else if (ch2 == ")") state.inParams = false;
    return null;
  } else if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  } else if (ch2 == "#") {
    if (stream.eat("*"))
      return chain8(stream, state, tokenComment15);
    if (ch2 == "#" && stream.match(/ *\[ *\[/))
      return chain8(stream, state, tokenUnparsed2);
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == '"') {
    stream.skipTo(/"/);
    return "comment";
  } else if (ch2 == "$") {
    stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
    stream.eatWhile(/}/);
    state.beforeParams = true;
    return "builtin";
  } else if (isOperatorChar10.test(ch2)) {
    stream.eatWhile(isOperatorChar10);
    return "comment";
  } else {
    stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
    var word = stream.current().toLowerCase();
    if (keywords36 && keywords36.propertyIsEnumerable(word))
      return "keyword";
    if (functions2 && functions2.propertyIsEnumerable(word)) {
      state.beforeParams = true;
      return "keyword";
    }
    return null;
  }
}
function tokenString21(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2) state.tokenize = tokenBase35;
    return "string";
  };
}
function tokenComment15(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "#" && maybeEnd) {
      state.tokenize = tokenBase35;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenUnparsed2(stream, state) {
  var maybeEnd = 0, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "#" && maybeEnd == 2) {
      state.tokenize = tokenBase35;
      break;
    }
    if (ch2 == "]")
      maybeEnd++;
    else if (ch2 != " ")
      maybeEnd = 0;
  }
  return "meta";
}
var keywords36, functions2, isOperatorChar10, tcl;
var init_tcl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/tcl.js"() {
    keywords36 = parseWords2("Tcl safe after append array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd close concat continue dde eof encoding error eval exec exit expr fblocked fconfigure fcopy file fileevent filename filename flush for foreach format gets glob global history http if incr info interp join lappend lindex linsert list llength load lrange lreplace lsearch lset lsort memory msgcat namespace open package parray pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp registry regsub rename resource return scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest tclvars tell time trace unknown unset update uplevel upvar variable vwait");
    functions2 = parseWords2("if elseif else and not or eq ne in ni for foreach while switch");
    isOperatorChar10 = /[+\-*&%=<>!?^\/\|]/;
    tcl = {
      name: "tcl",
      startState: function() {
        return {
          tokenize: tokenBase35,
          beforeParams: false,
          inParams: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/textile.js
var textile_exports = {};
__export(textile_exports, {
  textile: () => textile
});
function startNewLine(stream, state) {
  state.mode = Modes.newLayout;
  state.tableHeading = false;
  if (state.layoutType === "definitionList" && state.spanningLayout && stream.match(RE("definitionListEnd"), false))
    state.spanningLayout = false;
}
function handlePhraseModifier(stream, state, ch2) {
  if (ch2 === "_") {
    if (stream.eat("_"))
      return togglePhraseModifier(stream, state, "italic", /__/, 2);
    else
      return togglePhraseModifier(stream, state, "em", /_/, 1);
  }
  if (ch2 === "*") {
    if (stream.eat("*")) {
      return togglePhraseModifier(stream, state, "bold", /\*\*/, 2);
    }
    return togglePhraseModifier(stream, state, "strong", /\*/, 1);
  }
  if (ch2 === "[") {
    if (stream.match(/\d+\]/)) state.footCite = true;
    return tokenStyles(state);
  }
  if (ch2 === "(") {
    var spec = stream.match(/^(r|tm|c)\)/);
    if (spec)
      return TOKEN_STYLES.specialChar;
  }
  if (ch2 === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
    return TOKEN_STYLES.html;
  if (ch2 === "?" && stream.eat("?"))
    return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);
  if (ch2 === "=" && stream.eat("="))
    return togglePhraseModifier(stream, state, "notextile", /==/, 2);
  if (ch2 === "-" && !stream.eat("-"))
    return togglePhraseModifier(stream, state, "deletion", /-/, 1);
  if (ch2 === "+")
    return togglePhraseModifier(stream, state, "addition", /\+/, 1);
  if (ch2 === "~")
    return togglePhraseModifier(stream, state, "sub", /~/, 1);
  if (ch2 === "^")
    return togglePhraseModifier(stream, state, "sup", /\^/, 1);
  if (ch2 === "%")
    return togglePhraseModifier(stream, state, "span", /%/, 1);
  if (ch2 === "@")
    return togglePhraseModifier(stream, state, "code", /@/, 1);
  if (ch2 === "!") {
    var type7 = togglePhraseModifier(stream, state, "image", /(?:\([^\)]+\))?!/, 1);
    stream.match(/^:\S+/);
    return type7;
  }
  return tokenStyles(state);
}
function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {
  var charBefore2 = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;
  var charAfter2 = stream.peek();
  if (state[phraseModifier]) {
    if ((!charAfter2 || /\W/.test(charAfter2)) && charBefore2 && /\S/.test(charBefore2)) {
      var type7 = tokenStyles(state);
      state[phraseModifier] = false;
      return type7;
    }
  } else if ((!charBefore2 || /\W/.test(charBefore2)) && charAfter2 && /\S/.test(charAfter2) && stream.match(new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"), false)) {
    state[phraseModifier] = true;
    state.mode = Modes.attributes;
  }
  return tokenStyles(state);
}
function tokenStyles(state) {
  var disabled = textileDisabled(state);
  if (disabled) return disabled;
  var styles2 = [];
  if (state.layoutType) styles2.push(TOKEN_STYLES[state.layoutType]);
  styles2 = styles2.concat(activeStyles(
    state,
    "addition",
    "bold",
    "cite",
    "code",
    "deletion",
    "em",
    "footCite",
    "image",
    "italic",
    "link",
    "span",
    "strong",
    "sub",
    "sup",
    "table",
    "tableHeading"
  ));
  if (state.layoutType === "header")
    styles2.push(TOKEN_STYLES.header + "-" + state.header);
  return styles2.length ? styles2.join(" ") : null;
}
function textileDisabled(state) {
  var type7 = state.layoutType;
  switch (type7) {
    case "notextile":
    case "code":
    case "pre":
      return TOKEN_STYLES[type7];
    default:
      if (state.notextile)
        return TOKEN_STYLES.notextile + (type7 ? " " + TOKEN_STYLES[type7] : "");
      return null;
  }
}
function activeStyles(state) {
  var styles2 = [];
  for (var i = 1; i < arguments.length; ++i) {
    if (state[arguments[i]])
      styles2.push(TOKEN_STYLES[arguments[i]]);
  }
  return styles2;
}
function blankLine2(state) {
  var spanningLayout = state.spanningLayout, type7 = state.layoutType;
  for (var key in state) if (state.hasOwnProperty(key))
    delete state[key];
  state.mode = Modes.newLayout;
  if (spanningLayout) {
    state.layoutType = type7;
    state.spanningLayout = true;
  }
}
function RE(name2) {
  return REs.cache[name2] || (REs.cache[name2] = REs.createRe(name2));
}
var TOKEN_STYLES, REs, Modes, textile;
var init_textile = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/textile.js"() {
    TOKEN_STYLES = {
      addition: "inserted",
      attributes: "propertyName",
      bold: "strong",
      cite: "keyword",
      code: "monospace",
      definitionList: "list",
      deletion: "deleted",
      div: "punctuation",
      em: "emphasis",
      footnote: "variable",
      footCite: "qualifier",
      header: "heading",
      html: "comment",
      image: "atom",
      italic: "emphasis",
      link: "link",
      linkDefinition: "link",
      list1: "list",
      list2: "list.special",
      list3: "list",
      notextile: "string.special",
      pre: "operator",
      p: "content",
      quote: "bracket",
      span: "quote",
      specialChar: "character",
      strong: "strong",
      sub: "content.special",
      sup: "content.special",
      table: "variableName.special",
      tableHeading: "operator"
    };
    REs = {
      cache: {},
      single: {
        bc: "bc",
        bq: "bq",
        definitionList: /- .*?:=+/,
        definitionListEnd: /.*=:\s*$/,
        div: "div",
        drawTable: /\|.*\|/,
        foot: /fn\d+/,
        header: /h[1-6]/,
        html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
        link: /[^"]+":\S/,
        linkDefinition: /\[[^\s\]]+\]\S+/,
        list: /(?:#+|\*+)/,
        notextile: "notextile",
        para: "p",
        pre: "pre",
        table: "table",
        tableCellAttributes: /[\/\\]\d+/,
        tableHeading: /\|_\./,
        tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
        text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
      },
      attributes: {
        align: /(?:<>|<|>|=)/,
        selector: /\([^\(][^\)]+\)/,
        lang: /\[[^\[\]]+\]/,
        pad: /(?:\(+|\)+){1,2}/,
        css: /\{[^\}]+\}/
      },
      createRe: function(name2) {
        switch (name2) {
          case "drawTable":
            return REs.makeRe("^", REs.single.drawTable, "$");
          case "html":
            return REs.makeRe("^", REs.single.html, "(?:", REs.single.html, ")*", "$");
          case "linkDefinition":
            return REs.makeRe("^", REs.single.linkDefinition, "$");
          case "listLayout":
            return REs.makeRe("^", REs.single.list, RE("allAttributes"), "*\\s+");
          case "tableCellAttributes":
            return REs.makeRe("^", REs.choiceRe(
              REs.single.tableCellAttributes,
              RE("allAttributes")
            ), "+\\.");
          case "type":
            return REs.makeRe("^", RE("allTypes"));
          case "typeLayout":
            return REs.makeRe(
              "^",
              RE("allTypes"),
              RE("allAttributes"),
              "*\\.\\.?",
              "(\\s+|$)"
            );
          case "attributes":
            return REs.makeRe("^", RE("allAttributes"), "+");
          case "allTypes":
            return REs.choiceRe(
              REs.single.div,
              REs.single.foot,
              REs.single.header,
              REs.single.bc,
              REs.single.bq,
              REs.single.notextile,
              REs.single.pre,
              REs.single.table,
              REs.single.para
            );
          case "allAttributes":
            return REs.choiceRe(
              REs.attributes.selector,
              REs.attributes.css,
              REs.attributes.lang,
              REs.attributes.align,
              REs.attributes.pad
            );
          default:
            return REs.makeRe("^", REs.single[name2]);
        }
      },
      makeRe: function() {
        var pattern = "";
        for (var i = 0; i < arguments.length; ++i) {
          var arg = arguments[i];
          pattern += typeof arg === "string" ? arg : arg.source;
        }
        return new RegExp(pattern);
      },
      choiceRe: function() {
        var parts = [arguments[0]];
        for (var i = 1; i < arguments.length; ++i) {
          parts[i * 2 - 1] = "|";
          parts[i * 2] = arguments[i];
        }
        parts.unshift("(?:");
        parts.push(")");
        return REs.makeRe.apply(null, parts);
      }
    };
    Modes = {
      newLayout: function(stream, state) {
        if (stream.match(RE("typeLayout"), false)) {
          state.spanningLayout = false;
          return (state.mode = Modes.blockType)(stream, state);
        }
        var newMode;
        if (!textileDisabled(state)) {
          if (stream.match(RE("listLayout"), false))
            newMode = Modes.list;
          else if (stream.match(RE("drawTable"), false))
            newMode = Modes.table;
          else if (stream.match(RE("linkDefinition"), false))
            newMode = Modes.linkDefinition;
          else if (stream.match(RE("definitionList")))
            newMode = Modes.definitionList;
          else if (stream.match(RE("html"), false))
            newMode = Modes.html;
        }
        return (state.mode = newMode || Modes.text)(stream, state);
      },
      blockType: function(stream, state) {
        var match2, type7;
        state.layoutType = null;
        if (match2 = stream.match(RE("type")))
          type7 = match2[0];
        else
          return (state.mode = Modes.text)(stream, state);
        if (match2 = type7.match(RE("header"))) {
          state.layoutType = "header";
          state.header = parseInt(match2[0][1]);
        } else if (type7.match(RE("bq"))) {
          state.layoutType = "quote";
        } else if (type7.match(RE("bc"))) {
          state.layoutType = "code";
        } else if (type7.match(RE("foot"))) {
          state.layoutType = "footnote";
        } else if (type7.match(RE("notextile"))) {
          state.layoutType = "notextile";
        } else if (type7.match(RE("pre"))) {
          state.layoutType = "pre";
        } else if (type7.match(RE("div"))) {
          state.layoutType = "div";
        } else if (type7.match(RE("table"))) {
          state.layoutType = "table";
        }
        state.mode = Modes.attributes;
        return tokenStyles(state);
      },
      text: function(stream, state) {
        if (stream.match(RE("text"))) return tokenStyles(state);
        var ch2 = stream.next();
        if (ch2 === '"')
          return (state.mode = Modes.link)(stream, state);
        return handlePhraseModifier(stream, state, ch2);
      },
      attributes: function(stream, state) {
        state.mode = Modes.layoutLength;
        if (stream.match(RE("attributes")))
          return TOKEN_STYLES.attributes;
        else
          return tokenStyles(state);
      },
      layoutLength: function(stream, state) {
        if (stream.eat(".") && stream.eat("."))
          state.spanningLayout = true;
        state.mode = Modes.text;
        return tokenStyles(state);
      },
      list: function(stream, state) {
        var match2 = stream.match(RE("list"));
        state.listDepth = match2[0].length;
        var listMod = (state.listDepth - 1) % 3;
        if (!listMod)
          state.layoutType = "list1";
        else if (listMod === 1)
          state.layoutType = "list2";
        else
          state.layoutType = "list3";
        state.mode = Modes.attributes;
        return tokenStyles(state);
      },
      link: function(stream, state) {
        state.mode = Modes.text;
        if (stream.match(RE("link"))) {
          stream.match(/\S+/);
          return TOKEN_STYLES.link;
        }
        return tokenStyles(state);
      },
      linkDefinition: function(stream) {
        stream.skipToEnd();
        return TOKEN_STYLES.linkDefinition;
      },
      definitionList: function(stream, state) {
        stream.match(RE("definitionList"));
        state.layoutType = "definitionList";
        if (stream.match(/\s*$/))
          state.spanningLayout = true;
        else
          state.mode = Modes.attributes;
        return tokenStyles(state);
      },
      html: function(stream) {
        stream.skipToEnd();
        return TOKEN_STYLES.html;
      },
      table: function(stream, state) {
        state.layoutType = "table";
        return (state.mode = Modes.tableCell)(stream, state);
      },
      tableCell: function(stream, state) {
        if (stream.match(RE("tableHeading")))
          state.tableHeading = true;
        else
          stream.eat("|");
        state.mode = Modes.tableCellAttributes;
        return tokenStyles(state);
      },
      tableCellAttributes: function(stream, state) {
        state.mode = Modes.tableText;
        if (stream.match(RE("tableCellAttributes")))
          return TOKEN_STYLES.attributes;
        else
          return tokenStyles(state);
      },
      tableText: function(stream, state) {
        if (stream.match(RE("tableText")))
          return tokenStyles(state);
        if (stream.peek() === "|") {
          state.mode = Modes.tableCell;
          return tokenStyles(state);
        }
        return handlePhraseModifier(stream, state, stream.next());
      }
    };
    textile = {
      name: "textile",
      startState: function() {
        return { mode: Modes.newLayout };
      },
      token: function(stream, state) {
        if (stream.sol()) startNewLine(stream, state);
        return state.mode(stream, state);
      },
      blankLine: blankLine2
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js
var tiddlywiki_exports = {};
__export(tiddlywiki_exports, {
  tiddlyWiki: () => tiddlyWiki
});
function chain9(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenBase36(stream, state) {
  var sol = stream.sol(), ch2 = stream.peek();
  state.block = false;
  if (sol && /[<\/\*{}\-]/.test(ch2)) {
    if (stream.match(reCodeBlockStart)) {
      state.block = true;
      return chain9(stream, state, twTokenCode);
    }
    if (stream.match(reBlockQuote))
      return "quote";
    if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))
      return "comment";
    if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))
      return "comment";
    if (stream.match(reHR))
      return "contentSeparator";
  }
  stream.next();
  if (sol && /[\/\*!#;:>|]/.test(ch2)) {
    if (ch2 == "!") {
      stream.skipToEnd();
      return "header";
    }
    if (ch2 == "*") {
      stream.eatWhile("*");
      return "comment";
    }
    if (ch2 == "#") {
      stream.eatWhile("#");
      return "comment";
    }
    if (ch2 == ";") {
      stream.eatWhile(";");
      return "comment";
    }
    if (ch2 == ":") {
      stream.eatWhile(":");
      return "comment";
    }
    if (ch2 == ">") {
      stream.eatWhile(">");
      return "quote";
    }
    if (ch2 == "|")
      return "header";
  }
  if (ch2 == "{" && stream.match("{{"))
    return chain9(stream, state, twTokenCode);
  if (/[hf]/i.test(ch2) && /[ti]/i.test(stream.peek()) && stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
    return "link";
  if (ch2 == '"')
    return "string";
  if (ch2 == "~")
    return "brace";
  if (/[\[\]]/.test(ch2) && stream.match(ch2))
    return "brace";
  if (ch2 == "@") {
    stream.eatWhile(isSpaceName);
    return "link";
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/\d/);
    return "number";
  }
  if (ch2 == "/") {
    if (stream.eat("%")) {
      return chain9(stream, state, twTokenComment);
    } else if (stream.eat("/")) {
      return chain9(stream, state, twTokenEm);
    }
  }
  if (ch2 == "_" && stream.eat("_"))
    return chain9(stream, state, twTokenUnderline);
  if (ch2 == "-" && stream.eat("-")) {
    if (stream.peek() != " ")
      return chain9(stream, state, twTokenStrike);
    if (stream.peek() == " ")
      return "brace";
  }
  if (ch2 == "'" && stream.eat("'"))
    return chain9(stream, state, twTokenStrong);
  if (ch2 == "<" && stream.eat("<"))
    return chain9(stream, state, twTokenMacro);
  stream.eatWhile(/[\w\$_]/);
  return textwords.propertyIsEnumerable(stream.current()) ? "keyword" : null;
}
function twTokenComment(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = tokenBase36;
      break;
    }
    maybeEnd = ch2 == "%";
  }
  return "comment";
}
function twTokenStrong(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "'" && maybeEnd) {
      state.tokenize = tokenBase36;
      break;
    }
    maybeEnd = ch2 == "'";
  }
  return "strong";
}
function twTokenCode(stream, state) {
  var sb = state.block;
  if (sb && stream.current()) {
    return "comment";
  }
  if (!sb && stream.match(reUntilCodeStop)) {
    state.tokenize = tokenBase36;
    return "comment";
  }
  if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
    state.tokenize = tokenBase36;
    return "comment";
  }
  stream.next();
  return "comment";
}
function twTokenEm(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = tokenBase36;
      break;
    }
    maybeEnd = ch2 == "/";
  }
  return "emphasis";
}
function twTokenUnderline(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "_" && maybeEnd) {
      state.tokenize = tokenBase36;
      break;
    }
    maybeEnd = ch2 == "_";
  }
  return "link";
}
function twTokenStrike(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "-" && maybeEnd) {
      state.tokenize = tokenBase36;
      break;
    }
    maybeEnd = ch2 == "-";
  }
  return "deleted";
}
function twTokenMacro(stream, state) {
  if (stream.current() == "<<") {
    return "meta";
  }
  var ch2 = stream.next();
  if (!ch2) {
    state.tokenize = tokenBase36;
    return null;
  }
  if (ch2 == ">") {
    if (stream.peek() == ">") {
      stream.next();
      state.tokenize = tokenBase36;
      return "meta";
    }
  }
  stream.eatWhile(/[\w\$_]/);
  return keywords37.propertyIsEnumerable(stream.current()) ? "keyword" : null;
}
var textwords, keywords37, isSpaceName, reHR, reWikiCommentStart, reWikiCommentStop, reBlockQuote, reJsCodeStart, reJsCodeStop, reXmlCodeStart, reXmlCodeStop, reCodeBlockStart, reCodeBlockStop, reUntilCodeStop, tiddlyWiki;
var init_tiddlywiki = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js"() {
    textwords = {};
    keywords37 = {
      "allTags": true,
      "closeAll": true,
      "list": true,
      "newJournal": true,
      "newTiddler": true,
      "permaview": true,
      "saveChanges": true,
      "search": true,
      "slider": true,
      "tabs": true,
      "tag": true,
      "tagging": true,
      "tags": true,
      "tiddler": true,
      "timeline": true,
      "today": true,
      "version": true,
      "option": true,
      "with": true,
      "filter": true
    };
    isSpaceName = /[\w_\-]/i;
    reHR = /^\-\-\-\-+$/;
    reWikiCommentStart = /^\/\*\*\*$/;
    reWikiCommentStop = /^\*\*\*\/$/;
    reBlockQuote = /^<<<$/;
    reJsCodeStart = /^\/\/\{\{\{$/;
    reJsCodeStop = /^\/\/\}\}\}$/;
    reXmlCodeStart = /^<!--\{\{\{-->$/;
    reXmlCodeStop = /^<!--\}\}\}-->$/;
    reCodeBlockStart = /^\{\{\{$/;
    reCodeBlockStop = /^\}\}\}$/;
    reUntilCodeStop = /.*?\}\}\}/;
    tiddlyWiki = {
      name: "tiddlywiki",
      startState: function() {
        return { tokenize: tokenBase36 };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        return style2;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/tiki.js
var tiki_exports = {};
__export(tiki_exports, {
  tiki: () => tiki
});
function inBlock2(style2, terminator, returnTokenizer) {
  return function(stream, state) {
    while (!stream.eol()) {
      if (stream.match(terminator)) {
        state.tokenize = inText;
        break;
      }
      stream.next();
    }
    if (returnTokenizer) state.tokenize = returnTokenizer;
    return style2;
  };
}
function inLine(style2) {
  return function(stream, state) {
    while (!stream.eol()) {
      stream.next();
    }
    state.tokenize = inText;
    return style2;
  };
}
function inText(stream, state) {
  function chain12(parser29) {
    state.tokenize = parser29;
    return parser29(stream, state);
  }
  var sol = stream.sol();
  var ch2 = stream.next();
  switch (ch2) {
    //switch is generally much faster than if, so it is used here
    case "{":
      stream.eat("/");
      stream.eatSpace();
      stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
      state.tokenize = inPlugin;
      return "tag";
    case "_":
      if (stream.eat("_"))
        return chain12(inBlock2("strong", "__", inText));
      break;
    case "'":
      if (stream.eat("'"))
        return chain12(inBlock2("em", "''", inText));
      break;
    case "(":
      if (stream.eat("("))
        return chain12(inBlock2("link", "))", inText));
      break;
    case "[":
      return chain12(inBlock2("url", "]", inText));
      break;
    case "|":
      if (stream.eat("|"))
        return chain12(inBlock2("comment", "||"));
      break;
    case "-":
      if (stream.eat("=")) {
        return chain12(inBlock2("header string", "=-", inText));
      } else if (stream.eat("-")) {
        return chain12(inBlock2("error tw-deleted", "--", inText));
      }
      break;
    case "=":
      if (stream.match("=="))
        return chain12(inBlock2("tw-underline", "===", inText));
      break;
    case ":":
      if (stream.eat(":"))
        return chain12(inBlock2("comment", "::"));
      break;
    case "^":
      return chain12(inBlock2("tw-box", "^"));
      break;
    case "~":
      if (stream.match("np~"))
        return chain12(inBlock2("meta", "~/np~"));
      break;
  }
  if (sol) {
    switch (ch2) {
      case "!":
        if (stream.match("!!!!!")) {
          return chain12(inLine("header string"));
        } else if (stream.match("!!!!")) {
          return chain12(inLine("header string"));
        } else if (stream.match("!!!")) {
          return chain12(inLine("header string"));
        } else if (stream.match("!!")) {
          return chain12(inLine("header string"));
        } else {
          return chain12(inLine("header string"));
        }
        break;
      case "*":
      //unordered list line item, or <li /> at start of line
      case "#":
      //ordered list line item, or <li /> at start of line
      case "+":
        return chain12(inLine("tw-listitem bracket"));
        break;
    }
  }
  return null;
}
function inPlugin(stream, state) {
  var ch2 = stream.next();
  var peek = stream.peek();
  if (ch2 == "}") {
    state.tokenize = inText;
    return "tag";
  } else if (ch2 == "(" || ch2 == ")") {
    return "bracket";
  } else if (ch2 == "=") {
    type6 = "equals";
    if (peek == ">") {
      stream.next();
      peek = stream.peek();
    }
    if (!/[\'\"]/.test(peek)) {
      state.tokenize = inAttributeNoQuote();
    }
    return "operator";
  } else if (/[\'\"]/.test(ch2)) {
    state.tokenize = inAttribute(ch2);
    return state.tokenize(stream, state);
  } else {
    stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
    return "keyword";
  }
}
function inAttribute(quote4) {
  return function(stream, state) {
    while (!stream.eol()) {
      if (stream.next() == quote4) {
        state.tokenize = inPlugin;
        break;
      }
    }
    return "string";
  };
}
function inAttributeNoQuote() {
  return function(stream, state) {
    while (!stream.eol()) {
      var ch2 = stream.next();
      var peek = stream.peek();
      if (ch2 == " " || ch2 == "," || /[ )}]/.test(peek)) {
        state.tokenize = inPlugin;
        break;
      }
    }
    return "string";
  };
}
function pass3() {
  for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);
}
function cont2() {
  pass3.apply(null, arguments);
  return true;
}
function pushContext11(pluginName2, startOfLine2) {
  var noIndent = curState.context && curState.context.noIndent;
  curState.context = {
    prev: curState.context,
    pluginName: pluginName2,
    indent: curState.indented,
    startOfLine: startOfLine2,
    noIndent
  };
}
function popContext11() {
  if (curState.context) curState.context = curState.context.prev;
}
function element(type7) {
  if (type7 == "openPlugin") {
    curState.pluginName = pluginName;
    return cont2(attributes, endplugin(curState.startOfLine));
  } else if (type7 == "closePlugin") {
    var err = false;
    if (curState.context) {
      err = curState.context.pluginName != pluginName;
      popContext11();
    } else {
      err = true;
    }
    if (err) setStyle = "error";
    return cont2(endcloseplugin(err));
  } else if (type7 == "string") {
    if (!curState.context || curState.context.name != "!cdata") pushContext11("!cdata");
    if (curState.tokenize == inText) popContext11();
    return cont2();
  } else return cont2();
}
function endplugin(startOfLine2) {
  return function(type7) {
    if (type7 == "selfclosePlugin" || type7 == "endPlugin")
      return cont2();
    if (type7 == "endPlugin") {
      pushContext11(curState.pluginName, startOfLine2);
      return cont2();
    }
    return cont2();
  };
}
function endcloseplugin(err) {
  return function(type7) {
    if (err) setStyle = "error";
    if (type7 == "endPlugin") return cont2();
    return pass3();
  };
}
function attributes(type7) {
  if (type7 == "keyword") {
    setStyle = "attribute";
    return cont2(attributes);
  }
  if (type7 == "equals") return cont2(attvalue, attributes);
  return pass3();
}
function attvalue(type7) {
  if (type7 == "keyword") {
    setStyle = "string";
    return cont2();
  }
  if (type7 == "string") return cont2(attvaluemaybe);
  return pass3();
}
function attvaluemaybe(type7) {
  if (type7 == "string") return cont2(attvaluemaybe);
  else return pass3();
}
var pluginName, type6, curState, setStyle, tiki;
var init_tiki = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/tiki.js"() {
    tiki = {
      name: "tiki",
      startState: function() {
        return { tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          state.startOfLine = true;
          state.indented = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        setStyle = type6 = pluginName = null;
        var style2 = state.tokenize(stream, state);
        if ((style2 || type6) && style2 != "comment") {
          curState = state;
          while (true) {
            var comb = state.cc.pop() || element;
            if (comb(type6 || style2)) break;
          }
        }
        state.startOfLine = false;
        return setStyle || style2;
      },
      indent: function(state, textAfter, cx2) {
        var context = state.context;
        if (context && context.noIndent) return 0;
        if (context && /^{\//.test(textAfter))
          context = context.prev;
        while (context && !context.startOfLine)
          context = context.prev;
        if (context) return context.indent + cx2.unit;
        else return 0;
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/toml.js
var toml_exports = {};
__export(toml_exports, {
  toml: () => toml
});
var toml;
var init_toml = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/toml.js"() {
    toml = {
      name: "toml",
      startState: function() {
        return {
          inString: false,
          stringType: "",
          lhs: true,
          inArray: 0
        };
      },
      token: function(stream, state) {
        if (!state.inString && (stream.peek() == '"' || stream.peek() == "'")) {
          state.stringType = stream.peek();
          stream.next();
          state.inString = true;
        }
        if (stream.sol() && state.inArray === 0) {
          state.lhs = true;
        }
        if (state.inString) {
          while (state.inString && !stream.eol()) {
            if (stream.peek() === state.stringType) {
              stream.next();
              state.inString = false;
            } else if (stream.peek() === "\\") {
              stream.next();
              stream.next();
            } else {
              stream.match(/^.[^\\\"\']*/);
            }
          }
          return state.lhs ? "property" : "string";
        } else if (state.inArray && stream.peek() === "]") {
          stream.next();
          state.inArray--;
          return "bracket";
        } else if (state.lhs && stream.peek() === "[" && stream.skipTo("]")) {
          stream.next();
          if (stream.peek() === "]") stream.next();
          return "atom";
        } else if (stream.peek() === "#") {
          stream.skipToEnd();
          return "comment";
        } else if (stream.eatSpace()) {
          return null;
        } else if (state.lhs && stream.eatWhile(function(c2) {
          return c2 != "=" && c2 != " ";
        })) {
          return "property";
        } else if (state.lhs && stream.peek() === "=") {
          stream.next();
          state.lhs = false;
          return null;
        } else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
          return "atom";
        } else if (!state.lhs && (stream.match("true") || stream.match("false"))) {
          return "atom";
        } else if (!state.lhs && stream.peek() === "[") {
          state.inArray++;
          stream.next();
          return "bracket";
        } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
          return "number";
        } else if (!stream.eatSpace()) {
          stream.next();
        }
        return null;
      },
      languageData: {
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/troff.js
var troff_exports = {};
__export(troff_exports, {
  troff: () => troff
});
function tokenBase37(stream) {
  if (stream.eatSpace()) return null;
  var sol = stream.sol();
  var ch2 = stream.next();
  if (ch2 === "\\") {
    if (stream.match("fB") || stream.match("fR") || stream.match("fI") || stream.match("u") || stream.match("d") || stream.match("%") || stream.match("&")) {
      return "string";
    }
    if (stream.match("m[")) {
      stream.skipTo("]");
      stream.next();
      return "string";
    }
    if (stream.match("s+") || stream.match("s-")) {
      stream.eatWhile(/[\d-]/);
      return "string";
    }
    if (stream.match("(") || stream.match("*(")) {
      stream.eatWhile(/[\w-]/);
      return "string";
    }
    return "string";
  }
  if (sol && (ch2 === "." || ch2 === "'")) {
    if (stream.eat("\\") && stream.eat('"')) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (sol && ch2 === ".") {
    if (stream.match("B ") || stream.match("I ") || stream.match("R ")) {
      return "attribute";
    }
    if (stream.match("TH ") || stream.match("SH ") || stream.match("SS ") || stream.match("HP ")) {
      stream.skipToEnd();
      return "quote";
    }
    if (stream.match(/[A-Z]/) && stream.match(/[A-Z]/) || stream.match(/[a-z]/) && stream.match(/[a-z]/)) {
      return "attribute";
    }
  }
  stream.eatWhile(/[\w-]/);
  var cur2 = stream.current();
  return words17.hasOwnProperty(cur2) ? words17[cur2] : null;
}
function tokenize5(stream, state) {
  return (state.tokens[0] || tokenBase37)(stream, state);
}
var words17, troff;
var init_troff = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/troff.js"() {
    words17 = {};
    troff = {
      name: "troff",
      startState: function() {
        return { tokens: [] };
      },
      token: function(stream, state) {
        return tokenize5(stream, state);
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/ttcn.js
var ttcn_exports = {};
__export(ttcn_exports, {
  ttcn: () => ttcn
});
function words18(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function add(obj) {
  if (obj) {
    for (var prop in obj) if (obj.hasOwnProperty(prop))
      wordList.push(prop);
  }
}
function tokenBase38(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString22(ch2);
    return state.tokenize(stream, state);
  }
  if (/[\[\]{}\(\),;\\:\?\.]/.test(ch2)) {
    curPunc9 = ch2;
    return "punctuation";
  }
  if (ch2 == "#") {
    stream.skipToEnd();
    return "atom";
  }
  if (ch2 == "%") {
    stream.eatWhile(/\b/);
    return "atom";
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  if (ch2 == "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment16;
      return tokenComment16(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar11.test(ch2)) {
    if (ch2 == "@") {
      if (stream.match("try") || stream.match("catch") || stream.match("lazy")) {
        return "keyword";
      }
    }
    stream.eatWhile(isOperatorChar11);
    return "operator";
  }
  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
  var cur2 = stream.current();
  if (keywords38.propertyIsEnumerable(cur2)) return "keyword";
  if (builtin4.propertyIsEnumerable(cur2)) return "builtin";
  if (timerOps.propertyIsEnumerable(cur2)) return "def";
  if (configOps.propertyIsEnumerable(cur2)) return "def";
  if (verdictOps.propertyIsEnumerable(cur2)) return "def";
  if (portOps.propertyIsEnumerable(cur2)) return "def";
  if (sutOps.propertyIsEnumerable(cur2)) return "def";
  if (functionOps.propertyIsEnumerable(cur2)) return "def";
  if (verdictConsts.propertyIsEnumerable(cur2)) return "string";
  if (booleanConsts.propertyIsEnumerable(cur2)) return "string";
  if (otherConsts.propertyIsEnumerable(cur2)) return "string";
  if (types5.propertyIsEnumerable(cur2)) return "typeName.standard";
  if (visibilityModifiers.propertyIsEnumerable(cur2))
    return "modifier";
  if (templateMatch.propertyIsEnumerable(cur2)) return "atom";
  return "variable";
}
function tokenString22(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        var afterQuote = stream.peek();
        if (afterQuote) {
          afterQuote = afterQuote.toLowerCase();
          if (afterQuote == "b" || afterQuote == "h" || afterQuote == "o")
            stream.next();
        }
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !(escaped || multiLineStrings2))
      state.tokenize = null;
    return "string";
  };
}
function tokenComment16(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = null;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function Context12(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext12(state, col, type7) {
  var indent7 = state.indented;
  if (state.context && state.context.type == "statement")
    indent7 = state.context.indented;
  return state.context = new Context12(indent7, col, type7, null, state.context);
}
function popContext12(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var parserConfig2, wordList, keywords38, builtin4, timerOps, portOps, configOps, verdictOps, sutOps, functionOps, verdictConsts, booleanConsts, otherConsts, types5, visibilityModifiers, templateMatch, multiLineStrings2, indentStatements, isOperatorChar11, curPunc9, ttcn;
var init_ttcn = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/ttcn.js"() {
    parserConfig2 = {
      name: "ttcn",
      keywords: words18("activate address alive all alt altstep and and4b any break case component const continue control deactivate display do else encode enumerated except exception execute extends extension external for from function goto group if import in infinity inout interleave label language length log match message mixed mod modifies module modulepar mtc noblock not not4b nowait of on optional or or4b out override param pattern port procedure record recursive rem repeat return runs select self sender set signature system template testcase to type union value valueof var variant while with xor xor4b"),
      builtin: words18("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue decomp decvalue float2int float2str hex2bit hex2int hex2oct hex2str int2bit int2char int2float int2hex int2oct int2str int2unichar isbound ischosen ispresent isvalue lengthof log2str oct2bit oct2char oct2hex oct2int oct2str regexp replace rnd sizeof str2bit str2float str2hex str2int str2oct substr unichar2int unichar2char enum2int"),
      types: words18("anytype bitstring boolean char charstring default float hexstring integer objid octetstring universal verdicttype timer"),
      timerOps: words18("read running start stop timeout"),
      portOps: words18("call catch check clear getcall getreply halt raise receive reply send trigger"),
      configOps: words18("create connect disconnect done kill killed map unmap"),
      verdictOps: words18("getverdict setverdict"),
      sutOps: words18("action"),
      functionOps: words18("apply derefers refers"),
      verdictConsts: words18("error fail inconc none pass"),
      booleanConsts: words18("true false"),
      otherConsts: words18("null NULL omit"),
      visibilityModifiers: words18("private public friend"),
      templateMatch: words18("complement ifpresent subset superset permutation"),
      multiLineStrings: true
    };
    wordList = [];
    add(parserConfig2.keywords);
    add(parserConfig2.builtin);
    add(parserConfig2.timerOps);
    add(parserConfig2.portOps);
    keywords38 = parserConfig2.keywords || {};
    builtin4 = parserConfig2.builtin || {};
    timerOps = parserConfig2.timerOps || {};
    portOps = parserConfig2.portOps || {};
    configOps = parserConfig2.configOps || {};
    verdictOps = parserConfig2.verdictOps || {};
    sutOps = parserConfig2.sutOps || {};
    functionOps = parserConfig2.functionOps || {};
    verdictConsts = parserConfig2.verdictConsts || {};
    booleanConsts = parserConfig2.booleanConsts || {};
    otherConsts = parserConfig2.otherConsts || {};
    types5 = parserConfig2.types || {};
    visibilityModifiers = parserConfig2.visibilityModifiers || {};
    templateMatch = parserConfig2.templateMatch || {};
    multiLineStrings2 = parserConfig2.multiLineStrings;
    indentStatements = parserConfig2.indentStatements !== false;
    isOperatorChar11 = /[+\-*&@=<>!\/]/;
    ttcn = {
      name: "ttcn",
      startState: function() {
        return {
          tokenize: null,
          context: new Context12(0, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc9 = null;
        var style2 = (state.tokenize || tokenBase38)(stream, state);
        if (style2 == "comment") return style2;
        if (ctx.align == null) ctx.align = true;
        if ((curPunc9 == ";" || curPunc9 == ":" || curPunc9 == ",") && ctx.type == "statement") {
          popContext12(state);
        } else if (curPunc9 == "{") pushContext12(state, stream.column(), "}");
        else if (curPunc9 == "[") pushContext12(state, stream.column(), "]");
        else if (curPunc9 == "(") pushContext12(state, stream.column(), ")");
        else if (curPunc9 == "}") {
          while (ctx.type == "statement") ctx = popContext12(state);
          if (ctx.type == "}") ctx = popContext12(state);
          while (ctx.type == "statement") ctx = popContext12(state);
        } else if (curPunc9 == ctx.type) popContext12(state);
        else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc9 != ";" || ctx.type == "statement" && curPunc9 == "newstatement"))
          pushContext12(state, stream.column(), "statement");
        state.startOfLine = false;
        return style2;
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        autocomplete: wordList
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js
var ttcn_cfg_exports = {};
__export(ttcn_cfg_exports, {
  ttcnCfg: () => ttcnCfg
});
function words19(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i)
    obj[words22[i]] = true;
  return obj;
}
function tokenBase39(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenString23(ch2);
    return state.tokenize(stream, state);
  }
  if (/[:=]/.test(ch2)) {
    curPunc10 = ch2;
    return "punctuation";
  }
  if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  }
  if (/\d/.test(ch2)) {
    stream.eatWhile(/[\w\.]/);
    return "number";
  }
  if (isOperatorChar12.test(ch2)) {
    stream.eatWhile(isOperatorChar12);
    return "operator";
  }
  if (ch2 == "[") {
    stream.eatWhile(/[\w_\]]/);
    return "number";
  }
  stream.eatWhile(/[\w\$_]/);
  var cur2 = stream.current();
  if (keywords39.propertyIsEnumerable(cur2)) return "keyword";
  if (fileNCtrlMaskOptions.propertyIsEnumerable(cur2))
    return "atom";
  if (externalCommands.propertyIsEnumerable(cur2)) return "deleted";
  return "variable";
}
function tokenString23(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        var afterNext = stream.peek();
        if (afterNext) {
          afterNext = afterNext.toLowerCase();
          if (afterNext == "b" || afterNext == "h" || afterNext == "o")
            stream.next();
        }
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2 || !(escaped || multiLineStrings3))
      state.tokenize = null;
    return "string";
  };
}
function Context13(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext13(state, col, type7) {
  var indent7 = state.indented;
  if (state.context && state.context.type == "statement")
    indent7 = state.context.indented;
  return state.context = new Context13(indent7, col, type7, null, state.context);
}
function popContext13(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var parserConfig3, keywords39, fileNCtrlMaskOptions, externalCommands, multiLineStrings3, indentStatements2, isOperatorChar12, curPunc10, ttcnCfg;
var init_ttcn_cfg = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js"() {
    parserConfig3 = {
      name: "ttcn-cfg",
      keywords: words19("Yes No LogFile FileMask ConsoleMask AppendFile TimeStampFormat LogEventTypes SourceInfoFormat LogEntityName LogSourceInfo DiskFullAction LogFileNumber LogFileSize MatchingHints Detailed Compact SubCategories Stack Single None Seconds DateTime Time Stop Error Retry Delete TCPPort KillTimer NumHCs UnixSocketsEnabled LocalAddress"),
      fileNCtrlMaskOptions: words19("TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION TTCN_USER TTCN_FUNCTION TTCN_STATISTICS TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG EXECUTOR ERROR WARNING PORTEVENT TIMEROP VERDICTOP DEFAULTOP TESTCASE ACTION USER FUNCTION STATISTICS PARALLEL MATCHING DEBUG LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED DEBUG_ENCDEC DEBUG_TESTPORT DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED FUNCTION_RND FUNCTION_UNQUALIFIED MATCHING_DONE MATCHING_MCSUCCESS MATCHING_MCUNSUCC MATCHING_MMSUCCESS MATCHING_MMUNSUCC MATCHING_PCSUCCESS MATCHING_PCUNSUCC MATCHING_PMSUCCESS MATCHING_PMUNSUCC MATCHING_PROBLEM MATCHING_TIMEOUT MATCHING_UNQUALIFIED PARALLEL_PORTCONN PARALLEL_PORTMAP PARALLEL_PTC PARALLEL_UNQUALIFIED PORTEVENT_DUALRECV PORTEVENT_DUALSEND PORTEVENT_MCRECV PORTEVENT_MCSEND PORTEVENT_MMRECV PORTEVENT_MMSEND PORTEVENT_MQUEUE PORTEVENT_PCIN PORTEVENT_PCOUT PORTEVENT_PMIN PORTEVENT_PMOUT PORTEVENT_PQUEUE PORTEVENT_STATE PORTEVENT_UNQUALIFIED STATISTICS_UNQUALIFIED STATISTICS_VERDICT TESTCASE_FINISH TESTCASE_START TESTCASE_UNQUALIFIED TIMEROP_GUARD TIMEROP_READ TIMEROP_START TIMEROP_STOP TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED USER_UNQUALIFIED VERDICTOP_FINAL VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"),
      externalCommands: words19("BeginControlPart EndControlPart BeginTestCase EndTestCase"),
      multiLineStrings: true
    };
    keywords39 = parserConfig3.keywords;
    fileNCtrlMaskOptions = parserConfig3.fileNCtrlMaskOptions;
    externalCommands = parserConfig3.externalCommands;
    multiLineStrings3 = parserConfig3.multiLineStrings;
    indentStatements2 = parserConfig3.indentStatements !== false;
    isOperatorChar12 = /[\|]/;
    ttcnCfg = {
      name: "ttcn",
      startState: function() {
        return {
          tokenize: null,
          context: new Context13(0, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc10 = null;
        var style2 = (state.tokenize || tokenBase39)(stream, state);
        if (style2 == "comment") return style2;
        if (ctx.align == null) ctx.align = true;
        if ((curPunc10 == ";" || curPunc10 == ":" || curPunc10 == ",") && ctx.type == "statement") {
          popContext13(state);
        } else if (curPunc10 == "{") pushContext13(state, stream.column(), "}");
        else if (curPunc10 == "[") pushContext13(state, stream.column(), "]");
        else if (curPunc10 == "(") pushContext13(state, stream.column(), ")");
        else if (curPunc10 == "}") {
          while (ctx.type == "statement") ctx = popContext13(state);
          if (ctx.type == "}") ctx = popContext13(state);
          while (ctx.type == "statement") ctx = popContext13(state);
        } else if (curPunc10 == ctx.type) popContext13(state);
        else if (indentStatements2 && ((ctx.type == "}" || ctx.type == "top") && curPunc10 != ";" || ctx.type == "statement" && curPunc10 == "newstatement"))
          pushContext13(state, stream.column(), "statement");
        state.startOfLine = false;
        return style2;
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/turtle.js
var turtle_exports = {};
__export(turtle_exports, {
  turtle: () => turtle
});
function wordRegexp12(words22) {
  return new RegExp("^(?:" + words22.join("|") + ")$", "i");
}
function tokenBase40(stream, state) {
  var ch2 = stream.next();
  curPunc11 = null;
  if (ch2 == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
    stream.match(/^[^\s\u00a0>]*>?/);
    return "atom";
  } else if (ch2 == '"' || ch2 == "'") {
    state.tokenize = tokenLiteral2(ch2);
    return state.tokenize(stream, state);
  } else if (/[{}\(\),\.;\[\]]/.test(ch2)) {
    curPunc11 = ch2;
    return null;
  } else if (ch2 == "#") {
    stream.skipToEnd();
    return "comment";
  } else if (operatorChars3.test(ch2)) {
    stream.eatWhile(operatorChars3);
    return null;
  } else if (ch2 == ":") {
    return "operator";
  } else {
    stream.eatWhile(/[_\w\d]/);
    if (stream.peek() == ":") {
      return "variableName.special";
    } else {
      var word = stream.current();
      if (keywords40.test(word)) {
        return "meta";
      }
      if (ch2 >= "A" && ch2 <= "Z") {
        return "comment";
      } else {
        return "keyword";
      }
    }
    var word = stream.current();
    if (ops2.test(word))
      return null;
    else if (keywords40.test(word))
      return "meta";
    else
      return "variable";
  }
}
function tokenLiteral2(quote4) {
  return function(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == quote4 && !escaped) {
        state.tokenize = tokenBase40;
        break;
      }
      escaped = !escaped && ch2 == "\\";
    }
    return "string";
  };
}
function pushContext14(state, type7, col) {
  state.context = { prev: state.context, indent: state.indent, col, type: type7 };
}
function popContext14(state) {
  state.indent = state.context.indent;
  state.context = state.context.prev;
}
var curPunc11, ops2, keywords40, operatorChars3, turtle;
var init_turtle = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/turtle.js"() {
    ops2 = wordRegexp12([]);
    keywords40 = wordRegexp12(["@prefix", "@base", "a"]);
    operatorChars3 = /[*+\-<>=&|]/;
    turtle = {
      name: "turtle",
      startState: function() {
        return {
          tokenize: tokenBase40,
          context: null,
          indent: 0,
          col: 0
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null) state.context.align = false;
          state.indent = stream.indentation();
        }
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        if (style2 != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
          state.context.align = true;
        }
        if (curPunc11 == "(") pushContext14(state, ")", stream.column());
        else if (curPunc11 == "[") pushContext14(state, "]", stream.column());
        else if (curPunc11 == "{") pushContext14(state, "}", stream.column());
        else if (/[\]\}\)]/.test(curPunc11)) {
          while (state.context && state.context.type == "pattern") popContext14(state);
          if (state.context && curPunc11 == state.context.type) popContext14(state);
        } else if (curPunc11 == "." && state.context && state.context.type == "pattern") popContext14(state);
        else if (/atom|string|variable/.test(style2) && state.context) {
          if (/[\}\]]/.test(state.context.type))
            pushContext14(state, "pattern", stream.column());
          else if (state.context.type == "pattern" && !state.context.align) {
            state.context.align = true;
            state.context.col = stream.column();
          }
        }
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var firstChar = textAfter && textAfter.charAt(0);
        var context = state.context;
        if (/[\]\}]/.test(firstChar))
          while (context && context.type == "pattern") context = context.prev;
        var closing4 = context && firstChar == context.type;
        if (!context)
          return 0;
        else if (context.type == "pattern")
          return context.col;
        else if (context.align)
          return context.col + (closing4 ? 0 : 1);
        else
          return context.indent + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        commentTokens: { line: "#" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/webidl.js
var webidl_exports = {};
__export(webidl_exports, {
  webIDL: () => webIDL
});
function wordRegexp13(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b");
}
function readToken4(stream, state) {
  if (stream.eatSpace()) return null;
  if (state.inComment) {
    if (stream.match(multilineCommentsEnd)) {
      state.inComment = false;
      return "comment";
    }
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match("//")) {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(multilineComments)) return "comment";
  if (stream.match(multilineCommentsStart)) {
    state.inComment = true;
    return "comment";
  }
  if (stream.match(/^-?[0-9\.]/, false)) {
    if (stream.match(integers) || stream.match(floats)) return "number";
  }
  if (stream.match(strings2)) return "string";
  if (state.startDef && stream.match(identifiers10)) return "def";
  if (state.endDef && stream.match(identifiersEnd)) {
    state.endDef = false;
    return "def";
  }
  if (stream.match(keywords41)) return "keyword";
  if (stream.match(types6)) {
    var lastToken = state.lastToken;
    var nextToken2 = (stream.match(/^\s*(.+?)\b/, false) || [])[1];
    if (lastToken === ":" || lastToken === "implements" || nextToken2 === "implements" || nextToken2 === "=") {
      return "builtin";
    } else {
      return "type";
    }
  }
  if (stream.match(builtins10)) return "builtin";
  if (stream.match(atoms14)) return "atom";
  if (stream.match(identifiers10)) return "variable";
  if (stream.match(singleOperators5)) return "operator";
  stream.next();
  return null;
}
var builtinArray2, builtins10, typeArray2, types6, keywordArray3, keywords41, atomArray, atoms14, startDefArray, startDefs, endDefArray, endDefs, singleOperators5, integers, floats, identifiers10, identifiersEnd, strings2, multilineComments, multilineCommentsStart, multilineCommentsEnd, webIDL;
var init_webidl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/webidl.js"() {
    builtinArray2 = [
      "Clamp",
      "Constructor",
      "EnforceRange",
      "Exposed",
      "ImplicitThis",
      "Global",
      "PrimaryGlobal",
      "LegacyArrayClass",
      "LegacyUnenumerableNamedProperties",
      "LenientThis",
      "NamedConstructor",
      "NewObject",
      "NoInterfaceObject",
      "OverrideBuiltins",
      "PutForwards",
      "Replaceable",
      "SameObject",
      "TreatNonObjectAsNull",
      "TreatNullAs",
      "EmptyString",
      "Unforgeable",
      "Unscopeable"
    ];
    builtins10 = wordRegexp13(builtinArray2);
    typeArray2 = [
      "unsigned",
      "short",
      "long",
      // UnsignedIntegerType
      "unrestricted",
      "float",
      "double",
      // UnrestrictedFloatType
      "boolean",
      "byte",
      "octet",
      // Rest of PrimitiveType
      "Promise",
      // PromiseType
      "ArrayBuffer",
      "DataView",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Uint8Array",
      "Uint16Array",
      "Uint32Array",
      "Uint8ClampedArray",
      "Float32Array",
      "Float64Array",
      // BufferRelatedType
      "ByteString",
      "DOMString",
      "USVString",
      "sequence",
      "object",
      "RegExp",
      "Error",
      "DOMException",
      "FrozenArray",
      // Rest of NonAnyType
      "any",
      // Rest of SingleType
      "void"
      // Rest of ReturnType
    ];
    types6 = wordRegexp13(typeArray2);
    keywordArray3 = [
      "attribute",
      "callback",
      "const",
      "deleter",
      "dictionary",
      "enum",
      "getter",
      "implements",
      "inherit",
      "interface",
      "iterable",
      "legacycaller",
      "maplike",
      "partial",
      "required",
      "serializer",
      "setlike",
      "setter",
      "static",
      "stringifier",
      "typedef",
      // ArgumentNameKeyword except
      // "unrestricted"
      "optional",
      "readonly",
      "or"
    ];
    keywords41 = wordRegexp13(keywordArray3);
    atomArray = [
      "true",
      "false",
      // BooleanLiteral
      "Infinity",
      "NaN",
      // FloatLiteral
      "null"
      // Rest of ConstValue
    ];
    atoms14 = wordRegexp13(atomArray);
    startDefArray = ["callback", "dictionary", "enum", "interface"];
    startDefs = wordRegexp13(startDefArray);
    endDefArray = ["typedef"];
    endDefs = wordRegexp13(endDefArray);
    singleOperators5 = /^[:<=>?]/;
    integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
    floats = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
    identifiers10 = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
    identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
    strings2 = /^"[^"]*"/;
    multilineComments = /^\/\*.*?\*\//;
    multilineCommentsStart = /^\/\*.*/;
    multilineCommentsEnd = /^.*?\*\//;
    webIDL = {
      name: "webidl",
      startState: function() {
        return {
          // Is in multiline comment
          inComment: false,
          // Last non-whitespace, matched token
          lastToken: "",
          // Next token is a definition
          startDef: false,
          // Last token of the statement is a definition
          endDef: false
        };
      },
      token: function(stream, state) {
        var style2 = readToken4(stream, state);
        if (style2) {
          var cur2 = stream.current();
          state.lastToken = cur2;
          if (style2 === "keyword") {
            state.startDef = startDefs.test(cur2);
            state.endDef = state.endDef || endDefs.test(cur2);
          } else {
            state.startDef = false;
          }
        }
        return style2;
      },
      languageData: {
        autocomplete: builtinArray2.concat(typeArray2).concat(keywordArray3).concat(atomArray)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/vb.js
var vb_exports = {};
__export(vb_exports, {
  vb: () => vb
});
function wordRegexp14(words22) {
  return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
}
function indent5(_stream, state) {
  state.currentIndent++;
}
function dedent4(_stream, state) {
  state.currentIndent--;
}
function tokenBase41(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  var ch2 = stream.peek();
  if (ch2 === "'") {
    stream.skipToEnd();
    return "comment";
  }
  if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
    var floatLiteral = false;
    if (stream.match(/^\d*\.\d+F?/i)) {
      floatLiteral = true;
    } else if (stream.match(/^\d+\.\d*F?/)) {
      floatLiteral = true;
    } else if (stream.match(/^\.\d+F?/)) {
      floatLiteral = true;
    }
    if (floatLiteral) {
      stream.eat(/J/i);
      return "number";
    }
    var intLiteral = false;
    if (stream.match(/^&H[0-9a-f]+/i)) {
      intLiteral = true;
    } else if (stream.match(/^&O[0-7]+/i)) {
      intLiteral = true;
    } else if (stream.match(/^[1-9]\d*F?/)) {
      stream.eat(/J/i);
      intLiteral = true;
    } else if (stream.match(/^0(?![\dx])/i)) {
      intLiteral = true;
    }
    if (intLiteral) {
      stream.eat(/L/i);
      return "number";
    }
  }
  if (stream.match(stringPrefixes3)) {
    state.tokenize = tokenStringFactory2(stream.current());
    return state.tokenize(stream, state);
  }
  if (stream.match(tripleDelimiters2) || stream.match(doubleDelimiters2)) {
    return null;
  }
  if (stream.match(doubleOperators4) || stream.match(singleOperators6) || stream.match(wordOperators4)) {
    return "operator";
  }
  if (stream.match(singleDelimiters3)) {
    return null;
  }
  if (stream.match(doOpening)) {
    indent5(stream, state);
    state.doInCurrentLine = true;
    return "keyword";
  }
  if (stream.match(opening2)) {
    if (!state.doInCurrentLine)
      indent5(stream, state);
    else
      state.doInCurrentLine = false;
    return "keyword";
  }
  if (stream.match(middle2)) {
    return "keyword";
  }
  if (stream.match(doubleClosing)) {
    dedent4(stream, state);
    dedent4(stream, state);
    return "keyword";
  }
  if (stream.match(closing3)) {
    dedent4(stream, state);
    return "keyword";
  }
  if (stream.match(types7)) {
    return "keyword";
  }
  if (stream.match(keywords42)) {
    return "keyword";
  }
  if (stream.match(identifiers11)) {
    return "variable";
  }
  stream.next();
  return ERRORCLASS2;
}
function tokenStringFactory2(delimiter2) {
  var singleline = delimiter2.length == 1;
  var OUTCLASS = "string";
  return function(stream, state) {
    while (!stream.eol()) {
      stream.eatWhile(/[^'"]/);
      if (stream.match(delimiter2)) {
        state.tokenize = tokenBase41;
        return OUTCLASS;
      } else {
        stream.eat(/['"]/);
      }
    }
    if (singleline) {
      state.tokenize = tokenBase41;
    }
    return OUTCLASS;
  };
}
function tokenLexer2(stream, state) {
  var style2 = state.tokenize(stream, state);
  var current = stream.current();
  if (current === ".") {
    style2 = state.tokenize(stream, state);
    if (style2 === "variable") {
      return "variable";
    } else {
      return ERRORCLASS2;
    }
  }
  var delimiter_index = "[({".indexOf(current);
  if (delimiter_index !== -1) {
    indent5(stream, state);
  }
  if (indentInfo === "dedent") {
    if (dedent4(stream, state)) {
      return ERRORCLASS2;
    }
  }
  delimiter_index = "])}".indexOf(current);
  if (delimiter_index !== -1) {
    if (dedent4(stream, state)) {
      return ERRORCLASS2;
    }
  }
  return style2;
}
var ERRORCLASS2, singleOperators6, singleDelimiters3, doubleOperators4, doubleDelimiters2, tripleDelimiters2, identifiers11, openingKeywords2, middleKeywords2, endKeywords2, operatorKeywords, wordOperators4, commonKeywords6, commontypes, keywords42, types7, stringPrefixes3, opening2, middle2, closing3, doubleClosing, doOpening, indentInfo, vb;
var init_vb = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/vb.js"() {
    ERRORCLASS2 = "error";
    singleOperators6 = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
    singleDelimiters3 = new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]");
    doubleOperators4 = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
    doubleDelimiters2 = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
    tripleDelimiters2 = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
    identifiers11 = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");
    openingKeywords2 = ["class", "module", "sub", "enum", "select", "while", "if", "function", "get", "set", "property", "try", "structure", "synclock", "using", "with"];
    middleKeywords2 = ["else", "elseif", "case", "catch", "finally"];
    endKeywords2 = ["next", "loop"];
    operatorKeywords = ["and", "andalso", "or", "orelse", "xor", "in", "not", "is", "isnot", "like"];
    wordOperators4 = wordRegexp14(operatorKeywords);
    commonKeywords6 = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];
    commontypes = ["object", "boolean", "char", "string", "byte", "sbyte", "short", "ushort", "int16", "uint16", "integer", "uinteger", "int32", "uint32", "long", "ulong", "int64", "uint64", "decimal", "single", "double", "float", "date", "datetime", "intptr", "uintptr"];
    keywords42 = wordRegexp14(commonKeywords6);
    types7 = wordRegexp14(commontypes);
    stringPrefixes3 = '"';
    opening2 = wordRegexp14(openingKeywords2);
    middle2 = wordRegexp14(middleKeywords2);
    closing3 = wordRegexp14(endKeywords2);
    doubleClosing = wordRegexp14(["end"]);
    doOpening = wordRegexp14(["do"]);
    indentInfo = null;
    vb = {
      name: "vb",
      startState: function() {
        return {
          tokenize: tokenBase41,
          lastToken: null,
          currentIndent: 0,
          nextLineIndent: 0,
          doInCurrentLine: false
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          state.currentIndent += state.nextLineIndent;
          state.nextLineIndent = 0;
          state.doInCurrentLine = 0;
        }
        var style2 = tokenLexer2(stream, state);
        state.lastToken = { style: style2, content: stream.current() };
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var trueText = textAfter.replace(/^\s+|\s+$/g, "");
        if (trueText.match(closing3) || trueText.match(doubleClosing) || trueText.match(middle2)) return cx2.unit * (state.currentIndent - 1);
        if (state.currentIndent < 0) return 0;
        return state.currentIndent * cx2.unit;
      },
      languageData: {
        closeBrackets: { brackets: ["(", "[", "{", '"'] },
        commentTokens: { line: "'" },
        autocomplete: openingKeywords2.concat(middleKeywords2).concat(endKeywords2).concat(operatorKeywords).concat(commonKeywords6).concat(commontypes)
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/vbscript.js
var vbscript_exports = {};
__export(vbscript_exports, {
  vbScript: () => vbScript,
  vbScriptASP: () => vbScriptASP
});
function mkVBScript(parserConf) {
  var ERRORCLASS3 = "error";
  function wordRegexp16(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
  }
  var singleOperators7 = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
  var doubleOperators5 = new RegExp("^((<>)|(<=)|(>=))");
  var singleDelimiters4 = new RegExp("^[\\.,]");
  var brackets2 = new RegExp("^[\\(\\)]");
  var identifiers12 = new RegExp("^[A-Za-z][_A-Za-z0-9]*");
  var openingKeywords3 = ["class", "sub", "select", "while", "if", "function", "property", "with", "for"];
  var middleKeywords3 = ["else", "elseif", "case"];
  var endKeywords3 = ["next", "loop", "wend"];
  var wordOperators5 = wordRegexp16(["and", "or", "not", "xor", "is", "mod", "eqv", "imp"]);
  var commonkeywords = [
    "dim",
    "redim",
    "then",
    "until",
    "randomize",
    "byval",
    "byref",
    "new",
    "property",
    "exit",
    "in",
    "const",
    "private",
    "public",
    "get",
    "set",
    "let",
    "stop",
    "on error resume next",
    "on error goto 0",
    "option explicit",
    "call",
    "me"
  ];
  var atomWords2 = ["true", "false", "nothing", "empty", "null"];
  var builtinFuncsWords = [
    "abs",
    "array",
    "asc",
    "atn",
    "cbool",
    "cbyte",
    "ccur",
    "cdate",
    "cdbl",
    "chr",
    "cint",
    "clng",
    "cos",
    "csng",
    "cstr",
    "date",
    "dateadd",
    "datediff",
    "datepart",
    "dateserial",
    "datevalue",
    "day",
    "escape",
    "eval",
    "execute",
    "exp",
    "filter",
    "formatcurrency",
    "formatdatetime",
    "formatnumber",
    "formatpercent",
    "getlocale",
    "getobject",
    "getref",
    "hex",
    "hour",
    "inputbox",
    "instr",
    "instrrev",
    "int",
    "fix",
    "isarray",
    "isdate",
    "isempty",
    "isnull",
    "isnumeric",
    "isobject",
    "join",
    "lbound",
    "lcase",
    "left",
    "len",
    "loadpicture",
    "log",
    "ltrim",
    "rtrim",
    "trim",
    "maths",
    "mid",
    "minute",
    "month",
    "monthname",
    "msgbox",
    "now",
    "oct",
    "replace",
    "rgb",
    "right",
    "rnd",
    "round",
    "scriptengine",
    "scriptenginebuildversion",
    "scriptenginemajorversion",
    "scriptengineminorversion",
    "second",
    "setlocale",
    "sgn",
    "sin",
    "space",
    "split",
    "sqr",
    "strcomp",
    "string",
    "strreverse",
    "tan",
    "time",
    "timer",
    "timeserial",
    "timevalue",
    "typename",
    "ubound",
    "ucase",
    "unescape",
    "vartype",
    "weekday",
    "weekdayname",
    "year"
  ];
  var builtinConsts = [
    "vbBlack",
    "vbRed",
    "vbGreen",
    "vbYellow",
    "vbBlue",
    "vbMagenta",
    "vbCyan",
    "vbWhite",
    "vbBinaryCompare",
    "vbTextCompare",
    "vbSunday",
    "vbMonday",
    "vbTuesday",
    "vbWednesday",
    "vbThursday",
    "vbFriday",
    "vbSaturday",
    "vbUseSystemDayOfWeek",
    "vbFirstJan1",
    "vbFirstFourDays",
    "vbFirstFullWeek",
    "vbGeneralDate",
    "vbLongDate",
    "vbShortDate",
    "vbLongTime",
    "vbShortTime",
    "vbObjectError",
    "vbOKOnly",
    "vbOKCancel",
    "vbAbortRetryIgnore",
    "vbYesNoCancel",
    "vbYesNo",
    "vbRetryCancel",
    "vbCritical",
    "vbQuestion",
    "vbExclamation",
    "vbInformation",
    "vbDefaultButton1",
    "vbDefaultButton2",
    "vbDefaultButton3",
    "vbDefaultButton4",
    "vbApplicationModal",
    "vbSystemModal",
    "vbOK",
    "vbCancel",
    "vbAbort",
    "vbRetry",
    "vbIgnore",
    "vbYes",
    "vbNo",
    "vbCr",
    "VbCrLf",
    "vbFormFeed",
    "vbLf",
    "vbNewLine",
    "vbNullChar",
    "vbNullString",
    "vbTab",
    "vbVerticalTab",
    "vbUseDefault",
    "vbTrue",
    "vbFalse",
    "vbEmpty",
    "vbNull",
    "vbInteger",
    "vbLong",
    "vbSingle",
    "vbDouble",
    "vbCurrency",
    "vbDate",
    "vbString",
    "vbObject",
    "vbError",
    "vbBoolean",
    "vbVariant",
    "vbDataObject",
    "vbDecimal",
    "vbByte",
    "vbArray"
  ];
  var builtinObjsWords = ["WScript", "err", "debug", "RegExp"];
  var knownProperties = ["description", "firstindex", "global", "helpcontext", "helpfile", "ignorecase", "length", "number", "pattern", "source", "value", "count"];
  var knownMethods = ["clear", "execute", "raise", "replace", "test", "write", "writeline", "close", "open", "state", "eof", "update", "addnew", "end", "createobject", "quit"];
  var aspBuiltinObjsWords = ["server", "response", "request", "session", "application"];
  var aspKnownProperties = [
    "buffer",
    "cachecontrol",
    "charset",
    "contenttype",
    "expires",
    "expiresabsolute",
    "isclientconnected",
    "pics",
    "status",
    //response
    "clientcertificate",
    "cookies",
    "form",
    "querystring",
    "servervariables",
    "totalbytes",
    //request
    "contents",
    "staticobjects",
    //application
    "codepage",
    "lcid",
    "sessionid",
    "timeout",
    //session
    "scripttimeout"
  ];
  var aspKnownMethods = [
    "addheader",
    "appendtolog",
    "binarywrite",
    "end",
    "flush",
    "redirect",
    //response
    "binaryread",
    //request
    "remove",
    "removeall",
    "lock",
    "unlock",
    //application
    "abandon",
    //session
    "getlasterror",
    "htmlencode",
    "mappath",
    "transfer",
    "urlencode"
  ];
  var knownWords = knownMethods.concat(knownProperties);
  builtinObjsWords = builtinObjsWords.concat(builtinConsts);
  if (parserConf.isASP) {
    builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
    knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);
  }
  ;
  var keywords49 = wordRegexp16(commonkeywords);
  var atoms18 = wordRegexp16(atomWords2);
  var builtinFuncs = wordRegexp16(builtinFuncsWords);
  var builtinObjs = wordRegexp16(builtinObjsWords);
  var known = wordRegexp16(knownWords);
  var stringPrefixes4 = '"';
  var opening3 = wordRegexp16(openingKeywords3);
  var middle3 = wordRegexp16(middleKeywords3);
  var closing4 = wordRegexp16(endKeywords3);
  var doubleClosing2 = wordRegexp16(["end"]);
  var doOpening2 = wordRegexp16(["do"]);
  var noIndentWords = wordRegexp16(["on error resume next", "exit"]);
  var comment4 = wordRegexp16(["rem"]);
  function indent7(_stream, state) {
    state.currentIndent++;
  }
  function dedent5(_stream, state) {
    state.currentIndent--;
  }
  function tokenBase48(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    var ch2 = stream.peek();
    if (ch2 === "'") {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(comment4)) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^((&H)|(&O))?[0-9\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)) {
      var floatLiteral = false;
      if (stream.match(/^\d*\.\d+/i)) {
        floatLiteral = true;
      } else if (stream.match(/^\d+\.\d*/)) {
        floatLiteral = true;
      } else if (stream.match(/^\.\d+/)) {
        floatLiteral = true;
      }
      if (floatLiteral) {
        stream.eat(/J/i);
        return "number";
      }
      var intLiteral = false;
      if (stream.match(/^&H[0-9a-f]+/i)) {
        intLiteral = true;
      } else if (stream.match(/^&O[0-7]+/i)) {
        intLiteral = true;
      } else if (stream.match(/^[1-9]\d*F?/)) {
        stream.eat(/J/i);
        intLiteral = true;
      } else if (stream.match(/^0(?![\dx])/i)) {
        intLiteral = true;
      }
      if (intLiteral) {
        stream.eat(/L/i);
        return "number";
      }
    }
    if (stream.match(stringPrefixes4)) {
      state.tokenize = tokenStringFactory3(stream.current());
      return state.tokenize(stream, state);
    }
    if (stream.match(doubleOperators5) || stream.match(singleOperators7) || stream.match(wordOperators5)) {
      return "operator";
    }
    if (stream.match(singleDelimiters4)) {
      return null;
    }
    if (stream.match(brackets2)) {
      return "bracket";
    }
    if (stream.match(noIndentWords)) {
      state.doInCurrentLine = true;
      return "keyword";
    }
    if (stream.match(doOpening2)) {
      indent7(stream, state);
      state.doInCurrentLine = true;
      return "keyword";
    }
    if (stream.match(opening3)) {
      if (!state.doInCurrentLine)
        indent7(stream, state);
      else
        state.doInCurrentLine = false;
      return "keyword";
    }
    if (stream.match(middle3)) {
      return "keyword";
    }
    if (stream.match(doubleClosing2)) {
      dedent5(stream, state);
      dedent5(stream, state);
      return "keyword";
    }
    if (stream.match(closing4)) {
      if (!state.doInCurrentLine)
        dedent5(stream, state);
      else
        state.doInCurrentLine = false;
      return "keyword";
    }
    if (stream.match(keywords49)) {
      return "keyword";
    }
    if (stream.match(atoms18)) {
      return "atom";
    }
    if (stream.match(known)) {
      return "variableName.special";
    }
    if (stream.match(builtinFuncs)) {
      return "builtin";
    }
    if (stream.match(builtinObjs)) {
      return "builtin";
    }
    if (stream.match(identifiers12)) {
      return "variable";
    }
    stream.next();
    return ERRORCLASS3;
  }
  function tokenStringFactory3(delimiter2) {
    var singleline = delimiter2.length == 1;
    var OUTCLASS = "string";
    return function(stream, state) {
      while (!stream.eol()) {
        stream.eatWhile(/[^'"]/);
        if (stream.match(delimiter2)) {
          state.tokenize = tokenBase48;
          return OUTCLASS;
        } else {
          stream.eat(/['"]/);
        }
      }
      if (singleline) {
        state.tokenize = tokenBase48;
      }
      return OUTCLASS;
    };
  }
  function tokenLexer3(stream, state) {
    var style2 = state.tokenize(stream, state);
    var current = stream.current();
    if (current === ".") {
      style2 = state.tokenize(stream, state);
      current = stream.current();
      if (style2 && (style2.substr(0, 8) === "variable" || style2 === "builtin" || style2 === "keyword")) {
        if (style2 === "builtin" || style2 === "keyword") style2 = "variable";
        if (knownWords.indexOf(current.substr(1)) > -1) style2 = "keyword";
        return style2;
      } else {
        return ERRORCLASS3;
      }
    }
    return style2;
  }
  return {
    name: "vbscript",
    startState: function() {
      return {
        tokenize: tokenBase48,
        lastToken: null,
        currentIndent: 0,
        nextLineIndent: 0,
        doInCurrentLine: false,
        ignoreKeyword: false
      };
    },
    token: function(stream, state) {
      if (stream.sol()) {
        state.currentIndent += state.nextLineIndent;
        state.nextLineIndent = 0;
        state.doInCurrentLine = 0;
      }
      var style2 = tokenLexer3(stream, state);
      state.lastToken = { style: style2, content: stream.current() };
      if (style2 === null) style2 = null;
      return style2;
    },
    indent: function(state, textAfter, cx2) {
      var trueText = textAfter.replace(/^\s+|\s+$/g, "");
      if (trueText.match(closing4) || trueText.match(doubleClosing2) || trueText.match(middle3)) return cx2.unit * (state.currentIndent - 1);
      if (state.currentIndent < 0) return 0;
      return state.currentIndent * cx2.unit;
    }
  };
}
var vbScript, vbScriptASP;
var init_vbscript = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/vbscript.js"() {
    vbScript = mkVBScript({});
    vbScriptASP = mkVBScript({ isASP: true });
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/velocity.js
var velocity_exports = {};
__export(velocity_exports, {
  velocity: () => velocity
});
function parseWords3(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function chain10(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenBase42(stream, state) {
  var beforeParams = state.beforeParams;
  state.beforeParams = false;
  var ch2 = stream.next();
  if (ch2 == "'" && !state.inString && state.inParams) {
    state.lastTokenWasBuiltin = false;
    return chain10(stream, state, tokenString24(ch2));
  } else if (ch2 == '"') {
    state.lastTokenWasBuiltin = false;
    if (state.inString) {
      state.inString = false;
      return "string";
    } else if (state.inParams)
      return chain10(stream, state, tokenString24(ch2));
  } else if (/[\[\]{}\(\),;\.]/.test(ch2)) {
    if (ch2 == "(" && beforeParams)
      state.inParams = true;
    else if (ch2 == ")") {
      state.inParams = false;
      state.lastTokenWasBuiltin = true;
    }
    return null;
  } else if (/\d/.test(ch2)) {
    state.lastTokenWasBuiltin = false;
    stream.eatWhile(/[\w\.]/);
    return "number";
  } else if (ch2 == "#" && stream.eat("*")) {
    state.lastTokenWasBuiltin = false;
    return chain10(stream, state, tokenComment17);
  } else if (ch2 == "#" && stream.match(/ *\[ *\[/)) {
    state.lastTokenWasBuiltin = false;
    return chain10(stream, state, tokenUnparsed3);
  } else if (ch2 == "#" && stream.eat("#")) {
    state.lastTokenWasBuiltin = false;
    stream.skipToEnd();
    return "comment";
  } else if (ch2 == "$") {
    stream.eat("!");
    stream.eatWhile(/[\w\d\$_\.{}-]/);
    if (specials2 && specials2.propertyIsEnumerable(stream.current())) {
      return "keyword";
    } else {
      state.lastTokenWasBuiltin = true;
      state.beforeParams = true;
      return "builtin";
    }
  } else if (isOperatorChar13.test(ch2)) {
    state.lastTokenWasBuiltin = false;
    stream.eatWhile(isOperatorChar13);
    return "operator";
  } else {
    stream.eatWhile(/[\w\$_{}@]/);
    var word = stream.current();
    if (keywords43 && keywords43.propertyIsEnumerable(word))
      return "keyword";
    if (functions3 && functions3.propertyIsEnumerable(word) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == "(" && !(functions3 && functions3.propertyIsEnumerable(word.toLowerCase()))) {
      state.beforeParams = true;
      state.lastTokenWasBuiltin = false;
      return "keyword";
    }
    if (state.inString) {
      state.lastTokenWasBuiltin = false;
      return "string";
    }
    if (stream.pos > word.length && stream.string.charAt(stream.pos - word.length - 1) == "." && state.lastTokenWasBuiltin)
      return "builtin";
    state.lastTokenWasBuiltin = false;
    return null;
  }
}
function tokenString24(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      if (quote4 == '"' && stream.peek() == "$" && !escaped) {
        state.inString = true;
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2) state.tokenize = tokenBase42;
    return "string";
  };
}
function tokenComment17(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "#" && maybeEnd) {
      state.tokenize = tokenBase42;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function tokenUnparsed3(stream, state) {
  var maybeEnd = 0, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "#" && maybeEnd == 2) {
      state.tokenize = tokenBase42;
      break;
    }
    if (ch2 == "]")
      maybeEnd++;
    else if (ch2 != " ")
      maybeEnd = 0;
  }
  return "meta";
}
var keywords43, functions3, specials2, isOperatorChar13, velocity;
var init_velocity = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/velocity.js"() {
    keywords43 = parseWords3("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}");
    functions3 = parseWords3("#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}");
    specials2 = parseWords3("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent");
    isOperatorChar13 = /[+\-*&%=<>!?:\/|]/;
    velocity = {
      name: "velocity",
      startState: function() {
        return {
          tokenize: tokenBase42,
          beforeParams: false,
          inParams: false,
          inString: false,
          lastTokenWasBuiltin: false
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        commentTokens: { line: "##", block: { open: "#*", close: "*#" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/vhdl.js
var vhdl_exports = {};
__export(vhdl_exports, {
  vhdl: () => vhdl
});
function words20(str) {
  var obj = {}, words22 = str.split(",");
  for (var i = 0; i < words22.length; ++i) {
    var allCaps = words22[i].toUpperCase();
    var firstCap = words22[i].charAt(0).toUpperCase() + words22[i].slice(1);
    obj[words22[i]] = true;
    obj[allCaps] = true;
    obj[firstCap] = true;
  }
  return obj;
}
function metaHook2(stream) {
  stream.eatWhile(/[\w\$_]/);
  return "meta";
}
function tokenBase43(stream, state) {
  var ch2 = stream.next();
  if (hooks3[ch2]) {
    var result = hooks3[ch2](stream, state);
    if (result !== false) return result;
  }
  if (ch2 == '"') {
    state.tokenize = tokenString26(ch2);
    return state.tokenize(stream, state);
  }
  if (ch2 == "'") {
    state.tokenize = tokenString25(ch2);
    return state.tokenize(stream, state);
  }
  if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
    curPunc12 = ch2;
    return null;
  }
  if (/[\d']/.test(ch2)) {
    stream.eatWhile(/[\w\.']/);
    return "number";
  }
  if (ch2 == "-") {
    if (stream.eat("-")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar14.test(ch2)) {
    stream.eatWhile(isOperatorChar14);
    return "operator";
  }
  stream.eatWhile(/[\w\$_]/);
  var cur2 = stream.current();
  if (keywords44.propertyIsEnumerable(cur2.toLowerCase())) {
    if (blockKeywords5.propertyIsEnumerable(cur2)) curPunc12 = "newstatement";
    return "keyword";
  }
  if (atoms15.propertyIsEnumerable(cur2)) return "atom";
  return "variable";
}
function tokenString25(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "--";
    }
    if (end2 || !(escaped || multiLineStrings4))
      state.tokenize = tokenBase43;
    return "string";
  };
}
function tokenString26(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "--";
    }
    if (end2 || !(escaped || multiLineStrings4))
      state.tokenize = tokenBase43;
    return "string.special";
  };
}
function Context14(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext15(state, col, type7) {
  return state.context = new Context14(state.indented, col, type7, null, state.context);
}
function popContext15(state) {
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var atoms15, hooks3, multiLineStrings4, keywords44, blockKeywords5, isOperatorChar14, curPunc12, vhdl;
var init_vhdl = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/vhdl.js"() {
    atoms15 = words20("null");
    hooks3 = { "`": metaHook2, "$": metaHook2 };
    multiLineStrings4 = false;
    keywords44 = words20("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");
    blockKeywords5 = words20("architecture,entity,begin,case,port,else,elsif,end,for,function,if");
    isOperatorChar14 = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
    vhdl = {
      name: "vhdl",
      startState: function(indentUnit2) {
        return {
          tokenize: null,
          context: new Context14(-indentUnit2, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null) ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) return null;
        curPunc12 = null;
        var style2 = (state.tokenize || tokenBase43)(stream, state);
        if (style2 == "comment" || style2 == "meta") return style2;
        if (ctx.align == null) ctx.align = true;
        if ((curPunc12 == ";" || curPunc12 == ":") && ctx.type == "statement") popContext15(state);
        else if (curPunc12 == "{") pushContext15(state, stream.column(), "}");
        else if (curPunc12 == "[") pushContext15(state, stream.column(), "]");
        else if (curPunc12 == "(") pushContext15(state, stream.column(), ")");
        else if (curPunc12 == "}") {
          while (ctx.type == "statement") ctx = popContext15(state);
          if (ctx.type == "}") ctx = popContext15(state);
          while (ctx.type == "statement") ctx = popContext15(state);
        } else if (curPunc12 == ctx.type) popContext15(state);
        else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc12 == "newstatement")
          pushContext15(state, stream.column(), "statement");
        state.startOfLine = false;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase43 && state.tokenize != null) return 0;
        var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing4 = firstChar == ctx.type;
        if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx2.unit);
        else if (ctx.align) return ctx.column + (closing4 ? 0 : 1);
        else return ctx.indented + (closing4 ? 0 : cx2.unit);
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "--" }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/xquery.js
var xquery_exports = {};
__export(xquery_exports, {
  xQuery: () => xQuery
});
function chain11(stream, state, f) {
  state.tokenize = f;
  return f(stream, state);
}
function tokenBase44(stream, state) {
  var ch2 = stream.next(), mightBeFunction = false, isEQName = isEQNameAhead(stream);
  if (ch2 == "<") {
    if (stream.match("!--", true))
      return chain11(stream, state, tokenXMLComment);
    if (stream.match("![CDATA", false)) {
      state.tokenize = tokenCDATA;
      return "tag";
    }
    if (stream.match("?", false)) {
      return chain11(stream, state, tokenPreProcessing);
    }
    var isclose = stream.eat("/");
    stream.eatSpace();
    var tagName2 = "", c2;
    while (c2 = stream.eat(/[^\s\u00a0=<>\"\'\/?]/)) tagName2 += c2;
    return chain11(stream, state, tokenTag(tagName2, isclose));
  } else if (ch2 == "{") {
    pushStateStack(state, { type: "codeblock" });
    return null;
  } else if (ch2 == "}") {
    popStateStack(state);
    return null;
  } else if (isInXmlBlock(state)) {
    if (ch2 == ">")
      return "tag";
    else if (ch2 == "/" && stream.eat(">")) {
      popStateStack(state);
      return "tag";
    } else
      return "variable";
  } else if (/\d/.test(ch2)) {
    stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
    return "atom";
  } else if (ch2 === "(" && stream.eat(":")) {
    pushStateStack(state, { type: "comment" });
    return chain11(stream, state, tokenComment18);
  } else if (!isEQName && (ch2 === '"' || ch2 === "'"))
    return startString2(stream, state, ch2);
  else if (ch2 === "$") {
    return chain11(stream, state, tokenVariable2);
  } else if (ch2 === ":" && stream.eat("=")) {
    return "keyword";
  } else if (ch2 === "(") {
    pushStateStack(state, { type: "paren" });
    return null;
  } else if (ch2 === ")") {
    popStateStack(state);
    return null;
  } else if (ch2 === "[") {
    pushStateStack(state, { type: "bracket" });
    return null;
  } else if (ch2 === "]") {
    popStateStack(state);
    return null;
  } else {
    var known = keywords45.propertyIsEnumerable(ch2) && keywords45[ch2];
    if (isEQName && ch2 === '"') while (stream.next() !== '"') {
    }
    if (isEQName && ch2 === "'") while (stream.next() !== "'") {
    }
    if (!known) stream.eatWhile(/[\w\$_-]/);
    var foundColon = stream.eat(":");
    if (!stream.eat(":") && foundColon) {
      stream.eatWhile(/[\w\$_-]/);
    }
    if (stream.match(/^[ \t]*\(/, false)) {
      mightBeFunction = true;
    }
    var word = stream.current();
    known = keywords45.propertyIsEnumerable(word) && keywords45[word];
    if (mightBeFunction && !known) known = { type: "function_call", style: "def" };
    if (isInXmlConstructor(state)) {
      popStateStack(state);
      return "variable";
    }
    if (word == "element" || word == "attribute" || known.type == "axis_specifier") pushStateStack(state, { type: "xmlconstructor" });
    return known ? known.style : "variable";
  }
}
function tokenComment18(stream, state) {
  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == ")" && maybeEnd) {
      if (nestedCount > 0)
        nestedCount--;
      else {
        popStateStack(state);
        break;
      }
    } else if (ch2 == ":" && maybeNested) {
      nestedCount++;
    }
    maybeEnd = ch2 == ":";
    maybeNested = ch2 == "(";
  }
  return "comment";
}
function tokenString27(quote4, f) {
  return function(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == quote4) {
        popStateStack(state);
        if (f) state.tokenize = f;
        break;
      } else if (stream.match("{", false) && isInXmlAttributeBlock(state)) {
        pushStateStack(state, { type: "codeblock" });
        state.tokenize = tokenBase44;
        return "string";
      }
    }
    return "string";
  };
}
function startString2(stream, state, quote4, f) {
  let tokenize6 = tokenString27(quote4, f);
  pushStateStack(state, { type: "string", name: quote4, tokenize: tokenize6 });
  return chain11(stream, state, tokenize6);
}
function tokenVariable2(stream, state) {
  var isVariableChar = /[\w\$_-]/;
  if (stream.eat('"')) {
    while (stream.next() !== '"') {
    }
    ;
    stream.eat(":");
  } else {
    stream.eatWhile(isVariableChar);
    if (!stream.match(":=", false)) stream.eat(":");
  }
  stream.eatWhile(isVariableChar);
  state.tokenize = tokenBase44;
  return "variable";
}
function tokenTag(name2, isclose) {
  return function(stream, state) {
    stream.eatSpace();
    if (isclose && stream.eat(">")) {
      popStateStack(state);
      state.tokenize = tokenBase44;
      return "tag";
    }
    if (!stream.eat("/"))
      pushStateStack(state, { type: "tag", name: name2, tokenize: tokenBase44 });
    if (!stream.eat(">")) {
      state.tokenize = tokenAttribute;
      return "tag";
    } else {
      state.tokenize = tokenBase44;
    }
    return "tag";
  };
}
function tokenAttribute(stream, state) {
  var ch2 = stream.next();
  if (ch2 == "/" && stream.eat(">")) {
    if (isInXmlAttributeBlock(state)) popStateStack(state);
    if (isInXmlBlock(state)) popStateStack(state);
    return "tag";
  }
  if (ch2 == ">") {
    if (isInXmlAttributeBlock(state)) popStateStack(state);
    return "tag";
  }
  if (ch2 == "=")
    return null;
  if (ch2 == '"' || ch2 == "'")
    return startString2(stream, state, ch2, tokenAttribute);
  if (!isInXmlAttributeBlock(state))
    pushStateStack(state, { type: "attribute", tokenize: tokenAttribute });
  stream.eat(/[a-zA-Z_:]/);
  stream.eatWhile(/[-a-zA-Z0-9_:.]/);
  stream.eatSpace();
  if (stream.match(">", false) || stream.match("/", false)) {
    popStateStack(state);
    state.tokenize = tokenBase44;
  }
  return "attribute";
}
function tokenXMLComment(stream, state) {
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "-" && stream.match("->", true)) {
      state.tokenize = tokenBase44;
      return "comment";
    }
  }
}
function tokenCDATA(stream, state) {
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "]" && stream.match("]", true)) {
      state.tokenize = tokenBase44;
      return "comment";
    }
  }
}
function tokenPreProcessing(stream, state) {
  var ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "?" && stream.match(">", true)) {
      state.tokenize = tokenBase44;
      return "processingInstruction";
    }
  }
}
function isInXmlBlock(state) {
  return isIn(state, "tag");
}
function isInXmlAttributeBlock(state) {
  return isIn(state, "attribute");
}
function isInXmlConstructor(state) {
  return isIn(state, "xmlconstructor");
}
function isEQNameAhead(stream) {
  if (stream.current() === '"')
    return stream.match(/^[^\"]+\"\:/, false);
  else if (stream.current() === "'")
    return stream.match(/^[^\"]+\'\:/, false);
  else
    return false;
}
function isIn(state, type7) {
  return state.stack.length && state.stack[state.stack.length - 1].type == type7;
}
function pushStateStack(state, newState) {
  state.stack.push(newState);
}
function popStateStack(state) {
  state.stack.pop();
  var reinstateTokenize = state.stack.length && state.stack[state.stack.length - 1].tokenize;
  state.tokenize = reinstateTokenize || tokenBase44;
}
var keywords45, xQuery;
var init_xquery = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/xquery.js"() {
    keywords45 = function() {
      function kw2(type7) {
        return { type: type7, style: "keyword" };
      }
      var operator4 = kw2("operator"), atom4 = { type: "atom", style: "atom" }, punctuation3 = { type: "punctuation", style: null }, qualifier = { type: "axis_specifier", style: "qualifier" };
      var kwObj = {
        ",": punctuation3
      };
      var basic = [
        "after",
        "all",
        "allowing",
        "ancestor",
        "ancestor-or-self",
        "any",
        "array",
        "as",
        "ascending",
        "at",
        "attribute",
        "base-uri",
        "before",
        "boundary-space",
        "by",
        "case",
        "cast",
        "castable",
        "catch",
        "child",
        "collation",
        "comment",
        "construction",
        "contains",
        "content",
        "context",
        "copy",
        "copy-namespaces",
        "count",
        "decimal-format",
        "declare",
        "default",
        "delete",
        "descendant",
        "descendant-or-self",
        "descending",
        "diacritics",
        "different",
        "distance",
        "document",
        "document-node",
        "element",
        "else",
        "empty",
        "empty-sequence",
        "encoding",
        "end",
        "entire",
        "every",
        "exactly",
        "except",
        "external",
        "first",
        "following",
        "following-sibling",
        "for",
        "from",
        "ftand",
        "ftnot",
        "ft-option",
        "ftor",
        "function",
        "fuzzy",
        "greatest",
        "group",
        "if",
        "import",
        "in",
        "inherit",
        "insensitive",
        "insert",
        "instance",
        "intersect",
        "into",
        "invoke",
        "is",
        "item",
        "language",
        "last",
        "lax",
        "least",
        "let",
        "levels",
        "lowercase",
        "map",
        "modify",
        "module",
        "most",
        "namespace",
        "next",
        "no",
        "node",
        "nodes",
        "no-inherit",
        "no-preserve",
        "not",
        "occurs",
        "of",
        "only",
        "option",
        "order",
        "ordered",
        "ordering",
        "paragraph",
        "paragraphs",
        "parent",
        "phrase",
        "preceding",
        "preceding-sibling",
        "preserve",
        "previous",
        "processing-instruction",
        "relationship",
        "rename",
        "replace",
        "return",
        "revalidation",
        "same",
        "satisfies",
        "schema",
        "schema-attribute",
        "schema-element",
        "score",
        "self",
        "sensitive",
        "sentence",
        "sentences",
        "sequence",
        "skip",
        "sliding",
        "some",
        "stable",
        "start",
        "stemming",
        "stop",
        "strict",
        "strip",
        "switch",
        "text",
        "then",
        "thesaurus",
        "times",
        "to",
        "transform",
        "treat",
        "try",
        "tumbling",
        "type",
        "typeswitch",
        "union",
        "unordered",
        "update",
        "updating",
        "uppercase",
        "using",
        "validate",
        "value",
        "variable",
        "version",
        "weight",
        "when",
        "where",
        "wildcards",
        "window",
        "with",
        "without",
        "word",
        "words",
        "xquery"
      ];
      for (var i = 0, l = basic.length; i < l; i++) {
        kwObj[basic[i]] = kw2(basic[i]);
      }
      ;
      var types8 = [
        "xs:anyAtomicType",
        "xs:anySimpleType",
        "xs:anyType",
        "xs:anyURI",
        "xs:base64Binary",
        "xs:boolean",
        "xs:byte",
        "xs:date",
        "xs:dateTime",
        "xs:dateTimeStamp",
        "xs:dayTimeDuration",
        "xs:decimal",
        "xs:double",
        "xs:duration",
        "xs:ENTITIES",
        "xs:ENTITY",
        "xs:float",
        "xs:gDay",
        "xs:gMonth",
        "xs:gMonthDay",
        "xs:gYear",
        "xs:gYearMonth",
        "xs:hexBinary",
        "xs:ID",
        "xs:IDREF",
        "xs:IDREFS",
        "xs:int",
        "xs:integer",
        "xs:item",
        "xs:java",
        "xs:language",
        "xs:long",
        "xs:Name",
        "xs:NCName",
        "xs:negativeInteger",
        "xs:NMTOKEN",
        "xs:NMTOKENS",
        "xs:nonNegativeInteger",
        "xs:nonPositiveInteger",
        "xs:normalizedString",
        "xs:NOTATION",
        "xs:numeric",
        "xs:positiveInteger",
        "xs:precisionDecimal",
        "xs:QName",
        "xs:short",
        "xs:string",
        "xs:time",
        "xs:token",
        "xs:unsignedByte",
        "xs:unsignedInt",
        "xs:unsignedLong",
        "xs:unsignedShort",
        "xs:untyped",
        "xs:untypedAtomic",
        "xs:yearMonthDuration"
      ];
      for (var i = 0, l = types8.length; i < l; i++) {
        kwObj[types8[i]] = atom4;
      }
      ;
      var operators8 = ["eq", "ne", "lt", "le", "gt", "ge", ":=", "=", ">", ">=", "<", "<=", ".", "|", "?", "and", "or", "div", "idiv", "mod", "*", "/", "+", "-"];
      for (var i = 0, l = operators8.length; i < l; i++) {
        kwObj[operators8[i]] = operator4;
      }
      ;
      var axis_specifiers = [
        "self::",
        "attribute::",
        "child::",
        "descendant::",
        "descendant-or-self::",
        "parent::",
        "ancestor::",
        "ancestor-or-self::",
        "following::",
        "preceding::",
        "following-sibling::",
        "preceding-sibling::"
      ];
      for (var i = 0, l = axis_specifiers.length; i < l; i++) {
        kwObj[axis_specifiers[i]] = qualifier;
      }
      ;
      return kwObj;
    }();
    xQuery = {
      name: "xquery",
      startState: function() {
        return {
          tokenize: tokenBase44,
          cc: [],
          stack: []
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        var style2 = state.tokenize(stream, state);
        return style2;
      },
      languageData: {
        commentTokens: { block: { open: "(:", close: ":)" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/yacas.js
var yacas_exports = {};
__export(yacas_exports, {
  yacas: () => yacas
});
function words21(str) {
  var obj = {}, words22 = str.split(" ");
  for (var i = 0; i < words22.length; ++i) obj[words22[i]] = true;
  return obj;
}
function tokenBase45(stream, state) {
  var ch2;
  ch2 = stream.next();
  if (ch2 === '"') {
    state.tokenize = tokenString28;
    return state.tokenize(stream, state);
  }
  if (ch2 === "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment19;
      return state.tokenize(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  stream.backUp(1);
  var m = stream.match(/^(\w+)\s*\(/, false);
  if (m !== null && bodiedOps.hasOwnProperty(m[1]))
    state.scopes.push("bodied");
  var scope = currentScope2(state);
  if (scope === "bodied" && ch2 === "[")
    state.scopes.pop();
  if (ch2 === "[" || ch2 === "{" || ch2 === "(")
    state.scopes.push(ch2);
  scope = currentScope2(state);
  if (scope === "[" && ch2 === "]" || scope === "{" && ch2 === "}" || scope === "(" && ch2 === ")")
    state.scopes.pop();
  if (ch2 === ";") {
    while (scope === "bodied") {
      state.scopes.pop();
      scope = currentScope2(state);
    }
  }
  if (stream.match(/\d+ *#/, true, false)) {
    return "qualifier";
  }
  if (stream.match(reFloatForm2, true, false)) {
    return "number";
  }
  if (stream.match(rePattern, true, false)) {
    return "variableName.special";
  }
  if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
    return "bracket";
  }
  if (stream.match(reFunctionLike, true, false)) {
    stream.backUp(1);
    return "variableName.function";
  }
  if (stream.match(reIdentifier, true, false)) {
    return "variable";
  }
  if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
    return "operator";
  }
  return "error";
}
function tokenString28(stream, state) {
  var next2, end2 = false, escaped = false;
  while ((next2 = stream.next()) != null) {
    if (next2 === '"' && !escaped) {
      end2 = true;
      break;
    }
    escaped = !escaped && next2 === "\\";
  }
  if (end2 && !escaped) {
    state.tokenize = tokenBase45;
  }
  return "string";
}
function tokenComment19(stream, state) {
  var prev, next2;
  while ((next2 = stream.next()) != null) {
    if (prev === "*" && next2 === "/") {
      state.tokenize = tokenBase45;
      break;
    }
    prev = next2;
  }
  return "comment";
}
function currentScope2(state) {
  var scope = null;
  if (state.scopes.length > 0)
    scope = state.scopes[state.scopes.length - 1];
  return scope;
}
var bodiedOps, pFloatForm, pIdentifier, reFloatForm2, reIdentifier, rePattern, reFunctionLike, yacas;
var init_yacas = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/yacas.js"() {
    bodiedOps = words21("Assert BackQuote D Defun Deriv For ForEach FromFile FromString Function Integrate InverseTaylor Limit LocalSymbols Macro MacroRule MacroRulePattern NIntegrate Rule RulePattern Subst TD TExplicitSum TSum Taylor Taylor1 Taylor2 Taylor3 ToFile ToStdout ToString TraceRule Until While");
    pFloatForm = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
    pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";
    reFloatForm2 = new RegExp(pFloatForm);
    reIdentifier = new RegExp(pIdentifier);
    rePattern = new RegExp(pIdentifier + "?_" + pIdentifier);
    reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");
    yacas = {
      name: "yacas",
      startState: function() {
        return {
          tokenize: tokenBase45,
          scopes: []
        };
      },
      token: function(stream, state) {
        if (stream.eatSpace()) return null;
        return state.tokenize(stream, state);
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize !== tokenBase45 && state.tokenize !== null)
          return null;
        var delta = 0;
        if (textAfter === "]" || textAfter === "];" || textAfter === "}" || textAfter === "};" || textAfter === ");")
          delta = -1;
        return (state.scopes.length + delta) * cx2.unit;
      },
      languageData: {
        electricInput: /[{}\[\]()\;]/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
      }
    };
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/z80.js
var z80_exports = {};
__export(z80_exports, {
  ez80: () => ez80,
  z80: () => z80
});
function mkZ80(ez802) {
  var keywords1, keywords210;
  if (ez802) {
    keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
    keywords210 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
  } else {
    keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
    keywords210 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
  }
  var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
  var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
  var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
  var numbers2 = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;
  return {
    name: "z80",
    startState: function() {
      return {
        context: 0
      };
    },
    token: function(stream, state) {
      if (!stream.column())
        state.context = 0;
      if (stream.eatSpace())
        return null;
      var w;
      if (stream.eatWhile(/\w/)) {
        if (ez802 && stream.eat(".")) {
          stream.eatWhile(/\w/);
        }
        w = stream.current();
        if (stream.indentation()) {
          if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
            state.context = 4;
            return "variable";
          }
          if (state.context == 2 && variables2.test(w)) {
            state.context = 4;
            return "variableName.special";
          }
          if (keywords1.test(w)) {
            state.context = 1;
            return "keyword";
          } else if (keywords210.test(w)) {
            state.context = 2;
            return "keyword";
          } else if (state.context == 4 && numbers2.test(w)) {
            return "number";
          }
          if (errors.test(w))
            return "error";
        } else if (stream.match(numbers2)) {
          return "number";
        } else {
          return null;
        }
      } else if (stream.eat(";")) {
        stream.skipToEnd();
        return "comment";
      } else if (stream.eat('"')) {
        while (w = stream.next()) {
          if (w == '"')
            break;
          if (w == "\\")
            stream.next();
        }
        return "string";
      } else if (stream.eat("'")) {
        if (stream.match(/\\?.'/))
          return "number";
      } else if (stream.eat(".") || stream.sol() && stream.eat("#")) {
        state.context = 5;
        if (stream.eatWhile(/\w/))
          return "def";
      } else if (stream.eat("$")) {
        if (stream.eatWhile(/[\da-f]/i))
          return "number";
      } else if (stream.eat("%")) {
        if (stream.eatWhile(/[01]/))
          return "number";
      } else {
        stream.next();
      }
      return null;
    }
  };
}
var z80, ez80;
var init_z80 = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/z80.js"() {
    z80 = mkZ80(false);
    ez80 = mkZ80(true);
  }
});

// ../../node_modules/@codemirror/legacy-modes/mode/mscgen.js
var mscgen_exports = {};
__export(mscgen_exports, {
  mscgen: () => mscgen,
  msgenny: () => msgenny,
  xu: () => xu
});
function mkParser(lang) {
  return {
    name: "mscgen",
    startState: startStateFn,
    copyState: copyStateFn,
    token: produceTokenFunction(lang),
    languageData: {
      commentTokens: { line: "#", block: { open: "/*", close: "*/" } }
    }
  };
}
function wordRegexpBoundary(pWords) {
  return new RegExp("^\\b(" + pWords.join("|") + ")\\b", "i");
}
function wordRegexp15(pWords) {
  return new RegExp("^(?:" + pWords.join("|") + ")", "i");
}
function startStateFn() {
  return {
    inComment: false,
    inString: false,
    inAttributeList: false,
    inScript: false
  };
}
function copyStateFn(pState) {
  return {
    inComment: pState.inComment,
    inString: pState.inString,
    inAttributeList: pState.inAttributeList,
    inScript: pState.inScript
  };
}
function produceTokenFunction(pConfig) {
  return function(pStream, pState) {
    if (pStream.match(wordRegexp15(pConfig.brackets), true, true)) {
      return "bracket";
    }
    if (!pState.inComment) {
      if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
        pState.inComment = true;
        return "comment";
      }
      if (pStream.match(wordRegexp15(pConfig.singlecomment), true, true)) {
        pStream.skipToEnd();
        return "comment";
      }
    }
    if (pState.inComment) {
      if (pStream.match(/[^\*\/]*\*\//, true, true))
        pState.inComment = false;
      else
        pStream.skipToEnd();
      return "comment";
    }
    if (!pState.inString && pStream.match(/\"(\\\"|[^\"])*/, true, true)) {
      pState.inString = true;
      return "string";
    }
    if (pState.inString) {
      if (pStream.match(/[^\"]*\"/, true, true))
        pState.inString = false;
      else
        pStream.skipToEnd();
      return "string";
    }
    if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))
      return "keyword";
    if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))
      return "keyword";
    if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))
      return "keyword";
    if (pStream.match(wordRegexp15(pConfig.arcsOthers), true, true))
      return "keyword";
    if (!!pConfig.operators && pStream.match(wordRegexp15(pConfig.operators), true, true))
      return "operator";
    if (!!pConfig.constants && pStream.match(wordRegexp15(pConfig.constants), true, true))
      return "variable";
    if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match("[", true, true)) {
      pConfig.inAttributeList = true;
      return "bracket";
    }
    if (pConfig.inAttributeList) {
      if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {
        return "attribute";
      }
      if (pStream.match("]", true, true)) {
        pConfig.inAttributeList = false;
        return "bracket";
      }
    }
    pStream.next();
    return null;
  };
}
var mscgen, msgenny, xu;
var init_mscgen = __esm({
  "../../node_modules/@codemirror/legacy-modes/mode/mscgen.js"() {
    mscgen = mkParser({
      "keywords": ["msc"],
      "options": ["hscale", "width", "arcgradient", "wordwraparcs"],
      "constants": ["true", "false", "on", "off"],
      "attributes": ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
      "brackets": ["\\{", "\\}"],
      // [ and  ] are brackets too, but these get handled in with lists
      "arcsWords": ["note", "abox", "rbox", "box"],
      "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
      "singlecomment": ["//", "#"],
      "operators": ["="]
    });
    msgenny = mkParser({
      "keywords": null,
      "options": ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
      "constants": ["true", "false", "on", "off", "auto"],
      "attributes": null,
      "brackets": ["\\{", "\\}"],
      "arcsWords": ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
      "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
      "singlecomment": ["//", "#"],
      "operators": ["="]
    });
    xu = mkParser({
      "keywords": ["msc", "xu"],
      "options": ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
      "constants": ["true", "false", "on", "off", "auto"],
      "attributes": ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
      "brackets": ["\\{", "\\}"],
      // [ and  ] are brackets too, but these get handled in with lists
      "arcsWords": ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
      "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
      "singlecomment": ["//", "#"],
      "operators": ["="]
    });
  }
});

// ../../node_modules/@codemirror/lang-vue/dist/index.js
var dist_exports19 = {};
__export(dist_exports19, {
  vue: () => vue,
  vueLanguage: () => vueLanguage
});
function makeVue(base5) {
  return base5.configure({
    dialect: "selfClosing",
    wrap: parseMixed(mixVue)
  }, "vue");
}
function mixVue(node, input) {
  switch (node.name) {
    case "Attribute":
      return /^(@|:|v-)/.test(input.read(node.from, node.from + 2)) ? attrMixed : null;
    case "Text":
      return textMixed;
  }
  return null;
}
function vue(config2 = {}) {
  let base5 = baseHTML2;
  if (config2.base) {
    if (config2.base.language.name != "html" || !(config2.base.language instanceof LRLanguage))
      throw new RangeError("The base option must be the result of calling html(...)");
    base5 = config2.base;
  }
  return new LanguageSupport(base5.language == baseHTML2.language ? vueLanguage : makeVue(base5.language), [
    base5.support,
    base5.language.data.of({ closeBrackets: { brackets: ["{", '"'] } })
  ]);
}
var parser20, exprParser, baseParser, exprMixed, textParser, attrParser, textMixed, attrMixed, baseHTML2, vueLanguage;
var init_dist39 = __esm({
  "../../node_modules/@codemirror/lang-vue/dist/index.js"() {
    init_dist5();
    init_dist18();
    init_dist17();
    init_dist4();
    init_dist();
    init_dist6();
    parser20 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "%pOVOWOOObQPOOOpOSO'#C_OOOO'#Cp'#CpQVOWOOQxQPOOO!TQQOOQ!YQPOOOOOO,58y,58yO!_OSO,58yOOOO-E6n-E6nO!dQQO'#CqQ{QPOOO!iQPOOQ{QPOOO!qQPOOOOOO1G.e1G.eOOQO,59],59]OOQO-E6o-E6oO!yOpO'#CiO#RO`O'#CiQOQPOOO#ZO#tO'#CmO#fO!bO'#CmOOQO,59T,59TO#qOpO,59TO#vO`O,59TOOOO'#Cr'#CrO#{O#tO,59XOOQO,59X,59XOOOO'#Cs'#CsO$WO!bO,59XOOQO1G.o1G.oOOOO-E6p-E6pOOQO1G.s1G.sOOOO-E6q-E6q",
      stateData: "$g~OjOS~OQROUROkQO~OWTOXUOZUO`VO~OSXOTWO~OXUO[]OlZO~OY^O~O[_O~OT`O~OYaO~OmcOodO~OmfOogO~O^iOnhO~O_jOphO~ObkOqkOrmO~OcnOsnOtmO~OnpO~OppO~ObkOqkOrrO~OcnOsnOtrO~OWX`~",
      goto: "!^hPPPiPPPPPPPPPmPPPpPPsy!Q!WTROSRe]Re_QSORYSS[T^Rb[QlfRqlQogRso",
      nodeNames: "\u26A0 Content Text Interpolation InterpolationContent }} Entity Attribute VueAttributeName : Identifier @ Is ScriptAttributeValue AttributeScript AttributeScript AttributeName AttributeValue Entity Entity",
      maxTerm: 36,
      nodeProps: [
        ["isolate", -3, 3, 13, 17, ""]
      ],
      skippedNodes: [0],
      repeatNodeCount: 4,
      tokenData: "'y~RdXY!aYZ!a]^!apq!ars!rwx!w}!O!|!O!P#t!Q![#y![!]$s!_!`%g!b!c%l!c!}#y#R#S#y#T#j#y#j#k%q#k#o#y%W;'S#y;'S;:j$m<%lO#y~!fSj~XY!aYZ!a]^!apq!a~!wOm~~!|Oo~!b#RX`!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|!b#qP;=`<%l!|~#yOl~%W$QXY#t`!b}!O!|!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y%W$pP;=`<%l#y~$zXX~`!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|~%lO[~~%qOZ~%W%xXY#t`!b}!O&e!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y!b&jX`!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|!b'^XW!b`!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|",
      tokenizers: [6, 7, /* @__PURE__ */ new LocalTokenGroup("b~RP#q#rU~XP#q#r[~aOT~~", 17, 4), /* @__PURE__ */ new LocalTokenGroup("!k~RQvwX#o#p!_~^TU~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOU~~![P;=`<%lm~!bP#o#p!e~!jOk~~", 72, 2), /* @__PURE__ */ new LocalTokenGroup("[~RPwxU~ZOp~~", 11, 15), /* @__PURE__ */ new LocalTokenGroup("[~RPrsU~ZOn~~", 11, 14), /* @__PURE__ */ new LocalTokenGroup("!e~RQvwXwx!_~^Tc~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOc~~![P;=`<%lm~!dOt~~", 66, 35), /* @__PURE__ */ new LocalTokenGroup("!e~RQrsXvw^~^Or~~cTb~Oprq!]r!^;'Sr;'S;=`!^<%lOr~uUOprq!]r!]!^!X!^;'Sr;'S;=`!^<%lOr~!^Ob~~!aP;=`<%lr~", 66, 33)],
      topRules: { "Content": [0, 1], "Attribute": [1, 7] },
      tokenPrec: 157
    });
    exprParser = /* @__PURE__ */ javascriptLanguage.parser.configure({
      top: "SingleExpression"
    });
    baseParser = /* @__PURE__ */ parser20.configure({
      props: [
        /* @__PURE__ */ styleTags({
          Text: tags.content,
          Is: tags.definitionOperator,
          AttributeName: tags.attributeName,
          VueAttributeName: tags.keyword,
          Identifier: tags.variableName,
          "AttributeValue ScriptAttributeValue": tags.attributeValue,
          Entity: tags.character,
          "{{ }}": tags.brace,
          "@ :": tags.punctuation
        })
      ]
    });
    exprMixed = { parser: exprParser };
    textParser = /* @__PURE__ */ baseParser.configure({
      wrap: /* @__PURE__ */ parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed : null)
    });
    attrParser = /* @__PURE__ */ baseParser.configure({
      wrap: /* @__PURE__ */ parseMixed((node, input) => node.name == "AttributeScript" ? exprMixed : null),
      top: "Attribute"
    });
    textMixed = { parser: textParser };
    attrMixed = { parser: attrParser };
    baseHTML2 = /* @__PURE__ */ html();
    vueLanguage = /* @__PURE__ */ makeVue(baseHTML2.language);
  }
});

// ../../node_modules/@codemirror/lang-angular/dist/index.js
var dist_exports20 = {};
__export(dist_exports20, {
  angular: () => angular,
  angularLanguage: () => angularLanguage
});
function attrContent(quote4, token, script) {
  return new ExternalTokenizer((input) => {
    let start2 = input.pos;
    while (input.next != quote4 && input.next >= 0 && (script || input.next != 38 && (input.next != 123 || input.peek(1) != 123)))
      input.advance();
    if (input.pos > start2)
      input.acceptToken(token);
  });
}
function mkAngular(language2) {
  return language2.configure({ wrap: parseMixed(mixAngular) }, "angular");
}
function mixAngular(node, input) {
  switch (node.name) {
    case "Attribute":
      return /^[*#(\[]|\{\{/.test(input.read(node.from, node.to)) ? attrMixed2 : null;
    case "Text":
      return textMixed2;
  }
  return null;
}
function angular(config2 = {}) {
  let base5 = baseHTML3;
  if (config2.base) {
    if (config2.base.language.name != "html" || !(config2.base.language instanceof LRLanguage))
      throw new RangeError("The base option must be the result of calling html(...)");
    base5 = config2.base;
  }
  return new LanguageSupport(base5.language == baseHTML3.language ? angularLanguage : mkAngular(base5.language), [base5.support, base5.language.data.of({
    closeBrackets: { brackets: ["[", "{", '"'] },
    indentOnInput: /^\s*[\}\]]$/
  })]);
}
var Text2, attributeContentSingle, attributeContentDouble, scriptAttributeContentSingle, scriptAttributeContentDouble, text3, attrSingle, attrDouble, scriptAttrSingle, scriptAttrDouble, parser21, exprParser2, baseParser2, exprMixed2, statementMixed, textParser2, attrParser2, textMixed2, attrMixed2, baseHTML3, angularLanguage;
var init_dist40 = __esm({
  "../../node_modules/@codemirror/lang-angular/dist/index.js"() {
    init_dist5();
    init_dist18();
    init_dist17();
    init_dist4();
    init_dist();
    init_dist6();
    Text2 = 1;
    attributeContentSingle = 33;
    attributeContentDouble = 34;
    scriptAttributeContentSingle = 35;
    scriptAttributeContentDouble = 36;
    text3 = /* @__PURE__ */ new ExternalTokenizer((input) => {
      let start2 = input.pos;
      for (; ; ) {
        if (input.next == 10) {
          input.advance();
          break;
        } else if (input.next == 123 && input.peek(1) == 123 || input.next < 0) {
          break;
        }
        input.advance();
      }
      if (input.pos > start2)
        input.acceptToken(Text2);
    });
    attrSingle = /* @__PURE__ */ attrContent(39, attributeContentSingle, false);
    attrDouble = /* @__PURE__ */ attrContent(34, attributeContentDouble, false);
    scriptAttrSingle = /* @__PURE__ */ attrContent(39, scriptAttributeContentSingle, true);
    scriptAttrDouble = /* @__PURE__ */ attrContent(34, scriptAttributeContentDouble, true);
    parser21 = /* @__PURE__ */ LRParser.deserialize({
      version: 14,
      states: "(jOVOqOOOeQpOOOvO!bO'#CaOOOP'#Cx'#CxQVOqOOO!OQpO'#CfO!WQpO'#ClO!]QpO'#CrO!bQpO'#CsOOQO'#Cv'#CvQ!gQpOOQ!lQpOOQ!qQpOOOOOV,58{,58{O!vOpO,58{OOOP-E6v-E6vO!{QpO,59QO#TQpO,59QOOQO,59W,59WO#YQpO,59^OOQO,59_,59_O#_QpOOO#_QpOOO#gQpOOOOOV1G.g1G.gO#oQpO'#CyO#tQpO1G.lOOQO1G.l1G.lO#|QpO1G.lOOQO1G.x1G.xO$UO`O'#DUO$ZOWO'#DUOOQO'#Co'#CoQOQpOOOOQO'#Cu'#CuO$`OtO'#CwO$qOrO'#CwOOQO,59e,59eOOQO-E6w-E6wOOQO7+$W7+$WO%SQpO7+$WO%[QpO7+$WOOOO'#Cp'#CpO%aOpO,59pOOOO'#Cq'#CqO%fOpO,59pOOOS'#Cz'#CzO%kOtO,59cOOQO,59c,59cOOOQ'#C{'#C{O%|OrO,59cO&_QpO<<GrOOQO<<Gr<<GrOOQO1G/[1G/[OOOS-E6x-E6xOOQO1G.}1G.}OOOQ-E6y-E6yOOQOAN=^AN=^",
      stateData: "&d~OvOS~OPROSQOVROWRO~OZTO[XO^VOaUOhWO~OR]OU^O~O[`O^aO~O[bO~O[cO~O[dO~ObeO~ObfO~ObgO~ORhO~O]kOwiO~O[lO~O_mO~OynOzoO~OysOztO~O[uO~O]wOwiO~O_yOwiO~OtzO~Os|O~OSQOV!OOW!OOr!OOy!QO~OSQOV!ROW!ROq!ROz!QO~O_!TOwiO~O]!UO~Oy!VO~Oz!VO~OSQOV!OOW!OOr!OOy!XO~OSQOV!ROW!ROq!ROz!XO~O]!ZO~O",
      goto: "#dyPPPPPzPPPP!WPPPPP!WPP!Z!^!a!d!dP!g!j!m!p!v#Q#WPPPPPPPP#^SROSS!Os!PT!Rt!SRYPRqeR{nR}oRZPRqfR[PRqgQSOR_SQj`SvjxRxlQ!PsR!W!PQ!StR!Y!SQpeRrf",
      nodeNames: "\u26A0 Text Content }} {{ Interpolation InterpolationContent Entity InvalidEntity Attribute BoundAttributeName [ Identifier ] ( ) ReferenceName # Is ExpressionAttributeValue AttributeInterpolation AttributeInterpolation EventName DirectiveName * StatementAttributeValue AttributeName AttributeValue",
      maxTerm: 42,
      nodeProps: [
        ["openedBy", 3, "{{", 15, "("],
        ["closedBy", 4, "}}", 14, ")"],
        ["isolate", -4, 5, 19, 25, 27, ""]
      ],
      skippedNodes: [0],
      repeatNodeCount: 4,
      tokenData: "0r~RyOX#rXY$mYZ$mZ]#r]^$m^p#rpq$mqr#rrs%jst&Qtv#rvw&hwx)zxy*byz*xz{+`{}#r}!O+v!O!P-]!P!Q#r!Q![+v![!]+v!]!_#r!_!`-s!`!c#r!c!}+v!}#O.Z#O#P#r#P#Q.q#Q#R#r#R#S+v#S#T#r#T#o+v#o#p/X#p#q#r#q#r0Z#r%W#r%W;'S+v;'S;:j-V;:j;=`$g<%lO+vQ#wTUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rQ$ZSO#q#r#r;'S#r;'S;=`$g<%lO#rQ$jP;=`<%l#rR$t[UQvPOX#rXY$mYZ$mZ]#r]^$m^p#rpq$mq#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR%qTyPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR&XTaPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR&oXUQWPOp'[pq#rq!]'[!]!^#r!^#q'[#q#r(d#r;'S'[;'S;=`)t<%lO'[R'aXUQOp'[pq#rq!]'[!]!^'|!^#q'[#q#r(d#r;'S'[;'S;=`)t<%lO'[R(TTVPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR(gXOp'[pq#rq!]'[!]!^'|!^#q'[#q#r)S#r;'S'[;'S;=`)t<%lO'[P)VUOp)Sq!])S!]!^)i!^;'S)S;'S;=`)n<%lO)SP)nOVPP)qP;=`<%l)SR)wP;=`<%l'[R*RTzPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR*iT^PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+PT_PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+gThPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+}b[PUQO}#r}!O+v!O!Q#r!Q![+v![!]+v!]!c#r!c!}+v!}#R#r#R#S+v#S#T#r#T#o+v#o#q#r#q#r$W#r%W#r%W;'S+v;'S;:j-V;:j;=`$g<%lO+vR-YP;=`<%l+vR-dTwPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR-zTUQbPO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR.bTZPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR.xT]PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR/^VUQO#o#r#o#p/s#p#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR/zTSPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#r~0^TO#q#r#q#r0m#r;'S#r;'S;=`$g<%lO#r~0rOR~",
      tokenizers: [text3, attrSingle, attrDouble, scriptAttrSingle, scriptAttrDouble, 0, 1],
      topRules: { "Content": [0, 2], "Attribute": [1, 9] },
      tokenPrec: 0
    });
    exprParser2 = /* @__PURE__ */ javascriptLanguage.parser.configure({
      top: "SingleExpression"
    });
    baseParser2 = /* @__PURE__ */ parser21.configure({
      props: [
        /* @__PURE__ */ styleTags({
          Text: tags.content,
          Is: tags.definitionOperator,
          AttributeName: tags.attributeName,
          "AttributeValue ExpressionAttributeValue StatementAttributeValue": tags.attributeValue,
          Entity: tags.character,
          InvalidEntity: tags.invalid,
          "BoundAttributeName/Identifier": tags.attributeName,
          "EventName/Identifier": /* @__PURE__ */ tags.special(tags.attributeName),
          "ReferenceName/Identifier": tags.variableName,
          "DirectiveName/Identifier": tags.keyword,
          "{{ }}": tags.brace,
          "( )": tags.paren,
          "[ ]": tags.bracket,
          "# '*'": tags.punctuation
        })
      ]
    });
    exprMixed2 = { parser: exprParser2 };
    statementMixed = { parser: javascriptLanguage.parser };
    textParser2 = /* @__PURE__ */ baseParser2.configure({
      wrap: /* @__PURE__ */ parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed2 : null)
    });
    attrParser2 = /* @__PURE__ */ baseParser2.configure({
      wrap: /* @__PURE__ */ parseMixed((node, input) => {
        var _a2;
        return node.name == "InterpolationContent" ? exprMixed2 : node.name != "AttributeInterpolation" ? null : ((_a2 = node.node.parent) === null || _a2 === void 0 ? void 0 : _a2.name) == "StatementAttributeValue" ? statementMixed : exprMixed2;
      }),
      top: "Attribute"
    });
    textMixed2 = { parser: textParser2 };
    attrMixed2 = { parser: attrParser2 };
    baseHTML3 = /* @__PURE__ */ html({ selfClosingTags: true });
    angularLanguage = /* @__PURE__ */ mkAngular(baseHTML3.language);
  }
});

// ../../node_modules/lodash.merge/index.js
var require_lodash = __commonJS({
  "../../node_modules/lodash.merge/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types8 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types8) {
          return types8;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer3 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer3 ? Buffer3.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data2 = this.__data__;
      if (nativeCreate) {
        var result = data2[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data2, key) ? data2[key] : void 0;
    }
    function hashHas(key) {
      var data2 = this.__data__;
      return nativeCreate ? data2[key] !== void 0 : hasOwnProperty.call(data2, key);
    }
    function hashSet(key, value) {
      var data2 = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash2.prototype.clear = hashClear;
    Hash2.prototype["delete"] = hashDelete;
    Hash2.prototype.get = hashGet;
    Hash2.prototype.has = hashHas;
    Hash2.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data2.length - 1;
      if (index == lastIndex) {
        data2.pop();
      } else {
        splice.call(data2, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      return index < 0 ? void 0 : data2[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        ++this.size;
        data2.push([key, value]);
      } else {
        data2[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash2(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash2()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data2 = getMapData(this, key), size = data2.size;
      data2.set(key, value);
      this.size += data2.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack2(entries) {
      var data2 = this.__data__ = new ListCache(entries);
      this.size = data2.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data2 = this.__data__, result = data2["delete"](key);
      this.size = data2.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data2 = this.__data__;
      if (data2 instanceof ListCache) {
        var pairs = data2.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data2.size;
          return this;
        }
        data2 = this.__data__ = new MapCache(pairs);
      }
      data2.set(key, value);
      this.size = data2.size;
      return this;
    }
    Stack2.prototype.clear = stackClear;
    Stack2.prototype["delete"] = stackDelete;
    Stack2.prototype.get = stackGet;
    Stack2.prototype.has = stackHas;
    Stack2.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack2());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction2(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string3) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string3),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array2) {
      var index = -1, length = source.length;
      array2 || (array2 = Array(length));
      while (++index < length) {
        array2[index] = source[index];
      }
      return array2;
    }
    function copyObject(source, props2, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props2.length;
      while (++index < length) {
        var key = props2[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props2 = keysFunc(object), length = props2.length;
        while (length--) {
          var key = props2[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data2 = map.__data__;
      return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag2 = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag2;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type7 = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type7 == "number" || type7 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type7 = typeof index;
      if (type7 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type7 == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type7 = typeof value;
      return type7 == "string" || type7 == "number" || type7 == "symbol" || type7 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start2, transform) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array2 = Array(length);
        while (++index < length) {
          array2[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = transform(array2);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count2 = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count2 >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count2 = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction2(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag2 = baseGetTag(value);
      return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type7 = typeof value;
      return value != null && (type7 == "object" || type7 == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module2.exports = merge;
  }
});

// ../../node_modules/lodash.isequal/index.js
var require_lodash2 = __commonJS({
  "../../node_modules/lodash.isequal/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array2[index];
        if (predicate(value, index, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array2, values2) {
      var index = -1, length = values2.length, offset = array2.length;
      while (++index < length) {
        array2[offset + index] = values2[index];
      }
      return array2;
    }
    function arraySome(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length;
      while (++index < length) {
        if (predicate(array2[index], index, array2)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache4, key) {
      return cache4.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer3 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer3 ? Buffer3.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data2 = this.__data__;
      if (nativeCreate) {
        var result = data2[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data2, key) ? data2[key] : void 0;
    }
    function hashHas(key) {
      var data2 = this.__data__;
      return nativeCreate ? data2[key] !== void 0 : hasOwnProperty.call(data2, key);
    }
    function hashSet(key, value) {
      var data2 = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash2.prototype.clear = hashClear;
    Hash2.prototype["delete"] = hashDelete;
    Hash2.prototype.get = hashGet;
    Hash2.prototype.has = hashHas;
    Hash2.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data2.length - 1;
      if (index == lastIndex) {
        data2.pop();
      } else {
        splice.call(data2, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      return index < 0 ? void 0 : data2[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        ++this.size;
        data2.push([key, value]);
      } else {
        data2[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash2(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash2()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data2 = getMapData(this, key), size = data2.size;
      data2.set(key, value);
      this.size += data2.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values2) {
      var index = -1, length = values2 == null ? 0 : values2.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values2[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack2(entries) {
      var data2 = this.__data__ = new ListCache(entries);
      this.size = data2.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data2 = this.__data__, result = data2["delete"](key);
      this.size = data2.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data2 = this.__data__;
      if (data2 instanceof ListCache) {
        var pairs = data2.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data2.size;
          return this;
        }
        data2 = this.__data__ = new MapCache(pairs);
      }
      data2.set(key, value);
      this.size = data2.size;
      return this;
    }
    Stack2.prototype.clear = stackClear;
    Stack2.prototype["delete"] = stackDelete;
    Stack2.prototype.get = stackGet;
    Stack2.prototype.has = stackHas;
    Stack2.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack2());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack2());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack2());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array2);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array2, other);
      stack.set(other, array2);
      while (++index < arrLength) {
        var arrValue = array2[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array2);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag2, bitmask, customizer, equalFunc, stack) {
      switch (tag2) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys2, getSymbols);
    }
    function getMapData(map, key) {
      var data2 = map.__data__;
      return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag2 = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag2;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol4) {
        return propertyIsEnumerable.call(object, symbol4);
      });
    };
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type7 = typeof value;
      return type7 == "string" || type7 == "number" || type7 == "symbol" || type7 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction2(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag2 = baseGetTag(value);
      return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type7 = typeof value;
      return value != null && (type7 == "object" || type7 == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module2.exports = isEqual;
  }
});

// ../../node_modules/lodash.xor/index.js
var require_lodash3 = __commonJS({
  "../../node_modules/lodash.xor/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayFilter(array2, predicate) {
      var index = -1, length = array2 ? array2.length : 0, resIndex = 0, result = [];
      while (++index < length) {
        var value = array2[index];
        if (predicate(value, index, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array2, value) {
      var length = array2 ? array2.length : 0;
      return !!length && baseIndexOf(array2, value, 0) > -1;
    }
    function arrayIncludesWith(array2, value, comparator) {
      var index = -1, length = array2 ? array2.length : 0;
      while (++index < length) {
        if (comparator(value, array2[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array2, iteratee) {
      var index = -1, length = array2 ? array2.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array2[index], index, array2);
      }
      return result;
    }
    function arrayPush(array2, values2) {
      var index = -1, length = values2.length, offset = array2.length;
      while (++index < length) {
        array2[offset + index] = values2[index];
      }
      return array2;
    }
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array2[index], index, array2)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array2, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array2.length;
      while (++index < length) {
        if (array2[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache4, key) {
      return cache4.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var splice = arrayProto.splice;
    var nativeMax = Math.max;
    var Map2 = getNative(root, "Map");
    var Set2 = getNative(root, "Set");
    var nativeCreate = getNative(Object, "create");
    function Hash2(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data2 = this.__data__;
      if (nativeCreate) {
        var result = data2[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data2, key) ? data2[key] : void 0;
    }
    function hashHas(key) {
      var data2 = this.__data__;
      return nativeCreate ? data2[key] !== void 0 : hasOwnProperty.call(data2, key);
    }
    function hashSet(key, value) {
      var data2 = this.__data__;
      data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash2.prototype.clear = hashClear;
    Hash2.prototype["delete"] = hashDelete;
    Hash2.prototype.get = hashGet;
    Hash2.prototype.has = hashHas;
    Hash2.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data2.length - 1;
      if (index == lastIndex) {
        data2.pop();
      } else {
        splice.call(data2, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      return index < 0 ? void 0 : data2[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data2 = this.__data__, index = assocIndexOf(data2, key);
      if (index < 0) {
        data2.push([key, value]);
      } else {
        data2[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash2(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash2()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values2) {
      var index = -1, length = values2 ? values2.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values2[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseDifference(array2, values2, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array2.length, result = [], valuesLength = values2.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values2 = arrayMap(values2, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values2.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values2 = new SetCache(values2);
      }
      outer:
        while (++index < length) {
          var value = array2[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values2[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values2, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseRest(func, start2) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array2 = Array(length);
        while (++index < length) {
          array2[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = array2;
        return apply(func, this, otherArgs);
      };
    }
    function baseUniq(array2, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set2 = iteratee ? null : createSet(array2);
        if (set2) {
          return setToArray(set2);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index < length) {
          var value = array2[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    function baseXor(arrays, iteratee, comparator) {
      var index = -1, length = arrays.length;
      while (++index < length) {
        var result = result ? arrayPush(
          baseDifference(result, arrays[index], iteratee, comparator),
          baseDifference(arrays[index], result, iteratee, comparator)
        ) : arrays[index];
      }
      return result && result.length ? baseUniq(result, iteratee, comparator) : [];
    }
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
      return new Set2(values2);
    };
    function getMapData(map, key) {
      var data2 = map.__data__;
      return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKeyable(value) {
      var type7 = typeof value;
      return type7 == "string" || type7 == "number" || type7 == "symbol" || type7 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    var xor2 = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction2(value) {
      var tag2 = isObject(value) ? objectToString.call(value) : "";
      return tag2 == funcTag || tag2 == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type7 = typeof value;
      return !!value && (type7 == "object" || type7 == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function noop() {
    }
    module2.exports = xor2;
  }
});

// ../../node_modules/lodash.keys/index.js
var require_lodash4 = __commonJS({
  "../../node_modules/lodash.keys/index.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeKeys = overArg(Object.keys, Object);
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction2(value) {
      var tag2 = isObject(value) ? objectToString.call(value) : "";
      return tag2 == funcTag || tag2 == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type7 = typeof value;
      return !!value && (type7 == "object" || type7 == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function keys2(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module2.exports = keys2;
  }
});

// ../../node_modules/to-json-schema/lib/jsonSchemaHelpers.js
var require_jsonSchemaHelpers = __commonJS({
  "../../node_modules/to-json-schema/lib/jsonSchemaHelpers.js"(exports, module2) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var types8 = {
      string: function testString(instance) {
        return typeof instance === "string";
      },
      number: function testNumber(instance) {
        return typeof instance === "number" && isFinite(instance);
      },
      integer: function testInteger(instance) {
        return typeof instance === "number" && instance % 1 === 0;
      },
      "boolean": function testBoolean(instance) {
        return typeof instance === "boolean";
      },
      array: function testArray(instance) {
        return instance instanceof Array;
      },
      "null": function testNull(instance) {
        return instance === null;
      },
      date: function testDate(instance) {
        return instance instanceof Date;
      },
      any: (
        /* istanbul ignore next: not using this but keeping it here for sake of completeness */
        function testAny(instance) {
          return true;
        }
      ),
      object: function testObject(instance) {
        return instance && _typeof(instance) === "object" && !(instance instanceof Array) && !(instance instanceof Date);
      }
    };
    var FORMAT_REGEXPS = {
      "date-time": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
      date: /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
      time: /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
      email: /^(?:[\w!#$%&'*+-/=?^`{|}~]+\.)*[\w!#$%&'*+-/=?^`{|}~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
      "ip-address": /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      ipv6: /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
      uri: /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
      color: /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
      // hostname regex from: http://stackoverflow.com/a/1420225/5628
      hostname: /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "host-name": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      alpha: /^[a-zA-Z]+$/,
      alphanumeric: /^[a-zA-Z0-9]+$/,
      "utc-millisec": function utcMillisec(input) {
        return typeof input === "string" && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
      },
      // eslint-disable-line no-restricted-globals
      regex: function regex(input) {
        var result = true;
        try {
          new RegExp(input);
        } catch (e) {
          result = false;
        }
        return result;
      },
      style: /\s*(.+?):\s*([^;]+);?/g,
      phone: /^\+(?:[0-9] ?){6,14}[0-9]$/
    };
    FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS["ip-address"];
    var isFormat = function isFormat2(input, format) {
      if (typeof input === "string" && FORMAT_REGEXPS[format] !== void 0) {
        if (FORMAT_REGEXPS[format] instanceof RegExp) {
          return FORMAT_REGEXPS[format].test(input);
        }
        if (typeof FORMAT_REGEXPS[format] === "function") {
          return FORMAT_REGEXPS[format](input);
        }
      }
      return true;
    };
    module2.exports = {
      types: types8,
      isFormat,
      FORMAT_REGEXPS
    };
  }
});

// ../../node_modules/to-json-schema/lib/helpers.js
var require_helpers = __commonJS({
  "../../node_modules/to-json-schema/lib/helpers.js"(exports, module2) {
    "use strict";
    var isEqual = require_lodash2();
    var xor2 = require_lodash3();
    var keys2 = require_lodash4();
    var _require2 = require_jsonSchemaHelpers();
    var types8 = _require2.types;
    var FORMAT_REGEXPS = _require2.FORMAT_REGEXPS;
    var isFormat = _require2.isFormat;
    var helpers = {
      stringFormats: keys2(FORMAT_REGEXPS),
      isFormat,
      typeNames: [
        "integer",
        "number",
        // make sure number is after integer (for proper type detection)
        "string",
        "array",
        "object",
        "boolean",
        "null",
        "date"
      ],
      getType: function getType(val) {
        return helpers.typeNames.find(function(typeName2) {
          return types8[typeName2](val);
        });
      },
      /**
       * Tries to find the least common schema from two supplied JSON schemas. If it is unable to find
       * such a schema, it returns null. Incompatibility in structure/types leads to returning null,
       * except when the difference is only integer/number. Than the 'number' is used instead 'int'.
       * Types/Structure incompatibility in array items only leads to schema that doesn't specify
       * items structure/type.
       * @param {object} schema1 - JSON schema
       * @param {object} schema2 - JSON schema
       * @returns {object|null}
       */
      mergeSchemaObjs: function mergeSchemaObjs(schema1, schema2) {
        var schema1Keys = keys2(schema1);
        var schema2Keys = keys2(schema2);
        if (!isEqual(schema1Keys, schema2Keys)) {
          if (schema1.type === "array" && schema2.type === "array") {
            if (isEqual(xor2(schema1Keys, schema2Keys), ["items"])) {
              var schemaWithoutItems = schema1Keys.length > schema2Keys.length ? schema2 : schema1;
              var schemaWithItems = schema1Keys.length > schema2Keys.length ? schema1 : schema2;
              var isSame = keys2(schemaWithoutItems).reduce(function(acc, current) {
                return isEqual(schemaWithoutItems[current], schemaWithItems[current]) && acc;
              }, true);
              if (isSame) {
                return schemaWithoutItems;
              }
            }
          }
          if (schema1.type !== "object" || schema2.type !== "object") {
            return null;
          }
        }
        var retObj = {};
        for (var i = 0, length = schema1Keys.length; i < length; i++) {
          var key = schema1Keys[i];
          if (helpers.getType(schema1[key]) === "object") {
            var x = helpers.mergeSchemaObjs(schema1[key], schema2[key]);
            if (!x) {
              if (schema1.type === "object" || schema2.type === "object") {
                return {
                  type: "object"
                };
              }
              if (key !== "items" || schema1.type !== "array" || schema2.type !== "array") {
                return null;
              }
            } else {
              retObj[key] = x;
            }
          } else {
            if (key === "type") {
              if (schema1[key] !== schema2[key]) {
                if (schema1[key] === "integer" && schema2[key] === "number" || schema1[key] === "number" && schema2[key] === "integer") {
                  retObj[key] = "number";
                } else {
                  return null;
                }
              } else {
                retObj[key] = schema1[key];
              }
            } else {
              if (!isEqual(schema1[key], schema2[key])) {
                return null;
              }
              retObj[key] = schema1[key];
            }
          }
        }
        return retObj;
      }
    };
    module2.exports = helpers;
  }
});

// ../../node_modules/to-json-schema/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/to-json-schema/lib/index.js"(exports, module2) {
    "use strict";
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props2) {
      for (var i = 0; i < props2.length; i++) {
        var descriptor = props2[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var merge = require_lodash();
    var isEqual = require_lodash2();
    var helpers = require_helpers();
    var defaultOptions = {
      required: false,
      postProcessFnc: null,
      strings: {
        detectFormat: true,
        preProcessFnc: null
      },
      arrays: {
        mode: "all"
      },
      objects: {
        preProcessFnc: null,
        postProcessFnc: null,
        additionalProperties: true
      }
    };
    var skipReverseFind = ["hostname", "host-name", "alpha", "alphanumeric", "regex", "regexp", "pattern"];
    var filteredFormats = helpers.stringFormats.filter(function(item) {
      return skipReverseFind.indexOf(item) < 0;
    });
    function getCommonTypeFromArrayOfTypes(arrOfTypes) {
      var lastVal;
      for (var i = 0, length = arrOfTypes.length; i < length; i++) {
        var currentType = arrOfTypes[i];
        if (i > 0) {
          if (currentType === "integer" && lastVal === "number") {
            currentType = "number";
          } else if (currentType === "number" && lastVal === "integer") {
            lastVal = "number";
          }
          if (lastVal !== currentType) return null;
        }
        lastVal = currentType;
      }
      return lastVal;
    }
    function getCommonArrayItemsType(arr) {
      return getCommonTypeFromArrayOfTypes(arr.map(function(item) {
        return helpers.getType(item);
      }));
    }
    var ToJsonSchema = /* @__PURE__ */ function() {
      function ToJsonSchema2(options) {
        _classCallCheck(this, ToJsonSchema2);
        this.options = merge({}, defaultOptions, options);
        this.getObjectSchemaDefault = this.getObjectSchemaDefault.bind(this);
        this.getStringSchemaDefault = this.getStringSchemaDefault.bind(this);
        this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);
        this.commmonPostProcessDefault = this.commmonPostProcessDefault.bind(this);
        this.objectPostProcessDefault = this.objectPostProcessDefault.bind(this);
      }
      _createClass(ToJsonSchema2, [{
        key: "getCommonArrayItemSchema",
        value: function getCommonArrayItemSchema(arr) {
          var _this = this;
          var schemas = arr.map(function(item) {
            return _this.getSchema(item);
          });
          return schemas.reduce(function(acc, current) {
            return helpers.mergeSchemaObjs(acc, current);
          }, schemas.pop());
        }
      }, {
        key: "getObjectSchemaDefault",
        value: function getObjectSchemaDefault(obj) {
          var _this2 = this;
          var schema = {
            type: "object"
          };
          var objKeys = Object.keys(obj);
          if (objKeys.length > 0) {
            schema.properties = objKeys.reduce(function(acc, propertyName2) {
              acc[propertyName2] = _this2.getSchema(obj[propertyName2]);
              return acc;
            }, {});
          }
          return schema;
        }
      }, {
        key: "getObjectSchema",
        value: function getObjectSchema(obj) {
          if (this.options.objects.preProcessFnc) {
            return this.options.objects.preProcessFnc(obj, this.getObjectSchemaDefault);
          }
          return this.getObjectSchemaDefault(obj);
        }
      }, {
        key: "getArraySchemaMerging",
        value: function getArraySchemaMerging(arr) {
          var schema = {
            type: "array"
          };
          var commonType = getCommonArrayItemsType(arr);
          if (commonType) {
            schema.items = {
              type: commonType
            };
            if (commonType !== "integer" && commonType !== "number") {
              var itemSchema = this.getCommonArrayItemSchema(arr);
              if (itemSchema) {
                schema.items = itemSchema;
              }
            } else if (this.options.required) {
              schema.items.required = true;
            }
          }
          return schema;
        }
      }, {
        key: "getArraySchemaNoMerging",
        value: function getArraySchemaNoMerging(arr) {
          var schema = {
            type: "array"
          };
          if (arr.length > 0) {
            schema.items = this.getSchema(arr[0]);
          }
          return schema;
        }
      }, {
        key: "getArraySchemaTuple",
        value: function getArraySchemaTuple(arr) {
          var _this3 = this;
          var schema = {
            type: "array"
          };
          if (arr.length > 0) {
            schema.items = arr.map(function(item) {
              return _this3.getSchema(item);
            });
          }
          return schema;
        }
      }, {
        key: "getArraySchemaUniform",
        value: function getArraySchemaUniform(arr) {
          var schema = this.getArraySchemaNoMerging(arr);
          if (arr.length > 1) {
            for (var i = 1; i < arr.length; i++) {
              if (!isEqual(schema.items, this.getSchema(arr[i]))) {
                throw new Error("Invalid schema, incompatible array items");
              }
            }
          }
          return schema;
        }
      }, {
        key: "getArraySchema",
        value: function getArraySchema(arr) {
          if (arr.length === 0) {
            return {
              type: "array"
            };
          }
          switch (this.options.arrays.mode) {
            case "all":
              return this.getArraySchemaMerging(arr);
            case "first":
              return this.getArraySchemaNoMerging(arr);
            case "uniform":
              return this.getArraySchemaUniform(arr);
            case "tuple":
              return this.getArraySchemaTuple(arr);
            default:
              throw new Error("Unknown array mode option '".concat(this.options.arrays.mode, "'"));
          }
        }
      }, {
        key: "getStringSchemaDefault",
        value: function getStringSchemaDefault(value) {
          var schema = {
            type: "string"
          };
          if (!this.options.strings.detectFormat) {
            return schema;
          }
          var index = filteredFormats.findIndex(function(item) {
            return helpers.isFormat(value, item);
          });
          if (index >= 0) {
            schema.format = filteredFormats[index];
          }
          return schema;
        }
      }, {
        key: "getStringSchema",
        value: function getStringSchema(value) {
          if (this.options.strings.preProcessFnc) {
            return this.options.strings.preProcessFnc(value, this.getStringSchemaDefault);
          }
          return this.getStringSchemaDefault(value);
        }
      }, {
        key: "commmonPostProcessDefault",
        value: function commmonPostProcessDefault(type7, schema, value) {
          if (this.options.required) {
            return merge({}, schema, {
              required: true
            });
          }
          return schema;
        }
      }, {
        key: "objectPostProcessDefault",
        value: function objectPostProcessDefault(schema, obj) {
          if (this.options.objects.additionalProperties === false && Object.getOwnPropertyNames(obj).length > 0) {
            return merge({}, schema, {
              additionalProperties: false
            });
          }
          return schema;
        }
        /**
         * Gets JSON schema for provided value
         * @param value
         * @returns {object}
         */
      }, {
        key: "getSchema",
        value: function getSchema(value) {
          var type7 = helpers.getType(value);
          if (!type7) {
            throw new Error("Type of value couldn't be determined");
          }
          var schema;
          switch (type7) {
            case "object":
              schema = this.getObjectSchema(value);
              break;
            case "array":
              schema = this.getArraySchema(value);
              break;
            case "string":
              schema = this.getStringSchema(value);
              break;
            default:
              schema = {
                type: type7
              };
          }
          if (this.options.postProcessFnc) {
            schema = this.options.postProcessFnc(type7, schema, value, this.commmonPostProcessDefault);
          } else {
            schema = this.commmonPostProcessDefault(type7, schema, value);
          }
          if (type7 === "object") {
            if (this.options.objects.postProcessFnc) {
              schema = this.options.objects.postProcessFnc(schema, value, this.objectPostProcessDefault);
            } else {
              schema = this.objectPostProcessDefault(schema, value);
            }
          }
          return schema;
        }
      }]);
      return ToJsonSchema2;
    }();
    function toJsonSchema(value, options) {
      var tjs = new ToJsonSchema(options);
      return tjs.getSchema(value);
    }
    module2.exports = toJsonSchema;
  }
});

// src/index.js
var index_exports = {};
__export(index_exports, {
  DATASOURCE_UI_COMPONENTS: () => DATASOURCE_UI_COMPONENTS
});
module.exports = __toCommonJS(index_exports);

// ../datasource-types/dist/index.mjs
var DATASOURCE_TYPES = {
  POSTGRESQL: {
    name: "PostgreSQL",
    value: "postgresql"
  },
  MYSQL: {
    name: "MySQL",
    value: "mysql"
  },
  MSSQL: {
    name: "MSSQL",
    value: "mssql"
  },
  RESTAPI: {
    name: "REST API",
    value: "restapi"
  }
};

// src/components/postgresql/query/postgreSQLQueryEditor.js
var import_react = __toESM(require("react"));
var import_react2 = __toESM(require("@monaco-editor/react"));
var import_GitHub_Light = __toESM(require("monaco-themes/themes/GitHub Light.json"));
var import_prop_types = __toESM(require_prop_types());
var PostgreSQLQueryEditor = ({
  readOnly: readOnly2,
  query,
  setQuery,
  height = "200px",
  language: language2 = "sql",
  rounded = true,
  outlined = true,
  databaseMetadata
}) => {
  PostgreSQLQueryEditor.propTypes = {
    readOnly: import_prop_types.default.bool,
    query: import_prop_types.default.string,
    setQuery: import_prop_types.default.func.isRequired,
    height: import_prop_types.default.string,
    language: import_prop_types.default.string,
    rounded: import_prop_types.default.bool,
    outlined: import_prop_types.default.bool,
    databaseMetadata: import_prop_types.default.object
  };
  const schema = (0, import_react.useMemo)(() => {
    if (!databaseMetadata || !databaseMetadata.schemas) return {};
    const tablesMap = {};
    databaseMetadata.schemas.forEach((schemaItem) => {
      if (schemaItem.tables) {
        schemaItem.tables.forEach((table) => {
          const tableName = table.databaseTableName;
          const columns = (table.databaseTableColumns || []).map(
            (col) => col.databaseTableColumnName
          );
          tablesMap[tableName] = columns;
        });
      }
    });
    return tablesMap;
  }, [databaseMetadata]);
  const schemaRef = (0, import_react.useRef)(schema);
  (0, import_react.useEffect)(() => {
    schemaRef.current = schema;
  }, [schema]);
  const handleEditorWillMount = (monaco) => {
    monaco.languages.registerCompletionItemProvider(language2, {
      // Use the language prop
      triggerCharacters: [".", " "],
      // Trigger on dot and space
      provideCompletionItems: (model, position) => {
        const currentSchema = schemaRef.current;
        const suggestions = [];
        const wordInfo = model.getWordUntilPosition(position);
        const defaultSuggestionRange = {
          startLineNumber: position.lineNumber,
          endLineNumber: position.lineNumber,
          startColumn: wordInfo.startColumn,
          endColumn: wordInfo.endColumn
        };
        const textUntilPosition = model.getValueInRange({
          startLineNumber: 1,
          startColumn: 1,
          endLineNumber: position.lineNumber,
          endColumn: position.column
        });
        const tableNameMatch = textUntilPosition.match(/(\b\w+)\.$/);
        if (tableNameMatch && tableNameMatch[1]) {
          const tableName = tableNameMatch[1];
          if (currentSchema && currentSchema[tableName]) {
            const columns = currentSchema[tableName];
            columns.forEach((colName) => {
              suggestions.push({
                label: colName,
                kind: monaco.languages.CompletionItemKind.Field,
                insertText: colName,
                detail: `Column of ${tableName}`,
                range: defaultSuggestionRange
                // Monaco will replace the typed part or insert
              });
            });
          }
        } else {
          if (currentSchema) {
            Object.keys(currentSchema).forEach((tableName) => {
              suggestions.push({
                label: tableName,
                kind: monaco.languages.CompletionItemKind.Class,
                // Using Class for tables
                insertText: tableName,
                detail: "Table",
                range: defaultSuggestionRange
              });
            });
          }
          const sqlKeywords2 = [
            "SELECT",
            "FROM",
            "WHERE",
            "JOIN",
            "LEFT JOIN",
            "RIGHT JOIN",
            "INNER JOIN",
            "ON",
            "GROUP BY",
            "ORDER BY",
            "ASC",
            "DESC",
            "AS",
            "DISTINCT",
            "LIMIT",
            "OFFSET",
            "INSERT INTO",
            "VALUES",
            "UPDATE",
            "SET",
            "DELETE",
            "CREATE TABLE",
            "ALTER TABLE",
            "DROP TABLE",
            "INDEX",
            "COUNT",
            "SUM",
            "AVG",
            "MAX",
            "MIN",
            "AND",
            "OR",
            "NOT",
            "NULL",
            "IS"
            // Add more keywords as needed
          ];
          sqlKeywords2.forEach((keyword3) => {
            suggestions.push({
              label: keyword3,
              kind: monaco.languages.CompletionItemKind.Keyword,
              insertText: keyword3,
              range: defaultSuggestionRange
            });
          });
        }
        return { suggestions };
      }
    });
    monaco.editor.defineTheme("jet-theme", import_GitHub_Light.default);
  };
  return /* @__PURE__ */ import_react.default.createElement(
    "div",
    {
      className: `${rounded ? "rounded-sm" : ""} ${outlined ? "border border-slate-200" : ""} overflow-hidden min-w-[300px]`
    },
    /* @__PURE__ */ import_react.default.createElement(
      import_react2.default,
      {
        height,
        defaultLanguage: language2,
        value: query,
        onChange: (value) => setQuery(value || ""),
        beforeMount: handleEditorWillMount,
        options: {
          readOnly: readOnly2,
          fontSize: 12,
          minimap: { enabled: false },
          lineNumbers: "on",
          lineNumbersMinChars: 2,
          folding: false,
          // quickSuggestions: true, // Simplified: true enables default quick suggestions
          quickSuggestions: { other: true, comments: false, strings: true },
          // from original
          suggestOnTriggerCharacters: true,
          // Enable suggestions on trigger characters
          wordBasedSuggestions: true,
          // Enable default word-based suggestions
          // Ensure suggestions pop up automatically
          suggest: {
            // Show suggestions automatically as you type
            snippetsPreventQuickSuggestions: false,
            showMethods: true,
            showFunctions: true,
            showConstructors: true,
            showFields: true,
            showVariables: true,
            showClasses: true,
            showStructs: true,
            showInterfaces: true,
            showModules: true,
            showProperties: true,
            showEvents: true,
            showOperators: true,
            showUnits: true,
            showValues: true,
            showConstants: true,
            showEnums: true,
            showEnumMembers: true,
            showKeywords: true,
            showWords: true,
            showColors: true,
            showFiles: true,
            showFolders: true,
            showSnippets: true
          }
        },
        theme: "jet-theme"
      }
    )
  );
};

// src/components/postgresql/query/postgreSQLQueryResponseView.js
var import_material2 = require("@mui/material");
var import_react9 = __toESM(require("react"));

// ../../node_modules/@codemirror/language-data/dist/index.js
init_dist5();
function legacy(parser29) {
  return new LanguageSupport(StreamLanguage.define(parser29));
}
function sql3(dialectName) {
  return Promise.resolve().then(() => (init_dist8(), dist_exports)).then((m) => m.sql({ dialect: m[dialectName] }));
}
var languages = [
  // New-style language modes
  /* @__PURE__ */ LanguageDescription.of({
    name: "C",
    extensions: ["c", "h", "ino"],
    load() {
      return Promise.resolve().then(() => (init_dist10(), dist_exports2)).then((m) => m.cpp());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "C++",
    alias: ["cpp"],
    extensions: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],
    load() {
      return Promise.resolve().then(() => (init_dist10(), dist_exports2)).then((m) => m.cpp());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "CQL",
    alias: ["cassandra"],
    extensions: ["cql"],
    load() {
      return sql3("Cassandra");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "CSS",
    extensions: ["css"],
    load() {
      return Promise.resolve().then(() => (init_dist12(), dist_exports3)).then((m) => m.css());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Go",
    extensions: ["go"],
    load() {
      return Promise.resolve().then(() => (init_dist14(), dist_exports4)).then((m) => m.go());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "HTML",
    alias: ["xhtml"],
    extensions: ["html", "htm", "handlebars", "hbs"],
    load() {
      return Promise.resolve().then(() => (init_dist18(), dist_exports6)).then((m) => m.html());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Java",
    extensions: ["java"],
    load() {
      return Promise.resolve().then(() => (init_dist20(), dist_exports7)).then((m) => m.java());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "JavaScript",
    alias: ["ecmascript", "js", "node"],
    extensions: ["js", "mjs", "cjs"],
    load() {
      return Promise.resolve().then(() => (init_dist17(), dist_exports5)).then((m) => m.javascript());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "JSON",
    alias: ["json5"],
    extensions: ["json", "map"],
    load() {
      return Promise.resolve().then(() => (init_dist22(), dist_exports8)).then((m) => m.json());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "JSX",
    extensions: ["jsx"],
    load() {
      return Promise.resolve().then(() => (init_dist17(), dist_exports5)).then((m) => m.javascript({ jsx: true }));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "LESS",
    extensions: ["less"],
    load() {
      return Promise.resolve().then(() => (init_dist23(), dist_exports9)).then((m) => m.less());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Liquid",
    extensions: ["liquid"],
    load() {
      return Promise.resolve().then(() => (init_dist24(), dist_exports10)).then((m) => m.liquid());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "MariaDB SQL",
    load() {
      return sql3("MariaSQL");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Markdown",
    extensions: ["md", "markdown", "mkd"],
    load() {
      return Promise.resolve().then(() => (init_dist26(), dist_exports11)).then((m) => m.markdown());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "MS SQL",
    load() {
      return sql3("MSSQL");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "MySQL",
    load() {
      return sql3("MySQL");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "PHP",
    extensions: ["php", "php3", "php4", "php5", "php7", "phtml"],
    load() {
      return Promise.resolve().then(() => (init_dist27(), dist_exports12)).then((m) => m.php());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "PLSQL",
    extensions: ["pls"],
    load() {
      return sql3("PLSQL");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "PostgreSQL",
    load() {
      return sql3("PostgreSQL");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Python",
    extensions: ["BUILD", "bzl", "py", "pyw"],
    filename: /^(BUCK|BUILD)$/,
    load() {
      return Promise.resolve().then(() => (init_dist29(), dist_exports13)).then((m) => m.python());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Rust",
    extensions: ["rs"],
    load() {
      return Promise.resolve().then(() => (init_dist31(), dist_exports14)).then((m) => m.rust());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Sass",
    extensions: ["sass"],
    load() {
      return Promise.resolve().then(() => (init_dist33(), dist_exports15)).then((m) => m.sass({ indented: true }));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SCSS",
    extensions: ["scss"],
    load() {
      return Promise.resolve().then(() => (init_dist33(), dist_exports15)).then((m) => m.sass());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SQL",
    extensions: ["sql"],
    load() {
      return sql3("StandardSQL");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SQLite",
    load() {
      return sql3("SQLite");
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "TSX",
    extensions: ["tsx"],
    load() {
      return Promise.resolve().then(() => (init_dist17(), dist_exports5)).then((m) => m.javascript({ jsx: true, typescript: true }));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "TypeScript",
    alias: ["ts"],
    extensions: ["ts", "mts", "cts"],
    load() {
      return Promise.resolve().then(() => (init_dist17(), dist_exports5)).then((m) => m.javascript({ typescript: true }));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "WebAssembly",
    extensions: ["wat", "wast"],
    load() {
      return Promise.resolve().then(() => (init_dist34(), dist_exports16)).then((m) => m.wast());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "XML",
    alias: ["rss", "wsdl", "xsd"],
    extensions: ["xml", "xsl", "xsd", "svg"],
    load() {
      return Promise.resolve().then(() => (init_dist36(), dist_exports17)).then((m) => m.xml());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "YAML",
    alias: ["yml"],
    extensions: ["yaml", "yml"],
    load() {
      return Promise.resolve().then(() => (init_dist38(), dist_exports18)).then((m) => m.yaml());
    }
  }),
  // Legacy modes ported from CodeMirror 5
  /* @__PURE__ */ LanguageDescription.of({
    name: "APL",
    extensions: ["dyalog", "apl"],
    load() {
      return Promise.resolve().then(() => (init_apl(), apl_exports)).then((m) => legacy(m.apl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "PGP",
    alias: ["asciiarmor"],
    extensions: ["asc", "pgp", "sig"],
    load() {
      return Promise.resolve().then(() => (init_asciiarmor(), asciiarmor_exports)).then((m) => legacy(m.asciiArmor));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "ASN.1",
    extensions: ["asn", "asn1"],
    load() {
      return Promise.resolve().then(() => (init_asn1(), asn1_exports)).then((m) => legacy(m.asn1({})));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Asterisk",
    filename: /^extensions\.conf$/i,
    load() {
      return Promise.resolve().then(() => (init_asterisk(), asterisk_exports)).then((m) => legacy(m.asterisk));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Brainfuck",
    extensions: ["b", "bf"],
    load() {
      return Promise.resolve().then(() => (init_brainfuck(), brainfuck_exports)).then((m) => legacy(m.brainfuck));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Cobol",
    extensions: ["cob", "cpy"],
    load() {
      return Promise.resolve().then(() => (init_cobol(), cobol_exports)).then((m) => legacy(m.cobol));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "C#",
    alias: ["csharp", "cs"],
    extensions: ["cs"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.csharp));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Clojure",
    extensions: ["clj", "cljc", "cljx"],
    load() {
      return Promise.resolve().then(() => (init_clojure(), clojure_exports)).then((m) => legacy(m.clojure));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "ClojureScript",
    extensions: ["cljs"],
    load() {
      return Promise.resolve().then(() => (init_clojure(), clojure_exports)).then((m) => legacy(m.clojure));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Closure Stylesheets (GSS)",
    extensions: ["gss"],
    load() {
      return Promise.resolve().then(() => (init_css(), css_exports)).then((m) => legacy(m.gss));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "CMake",
    extensions: ["cmake", "cmake.in"],
    filename: /^CMakeLists\.txt$/,
    load() {
      return Promise.resolve().then(() => (init_cmake(), cmake_exports)).then((m) => legacy(m.cmake));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "CoffeeScript",
    alias: ["coffee", "coffee-script"],
    extensions: ["coffee"],
    load() {
      return Promise.resolve().then(() => (init_coffeescript(), coffeescript_exports)).then((m) => legacy(m.coffeeScript));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Common Lisp",
    alias: ["lisp"],
    extensions: ["cl", "lisp", "el"],
    load() {
      return Promise.resolve().then(() => (init_commonlisp(), commonlisp_exports)).then((m) => legacy(m.commonLisp));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Cypher",
    extensions: ["cyp", "cypher"],
    load() {
      return Promise.resolve().then(() => (init_cypher(), cypher_exports)).then((m) => legacy(m.cypher));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Cython",
    extensions: ["pyx", "pxd", "pxi"],
    load() {
      return Promise.resolve().then(() => (init_python(), python_exports)).then((m) => legacy(m.cython));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Crystal",
    extensions: ["cr"],
    load() {
      return Promise.resolve().then(() => (init_crystal(), crystal_exports)).then((m) => legacy(m.crystal));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "D",
    extensions: ["d"],
    load() {
      return Promise.resolve().then(() => (init_d(), d_exports)).then((m) => legacy(m.d));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Dart",
    extensions: ["dart"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.dart));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "diff",
    extensions: ["diff", "patch"],
    load() {
      return Promise.resolve().then(() => (init_diff(), diff_exports)).then((m) => legacy(m.diff));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Dockerfile",
    filename: /^Dockerfile$/,
    load() {
      return Promise.resolve().then(() => (init_dockerfile(), dockerfile_exports)).then((m) => legacy(m.dockerFile));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "DTD",
    extensions: ["dtd"],
    load() {
      return Promise.resolve().then(() => (init_dtd(), dtd_exports)).then((m) => legacy(m.dtd));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Dylan",
    extensions: ["dylan", "dyl", "intr"],
    load() {
      return Promise.resolve().then(() => (init_dylan(), dylan_exports)).then((m) => legacy(m.dylan));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "EBNF",
    load() {
      return Promise.resolve().then(() => (init_ebnf(), ebnf_exports)).then((m) => legacy(m.ebnf));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "ECL",
    extensions: ["ecl"],
    load() {
      return Promise.resolve().then(() => (init_ecl(), ecl_exports)).then((m) => legacy(m.ecl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "edn",
    extensions: ["edn"],
    load() {
      return Promise.resolve().then(() => (init_clojure(), clojure_exports)).then((m) => legacy(m.clojure));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Eiffel",
    extensions: ["e"],
    load() {
      return Promise.resolve().then(() => (init_eiffel(), eiffel_exports)).then((m) => legacy(m.eiffel));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Elm",
    extensions: ["elm"],
    load() {
      return Promise.resolve().then(() => (init_elm(), elm_exports)).then((m) => legacy(m.elm));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Erlang",
    extensions: ["erl"],
    load() {
      return Promise.resolve().then(() => (init_erlang(), erlang_exports)).then((m) => legacy(m.erlang));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Esper",
    load() {
      return Promise.resolve().then(() => (init_sql(), sql_exports)).then((m) => legacy(m.esper));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Factor",
    extensions: ["factor"],
    load() {
      return Promise.resolve().then(() => (init_factor(), factor_exports)).then((m) => legacy(m.factor));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "FCL",
    load() {
      return Promise.resolve().then(() => (init_fcl(), fcl_exports)).then((m) => legacy(m.fcl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Forth",
    extensions: ["forth", "fth", "4th"],
    load() {
      return Promise.resolve().then(() => (init_forth(), forth_exports)).then((m) => legacy(m.forth));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Fortran",
    extensions: ["f", "for", "f77", "f90", "f95"],
    load() {
      return Promise.resolve().then(() => (init_fortran(), fortran_exports)).then((m) => legacy(m.fortran));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "F#",
    alias: ["fsharp"],
    extensions: ["fs"],
    load() {
      return Promise.resolve().then(() => (init_mllike(), mllike_exports)).then((m) => legacy(m.fSharp));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Gas",
    extensions: ["s"],
    load() {
      return Promise.resolve().then(() => (init_gas(), gas_exports)).then((m) => legacy(m.gas));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Gherkin",
    extensions: ["feature"],
    load() {
      return Promise.resolve().then(() => (init_gherkin(), gherkin_exports)).then((m) => legacy(m.gherkin));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Groovy",
    extensions: ["groovy", "gradle"],
    filename: /^Jenkinsfile$/,
    load() {
      return Promise.resolve().then(() => (init_groovy(), groovy_exports)).then((m) => legacy(m.groovy));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Haskell",
    extensions: ["hs"],
    load() {
      return Promise.resolve().then(() => (init_haskell(), haskell_exports)).then((m) => legacy(m.haskell));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Haxe",
    extensions: ["hx"],
    load() {
      return Promise.resolve().then(() => (init_haxe(), haxe_exports)).then((m) => legacy(m.haxe));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "HXML",
    extensions: ["hxml"],
    load() {
      return Promise.resolve().then(() => (init_haxe(), haxe_exports)).then((m) => legacy(m.hxml));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "HTTP",
    load() {
      return Promise.resolve().then(() => (init_http(), http_exports)).then((m) => legacy(m.http));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "IDL",
    extensions: ["pro"],
    load() {
      return Promise.resolve().then(() => (init_idl(), idl_exports)).then((m) => legacy(m.idl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "JSON-LD",
    alias: ["jsonld"],
    extensions: ["jsonld"],
    load() {
      return Promise.resolve().then(() => (init_javascript(), javascript_exports)).then((m) => legacy(m.jsonld));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Jinja2",
    extensions: ["j2", "jinja", "jinja2"],
    load() {
      return Promise.resolve().then(() => (init_jinja2(), jinja2_exports)).then((m) => legacy(m.jinja2));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Julia",
    extensions: ["jl"],
    load() {
      return Promise.resolve().then(() => (init_julia(), julia_exports)).then((m) => legacy(m.julia));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Kotlin",
    extensions: ["kt", "kts"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.kotlin));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "LiveScript",
    alias: ["ls"],
    extensions: ["ls"],
    load() {
      return Promise.resolve().then(() => (init_livescript(), livescript_exports)).then((m) => legacy(m.liveScript));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Lua",
    extensions: ["lua"],
    load() {
      return Promise.resolve().then(() => (init_lua(), lua_exports)).then((m) => legacy(m.lua));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "mIRC",
    extensions: ["mrc"],
    load() {
      return Promise.resolve().then(() => (init_mirc(), mirc_exports)).then((m) => legacy(m.mirc));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Mathematica",
    extensions: ["m", "nb", "wl", "wls"],
    load() {
      return Promise.resolve().then(() => (init_mathematica(), mathematica_exports)).then((m) => legacy(m.mathematica));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Modelica",
    extensions: ["mo"],
    load() {
      return Promise.resolve().then(() => (init_modelica(), modelica_exports)).then((m) => legacy(m.modelica));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "MUMPS",
    extensions: ["mps"],
    load() {
      return Promise.resolve().then(() => (init_mumps(), mumps_exports)).then((m) => legacy(m.mumps));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Mbox",
    extensions: ["mbox"],
    load() {
      return Promise.resolve().then(() => (init_mbox(), mbox_exports)).then((m) => legacy(m.mbox));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Nginx",
    filename: /nginx.*\.conf$/i,
    load() {
      return Promise.resolve().then(() => (init_nginx(), nginx_exports)).then((m) => legacy(m.nginx));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "NSIS",
    extensions: ["nsh", "nsi"],
    load() {
      return Promise.resolve().then(() => (init_nsis(), nsis_exports)).then((m) => legacy(m.nsis));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "NTriples",
    extensions: ["nt", "nq"],
    load() {
      return Promise.resolve().then(() => (init_ntriples(), ntriples_exports)).then((m) => legacy(m.ntriples));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Objective-C",
    alias: ["objective-c", "objc"],
    extensions: ["m"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.objectiveC));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Objective-C++",
    alias: ["objective-c++", "objc++"],
    extensions: ["mm"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.objectiveCpp));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "OCaml",
    extensions: ["ml", "mli", "mll", "mly"],
    load() {
      return Promise.resolve().then(() => (init_mllike(), mllike_exports)).then((m) => legacy(m.oCaml));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Octave",
    extensions: ["m"],
    load() {
      return Promise.resolve().then(() => (init_octave(), octave_exports)).then((m) => legacy(m.octave));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Oz",
    extensions: ["oz"],
    load() {
      return Promise.resolve().then(() => (init_oz(), oz_exports)).then((m) => legacy(m.oz));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Pascal",
    extensions: ["p", "pas"],
    load() {
      return Promise.resolve().then(() => (init_pascal(), pascal_exports)).then((m) => legacy(m.pascal));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Perl",
    extensions: ["pl", "pm"],
    load() {
      return Promise.resolve().then(() => (init_perl(), perl_exports)).then((m) => legacy(m.perl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Pig",
    extensions: ["pig"],
    load() {
      return Promise.resolve().then(() => (init_pig(), pig_exports)).then((m) => legacy(m.pig));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "PowerShell",
    extensions: ["ps1", "psd1", "psm1"],
    load() {
      return Promise.resolve().then(() => (init_powershell(), powershell_exports)).then((m) => legacy(m.powerShell));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Properties files",
    alias: ["ini", "properties"],
    extensions: ["properties", "ini", "in"],
    load() {
      return Promise.resolve().then(() => (init_properties(), properties_exports)).then((m) => legacy(m.properties));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "ProtoBuf",
    extensions: ["proto"],
    load() {
      return Promise.resolve().then(() => (init_protobuf(), protobuf_exports)).then((m) => legacy(m.protobuf));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Pug",
    alias: ["jade"],
    extensions: ["pug", "jade"],
    load() {
      return Promise.resolve().then(() => (init_pug(), pug_exports)).then((m) => legacy(m.pug));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Puppet",
    extensions: ["pp"],
    load() {
      return Promise.resolve().then(() => (init_puppet(), puppet_exports)).then((m) => legacy(m.puppet));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Q",
    extensions: ["q"],
    load() {
      return Promise.resolve().then(() => (init_q(), q_exports)).then((m) => legacy(m.q));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "R",
    alias: ["rscript"],
    extensions: ["r", "R"],
    load() {
      return Promise.resolve().then(() => (init_r(), r_exports)).then((m) => legacy(m.r));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "RPM Changes",
    load() {
      return Promise.resolve().then(() => (init_rpm(), rpm_exports)).then((m) => legacy(m.rpmChanges));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "RPM Spec",
    extensions: ["spec"],
    load() {
      return Promise.resolve().then(() => (init_rpm(), rpm_exports)).then((m) => legacy(m.rpmSpec));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Ruby",
    alias: ["jruby", "macruby", "rake", "rb", "rbx"],
    extensions: ["rb"],
    filename: /^(Gemfile|Rakefile)$/,
    load() {
      return Promise.resolve().then(() => (init_ruby(), ruby_exports)).then((m) => legacy(m.ruby));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SAS",
    extensions: ["sas"],
    load() {
      return Promise.resolve().then(() => (init_sas(), sas_exports)).then((m) => legacy(m.sas));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Scala",
    extensions: ["scala"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.scala));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Scheme",
    extensions: ["scm", "ss"],
    load() {
      return Promise.resolve().then(() => (init_scheme(), scheme_exports)).then((m) => legacy(m.scheme));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Shell",
    alias: ["bash", "sh", "zsh"],
    extensions: ["sh", "ksh", "bash"],
    filename: /^PKGBUILD$/,
    load() {
      return Promise.resolve().then(() => (init_shell(), shell_exports)).then((m) => legacy(m.shell));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Sieve",
    extensions: ["siv", "sieve"],
    load() {
      return Promise.resolve().then(() => (init_sieve(), sieve_exports)).then((m) => legacy(m.sieve));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Smalltalk",
    extensions: ["st"],
    load() {
      return Promise.resolve().then(() => (init_smalltalk(), smalltalk_exports)).then((m) => legacy(m.smalltalk));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Solr",
    load() {
      return Promise.resolve().then(() => (init_solr(), solr_exports)).then((m) => legacy(m.solr));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SML",
    extensions: ["sml", "sig", "fun", "smackspec"],
    load() {
      return Promise.resolve().then(() => (init_mllike(), mllike_exports)).then((m) => legacy(m.sml));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SPARQL",
    alias: ["sparul"],
    extensions: ["rq", "sparql"],
    load() {
      return Promise.resolve().then(() => (init_sparql(), sparql_exports)).then((m) => legacy(m.sparql));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Spreadsheet",
    alias: ["excel", "formula"],
    load() {
      return Promise.resolve().then(() => (init_spreadsheet(), spreadsheet_exports)).then((m) => legacy(m.spreadsheet));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Squirrel",
    extensions: ["nut"],
    load() {
      return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.squirrel));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Stylus",
    extensions: ["styl"],
    load() {
      return Promise.resolve().then(() => (init_stylus(), stylus_exports)).then((m) => legacy(m.stylus));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Swift",
    extensions: ["swift"],
    load() {
      return Promise.resolve().then(() => (init_swift(), swift_exports)).then((m) => legacy(m.swift));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "sTeX",
    load() {
      return Promise.resolve().then(() => (init_stex(), stex_exports)).then((m) => legacy(m.stex));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "LaTeX",
    alias: ["tex"],
    extensions: ["text", "ltx", "tex"],
    load() {
      return Promise.resolve().then(() => (init_stex(), stex_exports)).then((m) => legacy(m.stex));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "SystemVerilog",
    extensions: ["v", "sv", "svh"],
    load() {
      return Promise.resolve().then(() => (init_verilog(), verilog_exports)).then((m) => legacy(m.verilog));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Tcl",
    extensions: ["tcl"],
    load() {
      return Promise.resolve().then(() => (init_tcl(), tcl_exports)).then((m) => legacy(m.tcl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Textile",
    extensions: ["textile"],
    load() {
      return Promise.resolve().then(() => (init_textile(), textile_exports)).then((m) => legacy(m.textile));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "TiddlyWiki",
    load() {
      return Promise.resolve().then(() => (init_tiddlywiki(), tiddlywiki_exports)).then((m) => legacy(m.tiddlyWiki));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Tiki wiki",
    load() {
      return Promise.resolve().then(() => (init_tiki(), tiki_exports)).then((m) => legacy(m.tiki));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "TOML",
    extensions: ["toml"],
    load() {
      return Promise.resolve().then(() => (init_toml(), toml_exports)).then((m) => legacy(m.toml));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Troff",
    extensions: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
    load() {
      return Promise.resolve().then(() => (init_troff(), troff_exports)).then((m) => legacy(m.troff));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "TTCN",
    extensions: ["ttcn", "ttcn3", "ttcnpp"],
    load() {
      return Promise.resolve().then(() => (init_ttcn(), ttcn_exports)).then((m) => legacy(m.ttcn));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "TTCN_CFG",
    extensions: ["cfg"],
    load() {
      return Promise.resolve().then(() => (init_ttcn_cfg(), ttcn_cfg_exports)).then((m) => legacy(m.ttcnCfg));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Turtle",
    extensions: ["ttl"],
    load() {
      return Promise.resolve().then(() => (init_turtle(), turtle_exports)).then((m) => legacy(m.turtle));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Web IDL",
    extensions: ["webidl"],
    load() {
      return Promise.resolve().then(() => (init_webidl(), webidl_exports)).then((m) => legacy(m.webIDL));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "VB.NET",
    extensions: ["vb"],
    load() {
      return Promise.resolve().then(() => (init_vb(), vb_exports)).then((m) => legacy(m.vb));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "VBScript",
    extensions: ["vbs"],
    load() {
      return Promise.resolve().then(() => (init_vbscript(), vbscript_exports)).then((m) => legacy(m.vbScript));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Velocity",
    extensions: ["vtl"],
    load() {
      return Promise.resolve().then(() => (init_velocity(), velocity_exports)).then((m) => legacy(m.velocity));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Verilog",
    extensions: ["v"],
    load() {
      return Promise.resolve().then(() => (init_verilog(), verilog_exports)).then((m) => legacy(m.verilog));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "VHDL",
    extensions: ["vhd", "vhdl"],
    load() {
      return Promise.resolve().then(() => (init_vhdl(), vhdl_exports)).then((m) => legacy(m.vhdl));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "XQuery",
    extensions: ["xy", "xquery"],
    load() {
      return Promise.resolve().then(() => (init_xquery(), xquery_exports)).then((m) => legacy(m.xQuery));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Yacas",
    extensions: ["ys"],
    load() {
      return Promise.resolve().then(() => (init_yacas(), yacas_exports)).then((m) => legacy(m.yacas));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Z80",
    extensions: ["z80"],
    load() {
      return Promise.resolve().then(() => (init_z80(), z80_exports)).then((m) => legacy(m.z80));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "MscGen",
    extensions: ["mscgen", "mscin", "msc"],
    load() {
      return Promise.resolve().then(() => (init_mscgen(), mscgen_exports)).then((m) => legacy(m.mscgen));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "X\xF9",
    extensions: ["xu"],
    load() {
      return Promise.resolve().then(() => (init_mscgen(), mscgen_exports)).then((m) => legacy(m.xu));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "MsGenny",
    extensions: ["msgenny"],
    load() {
      return Promise.resolve().then(() => (init_mscgen(), mscgen_exports)).then((m) => legacy(m.msgenny));
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Vue",
    extensions: ["vue"],
    load() {
      return Promise.resolve().then(() => (init_dist39(), dist_exports19)).then((m) => m.vue());
    }
  }),
  /* @__PURE__ */ LanguageDescription.of({
    name: "Angular Template",
    load() {
      return Promise.resolve().then(() => (init_dist40(), dist_exports20)).then((m) => m.angular());
    }
  })
];

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_dist5();
init_dist26();
init_dist17();
init_dist18();
init_dist12();
init_dist23();
init_dist33();
init_dist22();

// ../../node_modules/codemirror-lang-mermaid/dist/index.js
init_dist5();
init_dist();
init_dist6();
init_dist4();
var preDiagramLine = 11;
var PieDiagram = 1;
var MindmapDiagram = 2;
var FlowchartDiagram = 3;
var SequenceDiagram = 4;
var JourneyDiagram = 5;
var RequirementDiagram = 6;
var GanttDiagram = 7;
var skipCodePoints$3 = [-1, 9, 13, 32];
var diagramMap = {
  mindmap: MindmapDiagram,
  pie: PieDiagram,
  flowchart: FlowchartDiagram,
  graph: FlowchartDiagram,
  sequenceDiagram: SequenceDiagram,
  journey: JourneyDiagram,
  requirementDiagram: RequirementDiagram,
  gantt: GanttDiagram
};
var diagrams = Object.keys(diagramMap);
var diagramText = new ExternalTokenizer((input) => {
  if (skipCodePoints$3.includes(input.next))
    return;
  let tokens2 = "";
  while (input.next != 10 && input.next !== -1) {
    tokens2 += String.fromCodePoint(input.next);
    input.advance();
  }
  input.advance();
  const activeDiagram = diagrams.filter((diagram) => {
    return tokens2.startsWith(diagram);
  });
  if (activeDiagram.length > 0) {
    while (input.next !== -1) {
      input.advance();
    }
    input.acceptToken(diagramMap[activeDiagram[0]]);
  } else {
    input.acceptToken(preDiagramLine);
  }
});
var parser$7 = LRParser.deserialize({
  version: 14,
  states: "nOVQROOOOQQ'#Ce'#CeOVQROOQOQPOOOOQQ-E6c-E6c",
  stateData: "q~O]OS~OPROQRORROSROTROUROVROZPO~O",
  goto: "aYPPPPPPPPPZQQORSQ",
  nodeNames: "\u26A0 PieDiagram MindmapDiagram FlowchartDiagram SequenceDiagram JourneyDiagram RequirementDiagram GanttDiagram MermaidDiagram",
  maxTerm: 13,
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "j~RRXY[]^[pq[~aR]~XY[]^[pq[",
  tokenizers: [0, diagramText],
  topRules: { "MermaidDiagram": [0, 8] },
  tokenPrec: 0
});
var indent6 = 16;
var LineText1 = 1;
var LineText2 = 2;
var LineText3 = 3;
var LineText4 = 4;
var LineText5 = 5;
var newline$12 = 17;
var newlineEmpty = 18;
var LineTextTokens = [LineText1, LineText2, LineText3, LineText4, LineText5];
var newline6 = 10;
var carriageReturn3 = 13;
var space8 = 32;
var tab3 = 9;
var hash4 = 35;
var colon4 = 58;
var parenL3 = 40;
var parenR = 41;
var bracketL4 = 91;
var bracketR = 93;
var braceL2 = 123;
var braceR3 = 125;
var newlines3 = new ExternalTokenizer((input, _stack) => {
  if (input.next < 0)
    return;
  else {
    input.advance();
    let spaces3 = 0;
    while (input.next == space8 || input.next == tab3) {
      input.advance();
      spaces3++;
    }
    let empty2 = input.next == newline6 || input.next == carriageReturn3 || input.next == hash4;
    input.acceptToken(empty2 ? newlineEmpty : newline$12, -spaces3);
  }
}, { contextual: true, fallback: true });
var lineTextType = new ExternalTokenizer((input, stack) => {
  let chars2 = 0;
  while (input.next > -1 && input.next !== newline6) {
    if (input.next === colon4)
      return;
    if (input.next === parenL3 || input.next === bracketL4 || input.next === braceL2) {
      if (chars2 > 0) {
        input.acceptToken(stack.context.lineType);
        return;
      } else
        return;
    }
    if ((input.next === parenR || input.next === bracketR || input.next === braceR3) && chars2 > 0) {
      input.acceptToken(stack.context.lineType);
      return;
    }
    input.advance();
    chars2++;
  }
  input.acceptToken(stack.context.lineType);
});
var tabDepth = (depth) => {
  return 4 - depth % 4;
};
var indentation4 = new ExternalTokenizer((input, _stack) => {
  let prev = input.peek(-1);
  if (prev == newline6 || prev == carriageReturn3) {
    while (true) {
      if (input.next == space8)
        ;
      else if (input.next == tab3)
        ;
      else
        break;
      input.advance();
    }
    if (input.next != newline6 && input.next != carriageReturn3 && input.next != hash4) {
      input.acceptToken(indent6);
    }
  }
});
var indentTracker = {
  lineType: LineText1
};
var countIndent2 = (space10) => {
  let depth = 0;
  for (let i = 0; i < space10.length; i++)
    depth += space10.charCodeAt(i) == tab3 ? tabDepth(depth) : 1;
  return depth;
};
var getLineType = (depth) => {
  return LineTextTokens[depth % 5];
};
var trackIndent3 = new ContextTracker({
  start: indentTracker,
  shift(context, term, stack, input) {
    if (term === indent6) {
      const depth = countIndent2(input.read(input.pos, stack.pos));
      context.lineType = getLineType(depth);
    }
    return context;
  }
});
var mermaidTags = {
  diagramName: Tag.define(tags.typeName)
};
var mindmapTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  lineText1: Tag.define(),
  lineText2: Tag.define(),
  lineText3: Tag.define(),
  lineText4: Tag.define(),
  lineText5: Tag.define()
};
var pieTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  lineComment: Tag.define(tags.lineComment),
  number: Tag.define(tags.number),
  showData: Tag.define(tags.keyword),
  string: Tag.define(tags.string),
  title: Tag.define(tags.keyword),
  titleText: Tag.define(tags.string)
};
var flowchartTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  keyword: Tag.define(tags.keyword),
  lineComment: Tag.define(tags.lineComment),
  link: Tag.define(tags.contentSeparator),
  nodeEdge: Tag.define(tags.contentSeparator),
  nodeEdgeText: Tag.define(tags.string),
  nodeId: Tag.define(tags.variableName),
  nodeText: Tag.define(tags.string),
  number: Tag.define(tags.number),
  orientation: Tag.define(tags.modifier),
  string: Tag.define(tags.string)
};
var sequenceTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  arrow: Tag.define(tags.contentSeparator),
  keyword1: Tag.define(tags.keyword),
  keyword2: Tag.define(tags.controlKeyword),
  lineComment: Tag.define(tags.lineComment),
  messageText1: Tag.define(tags.string),
  messageText2: Tag.define(tags.content),
  nodeText: Tag.define(tags.variableName),
  position: Tag.define(tags.modifier)
};
var journeyTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  actor: Tag.define(tags.variableName),
  keyword: Tag.define(tags.keyword),
  lineComment: Tag.define(tags.lineComment),
  score: Tag.define(tags.number),
  text: Tag.define(tags.string)
};
var requirementTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  arrow: Tag.define(tags.contentSeparator),
  keyword: Tag.define(tags.keyword),
  lineComment: Tag.define(tags.lineComment),
  number: Tag.define(tags.number),
  quotedString: Tag.define(tags.string),
  unquotedString: Tag.define(tags.content)
};
var ganttTags = {
  diagramName: Tag.define(mermaidTags.diagramName),
  keyword: Tag.define(tags.keyword),
  lineComment: Tag.define(tags.lineComment),
  string: Tag.define(tags.string)
};
var mindmapHighlighting = styleTags({
  DiagramName: mindmapTags.diagramName,
  LineText1: mindmapTags.lineText1,
  LineText2: mindmapTags.lineText2,
  LineText3: mindmapTags.lineText3,
  LineText4: mindmapTags.lineText4,
  LineText5: mindmapTags.lineText5
});
var spec_word$1 = { __proto__: null, mindmap: 44, icon: 50 };
var parser$6 = LRParser.deserialize({
  version: 14,
  states: "&fOYQ[OOOOQW'#Ci'#CiQbQ[OOQgQ[OOOOQW'#Cc'#CcOOQW-E6g-E6gOlQ]O'#CdOOQW'#Cj'#CjQgQ[OOO!]Q^O,59OOOQW-E6h-E6hOOQW'#Cs'#CsO!vQ[O'#CeO!{Q^O'#CgO!{Q^O'#CyO!{Q^O'#C|O!{Q^O'#C}O!{Q^O'#DQO!{Q^O'#DRO!{Q^O'#DSOOQW'#Ch'#ChO#^Q[O1G.jOOQW1G.j1G.jO#hQ[O,59POOQW'#Cf'#CfOOQW,59R,59RO#mQ[O,59eO#rQ[O,59hO#wQ[O,59iO#|Q[O,59lO$RQ[O,59mO$WQ[O,59nOOQW7+$U7+$UO!{Q^O1G.kOOQW1G/P1G/POOQW1G/S1G/SOOQW1G/T1G/TOOQW1G/W1G/WOOQW1G/X1G/XOOQW1G/Y1G/YO$]Q[O7+$VOOQW<<Gq<<Gq",
  stateData: "$b~OdOSbOS~OaPOfSO~OaPO~OaUO~O`XO_WXaWX~Oj_OkbOn^Or`OsaOwcO~OPZOQZORZOSZOTZOh[Ol]O~PwOihO~OPZOQZORZOSZOTZO~O_WiaWi~PwOjqO~OorO~OksO~OstO~OruO~OjvO~OxwO~OkyO~O",
  goto: "#YwPPPPPPPx{!P!S!P!V!]!cPPPPPPPP!iPPPPP#UPP#U#UPP#U#U#URROTVRWRfXRg[QfXRpeQQORTQQWRRYWQeXQi]Qj^Qk_Ql`QmaQnbQocRxqTdXe",
  nodeNames: "\u26A0 LineText1 LineText2 LineText3 LineText4 LineText5 MindmapDiagram DiagramName Line IconLine Icon ClassLine ShapedText",
  maxTerm: 40,
  context: trackIndent3,
  propSources: [mindmapHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 2,
  tokenData: "$b~R]XYz[]zpqzxy!fyz!s![!]#Q!c!}#e!}#O#p#O#P!]#P#Q#u#T#o#e#o#p#z#q#r$V~!PSd~XYz[]zpqz#O#P!]~!`QYZz]^z~!kPj~xy!n~!sOr~~!xPk~yz!{~#QOs~~#TP![!]#W~#]Ph~![!]#`~#eOl~~#jQe~!c!}#e#T#o#e~#uOn~~#zOo~~#}P#o#p$Q~$VOw~~$YP#q#r$]~$bOx~",
  tokenizers: [indentation4, lineTextType, 0, newlines3],
  topRules: { "MindmapDiagram": [0, 6] },
  specialized: [{ term: 21, get: (value) => spec_word$1[value] || -1 }],
  tokenPrec: 0
});
var TitleText = 1;
var titleText = new ExternalTokenizer((input) => {
  if (input.next === 10) {
    input.acceptToken(TitleText);
    return;
  }
  if (input.next === -1)
    return;
  while (input.next !== 10 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(TitleText);
});
var pieHighlighting = styleTags({
  DiagramName: pieTags.diagramName,
  LineComment: pieTags.lineComment,
  Number: pieTags.number,
  ShowData: pieTags.showData,
  String: pieTags.string,
  Title: pieTags.title,
  TitleText: pieTags.titleText
});
var spec_identifier$4 = { __proto__: null, pie: 34, showData: 36, title: 38 };
var parser$5 = LRParser.deserialize({
  version: 14,
  states: "$nOYQQOOO_QQO'#CkOOQO'#Ce'#CeQYQQOOOOQO'#C`'#C`OpOSO'#CcOxQQO'#CpOOQO'#Cf'#CfO}QQO,59VO!YQRO,59VO!hQQO,59VOOQO'#Ca'#CaOOQP'#Cb'#CbOOQO-E6c-E6cOOOO'#Cg'#CgO!vOSO,58}OOQO,58},58}O#OQQO,59[OOQO-E6d-E6dO#TQQO1G.qO#TQQO1G.qO#`QRO1G.qOOOO-E6e-E6eOOQO1G.i1G.iOOQO1G.v1G.vO#nQQO7+$]O#nQQO7+$]O#yQQO<<Gw",
  stateData: "$U~O^OSQOS~OaSO~ObZOc[OeTO[_Xa_X~Oe`Of^O~OgaO~OeTO[_aa_a~OPdOeTO[_aa_a~Oc[OeTO[_aa_a~OegOf^O~OWhO~OeTO[_ia_i~OPjOeTO[_ia_i~OeTO[_qa_q~OeTO[_ya_y~O",
  goto: "#RePPPPfjmsP!P!V!kPPP!qPPPP!uTPORRYPQXPReYeUPWXYcdeijkQROR]RQWPWbWcikScXYSideRkjQ_TRf_TQOReVPWXYcdeijk",
  nodeNames: "\u26A0 TitleText LineComment PieDiagram DiagramName ShowData Title String Number",
  maxTerm: 23,
  propSources: [pieHighlighting],
  skippedNodes: [0, 2],
  repeatNodeCount: 3,
  tokenData: "*V~RrOX#]X^#t^p#]pq#tqr#]rs%gsu#]uv%lv!Q#]!Q!['`![!])R!]!c#]!c!})f!}#T#]#T#o)f#o#y#]#y#z#t#z$f#]$f$g#t$g#BY#]#BY#BZ#t#BZ$IS#]$IS$I_#t$I_$I|#]$I|$JO#t$JO$JT#]$JT$JU#t$JU$KV#]$KV$KW#t$KW&FU#]&FU&FV#t&FV;'S#];'S;=`#n<%lO#]Q#bSfQOr#]s;'S#];'S;=`#n<%lO#]Q#qP;=`<%l#]R#{h^PfQOX#]X^#t^p#]pq#tqr#]s#y#]#y#z#t#z$f#]$f$g#t$g#BY#]#BY#BZ#t#BZ$IS#]$IS$I_#t$I_$I|#]$I|$JO#t$JO$JT#]$JT$JU#t$JU$KV#]$KV$KW#t$KW&FU#]&FU&FV#t&FV;'S#];'S;=`#n<%lO#]~%lOe~R%qUfQOr#]su#]uv&Tv;'S#];'S;=`#n<%lO#]R&[VQPfQOY&TYZ#]Zr&Trs&qs;'S&T;'S;=`'Y<%lO&TP&vSQPOY&qZ;'S&q;'S;=`'S<%lO&qP'VP;=`<%l&qR']P;=`<%l&TR'gWWPfQOr#]s!O#]!O!P(P!P!Q#]!Q!['`![;'S#];'S;=`#n<%lO#]R(UUfQOr#]s!Q#]!Q![(h![;'S#];'S;=`#n<%lO#]R(oUWPfQOr#]s!Q#]!Q![(h![;'S#];'S;=`#n<%lO#]R)YSgPfQOr#]s;'S#];'S;=`#n<%lO#]R)mW`PfQOr#]s!c#]!c!})f!}#T#]#T#o)f#o;'S#];'S;=`#n<%lO#]",
  tokenizers: [titleText, 0, 1],
  topRules: { "PieDiagram": [0, 3] },
  specialized: [{ term: 16, get: (value) => spec_identifier$4[value] || -1 }],
  tokenPrec: 0
});
var NodeEdgeText = 1;
var NodeText$1 = 2;
var StyleText2 = 3;
var skipCodePoints$2 = [-1, 9, 13, 32, 34, 39, 96];
var startBracketCodePoints = [40, 62, 91, 123, 124];
var endBracketCodePoints = [41, 93, 124, 125];
var hyphen = 45;
var equal = 61;
var dot4 = 46;
var nodeText = new ExternalTokenizer((input) => {
  if (skipCodePoints$2.includes(input.next) || startBracketCodePoints.includes(input.next))
    return;
  while (!endBracketCodePoints.includes(input.next) && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(NodeText$1);
});
var nodeEdgeText = new ExternalTokenizer((input) => {
  if (skipCodePoints$2.includes(input.next) || startBracketCodePoints.includes(input.next) || input.next === hyphen || input.next === equal || input.next === dot4)
    return;
  while (input.next !== hyphen && input.next !== equal && input.next !== dot4 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(NodeEdgeText);
});
var styleText2 = new ExternalTokenizer((input) => {
  if (input.next === 10 || input.next === -1)
    return;
  while (input.next !== 10 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(StyleText2);
});
var flowchartHighlighting = styleTags({
  "( )": tags.paren,
  "[ ]": tags.squareBracket,
  "{ }": tags.brace,
  "<": tags.angleBracket,
  DiagramName: flowchartTags.diagramName,
  DoubleEqual: flowchartTags.link,
  DoubleHyphen: flowchartTags.link,
  Keyword: flowchartTags.keyword,
  LineComment: flowchartTags.lineComment,
  Link: flowchartTags.link,
  NodeEdge: flowchartTags.nodeEdge,
  NodeEdgeText: flowchartTags.nodeEdgeText,
  NodeId: flowchartTags.nodeId,
  NodeText: flowchartTags.nodeText,
  Number: flowchartTags.number,
  Orientation: flowchartTags.orientation,
  String: flowchartTags.string
});
var spec_identifier$3 = { __proto__: null, flowchart: 60, graph: 62, TB: 64, TD: 66, BT: 68, RL: 70, LR: 72, subgraph: 148, end: 150, direction: 152, click: 154, call: 156, href: 158, _self: 160, _blank: 162, _parent: 164, _to: 166, style: 170, linkStyle: 172, class: 174, classDef: 176 };
var parser$4 = LRParser.deserialize({
  version: 14,
  states: "*hOYQWOOOvQWO'#CxOOQO'#Co'#CoQYQWOOOOQO'#Cb'#CbOOQO'#Cp'#CpO!TQWO,59dO!cQWO,59dOOQS'#Cc'#CcOOQO-E6m-E6mOOQO-E6n-E6nO%aQWO1G/OOOQS'#Cd'#CdO(_O`O'#CfO(gOpO'#CfO(oO!bO'#CfO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeO(wQYO'#CeOOQO'#Cg'#CgO)VQXO'#ChOOQO'#DS'#DSO)eQWO'#DSO%aQWO1G/OOOQO'#Ck'#CkOOQO'#Cn'#CnO)yQWO7+$jOOOO'#Cq'#CqO,wO`O,59QOOQO,59Q,59QOOOO'#Cr'#CrO-POpO,59QOOOO'#Cs'#CsO-XO!bO,59QOOQO'#DU'#DUO-aQWO,59PO-fQWO,59PO-kQWO,59PO-pQ#tO,59PO-uQ#tO,59PO-}Q#tO,59PO.SQ#tO,59PO.XQWO,59PO.^Q#tO,59PO.cQ&jO,59POOQO'#Dv'#DvO.hQWO,59SO.|Q[O,59nO)yQWO7+$jO/RQWO'#CtO)yQWO7+$jO2dQWO<<HUO2dQWO<<HUOOOO-E6o-E6oOOQO1G.l1G.lOOOO-E6p-E6pOOOO-E6q-E6qOOQO1G.k1G.kOOQO1G.n1G.nOOQO1G/Y1G/YO5bQWO,59`OOQO,59`,59`OOQO-E6r-E6rO8sQWOAN=pOOQO1G.z1G.zP;qQWO'#Cp",
  stateData: ">{~OkOSSOS~OnSOoSO~OpWOqWOrWOsWOtWOuTO~OilXnlXolX~PbOuTOilanlaola~O]kO^kO`lOalOm[Ow`Oy]O{^O}_O!QaO!SbO!TcO!VdO!WeO!ZfO!]aO!^gO!`hO!biO!djO!ejO!fjO!gjO!hjO!ijO!klO!loO!moO!noO!ooO!poO!qoO!roO!soO!toO!uoO!vlO!wpO!xpO!ypO!zpOilanlaola~PbO]kO^kO`lOalOm[Ow`Oy]O{^O}_O!QaO!SbO!TcO!VdO!WeO!ZfO!]aO!^gO!`hO!biO!djO!ejO!fjO!gjO!hjO!ijO!klO!loO!moO!noO!ooO!poO!qoO!roO!soO!toO!uoO!vlO!wpO!xpO!ypO!zpOilinlioli~PbOytOzrO~O{tO|uO~O}tO!OwO~OQyOy]O{^O}_O~OP!UOy]O{^O}_O~Om[OpWOqWOrWOsWOtWO~O]kO^kO`lOalOm[Ow`Oy]O{^O}_O!QaO!SbO!TcO!VdO!WeO!ZfO!]aO!^gO!`hO!biO!djO!ejO!fjO!gjO!hjO!ijO!klO!loO!moO!noO!ooO!poO!qoO!roO!soO!toO!uoO!vlO!wpO!xpO!ypO!zpOilqnlqolq~PbOy!_OzrO~O{!_O|uO~O}!_O!OwO~O!P!bO~O!R!bO~O!S!bO~O!U!bO~O!U!bO!Y!bO~O!X!bO~O![!bO~O!_!bO~O!a!bO~O!c!bO~O!djO!ejO!fjO!gjO!hjO!ijO~OR!dO~O!{!fO]hX^hX`hXahXihXmhXnhXohXphXqhXrhXshXthXuhXwhXyhX{hX}hX!QhX!ShX!ThX!VhX!WhX!ZhX!]hX!^hX!`hX!bhX!dhX!ehX!fhX!ghX!hhX!ihX!khX!lhX!mhX!nhX!ohX!phX!qhX!rhX!shX!thX!uhX!vhX!whX!xhX!yhX!zhX~O]kO^kO`lOalOm[Ow`Oy]O{^O}_O!QaO!SbO!TcO!VdO!WeO!ZfO!]aO!^gO!`hO!biO!djO!ejO!fjO!gjO!hjO!ijO!klO!loO!moO!noO!ooO!poO!qoO!roO!soO!toO!uoO!vlO!wpO!xpO!ypO!zpOilynlyoly~PbO!{!iO]ha^ha`haahaihamhanhaohaphaqharhashathauhawhayha{ha}ha!Qha!Sha!Tha!Vha!Wha!Zha!]ha!^ha!`ha!bha!dha!eha!fha!gha!hha!iha!kha!lha!mha!nha!oha!pha!qha!rha!sha!tha!uha!vha!wha!xha!yha!zha~O]kO^kO`lOalOm[Ow`Oy]O{^O}_O!QaO!SbO!TcO!VdO!WeO!ZfO!]aO!^gO!`hO!biO!djO!ejO!fjO!gjO!hjO!ijO!klO!loO!moO!noO!ooO!poO!qoO!roO!soO!toO!uoO!vlO!wpO!xpO!ypO!zpOil!Rnl!Rol!R~PbO]kO^kO`lOalOm[Ow`Oy]O{^O}_O!QaO!SbO!TcO!VdO!WeO!ZfO!]aO!^gO!`hO!biO!djO!ejO!fjO!gjO!hjO!ijO!klO!loO!moO!noO!ooO!poO!qoO!roO!soO!toO!uoO!vlO!wpO!xpO!ypO!zpO~PbOukS!d!e!f!g!h!i]^!k!{y{}a`m]~",
  goto: "'[!kPPPPPP!l!p#Q#a#m$Y#aPP#aPP$i$u${%e%k%q%wPPP&RPPPPPPPPP&VP&iPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'XTPORQVPg[VZmnq!X!Z![!]!h!jdlVZnq!X!Z![!]!h!jR!WmelVZnq!X!Z![!]!h!jdlVZnq!X!Z![!]!h!jdy`abcdefghiR!UkdlVZnq!X!Z![!]!h!jR!c!VemVZnq!X!Z![!]!h!jQRORXRQUP[YUZ!X![!h!jQZVQ!XnS![q!ZR!h!]Qs]R!^sQv^R!`vQx_R!axQ!ZnQ!]qT!g!Z!]TQORQnVQqZW!Ynq!Z!]X!e!X![!h!jQz`Q{aQ|bQ}cQ!OdQ!PeQ!QfQ!RgQ!ShR!TiR!Vk",
  nodeNames: "\u26A0 NodeEdgeText NodeText StyleText LineComment FlowchartDiagram DiagramName Orientation NodeId Node String Link NodeEdge DoubleHyphen DoubleEqual Keyword : ::: StyleKeyword",
  maxTerm: 89,
  propSources: [flowchartHighlighting],
  skippedNodes: [0, 4],
  repeatNodeCount: 6,
  tokenData: "=3^!aR3ZOX!)tXY!.cYZ!0iZ^!.c^p!)tpq!.cqr!2wrs+ kst!2wtu!2wuv,(_vw6>_wx7ETxy8Kwyz9!^z{!2w{|!2w|}!)t}!O9&O!O!P9/Q!P!Q!2w!Q![!2w![!]:5y!]!^:8k!^!_:9c!_!`:Br!`!a:F`!a!b!2w!b!c!)t!c!}!2w!}#O:GW#O#P!2w#P#Q:Iw#Q#R!)t#R#S!2w#S#T:Lk#T#c!2w#c#d<%_#d#l!2w#l#m<%_#m#o!2w#o#p=,[#p#q=.Q#q#r=.x#r#s=0n#s#y!)t#y#z!.c#z$f!)t$f$g!.c$g$p!)t$p$q!2w$q${!)t${$|!2w$|%Q!)t%Q%R!2w%R%W!)t%W%o!2w%o%p!)t%p&a!2w&a&b!)t&b0`!2w0`0d!)t0d0p!2w0p1O!)t1O1T!2w1T1[!)t1[1]!2w1]1^!)t1^1_!2w1_4U!)t4U4Z!2w4Z4[!)t4[4]!2w4]4^!2w4^4`!)t4`4d!2w4d4l!)t4l4m!2w4m4n!)t4n4q!2w4q4r!)t4r4s!2w4s4t!)t4t5Y!2w5Y5Z!)t5Z7Q!2w7Q7R!)t7R:S!2w:S:[!)t:[=p!2w=p=y!)t=y>q!2w>q>s!)t>s>t!2w>t>{!)t>{?t!2w?tA`!)tA`A{!2wA{BQ!)tBQBT!2wBTCS!)tCSDP!2wDPDt!)tDtDu!2wDuDv!2wDvDw!)tDwGO!2wGOGP!)tGPGQ!2wGQGa!)tGaGb!2wGbGc!2wGcGj!)tGjGk!2wGkGl!2wGlGv!)tGvGy!2wGyG{!)tG{G|!2wG|H^!)tH^H_!2wH_H`!)tH`IO!2wIOIm!)tImKj!2wKjKu!)tKuKv!2wKvL`!)tL`MR!2wMRM[!)tM[M]!2wM]M^!2wM^Mb!)tMbMc!2wMcMh!)tMhNO!2wNONS!)tNSNT!2wNTN^!)tN^N_!2wN_Nb!)tNbNc!2wNcNz!)tNz! e!2w! e!#O!)t!#O!#P!2w!#P!#Q!)t!#Q!#]!2w!#]!%W!)t!%W!&`!2w!&`!&c!)t!&c!&d!2w!&d!&v!)t!&v!&w!2w!&w!'O!)t!'O!'Y!2w!'Y!'i!)t!'i!'p!2w!'p!'q!)t!'q!'x!2w!'x!'}!)t!'}!(V!2w!(V!(X!)t!(X!(Y!2w!(Y!(Z!2w!(Z!(]!)t!(]!(s!2w!(s!(t!)t!(t!({!2w!({!(|!)t!(|!(}!2w!(}!)Q!)t!)Q!)U!2w!)U!)X!)t!)X!)Y!2w!)Y!)j!)t!)j!)k!2w!)k!)x!)t!)x!)y!2w!)y!)z!2w!)z!){!)t!){!*O!2w!*O!*^!)t!*^!*_!2w!*_!*`!2w!*`!*s!)t!*s!*y!2w!*y!*}!)t!*}!+O!2w!+O!+P!2w!+P!+R!)t!+R!+i!2w!+i!+j!)t!+j!+q!2w!+q!+r!)t!+r!+s!2w!+s!+t!2w!+t!+u!)t!+u!+v!2w!+v!+w!2w!+w!+x!)t!+x!+y!2w!+y!+z!2w!+z!,k!)t!,k!,o!2w!,o!,p!)t!,p!,q!2w!,q!-U!)t!-U!-X!2w!-X!-i!)t!-i!-r!2w!-r!-s!)t!-s!-v!2w!-v!-w!)t!-w!._!2w!._!.`!)t!.`!.g!2w!.g!.h!)t!.h!.i!2w!.i!.j!2w!.j!.k!)t!.k!.p!2w!.p!.s!)t!.s!.t!2w!.t!/W!)t!/W!/X!2w!/X!/h!)t!/h!/i!2w!/i!/j!2w!/j!0_!)t!0_!0g!2w!0g!0i!)t!0i!0j!2w!0j!0k!2w!0k!0m!)t!0m!1T!2w!1T!1U!)t!1U!1]!2w!1]!1^!)t!1^!1_!2w!1_!1`!2w!1`!1a!)t!1a!1f!2w!1f!1i!)t!1i!1j!2w!1j!2Y!)t!2Y!2Z!2w!2Z!2[!2w!2[!2]!)t!2]!2`!2w!2`!2o!)t!2o!2p!2w!2p!3R!)t!3R!3S!2w!3S!3T!)t!3T!3Z!2w!3Z!3^!)t!3^!3a!2w!3a!3b!)t!3b!3f!2w!3f!3i!)t!3i!3j!2w!3j!3k!2w!3k!3l!)t!3l!3m!2w!3m!3n!)t!3n!3o!2w!3o!3p!2w!3p!3s!)t!3s!3t!2w!3t!3u!2w!3u!3x!)t!3x!3{!2w!3{!4O!)t!4O!4[!2w!4[!4r!)t!4r!4s!2w!4s!5y!)t!5y!6R!2w!6R!6S!)t!6S!6V!2w!6V!6W!)t!6W!6o!2w!6o!6p!)t!6p!6z!2w!6z!6{!)t!6{!7Q!2w!7Q!7T!)t!7T!7U!2w!7U!7p!)t!7p!7q!2w!7q!7r!2w!7r!7x!)t!7x!7y!2w!7y!7z!2w!7z!8o!)t!8o!8w!2w!8w!8x!)t!8x!8{!2w!8{!8|!)t!8|!9e!2w!9e!9f!)t!9f!9p!2w!9p!9q!)t!9q!9v!2w!9v!9y!)t!9y!9z!2w!9z!:l!)t!:l!:m!2w!:m!:n!)t!:n!:o!2w!:o!:p!2w!:p!;P!)t!;P!;Q!2w!;Q!;R!2w!;R!;e!)t!;e!;m!2w!;m!;n!)t!;n!;q!2w!;q!;r!)t!;r!<m!2w!<m!<o!)t!<o!<p!2w!<p!=Q!)t!=Q!=R!2w!=R!=d!)t!=d!=e!2w!=e!=f!2w!=f!>O!)t!>O!>U!2w!>U!>Z!)t!>Z!>m!2w!>m!>p!)t!>p!?Y!2w!?Y!?Z!)t!?Z!?d!2w!?d!?e!)t!?e!?f!2w!?f!?h!)t!?h!?o!2w!?o!@{!)t!@{!A}!2w!A}!BO!)t!BO!BP!2w!BP!BQ!2w!BQ!B^!)t!B^!Be!2w!Be!Cq!)t!Cq!Cr!2w!Cr!Cs!2w!Cs!Ct!)t!Ct!Cu!2w!Cu!Cw!)t!Cw!Cx!2w!Cx!Cy!2w!Cy!Cz!)t!Cz!C{!2w!C{!C}!)t!C}!DO!2w!DO!DU!)t!DU!DY!2w!DY!DZ!)t!DZ!Db!2w!Db!Dc!)t!Dc!Df!2w!Df!Dg!)t!Dg!Dh!2w!Dh!Di!)t!Di!Dj!2w!Dj!Dl!)t!Dl!Dm!2w!Dm!Dn!2w!Dn!Do!)t!Do!Ds!2w!Ds!Dt!)t!Dt!Du!2w!Du!Dv!2w!Dv!EP!)t!EP!EQ!2w!EQ!ES!)t!ES!EX!2w!EX!EY!)t!EY!EZ!2w!EZ!Ep!)t!Ep!Et!2w!Et!Ff!)t!Ff!Fg!2w!Fg!Gx!)t!Gx!HQ!2w!HQ!HR!)t!HR!Hw!2w!Hw!Id!)t!Id!Ii!2w!Ii!LQ!)t!LQ!L}!2w!L}!Mc!)t!Mc!Md!2w!Md!Mt!)t!Mt!Mz!2w!Mz!NO!)t!NO!NS!2w!NS!NV!)t!NV!NW!2w!NW!NZ!)t!NZ!N[!2w!N[!N]!2w!N]!Nd!)t!Nd!Ng!2w!Ng!Nk!)t!Nk!Nx!2w!Nx# U!)t# U# V!2w# V# h!)t# h#!`!2w#!`#!a!)t#!a#!b!2w#!b#!g!)t#!g#!h!2w#!h#!j!)t#!j##g!2w##g##h!)t##h#*s!2w#*s#*t!)t#*t#*x!2w#*x#*z!)t#*z#+R!2w#+R#+S!)t#+S#+T!2w#+T#+U!)t#+U#+Y!2w#+Y#+[!)t#+[#,V!2w#,V#,W!)t#,W#,[!2w#,[#,^!)t#,^#-P!2w#-P#-Q!)t#-Q#-U!2w#-U#-W!)t#-W#-_!2w#-_#-`!)t#-`#-a!2w#-a#-b!)t#-b#-f!2w#-f#-h!)t#-h#-w!2w#-w#-x!)t#-x#/T!2w#/T#/U!)t#/U#/Y!2w#/Y#/[!)t#/[#0q!2w#0q#1h!)t#1h#1x!2w#1x#2Y!)t#2Y#4R!2w#4R#4_!)t#4_#Au!2w#Au#Aw!)t#Aw#BY!2w#BY#BZ!.c#BZ#Bu!2w#Bu#Bz!)t#Bz#Di!2w#Di#EO!)t#EO#E]!2w#E]#E^!)t#E^#Eb!2w#Eb#Ep!)t#Ep#FS!2w#FS#Fb!)t#Fb#Ft!2w#Ft#GS!)t#GS#Ga!2w#Ga#Gb!)t#Gb#Ge!2w#Ge#Gt!)t#Gt#Hz!2w#Hz#Io!)t#Io#Ip!2w#Ip#It!)t#It#Iu!2w#Iu#K[!)t#K[#MW!2w#MW#M`!)t#M`#NZ!2w#NZ#N[!)t#N[#N]!2w#N]#Nb!)t#Nb$ z!2w$ z$!U!)t$!U$!s!2w$!s$#x!)t$#x$$h!2w$$h$$j!)t$$j$$o!2w$$o$$z!)t$$z$%x!2w$%x$&_!)t$&_$&f!2w$&f$'p!)t$'p$(X!2w$(X$(b!)t$(b$)i!2w$)i$+_!)t$+_$+`!2w$+`$-a!)t$-a$.b!2w$.b$.s!)t$.s$.z!2w$.z$0T!)t$0T$0s!2w$0s$1Q!)t$1Q$1R!2w$1R$1S!2w$1S$1^!)t$1^$2[!2w$2[$2v!)t$2v$3l!2w$3l$4g!)t$4g$4j!2w$4j$4t!)t$4t$5j!2w$5j$7y!)t$7y$7}!2w$7}$8O!)t$8O$8S!2w$8S$8V!)t$8V$8W!2w$8W$8X!2w$8X$8b!)t$8b$<j!2w$<j$=|!)t$=|$DO!2w$DO$DQ!)t$DQ$DW!2w$DW$DY!)t$DY$EQ!2w$EQ$ES!)t$ES$EY!2w$EY$E[!)t$E[$Ed!2w$Ed$Ee!)t$Ee$Ef!2w$Ef$Eg!)t$Eg$Eh!2w$Eh$Ei!)t$Ei$Ej!2w$Ej$Ek!)t$Ek$F[!2w$F[$F^!)t$F^$Ge!2w$Ge$Gf!)t$Gf$Gm!2w$Gm$Gn!)t$Gn$Go!2w$Go$Gr!)t$Gr$Gu!2w$Gu$Gv!)t$Gv$G}!2w$G}$HQ!)t$HQ$HU!2w$HU$HW!)t$HW$H^!2w$H^$Hb!)t$Hb$Ho!2w$Ho$Ht!)t$Ht$Hw!2w$Hw$Hx!)t$Hx$IP!2w$IP$IS!)t$IS$I_!.c$I_$I|!)t$I|$JO!.c$JO$JT!)t$JT$JU!.c$JU$KV!)t$KV$KW!.c$KW$Ki!)t$Ki$Kj!2w$Kj$Kw!)t$Kw$Kx!2w$Kx$LY!)t$LY$Lg!2w$Lg$Np!)t$Np$Nq!2w$Nq$Nu!)t$Nu$Nv!2w$Nv$Nx!)t$Nx% S!2w% S% T!)t% T% U!2w% U% X!)t% X% ^!2w% ^% d!)t% d% e!2w% e% f!)t% f% g!2w% g% h!)t% h% i!2w% i% j!)t% j% n!2w% n% o!)t% o% z!2w% z% |!)t% |%!Q!2w%!Q%!V!)t%!V%![!2w%![%!`!)t%!`%!a!2w%!a%#g!)t%#g%#h!2w%#h%#i!2w%#i&/x!)t&/x&0y!2w&0y&0z!)t&0z&1{!2w&1{&1|!)t&1|&4w!2w&4w&4}!)t&4}&5R!2w&5R&5U!)t&5U&5V!2w&5V&5W!2w&5W&5d!)t&5d&6[!2w&6[&6]!)t&6]&6^!2w&6^&6c!)t&6c&6d!2w&6d&6f!)t&6f&7p!2w&7p&7w!)t&7w&7x!2w&7x&8Y!)t&8Y&8q!2w&8q&8z!)t&8z&9R!2w&9R&9S!)t&9S&9Z!2w&9Z&9[!)t&9[&9c!2w&9c&9d!)t&9d&9k!2w&9k&9l!)t&9l&9s!2w&9s&9t!)t&9t&9{!2w&9{&9|!)t&9|&:T!2w&:T&:U!)t&:U&:]!2w&:]&<P!)t&<P&<Q!2w&<Q&FU!)t&FU&FV!.c&FV&FZ!)t&FZ&F[!2w&F[&F]!2w&F]&GX!)t&GX&G^!2w&G^&Gc!)t&Gc&Gd!2w&Gd&Ge!2w&Ge&Gi!)t&Gi&Ic!2w&Ic&Ii!)t&Ii&Il!2w&Il&Im!)t&Im&Kk!2w&Kk&Kl!)t&Kl&Kp!2w&Kp&Ku!)t&Ku&Lp!2w&Lp&Ls!)t&Ls&Nu!2w&Nu' W!)t' W' s!2w' s'!z!)t'!z'#[!2w'#['.b!)t'.b*3f!2w*3f*5S!)t*5S40_!2w40_41d!)t41d4Js!2w4Js4LY!)t4LY4MY!2w4MY4M[!)t4M[5%T!2w5%T5%W!)t5%W5%h!2w5%h5%r!)t5%r5%s!2w5%s5%t!2w5%t5&Y!)t5&Y5'Z!2w5'Z5'k!)t5'k5(U!2w5(U5(^!)t5(^5)v!2w5)v5*y!)t5*y5+S!2w5+S5+U!)t5+U5-a!2w5-a5-c!)t5-c5-g!2w5-g5-h!)t5-h5-l!2w5-l5-x!)t5-x5.T!2w5.T5/t!)t5/t50O!2w50O50P!)t50P50S!2w50S50T!)t50T50X!2w50X50Y!)t50Y50q!2w50q51`!)t51`52f!2w52f52t!)t52t53x!2w53x55Y!)t55Y55`!2w55`55c!)t55c55d!2w55d55r!)t55r56`!2w56`56j!)t56j57R!2w57R57l!)t57l58Z!2w58Z58b!)t58b59c!2w59c5:P!)t5:P5:Q!2w5:Q5;S!)t5;S5;}!2w5;}5<f!)t5<f5<i!2w5<i5<j!)t5<j5<r!2w5<r5=W!)t5=W5=o!2w5=o5=r!)t5=r5=s!2w5=s5=x!)t5=x5>z!2w5>z5>{!)t5>{5>|!2w5>|5?P!)t5?P5?Q!2w5?Q5?R!2w5?R5?T!)t5?T5?Y!2w5?Y5?[!)t5?[5?]!2w5?]5?^!)t5?^5?_!2w5?_5?w!)t5?w5?z!2w5?z5?|!)t5?|5@X!2w5@X5@`!)t5@`5@c!2w5@c5@o!)t5@o5@u!2w5@u5@w!)t5@w5@}!2w5@}5AP!)t5AP5AV!2w5AV5A`!)t5A`5Ag!2w5Ag5Ah!)t5Ah5Ao!2w5Ao5Dv!)t5Dv5Ek!2w5Ek5FY!)t5FY;%S!2w;%S;%`!)t;%`;%w!2w;%w;%{!)t;%{;'O!2w;'O;'S!)t;'S;=`!.]<%l?&r!)t?&r?.p!2w?.p?.r!)t?.r?1Q!2w?1Q?1x!)t?1x?2P!2w?2P?2]!)t?2]?2b!2w?2b?2g!)t?2g?2h!2w?2h?2i!)t?2i?2s!2w?2s?2t!)t?2t?3R!2w?3R?3S!)t?3S?3X!2w?3X?3Y!)t?3Y?3Z!2w?3Z?3[!)t?3[?3]!2w?3]?3^!2w?3^?3_!)t?3_?3`!2w?3`?3a!2w?3a?3b!)t?3b?5r!2w?5r?6e!)t?6e?>`!2w?>`?>r!)t?>r?@U!2w?@U?@W!)t?@W?A`!2w?A`?BY!)t?BY?Bf!2w?Bf?EO!)t?EO?ET!2w?ET?EU!)t?EU?HR!2w?HR?Hw!)t?Hw?Ic!2w?Ic?Ii!)t?Ii?JT!2w?JT?J`!)t?J`?L]!2w?L]?L`!)t?L`?Lf!2w?Lf?Lh!)t?Lh?Ln!2w?Ln?Lp!)t?Lp?Lv!2w?Lv?Lx!)t?Lx?L{!2w?L{O!)t^!)}X!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)tY!*qV!OWzQOw!*jwx!+Wx#S!*j#S#T!+o#T;'S!*j;'S;=`!,W<%lO!*jW!+]S!OWO#S!+W#T;'S!+W;'S;=`!+i<%lO!+WW!+lP;=`<%l!+WQ!+tSzQOw!+ox;'S!+o;'S;=`!,Q<%lO!+oQ!,TP;=`<%l!+oY!,ZP;=`<%l!*j[!,eV!OW|SOr!,^rs!+Ws#S!,^#S#T!,z#T;'S!,^;'S;=`!-c<%lO!,^S!-PS|SOr!,zs;'S!,z;'S;=`!-]<%lO!,zS!-`P;=`<%l!,z[!-fP;=`<%l!,^U!-pV|SzQOr!-irs!+osw!-iwx!,zx;'S!-i;'S;=`!.V<%lO!-iU!.YP;=`<%l!-i^!.`P;=`<%l!)t!a!.nm!OW|SzQk!ROX!)tX^!.c^p!)tpq!.cqr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T#y!)t#y#z!.c#z$f!)t$f$g!.c$g#BY!)t#BY#BZ!.c#BZ$IS!)t$IS$I_!.c$I_$I|!)t$I|$JO!.c$JO$JT!)t$JT$JU!.c$JU$KV!)t$KV$KW!.c$KW&FU!)t&FU&FV!.c&FV;'S!)t;'S;=`!.]<%lO!)t!a!0vo!OW|SzQuPk!ROX!)tXY!.cYZ!0iZ^!.c^p!)tpq!.cqr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T#y!)t#y#z!.c#z$f!)t$f$g!.c$g#BY!)t#BY#BZ!.c#BZ$IS!)t$IS$I_!.c$I_$I|!)t$I|$JO!.c$JO$JT!)t$JT$JU!.c$JU$KV!)t$KV$KW!.c$KW&FU!)t&FU&FV!.c&FV;'S!)t;'S;=`!.]<%lO!)t_!3S2g!OW|SzQmPOq!)tqr!2wrs#9kst!2wtu!2wuv!2wvw!2wwx';ixz!)tz{!2w{|!2w|!O!)t!O!P!2w!P!Q!2w!Q![!2w![!a!)t!a!b!2w!b!c!)t!c!}!2w!}#O!)t#O#P!2w#P#R!)t#R#S!2w#S#T)Hy#T#o!2w#o$p!)t$p$q!2w$q${!)t${$|!2w$|%Q!)t%Q%R!2w%R%W!)t%W%o!2w%o%p!)t%p&a!2w&a&b!)t&b0`!2w0`0d!)t0d0p!2w0p1O!)t1O1T!2w1T1[!)t1[1]!2w1]1^!)t1^1_!2w1_4U!)t4U4Z!2w4Z4[!)t4[4]!2w4]4^!2w4^4`!)t4`4d!2w4d4l!)t4l4m!2w4m4n!)t4n4q!2w4q4r!)t4r4s!2w4s4t!)t4t5Y!2w5Y5Z!)t5Z7Q!2w7Q7R!)t7R:S!2w:S:[!)t:[=p!2w=p=y!)t=y>q!2w>q>s!)t>s>t!2w>t>{!)t>{?t!2w?tA`!)tA`A{!2wA{BQ!)tBQBT!2wBTCS!)tCSDP!2wDPDt!)tDtDu!2wDuDv!2wDvDw!)tDwGO!2wGOGP!)tGPGQ!2wGQGa!)tGaGb!2wGbGc!2wGcGj!)tGjGk!2wGkGl!2wGlGv!)tGvGy!2wGyG{!)tG{G|!2wG|H^!)tH^H_!2wH_H`!)tH`IO!2wIOIm!)tImKj!2wKjKu!)tKuKv!2wKvL`!)tL`MR!2wMRM[!)tM[M]!2wM]M^!2wM^Mb!)tMbMc!2wMcMh!)tMhNO!2wNONS!)tNSNT!2wNTN^!)tN^N_!2wN_Nb!)tNbNc!2wNcNz!)tNz! e!2w! e!#O!)t!#O!#P!2w!#P!#Q!)t!#Q!#]!2w!#]!%W!)t!%W!&`!2w!&`!&c!)t!&c!&d!2w!&d!&v!)t!&v!&w!2w!&w!'O!)t!'O!'Y!2w!'Y!'i!)t!'i!'p!2w!'p!'q!)t!'q!'x!2w!'x!'}!)t!'}!(V!2w!(V!(X!)t!(X!(Y!2w!(Y!(Z!2w!(Z!(]!)t!(]!(s!2w!(s!(t!)t!(t!({!2w!({!(|!)t!(|!(}!2w!(}!)Q!)t!)Q!)U!2w!)U!)X!)t!)X!)Y!2w!)Y!)j!)t!)j!)k!2w!)k!)x!)t!)x!)y!2w!)y!)z!2w!)z!){!)t!){!*O!2w!*O!*^!)t!*^!*_!2w!*_!*`!2w!*`!*s!)t!*s!*y!2w!*y!*}!)t!*}!+O!2w!+O!+P!2w!+P!+R!)t!+R!+i!2w!+i!+j!)t!+j!+q!2w!+q!+r!)t!+r!+s!2w!+s!+t!2w!+t!+u!)t!+u!+v!2w!+v!+w!2w!+w!+x!)t!+x!+y!2w!+y!+z!2w!+z!,k!)t!,k!,o!2w!,o!,p!)t!,p!,q!2w!,q!-U!)t!-U!-X!2w!-X!-i!)t!-i!-r!2w!-r!-s!)t!-s!-v!2w!-v!-w!)t!-w!._!2w!._!.`!)t!.`!.g!2w!.g!.h!)t!.h!.i!2w!.i!.j!2w!.j!.k!)t!.k!.p!2w!.p!.s!)t!.s!.t!2w!.t!/W!)t!/W!/X!2w!/X!/h!)t!/h!/i!2w!/i!/j!2w!/j!0_!)t!0_!0g!2w!0g!0i!)t!0i!0j!2w!0j!0k!2w!0k!0m!)t!0m!1T!2w!1T!1U!)t!1U!1]!2w!1]!1^!)t!1^!1_!2w!1_!1`!2w!1`!1a!)t!1a!1f!2w!1f!1i!)t!1i!1j!2w!1j!2Y!)t!2Y!2Z!2w!2Z!2[!2w!2[!2]!)t!2]!2`!2w!2`!2o!)t!2o!2p!2w!2p!3R!)t!3R!3S!2w!3S!3T!)t!3T!3Z!2w!3Z!3^!)t!3^!3a!2w!3a!3b!)t!3b!3f!2w!3f!3i!)t!3i!3j!2w!3j!3k!2w!3k!3l!)t!3l!3m!2w!3m!3n!)t!3n!3o!2w!3o!3p!2w!3p!3s!)t!3s!3t!2w!3t!3u!2w!3u!3x!)t!3x!3{!2w!3{!4O!)t!4O!4[!2w!4[!4r!)t!4r!4s!2w!4s!5y!)t!5y!6R!2w!6R!6S!)t!6S!6V!2w!6V!6W!)t!6W!6o!2w!6o!6p!)t!6p!6z!2w!6z!6{!)t!6{!7Q!2w!7Q!7T!)t!7T!7U!2w!7U!7p!)t!7p!7q!2w!7q!7r!2w!7r!7x!)t!7x!7y!2w!7y!7z!2w!7z!8o!)t!8o!8w!2w!8w!8x!)t!8x!8{!2w!8{!8|!)t!8|!9e!2w!9e!9f!)t!9f!9p!2w!9p!9q!)t!9q!9v!2w!9v!9y!)t!9y!9z!2w!9z!:l!)t!:l!:m!2w!:m!:n!)t!:n!:o!2w!:o!:p!2w!:p!;P!)t!;P!;Q!2w!;Q!;R!2w!;R!;e!)t!;e!;m!2w!;m!;n!)t!;n!;q!2w!;q!;r!)t!;r!<m!2w!<m!<o!)t!<o!<p!2w!<p!=Q!)t!=Q!=R!2w!=R!=d!)t!=d!=e!2w!=e!=f!2w!=f!>O!)t!>O!>U!2w!>U!>Z!)t!>Z!>m!2w!>m!>p!)t!>p!?Y!2w!?Y!?Z!)t!?Z!?d!2w!?d!?e!)t!?e!?f!2w!?f!?h!)t!?h!?o!2w!?o!@{!)t!@{!A}!2w!A}!BO!)t!BO!BP!2w!BP!BQ!2w!BQ!B^!)t!B^!Be!2w!Be!Cq!)t!Cq!Cr!2w!Cr!Cs!2w!Cs!Ct!)t!Ct!Cu!2w!Cu!Cw!)t!Cw!Cx!2w!Cx!Cy!2w!Cy!Cz!)t!Cz!C{!2w!C{!C}!)t!C}!DO!2w!DO!DU!)t!DU!DY!2w!DY!DZ!)t!DZ!Db!2w!Db!Dc!)t!Dc!Df!2w!Df!Dg!)t!Dg!Dh!2w!Dh!Di!)t!Di!Dj!2w!Dj!Dl!)t!Dl!Dm!2w!Dm!Dn!2w!Dn!Do!)t!Do!Ds!2w!Ds!Dt!)t!Dt!Du!2w!Du!Dv!2w!Dv!EP!)t!EP!EQ!2w!EQ!ES!)t!ES!EX!2w!EX!EY!)t!EY!EZ!2w!EZ!Ep!)t!Ep!Et!2w!Et!Ff!)t!Ff!Fg!2w!Fg!Gx!)t!Gx!HQ!2w!HQ!HR!)t!HR!Hw!2w!Hw!Id!)t!Id!Ii!2w!Ii!LQ!)t!LQ!L}!2w!L}!Mc!)t!Mc!Md!2w!Md!Mt!)t!Mt!Mz!2w!Mz!NO!)t!NO!NS!2w!NS!NV!)t!NV!NW!2w!NW!NZ!)t!NZ!N[!2w!N[!N]!2w!N]!Nd!)t!Nd!Ng!2w!Ng!Nk!)t!Nk!Nx!2w!Nx# U!)t# U# V!2w# V# h!)t# h#!`!2w#!`#!a!)t#!a#!b!2w#!b#!g!)t#!g#!h!2w#!h#!j!)t#!j##g!2w##g##h!)t##h#*s!2w#*s#*t!)t#*t#*x!2w#*x#*z!)t#*z#+R!2w#+R#+S!)t#+S#+T!2w#+T#+U!)t#+U#+Y!2w#+Y#+[!)t#+[#,V!2w#,V#,W!)t#,W#,[!2w#,[#,^!)t#,^#-P!2w#-P#-Q!)t#-Q#-U!2w#-U#-W!)t#-W#-_!2w#-_#-`!)t#-`#-a!2w#-a#-b!)t#-b#-f!2w#-f#-h!)t#-h#-w!2w#-w#-x!)t#-x#/T!2w#/T#/U!)t#/U#/Y!2w#/Y#/[!)t#/[#0q!2w#0q#1h!)t#1h#1x!2w#1x#2Y!)t#2Y#4R!2w#4R#4_!)t#4_#Au!2w#Au#Aw!)t#Aw#BY!2w#BY#BZ!)t#BZ#Bu!2w#Bu#Bz!)t#Bz#Di!2w#Di#EO!)t#EO#E]!2w#E]#E^!)t#E^#Eb!2w#Eb#Ep!)t#Ep#FS!2w#FS#Fb!)t#Fb#Ft!2w#Ft#GS!)t#GS#Ga!2w#Ga#Gb!)t#Gb#Ge!2w#Ge#Gt!)t#Gt#Hz!2w#Hz#Io!)t#Io#Ip!2w#Ip#It!)t#It#Iu!2w#Iu#K[!)t#K[#MW!2w#MW#M`!)t#M`#NZ!2w#NZ#N[!)t#N[#N]!2w#N]#Nb!)t#Nb$ z!2w$ z$!U!)t$!U$!s!2w$!s$#x!)t$#x$$h!2w$$h$$j!)t$$j$$o!2w$$o$$z!)t$$z$%x!2w$%x$&_!)t$&_$&f!2w$&f$'p!)t$'p$(X!2w$(X$(b!)t$(b$)i!2w$)i$+_!)t$+_$+`!2w$+`$-a!)t$-a$.b!2w$.b$.s!)t$.s$.z!2w$.z$0T!)t$0T$0s!2w$0s$1Q!)t$1Q$1R!2w$1R$1S!2w$1S$1^!)t$1^$2[!2w$2[$2v!)t$2v$3l!2w$3l$4g!)t$4g$4j!2w$4j$4t!)t$4t$5j!2w$5j$7y!)t$7y$7}!2w$7}$8O!)t$8O$8S!2w$8S$8V!)t$8V$8W!2w$8W$8X!2w$8X$8b!)t$8b$<j!2w$<j$=|!)t$=|$DO!2w$DO$DQ!)t$DQ$DW!2w$DW$DY!)t$DY$EQ!2w$EQ$ES!)t$ES$EY!2w$EY$E[!)t$E[$Ed!2w$Ed$Ee!)t$Ee$Ef!2w$Ef$Eg!)t$Eg$Eh!2w$Eh$Ei!)t$Ei$Ej!2w$Ej$Ek!)t$Ek$F[!2w$F[$F^!)t$F^$Ge!2w$Ge$Gf!)t$Gf$Gm!2w$Gm$Gn!)t$Gn$Go!2w$Go$Gr!)t$Gr$Gu!2w$Gu$Gv!)t$Gv$G}!2w$G}$HQ!)t$HQ$HU!2w$HU$HW!)t$HW$H^!2w$H^$Hb!)t$Hb$Ho!2w$Ho$Ht!)t$Ht$Hw!2w$Hw$Hx!)t$Hx$IP!2w$IP$Ki!)t$Ki$Kj!2w$Kj$Kw!)t$Kw$Kx!2w$Kx$LY!)t$LY$Lg!2w$Lg$Np!)t$Np$Nq!2w$Nq$Nu!)t$Nu$Nv!2w$Nv$Nx!)t$Nx% S!2w% S% T!)t% T% U!2w% U% X!)t% X% ^!2w% ^% d!)t% d% e!2w% e% f!)t% f% g!2w% g% h!)t% h% i!2w% i% j!)t% j% n!2w% n% o!)t% o% z!2w% z% |!)t% |%!Q!2w%!Q%!V!)t%!V%![!2w%![%!`!)t%!`%!a!2w%!a%#g!)t%#g%#h!2w%#h%#i!2w%#i&/x!)t&/x&0y!2w&0y&0z!)t&0z&1{!2w&1{&1|!)t&1|&4w!2w&4w&4}!)t&4}&5R!2w&5R&5U!)t&5U&5V!2w&5V&5W!2w&5W&5d!)t&5d&6[!2w&6[&6]!)t&6]&6^!2w&6^&6c!)t&6c&6d!2w&6d&6f!)t&6f&7p!2w&7p&7w!)t&7w&7x!2w&7x&8Y!)t&8Y&8q!2w&8q&8z!)t&8z&9R!2w&9R&9S!)t&9S&9Z!2w&9Z&9[!)t&9[&9c!2w&9c&9d!)t&9d&9k!2w&9k&9l!)t&9l&9s!2w&9s&9t!)t&9t&9{!2w&9{&9|!)t&9|&:T!2w&:T&:U!)t&:U&:]!2w&:]&<P!)t&<P&<Q!2w&<Q&FZ!)t&FZ&F[!2w&F[&F]!2w&F]&GX!)t&GX&G^!2w&G^&Gc!)t&Gc&Gd!2w&Gd&Ge!2w&Ge&Gi!)t&Gi&Ic!2w&Ic&Ii!)t&Ii&Il!2w&Il&Im!)t&Im&Kk!2w&Kk&Kl!)t&Kl&Kp!2w&Kp&Ku!)t&Ku&Lp!2w&Lp&Ls!)t&Ls&Nu!2w&Nu' W!)t' W' s!2w' s'!z!)t'!z'#[!2w'#['.b!)t'.b*3f!2w*3f*5S!)t*5S40_!2w40_41d!)t41d4Js!2w4Js4LY!)t4LY4MY!2w4MY4M[!)t4M[5%T!2w5%T5%W!)t5%W5%h!2w5%h5%r!)t5%r5%s!2w5%s5%t!2w5%t5&Y!)t5&Y5'Z!2w5'Z5'k!)t5'k5(U!2w5(U5(^!)t5(^5)v!2w5)v5*y!)t5*y5+S!2w5+S5+U!)t5+U5-a!2w5-a5-c!)t5-c5-g!2w5-g5-h!)t5-h5-l!2w5-l5-x!)t5-x5.T!2w5.T5/t!)t5/t50O!2w50O50P!)t50P50S!2w50S50T!)t50T50X!2w50X50Y!)t50Y50q!2w50q51`!)t51`52f!2w52f52t!)t52t53x!2w53x55Y!)t55Y55`!2w55`55c!)t55c55d!2w55d55r!)t55r56`!2w56`56j!)t56j57R!2w57R57l!)t57l58Z!2w58Z58b!)t58b59c!2w59c5:P!)t5:P5:Q!2w5:Q5;S!)t5;S5;}!2w5;}5<f!)t5<f5<i!2w5<i5<j!)t5<j5<r!2w5<r5=W!)t5=W5=o!2w5=o5=r!)t5=r5=s!2w5=s5=x!)t5=x5>z!2w5>z5>{!)t5>{5>|!2w5>|5?P!)t5?P5?Q!2w5?Q5?R!2w5?R5?T!)t5?T5?Y!2w5?Y5?[!)t5?[5?]!2w5?]5?^!)t5?^5?_!2w5?_5?w!)t5?w5?z!2w5?z5?|!)t5?|5@X!2w5@X5@`!)t5@`5@c!2w5@c5@o!)t5@o5@u!2w5@u5@w!)t5@w5@}!2w5@}5AP!)t5AP5AV!2w5AV5A`!)t5A`5Ag!2w5Ag5Ah!)t5Ah5Ao!2w5Ao5Dv!)t5Dv5Ek!2w5Ek5FY!)t5FY;%S!2w;%S;%`!)t;%`;%w!2w;%w;%{!)t;%{;'O!2w;'O;'S!)t;'S;=`!.]<%l?&r!)t?&r?.p!2w?.p?.r!)t?.r?1Q!2w?1Q?1x!)t?1x?2P!2w?2P?2]!)t?2]?2b!2w?2b?2g!)t?2g?2h!2w?2h?2i!)t?2i?2s!2w?2s?2t!)t?2t?3R!2w?3R?3S!)t?3S?3X!2w?3X?3Y!)t?3Y?3Z!2w?3Z?3[!)t?3[?3]!2w?3]?3^!2w?3^?3_!)t?3_?3`!2w?3`?3a!2w?3a?3b!)t?3b?5r!2w?5r?6e!)t?6e?>`!2w?>`?>r!)t?>r?@U!2w?@U?@W!)t?@W?A`!2w?A`?BY!)t?BY?Bf!2w?Bf?EO!)t?EO?ET!2w?ET?EU!)t?EU?HR!2w?HR?Hw!)t?Hw?Ic!2w?Ic?Ii!)t?Ii?JT!2w?JT?J`!)t?J`?L]!2w?L]?L`!)t?L`?Lf!2w?Lf?Lh!)t?Lh?Ln!2w?Ln?Lp!)t?Lp?Lv!2w?Lv?Lx!)t?Lx?L{!2w?L{O!)tZ#9t2g!OWzQmPOq!*jqr#9krs#9kst#9ktu#9kuv#9kvw#9kwx$@]xz!*jz{#9k{|#9k|!O!*j!O!P#9k!P!Q#9k!Q![#9k![!a!*j!a!b#9k!b!c!*j!c!}#9k!}#O!*j#O#P#9k#P#R!*j#R#S#9k#S#T&4y#T#o#9k#o$p!*j$p$q#9k$q${!*j${$|#9k$|%Q!*j%Q%R#9k%R%W!*j%W%o#9k%o%p!*j%p&a#9k&a&b!*j&b0`#9k0`0d!*j0d0p#9k0p1O!*j1O1T#9k1T1[!*j1[1]#9k1]1^!*j1^1_#9k1_4U!*j4U4Z#9k4Z4[!*j4[4]#9k4]4^#9k4^4`!*j4`4d#9k4d4l!*j4l4m#9k4m4n!*j4n4q#9k4q4r!*j4r4s#9k4s4t!*j4t5Y#9k5Y5Z!*j5Z7Q#9k7Q7R!*j7R:S#9k:S:[!*j:[=p#9k=p=y!*j=y>q#9k>q>s!*j>s>t#9k>t>{!*j>{?t#9k?tA`!*jA`A{#9kA{BQ!*jBQBT#9kBTCS!*jCSDP#9kDPDt!*jDtDu#9kDuDv#9kDvDw!*jDwGO#9kGOGP!*jGPGQ#9kGQGa!*jGaGb#9kGbGc#9kGcGj!*jGjGk#9kGkGl#9kGlGv!*jGvGy#9kGyG{!*jG{G|#9kG|H^!*jH^H_#9kH_H`!*jH`IO#9kIOIm!*jImKj#9kKjKu!*jKuKv#9kKvL`!*jL`MR#9kMRM[!*jM[M]#9kM]M^#9kM^Mb!*jMbMc#9kMcMh!*jMhNO#9kNONS!*jNSNT#9kNTN^!*jN^N_#9kN_Nb!*jNbNc#9kNcNz!*jNz! e#9k! e!#O!*j!#O!#P#9k!#P!#Q!*j!#Q!#]#9k!#]!%W!*j!%W!&`#9k!&`!&c!*j!&c!&d#9k!&d!&v!*j!&v!&w#9k!&w!'O!*j!'O!'Y#9k!'Y!'i!*j!'i!'p#9k!'p!'q!*j!'q!'x#9k!'x!'}!*j!'}!(V#9k!(V!(X!*j!(X!(Y#9k!(Y!(Z#9k!(Z!(]!*j!(]!(s#9k!(s!(t!*j!(t!({#9k!({!(|!*j!(|!(}#9k!(}!)Q!*j!)Q!)U#9k!)U!)X!*j!)X!)Y#9k!)Y!)j!*j!)j!)k#9k!)k!)x!*j!)x!)y#9k!)y!)z#9k!)z!){!*j!){!*O#9k!*O!*^!*j!*^!*_#9k!*_!*`#9k!*`!*s!*j!*s!*y#9k!*y!*}!*j!*}!+O#9k!+O!+P#9k!+P!+R!*j!+R!+i#9k!+i!+j!*j!+j!+q#9k!+q!+r!*j!+r!+s#9k!+s!+t#9k!+t!+u!*j!+u!+v#9k!+v!+w#9k!+w!+x!*j!+x!+y#9k!+y!+z#9k!+z!,k!*j!,k!,o#9k!,o!,p!*j!,p!,q#9k!,q!-U!*j!-U!-X#9k!-X!-i!*j!-i!-r#9k!-r!-s!*j!-s!-v#9k!-v!-w!*j!-w!._#9k!._!.`!*j!.`!.g#9k!.g!.h!*j!.h!.i#9k!.i!.j#9k!.j!.k!*j!.k!.p#9k!.p!.s!*j!.s!.t#9k!.t!/W!*j!/W!/X#9k!/X!/h!*j!/h!/i#9k!/i!/j#9k!/j!0_!*j!0_!0g#9k!0g!0i!*j!0i!0j#9k!0j!0k#9k!0k!0m!*j!0m!1T#9k!1T!1U!*j!1U!1]#9k!1]!1^!*j!1^!1_#9k!1_!1`#9k!1`!1a!*j!1a!1f#9k!1f!1i!*j!1i!1j#9k!1j!2Y!*j!2Y!2Z#9k!2Z!2[#9k!2[!2]!*j!2]!2`#9k!2`!2o!*j!2o!2p#9k!2p!3R!*j!3R!3S#9k!3S!3T!*j!3T!3Z#9k!3Z!3^!*j!3^!3a#9k!3a!3b!*j!3b!3f#9k!3f!3i!*j!3i!3j#9k!3j!3k#9k!3k!3l!*j!3l!3m#9k!3m!3n!*j!3n!3o#9k!3o!3p#9k!3p!3s!*j!3s!3t#9k!3t!3u#9k!3u!3x!*j!3x!3{#9k!3{!4O!*j!4O!4[#9k!4[!4r!*j!4r!4s#9k!4s!5y!*j!5y!6R#9k!6R!6S!*j!6S!6V#9k!6V!6W!*j!6W!6o#9k!6o!6p!*j!6p!6z#9k!6z!6{!*j!6{!7Q#9k!7Q!7T!*j!7T!7U#9k!7U!7p!*j!7p!7q#9k!7q!7r#9k!7r!7x!*j!7x!7y#9k!7y!7z#9k!7z!8o!*j!8o!8w#9k!8w!8x!*j!8x!8{#9k!8{!8|!*j!8|!9e#9k!9e!9f!*j!9f!9p#9k!9p!9q!*j!9q!9v#9k!9v!9y!*j!9y!9z#9k!9z!:l!*j!:l!:m#9k!:m!:n!*j!:n!:o#9k!:o!:p#9k!:p!;P!*j!;P!;Q#9k!;Q!;R#9k!;R!;e!*j!;e!;m#9k!;m!;n!*j!;n!;q#9k!;q!;r!*j!;r!<m#9k!<m!<o!*j!<o!<p#9k!<p!=Q!*j!=Q!=R#9k!=R!=d!*j!=d!=e#9k!=e!=f#9k!=f!>O!*j!>O!>U#9k!>U!>Z!*j!>Z!>m#9k!>m!>p!*j!>p!?Y#9k!?Y!?Z!*j!?Z!?d#9k!?d!?e!*j!?e!?f#9k!?f!?h!*j!?h!?o#9k!?o!@{!*j!@{!A}#9k!A}!BO!*j!BO!BP#9k!BP!BQ#9k!BQ!B^!*j!B^!Be#9k!Be!Cq!*j!Cq!Cr#9k!Cr!Cs#9k!Cs!Ct!*j!Ct!Cu#9k!Cu!Cw!*j!Cw!Cx#9k!Cx!Cy#9k!Cy!Cz!*j!Cz!C{#9k!C{!C}!*j!C}!DO#9k!DO!DU!*j!DU!DY#9k!DY!DZ!*j!DZ!Db#9k!Db!Dc!*j!Dc!Df#9k!Df!Dg!*j!Dg!Dh#9k!Dh!Di!*j!Di!Dj#9k!Dj!Dl!*j!Dl!Dm#9k!Dm!Dn#9k!Dn!Do!*j!Do!Ds#9k!Ds!Dt!*j!Dt!Du#9k!Du!Dv#9k!Dv!EP!*j!EP!EQ#9k!EQ!ES!*j!ES!EX#9k!EX!EY!*j!EY!EZ#9k!EZ!Ep!*j!Ep!Et#9k!Et!Ff!*j!Ff!Fg#9k!Fg!Gx!*j!Gx!HQ#9k!HQ!HR!*j!HR!Hw#9k!Hw!Id!*j!Id!Ii#9k!Ii!LQ!*j!LQ!L}#9k!L}!Mc!*j!Mc!Md#9k!Md!Mt!*j!Mt!Mz#9k!Mz!NO!*j!NO!NS#9k!NS!NV!*j!NV!NW#9k!NW!NZ!*j!NZ!N[#9k!N[!N]#9k!N]!Nd!*j!Nd!Ng#9k!Ng!Nk!*j!Nk!Nx#9k!Nx# U!*j# U# V#9k# V# h!*j# h#!`#9k#!`#!a!*j#!a#!b#9k#!b#!g!*j#!g#!h#9k#!h#!j!*j#!j##g#9k##g##h!*j##h#*s#9k#*s#*t!*j#*t#*x#9k#*x#*z!*j#*z#+R#9k#+R#+S!*j#+S#+T#9k#+T#+U!*j#+U#+Y#9k#+Y#+[!*j#+[#,V#9k#,V#,W!*j#,W#,[#9k#,[#,^!*j#,^#-P#9k#-P#-Q!*j#-Q#-U#9k#-U#-W!*j#-W#-_#9k#-_#-`!*j#-`#-a#9k#-a#-b!*j#-b#-f#9k#-f#-h!*j#-h#-w#9k#-w#-x!*j#-x#/T#9k#/T#/U!*j#/U#/Y#9k#/Y#/[!*j#/[#0q#9k#0q#1h!*j#1h#1x#9k#1x#2Y!*j#2Y#4R#9k#4R#4_!*j#4_#Au#9k#Au#Aw!*j#Aw#BY#9k#BY#BZ!*j#BZ#Bu#9k#Bu#Bz!*j#Bz#Di#9k#Di#EO!*j#EO#E]#9k#E]#E^!*j#E^#Eb#9k#Eb#Ep!*j#Ep#FS#9k#FS#Fb!*j#Fb#Ft#9k#Ft#GS!*j#GS#Ga#9k#Ga#Gb!*j#Gb#Ge#9k#Ge#Gt!*j#Gt#Hz#9k#Hz#Io!*j#Io#Ip#9k#Ip#It!*j#It#Iu#9k#Iu#K[!*j#K[#MW#9k#MW#M`!*j#M`#NZ#9k#NZ#N[!*j#N[#N]#9k#N]#Nb!*j#Nb$ z#9k$ z$!U!*j$!U$!s#9k$!s$#x!*j$#x$$h#9k$$h$$j!*j$$j$$o#9k$$o$$z!*j$$z$%x#9k$%x$&_!*j$&_$&f#9k$&f$'p!*j$'p$(X#9k$(X$(b!*j$(b$)i#9k$)i$+_!*j$+_$+`#9k$+`$-a!*j$-a$.b#9k$.b$.s!*j$.s$.z#9k$.z$0T!*j$0T$0s#9k$0s$1Q!*j$1Q$1R#9k$1R$1S#9k$1S$1^!*j$1^$2[#9k$2[$2v!*j$2v$3l#9k$3l$4g!*j$4g$4j#9k$4j$4t!*j$4t$5j#9k$5j$7y!*j$7y$7}#9k$7}$8O!*j$8O$8S#9k$8S$8V!*j$8V$8W#9k$8W$8X#9k$8X$8b!*j$8b$<j#9k$<j$=|!*j$=|$DO#9k$DO$DQ!*j$DQ$DW#9k$DW$DY!*j$DY$EQ#9k$EQ$ES!*j$ES$EY#9k$EY$E[!*j$E[$Ed#9k$Ed$Ee!*j$Ee$Ef#9k$Ef$Eg!*j$Eg$Eh#9k$Eh$Ei!*j$Ei$Ej#9k$Ej$Ek!*j$Ek$F[#9k$F[$F^!*j$F^$Ge#9k$Ge$Gf!*j$Gf$Gm#9k$Gm$Gn!*j$Gn$Go#9k$Go$Gr!*j$Gr$Gu#9k$Gu$Gv!*j$Gv$G}#9k$G}$HQ!*j$HQ$HU#9k$HU$HW!*j$HW$H^#9k$H^$Hb!*j$Hb$Ho#9k$Ho$Ht!*j$Ht$Hw#9k$Hw$Hx!*j$Hx$IP#9k$IP$Ki!*j$Ki$Kj#9k$Kj$Kw!*j$Kw$Kx#9k$Kx$LY!*j$LY$Lg#9k$Lg$Np!*j$Np$Nq#9k$Nq$Nu!*j$Nu$Nv#9k$Nv$Nx!*j$Nx% S#9k% S% T!*j% T% U#9k% U% X!*j% X% ^#9k% ^% d!*j% d% e#9k% e% f!*j% f% g#9k% g% h!*j% h% i#9k% i% j!*j% j% n#9k% n% o!*j% o% z#9k% z% |!*j% |%!Q#9k%!Q%!V!*j%!V%![#9k%![%!`!*j%!`%!a#9k%!a%#g!*j%#g%#h#9k%#h%#i#9k%#i&/x!*j&/x&0y#9k&0y&0z!*j&0z&1{#9k&1{&1|!*j&1|&4w#9k&4w&4}!*j&4}&5R#9k&5R&5U!*j&5U&5V#9k&5V&5W#9k&5W&5d!*j&5d&6[#9k&6[&6]!*j&6]&6^#9k&6^&6c!*j&6c&6d#9k&6d&6f!*j&6f&7p#9k&7p&7w!*j&7w&7x#9k&7x&8Y!*j&8Y&8q#9k&8q&8z!*j&8z&9R#9k&9R&9S!*j&9S&9Z#9k&9Z&9[!*j&9[&9c#9k&9c&9d!*j&9d&9k#9k&9k&9l!*j&9l&9s#9k&9s&9t!*j&9t&9{#9k&9{&9|!*j&9|&:T#9k&:T&:U!*j&:U&:]#9k&:]&<P!*j&<P&<Q#9k&<Q&FZ!*j&FZ&F[#9k&F[&F]#9k&F]&GX!*j&GX&G^#9k&G^&Gc!*j&Gc&Gd#9k&Gd&Ge#9k&Ge&Gi!*j&Gi&Ic#9k&Ic&Ii!*j&Ii&Il#9k&Il&Im!*j&Im&Kk#9k&Kk&Kl!*j&Kl&Kp#9k&Kp&Ku!*j&Ku&Lp#9k&Lp&Ls!*j&Ls&Nu#9k&Nu' W!*j' W' s#9k' s'!z!*j'!z'#[#9k'#['.b!*j'.b*3f#9k*3f*5S!*j*5S40_#9k40_41d!*j41d4Js#9k4Js4LY!*j4LY4MY#9k4MY4M[!*j4M[5%T#9k5%T5%W!*j5%W5%h#9k5%h5%r!*j5%r5%s#9k5%s5%t#9k5%t5&Y!*j5&Y5'Z#9k5'Z5'k!*j5'k5(U#9k5(U5(^!*j5(^5)v#9k5)v5*y!*j5*y5+S#9k5+S5+U!*j5+U5-a#9k5-a5-c!*j5-c5-g#9k5-g5-h!*j5-h5-l#9k5-l5-x!*j5-x5.T#9k5.T5/t!*j5/t50O#9k50O50P!*j50P50S#9k50S50T!*j50T50X#9k50X50Y!*j50Y50q#9k50q51`!*j51`52f#9k52f52t!*j52t53x#9k53x55Y!*j55Y55`#9k55`55c!*j55c55d#9k55d55r!*j55r56`#9k56`56j!*j56j57R#9k57R57l!*j57l58Z#9k58Z58b!*j58b59c#9k59c5:P!*j5:P5:Q#9k5:Q5;S!*j5;S5;}#9k5;}5<f!*j5<f5<i#9k5<i5<j!*j5<j5<r#9k5<r5=W!*j5=W5=o#9k5=o5=r!*j5=r5=s#9k5=s5=x!*j5=x5>z#9k5>z5>{!*j5>{5>|#9k5>|5?P!*j5?P5?Q#9k5?Q5?R#9k5?R5?T!*j5?T5?Y#9k5?Y5?[!*j5?[5?]#9k5?]5?^!*j5?^5?_#9k5?_5?w!*j5?w5?z#9k5?z5?|!*j5?|5@X#9k5@X5@`!*j5@`5@c#9k5@c5@o!*j5@o5@u#9k5@u5@w!*j5@w5@}#9k5@}5AP!*j5AP5AV#9k5AV5A`!*j5A`5Ag#9k5Ag5Ah!*j5Ah5Ao#9k5Ao5Dv!*j5Dv5Ek#9k5Ek5FY!*j5FY;%S#9k;%S;%`!*j;%`;%w#9k;%w;%{!*j;%{;'O#9k;'O;'S!*j;'S;=`!,W<%l?&r!*j?&r?.p#9k?.p?.r!*j?.r?1Q#9k?1Q?1x!*j?1x?2P#9k?2P?2]!*j?2]?2b#9k?2b?2g!*j?2g?2h#9k?2h?2i!*j?2i?2s#9k?2s?2t!*j?2t?3R#9k?3R?3S!*j?3S?3X#9k?3X?3Y!*j?3Y?3Z#9k?3Z?3[!*j?3[?3]#9k?3]?3^#9k?3^?3_!*j?3_?3`#9k?3`?3a#9k?3a?3b!*j?3b?5r#9k?5r?6e!*j?6e?>`#9k?>`?>r!*j?>r?@U#9k?@U?@W!*j?@W?A`#9k?A`?BY!*j?BY?Bf#9k?Bf?EO!*j?EO?ET#9k?ET?EU!*j?EU?HR#9k?HR?Hw!*j?Hw?Ic#9k?Ic?Ii!*j?Ii?JT#9k?JT?J`!*j?J`?L]#9k?L]?L`!*j?L`?Lf#9k?Lf?Lh!*j?Lh?Ln#9k?Ln?Lp!*j?Lp?Lv#9k?Lv?Lx!*j?Lx?L{#9k?L{O!*jX$@d2g!OWmPOq!+Wqr$@]rs$@]st$@]tu$@]uv$@]vw$@]wx$@]xz!+Wz{$@]{|$@]|!O!+W!O!P$@]!P!Q$@]!Q![$@]![!a!+W!a!b$@]!b!c!+W!c!}$@]!}#O!+W#O#P$@]#P#R!+W#R#S$@]#S#T%F{#T#o$@]#o$p!+W$p$q$@]$q${!+W${$|$@]$|%Q!+W%Q%R$@]%R%W!+W%W%o$@]%o%p!+W%p&a$@]&a&b!+W&b0`$@]0`0d!+W0d0p$@]0p1O!+W1O1T$@]1T1[!+W1[1]$@]1]1^!+W1^1_$@]1_4U!+W4U4Z$@]4Z4[!+W4[4]$@]4]4^$@]4^4`!+W4`4d$@]4d4l!+W4l4m$@]4m4n!+W4n4q$@]4q4r!+W4r4s$@]4s4t!+W4t5Y$@]5Y5Z!+W5Z7Q$@]7Q7R!+W7R:S$@]:S:[!+W:[=p$@]=p=y!+W=y>q$@]>q>s!+W>s>t$@]>t>{!+W>{?t$@]?tA`!+WA`A{$@]A{BQ!+WBQBT$@]BTCS!+WCSDP$@]DPDt!+WDtDu$@]DuDv$@]DvDw!+WDwGO$@]GOGP!+WGPGQ$@]GQGa!+WGaGb$@]GbGc$@]GcGj!+WGjGk$@]GkGl$@]GlGv!+WGvGy$@]GyG{!+WG{G|$@]G|H^!+WH^H_$@]H_H`!+WH`IO$@]IOIm!+WImKj$@]KjKu!+WKuKv$@]KvL`!+WL`MR$@]MRM[!+WM[M]$@]M]M^$@]M^Mb!+WMbMc$@]McMh!+WMhNO$@]NONS!+WNSNT$@]NTN^!+WN^N_$@]N_Nb!+WNbNc$@]NcNz!+WNz! e$@]! e!#O!+W!#O!#P$@]!#P!#Q!+W!#Q!#]$@]!#]!%W!+W!%W!&`$@]!&`!&c!+W!&c!&d$@]!&d!&v!+W!&v!&w$@]!&w!'O!+W!'O!'Y$@]!'Y!'i!+W!'i!'p$@]!'p!'q!+W!'q!'x$@]!'x!'}!+W!'}!(V$@]!(V!(X!+W!(X!(Y$@]!(Y!(Z$@]!(Z!(]!+W!(]!(s$@]!(s!(t!+W!(t!({$@]!({!(|!+W!(|!(}$@]!(}!)Q!+W!)Q!)U$@]!)U!)X!+W!)X!)Y$@]!)Y!)j!+W!)j!)k$@]!)k!)x!+W!)x!)y$@]!)y!)z$@]!)z!){!+W!){!*O$@]!*O!*^!+W!*^!*_$@]!*_!*`$@]!*`!*s!+W!*s!*y$@]!*y!*}!+W!*}!+O$@]!+O!+P$@]!+P!+R!+W!+R!+i$@]!+i!+j!+W!+j!+q$@]!+q!+r!+W!+r!+s$@]!+s!+t$@]!+t!+u!+W!+u!+v$@]!+v!+w$@]!+w!+x!+W!+x!+y$@]!+y!+z$@]!+z!,k!+W!,k!,o$@]!,o!,p!+W!,p!,q$@]!,q!-U!+W!-U!-X$@]!-X!-i!+W!-i!-r$@]!-r!-s!+W!-s!-v$@]!-v!-w!+W!-w!._$@]!._!.`!+W!.`!.g$@]!.g!.h!+W!.h!.i$@]!.i!.j$@]!.j!.k!+W!.k!.p$@]!.p!.s!+W!.s!.t$@]!.t!/W!+W!/W!/X$@]!/X!/h!+W!/h!/i$@]!/i!/j$@]!/j!0_!+W!0_!0g$@]!0g!0i!+W!0i!0j$@]!0j!0k$@]!0k!0m!+W!0m!1T$@]!1T!1U!+W!1U!1]$@]!1]!1^!+W!1^!1_$@]!1_!1`$@]!1`!1a!+W!1a!1f$@]!1f!1i!+W!1i!1j$@]!1j!2Y!+W!2Y!2Z$@]!2Z!2[$@]!2[!2]!+W!2]!2`$@]!2`!2o!+W!2o!2p$@]!2p!3R!+W!3R!3S$@]!3S!3T!+W!3T!3Z$@]!3Z!3^!+W!3^!3a$@]!3a!3b!+W!3b!3f$@]!3f!3i!+W!3i!3j$@]!3j!3k$@]!3k!3l!+W!3l!3m$@]!3m!3n!+W!3n!3o$@]!3o!3p$@]!3p!3s!+W!3s!3t$@]!3t!3u$@]!3u!3x!+W!3x!3{$@]!3{!4O!+W!4O!4[$@]!4[!4r!+W!4r!4s$@]!4s!5y!+W!5y!6R$@]!6R!6S!+W!6S!6V$@]!6V!6W!+W!6W!6o$@]!6o!6p!+W!6p!6z$@]!6z!6{!+W!6{!7Q$@]!7Q!7T!+W!7T!7U$@]!7U!7p!+W!7p!7q$@]!7q!7r$@]!7r!7x!+W!7x!7y$@]!7y!7z$@]!7z!8o!+W!8o!8w$@]!8w!8x!+W!8x!8{$@]!8{!8|!+W!8|!9e$@]!9e!9f!+W!9f!9p$@]!9p!9q!+W!9q!9v$@]!9v!9y!+W!9y!9z$@]!9z!:l!+W!:l!:m$@]!:m!:n!+W!:n!:o$@]!:o!:p$@]!:p!;P!+W!;P!;Q$@]!;Q!;R$@]!;R!;e!+W!;e!;m$@]!;m!;n!+W!;n!;q$@]!;q!;r!+W!;r!<m$@]!<m!<o!+W!<o!<p$@]!<p!=Q!+W!=Q!=R$@]!=R!=d!+W!=d!=e$@]!=e!=f$@]!=f!>O!+W!>O!>U$@]!>U!>Z!+W!>Z!>m$@]!>m!>p!+W!>p!?Y$@]!?Y!?Z!+W!?Z!?d$@]!?d!?e!+W!?e!?f$@]!?f!?h!+W!?h!?o$@]!?o!@{!+W!@{!A}$@]!A}!BO!+W!BO!BP$@]!BP!BQ$@]!BQ!B^!+W!B^!Be$@]!Be!Cq!+W!Cq!Cr$@]!Cr!Cs$@]!Cs!Ct!+W!Ct!Cu$@]!Cu!Cw!+W!Cw!Cx$@]!Cx!Cy$@]!Cy!Cz!+W!Cz!C{$@]!C{!C}!+W!C}!DO$@]!DO!DU!+W!DU!DY$@]!DY!DZ!+W!DZ!Db$@]!Db!Dc!+W!Dc!Df$@]!Df!Dg!+W!Dg!Dh$@]!Dh!Di!+W!Di!Dj$@]!Dj!Dl!+W!Dl!Dm$@]!Dm!Dn$@]!Dn!Do!+W!Do!Ds$@]!Ds!Dt!+W!Dt!Du$@]!Du!Dv$@]!Dv!EP!+W!EP!EQ$@]!EQ!ES!+W!ES!EX$@]!EX!EY!+W!EY!EZ$@]!EZ!Ep!+W!Ep!Et$@]!Et!Ff!+W!Ff!Fg$@]!Fg!Gx!+W!Gx!HQ$@]!HQ!HR!+W!HR!Hw$@]!Hw!Id!+W!Id!Ii$@]!Ii!LQ!+W!LQ!L}$@]!L}!Mc!+W!Mc!Md$@]!Md!Mt!+W!Mt!Mz$@]!Mz!NO!+W!NO!NS$@]!NS!NV!+W!NV!NW$@]!NW!NZ!+W!NZ!N[$@]!N[!N]$@]!N]!Nd!+W!Nd!Ng$@]!Ng!Nk!+W!Nk!Nx$@]!Nx# U!+W# U# V$@]# V# h!+W# h#!`$@]#!`#!a!+W#!a#!b$@]#!b#!g!+W#!g#!h$@]#!h#!j!+W#!j##g$@]##g##h!+W##h#*s$@]#*s#*t!+W#*t#*x$@]#*x#*z!+W#*z#+R$@]#+R#+S!+W#+S#+T$@]#+T#+U!+W#+U#+Y$@]#+Y#+[!+W#+[#,V$@]#,V#,W!+W#,W#,[$@]#,[#,^!+W#,^#-P$@]#-P#-Q!+W#-Q#-U$@]#-U#-W!+W#-W#-_$@]#-_#-`!+W#-`#-a$@]#-a#-b!+W#-b#-f$@]#-f#-h!+W#-h#-w$@]#-w#-x!+W#-x#/T$@]#/T#/U!+W#/U#/Y$@]#/Y#/[!+W#/[#0q$@]#0q#1h!+W#1h#1x$@]#1x#2Y!+W#2Y#4R$@]#4R#4_!+W#4_#Au$@]#Au#Aw!+W#Aw#BY$@]#BY#BZ!+W#BZ#Bu$@]#Bu#Bz!+W#Bz#Di$@]#Di#EO!+W#EO#E]$@]#E]#E^!+W#E^#Eb$@]#Eb#Ep!+W#Ep#FS$@]#FS#Fb!+W#Fb#Ft$@]#Ft#GS!+W#GS#Ga$@]#Ga#Gb!+W#Gb#Ge$@]#Ge#Gt!+W#Gt#Hz$@]#Hz#Io!+W#Io#Ip$@]#Ip#It!+W#It#Iu$@]#Iu#K[!+W#K[#MW$@]#MW#M`!+W#M`#NZ$@]#NZ#N[!+W#N[#N]$@]#N]#Nb!+W#Nb$ z$@]$ z$!U!+W$!U$!s$@]$!s$#x!+W$#x$$h$@]$$h$$j!+W$$j$$o$@]$$o$$z!+W$$z$%x$@]$%x$&_!+W$&_$&f$@]$&f$'p!+W$'p$(X$@]$(X$(b!+W$(b$)i$@]$)i$+_!+W$+_$+`$@]$+`$-a!+W$-a$.b$@]$.b$.s!+W$.s$.z$@]$.z$0T!+W$0T$0s$@]$0s$1Q!+W$1Q$1R$@]$1R$1S$@]$1S$1^!+W$1^$2[$@]$2[$2v!+W$2v$3l$@]$3l$4g!+W$4g$4j$@]$4j$4t!+W$4t$5j$@]$5j$7y!+W$7y$7}$@]$7}$8O!+W$8O$8S$@]$8S$8V!+W$8V$8W$@]$8W$8X$@]$8X$8b!+W$8b$<j$@]$<j$=|!+W$=|$DO$@]$DO$DQ!+W$DQ$DW$@]$DW$DY!+W$DY$EQ$@]$EQ$ES!+W$ES$EY$@]$EY$E[!+W$E[$Ed$@]$Ed$Ee!+W$Ee$Ef$@]$Ef$Eg!+W$Eg$Eh$@]$Eh$Ei!+W$Ei$Ej$@]$Ej$Ek!+W$Ek$F[$@]$F[$F^!+W$F^$Ge$@]$Ge$Gf!+W$Gf$Gm$@]$Gm$Gn!+W$Gn$Go$@]$Go$Gr!+W$Gr$Gu$@]$Gu$Gv!+W$Gv$G}$@]$G}$HQ!+W$HQ$HU$@]$HU$HW!+W$HW$H^$@]$H^$Hb!+W$Hb$Ho$@]$Ho$Ht!+W$Ht$Hw$@]$Hw$Hx!+W$Hx$IP$@]$IP$Ki!+W$Ki$Kj$@]$Kj$Kw!+W$Kw$Kx$@]$Kx$LY!+W$LY$Lg$@]$Lg$Np!+W$Np$Nq$@]$Nq$Nu!+W$Nu$Nv$@]$Nv$Nx!+W$Nx% S$@]% S% T!+W% T% U$@]% U% X!+W% X% ^$@]% ^% d!+W% d% e$@]% e% f!+W% f% g$@]% g% h!+W% h% i$@]% i% j!+W% j% n$@]% n% o!+W% o% z$@]% z% |!+W% |%!Q$@]%!Q%!V!+W%!V%![$@]%![%!`!+W%!`%!a$@]%!a%#g!+W%#g%#h$@]%#h%#i$@]%#i&/x!+W&/x&0y$@]&0y&0z!+W&0z&1{$@]&1{&1|!+W&1|&4w$@]&4w&4}!+W&4}&5R$@]&5R&5U!+W&5U&5V$@]&5V&5W$@]&5W&5d!+W&5d&6[$@]&6[&6]!+W&6]&6^$@]&6^&6c!+W&6c&6d$@]&6d&6f!+W&6f&7p$@]&7p&7w!+W&7w&7x$@]&7x&8Y!+W&8Y&8q$@]&8q&8z!+W&8z&9R$@]&9R&9S!+W&9S&9Z$@]&9Z&9[!+W&9[&9c$@]&9c&9d!+W&9d&9k$@]&9k&9l!+W&9l&9s$@]&9s&9t!+W&9t&9{$@]&9{&9|!+W&9|&:T$@]&:T&:U!+W&:U&:]$@]&:]&<P!+W&<P&<Q$@]&<Q&FZ!+W&FZ&F[$@]&F[&F]$@]&F]&GX!+W&GX&G^$@]&G^&Gc!+W&Gc&Gd$@]&Gd&Ge$@]&Ge&Gi!+W&Gi&Ic$@]&Ic&Ii!+W&Ii&Il$@]&Il&Im!+W&Im&Kk$@]&Kk&Kl!+W&Kl&Kp$@]&Kp&Ku!+W&Ku&Lp$@]&Lp&Ls!+W&Ls&Nu$@]&Nu' W!+W' W' s$@]' s'!z!+W'!z'#[$@]'#['.b!+W'.b*3f$@]*3f*5S!+W*5S40_$@]40_41d!+W41d4Js$@]4Js4LY!+W4LY4MY$@]4MY4M[!+W4M[5%T$@]5%T5%W!+W5%W5%h$@]5%h5%r!+W5%r5%s$@]5%s5%t$@]5%t5&Y!+W5&Y5'Z$@]5'Z5'k!+W5'k5(U$@]5(U5(^!+W5(^5)v$@]5)v5*y!+W5*y5+S$@]5+S5+U!+W5+U5-a$@]5-a5-c!+W5-c5-g$@]5-g5-h!+W5-h5-l$@]5-l5-x!+W5-x5.T$@]5.T5/t!+W5/t50O$@]50O50P!+W50P50S$@]50S50T!+W50T50X$@]50X50Y!+W50Y50q$@]50q51`!+W51`52f$@]52f52t!+W52t53x$@]53x55Y!+W55Y55`$@]55`55c!+W55c55d$@]55d55r!+W55r56`$@]56`56j!+W56j57R$@]57R57l!+W57l58Z$@]58Z58b!+W58b59c$@]59c5:P!+W5:P5:Q$@]5:Q5;S!+W5;S5;}$@]5;}5<f!+W5<f5<i$@]5<i5<j!+W5<j5<r$@]5<r5=W!+W5=W5=o$@]5=o5=r!+W5=r5=s$@]5=s5=x!+W5=x5>z$@]5>z5>{!+W5>{5>|$@]5>|5?P!+W5?P5?Q$@]5?Q5?R$@]5?R5?T!+W5?T5?Y$@]5?Y5?[!+W5?[5?]$@]5?]5?^!+W5?^5?_$@]5?_5?w!+W5?w5?z$@]5?z5?|!+W5?|5@X$@]5@X5@`!+W5@`5@c$@]5@c5@o!+W5@o5@u$@]5@u5@w!+W5@w5@}$@]5@}5AP!+W5AP5AV$@]5AV5A`!+W5A`5Ag$@]5Ag5Ah!+W5Ah5Ao$@]5Ao5Dv!+W5Dv5Ek$@]5Ek5FY!+W5FY;%S$@];%S;%`!+W;%`;%w$@];%w;%{!+W;%{;'O$@];'O;'S!+W;'S;=`!+i<%l?&r!+W?&r?.p$@]?.p?.r!+W?.r?1Q$@]?1Q?1x!+W?1x?2P$@]?2P?2]!+W?2]?2b$@]?2b?2g!+W?2g?2h$@]?2h?2i!+W?2i?2s$@]?2s?2t!+W?2t?3R$@]?3R?3S!+W?3S?3X$@]?3X?3Y!+W?3Y?3Z$@]?3Z?3[!+W?3[?3]$@]?3]?3^$@]?3^?3_!+W?3_?3`$@]?3`?3a$@]?3a?3b!+W?3b?5r$@]?5r?6e!+W?6e?>`$@]?>`?>r!+W?>r?@U$@]?@U?@W!+W?@W?A`$@]?A`?BY!+W?BY?Bf$@]?Bf?EO!+W?EO?ET$@]?ET?EU!+W?EU?HR$@]?HR?Hw!+W?Hw?Ic$@]?Ic?Ii!+W?Ii?JT$@]?JT?J`!+W?J`?L]$@]?L]?L`!+W?L`?Lf$@]?Lf?Lh!+W?Lh?Ln$@]?Ln?Lp!+W?Lp?Lv$@]?Lv?Lx!+W?Lx?L{$@]?L{O!+WP%GQ*]mPqr%F{rs%F{st%F{tu%F{uv%F{vw%F{wx%F{z{%F{{|%F{!O!P%F{!P!Q%F{!Q![%F{!a!b%F{!c!}%F{#O#P%F{#R#S%F{#S#T%F{#T#o%F{$p$q%F{${$|%F{%Q%R%F{%W%o%F{%p&a%F{&b0`%F{0d0p%F{1O1T%F{1[1]%F{1^1_%F{4U4Z%F{4[4]%F{4]4^%F{4`4d%F{4l4m%F{4n4q%F{4r4s%F{4t5Y%F{5Z7Q%F{7R:S%F{:[=p%F{=y>q%F{>s>t%F{>{?t%F{A`A{%F{BQBT%F{CSDP%F{DtDu%F{DuDv%F{DwGO%F{GPGQ%F{GaGb%F{GbGc%F{GjGk%F{GkGl%F{GvGy%F{G{G|%F{H^H_%F{H`IO%F{ImKj%F{KuKv%F{L`MR%F{M[M]%F{M]M^%F{MbMc%F{MhNO%F{NSNT%F{N^N_%F{NbNc%F{Nz! e%F{!#O!#P%F{!#Q!#]%F{!%W!&`%F{!&c!&d%F{!&v!&w%F{!'O!'Y%F{!'i!'p%F{!'q!'x%F{!'}!(V%F{!(X!(Y%F{!(Y!(Z%F{!(]!(s%F{!(t!({%F{!(|!(}%F{!)Q!)U%F{!)X!)Y%F{!)j!)k%F{!)x!)y%F{!)y!)z%F{!){!*O%F{!*^!*_%F{!*_!*`%F{!*s!*y%F{!*}!+O%F{!+O!+P%F{!+R!+i%F{!+j!+q%F{!+r!+s%F{!+s!+t%F{!+u!+v%F{!+v!+w%F{!+x!+y%F{!+y!+z%F{!,k!,o%F{!,p!,q%F{!-U!-X%F{!-i!-r%F{!-s!-v%F{!-w!._%F{!.`!.g%F{!.h!.i%F{!.i!.j%F{!.k!.p%F{!.s!.t%F{!/W!/X%F{!/h!/i%F{!/i!/j%F{!0_!0g%F{!0i!0j%F{!0j!0k%F{!0m!1T%F{!1U!1]%F{!1^!1_%F{!1_!1`%F{!1a!1f%F{!1i!1j%F{!2Y!2Z%F{!2Z!2[%F{!2]!2`%F{!2o!2p%F{!3R!3S%F{!3T!3Z%F{!3^!3a%F{!3b!3f%F{!3i!3j%F{!3j!3k%F{!3l!3m%F{!3n!3o%F{!3o!3p%F{!3s!3t%F{!3t!3u%F{!3x!3{%F{!4O!4[%F{!4r!4s%F{!5y!6R%F{!6S!6V%F{!6W!6o%F{!6p!6z%F{!6{!7Q%F{!7T!7U%F{!7p!7q%F{!7q!7r%F{!7x!7y%F{!7y!7z%F{!8o!8w%F{!8x!8{%F{!8|!9e%F{!9f!9p%F{!9q!9v%F{!9y!9z%F{!:l!:m%F{!:n!:o%F{!:o!:p%F{!;P!;Q%F{!;Q!;R%F{!;e!;m%F{!;n!;q%F{!;r!<m%F{!<o!<p%F{!=Q!=R%F{!=d!=e%F{!=e!=f%F{!>O!>U%F{!>Z!>m%F{!>p!?Y%F{!?Z!?d%F{!?e!?f%F{!?h!?o%F{!@{!A}%F{!BO!BP%F{!BP!BQ%F{!B^!Be%F{!Cq!Cr%F{!Cr!Cs%F{!Ct!Cu%F{!Cw!Cx%F{!Cx!Cy%F{!Cz!C{%F{!C}!DO%F{!DU!DY%F{!DZ!Db%F{!Dc!Df%F{!Dg!Dh%F{!Di!Dj%F{!Dl!Dm%F{!Dm!Dn%F{!Do!Ds%F{!Dt!Du%F{!Du!Dv%F{!EP!EQ%F{!ES!EX%F{!EY!EZ%F{!Ep!Et%F{!Ff!Fg%F{!Gx!HQ%F{!HR!Hw%F{!Id!Ii%F{!LQ!L}%F{!Mc!Md%F{!Mt!Mz%F{!NO!NS%F{!NV!NW%F{!NZ!N[%F{!N[!N]%F{!Nd!Ng%F{!Nk!Nx%F{# U# V%F{# h#!`%F{#!a#!b%F{#!g#!h%F{#!j##g%F{##h#*s%F{#*t#*x%F{#*z#+R%F{#+S#+T%F{#+U#+Y%F{#+[#,V%F{#,W#,[%F{#,^#-P%F{#-Q#-U%F{#-W#-_%F{#-`#-a%F{#-b#-f%F{#-h#-w%F{#-x#/T%F{#/U#/Y%F{#/[#0q%F{#1h#1x%F{#2Y#4R%F{#4_#Au%F{#Aw#BY%F{#BZ#Bu%F{#Bz#Di%F{#EO#E]%F{#E^#Eb%F{#Ep#FS%F{#Fb#Ft%F{#GS#Ga%F{#Gb#Ge%F{#Gt#Hz%F{#Io#Ip%F{#It#Iu%F{#K[#MW%F{#M`#NZ%F{#N[#N]%F{#Nb$ z%F{$!U$!s%F{$#x$$h%F{$$j$$o%F{$$z$%x%F{$&_$&f%F{$'p$(X%F{$(b$)i%F{$+_$+`%F{$-a$.b%F{$.s$.z%F{$0T$0s%F{$1Q$1R%F{$1R$1S%F{$1^$2[%F{$2v$3l%F{$4g$4j%F{$4t$5j%F{$7y$7}%F{$8O$8S%F{$8V$8W%F{$8W$8X%F{$8b$<j%F{$=|$DO%F{$DQ$DW%F{$DY$EQ%F{$ES$EY%F{$E[$Ed%F{$Ee$Ef%F{$Eg$Eh%F{$Ei$Ej%F{$Ek$F[%F{$F^$Ge%F{$Gf$Gm%F{$Gn$Go%F{$Gr$Gu%F{$Gv$G}%F{$HQ$HU%F{$HW$H^%F{$Hb$Ho%F{$Ht$Hw%F{$Hx$IP%F{$Ki$Kj%F{$Kw$Kx%F{$LY$Lg%F{$Np$Nq%F{$Nu$Nv%F{$Nx% S%F{% T% U%F{% X% ^%F{% d% e%F{% f% g%F{% h% i%F{% j% n%F{% o% z%F{% |%!Q%F{%!V%![%F{%!`%!a%F{%#g%#h%F{%#h%#i%F{&/x&0y%F{&0z&1{%F{&1|&4w%F{&4}&5R%F{&5U&5V%F{&5V&5W%F{&5d&6[%F{&6]&6^%F{&6c&6d%F{&6f&7p%F{&7w&7x%F{&8Y&8q%F{&8z&9R%F{&9S&9Z%F{&9[&9c%F{&9d&9k%F{&9l&9s%F{&9t&9{%F{&9|&:T%F{&:U&:]%F{&<P&<Q%F{&FZ&F[%F{&F[&F]%F{&GX&G^%F{&Gc&Gd%F{&Gd&Ge%F{&Gi&Ic%F{&Ii&Il%F{&Im&Kk%F{&Kl&Kp%F{&Ku&Lp%F{&Ls&Nu%F{' W' s%F{'!z'#[%F{'.b*3f%F{*5S40_%F{41d4Js%F{4LY4MY%F{4M[5%T%F{5%W5%h%F{5%r5%s%F{5%s5%t%F{5&Y5'Z%F{5'k5(U%F{5(^5)v%F{5*y5+S%F{5+U5-a%F{5-c5-g%F{5-h5-l%F{5-x5.T%F{5/t50O%F{50P50S%F{50T50X%F{50Y50q%F{51`52f%F{52t53x%F{55Y55`%F{55c55d%F{55r56`%F{56j57R%F{57l58Z%F{58b59c%F{5:P5:Q%F{5;S5;}%F{5<f5<i%F{5<j5<r%F{5=W5=o%F{5=r5=s%F{5=x5>z%F{5>{5>|%F{5?P5?Q%F{5?Q5?R%F{5?T5?Y%F{5?[5?]%F{5?^5?_%F{5?w5?z%F{5?|5@X%F{5@`5@c%F{5@o5@u%F{5@w5@}%F{5AP5AV%F{5A`5Ag%F{5Ah5Ao%F{5Dv5Ek%F{5FY;%S%F{;%`;%w%F{;%{;'O%F{?&r?.p%F{?.r?1Q%F{?1x?2P%F{?2]?2b%F{?2g?2h%F{?2i?2s%F{?2t?3R%F{?3S?3X%F{?3Y?3Z%F{?3[?3]%F{?3]?3^%F{?3_?3`%F{?3`?3a%F{?3b?5r%F{?6e?>`%F{?>r?@U%F{?@W?A`%F{?BY?Bf%F{?EO?ET%F{?EU?HR%F{?Hw?Ic%F{?Ii?JT%F{?J`?L]%F{?L`?Lf%F{?Lh?Ln%F{?Lp?Lv%F{?Lx?L{%F{R&5Q2gzQmPOq!+oqr&4yrs&4yst&4ytu&4yuv&4yvw&4ywx%F{xz!+oz{&4y{|&4y|!O!+o!O!P&4y!P!Q&4y!Q![&4y![!a!+o!a!b&4y!b!c!+o!c!}&4y!}#O!+o#O#P&4y#P#R!+o#R#S&4y#S#T&4y#T#o&4y#o$p!+o$p$q&4y$q${!+o${$|&4y$|%Q!+o%Q%R&4y%R%W!+o%W%o&4y%o%p!+o%p&a&4y&a&b!+o&b0`&4y0`0d!+o0d0p&4y0p1O!+o1O1T&4y1T1[!+o1[1]&4y1]1^!+o1^1_&4y1_4U!+o4U4Z&4y4Z4[!+o4[4]&4y4]4^&4y4^4`!+o4`4d&4y4d4l!+o4l4m&4y4m4n!+o4n4q&4y4q4r!+o4r4s&4y4s4t!+o4t5Y&4y5Y5Z!+o5Z7Q&4y7Q7R!+o7R:S&4y:S:[!+o:[=p&4y=p=y!+o=y>q&4y>q>s!+o>s>t&4y>t>{!+o>{?t&4y?tA`!+oA`A{&4yA{BQ!+oBQBT&4yBTCS!+oCSDP&4yDPDt!+oDtDu&4yDuDv&4yDvDw!+oDwGO&4yGOGP!+oGPGQ&4yGQGa!+oGaGb&4yGbGc&4yGcGj!+oGjGk&4yGkGl&4yGlGv!+oGvGy&4yGyG{!+oG{G|&4yG|H^!+oH^H_&4yH_H`!+oH`IO&4yIOIm!+oImKj&4yKjKu!+oKuKv&4yKvL`!+oL`MR&4yMRM[!+oM[M]&4yM]M^&4yM^Mb!+oMbMc&4yMcMh!+oMhNO&4yNONS!+oNSNT&4yNTN^!+oN^N_&4yN_Nb!+oNbNc&4yNcNz!+oNz! e&4y! e!#O!+o!#O!#P&4y!#P!#Q!+o!#Q!#]&4y!#]!%W!+o!%W!&`&4y!&`!&c!+o!&c!&d&4y!&d!&v!+o!&v!&w&4y!&w!'O!+o!'O!'Y&4y!'Y!'i!+o!'i!'p&4y!'p!'q!+o!'q!'x&4y!'x!'}!+o!'}!(V&4y!(V!(X!+o!(X!(Y&4y!(Y!(Z&4y!(Z!(]!+o!(]!(s&4y!(s!(t!+o!(t!({&4y!({!(|!+o!(|!(}&4y!(}!)Q!+o!)Q!)U&4y!)U!)X!+o!)X!)Y&4y!)Y!)j!+o!)j!)k&4y!)k!)x!+o!)x!)y&4y!)y!)z&4y!)z!){!+o!){!*O&4y!*O!*^!+o!*^!*_&4y!*_!*`&4y!*`!*s!+o!*s!*y&4y!*y!*}!+o!*}!+O&4y!+O!+P&4y!+P!+R!+o!+R!+i&4y!+i!+j!+o!+j!+q&4y!+q!+r!+o!+r!+s&4y!+s!+t&4y!+t!+u!+o!+u!+v&4y!+v!+w&4y!+w!+x!+o!+x!+y&4y!+y!+z&4y!+z!,k!+o!,k!,o&4y!,o!,p!+o!,p!,q&4y!,q!-U!+o!-U!-X&4y!-X!-i!+o!-i!-r&4y!-r!-s!+o!-s!-v&4y!-v!-w!+o!-w!._&4y!._!.`!+o!.`!.g&4y!.g!.h!+o!.h!.i&4y!.i!.j&4y!.j!.k!+o!.k!.p&4y!.p!.s!+o!.s!.t&4y!.t!/W!+o!/W!/X&4y!/X!/h!+o!/h!/i&4y!/i!/j&4y!/j!0_!+o!0_!0g&4y!0g!0i!+o!0i!0j&4y!0j!0k&4y!0k!0m!+o!0m!1T&4y!1T!1U!+o!1U!1]&4y!1]!1^!+o!1^!1_&4y!1_!1`&4y!1`!1a!+o!1a!1f&4y!1f!1i!+o!1i!1j&4y!1j!2Y!+o!2Y!2Z&4y!2Z!2[&4y!2[!2]!+o!2]!2`&4y!2`!2o!+o!2o!2p&4y!2p!3R!+o!3R!3S&4y!3S!3T!+o!3T!3Z&4y!3Z!3^!+o!3^!3a&4y!3a!3b!+o!3b!3f&4y!3f!3i!+o!3i!3j&4y!3j!3k&4y!3k!3l!+o!3l!3m&4y!3m!3n!+o!3n!3o&4y!3o!3p&4y!3p!3s!+o!3s!3t&4y!3t!3u&4y!3u!3x!+o!3x!3{&4y!3{!4O!+o!4O!4[&4y!4[!4r!+o!4r!4s&4y!4s!5y!+o!5y!6R&4y!6R!6S!+o!6S!6V&4y!6V!6W!+o!6W!6o&4y!6o!6p!+o!6p!6z&4y!6z!6{!+o!6{!7Q&4y!7Q!7T!+o!7T!7U&4y!7U!7p!+o!7p!7q&4y!7q!7r&4y!7r!7x!+o!7x!7y&4y!7y!7z&4y!7z!8o!+o!8o!8w&4y!8w!8x!+o!8x!8{&4y!8{!8|!+o!8|!9e&4y!9e!9f!+o!9f!9p&4y!9p!9q!+o!9q!9v&4y!9v!9y!+o!9y!9z&4y!9z!:l!+o!:l!:m&4y!:m!:n!+o!:n!:o&4y!:o!:p&4y!:p!;P!+o!;P!;Q&4y!;Q!;R&4y!;R!;e!+o!;e!;m&4y!;m!;n!+o!;n!;q&4y!;q!;r!+o!;r!<m&4y!<m!<o!+o!<o!<p&4y!<p!=Q!+o!=Q!=R&4y!=R!=d!+o!=d!=e&4y!=e!=f&4y!=f!>O!+o!>O!>U&4y!>U!>Z!+o!>Z!>m&4y!>m!>p!+o!>p!?Y&4y!?Y!?Z!+o!?Z!?d&4y!?d!?e!+o!?e!?f&4y!?f!?h!+o!?h!?o&4y!?o!@{!+o!@{!A}&4y!A}!BO!+o!BO!BP&4y!BP!BQ&4y!BQ!B^!+o!B^!Be&4y!Be!Cq!+o!Cq!Cr&4y!Cr!Cs&4y!Cs!Ct!+o!Ct!Cu&4y!Cu!Cw!+o!Cw!Cx&4y!Cx!Cy&4y!Cy!Cz!+o!Cz!C{&4y!C{!C}!+o!C}!DO&4y!DO!DU!+o!DU!DY&4y!DY!DZ!+o!DZ!Db&4y!Db!Dc!+o!Dc!Df&4y!Df!Dg!+o!Dg!Dh&4y!Dh!Di!+o!Di!Dj&4y!Dj!Dl!+o!Dl!Dm&4y!Dm!Dn&4y!Dn!Do!+o!Do!Ds&4y!Ds!Dt!+o!Dt!Du&4y!Du!Dv&4y!Dv!EP!+o!EP!EQ&4y!EQ!ES!+o!ES!EX&4y!EX!EY!+o!EY!EZ&4y!EZ!Ep!+o!Ep!Et&4y!Et!Ff!+o!Ff!Fg&4y!Fg!Gx!+o!Gx!HQ&4y!HQ!HR!+o!HR!Hw&4y!Hw!Id!+o!Id!Ii&4y!Ii!LQ!+o!LQ!L}&4y!L}!Mc!+o!Mc!Md&4y!Md!Mt!+o!Mt!Mz&4y!Mz!NO!+o!NO!NS&4y!NS!NV!+o!NV!NW&4y!NW!NZ!+o!NZ!N[&4y!N[!N]&4y!N]!Nd!+o!Nd!Ng&4y!Ng!Nk!+o!Nk!Nx&4y!Nx# U!+o# U# V&4y# V# h!+o# h#!`&4y#!`#!a!+o#!a#!b&4y#!b#!g!+o#!g#!h&4y#!h#!j!+o#!j##g&4y##g##h!+o##h#*s&4y#*s#*t!+o#*t#*x&4y#*x#*z!+o#*z#+R&4y#+R#+S!+o#+S#+T&4y#+T#+U!+o#+U#+Y&4y#+Y#+[!+o#+[#,V&4y#,V#,W!+o#,W#,[&4y#,[#,^!+o#,^#-P&4y#-P#-Q!+o#-Q#-U&4y#-U#-W!+o#-W#-_&4y#-_#-`!+o#-`#-a&4y#-a#-b!+o#-b#-f&4y#-f#-h!+o#-h#-w&4y#-w#-x!+o#-x#/T&4y#/T#/U!+o#/U#/Y&4y#/Y#/[!+o#/[#0q&4y#0q#1h!+o#1h#1x&4y#1x#2Y!+o#2Y#4R&4y#4R#4_!+o#4_#Au&4y#Au#Aw!+o#Aw#BY&4y#BY#BZ!+o#BZ#Bu&4y#Bu#Bz!+o#Bz#Di&4y#Di#EO!+o#EO#E]&4y#E]#E^!+o#E^#Eb&4y#Eb#Ep!+o#Ep#FS&4y#FS#Fb!+o#Fb#Ft&4y#Ft#GS!+o#GS#Ga&4y#Ga#Gb!+o#Gb#Ge&4y#Ge#Gt!+o#Gt#Hz&4y#Hz#Io!+o#Io#Ip&4y#Ip#It!+o#It#Iu&4y#Iu#K[!+o#K[#MW&4y#MW#M`!+o#M`#NZ&4y#NZ#N[!+o#N[#N]&4y#N]#Nb!+o#Nb$ z&4y$ z$!U!+o$!U$!s&4y$!s$#x!+o$#x$$h&4y$$h$$j!+o$$j$$o&4y$$o$$z!+o$$z$%x&4y$%x$&_!+o$&_$&f&4y$&f$'p!+o$'p$(X&4y$(X$(b!+o$(b$)i&4y$)i$+_!+o$+_$+`&4y$+`$-a!+o$-a$.b&4y$.b$.s!+o$.s$.z&4y$.z$0T!+o$0T$0s&4y$0s$1Q!+o$1Q$1R&4y$1R$1S&4y$1S$1^!+o$1^$2[&4y$2[$2v!+o$2v$3l&4y$3l$4g!+o$4g$4j&4y$4j$4t!+o$4t$5j&4y$5j$7y!+o$7y$7}&4y$7}$8O!+o$8O$8S&4y$8S$8V!+o$8V$8W&4y$8W$8X&4y$8X$8b!+o$8b$<j&4y$<j$=|!+o$=|$DO&4y$DO$DQ!+o$DQ$DW&4y$DW$DY!+o$DY$EQ&4y$EQ$ES!+o$ES$EY&4y$EY$E[!+o$E[$Ed&4y$Ed$Ee!+o$Ee$Ef&4y$Ef$Eg!+o$Eg$Eh&4y$Eh$Ei!+o$Ei$Ej&4y$Ej$Ek!+o$Ek$F[&4y$F[$F^!+o$F^$Ge&4y$Ge$Gf!+o$Gf$Gm&4y$Gm$Gn!+o$Gn$Go&4y$Go$Gr!+o$Gr$Gu&4y$Gu$Gv!+o$Gv$G}&4y$G}$HQ!+o$HQ$HU&4y$HU$HW!+o$HW$H^&4y$H^$Hb!+o$Hb$Ho&4y$Ho$Ht!+o$Ht$Hw&4y$Hw$Hx!+o$Hx$IP&4y$IP$Ki!+o$Ki$Kj&4y$Kj$Kw!+o$Kw$Kx&4y$Kx$LY!+o$LY$Lg&4y$Lg$Np!+o$Np$Nq&4y$Nq$Nu!+o$Nu$Nv&4y$Nv$Nx!+o$Nx% S&4y% S% T!+o% T% U&4y% U% X!+o% X% ^&4y% ^% d!+o% d% e&4y% e% f!+o% f% g&4y% g% h!+o% h% i&4y% i% j!+o% j% n&4y% n% o!+o% o% z&4y% z% |!+o% |%!Q&4y%!Q%!V!+o%!V%![&4y%![%!`!+o%!`%!a&4y%!a%#g!+o%#g%#h&4y%#h%#i&4y%#i&/x!+o&/x&0y&4y&0y&0z!+o&0z&1{&4y&1{&1|!+o&1|&4w&4y&4w&4}!+o&4}&5R&4y&5R&5U!+o&5U&5V&4y&5V&5W&4y&5W&5d!+o&5d&6[&4y&6[&6]!+o&6]&6^&4y&6^&6c!+o&6c&6d&4y&6d&6f!+o&6f&7p&4y&7p&7w!+o&7w&7x&4y&7x&8Y!+o&8Y&8q&4y&8q&8z!+o&8z&9R&4y&9R&9S!+o&9S&9Z&4y&9Z&9[!+o&9[&9c&4y&9c&9d!+o&9d&9k&4y&9k&9l!+o&9l&9s&4y&9s&9t!+o&9t&9{&4y&9{&9|!+o&9|&:T&4y&:T&:U!+o&:U&:]&4y&:]&<P!+o&<P&<Q&4y&<Q&FZ!+o&FZ&F[&4y&F[&F]&4y&F]&GX!+o&GX&G^&4y&G^&Gc!+o&Gc&Gd&4y&Gd&Ge&4y&Ge&Gi!+o&Gi&Ic&4y&Ic&Ii!+o&Ii&Il&4y&Il&Im!+o&Im&Kk&4y&Kk&Kl!+o&Kl&Kp&4y&Kp&Ku!+o&Ku&Lp&4y&Lp&Ls!+o&Ls&Nu&4y&Nu' W!+o' W' s&4y' s'!z!+o'!z'#[&4y'#['.b!+o'.b*3f&4y*3f*5S!+o*5S40_&4y40_41d!+o41d4Js&4y4Js4LY!+o4LY4MY&4y4MY4M[!+o4M[5%T&4y5%T5%W!+o5%W5%h&4y5%h5%r!+o5%r5%s&4y5%s5%t&4y5%t5&Y!+o5&Y5'Z&4y5'Z5'k!+o5'k5(U&4y5(U5(^!+o5(^5)v&4y5)v5*y!+o5*y5+S&4y5+S5+U!+o5+U5-a&4y5-a5-c!+o5-c5-g&4y5-g5-h!+o5-h5-l&4y5-l5-x!+o5-x5.T&4y5.T5/t!+o5/t50O&4y50O50P!+o50P50S&4y50S50T!+o50T50X&4y50X50Y!+o50Y50q&4y50q51`!+o51`52f&4y52f52t!+o52t53x&4y53x55Y!+o55Y55`&4y55`55c!+o55c55d&4y55d55r!+o55r56`&4y56`56j!+o56j57R&4y57R57l!+o57l58Z&4y58Z58b!+o58b59c&4y59c5:P!+o5:P5:Q&4y5:Q5;S!+o5;S5;}&4y5;}5<f!+o5<f5<i&4y5<i5<j!+o5<j5<r&4y5<r5=W!+o5=W5=o&4y5=o5=r!+o5=r5=s&4y5=s5=x!+o5=x5>z&4y5>z5>{!+o5>{5>|&4y5>|5?P!+o5?P5?Q&4y5?Q5?R&4y5?R5?T!+o5?T5?Y&4y5?Y5?[!+o5?[5?]&4y5?]5?^!+o5?^5?_&4y5?_5?w!+o5?w5?z&4y5?z5?|!+o5?|5@X&4y5@X5@`!+o5@`5@c&4y5@c5@o!+o5@o5@u&4y5@u5@w!+o5@w5@}&4y5@}5AP!+o5AP5AV&4y5AV5A`!+o5A`5Ag&4y5Ag5Ah!+o5Ah5Ao&4y5Ao5Dv!+o5Dv5Ek&4y5Ek5FY!+o5FY;%S&4y;%S;%`!+o;%`;%w&4y;%w;%{!+o;%{;'O&4y;'O;'S!+o;'S;=`!,Q<%l?&r!+o?&r?.p&4y?.p?.r!+o?.r?1Q&4y?1Q?1x!+o?1x?2P&4y?2P?2]!+o?2]?2b&4y?2b?2g!+o?2g?2h&4y?2h?2i!+o?2i?2s&4y?2s?2t!+o?2t?3R&4y?3R?3S!+o?3S?3X&4y?3X?3Y!+o?3Y?3Z&4y?3Z?3[!+o?3[?3]&4y?3]?3^&4y?3^?3_!+o?3_?3`&4y?3`?3a&4y?3a?3b!+o?3b?5r&4y?5r?6e!+o?6e?>`&4y?>`?>r!+o?>r?@U&4y?@U?@W!+o?@W?A`&4y?A`?BY!+o?BY?Bf&4y?Bf?EO!+o?EO?ET&4y?ET?EU!+o?EU?HR&4y?HR?Hw!+o?Hw?Ic&4y?Ic?Ii!+o?Ii?JT&4y?JT?J`!+o?J`?L]&4y?L]?L`!+o?L`?Lf&4y?Lf?Lh!+o?Lh?Ln&4y?Ln?Lp!+o?Lp?Lv&4y?Lv?Lx!+o?Lx?L{&4y?L{O!+o]';r2g!OW|SmPOq!,^qr';irs$@]st';itu';iuv';ivw';iwx';ixz!,^z{';i{|';i|!O!,^!O!P';i!P!Q';i!Q![';i![!a!,^!a!b';i!b!c!,^!c!}';i!}#O!,^#O#P';i#P#R!,^#R#S';i#S#T(BZ#T#o';i#o$p!,^$p$q';i$q${!,^${$|';i$|%Q!,^%Q%R';i%R%W!,^%W%o';i%o%p!,^%p&a';i&a&b!,^&b0`';i0`0d!,^0d0p';i0p1O!,^1O1T';i1T1[!,^1[1]';i1]1^!,^1^1_';i1_4U!,^4U4Z';i4Z4[!,^4[4]';i4]4^';i4^4`!,^4`4d';i4d4l!,^4l4m';i4m4n!,^4n4q';i4q4r!,^4r4s';i4s4t!,^4t5Y';i5Y5Z!,^5Z7Q';i7Q7R!,^7R:S';i:S:[!,^:[=p';i=p=y!,^=y>q';i>q>s!,^>s>t';i>t>{!,^>{?t';i?tA`!,^A`A{';iA{BQ!,^BQBT';iBTCS!,^CSDP';iDPDt!,^DtDu';iDuDv';iDvDw!,^DwGO';iGOGP!,^GPGQ';iGQGa!,^GaGb';iGbGc';iGcGj!,^GjGk';iGkGl';iGlGv!,^GvGy';iGyG{!,^G{G|';iG|H^!,^H^H_';iH_H`!,^H`IO';iIOIm!,^ImKj';iKjKu!,^KuKv';iKvL`!,^L`MR';iMRM[!,^M[M]';iM]M^';iM^Mb!,^MbMc';iMcMh!,^MhNO';iNONS!,^NSNT';iNTN^!,^N^N_';iN_Nb!,^NbNc';iNcNz!,^Nz! e';i! e!#O!,^!#O!#P';i!#P!#Q!,^!#Q!#]';i!#]!%W!,^!%W!&`';i!&`!&c!,^!&c!&d';i!&d!&v!,^!&v!&w';i!&w!'O!,^!'O!'Y';i!'Y!'i!,^!'i!'p';i!'p!'q!,^!'q!'x';i!'x!'}!,^!'}!(V';i!(V!(X!,^!(X!(Y';i!(Y!(Z';i!(Z!(]!,^!(]!(s';i!(s!(t!,^!(t!({';i!({!(|!,^!(|!(}';i!(}!)Q!,^!)Q!)U';i!)U!)X!,^!)X!)Y';i!)Y!)j!,^!)j!)k';i!)k!)x!,^!)x!)y';i!)y!)z';i!)z!){!,^!){!*O';i!*O!*^!,^!*^!*_';i!*_!*`';i!*`!*s!,^!*s!*y';i!*y!*}!,^!*}!+O';i!+O!+P';i!+P!+R!,^!+R!+i';i!+i!+j!,^!+j!+q';i!+q!+r!,^!+r!+s';i!+s!+t';i!+t!+u!,^!+u!+v';i!+v!+w';i!+w!+x!,^!+x!+y';i!+y!+z';i!+z!,k!,^!,k!,o';i!,o!,p!,^!,p!,q';i!,q!-U!,^!-U!-X';i!-X!-i!,^!-i!-r';i!-r!-s!,^!-s!-v';i!-v!-w!,^!-w!._';i!._!.`!,^!.`!.g';i!.g!.h!,^!.h!.i';i!.i!.j';i!.j!.k!,^!.k!.p';i!.p!.s!,^!.s!.t';i!.t!/W!,^!/W!/X';i!/X!/h!,^!/h!/i';i!/i!/j';i!/j!0_!,^!0_!0g';i!0g!0i!,^!0i!0j';i!0j!0k';i!0k!0m!,^!0m!1T';i!1T!1U!,^!1U!1]';i!1]!1^!,^!1^!1_';i!1_!1`';i!1`!1a!,^!1a!1f';i!1f!1i!,^!1i!1j';i!1j!2Y!,^!2Y!2Z';i!2Z!2[';i!2[!2]!,^!2]!2`';i!2`!2o!,^!2o!2p';i!2p!3R!,^!3R!3S';i!3S!3T!,^!3T!3Z';i!3Z!3^!,^!3^!3a';i!3a!3b!,^!3b!3f';i!3f!3i!,^!3i!3j';i!3j!3k';i!3k!3l!,^!3l!3m';i!3m!3n!,^!3n!3o';i!3o!3p';i!3p!3s!,^!3s!3t';i!3t!3u';i!3u!3x!,^!3x!3{';i!3{!4O!,^!4O!4[';i!4[!4r!,^!4r!4s';i!4s!5y!,^!5y!6R';i!6R!6S!,^!6S!6V';i!6V!6W!,^!6W!6o';i!6o!6p!,^!6p!6z';i!6z!6{!,^!6{!7Q';i!7Q!7T!,^!7T!7U';i!7U!7p!,^!7p!7q';i!7q!7r';i!7r!7x!,^!7x!7y';i!7y!7z';i!7z!8o!,^!8o!8w';i!8w!8x!,^!8x!8{';i!8{!8|!,^!8|!9e';i!9e!9f!,^!9f!9p';i!9p!9q!,^!9q!9v';i!9v!9y!,^!9y!9z';i!9z!:l!,^!:l!:m';i!:m!:n!,^!:n!:o';i!:o!:p';i!:p!;P!,^!;P!;Q';i!;Q!;R';i!;R!;e!,^!;e!;m';i!;m!;n!,^!;n!;q';i!;q!;r!,^!;r!<m';i!<m!<o!,^!<o!<p';i!<p!=Q!,^!=Q!=R';i!=R!=d!,^!=d!=e';i!=e!=f';i!=f!>O!,^!>O!>U';i!>U!>Z!,^!>Z!>m';i!>m!>p!,^!>p!?Y';i!?Y!?Z!,^!?Z!?d';i!?d!?e!,^!?e!?f';i!?f!?h!,^!?h!?o';i!?o!@{!,^!@{!A}';i!A}!BO!,^!BO!BP';i!BP!BQ';i!BQ!B^!,^!B^!Be';i!Be!Cq!,^!Cq!Cr';i!Cr!Cs';i!Cs!Ct!,^!Ct!Cu';i!Cu!Cw!,^!Cw!Cx';i!Cx!Cy';i!Cy!Cz!,^!Cz!C{';i!C{!C}!,^!C}!DO';i!DO!DU!,^!DU!DY';i!DY!DZ!,^!DZ!Db';i!Db!Dc!,^!Dc!Df';i!Df!Dg!,^!Dg!Dh';i!Dh!Di!,^!Di!Dj';i!Dj!Dl!,^!Dl!Dm';i!Dm!Dn';i!Dn!Do!,^!Do!Ds';i!Ds!Dt!,^!Dt!Du';i!Du!Dv';i!Dv!EP!,^!EP!EQ';i!EQ!ES!,^!ES!EX';i!EX!EY!,^!EY!EZ';i!EZ!Ep!,^!Ep!Et';i!Et!Ff!,^!Ff!Fg';i!Fg!Gx!,^!Gx!HQ';i!HQ!HR!,^!HR!Hw';i!Hw!Id!,^!Id!Ii';i!Ii!LQ!,^!LQ!L}';i!L}!Mc!,^!Mc!Md';i!Md!Mt!,^!Mt!Mz';i!Mz!NO!,^!NO!NS';i!NS!NV!,^!NV!NW';i!NW!NZ!,^!NZ!N[';i!N[!N]';i!N]!Nd!,^!Nd!Ng';i!Ng!Nk!,^!Nk!Nx';i!Nx# U!,^# U# V';i# V# h!,^# h#!`';i#!`#!a!,^#!a#!b';i#!b#!g!,^#!g#!h';i#!h#!j!,^#!j##g';i##g##h!,^##h#*s';i#*s#*t!,^#*t#*x';i#*x#*z!,^#*z#+R';i#+R#+S!,^#+S#+T';i#+T#+U!,^#+U#+Y';i#+Y#+[!,^#+[#,V';i#,V#,W!,^#,W#,[';i#,[#,^!,^#,^#-P';i#-P#-Q!,^#-Q#-U';i#-U#-W!,^#-W#-_';i#-_#-`!,^#-`#-a';i#-a#-b!,^#-b#-f';i#-f#-h!,^#-h#-w';i#-w#-x!,^#-x#/T';i#/T#/U!,^#/U#/Y';i#/Y#/[!,^#/[#0q';i#0q#1h!,^#1h#1x';i#1x#2Y!,^#2Y#4R';i#4R#4_!,^#4_#Au';i#Au#Aw!,^#Aw#BY';i#BY#BZ!,^#BZ#Bu';i#Bu#Bz!,^#Bz#Di';i#Di#EO!,^#EO#E]';i#E]#E^!,^#E^#Eb';i#Eb#Ep!,^#Ep#FS';i#FS#Fb!,^#Fb#Ft';i#Ft#GS!,^#GS#Ga';i#Ga#Gb!,^#Gb#Ge';i#Ge#Gt!,^#Gt#Hz';i#Hz#Io!,^#Io#Ip';i#Ip#It!,^#It#Iu';i#Iu#K[!,^#K[#MW';i#MW#M`!,^#M`#NZ';i#NZ#N[!,^#N[#N]';i#N]#Nb!,^#Nb$ z';i$ z$!U!,^$!U$!s';i$!s$#x!,^$#x$$h';i$$h$$j!,^$$j$$o';i$$o$$z!,^$$z$%x';i$%x$&_!,^$&_$&f';i$&f$'p!,^$'p$(X';i$(X$(b!,^$(b$)i';i$)i$+_!,^$+_$+`';i$+`$-a!,^$-a$.b';i$.b$.s!,^$.s$.z';i$.z$0T!,^$0T$0s';i$0s$1Q!,^$1Q$1R';i$1R$1S';i$1S$1^!,^$1^$2[';i$2[$2v!,^$2v$3l';i$3l$4g!,^$4g$4j';i$4j$4t!,^$4t$5j';i$5j$7y!,^$7y$7}';i$7}$8O!,^$8O$8S';i$8S$8V!,^$8V$8W';i$8W$8X';i$8X$8b!,^$8b$<j';i$<j$=|!,^$=|$DO';i$DO$DQ!,^$DQ$DW';i$DW$DY!,^$DY$EQ';i$EQ$ES!,^$ES$EY';i$EY$E[!,^$E[$Ed';i$Ed$Ee!,^$Ee$Ef';i$Ef$Eg!,^$Eg$Eh';i$Eh$Ei!,^$Ei$Ej';i$Ej$Ek!,^$Ek$F[';i$F[$F^!,^$F^$Ge';i$Ge$Gf!,^$Gf$Gm';i$Gm$Gn!,^$Gn$Go';i$Go$Gr!,^$Gr$Gu';i$Gu$Gv!,^$Gv$G}';i$G}$HQ!,^$HQ$HU';i$HU$HW!,^$HW$H^';i$H^$Hb!,^$Hb$Ho';i$Ho$Ht!,^$Ht$Hw';i$Hw$Hx!,^$Hx$IP';i$IP$Ki!,^$Ki$Kj';i$Kj$Kw!,^$Kw$Kx';i$Kx$LY!,^$LY$Lg';i$Lg$Np!,^$Np$Nq';i$Nq$Nu!,^$Nu$Nv';i$Nv$Nx!,^$Nx% S';i% S% T!,^% T% U';i% U% X!,^% X% ^';i% ^% d!,^% d% e';i% e% f!,^% f% g';i% g% h!,^% h% i';i% i% j!,^% j% n';i% n% o!,^% o% z';i% z% |!,^% |%!Q';i%!Q%!V!,^%!V%![';i%![%!`!,^%!`%!a';i%!a%#g!,^%#g%#h';i%#h%#i';i%#i&/x!,^&/x&0y';i&0y&0z!,^&0z&1{';i&1{&1|!,^&1|&4w';i&4w&4}!,^&4}&5R';i&5R&5U!,^&5U&5V';i&5V&5W';i&5W&5d!,^&5d&6[';i&6[&6]!,^&6]&6^';i&6^&6c!,^&6c&6d';i&6d&6f!,^&6f&7p';i&7p&7w!,^&7w&7x';i&7x&8Y!,^&8Y&8q';i&8q&8z!,^&8z&9R';i&9R&9S!,^&9S&9Z';i&9Z&9[!,^&9[&9c';i&9c&9d!,^&9d&9k';i&9k&9l!,^&9l&9s';i&9s&9t!,^&9t&9{';i&9{&9|!,^&9|&:T';i&:T&:U!,^&:U&:]';i&:]&<P!,^&<P&<Q';i&<Q&FZ!,^&FZ&F[';i&F[&F]';i&F]&GX!,^&GX&G^';i&G^&Gc!,^&Gc&Gd';i&Gd&Ge';i&Ge&Gi!,^&Gi&Ic';i&Ic&Ii!,^&Ii&Il';i&Il&Im!,^&Im&Kk';i&Kk&Kl!,^&Kl&Kp';i&Kp&Ku!,^&Ku&Lp';i&Lp&Ls!,^&Ls&Nu';i&Nu' W!,^' W' s';i' s'!z!,^'!z'#[';i'#['.b!,^'.b*3f';i*3f*5S!,^*5S40_';i40_41d!,^41d4Js';i4Js4LY!,^4LY4MY';i4MY4M[!,^4M[5%T';i5%T5%W!,^5%W5%h';i5%h5%r!,^5%r5%s';i5%s5%t';i5%t5&Y!,^5&Y5'Z';i5'Z5'k!,^5'k5(U';i5(U5(^!,^5(^5)v';i5)v5*y!,^5*y5+S';i5+S5+U!,^5+U5-a';i5-a5-c!,^5-c5-g';i5-g5-h!,^5-h5-l';i5-l5-x!,^5-x5.T';i5.T5/t!,^5/t50O';i50O50P!,^50P50S';i50S50T!,^50T50X';i50X50Y!,^50Y50q';i50q51`!,^51`52f';i52f52t!,^52t53x';i53x55Y!,^55Y55`';i55`55c!,^55c55d';i55d55r!,^55r56`';i56`56j!,^56j57R';i57R57l!,^57l58Z';i58Z58b!,^58b59c';i59c5:P!,^5:P5:Q';i5:Q5;S!,^5;S5;}';i5;}5<f!,^5<f5<i';i5<i5<j!,^5<j5<r';i5<r5=W!,^5=W5=o';i5=o5=r!,^5=r5=s';i5=s5=x!,^5=x5>z';i5>z5>{!,^5>{5>|';i5>|5?P!,^5?P5?Q';i5?Q5?R';i5?R5?T!,^5?T5?Y';i5?Y5?[!,^5?[5?]';i5?]5?^!,^5?^5?_';i5?_5?w!,^5?w5?z';i5?z5?|!,^5?|5@X';i5@X5@`!,^5@`5@c';i5@c5@o!,^5@o5@u';i5@u5@w!,^5@w5@}';i5@}5AP!,^5AP5AV';i5AV5A`!,^5A`5Ag';i5Ag5Ah!,^5Ah5Ao';i5Ao5Dv!,^5Dv5Ek';i5Ek5FY!,^5FY;%S';i;%S;%`!,^;%`;%w';i;%w;%{!,^;%{;'O';i;'O;'S!,^;'S;=`!-c<%l?&r!,^?&r?.p';i?.p?.r!,^?.r?1Q';i?1Q?1x!,^?1x?2P';i?2P?2]!,^?2]?2b';i?2b?2g!,^?2g?2h';i?2h?2i!,^?2i?2s';i?2s?2t!,^?2t?3R';i?3R?3S!,^?3S?3X';i?3X?3Y!,^?3Y?3Z';i?3Z?3[!,^?3[?3]';i?3]?3^';i?3^?3_!,^?3_?3`';i?3`?3a';i?3a?3b!,^?3b?5r';i?5r?6e!,^?6e?>`';i?>`?>r!,^?>r?@U';i?@U?@W!,^?@W?A`';i?A`?BY!,^?BY?Bf';i?Bf?EO!,^?EO?ET';i?ET?EU!,^?EU?HR';i?HR?Hw!,^?Hw?Ic';i?Ic?Ii!,^?Ii?JT';i?JT?J`!,^?J`?L]';i?L]?L`!,^?L`?Lf';i?Lf?Lh!,^?Lh?Ln';i?Ln?Lp!,^?Lp?Lv';i?Lv?Lx!,^?Lx?L{';i?L{O!,^T(Bb2g|SmPOq!,zqr(BZrs%F{st(BZtu(BZuv(BZvw(BZwx(BZxz!,zz{(BZ{|(BZ|!O!,z!O!P(BZ!P!Q(BZ!Q![(BZ![!a!,z!a!b(BZ!b!c!,z!c!}(BZ!}#O!,z#O#P(BZ#P#R!,z#R#S(BZ#S#T(BZ#T#o(BZ#o$p!,z$p$q(BZ$q${!,z${$|(BZ$|%Q!,z%Q%R(BZ%R%W!,z%W%o(BZ%o%p!,z%p&a(BZ&a&b!,z&b0`(BZ0`0d!,z0d0p(BZ0p1O!,z1O1T(BZ1T1[!,z1[1](BZ1]1^!,z1^1_(BZ1_4U!,z4U4Z(BZ4Z4[!,z4[4](BZ4]4^(BZ4^4`!,z4`4d(BZ4d4l!,z4l4m(BZ4m4n!,z4n4q(BZ4q4r!,z4r4s(BZ4s4t!,z4t5Y(BZ5Y5Z!,z5Z7Q(BZ7Q7R!,z7R:S(BZ:S:[!,z:[=p(BZ=p=y!,z=y>q(BZ>q>s!,z>s>t(BZ>t>{!,z>{?t(BZ?tA`!,zA`A{(BZA{BQ!,zBQBT(BZBTCS!,zCSDP(BZDPDt!,zDtDu(BZDuDv(BZDvDw!,zDwGO(BZGOGP!,zGPGQ(BZGQGa!,zGaGb(BZGbGc(BZGcGj!,zGjGk(BZGkGl(BZGlGv!,zGvGy(BZGyG{!,zG{G|(BZG|H^!,zH^H_(BZH_H`!,zH`IO(BZIOIm!,zImKj(BZKjKu!,zKuKv(BZKvL`!,zL`MR(BZMRM[!,zM[M](BZM]M^(BZM^Mb!,zMbMc(BZMcMh!,zMhNO(BZNONS!,zNSNT(BZNTN^!,zN^N_(BZN_Nb!,zNbNc(BZNcNz!,zNz! e(BZ! e!#O!,z!#O!#P(BZ!#P!#Q!,z!#Q!#](BZ!#]!%W!,z!%W!&`(BZ!&`!&c!,z!&c!&d(BZ!&d!&v!,z!&v!&w(BZ!&w!'O!,z!'O!'Y(BZ!'Y!'i!,z!'i!'p(BZ!'p!'q!,z!'q!'x(BZ!'x!'}!,z!'}!(V(BZ!(V!(X!,z!(X!(Y(BZ!(Y!(Z(BZ!(Z!(]!,z!(]!(s(BZ!(s!(t!,z!(t!({(BZ!({!(|!,z!(|!(}(BZ!(}!)Q!,z!)Q!)U(BZ!)U!)X!,z!)X!)Y(BZ!)Y!)j!,z!)j!)k(BZ!)k!)x!,z!)x!)y(BZ!)y!)z(BZ!)z!){!,z!){!*O(BZ!*O!*^!,z!*^!*_(BZ!*_!*`(BZ!*`!*s!,z!*s!*y(BZ!*y!*}!,z!*}!+O(BZ!+O!+P(BZ!+P!+R!,z!+R!+i(BZ!+i!+j!,z!+j!+q(BZ!+q!+r!,z!+r!+s(BZ!+s!+t(BZ!+t!+u!,z!+u!+v(BZ!+v!+w(BZ!+w!+x!,z!+x!+y(BZ!+y!+z(BZ!+z!,k!,z!,k!,o(BZ!,o!,p!,z!,p!,q(BZ!,q!-U!,z!-U!-X(BZ!-X!-i!,z!-i!-r(BZ!-r!-s!,z!-s!-v(BZ!-v!-w!,z!-w!._(BZ!._!.`!,z!.`!.g(BZ!.g!.h!,z!.h!.i(BZ!.i!.j(BZ!.j!.k!,z!.k!.p(BZ!.p!.s!,z!.s!.t(BZ!.t!/W!,z!/W!/X(BZ!/X!/h!,z!/h!/i(BZ!/i!/j(BZ!/j!0_!,z!0_!0g(BZ!0g!0i!,z!0i!0j(BZ!0j!0k(BZ!0k!0m!,z!0m!1T(BZ!1T!1U!,z!1U!1](BZ!1]!1^!,z!1^!1_(BZ!1_!1`(BZ!1`!1a!,z!1a!1f(BZ!1f!1i!,z!1i!1j(BZ!1j!2Y!,z!2Y!2Z(BZ!2Z!2[(BZ!2[!2]!,z!2]!2`(BZ!2`!2o!,z!2o!2p(BZ!2p!3R!,z!3R!3S(BZ!3S!3T!,z!3T!3Z(BZ!3Z!3^!,z!3^!3a(BZ!3a!3b!,z!3b!3f(BZ!3f!3i!,z!3i!3j(BZ!3j!3k(BZ!3k!3l!,z!3l!3m(BZ!3m!3n!,z!3n!3o(BZ!3o!3p(BZ!3p!3s!,z!3s!3t(BZ!3t!3u(BZ!3u!3x!,z!3x!3{(BZ!3{!4O!,z!4O!4[(BZ!4[!4r!,z!4r!4s(BZ!4s!5y!,z!5y!6R(BZ!6R!6S!,z!6S!6V(BZ!6V!6W!,z!6W!6o(BZ!6o!6p!,z!6p!6z(BZ!6z!6{!,z!6{!7Q(BZ!7Q!7T!,z!7T!7U(BZ!7U!7p!,z!7p!7q(BZ!7q!7r(BZ!7r!7x!,z!7x!7y(BZ!7y!7z(BZ!7z!8o!,z!8o!8w(BZ!8w!8x!,z!8x!8{(BZ!8{!8|!,z!8|!9e(BZ!9e!9f!,z!9f!9p(BZ!9p!9q!,z!9q!9v(BZ!9v!9y!,z!9y!9z(BZ!9z!:l!,z!:l!:m(BZ!:m!:n!,z!:n!:o(BZ!:o!:p(BZ!:p!;P!,z!;P!;Q(BZ!;Q!;R(BZ!;R!;e!,z!;e!;m(BZ!;m!;n!,z!;n!;q(BZ!;q!;r!,z!;r!<m(BZ!<m!<o!,z!<o!<p(BZ!<p!=Q!,z!=Q!=R(BZ!=R!=d!,z!=d!=e(BZ!=e!=f(BZ!=f!>O!,z!>O!>U(BZ!>U!>Z!,z!>Z!>m(BZ!>m!>p!,z!>p!?Y(BZ!?Y!?Z!,z!?Z!?d(BZ!?d!?e!,z!?e!?f(BZ!?f!?h!,z!?h!?o(BZ!?o!@{!,z!@{!A}(BZ!A}!BO!,z!BO!BP(BZ!BP!BQ(BZ!BQ!B^!,z!B^!Be(BZ!Be!Cq!,z!Cq!Cr(BZ!Cr!Cs(BZ!Cs!Ct!,z!Ct!Cu(BZ!Cu!Cw!,z!Cw!Cx(BZ!Cx!Cy(BZ!Cy!Cz!,z!Cz!C{(BZ!C{!C}!,z!C}!DO(BZ!DO!DU!,z!DU!DY(BZ!DY!DZ!,z!DZ!Db(BZ!Db!Dc!,z!Dc!Df(BZ!Df!Dg!,z!Dg!Dh(BZ!Dh!Di!,z!Di!Dj(BZ!Dj!Dl!,z!Dl!Dm(BZ!Dm!Dn(BZ!Dn!Do!,z!Do!Ds(BZ!Ds!Dt!,z!Dt!Du(BZ!Du!Dv(BZ!Dv!EP!,z!EP!EQ(BZ!EQ!ES!,z!ES!EX(BZ!EX!EY!,z!EY!EZ(BZ!EZ!Ep!,z!Ep!Et(BZ!Et!Ff!,z!Ff!Fg(BZ!Fg!Gx!,z!Gx!HQ(BZ!HQ!HR!,z!HR!Hw(BZ!Hw!Id!,z!Id!Ii(BZ!Ii!LQ!,z!LQ!L}(BZ!L}!Mc!,z!Mc!Md(BZ!Md!Mt!,z!Mt!Mz(BZ!Mz!NO!,z!NO!NS(BZ!NS!NV!,z!NV!NW(BZ!NW!NZ!,z!NZ!N[(BZ!N[!N](BZ!N]!Nd!,z!Nd!Ng(BZ!Ng!Nk!,z!Nk!Nx(BZ!Nx# U!,z# U# V(BZ# V# h!,z# h#!`(BZ#!`#!a!,z#!a#!b(BZ#!b#!g!,z#!g#!h(BZ#!h#!j!,z#!j##g(BZ##g##h!,z##h#*s(BZ#*s#*t!,z#*t#*x(BZ#*x#*z!,z#*z#+R(BZ#+R#+S!,z#+S#+T(BZ#+T#+U!,z#+U#+Y(BZ#+Y#+[!,z#+[#,V(BZ#,V#,W!,z#,W#,[(BZ#,[#,^!,z#,^#-P(BZ#-P#-Q!,z#-Q#-U(BZ#-U#-W!,z#-W#-_(BZ#-_#-`!,z#-`#-a(BZ#-a#-b!,z#-b#-f(BZ#-f#-h!,z#-h#-w(BZ#-w#-x!,z#-x#/T(BZ#/T#/U!,z#/U#/Y(BZ#/Y#/[!,z#/[#0q(BZ#0q#1h!,z#1h#1x(BZ#1x#2Y!,z#2Y#4R(BZ#4R#4_!,z#4_#Au(BZ#Au#Aw!,z#Aw#BY(BZ#BY#BZ!,z#BZ#Bu(BZ#Bu#Bz!,z#Bz#Di(BZ#Di#EO!,z#EO#E](BZ#E]#E^!,z#E^#Eb(BZ#Eb#Ep!,z#Ep#FS(BZ#FS#Fb!,z#Fb#Ft(BZ#Ft#GS!,z#GS#Ga(BZ#Ga#Gb!,z#Gb#Ge(BZ#Ge#Gt!,z#Gt#Hz(BZ#Hz#Io!,z#Io#Ip(BZ#Ip#It!,z#It#Iu(BZ#Iu#K[!,z#K[#MW(BZ#MW#M`!,z#M`#NZ(BZ#NZ#N[!,z#N[#N](BZ#N]#Nb!,z#Nb$ z(BZ$ z$!U!,z$!U$!s(BZ$!s$#x!,z$#x$$h(BZ$$h$$j!,z$$j$$o(BZ$$o$$z!,z$$z$%x(BZ$%x$&_!,z$&_$&f(BZ$&f$'p!,z$'p$(X(BZ$(X$(b!,z$(b$)i(BZ$)i$+_!,z$+_$+`(BZ$+`$-a!,z$-a$.b(BZ$.b$.s!,z$.s$.z(BZ$.z$0T!,z$0T$0s(BZ$0s$1Q!,z$1Q$1R(BZ$1R$1S(BZ$1S$1^!,z$1^$2[(BZ$2[$2v!,z$2v$3l(BZ$3l$4g!,z$4g$4j(BZ$4j$4t!,z$4t$5j(BZ$5j$7y!,z$7y$7}(BZ$7}$8O!,z$8O$8S(BZ$8S$8V!,z$8V$8W(BZ$8W$8X(BZ$8X$8b!,z$8b$<j(BZ$<j$=|!,z$=|$DO(BZ$DO$DQ!,z$DQ$DW(BZ$DW$DY!,z$DY$EQ(BZ$EQ$ES!,z$ES$EY(BZ$EY$E[!,z$E[$Ed(BZ$Ed$Ee!,z$Ee$Ef(BZ$Ef$Eg!,z$Eg$Eh(BZ$Eh$Ei!,z$Ei$Ej(BZ$Ej$Ek!,z$Ek$F[(BZ$F[$F^!,z$F^$Ge(BZ$Ge$Gf!,z$Gf$Gm(BZ$Gm$Gn!,z$Gn$Go(BZ$Go$Gr!,z$Gr$Gu(BZ$Gu$Gv!,z$Gv$G}(BZ$G}$HQ!,z$HQ$HU(BZ$HU$HW!,z$HW$H^(BZ$H^$Hb!,z$Hb$Ho(BZ$Ho$Ht!,z$Ht$Hw(BZ$Hw$Hx!,z$Hx$IP(BZ$IP$Ki!,z$Ki$Kj(BZ$Kj$Kw!,z$Kw$Kx(BZ$Kx$LY!,z$LY$Lg(BZ$Lg$Np!,z$Np$Nq(BZ$Nq$Nu!,z$Nu$Nv(BZ$Nv$Nx!,z$Nx% S(BZ% S% T!,z% T% U(BZ% U% X!,z% X% ^(BZ% ^% d!,z% d% e(BZ% e% f!,z% f% g(BZ% g% h!,z% h% i(BZ% i% j!,z% j% n(BZ% n% o!,z% o% z(BZ% z% |!,z% |%!Q(BZ%!Q%!V!,z%!V%![(BZ%![%!`!,z%!`%!a(BZ%!a%#g!,z%#g%#h(BZ%#h%#i(BZ%#i&/x!,z&/x&0y(BZ&0y&0z!,z&0z&1{(BZ&1{&1|!,z&1|&4w(BZ&4w&4}!,z&4}&5R(BZ&5R&5U!,z&5U&5V(BZ&5V&5W(BZ&5W&5d!,z&5d&6[(BZ&6[&6]!,z&6]&6^(BZ&6^&6c!,z&6c&6d(BZ&6d&6f!,z&6f&7p(BZ&7p&7w!,z&7w&7x(BZ&7x&8Y!,z&8Y&8q(BZ&8q&8z!,z&8z&9R(BZ&9R&9S!,z&9S&9Z(BZ&9Z&9[!,z&9[&9c(BZ&9c&9d!,z&9d&9k(BZ&9k&9l!,z&9l&9s(BZ&9s&9t!,z&9t&9{(BZ&9{&9|!,z&9|&:T(BZ&:T&:U!,z&:U&:](BZ&:]&<P!,z&<P&<Q(BZ&<Q&FZ!,z&FZ&F[(BZ&F[&F](BZ&F]&GX!,z&GX&G^(BZ&G^&Gc!,z&Gc&Gd(BZ&Gd&Ge(BZ&Ge&Gi!,z&Gi&Ic(BZ&Ic&Ii!,z&Ii&Il(BZ&Il&Im!,z&Im&Kk(BZ&Kk&Kl!,z&Kl&Kp(BZ&Kp&Ku!,z&Ku&Lp(BZ&Lp&Ls!,z&Ls&Nu(BZ&Nu' W!,z' W' s(BZ' s'!z!,z'!z'#[(BZ'#['.b!,z'.b*3f(BZ*3f*5S!,z*5S40_(BZ40_41d!,z41d4Js(BZ4Js4LY!,z4LY4MY(BZ4MY4M[!,z4M[5%T(BZ5%T5%W!,z5%W5%h(BZ5%h5%r!,z5%r5%s(BZ5%s5%t(BZ5%t5&Y!,z5&Y5'Z(BZ5'Z5'k!,z5'k5(U(BZ5(U5(^!,z5(^5)v(BZ5)v5*y!,z5*y5+S(BZ5+S5+U!,z5+U5-a(BZ5-a5-c!,z5-c5-g(BZ5-g5-h!,z5-h5-l(BZ5-l5-x!,z5-x5.T(BZ5.T5/t!,z5/t50O(BZ50O50P!,z50P50S(BZ50S50T!,z50T50X(BZ50X50Y!,z50Y50q(BZ50q51`!,z51`52f(BZ52f52t!,z52t53x(BZ53x55Y!,z55Y55`(BZ55`55c!,z55c55d(BZ55d55r!,z55r56`(BZ56`56j!,z56j57R(BZ57R57l!,z57l58Z(BZ58Z58b!,z58b59c(BZ59c5:P!,z5:P5:Q(BZ5:Q5;S!,z5;S5;}(BZ5;}5<f!,z5<f5<i(BZ5<i5<j!,z5<j5<r(BZ5<r5=W!,z5=W5=o(BZ5=o5=r!,z5=r5=s(BZ5=s5=x!,z5=x5>z(BZ5>z5>{!,z5>{5>|(BZ5>|5?P!,z5?P5?Q(BZ5?Q5?R(BZ5?R5?T!,z5?T5?Y(BZ5?Y5?[!,z5?[5?](BZ5?]5?^!,z5?^5?_(BZ5?_5?w!,z5?w5?z(BZ5?z5?|!,z5?|5@X(BZ5@X5@`!,z5@`5@c(BZ5@c5@o!,z5@o5@u(BZ5@u5@w!,z5@w5@}(BZ5@}5AP!,z5AP5AV(BZ5AV5A`!,z5A`5Ag(BZ5Ag5Ah!,z5Ah5Ao(BZ5Ao5Dv!,z5Dv5Ek(BZ5Ek5FY!,z5FY;%S(BZ;%S;%`!,z;%`;%w(BZ;%w;%{!,z;%{;'O(BZ;'O;'S!,z;'S;=`!-]<%l?&r!,z?&r?.p(BZ?.p?.r!,z?.r?1Q(BZ?1Q?1x!,z?1x?2P(BZ?2P?2]!,z?2]?2b(BZ?2b?2g!,z?2g?2h(BZ?2h?2i!,z?2i?2s(BZ?2s?2t!,z?2t?3R(BZ?3R?3S!,z?3S?3X(BZ?3X?3Y!,z?3Y?3Z(BZ?3Z?3[!,z?3[?3](BZ?3]?3^(BZ?3^?3_!,z?3_?3`(BZ?3`?3a(BZ?3a?3b!,z?3b?5r(BZ?5r?6e!,z?6e?>`(BZ?>`?>r!,z?>r?@U(BZ?@U?@W!,z?@W?A`(BZ?A`?BY!,z?BY?Bf(BZ?Bf?EO!,z?EO?ET(BZ?ET?EU!,z?EU?HR(BZ?HR?Hw!,z?Hw?Ic(BZ?Ic?Ii!,z?Ii?JT(BZ?JT?J`!,z?J`?L](BZ?L]?L`!,z?L`?Lf(BZ?Lf?Lh!,z?Lh?Ln(BZ?Ln?Lp!,z?Lp?Lv(BZ?Lv?Lx!,z?Lx?L{(BZ?L{O!,zV)IS2g|SzQmPOq!-iqr)Hyrs&4yst)Hytu)Hyuv)Hyvw)Hywx(BZxz!-iz{)Hy{|)Hy|!O!-i!O!P)Hy!P!Q)Hy!Q![)Hy![!a!-i!a!b)Hy!b!c!-i!c!})Hy!}#O!-i#O#P)Hy#P#R!-i#R#S)Hy#S#T)Hy#T#o)Hy#o$p!-i$p$q)Hy$q${!-i${$|)Hy$|%Q!-i%Q%R)Hy%R%W!-i%W%o)Hy%o%p!-i%p&a)Hy&a&b!-i&b0`)Hy0`0d!-i0d0p)Hy0p1O!-i1O1T)Hy1T1[!-i1[1])Hy1]1^!-i1^1_)Hy1_4U!-i4U4Z)Hy4Z4[!-i4[4])Hy4]4^)Hy4^4`!-i4`4d)Hy4d4l!-i4l4m)Hy4m4n!-i4n4q)Hy4q4r!-i4r4s)Hy4s4t!-i4t5Y)Hy5Y5Z!-i5Z7Q)Hy7Q7R!-i7R:S)Hy:S:[!-i:[=p)Hy=p=y!-i=y>q)Hy>q>s!-i>s>t)Hy>t>{!-i>{?t)Hy?tA`!-iA`A{)HyA{BQ!-iBQBT)HyBTCS!-iCSDP)HyDPDt!-iDtDu)HyDuDv)HyDvDw!-iDwGO)HyGOGP!-iGPGQ)HyGQGa!-iGaGb)HyGbGc)HyGcGj!-iGjGk)HyGkGl)HyGlGv!-iGvGy)HyGyG{!-iG{G|)HyG|H^!-iH^H_)HyH_H`!-iH`IO)HyIOIm!-iImKj)HyKjKu!-iKuKv)HyKvL`!-iL`MR)HyMRM[!-iM[M])HyM]M^)HyM^Mb!-iMbMc)HyMcMh!-iMhNO)HyNONS!-iNSNT)HyNTN^!-iN^N_)HyN_Nb!-iNbNc)HyNcNz!-iNz! e)Hy! e!#O!-i!#O!#P)Hy!#P!#Q!-i!#Q!#])Hy!#]!%W!-i!%W!&`)Hy!&`!&c!-i!&c!&d)Hy!&d!&v!-i!&v!&w)Hy!&w!'O!-i!'O!'Y)Hy!'Y!'i!-i!'i!'p)Hy!'p!'q!-i!'q!'x)Hy!'x!'}!-i!'}!(V)Hy!(V!(X!-i!(X!(Y)Hy!(Y!(Z)Hy!(Z!(]!-i!(]!(s)Hy!(s!(t!-i!(t!({)Hy!({!(|!-i!(|!(})Hy!(}!)Q!-i!)Q!)U)Hy!)U!)X!-i!)X!)Y)Hy!)Y!)j!-i!)j!)k)Hy!)k!)x!-i!)x!)y)Hy!)y!)z)Hy!)z!){!-i!){!*O)Hy!*O!*^!-i!*^!*_)Hy!*_!*`)Hy!*`!*s!-i!*s!*y)Hy!*y!*}!-i!*}!+O)Hy!+O!+P)Hy!+P!+R!-i!+R!+i)Hy!+i!+j!-i!+j!+q)Hy!+q!+r!-i!+r!+s)Hy!+s!+t)Hy!+t!+u!-i!+u!+v)Hy!+v!+w)Hy!+w!+x!-i!+x!+y)Hy!+y!+z)Hy!+z!,k!-i!,k!,o)Hy!,o!,p!-i!,p!,q)Hy!,q!-U!-i!-U!-X)Hy!-X!-i!-i!-i!-r)Hy!-r!-s!-i!-s!-v)Hy!-v!-w!-i!-w!._)Hy!._!.`!-i!.`!.g)Hy!.g!.h!-i!.h!.i)Hy!.i!.j)Hy!.j!.k!-i!.k!.p)Hy!.p!.s!-i!.s!.t)Hy!.t!/W!-i!/W!/X)Hy!/X!/h!-i!/h!/i)Hy!/i!/j)Hy!/j!0_!-i!0_!0g)Hy!0g!0i!-i!0i!0j)Hy!0j!0k)Hy!0k!0m!-i!0m!1T)Hy!1T!1U!-i!1U!1])Hy!1]!1^!-i!1^!1_)Hy!1_!1`)Hy!1`!1a!-i!1a!1f)Hy!1f!1i!-i!1i!1j)Hy!1j!2Y!-i!2Y!2Z)Hy!2Z!2[)Hy!2[!2]!-i!2]!2`)Hy!2`!2o!-i!2o!2p)Hy!2p!3R!-i!3R!3S)Hy!3S!3T!-i!3T!3Z)Hy!3Z!3^!-i!3^!3a)Hy!3a!3b!-i!3b!3f)Hy!3f!3i!-i!3i!3j)Hy!3j!3k)Hy!3k!3l!-i!3l!3m)Hy!3m!3n!-i!3n!3o)Hy!3o!3p)Hy!3p!3s!-i!3s!3t)Hy!3t!3u)Hy!3u!3x!-i!3x!3{)Hy!3{!4O!-i!4O!4[)Hy!4[!4r!-i!4r!4s)Hy!4s!5y!-i!5y!6R)Hy!6R!6S!-i!6S!6V)Hy!6V!6W!-i!6W!6o)Hy!6o!6p!-i!6p!6z)Hy!6z!6{!-i!6{!7Q)Hy!7Q!7T!-i!7T!7U)Hy!7U!7p!-i!7p!7q)Hy!7q!7r)Hy!7r!7x!-i!7x!7y)Hy!7y!7z)Hy!7z!8o!-i!8o!8w)Hy!8w!8x!-i!8x!8{)Hy!8{!8|!-i!8|!9e)Hy!9e!9f!-i!9f!9p)Hy!9p!9q!-i!9q!9v)Hy!9v!9y!-i!9y!9z)Hy!9z!:l!-i!:l!:m)Hy!:m!:n!-i!:n!:o)Hy!:o!:p)Hy!:p!;P!-i!;P!;Q)Hy!;Q!;R)Hy!;R!;e!-i!;e!;m)Hy!;m!;n!-i!;n!;q)Hy!;q!;r!-i!;r!<m)Hy!<m!<o!-i!<o!<p)Hy!<p!=Q!-i!=Q!=R)Hy!=R!=d!-i!=d!=e)Hy!=e!=f)Hy!=f!>O!-i!>O!>U)Hy!>U!>Z!-i!>Z!>m)Hy!>m!>p!-i!>p!?Y)Hy!?Y!?Z!-i!?Z!?d)Hy!?d!?e!-i!?e!?f)Hy!?f!?h!-i!?h!?o)Hy!?o!@{!-i!@{!A})Hy!A}!BO!-i!BO!BP)Hy!BP!BQ)Hy!BQ!B^!-i!B^!Be)Hy!Be!Cq!-i!Cq!Cr)Hy!Cr!Cs)Hy!Cs!Ct!-i!Ct!Cu)Hy!Cu!Cw!-i!Cw!Cx)Hy!Cx!Cy)Hy!Cy!Cz!-i!Cz!C{)Hy!C{!C}!-i!C}!DO)Hy!DO!DU!-i!DU!DY)Hy!DY!DZ!-i!DZ!Db)Hy!Db!Dc!-i!Dc!Df)Hy!Df!Dg!-i!Dg!Dh)Hy!Dh!Di!-i!Di!Dj)Hy!Dj!Dl!-i!Dl!Dm)Hy!Dm!Dn)Hy!Dn!Do!-i!Do!Ds)Hy!Ds!Dt!-i!Dt!Du)Hy!Du!Dv)Hy!Dv!EP!-i!EP!EQ)Hy!EQ!ES!-i!ES!EX)Hy!EX!EY!-i!EY!EZ)Hy!EZ!Ep!-i!Ep!Et)Hy!Et!Ff!-i!Ff!Fg)Hy!Fg!Gx!-i!Gx!HQ)Hy!HQ!HR!-i!HR!Hw)Hy!Hw!Id!-i!Id!Ii)Hy!Ii!LQ!-i!LQ!L})Hy!L}!Mc!-i!Mc!Md)Hy!Md!Mt!-i!Mt!Mz)Hy!Mz!NO!-i!NO!NS)Hy!NS!NV!-i!NV!NW)Hy!NW!NZ!-i!NZ!N[)Hy!N[!N])Hy!N]!Nd!-i!Nd!Ng)Hy!Ng!Nk!-i!Nk!Nx)Hy!Nx# U!-i# U# V)Hy# V# h!-i# h#!`)Hy#!`#!a!-i#!a#!b)Hy#!b#!g!-i#!g#!h)Hy#!h#!j!-i#!j##g)Hy##g##h!-i##h#*s)Hy#*s#*t!-i#*t#*x)Hy#*x#*z!-i#*z#+R)Hy#+R#+S!-i#+S#+T)Hy#+T#+U!-i#+U#+Y)Hy#+Y#+[!-i#+[#,V)Hy#,V#,W!-i#,W#,[)Hy#,[#,^!-i#,^#-P)Hy#-P#-Q!-i#-Q#-U)Hy#-U#-W!-i#-W#-_)Hy#-_#-`!-i#-`#-a)Hy#-a#-b!-i#-b#-f)Hy#-f#-h!-i#-h#-w)Hy#-w#-x!-i#-x#/T)Hy#/T#/U!-i#/U#/Y)Hy#/Y#/[!-i#/[#0q)Hy#0q#1h!-i#1h#1x)Hy#1x#2Y!-i#2Y#4R)Hy#4R#4_!-i#4_#Au)Hy#Au#Aw!-i#Aw#BY)Hy#BY#BZ!-i#BZ#Bu)Hy#Bu#Bz!-i#Bz#Di)Hy#Di#EO!-i#EO#E])Hy#E]#E^!-i#E^#Eb)Hy#Eb#Ep!-i#Ep#FS)Hy#FS#Fb!-i#Fb#Ft)Hy#Ft#GS!-i#GS#Ga)Hy#Ga#Gb!-i#Gb#Ge)Hy#Ge#Gt!-i#Gt#Hz)Hy#Hz#Io!-i#Io#Ip)Hy#Ip#It!-i#It#Iu)Hy#Iu#K[!-i#K[#MW)Hy#MW#M`!-i#M`#NZ)Hy#NZ#N[!-i#N[#N])Hy#N]#Nb!-i#Nb$ z)Hy$ z$!U!-i$!U$!s)Hy$!s$#x!-i$#x$$h)Hy$$h$$j!-i$$j$$o)Hy$$o$$z!-i$$z$%x)Hy$%x$&_!-i$&_$&f)Hy$&f$'p!-i$'p$(X)Hy$(X$(b!-i$(b$)i)Hy$)i$+_!-i$+_$+`)Hy$+`$-a!-i$-a$.b)Hy$.b$.s!-i$.s$.z)Hy$.z$0T!-i$0T$0s)Hy$0s$1Q!-i$1Q$1R)Hy$1R$1S)Hy$1S$1^!-i$1^$2[)Hy$2[$2v!-i$2v$3l)Hy$3l$4g!-i$4g$4j)Hy$4j$4t!-i$4t$5j)Hy$5j$7y!-i$7y$7})Hy$7}$8O!-i$8O$8S)Hy$8S$8V!-i$8V$8W)Hy$8W$8X)Hy$8X$8b!-i$8b$<j)Hy$<j$=|!-i$=|$DO)Hy$DO$DQ!-i$DQ$DW)Hy$DW$DY!-i$DY$EQ)Hy$EQ$ES!-i$ES$EY)Hy$EY$E[!-i$E[$Ed)Hy$Ed$Ee!-i$Ee$Ef)Hy$Ef$Eg!-i$Eg$Eh)Hy$Eh$Ei!-i$Ei$Ej)Hy$Ej$Ek!-i$Ek$F[)Hy$F[$F^!-i$F^$Ge)Hy$Ge$Gf!-i$Gf$Gm)Hy$Gm$Gn!-i$Gn$Go)Hy$Go$Gr!-i$Gr$Gu)Hy$Gu$Gv!-i$Gv$G})Hy$G}$HQ!-i$HQ$HU)Hy$HU$HW!-i$HW$H^)Hy$H^$Hb!-i$Hb$Ho)Hy$Ho$Ht!-i$Ht$Hw)Hy$Hw$Hx!-i$Hx$IP)Hy$IP$Ki!-i$Ki$Kj)Hy$Kj$Kw!-i$Kw$Kx)Hy$Kx$LY!-i$LY$Lg)Hy$Lg$Np!-i$Np$Nq)Hy$Nq$Nu!-i$Nu$Nv)Hy$Nv$Nx!-i$Nx% S)Hy% S% T!-i% T% U)Hy% U% X!-i% X% ^)Hy% ^% d!-i% d% e)Hy% e% f!-i% f% g)Hy% g% h!-i% h% i)Hy% i% j!-i% j% n)Hy% n% o!-i% o% z)Hy% z% |!-i% |%!Q)Hy%!Q%!V!-i%!V%![)Hy%![%!`!-i%!`%!a)Hy%!a%#g!-i%#g%#h)Hy%#h%#i)Hy%#i&/x!-i&/x&0y)Hy&0y&0z!-i&0z&1{)Hy&1{&1|!-i&1|&4w)Hy&4w&4}!-i&4}&5R)Hy&5R&5U!-i&5U&5V)Hy&5V&5W)Hy&5W&5d!-i&5d&6[)Hy&6[&6]!-i&6]&6^)Hy&6^&6c!-i&6c&6d)Hy&6d&6f!-i&6f&7p)Hy&7p&7w!-i&7w&7x)Hy&7x&8Y!-i&8Y&8q)Hy&8q&8z!-i&8z&9R)Hy&9R&9S!-i&9S&9Z)Hy&9Z&9[!-i&9[&9c)Hy&9c&9d!-i&9d&9k)Hy&9k&9l!-i&9l&9s)Hy&9s&9t!-i&9t&9{)Hy&9{&9|!-i&9|&:T)Hy&:T&:U!-i&:U&:])Hy&:]&<P!-i&<P&<Q)Hy&<Q&FZ!-i&FZ&F[)Hy&F[&F])Hy&F]&GX!-i&GX&G^)Hy&G^&Gc!-i&Gc&Gd)Hy&Gd&Ge)Hy&Ge&Gi!-i&Gi&Ic)Hy&Ic&Ii!-i&Ii&Il)Hy&Il&Im!-i&Im&Kk)Hy&Kk&Kl!-i&Kl&Kp)Hy&Kp&Ku!-i&Ku&Lp)Hy&Lp&Ls!-i&Ls&Nu)Hy&Nu' W!-i' W' s)Hy' s'!z!-i'!z'#[)Hy'#['.b!-i'.b*3f)Hy*3f*5S!-i*5S40_)Hy40_41d!-i41d4Js)Hy4Js4LY!-i4LY4MY)Hy4MY4M[!-i4M[5%T)Hy5%T5%W!-i5%W5%h)Hy5%h5%r!-i5%r5%s)Hy5%s5%t)Hy5%t5&Y!-i5&Y5'Z)Hy5'Z5'k!-i5'k5(U)Hy5(U5(^!-i5(^5)v)Hy5)v5*y!-i5*y5+S)Hy5+S5+U!-i5+U5-a)Hy5-a5-c!-i5-c5-g)Hy5-g5-h!-i5-h5-l)Hy5-l5-x!-i5-x5.T)Hy5.T5/t!-i5/t50O)Hy50O50P!-i50P50S)Hy50S50T!-i50T50X)Hy50X50Y!-i50Y50q)Hy50q51`!-i51`52f)Hy52f52t!-i52t53x)Hy53x55Y!-i55Y55`)Hy55`55c!-i55c55d)Hy55d55r!-i55r56`)Hy56`56j!-i56j57R)Hy57R57l!-i57l58Z)Hy58Z58b!-i58b59c)Hy59c5:P!-i5:P5:Q)Hy5:Q5;S!-i5;S5;})Hy5;}5<f!-i5<f5<i)Hy5<i5<j!-i5<j5<r)Hy5<r5=W!-i5=W5=o)Hy5=o5=r!-i5=r5=s)Hy5=s5=x!-i5=x5>z)Hy5>z5>{!-i5>{5>|)Hy5>|5?P!-i5?P5?Q)Hy5?Q5?R)Hy5?R5?T!-i5?T5?Y)Hy5?Y5?[!-i5?[5?])Hy5?]5?^!-i5?^5?_)Hy5?_5?w!-i5?w5?z)Hy5?z5?|!-i5?|5@X)Hy5@X5@`!-i5@`5@c)Hy5@c5@o!-i5@o5@u)Hy5@u5@w!-i5@w5@})Hy5@}5AP!-i5AP5AV)Hy5AV5A`!-i5A`5Ag)Hy5Ag5Ah!-i5Ah5Ao)Hy5Ao5Dv!-i5Dv5Ek)Hy5Ek5FY!-i5FY;%S)Hy;%S;%`!-i;%`;%w)Hy;%w;%{!-i;%{;'O)Hy;'O;'S!-i;'S;=`!.V<%l?&r!-i?&r?.p)Hy?.p?.r!-i?.r?1Q)Hy?1Q?1x!-i?1x?2P)Hy?2P?2]!-i?2]?2b)Hy?2b?2g!-i?2g?2h)Hy?2h?2i!-i?2i?2s)Hy?2s?2t!-i?2t?3R)Hy?3R?3S!-i?3S?3X)Hy?3X?3Y!-i?3Y?3Z)Hy?3Z?3[!-i?3[?3])Hy?3]?3^)Hy?3^?3_!-i?3_?3`)Hy?3`?3a)Hy?3a?3b!-i?3b?5r)Hy?5r?6e!-i?6e?>`)Hy?>`?>r!-i?>r?@U)Hy?@U?@W!-i?@W?A`)Hy?A`?BY!-i?BY?Bf)Hy?Bf?EO!-i?EO?ET)Hy?ET?EU!-i?EU?HR)Hy?HR?Hw!-i?Hw?Ic)Hy?Ic?Ii!-i?Ii?JT)Hy?JT?J`!-i?J`?L])Hy?L]?L`!-i?L`?Lf)Hy?Lf?Lh!-i?Lh?Ln)Hy?Ln?Lp!-i?Lp?Lv)Hy?Lv?Lx!-i?Lx?L{)Hy?L{O!-i_+ v2g!OWzQ{TmPOq!*jqr#9krs#9kst#9ktu#9kuv#9kvw#9kwx$@]xz!*jz{#9k{|#9k|!O!*j!O!P#9k!P!Q#9k!Q![#9k![!a!*j!a!b#9k!b!c!*j!c!}#9k!}#O!*j#O#P#9k#P#R!*j#R#S#9k#S#T&4y#T#o#9k#o$p!*j$p$q#9k$q${!*j${$|#9k$|%Q!*j%Q%R#9k%R%W!*j%W%o#9k%o%p!*j%p&a#9k&a&b!*j&b0`#9k0`0d!*j0d0p#9k0p1O!*j1O1T#9k1T1[!*j1[1]#9k1]1^!*j1^1_#9k1_4U!*j4U4Z#9k4Z4[!*j4[4]#9k4]4^#9k4^4`!*j4`4d#9k4d4l!*j4l4m#9k4m4n!*j4n4q#9k4q4r!*j4r4s#9k4s4t!*j4t5Y#9k5Y5Z!*j5Z7Q#9k7Q7R!*j7R:S#9k:S:[!*j:[=p#9k=p=y!*j=y>q#9k>q>s!*j>s>t#9k>t>{!*j>{?t#9k?tA`!*jA`A{#9kA{BQ!*jBQBT#9kBTCS!*jCSDP#9kDPDt!*jDtDu#9kDuDv#9kDvDw!*jDwGO#9kGOGP!*jGPGQ#9kGQGa!*jGaGb#9kGbGc#9kGcGj!*jGjGk#9kGkGl#9kGlGv!*jGvGy#9kGyG{!*jG{G|#9kG|H^!*jH^H_#9kH_H`!*jH`IO#9kIOIm!*jImKj#9kKjKu!*jKuKv#9kKvL`!*jL`MR#9kMRM[!*jM[M]#9kM]M^#9kM^Mb!*jMbMc#9kMcMh!*jMhNO#9kNONS!*jNSNT#9kNTN^!*jN^N_#9kN_Nb!*jNbNc#9kNcNz!*jNz! e#9k! e!#O!*j!#O!#P#9k!#P!#Q!*j!#Q!#]#9k!#]!%W!*j!%W!&`#9k!&`!&c!*j!&c!&d#9k!&d!&v!*j!&v!&w#9k!&w!'O!*j!'O!'Y#9k!'Y!'i!*j!'i!'p#9k!'p!'q!*j!'q!'x#9k!'x!'}!*j!'}!(V#9k!(V!(X!*j!(X!(Y#9k!(Y!(Z#9k!(Z!(]!*j!(]!(s#9k!(s!(t!*j!(t!({#9k!({!(|!*j!(|!(}#9k!(}!)Q!*j!)Q!)U#9k!)U!)X!*j!)X!)Y#9k!)Y!)j!*j!)j!)k#9k!)k!)x!*j!)x!)y#9k!)y!)z#9k!)z!){!*j!){!*O#9k!*O!*^!*j!*^!*_#9k!*_!*`#9k!*`!*s!*j!*s!*y#9k!*y!*}!*j!*}!+O#9k!+O!+P#9k!+P!+R!*j!+R!+i#9k!+i!+j!*j!+j!+q#9k!+q!+r!*j!+r!+s#9k!+s!+t#9k!+t!+u!*j!+u!+v#9k!+v!+w#9k!+w!+x!*j!+x!+y#9k!+y!+z#9k!+z!,k!*j!,k!,o#9k!,o!,p!*j!,p!,q#9k!,q!-U!*j!-U!-X#9k!-X!-i!*j!-i!-r#9k!-r!-s!*j!-s!-v#9k!-v!-w!*j!-w!._#9k!._!.`!*j!.`!.g#9k!.g!.h!*j!.h!.i#9k!.i!.j#9k!.j!.k!*j!.k!.p#9k!.p!.s!*j!.s!.t#9k!.t!/W!*j!/W!/X#9k!/X!/h!*j!/h!/i#9k!/i!/j#9k!/j!0_!*j!0_!0g#9k!0g!0i!*j!0i!0j#9k!0j!0k#9k!0k!0m!*j!0m!1T#9k!1T!1U!*j!1U!1]#9k!1]!1^!*j!1^!1_#9k!1_!1`#9k!1`!1a!*j!1a!1f#9k!1f!1i!*j!1i!1j#9k!1j!2Y!*j!2Y!2Z#9k!2Z!2[#9k!2[!2]!*j!2]!2`#9k!2`!2o!*j!2o!2p#9k!2p!3R!*j!3R!3S#9k!3S!3T!*j!3T!3Z#9k!3Z!3^!*j!3^!3a#9k!3a!3b!*j!3b!3f#9k!3f!3i!*j!3i!3j#9k!3j!3k#9k!3k!3l!*j!3l!3m#9k!3m!3n!*j!3n!3o#9k!3o!3p#9k!3p!3s!*j!3s!3t#9k!3t!3u#9k!3u!3x!*j!3x!3{#9k!3{!4O!*j!4O!4[#9k!4[!4r!*j!4r!4s#9k!4s!5y!*j!5y!6R#9k!6R!6S!*j!6S!6V#9k!6V!6W!*j!6W!6o#9k!6o!6p!*j!6p!6z#9k!6z!6{!*j!6{!7Q#9k!7Q!7T!*j!7T!7U#9k!7U!7p!*j!7p!7q#9k!7q!7r#9k!7r!7x!*j!7x!7y#9k!7y!7z#9k!7z!8o!*j!8o!8w#9k!8w!8x!*j!8x!8{#9k!8{!8|!*j!8|!9e#9k!9e!9f!*j!9f!9p#9k!9p!9q!*j!9q!9v#9k!9v!9y!*j!9y!9z#9k!9z!:l!*j!:l!:m#9k!:m!:n!*j!:n!:o#9k!:o!:p#9k!:p!;P!*j!;P!;Q#9k!;Q!;R#9k!;R!;e!*j!;e!;m#9k!;m!;n!*j!;n!;q#9k!;q!;r!*j!;r!<m#9k!<m!<o!*j!<o!<p#9k!<p!=Q!*j!=Q!=R#9k!=R!=d!*j!=d!=e#9k!=e!=f#9k!=f!>O!*j!>O!>U#9k!>U!>Z!*j!>Z!>m#9k!>m!>p!*j!>p!?Y#9k!?Y!?Z!*j!?Z!?d#9k!?d!?e!*j!?e!?f#9k!?f!?h!*j!?h!?o#9k!?o!@{!*j!@{!A}#9k!A}!BO!*j!BO!BP#9k!BP!BQ#9k!BQ!B^!*j!B^!Be#9k!Be!Cq!*j!Cq!Cr#9k!Cr!Cs#9k!Cs!Ct!*j!Ct!Cu#9k!Cu!Cw!*j!Cw!Cx#9k!Cx!Cy#9k!Cy!Cz!*j!Cz!C{#9k!C{!C}!*j!C}!DO#9k!DO!DU!*j!DU!DY#9k!DY!DZ!*j!DZ!Db#9k!Db!Dc!*j!Dc!Df#9k!Df!Dg!*j!Dg!Dh#9k!Dh!Di!*j!Di!Dj#9k!Dj!Dl!*j!Dl!Dm#9k!Dm!Dn#9k!Dn!Do!*j!Do!Ds#9k!Ds!Dt!*j!Dt!Du#9k!Du!Dv#9k!Dv!EP!*j!EP!EQ#9k!EQ!ES!*j!ES!EX#9k!EX!EY!*j!EY!EZ#9k!EZ!Ep!*j!Ep!Et#9k!Et!Ff!*j!Ff!Fg#9k!Fg!Gx!*j!Gx!HQ#9k!HQ!HR!*j!HR!Hw#9k!Hw!Id!*j!Id!Ii#9k!Ii!LQ!*j!LQ!L}#9k!L}!Mc!*j!Mc!Md#9k!Md!Mt!*j!Mt!Mz#9k!Mz!NO!*j!NO!NS#9k!NS!NV!*j!NV!NW#9k!NW!NZ!*j!NZ!N[#9k!N[!N]#9k!N]!Nd!*j!Nd!Ng#9k!Ng!Nk!*j!Nk!Nx#9k!Nx# U!*j# U# V#9k# V# h!*j# h#!`#9k#!`#!a!*j#!a#!b#9k#!b#!g!*j#!g#!h#9k#!h#!j!*j#!j##g#9k##g##h!*j##h#*s#9k#*s#*t!*j#*t#*x#9k#*x#*z!*j#*z#+R#9k#+R#+S!*j#+S#+T#9k#+T#+U!*j#+U#+Y#9k#+Y#+[!*j#+[#,V#9k#,V#,W!*j#,W#,[#9k#,[#,^!*j#,^#-P#9k#-P#-Q!*j#-Q#-U#9k#-U#-W!*j#-W#-_#9k#-_#-`!*j#-`#-a#9k#-a#-b!*j#-b#-f#9k#-f#-h!*j#-h#-w#9k#-w#-x!*j#-x#/T#9k#/T#/U!*j#/U#/Y#9k#/Y#/[!*j#/[#0q#9k#0q#1h!*j#1h#1x#9k#1x#2Y!*j#2Y#4R#9k#4R#4_!*j#4_#Au#9k#Au#Aw!*j#Aw#BY#9k#BY#BZ!*j#BZ#Bu#9k#Bu#Bz!*j#Bz#Di#9k#Di#EO!*j#EO#E]#9k#E]#E^!*j#E^#Eb#9k#Eb#Ep!*j#Ep#FS#9k#FS#Fb!*j#Fb#Ft#9k#Ft#GS!*j#GS#Ga#9k#Ga#Gb!*j#Gb#Ge#9k#Ge#Gt!*j#Gt#Hz#9k#Hz#Io!*j#Io#Ip#9k#Ip#It!*j#It#Iu#9k#Iu#K[!*j#K[#MW#9k#MW#M`!*j#M`#NZ#9k#NZ#N[!*j#N[#N]#9k#N]#Nb!*j#Nb$ z#9k$ z$!U!*j$!U$!s#9k$!s$#x!*j$#x$$h#9k$$h$$j!*j$$j$$o#9k$$o$$z!*j$$z$%x#9k$%x$&_!*j$&_$&f#9k$&f$'p!*j$'p$(X#9k$(X$(b!*j$(b$)i#9k$)i$+_!*j$+_$+`#9k$+`$-a!*j$-a$.b#9k$.b$.s!*j$.s$.z#9k$.z$0T!*j$0T$0s#9k$0s$1Q!*j$1Q$1R#9k$1R$1S#9k$1S$1^!*j$1^$2[#9k$2[$2v!*j$2v$3l#9k$3l$4g!*j$4g$4j#9k$4j$4t!*j$4t$5j#9k$5j$7y!*j$7y$7}#9k$7}$8O!*j$8O$8S#9k$8S$8V!*j$8V$8W#9k$8W$8X#9k$8X$8b!*j$8b$<j#9k$<j$=|!*j$=|$DO#9k$DO$DQ!*j$DQ$DW#9k$DW$DY!*j$DY$EQ#9k$EQ$ES!*j$ES$EY#9k$EY$E[!*j$E[$Ed#9k$Ed$Ee!*j$Ee$Ef#9k$Ef$Eg!*j$Eg$Eh#9k$Eh$Ei!*j$Ei$Ej#9k$Ej$Ek!*j$Ek$F[#9k$F[$F^!*j$F^$Ge#9k$Ge$Gf!*j$Gf$Gm#9k$Gm$Gn!*j$Gn$Go#9k$Go$Gr!*j$Gr$Gu#9k$Gu$Gv!*j$Gv$G}#9k$G}$HQ!*j$HQ$HU#9k$HU$HW!*j$HW$H^#9k$H^$Hb!*j$Hb$Ho#9k$Ho$Ht!*j$Ht$Hw#9k$Hw$Hx!*j$Hx$IP#9k$IP$Ki!*j$Ki$Kj#9k$Kj$Kw!*j$Kw$Kx#9k$Kx$LY!*j$LY$Lg#9k$Lg$Np!*j$Np$Nq#9k$Nq$Nu!*j$Nu$Nv#9k$Nv$Nx!*j$Nx% S#9k% S% T!*j% T% U#9k% U% X!*j% X% ^#9k% ^% d!*j% d% e#9k% e% f!*j% f% g#9k% g% h!*j% h% i#9k% i% j!*j% j% n#9k% n% o!*j% o% z#9k% z% |!*j% |%!Q#9k%!Q%!V!*j%!V%![#9k%![%!`!*j%!`%!a#9k%!a%#g!*j%#g%#h#9k%#h%#i#9k%#i&/x!*j&/x&0y#9k&0y&0z!*j&0z&1{#9k&1{&1|!*j&1|&4w#9k&4w&4}!*j&4}&5R#9k&5R&5U!*j&5U&5V#9k&5V&5W#9k&5W&5d!*j&5d&6[#9k&6[&6]!*j&6]&6^#9k&6^&6c!*j&6c&6d#9k&6d&6f!*j&6f&7p#9k&7p&7w!*j&7w&7x#9k&7x&8Y!*j&8Y&8q#9k&8q&8z!*j&8z&9R#9k&9R&9S!*j&9S&9Z#9k&9Z&9[!*j&9[&9c#9k&9c&9d!*j&9d&9k#9k&9k&9l!*j&9l&9s#9k&9s&9t!*j&9t&9{#9k&9{&9|!*j&9|&:T#9k&:T&:U!*j&:U&:]#9k&:]&<P!*j&<P&<Q#9k&<Q&FZ!*j&FZ&F[#9k&F[&F]#9k&F]&GX!*j&GX&G^#9k&G^&Gc!*j&Gc&Gd#9k&Gd&Ge#9k&Ge&Gi!*j&Gi&Ic#9k&Ic&Ii!*j&Ii&Il#9k&Il&Im!*j&Im&Kk#9k&Kk&Kl!*j&Kl&Kp#9k&Kp&Ku!*j&Ku&Lp#9k&Lp&Ls!*j&Ls&Nu#9k&Nu' W!*j' W' s#9k' s'!z!*j'!z'#[#9k'#['.b!*j'.b*3f#9k*3f*5S!*j*5S40_#9k40_41d!*j41d4Js#9k4Js4LY!*j4LY4MY#9k4MY4M[!*j4M[5%T#9k5%T5%W!*j5%W5%h#9k5%h5%r!*j5%r5%s#9k5%s5%t#9k5%t5&Y!*j5&Y5'Z#9k5'Z5'k!*j5'k5(U#9k5(U5(^!*j5(^5)v#9k5)v5*y!*j5*y5+S#9k5+S5+U!*j5+U5-a#9k5-a5-c!*j5-c5-g#9k5-g5-h!*j5-h5-l#9k5-l5-x!*j5-x5.T#9k5.T5/t!*j5/t50O#9k50O50P!*j50P50S#9k50S50T!*j50T50X#9k50X50Y!*j50Y50q#9k50q51`!*j51`52f#9k52f52t!*j52t53x#9k53x55Y!*j55Y55`#9k55`55c!*j55c55d#9k55d55r!*j55r56`#9k56`56j!*j56j57R#9k57R57l!*j57l58Z#9k58Z58b!*j58b59c#9k59c5:P!*j5:P5:Q#9k5:Q5;S!*j5;S5;}#9k5;}5<f!*j5<f5<i#9k5<i5<j!*j5<j5<r#9k5<r5=W!*j5=W5=o#9k5=o5=r!*j5=r5=s#9k5=s5=x!*j5=x5>z#9k5>z5>{!*j5>{5>|#9k5>|5?P!*j5?P5?Q#9k5?Q5?R#9k5?R5?T!*j5?T5?Y#9k5?Y5?[!*j5?[5?]#9k5?]5?^!*j5?^5?_#9k5?_5?w!*j5?w5?z#9k5?z5?|!*j5?|5@X#9k5@X5@`!*j5@`5@c#9k5@c5@o!*j5@o5@u#9k5@u5@w!*j5@w5@}#9k5@}5AP!*j5AP5AV#9k5AV5A`!*j5A`5Ag#9k5Ag5Ah!*j5Ah5Ao#9k5Ao5Dv!*j5Dv5Ek#9k5Ek5FY!*j5FY;%S#9k;%S;%`!*j;%`;%w#9k;%w;%{!*j;%{;'O#9k;'O;'S!*j;'S;=`!,W<%l?&r!*j?&r?.p#9k?.p?.r!*j?.r?1Q#9k?1Q?1x!*j?1x?2P#9k?2P?2]!*j?2]?2b#9k?2b?2g!*j?2g?2h#9k?2h?2i!*j?2i?2s#9k?2s?2t!*j?2t?3R#9k?3R?3S!*j?3S?3X#9k?3X?3Y!*j?3Y?3Z#9k?3Z?3[!*j?3[?3]#9k?3]?3^#9k?3^?3_!*j?3_?3`#9k?3`?3a#9k?3a?3b!*j?3b?5r#9k?5r?6e!*j?6e?>`#9k?>`?>r!*j?>r?@U#9k?@U?@W!*j?@W?A`#9k?A`?BY!*j?BY?Bf#9k?Bf?EO!*j?EO?ET#9k?ET?EU!*j?EU?HR#9k?HR?Hw!*j?Hw?Ic#9k?Ic?Ii!*j?Ii?JT#9k?JT?J`!*j?J`?L]#9k?L]?L`!*j?L`?Lf#9k?Lf?Lh!*j?Lh?Ln#9k?Ln?Lp!*j?Lp?Lv#9k?Lv?Lx!*j?Lx?L{#9k?L{O!*j!a,(j2g!OW|SzQmPOq!)tqr!2wrs#9kst!2wtu!2wuv-/Rvw!2wwx';ixz!)tz{!2w{|!2w|!O!)t!O!P!2w!P!Q!2w!Q![!2w![!a!)t!a!b!2w!b!c!)t!c!}!2w!}#O!)t#O#P!2w#P#R!)t#R#S!2w#S#T)Hy#T#o!2w#o$p!)t$p$q!2w$q${!)t${$|!2w$|%Q!)t%Q%R!2w%R%W!)t%W%o!2w%o%p!)t%p&a!2w&a&b!)t&b0`!2w0`0d!)t0d0p!2w0p1O!)t1O1T!2w1T1[!)t1[1]!2w1]1^!)t1^1_!2w1_4U!)t4U4Z!2w4Z4[!)t4[4]!2w4]4^!2w4^4`!)t4`4d!2w4d4l!)t4l4m!2w4m4n!)t4n4q!2w4q4r!)t4r4s!2w4s4t!)t4t5Y!2w5Y5Z!)t5Z7Q!2w7Q7R!)t7R:S!2w:S:[!)t:[=p!2w=p=y!)t=y>q!2w>q>s!)t>s>t!2w>t>{!)t>{?t!2w?tA`!)tA`A{!2wA{BQ!)tBQBT!2wBTCS!)tCSDP!2wDPDt!)tDtDu!2wDuDv!2wDvDw!)tDwGO!2wGOGP!)tGPGQ!2wGQGa!)tGaGb!2wGbGc!2wGcGj!)tGjGk!2wGkGl!2wGlGv!)tGvGy!2wGyG{!)tG{G|!2wG|H^!)tH^H_!2wH_H`!)tH`IO!2wIOIm!)tImKj!2wKjKu!)tKuKv!2wKvL`!)tL`MR!2wMRM[!)tM[M]!2wM]M^!2wM^Mb!)tMbMc!2wMcMh!)tMhNO!2wNONS!)tNSNT!2wNTN^!)tN^N_!2wN_Nb!)tNbNc!2wNcNz!)tNz! e!2w! e!#O!)t!#O!#P!2w!#P!#Q!)t!#Q!#]!2w!#]!%W!)t!%W!&`!2w!&`!&c!)t!&c!&d!2w!&d!&v!)t!&v!&w!2w!&w!'O!)t!'O!'Y!2w!'Y!'i!)t!'i!'p!2w!'p!'q!)t!'q!'x!2w!'x!'}!)t!'}!(V!2w!(V!(X!)t!(X!(Y!2w!(Y!(Z!2w!(Z!(]!)t!(]!(s!2w!(s!(t!)t!(t!({!2w!({!(|!)t!(|!(}!2w!(}!)Q!)t!)Q!)U!2w!)U!)X!)t!)X!)Y!2w!)Y!)j!)t!)j!)k!2w!)k!)x!)t!)x!)y!2w!)y!)z!2w!)z!){!)t!){!*O!2w!*O!*^!)t!*^!*_!2w!*_!*`!2w!*`!*s!)t!*s!*y!2w!*y!*}!)t!*}!+O!2w!+O!+P!2w!+P!+R!)t!+R!+i!2w!+i!+j!)t!+j!+q!2w!+q!+r!)t!+r!+s!2w!+s!+t!2w!+t!+u!)t!+u!+v!2w!+v!+w!2w!+w!+x!)t!+x!+y!2w!+y!+z!2w!+z!,k!)t!,k!,o!2w!,o!,p!)t!,p!,q!2w!,q!-U!)t!-U!-X!2w!-X!-i!)t!-i!-r!2w!-r!-s!)t!-s!-v!2w!-v!-w!)t!-w!._!2w!._!.`!)t!.`!.g!2w!.g!.h!)t!.h!.i!2w!.i!.j!2w!.j!.k!)t!.k!.p!2w!.p!.s!)t!.s!.t!2w!.t!/W!)t!/W!/X!2w!/X!/h!)t!/h!/i!2w!/i!/j!2w!/j!0_!)t!0_!0g!2w!0g!0i!)t!0i!0j!2w!0j!0k!2w!0k!0m!)t!0m!1T!2w!1T!1U!)t!1U!1]!2w!1]!1^!)t!1^!1_!2w!1_!1`!2w!1`!1a!)t!1a!1f!2w!1f!1i!)t!1i!1j!2w!1j!2Y!)t!2Y!2Z!2w!2Z!2[!2w!2[!2]!)t!2]!2`!2w!2`!2o!)t!2o!2p!2w!2p!3R!)t!3R!3S!2w!3S!3T!)t!3T!3Z!2w!3Z!3^!)t!3^!3a!2w!3a!3b!)t!3b!3f!2w!3f!3i!)t!3i!3j!2w!3j!3k!2w!3k!3l!)t!3l!3m!2w!3m!3n!)t!3n!3o!2w!3o!3p!2w!3p!3s!)t!3s!3t!2w!3t!3u!2w!3u!3x!)t!3x!3{!2w!3{!4O!)t!4O!4[!2w!4[!4r!)t!4r!4s!2w!4s!5y!)t!5y!6R!2w!6R!6S!)t!6S!6V!2w!6V!6W!)t!6W!6o!2w!6o!6p!)t!6p!6z!2w!6z!6{!)t!6{!7Q!2w!7Q!7T!)t!7T!7U!2w!7U!7p!)t!7p!7q!2w!7q!7r!2w!7r!7x!)t!7x!7y!2w!7y!7z!2w!7z!8o!)t!8o!8w!2w!8w!8x!)t!8x!8{!2w!8{!8|!)t!8|!9e!2w!9e!9f!)t!9f!9p!2w!9p!9q!)t!9q!9v!2w!9v!9y!)t!9y!9z!2w!9z!:l!)t!:l!:m!2w!:m!:n!)t!:n!:o!2w!:o!:p!2w!:p!;P!)t!;P!;Q!2w!;Q!;R!2w!;R!;e!)t!;e!;m!2w!;m!;n!)t!;n!;q!2w!;q!;r!)t!;r!<m!2w!<m!<o!)t!<o!<p!2w!<p!=Q!)t!=Q!=R!2w!=R!=d!)t!=d!=e!2w!=e!=f!2w!=f!>O!)t!>O!>U!2w!>U!>Z!)t!>Z!>m!2w!>m!>p!)t!>p!?Y!2w!?Y!?Z!)t!?Z!?d!2w!?d!?e!)t!?e!?f!2w!?f!?h!)t!?h!?o!2w!?o!@{!)t!@{!A}!2w!A}!BO!)t!BO!BP!2w!BP!BQ!2w!BQ!B^!)t!B^!Be!2w!Be!Cq!)t!Cq!Cr!2w!Cr!Cs!2w!Cs!Ct!)t!Ct!Cu!2w!Cu!Cw!)t!Cw!Cx!2w!Cx!Cy!2w!Cy!Cz!)t!Cz!C{!2w!C{!C}!)t!C}!DO!2w!DO!DU!)t!DU!DY!2w!DY!DZ!)t!DZ!Db!2w!Db!Dc!)t!Dc!Df!2w!Df!Dg!)t!Dg!Dh!2w!Dh!Di!)t!Di!Dj!2w!Dj!Dl!)t!Dl!Dm!2w!Dm!Dn!2w!Dn!Do!)t!Do!Ds!2w!Ds!Dt!)t!Dt!Du!2w!Du!Dv!2w!Dv!EP!)t!EP!EQ!2w!EQ!ES!)t!ES!EX!2w!EX!EY!)t!EY!EZ!2w!EZ!Ep!)t!Ep!Et!2w!Et!Ff!)t!Ff!Fg!2w!Fg!Gx!)t!Gx!HQ!2w!HQ!HR!)t!HR!Hw!2w!Hw!Id!)t!Id!Ii!2w!Ii!LQ!)t!LQ!L}!2w!L}!Mc!)t!Mc!Md!2w!Md!Mt!)t!Mt!Mz!2w!Mz!NO!)t!NO!NS!2w!NS!NV!)t!NV!NW!2w!NW!NZ!)t!NZ!N[!2w!N[!N]!2w!N]!Nd!)t!Nd!Ng!2w!Ng!Nk!)t!Nk!Nx!2w!Nx# U!)t# U# V!2w# V# h!)t# h#!`!2w#!`#!a!)t#!a#!b!2w#!b#!g!)t#!g#!h!2w#!h#!j!)t#!j##g!2w##g##h!)t##h#*s!2w#*s#*t!)t#*t#*x!2w#*x#*z!)t#*z#+R!2w#+R#+S!)t#+S#+T!2w#+T#+U!)t#+U#+Y!2w#+Y#+[!)t#+[#,V!2w#,V#,W!)t#,W#,[!2w#,[#,^!)t#,^#-P!2w#-P#-Q!)t#-Q#-U!2w#-U#-W!)t#-W#-_!2w#-_#-`!)t#-`#-a!2w#-a#-b!)t#-b#-f!2w#-f#-h!)t#-h#-w!2w#-w#-x!)t#-x#/T!2w#/T#/U!)t#/U#/Y!2w#/Y#/[!)t#/[#0q!2w#0q#1h!)t#1h#1x!2w#1x#2Y!)t#2Y#4R!2w#4R#4_!)t#4_#Au!2w#Au#Aw!)t#Aw#BY!2w#BY#BZ!)t#BZ#Bu!2w#Bu#Bz!)t#Bz#Di!2w#Di#EO!)t#EO#E]!2w#E]#E^!)t#E^#Eb!2w#Eb#Ep!)t#Ep#FS!2w#FS#Fb!)t#Fb#Ft!2w#Ft#GS!)t#GS#Ga!2w#Ga#Gb!)t#Gb#Ge!2w#Ge#Gt!)t#Gt#Hz!2w#Hz#Io!)t#Io#Ip!2w#Ip#It!)t#It#Iu!2w#Iu#K[!)t#K[#MW!2w#MW#M`!)t#M`#NZ!2w#NZ#N[!)t#N[#N]!2w#N]#Nb!)t#Nb$ z!2w$ z$!U!)t$!U$!s!2w$!s$#x!)t$#x$$h!2w$$h$$j!)t$$j$$o!2w$$o$$z!)t$$z$%x!2w$%x$&_!)t$&_$&f!2w$&f$'p!)t$'p$(X!2w$(X$(b!)t$(b$)i!2w$)i$+_!)t$+_$+`!2w$+`$-a!)t$-a$.b!2w$.b$.s!)t$.s$.z!2w$.z$0T!)t$0T$0s!2w$0s$1Q!)t$1Q$1R!2w$1R$1S!2w$1S$1^!)t$1^$2[!2w$2[$2v!)t$2v$3l!2w$3l$4g!)t$4g$4j!2w$4j$4t!)t$4t$5j!2w$5j$7y!)t$7y$7}!2w$7}$8O!)t$8O$8S!2w$8S$8V!)t$8V$8W!2w$8W$8X!2w$8X$8b!)t$8b$<j!2w$<j$=|!)t$=|$DO!2w$DO$DQ!)t$DQ$DW!2w$DW$DY!)t$DY$EQ!2w$EQ$ES!)t$ES$EY!2w$EY$E[!)t$E[$Ed!2w$Ed$Ee!)t$Ee$Ef!2w$Ef$Eg!)t$Eg$Eh!2w$Eh$Ei!)t$Ei$Ej!2w$Ej$Ek!)t$Ek$F[!2w$F[$F^!)t$F^$Ge!2w$Ge$Gf!)t$Gf$Gm!2w$Gm$Gn!)t$Gn$Go!2w$Go$Gr!)t$Gr$Gu!2w$Gu$Gv!)t$Gv$G}!2w$G}$HQ!)t$HQ$HU!2w$HU$HW!)t$HW$H^!2w$H^$Hb!)t$Hb$Ho!2w$Ho$Ht!)t$Ht$Hw!2w$Hw$Hx!)t$Hx$IP!2w$IP$Ki!)t$Ki$Kj!2w$Kj$Kw!)t$Kw$Kx!2w$Kx$LY!)t$LY$Lg!2w$Lg$Np!)t$Np$Nq!2w$Nq$Nu!)t$Nu$Nv!2w$Nv$Nx!)t$Nx% S!2w% S% T!)t% T% U!2w% U% X!)t% X% ^!2w% ^% d!)t% d% e!2w% e% f!)t% f% g!2w% g% h!)t% h% i!2w% i% j!)t% j% n!2w% n% o!)t% o% z!2w% z% |!)t% |%!Q!2w%!Q%!V!)t%!V%![!2w%![%!`!)t%!`%!a!2w%!a%#g!)t%#g%#h!2w%#h%#i!2w%#i&/x!)t&/x&0y!2w&0y&0z!)t&0z&1{!2w&1{&1|!)t&1|&4w!2w&4w&4}!)t&4}&5R!2w&5R&5U!)t&5U&5V!2w&5V&5W!2w&5W&5d!)t&5d&6[!2w&6[&6]!)t&6]&6^!2w&6^&6c!)t&6c&6d!2w&6d&6f!)t&6f&7p!2w&7p&7w!)t&7w&7x!2w&7x&8Y!)t&8Y&8q!2w&8q&8z!)t&8z&9R!2w&9R&9S!)t&9S&9Z!2w&9Z&9[!)t&9[&9c!2w&9c&9d!)t&9d&9k!2w&9k&9l!)t&9l&9s!2w&9s&9t!)t&9t&9{!2w&9{&9|!)t&9|&:T!2w&:T&:U!)t&:U&:]!2w&:]&<P!)t&<P&<Q!2w&<Q&FZ!)t&FZ&F[!2w&F[&F]!2w&F]&GX!)t&GX&G^!2w&G^&Gc!)t&Gc&Gd!2w&Gd&Ge!2w&Ge&Gi!)t&Gi&Ic!2w&Ic&Ii!)t&Ii&Il!2w&Il&Im!)t&Im&Kk!2w&Kk&Kl!)t&Kl&Kp!2w&Kp&Ku!)t&Ku&Lp!2w&Lp&Ls!)t&Ls&Nu!2w&Nu' W!)t' W' s!2w' s'!z!)t'!z'#[!2w'#['.b!)t'.b*3f!2w*3f*5S!)t*5S40_!2w40_41d!)t41d4Js!2w4Js4LY!)t4LY4MY!2w4MY4M[!)t4M[5%T!2w5%T5%W!)t5%W5%h!2w5%h5%r!)t5%r5%s!2w5%s5%t!2w5%t5&Y!)t5&Y5'Z!2w5'Z5'k!)t5'k5(U!2w5(U5(^!)t5(^5)v!2w5)v5*y!)t5*y5+S!2w5+S5+U!)t5+U5-a!2w5-a5-c!)t5-c5-g!2w5-g5-h!)t5-h5-l!2w5-l5-x!)t5-x5.T!2w5.T5/t!)t5/t50O!2w50O50P!)t50P50S!2w50S50T!)t50T50X!2w50X50Y!)t50Y50q!2w50q51`!)t51`52f!2w52f52t!)t52t53x!2w53x55Y!)t55Y55`!2w55`55c!)t55c55d!2w55d55r!)t55r56`!2w56`56j!)t56j57R!2w57R57l!)t57l58Z!2w58Z58b!)t58b59c!2w59c5:P!)t5:P5:Q!2w5:Q5;S!)t5;S5;}!2w5;}5<f!)t5<f5<i!2w5<i5<j!)t5<j5<r!2w5<r5=W!)t5=W5=o!2w5=o5=r!)t5=r5=s!2w5=s5=x!)t5=x5>z!2w5>z5>{!)t5>{5>|!2w5>|5?P!)t5?P5?Q!2w5?Q5?R!2w5?R5?T!)t5?T5?Y!2w5?Y5?[!)t5?[5?]!2w5?]5?^!)t5?^5?_!2w5?_5?w!)t5?w5?z!2w5?z5?|!)t5?|5@X!2w5@X5@`!)t5@`5@c!2w5@c5@o!)t5@o5@u!2w5@u5@w!)t5@w5@}!2w5@}5AP!)t5AP5AV!2w5AV5A`!)t5A`5Ag!2w5Ag5Ah!)t5Ah5Ao!2w5Ao5Dv!)t5Dv5Ek!2w5Ek5FY!)t5FY;%S!2w;%S;%`!)t;%`;%w!2w;%w;%{!)t;%{;'O!2w;'O;'S!)t;'S;=`!.]<%l?&r!)t?&r?.p!2w?.p?.r!)t?.r?1Q!2w?1Q?1x!)t?1x?2P!2w?2P?2]!)t?2]?2b!2w?2b?2g!)t?2g?2h!2w?2h?2i!)t?2i?2s!2w?2s?2t!)t?2t?3R!2w?3R?3S!)t?3S?3X!2w?3X?3Y!)t?3Y?3Z!2w?3Z?3[!)t?3[?3]!2w?3]?3^!2w?3^?3_!)t?3_?3`!2w?3`?3a!2w?3a?3b!)t?3b?5r!2w?5r?6e!)t?6e?>`!2w?>`?>r!)t?>r?@U!2w?@U?@W!)t?@W?A`!2w?A`?BY!)t?BY?Bf!2w?Bf?EO!)t?EO?ET!2w?ET?EU!)t?EU?HR!2w?HR?Hw!)t?Hw?Ic!2w?Ic?Ii!)t?Ii?JT!2w?JT?J`!)t?J`?L]!2w?L]?L`!)t?L`?Lf!2w?Lf?Lh!)t?Lh?Ln!2w?Ln?Lp!)t?Lp?Lv!2w?Lv?Lx!)t?Lx?L{!2w?L{O!)t!a-/`2i!OW|SzQS!RmPOY.5}YZ!)tZq.5}qr-/Rrs.<hst-/Rtu-/Ruv-/Rvw-/Rwx3)sxz.5}z{-/R{|-/R|!O.5}!O!P-/R!P!Q-/R!Q![-/R![!a.5}!a!b-/R!b!c.5}!c!}-/R!}#O.5}#O#P-/R#P#R.5}#R#S-/R#S#T57e#T#o-/R#o$p.5}$p$q-/R$q${.5}${$|-/R$|%Q.5}%Q%R-/R%R%W.5}%W%o-/R%o%p.5}%p&a-/R&a&b.5}&b0`-/R0`0d.5}0d0p-/R0p1O.5}1O1T-/R1T1[.5}1[1]-/R1]1^.5}1^1_-/R1_4U.5}4U4Z-/R4Z4[.5}4[4]-/R4]4^-/R4^4`.5}4`4d-/R4d4l.5}4l4m-/R4m4n.5}4n4q-/R4q4r.5}4r4s-/R4s4t.5}4t5Y-/R5Y5Z.5}5Z7Q-/R7Q7R.5}7R:S-/R:S:[.5}:[=p-/R=p=y.5}=y>q-/R>q>s.5}>s>t-/R>t>{.5}>{?t-/R?tA`.5}A`A{-/RA{BQ.5}BQBT-/RBTCS.5}CSDP-/RDPDt.5}DtDu-/RDuDv-/RDvDw.5}DwGO-/RGOGP.5}GPGQ-/RGQGa.5}GaGb-/RGbGc-/RGcGj.5}GjGk-/RGkGl-/RGlGv.5}GvGy-/RGyG{.5}G{G|-/RG|H^.5}H^H_-/RH_H`.5}H`IO-/RIOIm.5}ImKj-/RKjKu.5}KuKv-/RKvL`.5}L`MR-/RMRM[.5}M[M]-/RM]M^-/RM^Mb.5}MbMc-/RMcMh.5}MhNO-/RNONS.5}NSNT-/RNTN^.5}N^N_-/RN_Nb.5}NbNc-/RNcNz.5}Nz! e-/R! e!#O.5}!#O!#P-/R!#P!#Q.5}!#Q!#]-/R!#]!%W.5}!%W!&`-/R!&`!&c.5}!&c!&d-/R!&d!&v.5}!&v!&w-/R!&w!'O.5}!'O!'Y-/R!'Y!'i.5}!'i!'p-/R!'p!'q.5}!'q!'x-/R!'x!'}.5}!'}!(V-/R!(V!(X.5}!(X!(Y-/R!(Y!(Z-/R!(Z!(].5}!(]!(s-/R!(s!(t.5}!(t!({-/R!({!(|.5}!(|!(}-/R!(}!)Q.5}!)Q!)U-/R!)U!)X.5}!)X!)Y-/R!)Y!)j.5}!)j!)k-/R!)k!)x.5}!)x!)y-/R!)y!)z-/R!)z!){.5}!){!*O-/R!*O!*^.5}!*^!*_-/R!*_!*`-/R!*`!*s.5}!*s!*y-/R!*y!*}.5}!*}!+O-/R!+O!+P-/R!+P!+R.5}!+R!+i-/R!+i!+j.5}!+j!+q-/R!+q!+r.5}!+r!+s-/R!+s!+t-/R!+t!+u.5}!+u!+v-/R!+v!+w-/R!+w!+x.5}!+x!+y-/R!+y!+z-/R!+z!,k.5}!,k!,o-/R!,o!,p.5}!,p!,q-/R!,q!-U.5}!-U!-X-/R!-X!-i.5}!-i!-r-/R!-r!-s.5}!-s!-v-/R!-v!-w.5}!-w!._-/R!._!.`.5}!.`!.g-/R!.g!.h.5}!.h!.i-/R!.i!.j-/R!.j!.k.5}!.k!.p-/R!.p!.s.5}!.s!.t-/R!.t!/W.5}!/W!/X-/R!/X!/h.5}!/h!/i-/R!/i!/j-/R!/j!0_.5}!0_!0g-/R!0g!0i.5}!0i!0j-/R!0j!0k-/R!0k!0m.5}!0m!1T-/R!1T!1U.5}!1U!1]-/R!1]!1^.5}!1^!1_-/R!1_!1`-/R!1`!1a.5}!1a!1f-/R!1f!1i.5}!1i!1j-/R!1j!2Y.5}!2Y!2Z-/R!2Z!2[-/R!2[!2].5}!2]!2`-/R!2`!2o.5}!2o!2p-/R!2p!3R.5}!3R!3S-/R!3S!3T.5}!3T!3Z-/R!3Z!3^.5}!3^!3a-/R!3a!3b.5}!3b!3f-/R!3f!3i.5}!3i!3j-/R!3j!3k-/R!3k!3l.5}!3l!3m-/R!3m!3n.5}!3n!3o-/R!3o!3p-/R!3p!3s.5}!3s!3t-/R!3t!3u-/R!3u!3x.5}!3x!3{-/R!3{!4O.5}!4O!4[-/R!4[!4r.5}!4r!4s-/R!4s!5y.5}!5y!6R-/R!6R!6S.5}!6S!6V-/R!6V!6W.5}!6W!6o-/R!6o!6p.5}!6p!6z-/R!6z!6{.5}!6{!7Q-/R!7Q!7T.5}!7T!7U-/R!7U!7p.5}!7p!7q-/R!7q!7r-/R!7r!7x.5}!7x!7y-/R!7y!7z-/R!7z!8o.5}!8o!8w-/R!8w!8x.5}!8x!8{-/R!8{!8|.5}!8|!9e-/R!9e!9f.5}!9f!9p-/R!9p!9q.5}!9q!9v-/R!9v!9y.5}!9y!9z-/R!9z!:l.5}!:l!:m-/R!:m!:n.5}!:n!:o-/R!:o!:p-/R!:p!;P.5}!;P!;Q-/R!;Q!;R-/R!;R!;e.5}!;e!;m-/R!;m!;n.5}!;n!;q-/R!;q!;r.5}!;r!<m-/R!<m!<o.5}!<o!<p-/R!<p!=Q.5}!=Q!=R-/R!=R!=d.5}!=d!=e-/R!=e!=f-/R!=f!>O.5}!>O!>U-/R!>U!>Z.5}!>Z!>m-/R!>m!>p.5}!>p!?Y-/R!?Y!?Z.5}!?Z!?d-/R!?d!?e.5}!?e!?f-/R!?f!?h.5}!?h!?o-/R!?o!@{.5}!@{!A}-/R!A}!BO.5}!BO!BP-/R!BP!BQ-/R!BQ!B^.5}!B^!Be-/R!Be!Cq.5}!Cq!Cr-/R!Cr!Cs-/R!Cs!Ct.5}!Ct!Cu-/R!Cu!Cw.5}!Cw!Cx-/R!Cx!Cy-/R!Cy!Cz.5}!Cz!C{-/R!C{!C}.5}!C}!DO-/R!DO!DU.5}!DU!DY-/R!DY!DZ.5}!DZ!Db-/R!Db!Dc.5}!Dc!Df-/R!Df!Dg.5}!Dg!Dh-/R!Dh!Di.5}!Di!Dj-/R!Dj!Dl.5}!Dl!Dm-/R!Dm!Dn-/R!Dn!Do.5}!Do!Ds-/R!Ds!Dt.5}!Dt!Du-/R!Du!Dv-/R!Dv!EP.5}!EP!EQ-/R!EQ!ES.5}!ES!EX-/R!EX!EY.5}!EY!EZ-/R!EZ!Ep.5}!Ep!Et-/R!Et!Ff.5}!Ff!Fg-/R!Fg!Gx.5}!Gx!HQ-/R!HQ!HR.5}!HR!Hw-/R!Hw!Id.5}!Id!Ii-/R!Ii!LQ.5}!LQ!L}-/R!L}!Mc.5}!Mc!Md-/R!Md!Mt.5}!Mt!Mz-/R!Mz!NO.5}!NO!NS-/R!NS!NV.5}!NV!NW-/R!NW!NZ.5}!NZ!N[-/R!N[!N]-/R!N]!Nd.5}!Nd!Ng-/R!Ng!Nk.5}!Nk!Nx-/R!Nx# U.5}# U# V-/R# V# h.5}# h#!`-/R#!`#!a.5}#!a#!b-/R#!b#!g.5}#!g#!h-/R#!h#!j.5}#!j##g-/R##g##h.5}##h#*s-/R#*s#*t.5}#*t#*x-/R#*x#*z.5}#*z#+R-/R#+R#+S.5}#+S#+T-/R#+T#+U.5}#+U#+Y-/R#+Y#+[.5}#+[#,V-/R#,V#,W.5}#,W#,[-/R#,[#,^.5}#,^#-P-/R#-P#-Q.5}#-Q#-U-/R#-U#-W.5}#-W#-_-/R#-_#-`.5}#-`#-a-/R#-a#-b.5}#-b#-f-/R#-f#-h.5}#-h#-w-/R#-w#-x.5}#-x#/T-/R#/T#/U.5}#/U#/Y-/R#/Y#/[.5}#/[#0q-/R#0q#1h.5}#1h#1x-/R#1x#2Y.5}#2Y#4R-/R#4R#4_.5}#4_#Au-/R#Au#Aw.5}#Aw#BY-/R#BY#BZ.5}#BZ#Bu-/R#Bu#Bz.5}#Bz#Di-/R#Di#EO.5}#EO#E]-/R#E]#E^.5}#E^#Eb-/R#Eb#Ep.5}#Ep#FS-/R#FS#Fb.5}#Fb#Ft-/R#Ft#GS.5}#GS#Ga-/R#Ga#Gb.5}#Gb#Ge-/R#Ge#Gt.5}#Gt#Hz-/R#Hz#Io.5}#Io#Ip-/R#Ip#It.5}#It#Iu-/R#Iu#K[.5}#K[#MW-/R#MW#M`.5}#M`#NZ-/R#NZ#N[.5}#N[#N]-/R#N]#Nb.5}#Nb$ z-/R$ z$!U.5}$!U$!s-/R$!s$#x.5}$#x$$h-/R$$h$$j.5}$$j$$o-/R$$o$$z.5}$$z$%x-/R$%x$&_.5}$&_$&f-/R$&f$'p.5}$'p$(X-/R$(X$(b.5}$(b$)i-/R$)i$+_.5}$+_$+`-/R$+`$-a.5}$-a$.b-/R$.b$.s.5}$.s$.z-/R$.z$0T.5}$0T$0s-/R$0s$1Q.5}$1Q$1R-/R$1R$1S-/R$1S$1^.5}$1^$2[-/R$2[$2v.5}$2v$3l-/R$3l$4g.5}$4g$4j-/R$4j$4t.5}$4t$5j-/R$5j$7y.5}$7y$7}-/R$7}$8O.5}$8O$8S-/R$8S$8V.5}$8V$8W-/R$8W$8X-/R$8X$8b.5}$8b$<j-/R$<j$=|.5}$=|$DO-/R$DO$DQ.5}$DQ$DW-/R$DW$DY.5}$DY$EQ-/R$EQ$ES.5}$ES$EY-/R$EY$E[.5}$E[$Ed-/R$Ed$Ee.5}$Ee$Ef-/R$Ef$Eg.5}$Eg$Eh-/R$Eh$Ei.5}$Ei$Ej-/R$Ej$Ek.5}$Ek$F[-/R$F[$F^.5}$F^$Ge-/R$Ge$Gf.5}$Gf$Gm-/R$Gm$Gn.5}$Gn$Go-/R$Go$Gr.5}$Gr$Gu-/R$Gu$Gv.5}$Gv$G}-/R$G}$HQ.5}$HQ$HU-/R$HU$HW.5}$HW$H^-/R$H^$Hb.5}$Hb$Ho-/R$Ho$Ht.5}$Ht$Hw-/R$Hw$Hx.5}$Hx$IP-/R$IP$Ki.5}$Ki$Kj-/R$Kj$Kw.5}$Kw$Kx-/R$Kx$LY.5}$LY$Lg-/R$Lg$Np.5}$Np$Nq-/R$Nq$Nu.5}$Nu$Nv-/R$Nv$Nx.5}$Nx% S-/R% S% T.5}% T% U-/R% U% X.5}% X% ^-/R% ^% d.5}% d% e-/R% e% f.5}% f% g-/R% g% h.5}% h% i-/R% i% j.5}% j% n-/R% n% o.5}% o% z-/R% z% |.5}% |%!Q-/R%!Q%!V.5}%!V%![-/R%![%!`.5}%!`%!a-/R%!a%#g.5}%#g%#h-/R%#h%#i-/R%#i&/x.5}&/x&0y-/R&0y&0z.5}&0z&1{-/R&1{&1|.5}&1|&4w-/R&4w&4}.5}&4}&5R-/R&5R&5U.5}&5U&5V-/R&5V&5W-/R&5W&5d.5}&5d&6[-/R&6[&6].5}&6]&6^-/R&6^&6c.5}&6c&6d-/R&6d&6f.5}&6f&7p-/R&7p&7w.5}&7w&7x-/R&7x&8Y.5}&8Y&8q-/R&8q&8z.5}&8z&9R-/R&9R&9S.5}&9S&9Z-/R&9Z&9[.5}&9[&9c-/R&9c&9d.5}&9d&9k-/R&9k&9l.5}&9l&9s-/R&9s&9t.5}&9t&9{-/R&9{&9|.5}&9|&:T-/R&:T&:U.5}&:U&:]-/R&:]&<P.5}&<P&<Q-/R&<Q&FZ.5}&FZ&F[-/R&F[&F]-/R&F]&GX.5}&GX&G^-/R&G^&Gc.5}&Gc&Gd-/R&Gd&Ge-/R&Ge&Gi.5}&Gi&Ic-/R&Ic&Ii.5}&Ii&Il-/R&Il&Im.5}&Im&Kk-/R&Kk&Kl.5}&Kl&Kp-/R&Kp&Ku.5}&Ku&Lp-/R&Lp&Ls.5}&Ls&Nu-/R&Nu' W.5}' W' s-/R' s'!z.5}'!z'#[-/R'#['.b.5}'.b*3f-/R*3f*5S.5}*5S40_-/R40_41d.5}41d4Js-/R4Js4LY.5}4LY4MY-/R4MY4M[.5}4M[5%T-/R5%T5%W.5}5%W5%h-/R5%h5%r.5}5%r5%s-/R5%s5%t-/R5%t5&Y.5}5&Y5'Z-/R5'Z5'k.5}5'k5(U-/R5(U5(^.5}5(^5)v-/R5)v5*y.5}5*y5+S-/R5+S5+U.5}5+U5-a-/R5-a5-c.5}5-c5-g-/R5-g5-h.5}5-h5-l-/R5-l5-x.5}5-x5.T-/R5.T5/t.5}5/t50O-/R50O50P.5}50P50S-/R50S50T.5}50T50X-/R50X50Y.5}50Y50q-/R50q51`.5}51`52f-/R52f52t.5}52t53x-/R53x55Y.5}55Y55`-/R55`55c.5}55c55d-/R55d55r.5}55r56`-/R56`56j.5}56j57R-/R57R57l.5}57l58Z-/R58Z58b.5}58b59c-/R59c5:P.5}5:P5:Q-/R5:Q5;S.5}5;S5;}-/R5;}5<f.5}5<f5<i-/R5<i5<j.5}5<j5<r-/R5<r5=W.5}5=W5=o-/R5=o5=r.5}5=r5=s-/R5=s5=x.5}5=x5>z-/R5>z5>{.5}5>{5>|-/R5>|5?P.5}5?P5?Q-/R5?Q5?R-/R5?R5?T.5}5?T5?Y-/R5?Y5?[.5}5?[5?]-/R5?]5?^.5}5?^5?_-/R5?_5?w.5}5?w5?z-/R5?z5?|.5}5?|5@X-/R5@X5@`.5}5@`5@c-/R5@c5@o.5}5@o5@u-/R5@u5@w.5}5@w5@}-/R5@}5AP.5}5AP5AV-/R5AV5A`.5}5A`5Ag-/R5Ag5Ah.5}5Ah5Ao-/R5Ao5Dv.5}5Dv5Ek-/R5Ek5FY.5}5FY;%S-/R;%S;%`.5};%`;%w-/R;%w;%{.5};%{;'O-/R;'O;'S.5};'S;=`.<b<%l?&r.5}?&r?.p-/R?.p?.r.5}?.r?1Q-/R?1Q?1x.5}?1x?2P-/R?2P?2].5}?2]?2b-/R?2b?2g.5}?2g?2h-/R?2h?2i.5}?2i?2s-/R?2s?2t.5}?2t?3R-/R?3R?3S.5}?3S?3X-/R?3X?3Y.5}?3Y?3Z-/R?3Z?3[.5}?3[?3]-/R?3]?3^-/R?3^?3_.5}?3_?3`-/R?3`?3a-/R?3a?3b.5}?3b?5r-/R?5r?6e.5}?6e?>`-/R?>`?>r.5}?>r?@U-/R?@U?@W.5}?@W?A`-/R?A`?BY.5}?BY?Bf-/R?Bf?EO.5}?EO?ET-/R?ET?EU.5}?EU?HR-/R?HR?Hw.5}?Hw?Ic-/R?Ic?Ii.5}?Ii?JT-/R?JT?J`.5}?J`?L]-/R?L]?L`.5}?L`?Lf-/R?Lf?Lh.5}?Lh?Ln-/R?Ln?Lp.5}?Lp?Lv-/R?Lv?Lx.5}?Lx?L{-/R?L{O.5}!a.6YZ!OW|SzQS!ROY.5}YZ!)tZr.5}rs.6{sw.5}wx.9vx#S.5}#S#T.;f#T;'S.5};'S;=`.<b<%lO.5}!].7UX!OWzQS!ROY.6{YZ!*jZw.6{wx.7qx#S.6{#S#T.8|#T;'S.6{;'S;=`.9p<%lO.6{!Z.7xV!OWS!ROY.7qYZ!+WZ#S.7q#S#T.8_#T;'S.7q;'S;=`.8v<%lO.7q!R.8dSS!ROY.8_Z;'S.8_;'S;=`.8p<%lO.8_!R.8sP;=`<%l.8_!Z.8yP;=`<%l.7q!T.9TVzQS!ROY.8|YZ!+oZw.8|wx.8_x;'S.8|;'S;=`.9j<%lO.8|!T.9mP;=`<%l.8|!].9sP;=`<%l.6{!_.:PX!OW|SS!ROY.9vYZ!,^Zr.9vrs.7qs#S.9v#S#T.:l#T;'S.9v;'S;=`.;`<%lO.9v!V.:sV|SS!ROY.:lYZ!,zZr.:lrs.8_s;'S.:l;'S;=`.;Y<%lO.:l!V.;]P;=`<%l.:l!_.;cP;=`<%l.9v!X.;oX|SzQS!ROY.;fYZ!-iZr.;frs.8|sw.;fwx.:lx;'S.;f;'S;=`.<[<%lO.;f!X.<_P;=`<%l.;f!a.<eP;=`<%l.5}!].<s2i!OWzQS!RmPOY.6{YZ!*jZq.6{qr.<hrs.<hst.<htu.<huv.<hvw.<hwx/Cbxz.6{z{.<h{|.<h|!O.6{!O!P.<h!P!Q.<h!Q![.<h![!a.6{!a!b.<h!b!c.6{!c!}.<h!}#O.6{#O#P.<h#P#R.6{#R#S.<h#S#T2!{#T#o.<h#o$p.6{$p$q.<h$q${.6{${$|.<h$|%Q.6{%Q%R.<h%R%W.6{%W%o.<h%o%p.6{%p&a.<h&a&b.6{&b0`.<h0`0d.6{0d0p.<h0p1O.6{1O1T.<h1T1[.6{1[1].<h1]1^.6{1^1_.<h1_4U.6{4U4Z.<h4Z4[.6{4[4].<h4]4^.<h4^4`.6{4`4d.<h4d4l.6{4l4m.<h4m4n.6{4n4q.<h4q4r.6{4r4s.<h4s4t.6{4t5Y.<h5Y5Z.6{5Z7Q.<h7Q7R.6{7R:S.<h:S:[.6{:[=p.<h=p=y.6{=y>q.<h>q>s.6{>s>t.<h>t>{.6{>{?t.<h?tA`.6{A`A{.<hA{BQ.6{BQBT.<hBTCS.6{CSDP.<hDPDt.6{DtDu.<hDuDv.<hDvDw.6{DwGO.<hGOGP.6{GPGQ.<hGQGa.6{GaGb.<hGbGc.<hGcGj.6{GjGk.<hGkGl.<hGlGv.6{GvGy.<hGyG{.6{G{G|.<hG|H^.6{H^H_.<hH_H`.6{H`IO.<hIOIm.6{ImKj.<hKjKu.6{KuKv.<hKvL`.6{L`MR.<hMRM[.6{M[M].<hM]M^.<hM^Mb.6{MbMc.<hMcMh.6{MhNO.<hNONS.6{NSNT.<hNTN^.6{N^N_.<hN_Nb.6{NbNc.<hNcNz.6{Nz! e.<h! e!#O.6{!#O!#P.<h!#P!#Q.6{!#Q!#].<h!#]!%W.6{!%W!&`.<h!&`!&c.6{!&c!&d.<h!&d!&v.6{!&v!&w.<h!&w!'O.6{!'O!'Y.<h!'Y!'i.6{!'i!'p.<h!'p!'q.6{!'q!'x.<h!'x!'}.6{!'}!(V.<h!(V!(X.6{!(X!(Y.<h!(Y!(Z.<h!(Z!(].6{!(]!(s.<h!(s!(t.6{!(t!({.<h!({!(|.6{!(|!(}.<h!(}!)Q.6{!)Q!)U.<h!)U!)X.6{!)X!)Y.<h!)Y!)j.6{!)j!)k.<h!)k!)x.6{!)x!)y.<h!)y!)z.<h!)z!){.6{!){!*O.<h!*O!*^.6{!*^!*_.<h!*_!*`.<h!*`!*s.6{!*s!*y.<h!*y!*}.6{!*}!+O.<h!+O!+P.<h!+P!+R.6{!+R!+i.<h!+i!+j.6{!+j!+q.<h!+q!+r.6{!+r!+s.<h!+s!+t.<h!+t!+u.6{!+u!+v.<h!+v!+w.<h!+w!+x.6{!+x!+y.<h!+y!+z.<h!+z!,k.6{!,k!,o.<h!,o!,p.6{!,p!,q.<h!,q!-U.6{!-U!-X.<h!-X!-i.6{!-i!-r.<h!-r!-s.6{!-s!-v.<h!-v!-w.6{!-w!._.<h!._!.`.6{!.`!.g.<h!.g!.h.6{!.h!.i.<h!.i!.j.<h!.j!.k.6{!.k!.p.<h!.p!.s.6{!.s!.t.<h!.t!/W.6{!/W!/X.<h!/X!/h.6{!/h!/i.<h!/i!/j.<h!/j!0_.6{!0_!0g.<h!0g!0i.6{!0i!0j.<h!0j!0k.<h!0k!0m.6{!0m!1T.<h!1T!1U.6{!1U!1].<h!1]!1^.6{!1^!1_.<h!1_!1`.<h!1`!1a.6{!1a!1f.<h!1f!1i.6{!1i!1j.<h!1j!2Y.6{!2Y!2Z.<h!2Z!2[.<h!2[!2].6{!2]!2`.<h!2`!2o.6{!2o!2p.<h!2p!3R.6{!3R!3S.<h!3S!3T.6{!3T!3Z.<h!3Z!3^.6{!3^!3a.<h!3a!3b.6{!3b!3f.<h!3f!3i.6{!3i!3j.<h!3j!3k.<h!3k!3l.6{!3l!3m.<h!3m!3n.6{!3n!3o.<h!3o!3p.<h!3p!3s.6{!3s!3t.<h!3t!3u.<h!3u!3x.6{!3x!3{.<h!3{!4O.6{!4O!4[.<h!4[!4r.6{!4r!4s.<h!4s!5y.6{!5y!6R.<h!6R!6S.6{!6S!6V.<h!6V!6W.6{!6W!6o.<h!6o!6p.6{!6p!6z.<h!6z!6{.6{!6{!7Q.<h!7Q!7T.6{!7T!7U.<h!7U!7p.6{!7p!7q.<h!7q!7r.<h!7r!7x.6{!7x!7y.<h!7y!7z.<h!7z!8o.6{!8o!8w.<h!8w!8x.6{!8x!8{.<h!8{!8|.6{!8|!9e.<h!9e!9f.6{!9f!9p.<h!9p!9q.6{!9q!9v.<h!9v!9y.6{!9y!9z.<h!9z!:l.6{!:l!:m.<h!:m!:n.6{!:n!:o.<h!:o!:p.<h!:p!;P.6{!;P!;Q.<h!;Q!;R.<h!;R!;e.6{!;e!;m.<h!;m!;n.6{!;n!;q.<h!;q!;r.6{!;r!<m.<h!<m!<o.6{!<o!<p.<h!<p!=Q.6{!=Q!=R.<h!=R!=d.6{!=d!=e.<h!=e!=f.<h!=f!>O.6{!>O!>U.<h!>U!>Z.6{!>Z!>m.<h!>m!>p.6{!>p!?Y.<h!?Y!?Z.6{!?Z!?d.<h!?d!?e.6{!?e!?f.<h!?f!?h.6{!?h!?o.<h!?o!@{.6{!@{!A}.<h!A}!BO.6{!BO!BP.<h!BP!BQ.<h!BQ!B^.6{!B^!Be.<h!Be!Cq.6{!Cq!Cr.<h!Cr!Cs.<h!Cs!Ct.6{!Ct!Cu.<h!Cu!Cw.6{!Cw!Cx.<h!Cx!Cy.<h!Cy!Cz.6{!Cz!C{.<h!C{!C}.6{!C}!DO.<h!DO!DU.6{!DU!DY.<h!DY!DZ.6{!DZ!Db.<h!Db!Dc.6{!Dc!Df.<h!Df!Dg.6{!Dg!Dh.<h!Dh!Di.6{!Di!Dj.<h!Dj!Dl.6{!Dl!Dm.<h!Dm!Dn.<h!Dn!Do.6{!Do!Ds.<h!Ds!Dt.6{!Dt!Du.<h!Du!Dv.<h!Dv!EP.6{!EP!EQ.<h!EQ!ES.6{!ES!EX.<h!EX!EY.6{!EY!EZ.<h!EZ!Ep.6{!Ep!Et.<h!Et!Ff.6{!Ff!Fg.<h!Fg!Gx.6{!Gx!HQ.<h!HQ!HR.6{!HR!Hw.<h!Hw!Id.6{!Id!Ii.<h!Ii!LQ.6{!LQ!L}.<h!L}!Mc.6{!Mc!Md.<h!Md!Mt.6{!Mt!Mz.<h!Mz!NO.6{!NO!NS.<h!NS!NV.6{!NV!NW.<h!NW!NZ.6{!NZ!N[.<h!N[!N].<h!N]!Nd.6{!Nd!Ng.<h!Ng!Nk.6{!Nk!Nx.<h!Nx# U.6{# U# V.<h# V# h.6{# h#!`.<h#!`#!a.6{#!a#!b.<h#!b#!g.6{#!g#!h.<h#!h#!j.6{#!j##g.<h##g##h.6{##h#*s.<h#*s#*t.6{#*t#*x.<h#*x#*z.6{#*z#+R.<h#+R#+S.6{#+S#+T.<h#+T#+U.6{#+U#+Y.<h#+Y#+[.6{#+[#,V.<h#,V#,W.6{#,W#,[.<h#,[#,^.6{#,^#-P.<h#-P#-Q.6{#-Q#-U.<h#-U#-W.6{#-W#-_.<h#-_#-`.6{#-`#-a.<h#-a#-b.6{#-b#-f.<h#-f#-h.6{#-h#-w.<h#-w#-x.6{#-x#/T.<h#/T#/U.6{#/U#/Y.<h#/Y#/[.6{#/[#0q.<h#0q#1h.6{#1h#1x.<h#1x#2Y.6{#2Y#4R.<h#4R#4_.6{#4_#Au.<h#Au#Aw.6{#Aw#BY.<h#BY#BZ.6{#BZ#Bu.<h#Bu#Bz.6{#Bz#Di.<h#Di#EO.6{#EO#E].<h#E]#E^.6{#E^#Eb.<h#Eb#Ep.6{#Ep#FS.<h#FS#Fb.6{#Fb#Ft.<h#Ft#GS.6{#GS#Ga.<h#Ga#Gb.6{#Gb#Ge.<h#Ge#Gt.6{#Gt#Hz.<h#Hz#Io.6{#Io#Ip.<h#Ip#It.6{#It#Iu.<h#Iu#K[.6{#K[#MW.<h#MW#M`.6{#M`#NZ.<h#NZ#N[.6{#N[#N].<h#N]#Nb.6{#Nb$ z.<h$ z$!U.6{$!U$!s.<h$!s$#x.6{$#x$$h.<h$$h$$j.6{$$j$$o.<h$$o$$z.6{$$z$%x.<h$%x$&_.6{$&_$&f.<h$&f$'p.6{$'p$(X.<h$(X$(b.6{$(b$)i.<h$)i$+_.6{$+_$+`.<h$+`$-a.6{$-a$.b.<h$.b$.s.6{$.s$.z.<h$.z$0T.6{$0T$0s.<h$0s$1Q.6{$1Q$1R.<h$1R$1S.<h$1S$1^.6{$1^$2[.<h$2[$2v.6{$2v$3l.<h$3l$4g.6{$4g$4j.<h$4j$4t.6{$4t$5j.<h$5j$7y.6{$7y$7}.<h$7}$8O.6{$8O$8S.<h$8S$8V.6{$8V$8W.<h$8W$8X.<h$8X$8b.6{$8b$<j.<h$<j$=|.6{$=|$DO.<h$DO$DQ.6{$DQ$DW.<h$DW$DY.6{$DY$EQ.<h$EQ$ES.6{$ES$EY.<h$EY$E[.6{$E[$Ed.<h$Ed$Ee.6{$Ee$Ef.<h$Ef$Eg.6{$Eg$Eh.<h$Eh$Ei.6{$Ei$Ej.<h$Ej$Ek.6{$Ek$F[.<h$F[$F^.6{$F^$Ge.<h$Ge$Gf.6{$Gf$Gm.<h$Gm$Gn.6{$Gn$Go.<h$Go$Gr.6{$Gr$Gu.<h$Gu$Gv.6{$Gv$G}.<h$G}$HQ.6{$HQ$HU.<h$HU$HW.6{$HW$H^.<h$H^$Hb.6{$Hb$Ho.<h$Ho$Ht.6{$Ht$Hw.<h$Hw$Hx.6{$Hx$IP.<h$IP$Ki.6{$Ki$Kj.<h$Kj$Kw.6{$Kw$Kx.<h$Kx$LY.6{$LY$Lg.<h$Lg$Np.6{$Np$Nq.<h$Nq$Nu.6{$Nu$Nv.<h$Nv$Nx.6{$Nx% S.<h% S% T.6{% T% U.<h% U% X.6{% X% ^.<h% ^% d.6{% d% e.<h% e% f.6{% f% g.<h% g% h.6{% h% i.<h% i% j.6{% j% n.<h% n% o.6{% o% z.<h% z% |.6{% |%!Q.<h%!Q%!V.6{%!V%![.<h%![%!`.6{%!`%!a.<h%!a%#g.6{%#g%#h.<h%#h%#i.<h%#i&/x.6{&/x&0y.<h&0y&0z.6{&0z&1{.<h&1{&1|.6{&1|&4w.<h&4w&4}.6{&4}&5R.<h&5R&5U.6{&5U&5V.<h&5V&5W.<h&5W&5d.6{&5d&6[.<h&6[&6].6{&6]&6^.<h&6^&6c.6{&6c&6d.<h&6d&6f.6{&6f&7p.<h&7p&7w.6{&7w&7x.<h&7x&8Y.6{&8Y&8q.<h&8q&8z.6{&8z&9R.<h&9R&9S.6{&9S&9Z.<h&9Z&9[.6{&9[&9c.<h&9c&9d.6{&9d&9k.<h&9k&9l.6{&9l&9s.<h&9s&9t.6{&9t&9{.<h&9{&9|.6{&9|&:T.<h&:T&:U.6{&:U&:].<h&:]&<P.6{&<P&<Q.<h&<Q&FZ.6{&FZ&F[.<h&F[&F].<h&F]&GX.6{&GX&G^.<h&G^&Gc.6{&Gc&Gd.<h&Gd&Ge.<h&Ge&Gi.6{&Gi&Ic.<h&Ic&Ii.6{&Ii&Il.<h&Il&Im.6{&Im&Kk.<h&Kk&Kl.6{&Kl&Kp.<h&Kp&Ku.6{&Ku&Lp.<h&Lp&Ls.6{&Ls&Nu.<h&Nu' W.6{' W' s.<h' s'!z.6{'!z'#[.<h'#['.b.6{'.b*3f.<h*3f*5S.6{*5S40_.<h40_41d.6{41d4Js.<h4Js4LY.6{4LY4MY.<h4MY4M[.6{4M[5%T.<h5%T5%W.6{5%W5%h.<h5%h5%r.6{5%r5%s.<h5%s5%t.<h5%t5&Y.6{5&Y5'Z.<h5'Z5'k.6{5'k5(U.<h5(U5(^.6{5(^5)v.<h5)v5*y.6{5*y5+S.<h5+S5+U.6{5+U5-a.<h5-a5-c.6{5-c5-g.<h5-g5-h.6{5-h5-l.<h5-l5-x.6{5-x5.T.<h5.T5/t.6{5/t50O.<h50O50P.6{50P50S.<h50S50T.6{50T50X.<h50X50Y.6{50Y50q.<h50q51`.6{51`52f.<h52f52t.6{52t53x.<h53x55Y.6{55Y55`.<h55`55c.6{55c55d.<h55d55r.6{55r56`.<h56`56j.6{56j57R.<h57R57l.6{57l58Z.<h58Z58b.6{58b59c.<h59c5:P.6{5:P5:Q.<h5:Q5;S.6{5;S5;}.<h5;}5<f.6{5<f5<i.<h5<i5<j.6{5<j5<r.<h5<r5=W.6{5=W5=o.<h5=o5=r.6{5=r5=s.<h5=s5=x.6{5=x5>z.<h5>z5>{.6{5>{5>|.<h5>|5?P.6{5?P5?Q.<h5?Q5?R.<h5?R5?T.6{5?T5?Y.<h5?Y5?[.6{5?[5?].<h5?]5?^.6{5?^5?_.<h5?_5?w.6{5?w5?z.<h5?z5?|.6{5?|5@X.<h5@X5@`.6{5@`5@c.<h5@c5@o.6{5@o5@u.<h5@u5@w.6{5@w5@}.<h5@}5AP.6{5AP5AV.<h5AV5A`.6{5A`5Ag.<h5Ag5Ah.6{5Ah5Ao.<h5Ao5Dv.6{5Dv5Ek.<h5Ek5FY.6{5FY;%S.<h;%S;%`.6{;%`;%w.<h;%w;%{.6{;%{;'O.<h;'O;'S.6{;'S;=`.9p<%l?&r.6{?&r?.p.<h?.p?.r.6{?.r?1Q.<h?1Q?1x.6{?1x?2P.<h?2P?2].6{?2]?2b.<h?2b?2g.6{?2g?2h.<h?2h?2i.6{?2i?2s.<h?2s?2t.6{?2t?3R.<h?3R?3S.6{?3S?3X.<h?3X?3Y.6{?3Y?3Z.<h?3Z?3[.6{?3[?3].<h?3]?3^.<h?3^?3_.6{?3_?3`.<h?3`?3a.<h?3a?3b.6{?3b?5r.<h?5r?6e.6{?6e?>`.<h?>`?>r.6{?>r?@U.<h?@U?@W.6{?@W?A`.<h?A`?BY.6{?BY?Bf.<h?Bf?EO.6{?EO?ET.<h?ET?EU.6{?EU?HR.<h?HR?Hw.6{?Hw?Ic.<h?Ic?Ii.6{?Ii?JT.<h?JT?J`.6{?J`?L].<h?L]?L`.6{?L`?Lf.<h?Lf?Lh.6{?Lh?Ln.<h?Ln?Lp.6{?Lp?Lv.<h?Lv?Lx.6{?Lx?L{.<h?L{O.6{!Z/Ck2i!OWS!RmPOY.7qYZ!+WZq.7qqr/Cbrs/Cbst/Cbtu/Cbuv/Cbvw/Cbwx/Cbxz.7qz{/Cb{|/Cb|!O.7q!O!P/Cb!P!Q/Cb!Q![/Cb![!a.7q!a!b/Cb!b!c.7q!c!}/Cb!}#O.7q#O#P/Cb#P#R.7q#R#S/Cb#S#T0JY#T#o/Cb#o$p.7q$p$q/Cb$q${.7q${$|/Cb$|%Q.7q%Q%R/Cb%R%W.7q%W%o/Cb%o%p.7q%p&a/Cb&a&b.7q&b0`/Cb0`0d.7q0d0p/Cb0p1O.7q1O1T/Cb1T1[.7q1[1]/Cb1]1^.7q1^1_/Cb1_4U.7q4U4Z/Cb4Z4[.7q4[4]/Cb4]4^/Cb4^4`.7q4`4d/Cb4d4l.7q4l4m/Cb4m4n.7q4n4q/Cb4q4r.7q4r4s/Cb4s4t.7q4t5Y/Cb5Y5Z.7q5Z7Q/Cb7Q7R.7q7R:S/Cb:S:[.7q:[=p/Cb=p=y.7q=y>q/Cb>q>s.7q>s>t/Cb>t>{.7q>{?t/Cb?tA`.7qA`A{/CbA{BQ.7qBQBT/CbBTCS.7qCSDP/CbDPDt.7qDtDu/CbDuDv/CbDvDw.7qDwGO/CbGOGP.7qGPGQ/CbGQGa.7qGaGb/CbGbGc/CbGcGj.7qGjGk/CbGkGl/CbGlGv.7qGvGy/CbGyG{.7qG{G|/CbG|H^.7qH^H_/CbH_H`.7qH`IO/CbIOIm.7qImKj/CbKjKu.7qKuKv/CbKvL`.7qL`MR/CbMRM[.7qM[M]/CbM]M^/CbM^Mb.7qMbMc/CbMcMh.7qMhNO/CbNONS.7qNSNT/CbNTN^.7qN^N_/CbN_Nb.7qNbNc/CbNcNz.7qNz! e/Cb! e!#O.7q!#O!#P/Cb!#P!#Q.7q!#Q!#]/Cb!#]!%W.7q!%W!&`/Cb!&`!&c.7q!&c!&d/Cb!&d!&v.7q!&v!&w/Cb!&w!'O.7q!'O!'Y/Cb!'Y!'i.7q!'i!'p/Cb!'p!'q.7q!'q!'x/Cb!'x!'}.7q!'}!(V/Cb!(V!(X.7q!(X!(Y/Cb!(Y!(Z/Cb!(Z!(].7q!(]!(s/Cb!(s!(t.7q!(t!({/Cb!({!(|.7q!(|!(}/Cb!(}!)Q.7q!)Q!)U/Cb!)U!)X.7q!)X!)Y/Cb!)Y!)j.7q!)j!)k/Cb!)k!)x.7q!)x!)y/Cb!)y!)z/Cb!)z!){.7q!){!*O/Cb!*O!*^.7q!*^!*_/Cb!*_!*`/Cb!*`!*s.7q!*s!*y/Cb!*y!*}.7q!*}!+O/Cb!+O!+P/Cb!+P!+R.7q!+R!+i/Cb!+i!+j.7q!+j!+q/Cb!+q!+r.7q!+r!+s/Cb!+s!+t/Cb!+t!+u.7q!+u!+v/Cb!+v!+w/Cb!+w!+x.7q!+x!+y/Cb!+y!+z/Cb!+z!,k.7q!,k!,o/Cb!,o!,p.7q!,p!,q/Cb!,q!-U.7q!-U!-X/Cb!-X!-i.7q!-i!-r/Cb!-r!-s.7q!-s!-v/Cb!-v!-w.7q!-w!._/Cb!._!.`.7q!.`!.g/Cb!.g!.h.7q!.h!.i/Cb!.i!.j/Cb!.j!.k.7q!.k!.p/Cb!.p!.s.7q!.s!.t/Cb!.t!/W.7q!/W!/X/Cb!/X!/h.7q!/h!/i/Cb!/i!/j/Cb!/j!0_.7q!0_!0g/Cb!0g!0i.7q!0i!0j/Cb!0j!0k/Cb!0k!0m.7q!0m!1T/Cb!1T!1U.7q!1U!1]/Cb!1]!1^.7q!1^!1_/Cb!1_!1`/Cb!1`!1a.7q!1a!1f/Cb!1f!1i.7q!1i!1j/Cb!1j!2Y.7q!2Y!2Z/Cb!2Z!2[/Cb!2[!2].7q!2]!2`/Cb!2`!2o.7q!2o!2p/Cb!2p!3R.7q!3R!3S/Cb!3S!3T.7q!3T!3Z/Cb!3Z!3^.7q!3^!3a/Cb!3a!3b.7q!3b!3f/Cb!3f!3i.7q!3i!3j/Cb!3j!3k/Cb!3k!3l.7q!3l!3m/Cb!3m!3n.7q!3n!3o/Cb!3o!3p/Cb!3p!3s.7q!3s!3t/Cb!3t!3u/Cb!3u!3x.7q!3x!3{/Cb!3{!4O.7q!4O!4[/Cb!4[!4r.7q!4r!4s/Cb!4s!5y.7q!5y!6R/Cb!6R!6S.7q!6S!6V/Cb!6V!6W.7q!6W!6o/Cb!6o!6p.7q!6p!6z/Cb!6z!6{.7q!6{!7Q/Cb!7Q!7T.7q!7T!7U/Cb!7U!7p.7q!7p!7q/Cb!7q!7r/Cb!7r!7x.7q!7x!7y/Cb!7y!7z/Cb!7z!8o.7q!8o!8w/Cb!8w!8x.7q!8x!8{/Cb!8{!8|.7q!8|!9e/Cb!9e!9f.7q!9f!9p/Cb!9p!9q.7q!9q!9v/Cb!9v!9y.7q!9y!9z/Cb!9z!:l.7q!:l!:m/Cb!:m!:n.7q!:n!:o/Cb!:o!:p/Cb!:p!;P.7q!;P!;Q/Cb!;Q!;R/Cb!;R!;e.7q!;e!;m/Cb!;m!;n.7q!;n!;q/Cb!;q!;r.7q!;r!<m/Cb!<m!<o.7q!<o!<p/Cb!<p!=Q.7q!=Q!=R/Cb!=R!=d.7q!=d!=e/Cb!=e!=f/Cb!=f!>O.7q!>O!>U/Cb!>U!>Z.7q!>Z!>m/Cb!>m!>p.7q!>p!?Y/Cb!?Y!?Z.7q!?Z!?d/Cb!?d!?e.7q!?e!?f/Cb!?f!?h.7q!?h!?o/Cb!?o!@{.7q!@{!A}/Cb!A}!BO.7q!BO!BP/Cb!BP!BQ/Cb!BQ!B^.7q!B^!Be/Cb!Be!Cq.7q!Cq!Cr/Cb!Cr!Cs/Cb!Cs!Ct.7q!Ct!Cu/Cb!Cu!Cw.7q!Cw!Cx/Cb!Cx!Cy/Cb!Cy!Cz.7q!Cz!C{/Cb!C{!C}.7q!C}!DO/Cb!DO!DU.7q!DU!DY/Cb!DY!DZ.7q!DZ!Db/Cb!Db!Dc.7q!Dc!Df/Cb!Df!Dg.7q!Dg!Dh/Cb!Dh!Di.7q!Di!Dj/Cb!Dj!Dl.7q!Dl!Dm/Cb!Dm!Dn/Cb!Dn!Do.7q!Do!Ds/Cb!Ds!Dt.7q!Dt!Du/Cb!Du!Dv/Cb!Dv!EP.7q!EP!EQ/Cb!EQ!ES.7q!ES!EX/Cb!EX!EY.7q!EY!EZ/Cb!EZ!Ep.7q!Ep!Et/Cb!Et!Ff.7q!Ff!Fg/Cb!Fg!Gx.7q!Gx!HQ/Cb!HQ!HR.7q!HR!Hw/Cb!Hw!Id.7q!Id!Ii/Cb!Ii!LQ.7q!LQ!L}/Cb!L}!Mc.7q!Mc!Md/Cb!Md!Mt.7q!Mt!Mz/Cb!Mz!NO.7q!NO!NS/Cb!NS!NV.7q!NV!NW/Cb!NW!NZ.7q!NZ!N[/Cb!N[!N]/Cb!N]!Nd.7q!Nd!Ng/Cb!Ng!Nk.7q!Nk!Nx/Cb!Nx# U.7q# U# V/Cb# V# h.7q# h#!`/Cb#!`#!a.7q#!a#!b/Cb#!b#!g.7q#!g#!h/Cb#!h#!j.7q#!j##g/Cb##g##h.7q##h#*s/Cb#*s#*t.7q#*t#*x/Cb#*x#*z.7q#*z#+R/Cb#+R#+S.7q#+S#+T/Cb#+T#+U.7q#+U#+Y/Cb#+Y#+[.7q#+[#,V/Cb#,V#,W.7q#,W#,[/Cb#,[#,^.7q#,^#-P/Cb#-P#-Q.7q#-Q#-U/Cb#-U#-W.7q#-W#-_/Cb#-_#-`.7q#-`#-a/Cb#-a#-b.7q#-b#-f/Cb#-f#-h.7q#-h#-w/Cb#-w#-x.7q#-x#/T/Cb#/T#/U.7q#/U#/Y/Cb#/Y#/[.7q#/[#0q/Cb#0q#1h.7q#1h#1x/Cb#1x#2Y.7q#2Y#4R/Cb#4R#4_.7q#4_#Au/Cb#Au#Aw.7q#Aw#BY/Cb#BY#BZ.7q#BZ#Bu/Cb#Bu#Bz.7q#Bz#Di/Cb#Di#EO.7q#EO#E]/Cb#E]#E^.7q#E^#Eb/Cb#Eb#Ep.7q#Ep#FS/Cb#FS#Fb.7q#Fb#Ft/Cb#Ft#GS.7q#GS#Ga/Cb#Ga#Gb.7q#Gb#Ge/Cb#Ge#Gt.7q#Gt#Hz/Cb#Hz#Io.7q#Io#Ip/Cb#Ip#It.7q#It#Iu/Cb#Iu#K[.7q#K[#MW/Cb#MW#M`.7q#M`#NZ/Cb#NZ#N[.7q#N[#N]/Cb#N]#Nb.7q#Nb$ z/Cb$ z$!U.7q$!U$!s/Cb$!s$#x.7q$#x$$h/Cb$$h$$j.7q$$j$$o/Cb$$o$$z.7q$$z$%x/Cb$%x$&_.7q$&_$&f/Cb$&f$'p.7q$'p$(X/Cb$(X$(b.7q$(b$)i/Cb$)i$+_.7q$+_$+`/Cb$+`$-a.7q$-a$.b/Cb$.b$.s.7q$.s$.z/Cb$.z$0T.7q$0T$0s/Cb$0s$1Q.7q$1Q$1R/Cb$1R$1S/Cb$1S$1^.7q$1^$2[/Cb$2[$2v.7q$2v$3l/Cb$3l$4g.7q$4g$4j/Cb$4j$4t.7q$4t$5j/Cb$5j$7y.7q$7y$7}/Cb$7}$8O.7q$8O$8S/Cb$8S$8V.7q$8V$8W/Cb$8W$8X/Cb$8X$8b.7q$8b$<j/Cb$<j$=|.7q$=|$DO/Cb$DO$DQ.7q$DQ$DW/Cb$DW$DY.7q$DY$EQ/Cb$EQ$ES.7q$ES$EY/Cb$EY$E[.7q$E[$Ed/Cb$Ed$Ee.7q$Ee$Ef/Cb$Ef$Eg.7q$Eg$Eh/Cb$Eh$Ei.7q$Ei$Ej/Cb$Ej$Ek.7q$Ek$F[/Cb$F[$F^.7q$F^$Ge/Cb$Ge$Gf.7q$Gf$Gm/Cb$Gm$Gn.7q$Gn$Go/Cb$Go$Gr.7q$Gr$Gu/Cb$Gu$Gv.7q$Gv$G}/Cb$G}$HQ.7q$HQ$HU/Cb$HU$HW.7q$HW$H^/Cb$H^$Hb.7q$Hb$Ho/Cb$Ho$Ht.7q$Ht$Hw/Cb$Hw$Hx.7q$Hx$IP/Cb$IP$Ki.7q$Ki$Kj/Cb$Kj$Kw.7q$Kw$Kx/Cb$Kx$LY.7q$LY$Lg/Cb$Lg$Np.7q$Np$Nq/Cb$Nq$Nu.7q$Nu$Nv/Cb$Nv$Nx.7q$Nx% S/Cb% S% T.7q% T% U/Cb% U% X.7q% X% ^/Cb% ^% d.7q% d% e/Cb% e% f.7q% f% g/Cb% g% h.7q% h% i/Cb% i% j.7q% j% n/Cb% n% o.7q% o% z/Cb% z% |.7q% |%!Q/Cb%!Q%!V.7q%!V%![/Cb%![%!`.7q%!`%!a/Cb%!a%#g.7q%#g%#h/Cb%#h%#i/Cb%#i&/x.7q&/x&0y/Cb&0y&0z.7q&0z&1{/Cb&1{&1|.7q&1|&4w/Cb&4w&4}.7q&4}&5R/Cb&5R&5U.7q&5U&5V/Cb&5V&5W/Cb&5W&5d.7q&5d&6[/Cb&6[&6].7q&6]&6^/Cb&6^&6c.7q&6c&6d/Cb&6d&6f.7q&6f&7p/Cb&7p&7w.7q&7w&7x/Cb&7x&8Y.7q&8Y&8q/Cb&8q&8z.7q&8z&9R/Cb&9R&9S.7q&9S&9Z/Cb&9Z&9[.7q&9[&9c/Cb&9c&9d.7q&9d&9k/Cb&9k&9l.7q&9l&9s/Cb&9s&9t.7q&9t&9{/Cb&9{&9|.7q&9|&:T/Cb&:T&:U.7q&:U&:]/Cb&:]&<P.7q&<P&<Q/Cb&<Q&FZ.7q&FZ&F[/Cb&F[&F]/Cb&F]&GX.7q&GX&G^/Cb&G^&Gc.7q&Gc&Gd/Cb&Gd&Ge/Cb&Ge&Gi.7q&Gi&Ic/Cb&Ic&Ii.7q&Ii&Il/Cb&Il&Im.7q&Im&Kk/Cb&Kk&Kl.7q&Kl&Kp/Cb&Kp&Ku.7q&Ku&Lp/Cb&Lp&Ls.7q&Ls&Nu/Cb&Nu' W.7q' W' s/Cb' s'!z.7q'!z'#[/Cb'#['.b.7q'.b*3f/Cb*3f*5S.7q*5S40_/Cb40_41d.7q41d4Js/Cb4Js4LY.7q4LY4MY/Cb4MY4M[.7q4M[5%T/Cb5%T5%W.7q5%W5%h/Cb5%h5%r.7q5%r5%s/Cb5%s5%t/Cb5%t5&Y.7q5&Y5'Z/Cb5'Z5'k.7q5'k5(U/Cb5(U5(^.7q5(^5)v/Cb5)v5*y.7q5*y5+S/Cb5+S5+U.7q5+U5-a/Cb5-a5-c.7q5-c5-g/Cb5-g5-h.7q5-h5-l/Cb5-l5-x.7q5-x5.T/Cb5.T5/t.7q5/t50O/Cb50O50P.7q50P50S/Cb50S50T.7q50T50X/Cb50X50Y.7q50Y50q/Cb50q51`.7q51`52f/Cb52f52t.7q52t53x/Cb53x55Y.7q55Y55`/Cb55`55c.7q55c55d/Cb55d55r.7q55r56`/Cb56`56j.7q56j57R/Cb57R57l.7q57l58Z/Cb58Z58b.7q58b59c/Cb59c5:P.7q5:P5:Q/Cb5:Q5;S.7q5;S5;}/Cb5;}5<f.7q5<f5<i/Cb5<i5<j.7q5<j5<r/Cb5<r5=W.7q5=W5=o/Cb5=o5=r.7q5=r5=s/Cb5=s5=x.7q5=x5>z/Cb5>z5>{.7q5>{5>|/Cb5>|5?P.7q5?P5?Q/Cb5?Q5?R/Cb5?R5?T.7q5?T5?Y/Cb5?Y5?[.7q5?[5?]/Cb5?]5?^.7q5?^5?_/Cb5?_5?w.7q5?w5?z/Cb5?z5?|.7q5?|5@X/Cb5@X5@`.7q5@`5@c/Cb5@c5@o.7q5@o5@u/Cb5@u5@w.7q5@w5@}/Cb5@}5AP.7q5AP5AV/Cb5AV5A`.7q5A`5Ag/Cb5Ag5Ah.7q5Ah5Ao/Cb5Ao5Dv.7q5Dv5Ek/Cb5Ek5FY.7q5FY;%S/Cb;%S;%`.7q;%`;%w/Cb;%w;%{.7q;%{;'O/Cb;'O;'S.7q;'S;=`.8v<%l?&r.7q?&r?.p/Cb?.p?.r.7q?.r?1Q/Cb?1Q?1x.7q?1x?2P/Cb?2P?2].7q?2]?2b/Cb?2b?2g.7q?2g?2h/Cb?2h?2i.7q?2i?2s/Cb?2s?2t.7q?2t?3R/Cb?3R?3S.7q?3S?3X/Cb?3X?3Y.7q?3Y?3Z/Cb?3Z?3[.7q?3[?3]/Cb?3]?3^/Cb?3^?3_.7q?3_?3`/Cb?3`?3a/Cb?3a?3b.7q?3b?5r/Cb?5r?6e.7q?6e?>`/Cb?>`?>r.7q?>r?@U/Cb?@U?@W.7q?@W?A`/Cb?A`?BY.7q?BY?Bf/Cb?Bf?EO.7q?EO?ET/Cb?ET?EU.7q?EU?HR/Cb?HR?Hw.7q?Hw?Ic/Cb?Ic?Ii.7q?Ii?JT/Cb?JT?J`.7q?J`?L]/Cb?L]?L`.7q?L`?Lf/Cb?Lf?Lh.7q?Lh?Ln/Cb?Ln?Lp.7q?Lp?Lv/Cb?Lv?Lx.7q?Lx?L{/Cb?L{O.7q!R0Ja2hS!RmPOY.8_Zq.8_qr0JYrs0JYst0JYtu0JYuv0JYvw0JYwx0JYxz.8_z{0JY{|0JY|!O.8_!O!P0JY!P!Q0JY!Q![0JY![!a.8_!a!b0JY!b!c.8_!c!}0JY!}#O.8_#O#P0JY#P#R.8_#R#S0JY#S#T0JY#T#o0JY#o$p.8_$p$q0JY$q${.8_${$|0JY$|%Q.8_%Q%R0JY%R%W.8_%W%o0JY%o%p.8_%p&a0JY&a&b.8_&b0`0JY0`0d.8_0d0p0JY0p1O.8_1O1T0JY1T1[.8_1[1]0JY1]1^.8_1^1_0JY1_4U.8_4U4Z0JY4Z4[.8_4[4]0JY4]4^0JY4^4`.8_4`4d0JY4d4l.8_4l4m0JY4m4n.8_4n4q0JY4q4r.8_4r4s0JY4s4t.8_4t5Y0JY5Y5Z.8_5Z7Q0JY7Q7R.8_7R:S0JY:S:[.8_:[=p0JY=p=y.8_=y>q0JY>q>s.8_>s>t0JY>t>{.8_>{?t0JY?tA`.8_A`A{0JYA{BQ.8_BQBT0JYBTCS.8_CSDP0JYDPDt.8_DtDu0JYDuDv0JYDvDw.8_DwGO0JYGOGP.8_GPGQ0JYGQGa.8_GaGb0JYGbGc0JYGcGj.8_GjGk0JYGkGl0JYGlGv.8_GvGy0JYGyG{.8_G{G|0JYG|H^.8_H^H_0JYH_H`.8_H`IO0JYIOIm.8_ImKj0JYKjKu.8_KuKv0JYKvL`.8_L`MR0JYMRM[.8_M[M]0JYM]M^0JYM^Mb.8_MbMc0JYMcMh.8_MhNO0JYNONS.8_NSNT0JYNTN^.8_N^N_0JYN_Nb.8_NbNc0JYNcNz.8_Nz! e0JY! e!#O.8_!#O!#P0JY!#P!#Q.8_!#Q!#]0JY!#]!%W.8_!%W!&`0JY!&`!&c.8_!&c!&d0JY!&d!&v.8_!&v!&w0JY!&w!'O.8_!'O!'Y0JY!'Y!'i.8_!'i!'p0JY!'p!'q.8_!'q!'x0JY!'x!'}.8_!'}!(V0JY!(V!(X.8_!(X!(Y0JY!(Y!(Z0JY!(Z!(].8_!(]!(s0JY!(s!(t.8_!(t!({0JY!({!(|.8_!(|!(}0JY!(}!)Q.8_!)Q!)U0JY!)U!)X.8_!)X!)Y0JY!)Y!)j.8_!)j!)k0JY!)k!)x.8_!)x!)y0JY!)y!)z0JY!)z!){.8_!){!*O0JY!*O!*^.8_!*^!*_0JY!*_!*`0JY!*`!*s.8_!*s!*y0JY!*y!*}.8_!*}!+O0JY!+O!+P0JY!+P!+R.8_!+R!+i0JY!+i!+j.8_!+j!+q0JY!+q!+r.8_!+r!+s0JY!+s!+t0JY!+t!+u.8_!+u!+v0JY!+v!+w0JY!+w!+x.8_!+x!+y0JY!+y!+z0JY!+z!,k.8_!,k!,o0JY!,o!,p.8_!,p!,q0JY!,q!-U.8_!-U!-X0JY!-X!-i.8_!-i!-r0JY!-r!-s.8_!-s!-v0JY!-v!-w.8_!-w!._0JY!._!.`.8_!.`!.g0JY!.g!.h.8_!.h!.i0JY!.i!.j0JY!.j!.k.8_!.k!.p0JY!.p!.s.8_!.s!.t0JY!.t!/W.8_!/W!/X0JY!/X!/h.8_!/h!/i0JY!/i!/j0JY!/j!0_.8_!0_!0g0JY!0g!0i.8_!0i!0j0JY!0j!0k0JY!0k!0m.8_!0m!1T0JY!1T!1U.8_!1U!1]0JY!1]!1^.8_!1^!1_0JY!1_!1`0JY!1`!1a.8_!1a!1f0JY!1f!1i.8_!1i!1j0JY!1j!2Y.8_!2Y!2Z0JY!2Z!2[0JY!2[!2].8_!2]!2`0JY!2`!2o.8_!2o!2p0JY!2p!3R.8_!3R!3S0JY!3S!3T.8_!3T!3Z0JY!3Z!3^.8_!3^!3a0JY!3a!3b.8_!3b!3f0JY!3f!3i.8_!3i!3j0JY!3j!3k0JY!3k!3l.8_!3l!3m0JY!3m!3n.8_!3n!3o0JY!3o!3p0JY!3p!3s.8_!3s!3t0JY!3t!3u0JY!3u!3x.8_!3x!3{0JY!3{!4O.8_!4O!4[0JY!4[!4r.8_!4r!4s0JY!4s!5y.8_!5y!6R0JY!6R!6S.8_!6S!6V0JY!6V!6W.8_!6W!6o0JY!6o!6p.8_!6p!6z0JY!6z!6{.8_!6{!7Q0JY!7Q!7T.8_!7T!7U0JY!7U!7p.8_!7p!7q0JY!7q!7r0JY!7r!7x.8_!7x!7y0JY!7y!7z0JY!7z!8o.8_!8o!8w0JY!8w!8x.8_!8x!8{0JY!8{!8|.8_!8|!9e0JY!9e!9f.8_!9f!9p0JY!9p!9q.8_!9q!9v0JY!9v!9y.8_!9y!9z0JY!9z!:l.8_!:l!:m0JY!:m!:n.8_!:n!:o0JY!:o!:p0JY!:p!;P.8_!;P!;Q0JY!;Q!;R0JY!;R!;e.8_!;e!;m0JY!;m!;n.8_!;n!;q0JY!;q!;r.8_!;r!<m0JY!<m!<o.8_!<o!<p0JY!<p!=Q.8_!=Q!=R0JY!=R!=d.8_!=d!=e0JY!=e!=f0JY!=f!>O.8_!>O!>U0JY!>U!>Z.8_!>Z!>m0JY!>m!>p.8_!>p!?Y0JY!?Y!?Z.8_!?Z!?d0JY!?d!?e.8_!?e!?f0JY!?f!?h.8_!?h!?o0JY!?o!@{.8_!@{!A}0JY!A}!BO.8_!BO!BP0JY!BP!BQ0JY!BQ!B^.8_!B^!Be0JY!Be!Cq.8_!Cq!Cr0JY!Cr!Cs0JY!Cs!Ct.8_!Ct!Cu0JY!Cu!Cw.8_!Cw!Cx0JY!Cx!Cy0JY!Cy!Cz.8_!Cz!C{0JY!C{!C}.8_!C}!DO0JY!DO!DU.8_!DU!DY0JY!DY!DZ.8_!DZ!Db0JY!Db!Dc.8_!Dc!Df0JY!Df!Dg.8_!Dg!Dh0JY!Dh!Di.8_!Di!Dj0JY!Dj!Dl.8_!Dl!Dm0JY!Dm!Dn0JY!Dn!Do.8_!Do!Ds0JY!Ds!Dt.8_!Dt!Du0JY!Du!Dv0JY!Dv!EP.8_!EP!EQ0JY!EQ!ES.8_!ES!EX0JY!EX!EY.8_!EY!EZ0JY!EZ!Ep.8_!Ep!Et0JY!Et!Ff.8_!Ff!Fg0JY!Fg!Gx.8_!Gx!HQ0JY!HQ!HR.8_!HR!Hw0JY!Hw!Id.8_!Id!Ii0JY!Ii!LQ.8_!LQ!L}0JY!L}!Mc.8_!Mc!Md0JY!Md!Mt.8_!Mt!Mz0JY!Mz!NO.8_!NO!NS0JY!NS!NV.8_!NV!NW0JY!NW!NZ.8_!NZ!N[0JY!N[!N]0JY!N]!Nd.8_!Nd!Ng0JY!Ng!Nk.8_!Nk!Nx0JY!Nx# U.8_# U# V0JY# V# h.8_# h#!`0JY#!`#!a.8_#!a#!b0JY#!b#!g.8_#!g#!h0JY#!h#!j.8_#!j##g0JY##g##h.8_##h#*s0JY#*s#*t.8_#*t#*x0JY#*x#*z.8_#*z#+R0JY#+R#+S.8_#+S#+T0JY#+T#+U.8_#+U#+Y0JY#+Y#+[.8_#+[#,V0JY#,V#,W.8_#,W#,[0JY#,[#,^.8_#,^#-P0JY#-P#-Q.8_#-Q#-U0JY#-U#-W.8_#-W#-_0JY#-_#-`.8_#-`#-a0JY#-a#-b.8_#-b#-f0JY#-f#-h.8_#-h#-w0JY#-w#-x.8_#-x#/T0JY#/T#/U.8_#/U#/Y0JY#/Y#/[.8_#/[#0q0JY#0q#1h.8_#1h#1x0JY#1x#2Y.8_#2Y#4R0JY#4R#4_.8_#4_#Au0JY#Au#Aw.8_#Aw#BY0JY#BY#BZ.8_#BZ#Bu0JY#Bu#Bz.8_#Bz#Di0JY#Di#EO.8_#EO#E]0JY#E]#E^.8_#E^#Eb0JY#Eb#Ep.8_#Ep#FS0JY#FS#Fb.8_#Fb#Ft0JY#Ft#GS.8_#GS#Ga0JY#Ga#Gb.8_#Gb#Ge0JY#Ge#Gt.8_#Gt#Hz0JY#Hz#Io.8_#Io#Ip0JY#Ip#It.8_#It#Iu0JY#Iu#K[.8_#K[#MW0JY#MW#M`.8_#M`#NZ0JY#NZ#N[.8_#N[#N]0JY#N]#Nb.8_#Nb$ z0JY$ z$!U.8_$!U$!s0JY$!s$#x.8_$#x$$h0JY$$h$$j.8_$$j$$o0JY$$o$$z.8_$$z$%x0JY$%x$&_.8_$&_$&f0JY$&f$'p.8_$'p$(X0JY$(X$(b.8_$(b$)i0JY$)i$+_.8_$+_$+`0JY$+`$-a.8_$-a$.b0JY$.b$.s.8_$.s$.z0JY$.z$0T.8_$0T$0s0JY$0s$1Q.8_$1Q$1R0JY$1R$1S0JY$1S$1^.8_$1^$2[0JY$2[$2v.8_$2v$3l0JY$3l$4g.8_$4g$4j0JY$4j$4t.8_$4t$5j0JY$5j$7y.8_$7y$7}0JY$7}$8O.8_$8O$8S0JY$8S$8V.8_$8V$8W0JY$8W$8X0JY$8X$8b.8_$8b$<j0JY$<j$=|.8_$=|$DO0JY$DO$DQ.8_$DQ$DW0JY$DW$DY.8_$DY$EQ0JY$EQ$ES.8_$ES$EY0JY$EY$E[.8_$E[$Ed0JY$Ed$Ee.8_$Ee$Ef0JY$Ef$Eg.8_$Eg$Eh0JY$Eh$Ei.8_$Ei$Ej0JY$Ej$Ek.8_$Ek$F[0JY$F[$F^.8_$F^$Ge0JY$Ge$Gf.8_$Gf$Gm0JY$Gm$Gn.8_$Gn$Go0JY$Go$Gr.8_$Gr$Gu0JY$Gu$Gv.8_$Gv$G}0JY$G}$HQ.8_$HQ$HU0JY$HU$HW.8_$HW$H^0JY$H^$Hb.8_$Hb$Ho0JY$Ho$Ht.8_$Ht$Hw0JY$Hw$Hx.8_$Hx$IP0JY$IP$Ki.8_$Ki$Kj0JY$Kj$Kw.8_$Kw$Kx0JY$Kx$LY.8_$LY$Lg0JY$Lg$Np.8_$Np$Nq0JY$Nq$Nu.8_$Nu$Nv0JY$Nv$Nx.8_$Nx% S0JY% S% T.8_% T% U0JY% U% X.8_% X% ^0JY% ^% d.8_% d% e0JY% e% f.8_% f% g0JY% g% h.8_% h% i0JY% i% j.8_% j% n0JY% n% o.8_% o% z0JY% z% |.8_% |%!Q0JY%!Q%!V.8_%!V%![0JY%![%!`.8_%!`%!a0JY%!a%#g.8_%#g%#h0JY%#h%#i0JY%#i&/x.8_&/x&0y0JY&0y&0z.8_&0z&1{0JY&1{&1|.8_&1|&4w0JY&4w&4}.8_&4}&5R0JY&5R&5U.8_&5U&5V0JY&5V&5W0JY&5W&5d.8_&5d&6[0JY&6[&6].8_&6]&6^0JY&6^&6c.8_&6c&6d0JY&6d&6f.8_&6f&7p0JY&7p&7w.8_&7w&7x0JY&7x&8Y.8_&8Y&8q0JY&8q&8z.8_&8z&9R0JY&9R&9S.8_&9S&9Z0JY&9Z&9[.8_&9[&9c0JY&9c&9d.8_&9d&9k0JY&9k&9l.8_&9l&9s0JY&9s&9t.8_&9t&9{0JY&9{&9|.8_&9|&:T0JY&:T&:U.8_&:U&:]0JY&:]&<P.8_&<P&<Q0JY&<Q&FZ.8_&FZ&F[0JY&F[&F]0JY&F]&GX.8_&GX&G^0JY&G^&Gc.8_&Gc&Gd0JY&Gd&Ge0JY&Ge&Gi.8_&Gi&Ic0JY&Ic&Ii.8_&Ii&Il0JY&Il&Im.8_&Im&Kk0JY&Kk&Kl.8_&Kl&Kp0JY&Kp&Ku.8_&Ku&Lp0JY&Lp&Ls.8_&Ls&Nu0JY&Nu' W.8_' W' s0JY' s'!z.8_'!z'#[0JY'#['.b.8_'.b*3f0JY*3f*5S.8_*5S40_0JY40_41d.8_41d4Js0JY4Js4LY.8_4LY4MY0JY4MY4M[.8_4M[5%T0JY5%T5%W.8_5%W5%h0JY5%h5%r.8_5%r5%s0JY5%s5%t0JY5%t5&Y.8_5&Y5'Z0JY5'Z5'k.8_5'k5(U0JY5(U5(^.8_5(^5)v0JY5)v5*y.8_5*y5+S0JY5+S5+U.8_5+U5-a0JY5-a5-c.8_5-c5-g0JY5-g5-h.8_5-h5-l0JY5-l5-x.8_5-x5.T0JY5.T5/t.8_5/t50O0JY50O50P.8_50P50S0JY50S50T.8_50T50X0JY50X50Y.8_50Y50q0JY50q51`.8_51`52f0JY52f52t.8_52t53x0JY53x55Y.8_55Y55`0JY55`55c.8_55c55d0JY55d55r.8_55r56`0JY56`56j.8_56j57R0JY57R57l.8_57l58Z0JY58Z58b.8_58b59c0JY59c5:P.8_5:P5:Q0JY5:Q5;S.8_5;S5;}0JY5;}5<f.8_5<f5<i0JY5<i5<j.8_5<j5<r0JY5<r5=W.8_5=W5=o0JY5=o5=r.8_5=r5=s0JY5=s5=x.8_5=x5>z0JY5>z5>{.8_5>{5>|0JY5>|5?P.8_5?P5?Q0JY5?Q5?R0JY5?R5?T.8_5?T5?Y0JY5?Y5?[.8_5?[5?]0JY5?]5?^.8_5?^5?_0JY5?_5?w.8_5?w5?z0JY5?z5?|.8_5?|5@X0JY5@X5@`.8_5@`5@c0JY5@c5@o.8_5@o5@u0JY5@u5@w.8_5@w5@}0JY5@}5AP.8_5AP5AV0JY5AV5A`.8_5A`5Ag0JY5Ag5Ah.8_5Ah5Ao0JY5Ao5Dv.8_5Dv5Ek0JY5Ek5FY.8_5FY;%S0JY;%S;%`.8_;%`;%w0JY;%w;%{.8_;%{;'O0JY;'O;'S.8_;'S;=`.8p<%l?&r.8_?&r?.p0JY?.p?.r.8_?.r?1Q0JY?1Q?1x.8_?1x?2P0JY?2P?2].8_?2]?2b0JY?2b?2g.8_?2g?2h0JY?2h?2i.8_?2i?2s0JY?2s?2t.8_?2t?3R0JY?3R?3S.8_?3S?3X0JY?3X?3Y.8_?3Y?3Z0JY?3Z?3[.8_?3[?3]0JY?3]?3^0JY?3^?3_.8_?3_?3`0JY?3`?3a0JY?3a?3b.8_?3b?5r0JY?5r?6e.8_?6e?>`0JY?>`?>r.8_?>r?@U0JY?@U?@W.8_?@W?A`0JY?A`?BY.8_?BY?Bf0JY?Bf?EO.8_?EO?ET0JY?ET?EU.8_?EU?HR0JY?HR?Hw.8_?Hw?Ic0JY?Ic?Ii.8_?Ii?JT0JY?JT?J`.8_?J`?L]0JY?L]?L`.8_?L`?Lf0JY?Lf?Lh.8_?Lh?Ln0JY?Ln?Lp.8_?Lp?Lv0JY?Lv?Lx.8_?Lx?L{0JY?L{O.8_!T2#U2izQS!RmPOY.8|YZ!+oZq.8|qr2!{rs2!{st2!{tu2!{uv2!{vw2!{wx0JYxz.8|z{2!{{|2!{|!O.8|!O!P2!{!P!Q2!{!Q![2!{![!a.8|!a!b2!{!b!c.8|!c!}2!{!}#O.8|#O#P2!{#P#R.8|#R#S2!{#S#T2!{#T#o2!{#o$p.8|$p$q2!{$q${.8|${$|2!{$|%Q.8|%Q%R2!{%R%W.8|%W%o2!{%o%p.8|%p&a2!{&a&b.8|&b0`2!{0`0d.8|0d0p2!{0p1O.8|1O1T2!{1T1[.8|1[1]2!{1]1^.8|1^1_2!{1_4U.8|4U4Z2!{4Z4[.8|4[4]2!{4]4^2!{4^4`.8|4`4d2!{4d4l.8|4l4m2!{4m4n.8|4n4q2!{4q4r.8|4r4s2!{4s4t.8|4t5Y2!{5Y5Z.8|5Z7Q2!{7Q7R.8|7R:S2!{:S:[.8|:[=p2!{=p=y.8|=y>q2!{>q>s.8|>s>t2!{>t>{.8|>{?t2!{?tA`.8|A`A{2!{A{BQ.8|BQBT2!{BTCS.8|CSDP2!{DPDt.8|DtDu2!{DuDv2!{DvDw.8|DwGO2!{GOGP.8|GPGQ2!{GQGa.8|GaGb2!{GbGc2!{GcGj.8|GjGk2!{GkGl2!{GlGv.8|GvGy2!{GyG{.8|G{G|2!{G|H^.8|H^H_2!{H_H`.8|H`IO2!{IOIm.8|ImKj2!{KjKu.8|KuKv2!{KvL`.8|L`MR2!{MRM[.8|M[M]2!{M]M^2!{M^Mb.8|MbMc2!{McMh.8|MhNO2!{NONS.8|NSNT2!{NTN^.8|N^N_2!{N_Nb.8|NbNc2!{NcNz.8|Nz! e2!{! e!#O.8|!#O!#P2!{!#P!#Q.8|!#Q!#]2!{!#]!%W.8|!%W!&`2!{!&`!&c.8|!&c!&d2!{!&d!&v.8|!&v!&w2!{!&w!'O.8|!'O!'Y2!{!'Y!'i.8|!'i!'p2!{!'p!'q.8|!'q!'x2!{!'x!'}.8|!'}!(V2!{!(V!(X.8|!(X!(Y2!{!(Y!(Z2!{!(Z!(].8|!(]!(s2!{!(s!(t.8|!(t!({2!{!({!(|.8|!(|!(}2!{!(}!)Q.8|!)Q!)U2!{!)U!)X.8|!)X!)Y2!{!)Y!)j.8|!)j!)k2!{!)k!)x.8|!)x!)y2!{!)y!)z2!{!)z!){.8|!){!*O2!{!*O!*^.8|!*^!*_2!{!*_!*`2!{!*`!*s.8|!*s!*y2!{!*y!*}.8|!*}!+O2!{!+O!+P2!{!+P!+R.8|!+R!+i2!{!+i!+j.8|!+j!+q2!{!+q!+r.8|!+r!+s2!{!+s!+t2!{!+t!+u.8|!+u!+v2!{!+v!+w2!{!+w!+x.8|!+x!+y2!{!+y!+z2!{!+z!,k.8|!,k!,o2!{!,o!,p.8|!,p!,q2!{!,q!-U.8|!-U!-X2!{!-X!-i.8|!-i!-r2!{!-r!-s.8|!-s!-v2!{!-v!-w.8|!-w!._2!{!._!.`.8|!.`!.g2!{!.g!.h.8|!.h!.i2!{!.i!.j2!{!.j!.k.8|!.k!.p2!{!.p!.s.8|!.s!.t2!{!.t!/W.8|!/W!/X2!{!/X!/h.8|!/h!/i2!{!/i!/j2!{!/j!0_.8|!0_!0g2!{!0g!0i.8|!0i!0j2!{!0j!0k2!{!0k!0m.8|!0m!1T2!{!1T!1U.8|!1U!1]2!{!1]!1^.8|!1^!1_2!{!1_!1`2!{!1`!1a.8|!1a!1f2!{!1f!1i.8|!1i!1j2!{!1j!2Y.8|!2Y!2Z2!{!2Z!2[2!{!2[!2].8|!2]!2`2!{!2`!2o.8|!2o!2p2!{!2p!3R.8|!3R!3S2!{!3S!3T.8|!3T!3Z2!{!3Z!3^.8|!3^!3a2!{!3a!3b.8|!3b!3f2!{!3f!3i.8|!3i!3j2!{!3j!3k2!{!3k!3l.8|!3l!3m2!{!3m!3n.8|!3n!3o2!{!3o!3p2!{!3p!3s.8|!3s!3t2!{!3t!3u2!{!3u!3x.8|!3x!3{2!{!3{!4O.8|!4O!4[2!{!4[!4r.8|!4r!4s2!{!4s!5y.8|!5y!6R2!{!6R!6S.8|!6S!6V2!{!6V!6W.8|!6W!6o2!{!6o!6p.8|!6p!6z2!{!6z!6{.8|!6{!7Q2!{!7Q!7T.8|!7T!7U2!{!7U!7p.8|!7p!7q2!{!7q!7r2!{!7r!7x.8|!7x!7y2!{!7y!7z2!{!7z!8o.8|!8o!8w2!{!8w!8x.8|!8x!8{2!{!8{!8|.8|!8|!9e2!{!9e!9f.8|!9f!9p2!{!9p!9q.8|!9q!9v2!{!9v!9y.8|!9y!9z2!{!9z!:l.8|!:l!:m2!{!:m!:n.8|!:n!:o2!{!:o!:p2!{!:p!;P.8|!;P!;Q2!{!;Q!;R2!{!;R!;e.8|!;e!;m2!{!;m!;n.8|!;n!;q2!{!;q!;r.8|!;r!<m2!{!<m!<o.8|!<o!<p2!{!<p!=Q.8|!=Q!=R2!{!=R!=d.8|!=d!=e2!{!=e!=f2!{!=f!>O.8|!>O!>U2!{!>U!>Z.8|!>Z!>m2!{!>m!>p.8|!>p!?Y2!{!?Y!?Z.8|!?Z!?d2!{!?d!?e.8|!?e!?f2!{!?f!?h.8|!?h!?o2!{!?o!@{.8|!@{!A}2!{!A}!BO.8|!BO!BP2!{!BP!BQ2!{!BQ!B^.8|!B^!Be2!{!Be!Cq.8|!Cq!Cr2!{!Cr!Cs2!{!Cs!Ct.8|!Ct!Cu2!{!Cu!Cw.8|!Cw!Cx2!{!Cx!Cy2!{!Cy!Cz.8|!Cz!C{2!{!C{!C}.8|!C}!DO2!{!DO!DU.8|!DU!DY2!{!DY!DZ.8|!DZ!Db2!{!Db!Dc.8|!Dc!Df2!{!Df!Dg.8|!Dg!Dh2!{!Dh!Di.8|!Di!Dj2!{!Dj!Dl.8|!Dl!Dm2!{!Dm!Dn2!{!Dn!Do.8|!Do!Ds2!{!Ds!Dt.8|!Dt!Du2!{!Du!Dv2!{!Dv!EP.8|!EP!EQ2!{!EQ!ES.8|!ES!EX2!{!EX!EY.8|!EY!EZ2!{!EZ!Ep.8|!Ep!Et2!{!Et!Ff.8|!Ff!Fg2!{!Fg!Gx.8|!Gx!HQ2!{!HQ!HR.8|!HR!Hw2!{!Hw!Id.8|!Id!Ii2!{!Ii!LQ.8|!LQ!L}2!{!L}!Mc.8|!Mc!Md2!{!Md!Mt.8|!Mt!Mz2!{!Mz!NO.8|!NO!NS2!{!NS!NV.8|!NV!NW2!{!NW!NZ.8|!NZ!N[2!{!N[!N]2!{!N]!Nd.8|!Nd!Ng2!{!Ng!Nk.8|!Nk!Nx2!{!Nx# U.8|# U# V2!{# V# h.8|# h#!`2!{#!`#!a.8|#!a#!b2!{#!b#!g.8|#!g#!h2!{#!h#!j.8|#!j##g2!{##g##h.8|##h#*s2!{#*s#*t.8|#*t#*x2!{#*x#*z.8|#*z#+R2!{#+R#+S.8|#+S#+T2!{#+T#+U.8|#+U#+Y2!{#+Y#+[.8|#+[#,V2!{#,V#,W.8|#,W#,[2!{#,[#,^.8|#,^#-P2!{#-P#-Q.8|#-Q#-U2!{#-U#-W.8|#-W#-_2!{#-_#-`.8|#-`#-a2!{#-a#-b.8|#-b#-f2!{#-f#-h.8|#-h#-w2!{#-w#-x.8|#-x#/T2!{#/T#/U.8|#/U#/Y2!{#/Y#/[.8|#/[#0q2!{#0q#1h.8|#1h#1x2!{#1x#2Y.8|#2Y#4R2!{#4R#4_.8|#4_#Au2!{#Au#Aw.8|#Aw#BY2!{#BY#BZ.8|#BZ#Bu2!{#Bu#Bz.8|#Bz#Di2!{#Di#EO.8|#EO#E]2!{#E]#E^.8|#E^#Eb2!{#Eb#Ep.8|#Ep#FS2!{#FS#Fb.8|#Fb#Ft2!{#Ft#GS.8|#GS#Ga2!{#Ga#Gb.8|#Gb#Ge2!{#Ge#Gt.8|#Gt#Hz2!{#Hz#Io.8|#Io#Ip2!{#Ip#It.8|#It#Iu2!{#Iu#K[.8|#K[#MW2!{#MW#M`.8|#M`#NZ2!{#NZ#N[.8|#N[#N]2!{#N]#Nb.8|#Nb$ z2!{$ z$!U.8|$!U$!s2!{$!s$#x.8|$#x$$h2!{$$h$$j.8|$$j$$o2!{$$o$$z.8|$$z$%x2!{$%x$&_.8|$&_$&f2!{$&f$'p.8|$'p$(X2!{$(X$(b.8|$(b$)i2!{$)i$+_.8|$+_$+`2!{$+`$-a.8|$-a$.b2!{$.b$.s.8|$.s$.z2!{$.z$0T.8|$0T$0s2!{$0s$1Q.8|$1Q$1R2!{$1R$1S2!{$1S$1^.8|$1^$2[2!{$2[$2v.8|$2v$3l2!{$3l$4g.8|$4g$4j2!{$4j$4t.8|$4t$5j2!{$5j$7y.8|$7y$7}2!{$7}$8O.8|$8O$8S2!{$8S$8V.8|$8V$8W2!{$8W$8X2!{$8X$8b.8|$8b$<j2!{$<j$=|.8|$=|$DO2!{$DO$DQ.8|$DQ$DW2!{$DW$DY.8|$DY$EQ2!{$EQ$ES.8|$ES$EY2!{$EY$E[.8|$E[$Ed2!{$Ed$Ee.8|$Ee$Ef2!{$Ef$Eg.8|$Eg$Eh2!{$Eh$Ei.8|$Ei$Ej2!{$Ej$Ek.8|$Ek$F[2!{$F[$F^.8|$F^$Ge2!{$Ge$Gf.8|$Gf$Gm2!{$Gm$Gn.8|$Gn$Go2!{$Go$Gr.8|$Gr$Gu2!{$Gu$Gv.8|$Gv$G}2!{$G}$HQ.8|$HQ$HU2!{$HU$HW.8|$HW$H^2!{$H^$Hb.8|$Hb$Ho2!{$Ho$Ht.8|$Ht$Hw2!{$Hw$Hx.8|$Hx$IP2!{$IP$Ki.8|$Ki$Kj2!{$Kj$Kw.8|$Kw$Kx2!{$Kx$LY.8|$LY$Lg2!{$Lg$Np.8|$Np$Nq2!{$Nq$Nu.8|$Nu$Nv2!{$Nv$Nx.8|$Nx% S2!{% S% T.8|% T% U2!{% U% X.8|% X% ^2!{% ^% d.8|% d% e2!{% e% f.8|% f% g2!{% g% h.8|% h% i2!{% i% j.8|% j% n2!{% n% o.8|% o% z2!{% z% |.8|% |%!Q2!{%!Q%!V.8|%!V%![2!{%![%!`.8|%!`%!a2!{%!a%#g.8|%#g%#h2!{%#h%#i2!{%#i&/x.8|&/x&0y2!{&0y&0z.8|&0z&1{2!{&1{&1|.8|&1|&4w2!{&4w&4}.8|&4}&5R2!{&5R&5U.8|&5U&5V2!{&5V&5W2!{&5W&5d.8|&5d&6[2!{&6[&6].8|&6]&6^2!{&6^&6c.8|&6c&6d2!{&6d&6f.8|&6f&7p2!{&7p&7w.8|&7w&7x2!{&7x&8Y.8|&8Y&8q2!{&8q&8z.8|&8z&9R2!{&9R&9S.8|&9S&9Z2!{&9Z&9[.8|&9[&9c2!{&9c&9d.8|&9d&9k2!{&9k&9l.8|&9l&9s2!{&9s&9t.8|&9t&9{2!{&9{&9|.8|&9|&:T2!{&:T&:U.8|&:U&:]2!{&:]&<P.8|&<P&<Q2!{&<Q&FZ.8|&FZ&F[2!{&F[&F]2!{&F]&GX.8|&GX&G^2!{&G^&Gc.8|&Gc&Gd2!{&Gd&Ge2!{&Ge&Gi.8|&Gi&Ic2!{&Ic&Ii.8|&Ii&Il2!{&Il&Im.8|&Im&Kk2!{&Kk&Kl.8|&Kl&Kp2!{&Kp&Ku.8|&Ku&Lp2!{&Lp&Ls.8|&Ls&Nu2!{&Nu' W.8|' W' s2!{' s'!z.8|'!z'#[2!{'#['.b.8|'.b*3f2!{*3f*5S.8|*5S40_2!{40_41d.8|41d4Js2!{4Js4LY.8|4LY4MY2!{4MY4M[.8|4M[5%T2!{5%T5%W.8|5%W5%h2!{5%h5%r.8|5%r5%s2!{5%s5%t2!{5%t5&Y.8|5&Y5'Z2!{5'Z5'k.8|5'k5(U2!{5(U5(^.8|5(^5)v2!{5)v5*y.8|5*y5+S2!{5+S5+U.8|5+U5-a2!{5-a5-c.8|5-c5-g2!{5-g5-h.8|5-h5-l2!{5-l5-x.8|5-x5.T2!{5.T5/t.8|5/t50O2!{50O50P.8|50P50S2!{50S50T.8|50T50X2!{50X50Y.8|50Y50q2!{50q51`.8|51`52f2!{52f52t.8|52t53x2!{53x55Y.8|55Y55`2!{55`55c.8|55c55d2!{55d55r.8|55r56`2!{56`56j.8|56j57R2!{57R57l.8|57l58Z2!{58Z58b.8|58b59c2!{59c5:P.8|5:P5:Q2!{5:Q5;S.8|5;S5;}2!{5;}5<f.8|5<f5<i2!{5<i5<j.8|5<j5<r2!{5<r5=W.8|5=W5=o2!{5=o5=r.8|5=r5=s2!{5=s5=x.8|5=x5>z2!{5>z5>{.8|5>{5>|2!{5>|5?P.8|5?P5?Q2!{5?Q5?R2!{5?R5?T.8|5?T5?Y2!{5?Y5?[.8|5?[5?]2!{5?]5?^.8|5?^5?_2!{5?_5?w.8|5?w5?z2!{5?z5?|.8|5?|5@X2!{5@X5@`.8|5@`5@c2!{5@c5@o.8|5@o5@u2!{5@u5@w.8|5@w5@}2!{5@}5AP.8|5AP5AV2!{5AV5A`.8|5A`5Ag2!{5Ag5Ah.8|5Ah5Ao2!{5Ao5Dv.8|5Dv5Ek2!{5Ek5FY.8|5FY;%S2!{;%S;%`.8|;%`;%w2!{;%w;%{.8|;%{;'O2!{;'O;'S.8|;'S;=`.9j<%l?&r.8|?&r?.p2!{?.p?.r.8|?.r?1Q2!{?1Q?1x.8|?1x?2P2!{?2P?2].8|?2]?2b2!{?2b?2g.8|?2g?2h2!{?2h?2i.8|?2i?2s2!{?2s?2t.8|?2t?3R2!{?3R?3S.8|?3S?3X2!{?3X?3Y.8|?3Y?3Z2!{?3Z?3[.8|?3[?3]2!{?3]?3^2!{?3^?3_.8|?3_?3`2!{?3`?3a2!{?3a?3b.8|?3b?5r2!{?5r?6e.8|?6e?>`2!{?>`?>r.8|?>r?@U2!{?@U?@W.8|?@W?A`2!{?A`?BY.8|?BY?Bf2!{?Bf?EO.8|?EO?ET2!{?ET?EU.8|?EU?HR2!{?HR?Hw.8|?Hw?Ic2!{?Ic?Ii.8|?Ii?JT2!{?JT?J`.8|?J`?L]2!{?L]?L`.8|?L`?Lf2!{?Lf?Lh.8|?Lh?Ln2!{?Ln?Lp.8|?Lp?Lv2!{?Lv?Lx.8|?Lx?L{2!{?L{O.8|!_3*O2i!OW|SS!RmPOY.9vYZ!,^Zq.9vqr3)srs/Cbst3)stu3)suv3)svw3)swx3)sxz.9vz{3)s{|3)s|!O.9v!O!P3)s!P!Q3)s!Q![3)s![!a.9v!a!b3)s!b!c.9v!c!}3)s!}#O.9v#O#P3)s#P#R.9v#R#S3)s#S#T40m#T#o3)s#o$p.9v$p$q3)s$q${.9v${$|3)s$|%Q.9v%Q%R3)s%R%W.9v%W%o3)s%o%p.9v%p&a3)s&a&b.9v&b0`3)s0`0d.9v0d0p3)s0p1O.9v1O1T3)s1T1[.9v1[1]3)s1]1^.9v1^1_3)s1_4U.9v4U4Z3)s4Z4[.9v4[4]3)s4]4^3)s4^4`.9v4`4d3)s4d4l.9v4l4m3)s4m4n.9v4n4q3)s4q4r.9v4r4s3)s4s4t.9v4t5Y3)s5Y5Z.9v5Z7Q3)s7Q7R.9v7R:S3)s:S:[.9v:[=p3)s=p=y.9v=y>q3)s>q>s.9v>s>t3)s>t>{.9v>{?t3)s?tA`.9vA`A{3)sA{BQ.9vBQBT3)sBTCS.9vCSDP3)sDPDt.9vDtDu3)sDuDv3)sDvDw.9vDwGO3)sGOGP.9vGPGQ3)sGQGa.9vGaGb3)sGbGc3)sGcGj.9vGjGk3)sGkGl3)sGlGv.9vGvGy3)sGyG{.9vG{G|3)sG|H^.9vH^H_3)sH_H`.9vH`IO3)sIOIm.9vImKj3)sKjKu.9vKuKv3)sKvL`.9vL`MR3)sMRM[.9vM[M]3)sM]M^3)sM^Mb.9vMbMc3)sMcMh.9vMhNO3)sNONS.9vNSNT3)sNTN^.9vN^N_3)sN_Nb.9vNbNc3)sNcNz.9vNz! e3)s! e!#O.9v!#O!#P3)s!#P!#Q.9v!#Q!#]3)s!#]!%W.9v!%W!&`3)s!&`!&c.9v!&c!&d3)s!&d!&v.9v!&v!&w3)s!&w!'O.9v!'O!'Y3)s!'Y!'i.9v!'i!'p3)s!'p!'q.9v!'q!'x3)s!'x!'}.9v!'}!(V3)s!(V!(X.9v!(X!(Y3)s!(Y!(Z3)s!(Z!(].9v!(]!(s3)s!(s!(t.9v!(t!({3)s!({!(|.9v!(|!(}3)s!(}!)Q.9v!)Q!)U3)s!)U!)X.9v!)X!)Y3)s!)Y!)j.9v!)j!)k3)s!)k!)x.9v!)x!)y3)s!)y!)z3)s!)z!){.9v!){!*O3)s!*O!*^.9v!*^!*_3)s!*_!*`3)s!*`!*s.9v!*s!*y3)s!*y!*}.9v!*}!+O3)s!+O!+P3)s!+P!+R.9v!+R!+i3)s!+i!+j.9v!+j!+q3)s!+q!+r.9v!+r!+s3)s!+s!+t3)s!+t!+u.9v!+u!+v3)s!+v!+w3)s!+w!+x.9v!+x!+y3)s!+y!+z3)s!+z!,k.9v!,k!,o3)s!,o!,p.9v!,p!,q3)s!,q!-U.9v!-U!-X3)s!-X!-i.9v!-i!-r3)s!-r!-s.9v!-s!-v3)s!-v!-w.9v!-w!._3)s!._!.`.9v!.`!.g3)s!.g!.h.9v!.h!.i3)s!.i!.j3)s!.j!.k.9v!.k!.p3)s!.p!.s.9v!.s!.t3)s!.t!/W.9v!/W!/X3)s!/X!/h.9v!/h!/i3)s!/i!/j3)s!/j!0_.9v!0_!0g3)s!0g!0i.9v!0i!0j3)s!0j!0k3)s!0k!0m.9v!0m!1T3)s!1T!1U.9v!1U!1]3)s!1]!1^.9v!1^!1_3)s!1_!1`3)s!1`!1a.9v!1a!1f3)s!1f!1i.9v!1i!1j3)s!1j!2Y.9v!2Y!2Z3)s!2Z!2[3)s!2[!2].9v!2]!2`3)s!2`!2o.9v!2o!2p3)s!2p!3R.9v!3R!3S3)s!3S!3T.9v!3T!3Z3)s!3Z!3^.9v!3^!3a3)s!3a!3b.9v!3b!3f3)s!3f!3i.9v!3i!3j3)s!3j!3k3)s!3k!3l.9v!3l!3m3)s!3m!3n.9v!3n!3o3)s!3o!3p3)s!3p!3s.9v!3s!3t3)s!3t!3u3)s!3u!3x.9v!3x!3{3)s!3{!4O.9v!4O!4[3)s!4[!4r.9v!4r!4s3)s!4s!5y.9v!5y!6R3)s!6R!6S.9v!6S!6V3)s!6V!6W.9v!6W!6o3)s!6o!6p.9v!6p!6z3)s!6z!6{.9v!6{!7Q3)s!7Q!7T.9v!7T!7U3)s!7U!7p.9v!7p!7q3)s!7q!7r3)s!7r!7x.9v!7x!7y3)s!7y!7z3)s!7z!8o.9v!8o!8w3)s!8w!8x.9v!8x!8{3)s!8{!8|.9v!8|!9e3)s!9e!9f.9v!9f!9p3)s!9p!9q.9v!9q!9v3)s!9v!9y.9v!9y!9z3)s!9z!:l.9v!:l!:m3)s!:m!:n.9v!:n!:o3)s!:o!:p3)s!:p!;P.9v!;P!;Q3)s!;Q!;R3)s!;R!;e.9v!;e!;m3)s!;m!;n.9v!;n!;q3)s!;q!;r.9v!;r!<m3)s!<m!<o.9v!<o!<p3)s!<p!=Q.9v!=Q!=R3)s!=R!=d.9v!=d!=e3)s!=e!=f3)s!=f!>O.9v!>O!>U3)s!>U!>Z.9v!>Z!>m3)s!>m!>p.9v!>p!?Y3)s!?Y!?Z.9v!?Z!?d3)s!?d!?e.9v!?e!?f3)s!?f!?h.9v!?h!?o3)s!?o!@{.9v!@{!A}3)s!A}!BO.9v!BO!BP3)s!BP!BQ3)s!BQ!B^.9v!B^!Be3)s!Be!Cq.9v!Cq!Cr3)s!Cr!Cs3)s!Cs!Ct.9v!Ct!Cu3)s!Cu!Cw.9v!Cw!Cx3)s!Cx!Cy3)s!Cy!Cz.9v!Cz!C{3)s!C{!C}.9v!C}!DO3)s!DO!DU.9v!DU!DY3)s!DY!DZ.9v!DZ!Db3)s!Db!Dc.9v!Dc!Df3)s!Df!Dg.9v!Dg!Dh3)s!Dh!Di.9v!Di!Dj3)s!Dj!Dl.9v!Dl!Dm3)s!Dm!Dn3)s!Dn!Do.9v!Do!Ds3)s!Ds!Dt.9v!Dt!Du3)s!Du!Dv3)s!Dv!EP.9v!EP!EQ3)s!EQ!ES.9v!ES!EX3)s!EX!EY.9v!EY!EZ3)s!EZ!Ep.9v!Ep!Et3)s!Et!Ff.9v!Ff!Fg3)s!Fg!Gx.9v!Gx!HQ3)s!HQ!HR.9v!HR!Hw3)s!Hw!Id.9v!Id!Ii3)s!Ii!LQ.9v!LQ!L}3)s!L}!Mc.9v!Mc!Md3)s!Md!Mt.9v!Mt!Mz3)s!Mz!NO.9v!NO!NS3)s!NS!NV.9v!NV!NW3)s!NW!NZ.9v!NZ!N[3)s!N[!N]3)s!N]!Nd.9v!Nd!Ng3)s!Ng!Nk.9v!Nk!Nx3)s!Nx# U.9v# U# V3)s# V# h.9v# h#!`3)s#!`#!a.9v#!a#!b3)s#!b#!g.9v#!g#!h3)s#!h#!j.9v#!j##g3)s##g##h.9v##h#*s3)s#*s#*t.9v#*t#*x3)s#*x#*z.9v#*z#+R3)s#+R#+S.9v#+S#+T3)s#+T#+U.9v#+U#+Y3)s#+Y#+[.9v#+[#,V3)s#,V#,W.9v#,W#,[3)s#,[#,^.9v#,^#-P3)s#-P#-Q.9v#-Q#-U3)s#-U#-W.9v#-W#-_3)s#-_#-`.9v#-`#-a3)s#-a#-b.9v#-b#-f3)s#-f#-h.9v#-h#-w3)s#-w#-x.9v#-x#/T3)s#/T#/U.9v#/U#/Y3)s#/Y#/[.9v#/[#0q3)s#0q#1h.9v#1h#1x3)s#1x#2Y.9v#2Y#4R3)s#4R#4_.9v#4_#Au3)s#Au#Aw.9v#Aw#BY3)s#BY#BZ.9v#BZ#Bu3)s#Bu#Bz.9v#Bz#Di3)s#Di#EO.9v#EO#E]3)s#E]#E^.9v#E^#Eb3)s#Eb#Ep.9v#Ep#FS3)s#FS#Fb.9v#Fb#Ft3)s#Ft#GS.9v#GS#Ga3)s#Ga#Gb.9v#Gb#Ge3)s#Ge#Gt.9v#Gt#Hz3)s#Hz#Io.9v#Io#Ip3)s#Ip#It.9v#It#Iu3)s#Iu#K[.9v#K[#MW3)s#MW#M`.9v#M`#NZ3)s#NZ#N[.9v#N[#N]3)s#N]#Nb.9v#Nb$ z3)s$ z$!U.9v$!U$!s3)s$!s$#x.9v$#x$$h3)s$$h$$j.9v$$j$$o3)s$$o$$z.9v$$z$%x3)s$%x$&_.9v$&_$&f3)s$&f$'p.9v$'p$(X3)s$(X$(b.9v$(b$)i3)s$)i$+_.9v$+_$+`3)s$+`$-a.9v$-a$.b3)s$.b$.s.9v$.s$.z3)s$.z$0T.9v$0T$0s3)s$0s$1Q.9v$1Q$1R3)s$1R$1S3)s$1S$1^.9v$1^$2[3)s$2[$2v.9v$2v$3l3)s$3l$4g.9v$4g$4j3)s$4j$4t.9v$4t$5j3)s$5j$7y.9v$7y$7}3)s$7}$8O.9v$8O$8S3)s$8S$8V.9v$8V$8W3)s$8W$8X3)s$8X$8b.9v$8b$<j3)s$<j$=|.9v$=|$DO3)s$DO$DQ.9v$DQ$DW3)s$DW$DY.9v$DY$EQ3)s$EQ$ES.9v$ES$EY3)s$EY$E[.9v$E[$Ed3)s$Ed$Ee.9v$Ee$Ef3)s$Ef$Eg.9v$Eg$Eh3)s$Eh$Ei.9v$Ei$Ej3)s$Ej$Ek.9v$Ek$F[3)s$F[$F^.9v$F^$Ge3)s$Ge$Gf.9v$Gf$Gm3)s$Gm$Gn.9v$Gn$Go3)s$Go$Gr.9v$Gr$Gu3)s$Gu$Gv.9v$Gv$G}3)s$G}$HQ.9v$HQ$HU3)s$HU$HW.9v$HW$H^3)s$H^$Hb.9v$Hb$Ho3)s$Ho$Ht.9v$Ht$Hw3)s$Hw$Hx.9v$Hx$IP3)s$IP$Ki.9v$Ki$Kj3)s$Kj$Kw.9v$Kw$Kx3)s$Kx$LY.9v$LY$Lg3)s$Lg$Np.9v$Np$Nq3)s$Nq$Nu.9v$Nu$Nv3)s$Nv$Nx.9v$Nx% S3)s% S% T.9v% T% U3)s% U% X.9v% X% ^3)s% ^% d.9v% d% e3)s% e% f.9v% f% g3)s% g% h.9v% h% i3)s% i% j.9v% j% n3)s% n% o.9v% o% z3)s% z% |.9v% |%!Q3)s%!Q%!V.9v%!V%![3)s%![%!`.9v%!`%!a3)s%!a%#g.9v%#g%#h3)s%#h%#i3)s%#i&/x.9v&/x&0y3)s&0y&0z.9v&0z&1{3)s&1{&1|.9v&1|&4w3)s&4w&4}.9v&4}&5R3)s&5R&5U.9v&5U&5V3)s&5V&5W3)s&5W&5d.9v&5d&6[3)s&6[&6].9v&6]&6^3)s&6^&6c.9v&6c&6d3)s&6d&6f.9v&6f&7p3)s&7p&7w.9v&7w&7x3)s&7x&8Y.9v&8Y&8q3)s&8q&8z.9v&8z&9R3)s&9R&9S.9v&9S&9Z3)s&9Z&9[.9v&9[&9c3)s&9c&9d.9v&9d&9k3)s&9k&9l.9v&9l&9s3)s&9s&9t.9v&9t&9{3)s&9{&9|.9v&9|&:T3)s&:T&:U.9v&:U&:]3)s&:]&<P.9v&<P&<Q3)s&<Q&FZ.9v&FZ&F[3)s&F[&F]3)s&F]&GX.9v&GX&G^3)s&G^&Gc.9v&Gc&Gd3)s&Gd&Ge3)s&Ge&Gi.9v&Gi&Ic3)s&Ic&Ii.9v&Ii&Il3)s&Il&Im.9v&Im&Kk3)s&Kk&Kl.9v&Kl&Kp3)s&Kp&Ku.9v&Ku&Lp3)s&Lp&Ls.9v&Ls&Nu3)s&Nu' W.9v' W' s3)s' s'!z.9v'!z'#[3)s'#['.b.9v'.b*3f3)s*3f*5S.9v*5S40_3)s40_41d.9v41d4Js3)s4Js4LY.9v4LY4MY3)s4MY4M[.9v4M[5%T3)s5%T5%W.9v5%W5%h3)s5%h5%r.9v5%r5%s3)s5%s5%t3)s5%t5&Y.9v5&Y5'Z3)s5'Z5'k.9v5'k5(U3)s5(U5(^.9v5(^5)v3)s5)v5*y.9v5*y5+S3)s5+S5+U.9v5+U5-a3)s5-a5-c.9v5-c5-g3)s5-g5-h.9v5-h5-l3)s5-l5-x.9v5-x5.T3)s5.T5/t.9v5/t50O3)s50O50P.9v50P50S3)s50S50T.9v50T50X3)s50X50Y.9v50Y50q3)s50q51`.9v51`52f3)s52f52t.9v52t53x3)s53x55Y.9v55Y55`3)s55`55c.9v55c55d3)s55d55r.9v55r56`3)s56`56j.9v56j57R3)s57R57l.9v57l58Z3)s58Z58b.9v58b59c3)s59c5:P.9v5:P5:Q3)s5:Q5;S.9v5;S5;}3)s5;}5<f.9v5<f5<i3)s5<i5<j.9v5<j5<r3)s5<r5=W.9v5=W5=o3)s5=o5=r.9v5=r5=s3)s5=s5=x.9v5=x5>z3)s5>z5>{.9v5>{5>|3)s5>|5?P.9v5?P5?Q3)s5?Q5?R3)s5?R5?T.9v5?T5?Y3)s5?Y5?[.9v5?[5?]3)s5?]5?^.9v5?^5?_3)s5?_5?w.9v5?w5?z3)s5?z5?|.9v5?|5@X3)s5@X5@`.9v5@`5@c3)s5@c5@o.9v5@o5@u3)s5@u5@w.9v5@w5@}3)s5@}5AP.9v5AP5AV3)s5AV5A`.9v5A`5Ag3)s5Ag5Ah.9v5Ah5Ao3)s5Ao5Dv.9v5Dv5Ek3)s5Ek5FY.9v5FY;%S3)s;%S;%`.9v;%`;%w3)s;%w;%{.9v;%{;'O3)s;'O;'S.9v;'S;=`.;`<%l?&r.9v?&r?.p3)s?.p?.r.9v?.r?1Q3)s?1Q?1x.9v?1x?2P3)s?2P?2].9v?2]?2b3)s?2b?2g.9v?2g?2h3)s?2h?2i.9v?2i?2s3)s?2s?2t.9v?2t?3R3)s?3R?3S.9v?3S?3X3)s?3X?3Y.9v?3Y?3Z3)s?3Z?3[.9v?3[?3]3)s?3]?3^3)s?3^?3_.9v?3_?3`3)s?3`?3a3)s?3a?3b.9v?3b?5r3)s?5r?6e.9v?6e?>`3)s?>`?>r.9v?>r?@U3)s?@U?@W.9v?@W?A`3)s?A`?BY.9v?BY?Bf3)s?Bf?EO.9v?EO?ET3)s?ET?EU.9v?EU?HR3)s?HR?Hw.9v?Hw?Ic3)s?Ic?Ii.9v?Ii?JT3)s?JT?J`.9v?J`?L]3)s?L]?L`.9v?L`?Lf3)s?Lf?Lh.9v?Lh?Ln3)s?Ln?Lp.9v?Lp?Lv3)s?Lv?Lx.9v?Lx?L{3)s?L{O.9v!V40v2i|SS!RmPOY.:lYZ!,zZq.:lqr40mrs0JYst40mtu40muv40mvw40mwx40mxz.:lz{40m{|40m|!O.:l!O!P40m!P!Q40m!Q![40m![!a.:l!a!b40m!b!c.:l!c!}40m!}#O.:l#O#P40m#P#R.:l#R#S40m#S#T40m#T#o40m#o$p.:l$p$q40m$q${.:l${$|40m$|%Q.:l%Q%R40m%R%W.:l%W%o40m%o%p.:l%p&a40m&a&b.:l&b0`40m0`0d.:l0d0p40m0p1O.:l1O1T40m1T1[.:l1[1]40m1]1^.:l1^1_40m1_4U.:l4U4Z40m4Z4[.:l4[4]40m4]4^40m4^4`.:l4`4d40m4d4l.:l4l4m40m4m4n.:l4n4q40m4q4r.:l4r4s40m4s4t.:l4t5Y40m5Y5Z.:l5Z7Q40m7Q7R.:l7R:S40m:S:[.:l:[=p40m=p=y.:l=y>q40m>q>s.:l>s>t40m>t>{.:l>{?t40m?tA`.:lA`A{40mA{BQ.:lBQBT40mBTCS.:lCSDP40mDPDt.:lDtDu40mDuDv40mDvDw.:lDwGO40mGOGP.:lGPGQ40mGQGa.:lGaGb40mGbGc40mGcGj.:lGjGk40mGkGl40mGlGv.:lGvGy40mGyG{.:lG{G|40mG|H^.:lH^H_40mH_H`.:lH`IO40mIOIm.:lImKj40mKjKu.:lKuKv40mKvL`.:lL`MR40mMRM[.:lM[M]40mM]M^40mM^Mb.:lMbMc40mMcMh.:lMhNO40mNONS.:lNSNT40mNTN^.:lN^N_40mN_Nb.:lNbNc40mNcNz.:lNz! e40m! e!#O.:l!#O!#P40m!#P!#Q.:l!#Q!#]40m!#]!%W.:l!%W!&`40m!&`!&c.:l!&c!&d40m!&d!&v.:l!&v!&w40m!&w!'O.:l!'O!'Y40m!'Y!'i.:l!'i!'p40m!'p!'q.:l!'q!'x40m!'x!'}.:l!'}!(V40m!(V!(X.:l!(X!(Y40m!(Y!(Z40m!(Z!(].:l!(]!(s40m!(s!(t.:l!(t!({40m!({!(|.:l!(|!(}40m!(}!)Q.:l!)Q!)U40m!)U!)X.:l!)X!)Y40m!)Y!)j.:l!)j!)k40m!)k!)x.:l!)x!)y40m!)y!)z40m!)z!){.:l!){!*O40m!*O!*^.:l!*^!*_40m!*_!*`40m!*`!*s.:l!*s!*y40m!*y!*}.:l!*}!+O40m!+O!+P40m!+P!+R.:l!+R!+i40m!+i!+j.:l!+j!+q40m!+q!+r.:l!+r!+s40m!+s!+t40m!+t!+u.:l!+u!+v40m!+v!+w40m!+w!+x.:l!+x!+y40m!+y!+z40m!+z!,k.:l!,k!,o40m!,o!,p.:l!,p!,q40m!,q!-U.:l!-U!-X40m!-X!-i.:l!-i!-r40m!-r!-s.:l!-s!-v40m!-v!-w.:l!-w!._40m!._!.`.:l!.`!.g40m!.g!.h.:l!.h!.i40m!.i!.j40m!.j!.k.:l!.k!.p40m!.p!.s.:l!.s!.t40m!.t!/W.:l!/W!/X40m!/X!/h.:l!/h!/i40m!/i!/j40m!/j!0_.:l!0_!0g40m!0g!0i.:l!0i!0j40m!0j!0k40m!0k!0m.:l!0m!1T40m!1T!1U.:l!1U!1]40m!1]!1^.:l!1^!1_40m!1_!1`40m!1`!1a.:l!1a!1f40m!1f!1i.:l!1i!1j40m!1j!2Y.:l!2Y!2Z40m!2Z!2[40m!2[!2].:l!2]!2`40m!2`!2o.:l!2o!2p40m!2p!3R.:l!3R!3S40m!3S!3T.:l!3T!3Z40m!3Z!3^.:l!3^!3a40m!3a!3b.:l!3b!3f40m!3f!3i.:l!3i!3j40m!3j!3k40m!3k!3l.:l!3l!3m40m!3m!3n.:l!3n!3o40m!3o!3p40m!3p!3s.:l!3s!3t40m!3t!3u40m!3u!3x.:l!3x!3{40m!3{!4O.:l!4O!4[40m!4[!4r.:l!4r!4s40m!4s!5y.:l!5y!6R40m!6R!6S.:l!6S!6V40m!6V!6W.:l!6W!6o40m!6o!6p.:l!6p!6z40m!6z!6{.:l!6{!7Q40m!7Q!7T.:l!7T!7U40m!7U!7p.:l!7p!7q40m!7q!7r40m!7r!7x.:l!7x!7y40m!7y!7z40m!7z!8o.:l!8o!8w40m!8w!8x.:l!8x!8{40m!8{!8|.:l!8|!9e40m!9e!9f.:l!9f!9p40m!9p!9q.:l!9q!9v40m!9v!9y.:l!9y!9z40m!9z!:l.:l!:l!:m40m!:m!:n.:l!:n!:o40m!:o!:p40m!:p!;P.:l!;P!;Q40m!;Q!;R40m!;R!;e.:l!;e!;m40m!;m!;n.:l!;n!;q40m!;q!;r.:l!;r!<m40m!<m!<o.:l!<o!<p40m!<p!=Q.:l!=Q!=R40m!=R!=d.:l!=d!=e40m!=e!=f40m!=f!>O.:l!>O!>U40m!>U!>Z.:l!>Z!>m40m!>m!>p.:l!>p!?Y40m!?Y!?Z.:l!?Z!?d40m!?d!?e.:l!?e!?f40m!?f!?h.:l!?h!?o40m!?o!@{.:l!@{!A}40m!A}!BO.:l!BO!BP40m!BP!BQ40m!BQ!B^.:l!B^!Be40m!Be!Cq.:l!Cq!Cr40m!Cr!Cs40m!Cs!Ct.:l!Ct!Cu40m!Cu!Cw.:l!Cw!Cx40m!Cx!Cy40m!Cy!Cz.:l!Cz!C{40m!C{!C}.:l!C}!DO40m!DO!DU.:l!DU!DY40m!DY!DZ.:l!DZ!Db40m!Db!Dc.:l!Dc!Df40m!Df!Dg.:l!Dg!Dh40m!Dh!Di.:l!Di!Dj40m!Dj!Dl.:l!Dl!Dm40m!Dm!Dn40m!Dn!Do.:l!Do!Ds40m!Ds!Dt.:l!Dt!Du40m!Du!Dv40m!Dv!EP.:l!EP!EQ40m!EQ!ES.:l!ES!EX40m!EX!EY.:l!EY!EZ40m!EZ!Ep.:l!Ep!Et40m!Et!Ff.:l!Ff!Fg40m!Fg!Gx.:l!Gx!HQ40m!HQ!HR.:l!HR!Hw40m!Hw!Id.:l!Id!Ii40m!Ii!LQ.:l!LQ!L}40m!L}!Mc.:l!Mc!Md40m!Md!Mt.:l!Mt!Mz40m!Mz!NO.:l!NO!NS40m!NS!NV.:l!NV!NW40m!NW!NZ.:l!NZ!N[40m!N[!N]40m!N]!Nd.:l!Nd!Ng40m!Ng!Nk.:l!Nk!Nx40m!Nx# U.:l# U# V40m# V# h.:l# h#!`40m#!`#!a.:l#!a#!b40m#!b#!g.:l#!g#!h40m#!h#!j.:l#!j##g40m##g##h.:l##h#*s40m#*s#*t.:l#*t#*x40m#*x#*z.:l#*z#+R40m#+R#+S.:l#+S#+T40m#+T#+U.:l#+U#+Y40m#+Y#+[.:l#+[#,V40m#,V#,W.:l#,W#,[40m#,[#,^.:l#,^#-P40m#-P#-Q.:l#-Q#-U40m#-U#-W.:l#-W#-_40m#-_#-`.:l#-`#-a40m#-a#-b.:l#-b#-f40m#-f#-h.:l#-h#-w40m#-w#-x.:l#-x#/T40m#/T#/U.:l#/U#/Y40m#/Y#/[.:l#/[#0q40m#0q#1h.:l#1h#1x40m#1x#2Y.:l#2Y#4R40m#4R#4_.:l#4_#Au40m#Au#Aw.:l#Aw#BY40m#BY#BZ.:l#BZ#Bu40m#Bu#Bz.:l#Bz#Di40m#Di#EO.:l#EO#E]40m#E]#E^.:l#E^#Eb40m#Eb#Ep.:l#Ep#FS40m#FS#Fb.:l#Fb#Ft40m#Ft#GS.:l#GS#Ga40m#Ga#Gb.:l#Gb#Ge40m#Ge#Gt.:l#Gt#Hz40m#Hz#Io.:l#Io#Ip40m#Ip#It.:l#It#Iu40m#Iu#K[.:l#K[#MW40m#MW#M`.:l#M`#NZ40m#NZ#N[.:l#N[#N]40m#N]#Nb.:l#Nb$ z40m$ z$!U.:l$!U$!s40m$!s$#x.:l$#x$$h40m$$h$$j.:l$$j$$o40m$$o$$z.:l$$z$%x40m$%x$&_.:l$&_$&f40m$&f$'p.:l$'p$(X40m$(X$(b.:l$(b$)i40m$)i$+_.:l$+_$+`40m$+`$-a.:l$-a$.b40m$.b$.s.:l$.s$.z40m$.z$0T.:l$0T$0s40m$0s$1Q.:l$1Q$1R40m$1R$1S40m$1S$1^.:l$1^$2[40m$2[$2v.:l$2v$3l40m$3l$4g.:l$4g$4j40m$4j$4t.:l$4t$5j40m$5j$7y.:l$7y$7}40m$7}$8O.:l$8O$8S40m$8S$8V.:l$8V$8W40m$8W$8X40m$8X$8b.:l$8b$<j40m$<j$=|.:l$=|$DO40m$DO$DQ.:l$DQ$DW40m$DW$DY.:l$DY$EQ40m$EQ$ES.:l$ES$EY40m$EY$E[.:l$E[$Ed40m$Ed$Ee.:l$Ee$Ef40m$Ef$Eg.:l$Eg$Eh40m$Eh$Ei.:l$Ei$Ej40m$Ej$Ek.:l$Ek$F[40m$F[$F^.:l$F^$Ge40m$Ge$Gf.:l$Gf$Gm40m$Gm$Gn.:l$Gn$Go40m$Go$Gr.:l$Gr$Gu40m$Gu$Gv.:l$Gv$G}40m$G}$HQ.:l$HQ$HU40m$HU$HW.:l$HW$H^40m$H^$Hb.:l$Hb$Ho40m$Ho$Ht.:l$Ht$Hw40m$Hw$Hx.:l$Hx$IP40m$IP$Ki.:l$Ki$Kj40m$Kj$Kw.:l$Kw$Kx40m$Kx$LY.:l$LY$Lg40m$Lg$Np.:l$Np$Nq40m$Nq$Nu.:l$Nu$Nv40m$Nv$Nx.:l$Nx% S40m% S% T.:l% T% U40m% U% X.:l% X% ^40m% ^% d.:l% d% e40m% e% f.:l% f% g40m% g% h.:l% h% i40m% i% j.:l% j% n40m% n% o.:l% o% z40m% z% |.:l% |%!Q40m%!Q%!V.:l%!V%![40m%![%!`.:l%!`%!a40m%!a%#g.:l%#g%#h40m%#h%#i40m%#i&/x.:l&/x&0y40m&0y&0z.:l&0z&1{40m&1{&1|.:l&1|&4w40m&4w&4}.:l&4}&5R40m&5R&5U.:l&5U&5V40m&5V&5W40m&5W&5d.:l&5d&6[40m&6[&6].:l&6]&6^40m&6^&6c.:l&6c&6d40m&6d&6f.:l&6f&7p40m&7p&7w.:l&7w&7x40m&7x&8Y.:l&8Y&8q40m&8q&8z.:l&8z&9R40m&9R&9S.:l&9S&9Z40m&9Z&9[.:l&9[&9c40m&9c&9d.:l&9d&9k40m&9k&9l.:l&9l&9s40m&9s&9t.:l&9t&9{40m&9{&9|.:l&9|&:T40m&:T&:U.:l&:U&:]40m&:]&<P.:l&<P&<Q40m&<Q&FZ.:l&FZ&F[40m&F[&F]40m&F]&GX.:l&GX&G^40m&G^&Gc.:l&Gc&Gd40m&Gd&Ge40m&Ge&Gi.:l&Gi&Ic40m&Ic&Ii.:l&Ii&Il40m&Il&Im.:l&Im&Kk40m&Kk&Kl.:l&Kl&Kp40m&Kp&Ku.:l&Ku&Lp40m&Lp&Ls.:l&Ls&Nu40m&Nu' W.:l' W' s40m' s'!z.:l'!z'#[40m'#['.b.:l'.b*3f40m*3f*5S.:l*5S40_40m40_41d.:l41d4Js40m4Js4LY.:l4LY4MY40m4MY4M[.:l4M[5%T40m5%T5%W.:l5%W5%h40m5%h5%r.:l5%r5%s40m5%s5%t40m5%t5&Y.:l5&Y5'Z40m5'Z5'k.:l5'k5(U40m5(U5(^.:l5(^5)v40m5)v5*y.:l5*y5+S40m5+S5+U.:l5+U5-a40m5-a5-c.:l5-c5-g40m5-g5-h.:l5-h5-l40m5-l5-x.:l5-x5.T40m5.T5/t.:l5/t50O40m50O50P.:l50P50S40m50S50T.:l50T50X40m50X50Y.:l50Y50q40m50q51`.:l51`52f40m52f52t.:l52t53x40m53x55Y.:l55Y55`40m55`55c.:l55c55d40m55d55r.:l55r56`40m56`56j.:l56j57R40m57R57l.:l57l58Z40m58Z58b.:l58b59c40m59c5:P.:l5:P5:Q40m5:Q5;S.:l5;S5;}40m5;}5<f.:l5<f5<i40m5<i5<j.:l5<j5<r40m5<r5=W.:l5=W5=o40m5=o5=r.:l5=r5=s40m5=s5=x.:l5=x5>z40m5>z5>{.:l5>{5>|40m5>|5?P.:l5?P5?Q40m5?Q5?R40m5?R5?T.:l5?T5?Y40m5?Y5?[.:l5?[5?]40m5?]5?^.:l5?^5?_40m5?_5?w.:l5?w5?z40m5?z5?|.:l5?|5@X40m5@X5@`.:l5@`5@c40m5@c5@o.:l5@o5@u40m5@u5@w.:l5@w5@}40m5@}5AP.:l5AP5AV40m5AV5A`.:l5A`5Ag40m5Ag5Ah.:l5Ah5Ao40m5Ao5Dv.:l5Dv5Ek40m5Ek5FY.:l5FY;%S40m;%S;%`.:l;%`;%w40m;%w;%{.:l;%{;'O40m;'O;'S.:l;'S;=`.;Y<%l?&r.:l?&r?.p40m?.p?.r.:l?.r?1Q40m?1Q?1x.:l?1x?2P40m?2P?2].:l?2]?2b40m?2b?2g.:l?2g?2h40m?2h?2i.:l?2i?2s40m?2s?2t.:l?2t?3R40m?3R?3S.:l?3S?3X40m?3X?3Y.:l?3Y?3Z40m?3Z?3[.:l?3[?3]40m?3]?3^40m?3^?3_.:l?3_?3`40m?3`?3a40m?3a?3b.:l?3b?5r40m?5r?6e.:l?6e?>`40m?>`?>r.:l?>r?@U40m?@U?@W.:l?@W?A`40m?A`?BY.:l?BY?Bf40m?Bf?EO.:l?EO?ET40m?ET?EU.:l?EU?HR40m?HR?Hw.:l?Hw?Ic40m?Ic?Ii.:l?Ii?JT40m?JT?J`.:l?J`?L]40m?L]?L`.:l?L`?Lf40m?Lf?Lh.:l?Lh?Ln40m?Ln?Lp.:l?Lp?Lv40m?Lv?Lx.:l?Lx?L{40m?L{O.:l!X57p2i|SzQS!RmPOY.;fYZ!-iZq.;fqr57ers2!{st57etu57euv57evw57ewx40mxz.;fz{57e{|57e|!O.;f!O!P57e!P!Q57e!Q![57e![!a.;f!a!b57e!b!c.;f!c!}57e!}#O.;f#O#P57e#P#R.;f#R#S57e#S#T57e#T#o57e#o$p.;f$p$q57e$q${.;f${$|57e$|%Q.;f%Q%R57e%R%W.;f%W%o57e%o%p.;f%p&a57e&a&b.;f&b0`57e0`0d.;f0d0p57e0p1O.;f1O1T57e1T1[.;f1[1]57e1]1^.;f1^1_57e1_4U.;f4U4Z57e4Z4[.;f4[4]57e4]4^57e4^4`.;f4`4d57e4d4l.;f4l4m57e4m4n.;f4n4q57e4q4r.;f4r4s57e4s4t.;f4t5Y57e5Y5Z.;f5Z7Q57e7Q7R.;f7R:S57e:S:[.;f:[=p57e=p=y.;f=y>q57e>q>s.;f>s>t57e>t>{.;f>{?t57e?tA`.;fA`A{57eA{BQ.;fBQBT57eBTCS.;fCSDP57eDPDt.;fDtDu57eDuDv57eDvDw.;fDwGO57eGOGP.;fGPGQ57eGQGa.;fGaGb57eGbGc57eGcGj.;fGjGk57eGkGl57eGlGv.;fGvGy57eGyG{.;fG{G|57eG|H^.;fH^H_57eH_H`.;fH`IO57eIOIm.;fImKj57eKjKu.;fKuKv57eKvL`.;fL`MR57eMRM[.;fM[M]57eM]M^57eM^Mb.;fMbMc57eMcMh.;fMhNO57eNONS.;fNSNT57eNTN^.;fN^N_57eN_Nb.;fNbNc57eNcNz.;fNz! e57e! e!#O.;f!#O!#P57e!#P!#Q.;f!#Q!#]57e!#]!%W.;f!%W!&`57e!&`!&c.;f!&c!&d57e!&d!&v.;f!&v!&w57e!&w!'O.;f!'O!'Y57e!'Y!'i.;f!'i!'p57e!'p!'q.;f!'q!'x57e!'x!'}.;f!'}!(V57e!(V!(X.;f!(X!(Y57e!(Y!(Z57e!(Z!(].;f!(]!(s57e!(s!(t.;f!(t!({57e!({!(|.;f!(|!(}57e!(}!)Q.;f!)Q!)U57e!)U!)X.;f!)X!)Y57e!)Y!)j.;f!)j!)k57e!)k!)x.;f!)x!)y57e!)y!)z57e!)z!){.;f!){!*O57e!*O!*^.;f!*^!*_57e!*_!*`57e!*`!*s.;f!*s!*y57e!*y!*}.;f!*}!+O57e!+O!+P57e!+P!+R.;f!+R!+i57e!+i!+j.;f!+j!+q57e!+q!+r.;f!+r!+s57e!+s!+t57e!+t!+u.;f!+u!+v57e!+v!+w57e!+w!+x.;f!+x!+y57e!+y!+z57e!+z!,k.;f!,k!,o57e!,o!,p.;f!,p!,q57e!,q!-U.;f!-U!-X57e!-X!-i.;f!-i!-r57e!-r!-s.;f!-s!-v57e!-v!-w.;f!-w!._57e!._!.`.;f!.`!.g57e!.g!.h.;f!.h!.i57e!.i!.j57e!.j!.k.;f!.k!.p57e!.p!.s.;f!.s!.t57e!.t!/W.;f!/W!/X57e!/X!/h.;f!/h!/i57e!/i!/j57e!/j!0_.;f!0_!0g57e!0g!0i.;f!0i!0j57e!0j!0k57e!0k!0m.;f!0m!1T57e!1T!1U.;f!1U!1]57e!1]!1^.;f!1^!1_57e!1_!1`57e!1`!1a.;f!1a!1f57e!1f!1i.;f!1i!1j57e!1j!2Y.;f!2Y!2Z57e!2Z!2[57e!2[!2].;f!2]!2`57e!2`!2o.;f!2o!2p57e!2p!3R.;f!3R!3S57e!3S!3T.;f!3T!3Z57e!3Z!3^.;f!3^!3a57e!3a!3b.;f!3b!3f57e!3f!3i.;f!3i!3j57e!3j!3k57e!3k!3l.;f!3l!3m57e!3m!3n.;f!3n!3o57e!3o!3p57e!3p!3s.;f!3s!3t57e!3t!3u57e!3u!3x.;f!3x!3{57e!3{!4O.;f!4O!4[57e!4[!4r.;f!4r!4s57e!4s!5y.;f!5y!6R57e!6R!6S.;f!6S!6V57e!6V!6W.;f!6W!6o57e!6o!6p.;f!6p!6z57e!6z!6{.;f!6{!7Q57e!7Q!7T.;f!7T!7U57e!7U!7p.;f!7p!7q57e!7q!7r57e!7r!7x.;f!7x!7y57e!7y!7z57e!7z!8o.;f!8o!8w57e!8w!8x.;f!8x!8{57e!8{!8|.;f!8|!9e57e!9e!9f.;f!9f!9p57e!9p!9q.;f!9q!9v57e!9v!9y.;f!9y!9z57e!9z!:l.;f!:l!:m57e!:m!:n.;f!:n!:o57e!:o!:p57e!:p!;P.;f!;P!;Q57e!;Q!;R57e!;R!;e.;f!;e!;m57e!;m!;n.;f!;n!;q57e!;q!;r.;f!;r!<m57e!<m!<o.;f!<o!<p57e!<p!=Q.;f!=Q!=R57e!=R!=d.;f!=d!=e57e!=e!=f57e!=f!>O.;f!>O!>U57e!>U!>Z.;f!>Z!>m57e!>m!>p.;f!>p!?Y57e!?Y!?Z.;f!?Z!?d57e!?d!?e.;f!?e!?f57e!?f!?h.;f!?h!?o57e!?o!@{.;f!@{!A}57e!A}!BO.;f!BO!BP57e!BP!BQ57e!BQ!B^.;f!B^!Be57e!Be!Cq.;f!Cq!Cr57e!Cr!Cs57e!Cs!Ct.;f!Ct!Cu57e!Cu!Cw.;f!Cw!Cx57e!Cx!Cy57e!Cy!Cz.;f!Cz!C{57e!C{!C}.;f!C}!DO57e!DO!DU.;f!DU!DY57e!DY!DZ.;f!DZ!Db57e!Db!Dc.;f!Dc!Df57e!Df!Dg.;f!Dg!Dh57e!Dh!Di.;f!Di!Dj57e!Dj!Dl.;f!Dl!Dm57e!Dm!Dn57e!Dn!Do.;f!Do!Ds57e!Ds!Dt.;f!Dt!Du57e!Du!Dv57e!Dv!EP.;f!EP!EQ57e!EQ!ES.;f!ES!EX57e!EX!EY.;f!EY!EZ57e!EZ!Ep.;f!Ep!Et57e!Et!Ff.;f!Ff!Fg57e!Fg!Gx.;f!Gx!HQ57e!HQ!HR.;f!HR!Hw57e!Hw!Id.;f!Id!Ii57e!Ii!LQ.;f!LQ!L}57e!L}!Mc.;f!Mc!Md57e!Md!Mt.;f!Mt!Mz57e!Mz!NO.;f!NO!NS57e!NS!NV.;f!NV!NW57e!NW!NZ.;f!NZ!N[57e!N[!N]57e!N]!Nd.;f!Nd!Ng57e!Ng!Nk.;f!Nk!Nx57e!Nx# U.;f# U# V57e# V# h.;f# h#!`57e#!`#!a.;f#!a#!b57e#!b#!g.;f#!g#!h57e#!h#!j.;f#!j##g57e##g##h.;f##h#*s57e#*s#*t.;f#*t#*x57e#*x#*z.;f#*z#+R57e#+R#+S.;f#+S#+T57e#+T#+U.;f#+U#+Y57e#+Y#+[.;f#+[#,V57e#,V#,W.;f#,W#,[57e#,[#,^.;f#,^#-P57e#-P#-Q.;f#-Q#-U57e#-U#-W.;f#-W#-_57e#-_#-`.;f#-`#-a57e#-a#-b.;f#-b#-f57e#-f#-h.;f#-h#-w57e#-w#-x.;f#-x#/T57e#/T#/U.;f#/U#/Y57e#/Y#/[.;f#/[#0q57e#0q#1h.;f#1h#1x57e#1x#2Y.;f#2Y#4R57e#4R#4_.;f#4_#Au57e#Au#Aw.;f#Aw#BY57e#BY#BZ.;f#BZ#Bu57e#Bu#Bz.;f#Bz#Di57e#Di#EO.;f#EO#E]57e#E]#E^.;f#E^#Eb57e#Eb#Ep.;f#Ep#FS57e#FS#Fb.;f#Fb#Ft57e#Ft#GS.;f#GS#Ga57e#Ga#Gb.;f#Gb#Ge57e#Ge#Gt.;f#Gt#Hz57e#Hz#Io.;f#Io#Ip57e#Ip#It.;f#It#Iu57e#Iu#K[.;f#K[#MW57e#MW#M`.;f#M`#NZ57e#NZ#N[.;f#N[#N]57e#N]#Nb.;f#Nb$ z57e$ z$!U.;f$!U$!s57e$!s$#x.;f$#x$$h57e$$h$$j.;f$$j$$o57e$$o$$z.;f$$z$%x57e$%x$&_.;f$&_$&f57e$&f$'p.;f$'p$(X57e$(X$(b.;f$(b$)i57e$)i$+_.;f$+_$+`57e$+`$-a.;f$-a$.b57e$.b$.s.;f$.s$.z57e$.z$0T.;f$0T$0s57e$0s$1Q.;f$1Q$1R57e$1R$1S57e$1S$1^.;f$1^$2[57e$2[$2v.;f$2v$3l57e$3l$4g.;f$4g$4j57e$4j$4t.;f$4t$5j57e$5j$7y.;f$7y$7}57e$7}$8O.;f$8O$8S57e$8S$8V.;f$8V$8W57e$8W$8X57e$8X$8b.;f$8b$<j57e$<j$=|.;f$=|$DO57e$DO$DQ.;f$DQ$DW57e$DW$DY.;f$DY$EQ57e$EQ$ES.;f$ES$EY57e$EY$E[.;f$E[$Ed57e$Ed$Ee.;f$Ee$Ef57e$Ef$Eg.;f$Eg$Eh57e$Eh$Ei.;f$Ei$Ej57e$Ej$Ek.;f$Ek$F[57e$F[$F^.;f$F^$Ge57e$Ge$Gf.;f$Gf$Gm57e$Gm$Gn.;f$Gn$Go57e$Go$Gr.;f$Gr$Gu57e$Gu$Gv.;f$Gv$G}57e$G}$HQ.;f$HQ$HU57e$HU$HW.;f$HW$H^57e$H^$Hb.;f$Hb$Ho57e$Ho$Ht.;f$Ht$Hw57e$Hw$Hx.;f$Hx$IP57e$IP$Ki.;f$Ki$Kj57e$Kj$Kw.;f$Kw$Kx57e$Kx$LY.;f$LY$Lg57e$Lg$Np.;f$Np$Nq57e$Nq$Nu.;f$Nu$Nv57e$Nv$Nx.;f$Nx% S57e% S% T.;f% T% U57e% U% X.;f% X% ^57e% ^% d.;f% d% e57e% e% f.;f% f% g57e% g% h.;f% h% i57e% i% j.;f% j% n57e% n% o.;f% o% z57e% z% |.;f% |%!Q57e%!Q%!V.;f%!V%![57e%![%!`.;f%!`%!a57e%!a%#g.;f%#g%#h57e%#h%#i57e%#i&/x.;f&/x&0y57e&0y&0z.;f&0z&1{57e&1{&1|.;f&1|&4w57e&4w&4}.;f&4}&5R57e&5R&5U.;f&5U&5V57e&5V&5W57e&5W&5d.;f&5d&6[57e&6[&6].;f&6]&6^57e&6^&6c.;f&6c&6d57e&6d&6f.;f&6f&7p57e&7p&7w.;f&7w&7x57e&7x&8Y.;f&8Y&8q57e&8q&8z.;f&8z&9R57e&9R&9S.;f&9S&9Z57e&9Z&9[.;f&9[&9c57e&9c&9d.;f&9d&9k57e&9k&9l.;f&9l&9s57e&9s&9t.;f&9t&9{57e&9{&9|.;f&9|&:T57e&:T&:U.;f&:U&:]57e&:]&<P.;f&<P&<Q57e&<Q&FZ.;f&FZ&F[57e&F[&F]57e&F]&GX.;f&GX&G^57e&G^&Gc.;f&Gc&Gd57e&Gd&Ge57e&Ge&Gi.;f&Gi&Ic57e&Ic&Ii.;f&Ii&Il57e&Il&Im.;f&Im&Kk57e&Kk&Kl.;f&Kl&Kp57e&Kp&Ku.;f&Ku&Lp57e&Lp&Ls.;f&Ls&Nu57e&Nu' W.;f' W' s57e' s'!z.;f'!z'#[57e'#['.b.;f'.b*3f57e*3f*5S.;f*5S40_57e40_41d.;f41d4Js57e4Js4LY.;f4LY4MY57e4MY4M[.;f4M[5%T57e5%T5%W.;f5%W5%h57e5%h5%r.;f5%r5%s57e5%s5%t57e5%t5&Y.;f5&Y5'Z57e5'Z5'k.;f5'k5(U57e5(U5(^.;f5(^5)v57e5)v5*y.;f5*y5+S57e5+S5+U.;f5+U5-a57e5-a5-c.;f5-c5-g57e5-g5-h.;f5-h5-l57e5-l5-x.;f5-x5.T57e5.T5/t.;f5/t50O57e50O50P.;f50P50S57e50S50T.;f50T50X57e50X50Y.;f50Y50q57e50q51`.;f51`52f57e52f52t.;f52t53x57e53x55Y.;f55Y55`57e55`55c.;f55c55d57e55d55r.;f55r56`57e56`56j.;f56j57R57e57R57l.;f57l58Z57e58Z58b.;f58b59c57e59c5:P.;f5:P5:Q57e5:Q5;S.;f5;S5;}57e5;}5<f.;f5<f5<i57e5<i5<j.;f5<j5<r57e5<r5=W.;f5=W5=o57e5=o5=r.;f5=r5=s57e5=s5=x.;f5=x5>z57e5>z5>{.;f5>{5>|57e5>|5?P.;f5?P5?Q57e5?Q5?R57e5?R5?T.;f5?T5?Y57e5?Y5?[.;f5?[5?]57e5?]5?^.;f5?^5?_57e5?_5?w.;f5?w5?z57e5?z5?|.;f5?|5@X57e5@X5@`.;f5@`5@c57e5@c5@o.;f5@o5@u57e5@u5@w.;f5@w5@}57e5@}5AP.;f5AP5AV57e5AV5A`.;f5A`5Ag57e5Ag5Ah.;f5Ah5Ao57e5Ao5Dv.;f5Dv5Ek57e5Ek5FY.;f5FY;%S57e;%S;%`.;f;%`;%w57e;%w;%{.;f;%{;'O57e;'O;'S.;f;'S;=`.<[<%l?&r.;f?&r?.p57e?.p?.r.;f?.r?1Q57e?1Q?1x.;f?1x?2P57e?2P?2].;f?2]?2b57e?2b?2g.;f?2g?2h57e?2h?2i.;f?2i?2s57e?2s?2t.;f?2t?3R57e?3R?3S.;f?3S?3X57e?3X?3Y.;f?3Y?3Z57e?3Z?3[.;f?3[?3]57e?3]?3^57e?3^?3_.;f?3_?3`57e?3`?3a57e?3a?3b.;f?3b?5r57e?5r?6e.;f?6e?>`57e?>`?>r.;f?>r?@U57e?@U?@W.;f?@W?A`57e?A`?BY.;f?BY?Bf57e?Bf?EO.;f?EO?ET57e?ET?EU.;f?EU?HR57e?HR?Hw.;f?Hw?Ic57e?Ic?Ii.;f?Ii?JT57e?JT?J`.;f?J`?L]57e?L]?L`.;f?L`?Lf57e?Lf?Lh.;f?Lh?Ln57e?Ln?Lp.;f?Lp?Lv57e?Lv?Lx.;f?Lx?L{57e?L{O.;f_6>l2g!OW|SzQ!kPmPOq!)tqr!2wrs#9kst!2wtu!2wuv!2wvw!2wwx';ixz!)tz{!2w{|!2w|!O!)t!O!P!2w!P!Q!2w!Q![!2w![!a!)t!a!b!2w!b!c!)t!c!}!2w!}#O!)t#O#P!2w#P#R!)t#R#S!2w#S#T)Hy#T#o!2w#o$p!)t$p$q!2w$q${!)t${$|!2w$|%Q!)t%Q%R!2w%R%W!)t%W%o!2w%o%p!)t%p&a!2w&a&b!)t&b0`!2w0`0d!)t0d0p!2w0p1O!)t1O1T!2w1T1[!)t1[1]!2w1]1^!)t1^1_!2w1_4U!)t4U4Z!2w4Z4[!)t4[4]!2w4]4^!2w4^4`!)t4`4d!2w4d4l!)t4l4m!2w4m4n!)t4n4q!2w4q4r!)t4r4s!2w4s4t!)t4t5Y!2w5Y5Z!)t5Z7Q!2w7Q7R!)t7R:S!2w:S:[!)t:[=p!2w=p=y!)t=y>q!2w>q>s!)t>s>t!2w>t>{!)t>{?t!2w?tA`!)tA`A{!2wA{BQ!)tBQBT!2wBTCS!)tCSDP!2wDPDt!)tDtDu!2wDuDv!2wDvDw!)tDwGO!2wGOGP!)tGPGQ!2wGQGa!)tGaGb!2wGbGc!2wGcGj!)tGjGk!2wGkGl!2wGlGv!)tGvGy!2wGyG{!)tG{G|!2wG|H^!)tH^H_!2wH_H`!)tH`IO!2wIOIm!)tImKj!2wKjKu!)tKuKv!2wKvL`!)tL`MR!2wMRM[!)tM[M]!2wM]M^!2wM^Mb!)tMbMc!2wMcMh!)tMhNO!2wNONS!)tNSNT!2wNTN^!)tN^N_!2wN_Nb!)tNbNc!2wNcNz!)tNz! e!2w! e!#O!)t!#O!#P!2w!#P!#Q!)t!#Q!#]!2w!#]!%W!)t!%W!&`!2w!&`!&c!)t!&c!&d!2w!&d!&v!)t!&v!&w!2w!&w!'O!)t!'O!'Y!2w!'Y!'i!)t!'i!'p!2w!'p!'q!)t!'q!'x!2w!'x!'}!)t!'}!(V!2w!(V!(X!)t!(X!(Y!2w!(Y!(Z!2w!(Z!(]!)t!(]!(s!2w!(s!(t!)t!(t!({!2w!({!(|!)t!(|!(}!2w!(}!)Q!)t!)Q!)U!2w!)U!)X!)t!)X!)Y!2w!)Y!)j!)t!)j!)k!2w!)k!)x!)t!)x!)y!2w!)y!)z!2w!)z!){!)t!){!*O!2w!*O!*^!)t!*^!*_!2w!*_!*`!2w!*`!*s!)t!*s!*y!2w!*y!*}!)t!*}!+O!2w!+O!+P!2w!+P!+R!)t!+R!+i!2w!+i!+j!)t!+j!+q!2w!+q!+r!)t!+r!+s!2w!+s!+t!2w!+t!+u!)t!+u!+v!2w!+v!+w!2w!+w!+x!)t!+x!+y!2w!+y!+z!2w!+z!,k!)t!,k!,o!2w!,o!,p!)t!,p!,q!2w!,q!-U!)t!-U!-X!2w!-X!-i!)t!-i!-r!2w!-r!-s!)t!-s!-v!2w!-v!-w!)t!-w!._!2w!._!.`!)t!.`!.g!2w!.g!.h!)t!.h!.i!2w!.i!.j!2w!.j!.k!)t!.k!.p!2w!.p!.s!)t!.s!.t!2w!.t!/W!)t!/W!/X!2w!/X!/h!)t!/h!/i!2w!/i!/j!2w!/j!0_!)t!0_!0g!2w!0g!0i!)t!0i!0j!2w!0j!0k!2w!0k!0m!)t!0m!1T!2w!1T!1U!)t!1U!1]!2w!1]!1^!)t!1^!1_!2w!1_!1`!2w!1`!1a!)t!1a!1f!2w!1f!1i!)t!1i!1j!2w!1j!2Y!)t!2Y!2Z!2w!2Z!2[!2w!2[!2]!)t!2]!2`!2w!2`!2o!)t!2o!2p!2w!2p!3R!)t!3R!3S!2w!3S!3T!)t!3T!3Z!2w!3Z!3^!)t!3^!3a!2w!3a!3b!)t!3b!3f!2w!3f!3i!)t!3i!3j!2w!3j!3k!2w!3k!3l!)t!3l!3m!2w!3m!3n!)t!3n!3o!2w!3o!3p!2w!3p!3s!)t!3s!3t!2w!3t!3u!2w!3u!3x!)t!3x!3{!2w!3{!4O!)t!4O!4[!2w!4[!4r!)t!4r!4s!2w!4s!5y!)t!5y!6R!2w!6R!6S!)t!6S!6V!2w!6V!6W!)t!6W!6o!2w!6o!6p!)t!6p!6z!2w!6z!6{!)t!6{!7Q!2w!7Q!7T!)t!7T!7U!2w!7U!7p!)t!7p!7q!2w!7q!7r!2w!7r!7x!)t!7x!7y!2w!7y!7z!2w!7z!8o!)t!8o!8w!2w!8w!8x!)t!8x!8{!2w!8{!8|!)t!8|!9e!2w!9e!9f!)t!9f!9p!2w!9p!9q!)t!9q!9v!2w!9v!9y!)t!9y!9z!2w!9z!:l!)t!:l!:m!2w!:m!:n!)t!:n!:o!2w!:o!:p!2w!:p!;P!)t!;P!;Q!2w!;Q!;R!2w!;R!;e!)t!;e!;m!2w!;m!;n!)t!;n!;q!2w!;q!;r!)t!;r!<m!2w!<m!<o!)t!<o!<p!2w!<p!=Q!)t!=Q!=R!2w!=R!=d!)t!=d!=e!2w!=e!=f!2w!=f!>O!)t!>O!>U!2w!>U!>Z!)t!>Z!>m!2w!>m!>p!)t!>p!?Y!2w!?Y!?Z!)t!?Z!?d!2w!?d!?e!)t!?e!?f!2w!?f!?h!)t!?h!?o!2w!?o!@{!)t!@{!A}!2w!A}!BO!)t!BO!BP!2w!BP!BQ!2w!BQ!B^!)t!B^!Be!2w!Be!Cq!)t!Cq!Cr!2w!Cr!Cs!2w!Cs!Ct!)t!Ct!Cu!2w!Cu!Cw!)t!Cw!Cx!2w!Cx!Cy!2w!Cy!Cz!)t!Cz!C{!2w!C{!C}!)t!C}!DO!2w!DO!DU!)t!DU!DY!2w!DY!DZ!)t!DZ!Db!2w!Db!Dc!)t!Dc!Df!2w!Df!Dg!)t!Dg!Dh!2w!Dh!Di!)t!Di!Dj!2w!Dj!Dl!)t!Dl!Dm!2w!Dm!Dn!2w!Dn!Do!)t!Do!Ds!2w!Ds!Dt!)t!Dt!Du!2w!Du!Dv!2w!Dv!EP!)t!EP!EQ!2w!EQ!ES!)t!ES!EX!2w!EX!EY!)t!EY!EZ!2w!EZ!Ep!)t!Ep!Et!2w!Et!Ff!)t!Ff!Fg!2w!Fg!Gx!)t!Gx!HQ!2w!HQ!HR!)t!HR!Hw!2w!Hw!Id!)t!Id!Ii!2w!Ii!LQ!)t!LQ!L}!2w!L}!Mc!)t!Mc!Md!2w!Md!Mt!)t!Mt!Mz!2w!Mz!NO!)t!NO!NS!2w!NS!NV!)t!NV!NW!2w!NW!NZ!)t!NZ!N[!2w!N[!N]!2w!N]!Nd!)t!Nd!Ng!2w!Ng!Nk!)t!Nk!Nx!2w!Nx# U!)t# U# V!2w# V# h!)t# h#!`!2w#!`#!a!)t#!a#!b!2w#!b#!g!)t#!g#!h!2w#!h#!j!)t#!j##g!2w##g##h!)t##h#*s!2w#*s#*t!)t#*t#*x!2w#*x#*z!)t#*z#+R!2w#+R#+S!)t#+S#+T!2w#+T#+U!)t#+U#+Y!2w#+Y#+[!)t#+[#,V!2w#,V#,W!)t#,W#,[!2w#,[#,^!)t#,^#-P!2w#-P#-Q!)t#-Q#-U!2w#-U#-W!)t#-W#-_!2w#-_#-`!)t#-`#-a!2w#-a#-b!)t#-b#-f!2w#-f#-h!)t#-h#-w!2w#-w#-x!)t#-x#/T!2w#/T#/U!)t#/U#/Y!2w#/Y#/[!)t#/[#0q!2w#0q#1h!)t#1h#1x!2w#1x#2Y!)t#2Y#4R!2w#4R#4_!)t#4_#Au!2w#Au#Aw!)t#Aw#BY!2w#BY#BZ!)t#BZ#Bu!2w#Bu#Bz!)t#Bz#Di!2w#Di#EO!)t#EO#E]!2w#E]#E^!)t#E^#Eb!2w#Eb#Ep!)t#Ep#FS!2w#FS#Fb!)t#Fb#Ft!2w#Ft#GS!)t#GS#Ga!2w#Ga#Gb!)t#Gb#Ge!2w#Ge#Gt!)t#Gt#Hz!2w#Hz#Io!)t#Io#Ip!2w#Ip#It!)t#It#Iu!2w#Iu#K[!)t#K[#MW!2w#MW#M`!)t#M`#NZ!2w#NZ#N[!)t#N[#N]!2w#N]#Nb!)t#Nb$ z!2w$ z$!U!)t$!U$!s!2w$!s$#x!)t$#x$$h!2w$$h$$j!)t$$j$$o!2w$$o$$z!)t$$z$%x!2w$%x$&_!)t$&_$&f!2w$&f$'p!)t$'p$(X!2w$(X$(b!)t$(b$)i!2w$)i$+_!)t$+_$+`!2w$+`$-a!)t$-a$.b!2w$.b$.s!)t$.s$.z!2w$.z$0T!)t$0T$0s!2w$0s$1Q!)t$1Q$1R!2w$1R$1S!2w$1S$1^!)t$1^$2[!2w$2[$2v!)t$2v$3l!2w$3l$4g!)t$4g$4j!2w$4j$4t!)t$4t$5j!2w$5j$7y!)t$7y$7}!2w$7}$8O!)t$8O$8S!2w$8S$8V!)t$8V$8W!2w$8W$8X!2w$8X$8b!)t$8b$<j!2w$<j$=|!)t$=|$DO!2w$DO$DQ!)t$DQ$DW!2w$DW$DY!)t$DY$EQ!2w$EQ$ES!)t$ES$EY!2w$EY$E[!)t$E[$Ed!2w$Ed$Ee!)t$Ee$Ef!2w$Ef$Eg!)t$Eg$Eh!2w$Eh$Ei!)t$Ei$Ej!2w$Ej$Ek!)t$Ek$F[!2w$F[$F^!)t$F^$Ge!2w$Ge$Gf!)t$Gf$Gm!2w$Gm$Gn!)t$Gn$Go!2w$Go$Gr!)t$Gr$Gu!2w$Gu$Gv!)t$Gv$G}!2w$G}$HQ!)t$HQ$HU!2w$HU$HW!)t$HW$H^!2w$H^$Hb!)t$Hb$Ho!2w$Ho$Ht!)t$Ht$Hw!2w$Hw$Hx!)t$Hx$IP!2w$IP$Ki!)t$Ki$Kj!2w$Kj$Kw!)t$Kw$Kx!2w$Kx$LY!)t$LY$Lg!2w$Lg$Np!)t$Np$Nq!2w$Nq$Nu!)t$Nu$Nv!2w$Nv$Nx!)t$Nx% S!2w% S% T!)t% T% U!2w% U% X!)t% X% ^!2w% ^% d!)t% d% e!2w% e% f!)t% f% g!2w% g% h!)t% h% i!2w% i% j!)t% j% n!2w% n% o!)t% o% z!2w% z% |!)t% |%!Q!2w%!Q%!V!)t%!V%![!2w%![%!`!)t%!`%!a!2w%!a%#g!)t%#g%#h!2w%#h%#i!2w%#i&/x!)t&/x&0y!2w&0y&0z!)t&0z&1{!2w&1{&1|!)t&1|&4w!2w&4w&4}!)t&4}&5R!2w&5R&5U!)t&5U&5V!2w&5V&5W!2w&5W&5d!)t&5d&6[!2w&6[&6]!)t&6]&6^!2w&6^&6c!)t&6c&6d!2w&6d&6f!)t&6f&7p!2w&7p&7w!)t&7w&7x!2w&7x&8Y!)t&8Y&8q!2w&8q&8z!)t&8z&9R!2w&9R&9S!)t&9S&9Z!2w&9Z&9[!)t&9[&9c!2w&9c&9d!)t&9d&9k!2w&9k&9l!)t&9l&9s!2w&9s&9t!)t&9t&9{!2w&9{&9|!)t&9|&:T!2w&:T&:U!)t&:U&:]!2w&:]&<P!)t&<P&<Q!2w&<Q&FZ!)t&FZ&F[!2w&F[&F]!2w&F]&GX!)t&GX&G^!2w&G^&Gc!)t&Gc&Gd!2w&Gd&Ge!2w&Ge&Gi!)t&Gi&Ic!2w&Ic&Ii!)t&Ii&Il!2w&Il&Im!)t&Im&Kk!2w&Kk&Kl!)t&Kl&Kp!2w&Kp&Ku!)t&Ku&Lp!2w&Lp&Ls!)t&Ls&Nu!2w&Nu' W!)t' W' s!2w' s'!z!)t'!z'#[!2w'#['.b!)t'.b*3f!2w*3f*5S!)t*5S40_!2w40_41d!)t41d4Js!2w4Js4LY!)t4LY4MY!2w4MY4M[!)t4M[5%T!2w5%T5%W!)t5%W5%h!2w5%h5%r!)t5%r5%s!2w5%s5%t!2w5%t5&Y!)t5&Y5'Z!2w5'Z5'k!)t5'k5(U!2w5(U5(^!)t5(^5)v!2w5)v5*y!)t5*y5+S!2w5+S5+U!)t5+U5-a!2w5-a5-c!)t5-c5-g!2w5-g5-h!)t5-h5-l!2w5-l5-x!)t5-x5.T!2w5.T5/t!)t5/t50O!2w50O50P!)t50P50S!2w50S50T!)t50T50X!2w50X50Y!)t50Y50q!2w50q51`!)t51`52f!2w52f52t!)t52t53x!2w53x55Y!)t55Y55`!2w55`55c!)t55c55d!2w55d55r!)t55r56`!2w56`56j!)t56j57R!2w57R57l!)t57l58Z!2w58Z58b!)t58b59c!2w59c5:P!)t5:P5:Q!2w5:Q5;S!)t5;S5;}!2w5;}5<f!)t5<f5<i!2w5<i5<j!)t5<j5<r!2w5<r5=W!)t5=W5=o!2w5=o5=r!)t5=r5=s!2w5=s5=x!)t5=x5>z!2w5>z5>{!)t5>{5>|!2w5>|5?P!)t5?P5?Q!2w5?Q5?R!2w5?R5?T!)t5?T5?Y!2w5?Y5?[!)t5?[5?]!2w5?]5?^!)t5?^5?_!2w5?_5?w!)t5?w5?z!2w5?z5?|!)t5?|5@X!2w5@X5@`!)t5@`5@c!2w5@c5@o!)t5@o5@u!2w5@u5@w!)t5@w5@}!2w5@}5AP!)t5AP5AV!2w5AV5A`!)t5A`5Ag!2w5Ag5Ah!)t5Ah5Ao!2w5Ao5Dv!)t5Dv5Ek!2w5Ek5FY!)t5FY;%S!2w;%S;%`!)t;%`;%w!2w;%w;%{!)t;%{;'O!2w;'O;'S!)t;'S;=`!.]<%l?&r!)t?&r?.p!2w?.p?.r!)t?.r?1Q!2w?1Q?1x!)t?1x?2P!2w?2P?2]!)t?2]?2b!2w?2b?2g!)t?2g?2h!2w?2h?2i!)t?2i?2s!2w?2s?2t!)t?2t?3R!2w?3R?3S!)t?3S?3X!2w?3X?3Y!)t?3Y?3Z!2w?3Z?3[!)t?3[?3]!2w?3]?3^!2w?3^?3_!)t?3_?3`!2w?3`?3a!2w?3a?3b!)t?3b?5r!2w?5r?6e!)t?6e?>`!2w?>`?>r!)t?>r?@U!2w?@U?@W!)t?@W?A`!2w?A`?BY!)t?BY?Bf!2w?Bf?EO!)t?EO?ET!2w?ET?EU!)t?EU?HR!2w?HR?Hw!)t?Hw?Ic!2w?Ic?Ii!)t?Ii?JT!2w?JT?J`!)t?J`?L]!2w?L]?L`!)t?L`?Lf!2w?Lf?Lh!)t?Lh?Ln!2w?Ln?Lp!)t?Lp?Lv!2w?Lv?Lx!)t?Lx?L{!2w?L{O!)t_7E`2g!OW|SyRmPOq!,^qr';irs$@]st';itu';iuv';ivw';iwx';ixz!,^z{';i{|';i|!O!,^!O!P';i!P!Q';i!Q![';i![!a!,^!a!b';i!b!c!,^!c!}';i!}#O!,^#O#P';i#P#R!,^#R#S';i#S#T(BZ#T#o';i#o$p!,^$p$q';i$q${!,^${$|';i$|%Q!,^%Q%R';i%R%W!,^%W%o';i%o%p!,^%p&a';i&a&b!,^&b0`';i0`0d!,^0d0p';i0p1O!,^1O1T';i1T1[!,^1[1]';i1]1^!,^1^1_';i1_4U!,^4U4Z';i4Z4[!,^4[4]';i4]4^';i4^4`!,^4`4d';i4d4l!,^4l4m';i4m4n!,^4n4q';i4q4r!,^4r4s';i4s4t!,^4t5Y';i5Y5Z!,^5Z7Q';i7Q7R!,^7R:S';i:S:[!,^:[=p';i=p=y!,^=y>q';i>q>s!,^>s>t';i>t>{!,^>{?t';i?tA`!,^A`A{';iA{BQ!,^BQBT';iBTCS!,^CSDP';iDPDt!,^DtDu';iDuDv';iDvDw!,^DwGO';iGOGP!,^GPGQ';iGQGa!,^GaGb';iGbGc';iGcGj!,^GjGk';iGkGl';iGlGv!,^GvGy';iGyG{!,^G{G|';iG|H^!,^H^H_';iH_H`!,^H`IO';iIOIm!,^ImKj';iKjKu!,^KuKv';iKvL`!,^L`MR';iMRM[!,^M[M]';iM]M^';iM^Mb!,^MbMc';iMcMh!,^MhNO';iNONS!,^NSNT';iNTN^!,^N^N_';iN_Nb!,^NbNc';iNcNz!,^Nz! e';i! e!#O!,^!#O!#P';i!#P!#Q!,^!#Q!#]';i!#]!%W!,^!%W!&`';i!&`!&c!,^!&c!&d';i!&d!&v!,^!&v!&w';i!&w!'O!,^!'O!'Y';i!'Y!'i!,^!'i!'p';i!'p!'q!,^!'q!'x';i!'x!'}!,^!'}!(V';i!(V!(X!,^!(X!(Y';i!(Y!(Z';i!(Z!(]!,^!(]!(s';i!(s!(t!,^!(t!({';i!({!(|!,^!(|!(}';i!(}!)Q!,^!)Q!)U';i!)U!)X!,^!)X!)Y';i!)Y!)j!,^!)j!)k';i!)k!)x!,^!)x!)y';i!)y!)z';i!)z!){!,^!){!*O';i!*O!*^!,^!*^!*_';i!*_!*`';i!*`!*s!,^!*s!*y';i!*y!*}!,^!*}!+O';i!+O!+P';i!+P!+R!,^!+R!+i';i!+i!+j!,^!+j!+q';i!+q!+r!,^!+r!+s';i!+s!+t';i!+t!+u!,^!+u!+v';i!+v!+w';i!+w!+x!,^!+x!+y';i!+y!+z';i!+z!,k!,^!,k!,o';i!,o!,p!,^!,p!,q';i!,q!-U!,^!-U!-X';i!-X!-i!,^!-i!-r';i!-r!-s!,^!-s!-v';i!-v!-w!,^!-w!._';i!._!.`!,^!.`!.g';i!.g!.h!,^!.h!.i';i!.i!.j';i!.j!.k!,^!.k!.p';i!.p!.s!,^!.s!.t';i!.t!/W!,^!/W!/X';i!/X!/h!,^!/h!/i';i!/i!/j';i!/j!0_!,^!0_!0g';i!0g!0i!,^!0i!0j';i!0j!0k';i!0k!0m!,^!0m!1T';i!1T!1U!,^!1U!1]';i!1]!1^!,^!1^!1_';i!1_!1`';i!1`!1a!,^!1a!1f';i!1f!1i!,^!1i!1j';i!1j!2Y!,^!2Y!2Z';i!2Z!2[';i!2[!2]!,^!2]!2`';i!2`!2o!,^!2o!2p';i!2p!3R!,^!3R!3S';i!3S!3T!,^!3T!3Z';i!3Z!3^!,^!3^!3a';i!3a!3b!,^!3b!3f';i!3f!3i!,^!3i!3j';i!3j!3k';i!3k!3l!,^!3l!3m';i!3m!3n!,^!3n!3o';i!3o!3p';i!3p!3s!,^!3s!3t';i!3t!3u';i!3u!3x!,^!3x!3{';i!3{!4O!,^!4O!4[';i!4[!4r!,^!4r!4s';i!4s!5y!,^!5y!6R';i!6R!6S!,^!6S!6V';i!6V!6W!,^!6W!6o';i!6o!6p!,^!6p!6z';i!6z!6{!,^!6{!7Q';i!7Q!7T!,^!7T!7U';i!7U!7p!,^!7p!7q';i!7q!7r';i!7r!7x!,^!7x!7y';i!7y!7z';i!7z!8o!,^!8o!8w';i!8w!8x!,^!8x!8{';i!8{!8|!,^!8|!9e';i!9e!9f!,^!9f!9p';i!9p!9q!,^!9q!9v';i!9v!9y!,^!9y!9z';i!9z!:l!,^!:l!:m';i!:m!:n!,^!:n!:o';i!:o!:p';i!:p!;P!,^!;P!;Q';i!;Q!;R';i!;R!;e!,^!;e!;m';i!;m!;n!,^!;n!;q';i!;q!;r!,^!;r!<m';i!<m!<o!,^!<o!<p';i!<p!=Q!,^!=Q!=R';i!=R!=d!,^!=d!=e';i!=e!=f';i!=f!>O!,^!>O!>U';i!>U!>Z!,^!>Z!>m';i!>m!>p!,^!>p!?Y';i!?Y!?Z!,^!?Z!?d';i!?d!?e!,^!?e!?f';i!?f!?h!,^!?h!?o';i!?o!@{!,^!@{!A}';i!A}!BO!,^!BO!BP';i!BP!BQ';i!BQ!B^!,^!B^!Be';i!Be!Cq!,^!Cq!Cr';i!Cr!Cs';i!Cs!Ct!,^!Ct!Cu';i!Cu!Cw!,^!Cw!Cx';i!Cx!Cy';i!Cy!Cz!,^!Cz!C{';i!C{!C}!,^!C}!DO';i!DO!DU!,^!DU!DY';i!DY!DZ!,^!DZ!Db';i!Db!Dc!,^!Dc!Df';i!Df!Dg!,^!Dg!Dh';i!Dh!Di!,^!Di!Dj';i!Dj!Dl!,^!Dl!Dm';i!Dm!Dn';i!Dn!Do!,^!Do!Ds';i!Ds!Dt!,^!Dt!Du';i!Du!Dv';i!Dv!EP!,^!EP!EQ';i!EQ!ES!,^!ES!EX';i!EX!EY!,^!EY!EZ';i!EZ!Ep!,^!Ep!Et';i!Et!Ff!,^!Ff!Fg';i!Fg!Gx!,^!Gx!HQ';i!HQ!HR!,^!HR!Hw';i!Hw!Id!,^!Id!Ii';i!Ii!LQ!,^!LQ!L}';i!L}!Mc!,^!Mc!Md';i!Md!Mt!,^!Mt!Mz';i!Mz!NO!,^!NO!NS';i!NS!NV!,^!NV!NW';i!NW!NZ!,^!NZ!N[';i!N[!N]';i!N]!Nd!,^!Nd!Ng';i!Ng!Nk!,^!Nk!Nx';i!Nx# U!,^# U# V';i# V# h!,^# h#!`';i#!`#!a!,^#!a#!b';i#!b#!g!,^#!g#!h';i#!h#!j!,^#!j##g';i##g##h!,^##h#*s';i#*s#*t!,^#*t#*x';i#*x#*z!,^#*z#+R';i#+R#+S!,^#+S#+T';i#+T#+U!,^#+U#+Y';i#+Y#+[!,^#+[#,V';i#,V#,W!,^#,W#,[';i#,[#,^!,^#,^#-P';i#-P#-Q!,^#-Q#-U';i#-U#-W!,^#-W#-_';i#-_#-`!,^#-`#-a';i#-a#-b!,^#-b#-f';i#-f#-h!,^#-h#-w';i#-w#-x!,^#-x#/T';i#/T#/U!,^#/U#/Y';i#/Y#/[!,^#/[#0q';i#0q#1h!,^#1h#1x';i#1x#2Y!,^#2Y#4R';i#4R#4_!,^#4_#Au';i#Au#Aw!,^#Aw#BY';i#BY#BZ!,^#BZ#Bu';i#Bu#Bz!,^#Bz#Di';i#Di#EO!,^#EO#E]';i#E]#E^!,^#E^#Eb';i#Eb#Ep!,^#Ep#FS';i#FS#Fb!,^#Fb#Ft';i#Ft#GS!,^#GS#Ga';i#Ga#Gb!,^#Gb#Ge';i#Ge#Gt!,^#Gt#Hz';i#Hz#Io!,^#Io#Ip';i#Ip#It!,^#It#Iu';i#Iu#K[!,^#K[#MW';i#MW#M`!,^#M`#NZ';i#NZ#N[!,^#N[#N]';i#N]#Nb!,^#Nb$ z';i$ z$!U!,^$!U$!s';i$!s$#x!,^$#x$$h';i$$h$$j!,^$$j$$o';i$$o$$z!,^$$z$%x';i$%x$&_!,^$&_$&f';i$&f$'p!,^$'p$(X';i$(X$(b!,^$(b$)i';i$)i$+_!,^$+_$+`';i$+`$-a!,^$-a$.b';i$.b$.s!,^$.s$.z';i$.z$0T!,^$0T$0s';i$0s$1Q!,^$1Q$1R';i$1R$1S';i$1S$1^!,^$1^$2[';i$2[$2v!,^$2v$3l';i$3l$4g!,^$4g$4j';i$4j$4t!,^$4t$5j';i$5j$7y!,^$7y$7}';i$7}$8O!,^$8O$8S';i$8S$8V!,^$8V$8W';i$8W$8X';i$8X$8b!,^$8b$<j';i$<j$=|!,^$=|$DO';i$DO$DQ!,^$DQ$DW';i$DW$DY!,^$DY$EQ';i$EQ$ES!,^$ES$EY';i$EY$E[!,^$E[$Ed';i$Ed$Ee!,^$Ee$Ef';i$Ef$Eg!,^$Eg$Eh';i$Eh$Ei!,^$Ei$Ej';i$Ej$Ek!,^$Ek$F[';i$F[$F^!,^$F^$Ge';i$Ge$Gf!,^$Gf$Gm';i$Gm$Gn!,^$Gn$Go';i$Go$Gr!,^$Gr$Gu';i$Gu$Gv!,^$Gv$G}';i$G}$HQ!,^$HQ$HU';i$HU$HW!,^$HW$H^';i$H^$Hb!,^$Hb$Ho';i$Ho$Ht!,^$Ht$Hw';i$Hw$Hx!,^$Hx$IP';i$IP$Ki!,^$Ki$Kj';i$Kj$Kw!,^$Kw$Kx';i$Kx$LY!,^$LY$Lg';i$Lg$Np!,^$Np$Nq';i$Nq$Nu!,^$Nu$Nv';i$Nv$Nx!,^$Nx% S';i% S% T!,^% T% U';i% U% X!,^% X% ^';i% ^% d!,^% d% e';i% e% f!,^% f% g';i% g% h!,^% h% i';i% i% j!,^% j% n';i% n% o!,^% o% z';i% z% |!,^% |%!Q';i%!Q%!V!,^%!V%![';i%![%!`!,^%!`%!a';i%!a%#g!,^%#g%#h';i%#h%#i';i%#i&/x!,^&/x&0y';i&0y&0z!,^&0z&1{';i&1{&1|!,^&1|&4w';i&4w&4}!,^&4}&5R';i&5R&5U!,^&5U&5V';i&5V&5W';i&5W&5d!,^&5d&6[';i&6[&6]!,^&6]&6^';i&6^&6c!,^&6c&6d';i&6d&6f!,^&6f&7p';i&7p&7w!,^&7w&7x';i&7x&8Y!,^&8Y&8q';i&8q&8z!,^&8z&9R';i&9R&9S!,^&9S&9Z';i&9Z&9[!,^&9[&9c';i&9c&9d!,^&9d&9k';i&9k&9l!,^&9l&9s';i&9s&9t!,^&9t&9{';i&9{&9|!,^&9|&:T';i&:T&:U!,^&:U&:]';i&:]&<P!,^&<P&<Q';i&<Q&FZ!,^&FZ&F[';i&F[&F]';i&F]&GX!,^&GX&G^';i&G^&Gc!,^&Gc&Gd';i&Gd&Ge';i&Ge&Gi!,^&Gi&Ic';i&Ic&Ii!,^&Ii&Il';i&Il&Im!,^&Im&Kk';i&Kk&Kl!,^&Kl&Kp';i&Kp&Ku!,^&Ku&Lp';i&Lp&Ls!,^&Ls&Nu';i&Nu' W!,^' W' s';i' s'!z!,^'!z'#[';i'#['.b!,^'.b*3f';i*3f*5S!,^*5S40_';i40_41d!,^41d4Js';i4Js4LY!,^4LY4MY';i4MY4M[!,^4M[5%T';i5%T5%W!,^5%W5%h';i5%h5%r!,^5%r5%s';i5%s5%t';i5%t5&Y!,^5&Y5'Z';i5'Z5'k!,^5'k5(U';i5(U5(^!,^5(^5)v';i5)v5*y!,^5*y5+S';i5+S5+U!,^5+U5-a';i5-a5-c!,^5-c5-g';i5-g5-h!,^5-h5-l';i5-l5-x!,^5-x5.T';i5.T5/t!,^5/t50O';i50O50P!,^50P50S';i50S50T!,^50T50X';i50X50Y!,^50Y50q';i50q51`!,^51`52f';i52f52t!,^52t53x';i53x55Y!,^55Y55`';i55`55c!,^55c55d';i55d55r!,^55r56`';i56`56j!,^56j57R';i57R57l!,^57l58Z';i58Z58b!,^58b59c';i59c5:P!,^5:P5:Q';i5:Q5;S!,^5;S5;}';i5;}5<f!,^5<f5<i';i5<i5<j!,^5<j5<r';i5<r5=W!,^5=W5=o';i5=o5=r!,^5=r5=s';i5=s5=x!,^5=x5>z';i5>z5>{!,^5>{5>|';i5>|5?P!,^5?P5?Q';i5?Q5?R';i5?R5?T!,^5?T5?Y';i5?Y5?[!,^5?[5?]';i5?]5?^!,^5?^5?_';i5?_5?w!,^5?w5?z';i5?z5?|!,^5?|5@X';i5@X5@`!,^5@`5@c';i5@c5@o!,^5@o5@u';i5@u5@w!,^5@w5@}';i5@}5AP!,^5AP5AV';i5AV5A`!,^5A`5Ag';i5Ag5Ah!,^5Ah5Ao';i5Ao5Dv!,^5Dv5Ek';i5Ek5FY!,^5FY;%S';i;%S;%`!,^;%`;%w';i;%w;%{!,^;%{;'O';i;'O;'S!,^;'S;=`!-c<%l?&r!,^?&r?.p';i?.p?.r!,^?.r?1Q';i?1Q?1x!,^?1x?2P';i?2P?2]!,^?2]?2b';i?2b?2g!,^?2g?2h';i?2h?2i!,^?2i?2s';i?2s?2t!,^?2t?3R';i?3R?3S!,^?3S?3X';i?3X?3Y!,^?3Y?3Z';i?3Z?3[!,^?3[?3]';i?3]?3^';i?3^?3_!,^?3_?3`';i?3`?3a';i?3a?3b!,^?3b?5r';i?5r?6e!,^?6e?>`';i?>`?>r!,^?>r?@U';i?@U?@W!,^?@W?A`';i?A`?BY!,^?BY?Bf';i?Bf?EO!,^?EO?ET';i?ET?EU!,^?EU?HR';i?HR?Hw!,^?Hw?Ic';i?Ic?Ii!,^?Ii?JT';i?JT?J`!,^?J`?L]';i?L]?L`!,^?L`?Lf';i?Lf?Lh!,^?Lh?Ln';i?Ln?Lp!,^?Lp?Lv';i?Lv?Lx!,^?Lx?L{';i?L{O!,^_8LS]wP!OW|SzQOr!)trs!*jsw!)twx!,^xy8L{yz8Nnz!}!)t!}#O9 f#O#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_8MWY!ZP!OW|SzQOr!)trs!*jsw!)twx!,^xy8Mvy#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_8NRX!bP!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_8NyX!vP!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_9 qX!TP!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t!a9!i]!PP!OW|SzQOr!)trs!*jsw!)twx!,^xy!)tyz9#bz#P!)t#P#Q9%W#Q#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t!`9#mZ![`!OW|SzQOr!)trs!*jsw!)twx!,^xy!)tyz9$`z#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t!O9$kX!cp!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)tn9%cX!Y`!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_9&Z[!OW|SzQ!fPOr!)trs!*jsw!)twx!,^x}!)t}!O9'P!O!P9+}!P#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_9'^a!OW|SzQ!fP]POr!)trs!*jsw!)twx!,^x}!)t}!O9(c!O!`!)t!`!a9+V!a#S!)t#S#T!-i#T#c!)t#c#d9+V#d#l!)t#l#m9+V#m;'S!)t;'S;=`!.]<%lO!)t_9(pa!OW|SzQ!fP!iPOr!)trs!*jsw!)twx!,^x}!)t}!O9)u!O!`!)t!`!a9+V!a#S!)t#S#T!-i#T#c!)t#c#d9+V#d#l!)t#l#m9+V#m;'S!)t;'S;=`!.]<%lO!)t_9*Qa!OW|SzQ!fPOr!)trs!*jsw!)twx!,^x}!)t}!O9)u!O!`!)t!`!a9+V!a#S!)t#S#T!-i#T#c!)t#c#d9+V#d#l!)t#l#m9+V#m;'S!)t;'S;=`!.]<%lO!)t_9+bX!OW|SzQ!fPOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_9,Y[!OW|SzQ!hPOr!)trs!*jsw!)twx!,^x}!)t}!O9-O!O!P9+}!P#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_9-Z_!OW|SzQ!hPOr!)trs!*jsw!)twx!,^x!`!)t!`!a9.Y!a#S!)t#S#T!-i#T#c!)t#c#d9.Y#d#l!)t#l#m9.Y#m;'S!)t;'S;=`!.]<%lO!)t_9.eX!OW|SzQ!hPOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_9/_2h!OW|SzQ!hPmPOq!)tqr!2wrs#9kst!2wtu!2wuv!2wvw!2wwx';ixz!)tz{!2w{|!2w|}!)t}!O9-O!O!P9/Q!P!Q!2w!Q![!2w![!a!)t!a!b!2w!b!c!)t!c!}!2w!}#O!)t#O#P!2w#P#R!)t#R#S!2w#S#T)Hy#T#o!2w#o$p!)t$p$q!2w$q${!)t${$|!2w$|%Q!)t%Q%R!2w%R%W!)t%W%o!2w%o%p!)t%p&a!2w&a&b!)t&b0`!2w0`0d!)t0d0p!2w0p1O!)t1O1T!2w1T1[!)t1[1]!2w1]1^!)t1^1_!2w1_4U!)t4U4Z!2w4Z4[!)t4[4]!2w4]4^!2w4^4`!)t4`4d!2w4d4l!)t4l4m!2w4m4n!)t4n4q!2w4q4r!)t4r4s!2w4s4t!)t4t5Y!2w5Y5Z!)t5Z7Q!2w7Q7R!)t7R:S!2w:S:[!)t:[=p!2w=p=y!)t=y>q!2w>q>s!)t>s>t!2w>t>{!)t>{?t!2w?tA`!)tA`A{!2wA{BQ!)tBQBT!2wBTCS!)tCSDP!2wDPDt!)tDtDu!2wDuDv!2wDvDw!)tDwGO!2wGOGP!)tGPGQ!2wGQGa!)tGaGb!2wGbGc!2wGcGj!)tGjGk!2wGkGl!2wGlGv!)tGvGy!2wGyG{!)tG{G|!2wG|H^!)tH^H_!2wH_H`!)tH`IO!2wIOIm!)tImKj!2wKjKu!)tKuKv!2wKvL`!)tL`MR!2wMRM[!)tM[M]!2wM]M^!2wM^Mb!)tMbMc!2wMcMh!)tMhNO!2wNONS!)tNSNT!2wNTN^!)tN^N_!2wN_Nb!)tNbNc!2wNcNz!)tNz! e!2w! e!#O!)t!#O!#P!2w!#P!#Q!)t!#Q!#]!2w!#]!%W!)t!%W!&`!2w!&`!&c!)t!&c!&d!2w!&d!&v!)t!&v!&w!2w!&w!'O!)t!'O!'Y!2w!'Y!'i!)t!'i!'p!2w!'p!'q!)t!'q!'x!2w!'x!'}!)t!'}!(V!2w!(V!(X!)t!(X!(Y!2w!(Y!(Z!2w!(Z!(]!)t!(]!(s!2w!(s!(t!)t!(t!({!2w!({!(|!)t!(|!(}!2w!(}!)Q!)t!)Q!)U!2w!)U!)X!)t!)X!)Y!2w!)Y!)j!)t!)j!)k!2w!)k!)x!)t!)x!)y!2w!)y!)z!2w!)z!){!)t!){!*O!2w!*O!*^!)t!*^!*_!2w!*_!*`!2w!*`!*s!)t!*s!*y!2w!*y!*}!)t!*}!+O!2w!+O!+P!2w!+P!+R!)t!+R!+i!2w!+i!+j!)t!+j!+q!2w!+q!+r!)t!+r!+s!2w!+s!+t!2w!+t!+u!)t!+u!+v!2w!+v!+w!2w!+w!+x!)t!+x!+y!2w!+y!+z!2w!+z!,k!)t!,k!,o!2w!,o!,p!)t!,p!,q!2w!,q!-U!)t!-U!-X!2w!-X!-i!)t!-i!-r!2w!-r!-s!)t!-s!-v!2w!-v!-w!)t!-w!._!2w!._!.`!)t!.`!.g!2w!.g!.h!)t!.h!.i!2w!.i!.j!2w!.j!.k!)t!.k!.p!2w!.p!.s!)t!.s!.t!2w!.t!/W!)t!/W!/X!2w!/X!/h!)t!/h!/i!2w!/i!/j!2w!/j!0_!)t!0_!0g!2w!0g!0i!)t!0i!0j!2w!0j!0k!2w!0k!0m!)t!0m!1T!2w!1T!1U!)t!1U!1]!2w!1]!1^!)t!1^!1_!2w!1_!1`!2w!1`!1a!)t!1a!1f!2w!1f!1i!)t!1i!1j!2w!1j!2Y!)t!2Y!2Z!2w!2Z!2[!2w!2[!2]!)t!2]!2`!2w!2`!2o!)t!2o!2p!2w!2p!3R!)t!3R!3S!2w!3S!3T!)t!3T!3Z!2w!3Z!3^!)t!3^!3a!2w!3a!3b!)t!3b!3f!2w!3f!3i!)t!3i!3j!2w!3j!3k!2w!3k!3l!)t!3l!3m!2w!3m!3n!)t!3n!3o!2w!3o!3p!2w!3p!3s!)t!3s!3t!2w!3t!3u!2w!3u!3x!)t!3x!3{!2w!3{!4O!)t!4O!4[!2w!4[!4r!)t!4r!4s!2w!4s!5y!)t!5y!6R!2w!6R!6S!)t!6S!6V!2w!6V!6W!)t!6W!6o!2w!6o!6p!)t!6p!6z!2w!6z!6{!)t!6{!7Q!2w!7Q!7T!)t!7T!7U!2w!7U!7p!)t!7p!7q!2w!7q!7r!2w!7r!7x!)t!7x!7y!2w!7y!7z!2w!7z!8o!)t!8o!8w!2w!8w!8x!)t!8x!8{!2w!8{!8|!)t!8|!9e!2w!9e!9f!)t!9f!9p!2w!9p!9q!)t!9q!9v!2w!9v!9y!)t!9y!9z!2w!9z!:l!)t!:l!:m!2w!:m!:n!)t!:n!:o!2w!:o!:p!2w!:p!;P!)t!;P!;Q!2w!;Q!;R!2w!;R!;e!)t!;e!;m!2w!;m!;n!)t!;n!;q!2w!;q!;r!)t!;r!<m!2w!<m!<o!)t!<o!<p!2w!<p!=Q!)t!=Q!=R!2w!=R!=d!)t!=d!=e!2w!=e!=f!2w!=f!>O!)t!>O!>U!2w!>U!>Z!)t!>Z!>m!2w!>m!>p!)t!>p!?Y!2w!?Y!?Z!)t!?Z!?d!2w!?d!?e!)t!?e!?f!2w!?f!?h!)t!?h!?o!2w!?o!@{!)t!@{!A}!2w!A}!BO!)t!BO!BP!2w!BP!BQ!2w!BQ!B^!)t!B^!Be!2w!Be!Cq!)t!Cq!Cr!2w!Cr!Cs!2w!Cs!Ct!)t!Ct!Cu!2w!Cu!Cw!)t!Cw!Cx!2w!Cx!Cy!2w!Cy!Cz!)t!Cz!C{!2w!C{!C}!)t!C}!DO!2w!DO!DU!)t!DU!DY!2w!DY!DZ!)t!DZ!Db!2w!Db!Dc!)t!Dc!Df!2w!Df!Dg!)t!Dg!Dh!2w!Dh!Di!)t!Di!Dj!2w!Dj!Dl!)t!Dl!Dm!2w!Dm!Dn!2w!Dn!Do!)t!Do!Ds!2w!Ds!Dt!)t!Dt!Du!2w!Du!Dv!2w!Dv!EP!)t!EP!EQ!2w!EQ!ES!)t!ES!EX!2w!EX!EY!)t!EY!EZ!2w!EZ!Ep!)t!Ep!Et!2w!Et!Ff!)t!Ff!Fg!2w!Fg!Gx!)t!Gx!HQ!2w!HQ!HR!)t!HR!Hw!2w!Hw!Id!)t!Id!Ii!2w!Ii!LQ!)t!LQ!L}!2w!L}!Mc!)t!Mc!Md!2w!Md!Mt!)t!Mt!Mz!2w!Mz!NO!)t!NO!NS!2w!NS!NV!)t!NV!NW!2w!NW!NZ!)t!NZ!N[!2w!N[!N]!2w!N]!Nd!)t!Nd!Ng!2w!Ng!Nk!)t!Nk!Nx!2w!Nx# U!)t# U# V!2w# V# h!)t# h#!`!2w#!`#!a!)t#!a#!b!2w#!b#!g!)t#!g#!h!2w#!h#!j!)t#!j##g!2w##g##h!)t##h#*s!2w#*s#*t!)t#*t#*x!2w#*x#*z!)t#*z#+R!2w#+R#+S!)t#+S#+T!2w#+T#+U!)t#+U#+Y!2w#+Y#+[!)t#+[#,V!2w#,V#,W!)t#,W#,[!2w#,[#,^!)t#,^#-P!2w#-P#-Q!)t#-Q#-U!2w#-U#-W!)t#-W#-_!2w#-_#-`!)t#-`#-a!2w#-a#-b!)t#-b#-f!2w#-f#-h!)t#-h#-w!2w#-w#-x!)t#-x#/T!2w#/T#/U!)t#/U#/Y!2w#/Y#/[!)t#/[#0q!2w#0q#1h!)t#1h#1x!2w#1x#2Y!)t#2Y#4R!2w#4R#4_!)t#4_#Au!2w#Au#Aw!)t#Aw#BY!2w#BY#BZ!)t#BZ#Bu!2w#Bu#Bz!)t#Bz#Di!2w#Di#EO!)t#EO#E]!2w#E]#E^!)t#E^#Eb!2w#Eb#Ep!)t#Ep#FS!2w#FS#Fb!)t#Fb#Ft!2w#Ft#GS!)t#GS#Ga!2w#Ga#Gb!)t#Gb#Ge!2w#Ge#Gt!)t#Gt#Hz!2w#Hz#Io!)t#Io#Ip!2w#Ip#It!)t#It#Iu!2w#Iu#K[!)t#K[#MW!2w#MW#M`!)t#M`#NZ!2w#NZ#N[!)t#N[#N]!2w#N]#Nb!)t#Nb$ z!2w$ z$!U!)t$!U$!s!2w$!s$#x!)t$#x$$h!2w$$h$$j!)t$$j$$o!2w$$o$$z!)t$$z$%x!2w$%x$&_!)t$&_$&f!2w$&f$'p!)t$'p$(X!2w$(X$(b!)t$(b$)i!2w$)i$+_!)t$+_$+`!2w$+`$-a!)t$-a$.b!2w$.b$.s!)t$.s$.z!2w$.z$0T!)t$0T$0s!2w$0s$1Q!)t$1Q$1R!2w$1R$1S!2w$1S$1^!)t$1^$2[!2w$2[$2v!)t$2v$3l!2w$3l$4g!)t$4g$4j!2w$4j$4t!)t$4t$5j!2w$5j$7y!)t$7y$7}!2w$7}$8O!)t$8O$8S!2w$8S$8V!)t$8V$8W!2w$8W$8X!2w$8X$8b!)t$8b$<j!2w$<j$=|!)t$=|$DO!2w$DO$DQ!)t$DQ$DW!2w$DW$DY!)t$DY$EQ!2w$EQ$ES!)t$ES$EY!2w$EY$E[!)t$E[$Ed!2w$Ed$Ee!)t$Ee$Ef!2w$Ef$Eg!)t$Eg$Eh!2w$Eh$Ei!)t$Ei$Ej!2w$Ej$Ek!)t$Ek$F[!2w$F[$F^!)t$F^$Ge!2w$Ge$Gf!)t$Gf$Gm!2w$Gm$Gn!)t$Gn$Go!2w$Go$Gr!)t$Gr$Gu!2w$Gu$Gv!)t$Gv$G}!2w$G}$HQ!)t$HQ$HU!2w$HU$HW!)t$HW$H^!2w$H^$Hb!)t$Hb$Ho!2w$Ho$Ht!)t$Ht$Hw!2w$Hw$Hx!)t$Hx$IP!2w$IP$Ki!)t$Ki$Kj!2w$Kj$Kw!)t$Kw$Kx!2w$Kx$LY!)t$LY$Lg!2w$Lg$Np!)t$Np$Nq!2w$Nq$Nu!)t$Nu$Nv!2w$Nv$Nx!)t$Nx% S!2w% S% T!)t% T% U!2w% U% X!)t% X% ^!2w% ^% d!)t% d% e!2w% e% f!)t% f% g!2w% g% h!)t% h% i!2w% i% j!)t% j% n!2w% n% o!)t% o% z!2w% z% |!)t% |%!Q!2w%!Q%!V!)t%!V%![!2w%![%!`!)t%!`%!a!2w%!a%#g!)t%#g%#h!2w%#h%#i!2w%#i&/x!)t&/x&0y!2w&0y&0z!)t&0z&1{!2w&1{&1|!)t&1|&4w!2w&4w&4}!)t&4}&5R!2w&5R&5U!)t&5U&5V!2w&5V&5W!2w&5W&5d!)t&5d&6[!2w&6[&6]!)t&6]&6^!2w&6^&6c!)t&6c&6d!2w&6d&6f!)t&6f&7p!2w&7p&7w!)t&7w&7x!2w&7x&8Y!)t&8Y&8q!2w&8q&8z!)t&8z&9R!2w&9R&9S!)t&9S&9Z!2w&9Z&9[!)t&9[&9c!2w&9c&9d!)t&9d&9k!2w&9k&9l!)t&9l&9s!2w&9s&9t!)t&9t&9{!2w&9{&9|!)t&9|&:T!2w&:T&:U!)t&:U&:]!2w&:]&<P!)t&<P&<Q!2w&<Q&FZ!)t&FZ&F[!2w&F[&F]!2w&F]&GX!)t&GX&G^!2w&G^&Gc!)t&Gc&Gd!2w&Gd&Ge!2w&Ge&Gi!)t&Gi&Ic!2w&Ic&Ii!)t&Ii&Il!2w&Il&Im!)t&Im&Kk!2w&Kk&Kl!)t&Kl&Kp!2w&Kp&Ku!)t&Ku&Lp!2w&Lp&Ls!)t&Ls&Nu!2w&Nu' W!)t' W' s!2w' s'!z!)t'!z'#[!2w'#['.b!)t'.b*3f!2w*3f*5S!)t*5S40_!2w40_41d!)t41d4Js!2w4Js4LY!)t4LY4MY!2w4MY4M[!)t4M[5%T!2w5%T5%W!)t5%W5%h!2w5%h5%r!)t5%r5%s!2w5%s5%t!2w5%t5&Y!)t5&Y5'Z!2w5'Z5'k!)t5'k5(U!2w5(U5(^!)t5(^5)v!2w5)v5*y!)t5*y5+S!2w5+S5+U!)t5+U5-a!2w5-a5-c!)t5-c5-g!2w5-g5-h!)t5-h5-l!2w5-l5-x!)t5-x5.T!2w5.T5/t!)t5/t50O!2w50O50P!)t50P50S!2w50S50T!)t50T50X!2w50X50Y!)t50Y50q!2w50q51`!)t51`52f!2w52f52t!)t52t53x!2w53x55Y!)t55Y55`!2w55`55c!)t55c55d!2w55d55r!)t55r56`!2w56`56j!)t56j57R!2w57R57l!)t57l58Z!2w58Z58b!)t58b59c!2w59c5:P!)t5:P5:Q!2w5:Q5;S!)t5;S5;}!2w5;}5<f!)t5<f5<i!2w5<i5<j!)t5<j5<r!2w5<r5=W!)t5=W5=o!2w5=o5=r!)t5=r5=s!2w5=s5=x!)t5=x5>z!2w5>z5>{!)t5>{5>|!2w5>|5?P!)t5?P5?Q!2w5?Q5?R!2w5?R5?T!)t5?T5?Y!2w5?Y5?[!)t5?[5?]!2w5?]5?^!)t5?^5?_!2w5?_5?w!)t5?w5?z!2w5?z5?|!)t5?|5@X!2w5@X5@`!)t5@`5@c!2w5@c5@o!)t5@o5@u!2w5@u5@w!)t5@w5@}!2w5@}5AP!)t5AP5AV!2w5AV5A`!)t5A`5Ag!2w5Ag5Ah!)t5Ah5Ao!2w5Ao5Dv!)t5Dv5Ek!2w5Ek5FY!)t5FY;%S!2w;%S;%`!)t;%`;%w!2w;%w;%{!)t;%{;'O!2w;'O;'S!)t;'S;=`!.]<%l?&r!)t?&r?.p!2w?.p?.r!)t?.r?1Q!2w?1Q?1x!)t?1x?2P!2w?2P?2]!)t?2]?2b!2w?2b?2g!)t?2g?2h!2w?2h?2i!)t?2i?2s!2w?2s?2t!)t?2t?3R!2w?3R?3S!)t?3S?3X!2w?3X?3Y!)t?3Y?3Z!2w?3Z?3[!)t?3[?3]!2w?3]?3^!2w?3^?3_!)t?3_?3`!2w?3`?3a!2w?3a?3b!)t?3b?5r!2w?5r?6e!)t?6e?>`!2w?>`?>r!)t?>r?@U!2w?@U?@W!)t?@W?A`!2w?A`?BY!)t?BY?Bf!2w?Bf?EO!)t?EO?ET!2w?ET?EU!)t?EU?HR!2w?HR?Hw!)t?Hw?Ic!2w?Ic?Ii!)t?Ii?JT!2w?JT?J`!)t?J`?L]!2w?L]?L`!)t?L`?Lf!2w?Lf?Lh!)t?Lh?Ln!2w?Ln?Lp!)t?Lp?Lv!2w?Lv?Lx!)t?Lx?L{!2w?L{O!)t_:6UZ!OW|SzQ`POr!)trs!*jsw!)twx!,^x![!)t![!]:6w!]#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:7QZ!OW|SzQOr!)trs!*jsw!)twx!,^x![!)t![!]:7s!]#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:8OX!OW|SzQaPOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:8vX!OW|SzQ!{POr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:9l]!OW|SzQOr!)trs!*jsw!)twx!,^x}!)t}!O::e!O!_!)t!_!`:=l!`#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_::n[!OW|SzQOr!)trs!*jsw!)twx!,^x}!)t}!O:;d!O!P9+}!P#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:;oa!OW|SzQ!fPOr!)trs!*jsw!)twx!,^x}!)t}!O9)u!O!`!)t!`!a:<t!a#S!)t#S#T!-i#T#c!)t#c#d:<t#d#l!)t#l#m:<t#m;'S!)t;'S;=`!.]<%lO!)t_:=PX!OW|SzQ!dPOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:=uZ!OW|SzQOr!)trs!*jsw!)twx!,^x!_!)t!_!`:>h!`#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:>s`!OW|SzQ!gPOr!)trs!*jsw!)twx!,^x!_!)t!_!`:?u!`!a:Az!a#S!)t#S#T!-i#T#c!)t#c#d:Az#d#l!)t#l#m:Az#m;'S!)t;'S;=`!.]<%lO!)t_:@Q`!OW|SzQ!gPOr!)trs!*jsw!)twx!,^x!_!)t!_!`:?u!`!a:AS!a#S!)t#S#T!-i#T#c!)t#c#d:AS#d#l!)t#l#m:AS#m;'S!)t;'S;=`!.]<%lO!)t_:A_X!OW|SzQ!gPOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:BVX!OW|SzQ!ePOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:B}Z!OW|SzQ!gPOr!)trs!*jsw!)twx!,^x!_!)t!_!`:Cp!`#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:C}`!OW|SzQ!gP^POr!)trs!*jsw!)twx!,^x!_!)t!_!`:EP!`!a:AS!a#S!)t#S#T!-i#T#c!)t#c#d:AS#d#l!)t#l#m:AS#m;'S!)t;'S;=`!.]<%lO!)t_:E^`!OW|SzQ!gP!iPOr!)trs!*jsw!)twx!,^x!_!)t!_!`:?u!`!a:AS!a#S!)t#S#T!-i#T#c!)t#c#d:AS#d#l!)t#l#m:AS#m;'S!)t;'S;=`!.]<%lO!)t_:FkX!]P!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:Gc[!QP!OW|SzQOr!)trs!*jsw!)twx!,^xy:HXy!}!)t!}#O:IP#O#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:HdX!VP!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:I[X!WP!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)to:JS]!RP!OW|SzQOr!)trs!*jsw!)twx!,^xy!)tyz:J{z#P!)t#P#Q:Ks#Q#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)tn:KWX!U`!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)tn:LOX!X`!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_:Lv2g|SzQ}XmPOq!-iqr)Hyrs&4yst)Hytu)Hyuv)Hyvw)Hywx(BZxz!-iz{)Hy{|)Hy|!O!-i!O!P)Hy!P!Q)Hy!Q![)Hy![!a!-i!a!b)Hy!b!c!-i!c!})Hy!}#O!-i#O#P)Hy#P#R!-i#R#S)Hy#S#T)Hy#T#o)Hy#o$p!-i$p$q)Hy$q${!-i${$|)Hy$|%Q!-i%Q%R)Hy%R%W!-i%W%o)Hy%o%p!-i%p&a)Hy&a&b!-i&b0`)Hy0`0d!-i0d0p)Hy0p1O!-i1O1T)Hy1T1[!-i1[1])Hy1]1^!-i1^1_)Hy1_4U!-i4U4Z)Hy4Z4[!-i4[4])Hy4]4^)Hy4^4`!-i4`4d)Hy4d4l!-i4l4m)Hy4m4n!-i4n4q)Hy4q4r!-i4r4s)Hy4s4t!-i4t5Y)Hy5Y5Z!-i5Z7Q)Hy7Q7R!-i7R:S)Hy:S:[!-i:[=p)Hy=p=y!-i=y>q)Hy>q>s!-i>s>t)Hy>t>{!-i>{?t)Hy?tA`!-iA`A{)HyA{BQ!-iBQBT)HyBTCS!-iCSDP)HyDPDt!-iDtDu)HyDuDv)HyDvDw!-iDwGO)HyGOGP!-iGPGQ)HyGQGa!-iGaGb)HyGbGc)HyGcGj!-iGjGk)HyGkGl)HyGlGv!-iGvGy)HyGyG{!-iG{G|)HyG|H^!-iH^H_)HyH_H`!-iH`IO)HyIOIm!-iImKj)HyKjKu!-iKuKv)HyKvL`!-iL`MR)HyMRM[!-iM[M])HyM]M^)HyM^Mb!-iMbMc)HyMcMh!-iMhNO)HyNONS!-iNSNT)HyNTN^!-iN^N_)HyN_Nb!-iNbNc)HyNcNz!-iNz! e)Hy! e!#O!-i!#O!#P)Hy!#P!#Q!-i!#Q!#])Hy!#]!%W!-i!%W!&`)Hy!&`!&c!-i!&c!&d)Hy!&d!&v!-i!&v!&w)Hy!&w!'O!-i!'O!'Y)Hy!'Y!'i!-i!'i!'p)Hy!'p!'q!-i!'q!'x)Hy!'x!'}!-i!'}!(V)Hy!(V!(X!-i!(X!(Y)Hy!(Y!(Z)Hy!(Z!(]!-i!(]!(s)Hy!(s!(t!-i!(t!({)Hy!({!(|!-i!(|!(})Hy!(}!)Q!-i!)Q!)U)Hy!)U!)X!-i!)X!)Y)Hy!)Y!)j!-i!)j!)k)Hy!)k!)x!-i!)x!)y)Hy!)y!)z)Hy!)z!){!-i!){!*O)Hy!*O!*^!-i!*^!*_)Hy!*_!*`)Hy!*`!*s!-i!*s!*y)Hy!*y!*}!-i!*}!+O)Hy!+O!+P)Hy!+P!+R!-i!+R!+i)Hy!+i!+j!-i!+j!+q)Hy!+q!+r!-i!+r!+s)Hy!+s!+t)Hy!+t!+u!-i!+u!+v)Hy!+v!+w)Hy!+w!+x!-i!+x!+y)Hy!+y!+z)Hy!+z!,k!-i!,k!,o)Hy!,o!,p!-i!,p!,q)Hy!,q!-U!-i!-U!-X)Hy!-X!-i!-i!-i!-r)Hy!-r!-s!-i!-s!-v)Hy!-v!-w!-i!-w!._)Hy!._!.`!-i!.`!.g)Hy!.g!.h!-i!.h!.i)Hy!.i!.j)Hy!.j!.k!-i!.k!.p)Hy!.p!.s!-i!.s!.t)Hy!.t!/W!-i!/W!/X)Hy!/X!/h!-i!/h!/i)Hy!/i!/j)Hy!/j!0_!-i!0_!0g)Hy!0g!0i!-i!0i!0j)Hy!0j!0k)Hy!0k!0m!-i!0m!1T)Hy!1T!1U!-i!1U!1])Hy!1]!1^!-i!1^!1_)Hy!1_!1`)Hy!1`!1a!-i!1a!1f)Hy!1f!1i!-i!1i!1j)Hy!1j!2Y!-i!2Y!2Z)Hy!2Z!2[)Hy!2[!2]!-i!2]!2`)Hy!2`!2o!-i!2o!2p)Hy!2p!3R!-i!3R!3S)Hy!3S!3T!-i!3T!3Z)Hy!3Z!3^!-i!3^!3a)Hy!3a!3b!-i!3b!3f)Hy!3f!3i!-i!3i!3j)Hy!3j!3k)Hy!3k!3l!-i!3l!3m)Hy!3m!3n!-i!3n!3o)Hy!3o!3p)Hy!3p!3s!-i!3s!3t)Hy!3t!3u)Hy!3u!3x!-i!3x!3{)Hy!3{!4O!-i!4O!4[)Hy!4[!4r!-i!4r!4s)Hy!4s!5y!-i!5y!6R)Hy!6R!6S!-i!6S!6V)Hy!6V!6W!-i!6W!6o)Hy!6o!6p!-i!6p!6z)Hy!6z!6{!-i!6{!7Q)Hy!7Q!7T!-i!7T!7U)Hy!7U!7p!-i!7p!7q)Hy!7q!7r)Hy!7r!7x!-i!7x!7y)Hy!7y!7z)Hy!7z!8o!-i!8o!8w)Hy!8w!8x!-i!8x!8{)Hy!8{!8|!-i!8|!9e)Hy!9e!9f!-i!9f!9p)Hy!9p!9q!-i!9q!9v)Hy!9v!9y!-i!9y!9z)Hy!9z!:l!-i!:l!:m)Hy!:m!:n!-i!:n!:o)Hy!:o!:p)Hy!:p!;P!-i!;P!;Q)Hy!;Q!;R)Hy!;R!;e!-i!;e!;m)Hy!;m!;n!-i!;n!;q)Hy!;q!;r!-i!;r!<m)Hy!<m!<o!-i!<o!<p)Hy!<p!=Q!-i!=Q!=R)Hy!=R!=d!-i!=d!=e)Hy!=e!=f)Hy!=f!>O!-i!>O!>U)Hy!>U!>Z!-i!>Z!>m)Hy!>m!>p!-i!>p!?Y)Hy!?Y!?Z!-i!?Z!?d)Hy!?d!?e!-i!?e!?f)Hy!?f!?h!-i!?h!?o)Hy!?o!@{!-i!@{!A})Hy!A}!BO!-i!BO!BP)Hy!BP!BQ)Hy!BQ!B^!-i!B^!Be)Hy!Be!Cq!-i!Cq!Cr)Hy!Cr!Cs)Hy!Cs!Ct!-i!Ct!Cu)Hy!Cu!Cw!-i!Cw!Cx)Hy!Cx!Cy)Hy!Cy!Cz!-i!Cz!C{)Hy!C{!C}!-i!C}!DO)Hy!DO!DU!-i!DU!DY)Hy!DY!DZ!-i!DZ!Db)Hy!Db!Dc!-i!Dc!Df)Hy!Df!Dg!-i!Dg!Dh)Hy!Dh!Di!-i!Di!Dj)Hy!Dj!Dl!-i!Dl!Dm)Hy!Dm!Dn)Hy!Dn!Do!-i!Do!Ds)Hy!Ds!Dt!-i!Dt!Du)Hy!Du!Dv)Hy!Dv!EP!-i!EP!EQ)Hy!EQ!ES!-i!ES!EX)Hy!EX!EY!-i!EY!EZ)Hy!EZ!Ep!-i!Ep!Et)Hy!Et!Ff!-i!Ff!Fg)Hy!Fg!Gx!-i!Gx!HQ)Hy!HQ!HR!-i!HR!Hw)Hy!Hw!Id!-i!Id!Ii)Hy!Ii!LQ!-i!LQ!L})Hy!L}!Mc!-i!Mc!Md)Hy!Md!Mt!-i!Mt!Mz)Hy!Mz!NO!-i!NO!NS)Hy!NS!NV!-i!NV!NW)Hy!NW!NZ!-i!NZ!N[)Hy!N[!N])Hy!N]!Nd!-i!Nd!Ng)Hy!Ng!Nk!-i!Nk!Nx)Hy!Nx# U!-i# U# V)Hy# V# h!-i# h#!`)Hy#!`#!a!-i#!a#!b)Hy#!b#!g!-i#!g#!h)Hy#!h#!j!-i#!j##g)Hy##g##h!-i##h#*s)Hy#*s#*t!-i#*t#*x)Hy#*x#*z!-i#*z#+R)Hy#+R#+S!-i#+S#+T)Hy#+T#+U!-i#+U#+Y)Hy#+Y#+[!-i#+[#,V)Hy#,V#,W!-i#,W#,[)Hy#,[#,^!-i#,^#-P)Hy#-P#-Q!-i#-Q#-U)Hy#-U#-W!-i#-W#-_)Hy#-_#-`!-i#-`#-a)Hy#-a#-b!-i#-b#-f)Hy#-f#-h!-i#-h#-w)Hy#-w#-x!-i#-x#/T)Hy#/T#/U!-i#/U#/Y)Hy#/Y#/[!-i#/[#0q)Hy#0q#1h!-i#1h#1x)Hy#1x#2Y!-i#2Y#4R)Hy#4R#4_!-i#4_#Au)Hy#Au#Aw!-i#Aw#BY)Hy#BY#BZ!-i#BZ#Bu)Hy#Bu#Bz!-i#Bz#Di)Hy#Di#EO!-i#EO#E])Hy#E]#E^!-i#E^#Eb)Hy#Eb#Ep!-i#Ep#FS)Hy#FS#Fb!-i#Fb#Ft)Hy#Ft#GS!-i#GS#Ga)Hy#Ga#Gb!-i#Gb#Ge)Hy#Ge#Gt!-i#Gt#Hz)Hy#Hz#Io!-i#Io#Ip)Hy#Ip#It!-i#It#Iu)Hy#Iu#K[!-i#K[#MW)Hy#MW#M`!-i#M`#NZ)Hy#NZ#N[!-i#N[#N])Hy#N]#Nb!-i#Nb$ z)Hy$ z$!U!-i$!U$!s)Hy$!s$#x!-i$#x$$h)Hy$$h$$j!-i$$j$$o)Hy$$o$$z!-i$$z$%x)Hy$%x$&_!-i$&_$&f)Hy$&f$'p!-i$'p$(X)Hy$(X$(b!-i$(b$)i)Hy$)i$+_!-i$+_$+`)Hy$+`$-a!-i$-a$.b)Hy$.b$.s!-i$.s$.z)Hy$.z$0T!-i$0T$0s)Hy$0s$1Q!-i$1Q$1R)Hy$1R$1S)Hy$1S$1^!-i$1^$2[)Hy$2[$2v!-i$2v$3l)Hy$3l$4g!-i$4g$4j)Hy$4j$4t!-i$4t$5j)Hy$5j$7y!-i$7y$7})Hy$7}$8O!-i$8O$8S)Hy$8S$8V!-i$8V$8W)Hy$8W$8X)Hy$8X$8b!-i$8b$<j)Hy$<j$=|!-i$=|$DO)Hy$DO$DQ!-i$DQ$DW)Hy$DW$DY!-i$DY$EQ)Hy$EQ$ES!-i$ES$EY)Hy$EY$E[!-i$E[$Ed)Hy$Ed$Ee!-i$Ee$Ef)Hy$Ef$Eg!-i$Eg$Eh)Hy$Eh$Ei!-i$Ei$Ej)Hy$Ej$Ek!-i$Ek$F[)Hy$F[$F^!-i$F^$Ge)Hy$Ge$Gf!-i$Gf$Gm)Hy$Gm$Gn!-i$Gn$Go)Hy$Go$Gr!-i$Gr$Gu)Hy$Gu$Gv!-i$Gv$G})Hy$G}$HQ!-i$HQ$HU)Hy$HU$HW!-i$HW$H^)Hy$H^$Hb!-i$Hb$Ho)Hy$Ho$Ht!-i$Ht$Hw)Hy$Hw$Hx!-i$Hx$IP)Hy$IP$Ki!-i$Ki$Kj)Hy$Kj$Kw!-i$Kw$Kx)Hy$Kx$LY!-i$LY$Lg)Hy$Lg$Np!-i$Np$Nq)Hy$Nq$Nu!-i$Nu$Nv)Hy$Nv$Nx!-i$Nx% S)Hy% S% T!-i% T% U)Hy% U% X!-i% X% ^)Hy% ^% d!-i% d% e)Hy% e% f!-i% f% g)Hy% g% h!-i% h% i)Hy% i% j!-i% j% n)Hy% n% o!-i% o% z)Hy% z% |!-i% |%!Q)Hy%!Q%!V!-i%!V%![)Hy%![%!`!-i%!`%!a)Hy%!a%#g!-i%#g%#h)Hy%#h%#i)Hy%#i&/x!-i&/x&0y)Hy&0y&0z!-i&0z&1{)Hy&1{&1|!-i&1|&4w)Hy&4w&4}!-i&4}&5R)Hy&5R&5U!-i&5U&5V)Hy&5V&5W)Hy&5W&5d!-i&5d&6[)Hy&6[&6]!-i&6]&6^)Hy&6^&6c!-i&6c&6d)Hy&6d&6f!-i&6f&7p)Hy&7p&7w!-i&7w&7x)Hy&7x&8Y!-i&8Y&8q)Hy&8q&8z!-i&8z&9R)Hy&9R&9S!-i&9S&9Z)Hy&9Z&9[!-i&9[&9c)Hy&9c&9d!-i&9d&9k)Hy&9k&9l!-i&9l&9s)Hy&9s&9t!-i&9t&9{)Hy&9{&9|!-i&9|&:T)Hy&:T&:U!-i&:U&:])Hy&:]&<P!-i&<P&<Q)Hy&<Q&FZ!-i&FZ&F[)Hy&F[&F])Hy&F]&GX!-i&GX&G^)Hy&G^&Gc!-i&Gc&Gd)Hy&Gd&Ge)Hy&Ge&Gi!-i&Gi&Ic)Hy&Ic&Ii!-i&Ii&Il)Hy&Il&Im!-i&Im&Kk)Hy&Kk&Kl!-i&Kl&Kp)Hy&Kp&Ku!-i&Ku&Lp)Hy&Lp&Ls!-i&Ls&Nu)Hy&Nu' W!-i' W' s)Hy' s'!z!-i'!z'#[)Hy'#['.b!-i'.b*3f)Hy*3f*5S!-i*5S40_)Hy40_41d!-i41d4Js)Hy4Js4LY!-i4LY4MY)Hy4MY4M[!-i4M[5%T)Hy5%T5%W!-i5%W5%h)Hy5%h5%r!-i5%r5%s)Hy5%s5%t)Hy5%t5&Y!-i5&Y5'Z)Hy5'Z5'k!-i5'k5(U)Hy5(U5(^!-i5(^5)v)Hy5)v5*y!-i5*y5+S)Hy5+S5+U!-i5+U5-a)Hy5-a5-c!-i5-c5-g)Hy5-g5-h!-i5-h5-l)Hy5-l5-x!-i5-x5.T)Hy5.T5/t!-i5/t50O)Hy50O50P!-i50P50S)Hy50S50T!-i50T50X)Hy50X50Y!-i50Y50q)Hy50q51`!-i51`52f)Hy52f52t!-i52t53x)Hy53x55Y!-i55Y55`)Hy55`55c!-i55c55d)Hy55d55r!-i55r56`)Hy56`56j!-i56j57R)Hy57R57l!-i57l58Z)Hy58Z58b!-i58b59c)Hy59c5:P!-i5:P5:Q)Hy5:Q5;S!-i5;S5;})Hy5;}5<f!-i5<f5<i)Hy5<i5<j!-i5<j5<r)Hy5<r5=W!-i5=W5=o)Hy5=o5=r!-i5=r5=s)Hy5=s5=x!-i5=x5>z)Hy5>z5>{!-i5>{5>|)Hy5>|5?P!-i5?P5?Q)Hy5?Q5?R)Hy5?R5?T!-i5?T5?Y)Hy5?Y5?[!-i5?[5?])Hy5?]5?^!-i5?^5?_)Hy5?_5?w!-i5?w5?z)Hy5?z5?|!-i5?|5@X)Hy5@X5@`!-i5@`5@c)Hy5@c5@o!-i5@o5@u)Hy5@u5@w!-i5@w5@})Hy5@}5AP!-i5AP5AV)Hy5AV5A`!-i5A`5Ag)Hy5Ag5Ah!-i5Ah5Ao)Hy5Ao5Dv!-i5Dv5Ek)Hy5Ek5FY!-i5FY;%S)Hy;%S;%`!-i;%`;%w)Hy;%w;%{!-i;%{;'O)Hy;'O;'S!-i;'S;=`!.V<%l?&r!-i?&r?.p)Hy?.p?.r!-i?.r?1Q)Hy?1Q?1x!-i?1x?2P)Hy?2P?2]!-i?2]?2b)Hy?2b?2g!-i?2g?2h)Hy?2h?2i!-i?2i?2s)Hy?2s?2t!-i?2t?3R)Hy?3R?3S!-i?3S?3X)Hy?3X?3Y!-i?3Y?3Z)Hy?3Z?3[!-i?3[?3])Hy?3]?3^)Hy?3^?3_!-i?3_?3`)Hy?3`?3a)Hy?3a?3b!-i?3b?5r)Hy?5r?6e!-i?6e?>`)Hy?>`?>r!-i?>r?@U)Hy?@U?@W!-i?@W?A`)Hy?A`?BY!-i?BY?Bf)Hy?Bf?EO!-i?EO?ET)Hy?ET?EU!-i?EU?HR)Hy?HR?Hw!-i?Hw?Ic)Hy?Ic?Ii!-i?Ii?JT)Hy?JT?J`!-i?J`?L])Hy?L]?L`!-i?L`?Lf)Hy?Lf?Lh!-i?Lh?Ln)Hy?Ln?Lp!-i?Lp?Lv)Hy?Lv?Lx!-i?Lx?L{)Hy?L{O!-i_<%j2j!OW|SzQmPOq!)tqr!2wrs#9kst!2wtu!2wuv!2wvw!2wwx';ixz!)tz{!2w{|!2w|}!)t}!O::e!O!P!2w!P!Q!2w!Q![!2w![!_!)t!_!`:=l!`!a!)t!a!b!2w!b!c!)t!c!}!2w!}#O!)t#O#P!2w#P#R!)t#R#S!2w#S#T)Hy#T#o!2w#o$p!)t$p$q!2w$q${!)t${$|!2w$|%Q!)t%Q%R!2w%R%W!)t%W%o!2w%o%p!)t%p&a!2w&a&b!)t&b0`!2w0`0d!)t0d0p!2w0p1O!)t1O1T!2w1T1[!)t1[1]!2w1]1^!)t1^1_!2w1_4U!)t4U4Z!2w4Z4[!)t4[4]!2w4]4^!2w4^4`!)t4`4d!2w4d4l!)t4l4m!2w4m4n!)t4n4q!2w4q4r!)t4r4s!2w4s4t!)t4t5Y!2w5Y5Z!)t5Z7Q!2w7Q7R!)t7R:S!2w:S:[!)t:[=p!2w=p=y!)t=y>q!2w>q>s!)t>s>t!2w>t>{!)t>{?t!2w?tA`!)tA`A{!2wA{BQ!)tBQBT!2wBTCS!)tCSDP!2wDPDt!)tDtDu!2wDuDv!2wDvDw!)tDwGO!2wGOGP!)tGPGQ!2wGQGa!)tGaGb!2wGbGc!2wGcGj!)tGjGk!2wGkGl!2wGlGv!)tGvGy!2wGyG{!)tG{G|!2wG|H^!)tH^H_!2wH_H`!)tH`IO!2wIOIm!)tImKj!2wKjKu!)tKuKv!2wKvL`!)tL`MR!2wMRM[!)tM[M]!2wM]M^!2wM^Mb!)tMbMc!2wMcMh!)tMhNO!2wNONS!)tNSNT!2wNTN^!)tN^N_!2wN_Nb!)tNbNc!2wNcNz!)tNz! e!2w! e!#O!)t!#O!#P!2w!#P!#Q!)t!#Q!#]!2w!#]!%W!)t!%W!&`!2w!&`!&c!)t!&c!&d!2w!&d!&v!)t!&v!&w!2w!&w!'O!)t!'O!'Y!2w!'Y!'i!)t!'i!'p!2w!'p!'q!)t!'q!'x!2w!'x!'}!)t!'}!(V!2w!(V!(X!)t!(X!(Y!2w!(Y!(Z!2w!(Z!(]!)t!(]!(s!2w!(s!(t!)t!(t!({!2w!({!(|!)t!(|!(}!2w!(}!)Q!)t!)Q!)U!2w!)U!)X!)t!)X!)Y!2w!)Y!)j!)t!)j!)k!2w!)k!)x!)t!)x!)y!2w!)y!)z!2w!)z!){!)t!){!*O!2w!*O!*^!)t!*^!*_!2w!*_!*`!2w!*`!*s!)t!*s!*y!2w!*y!*}!)t!*}!+O!2w!+O!+P!2w!+P!+R!)t!+R!+i!2w!+i!+j!)t!+j!+q!2w!+q!+r!)t!+r!+s!2w!+s!+t!2w!+t!+u!)t!+u!+v!2w!+v!+w!2w!+w!+x!)t!+x!+y!2w!+y!+z!2w!+z!,k!)t!,k!,o!2w!,o!,p!)t!,p!,q!2w!,q!-U!)t!-U!-X!2w!-X!-i!)t!-i!-r!2w!-r!-s!)t!-s!-v!2w!-v!-w!)t!-w!._!2w!._!.`!)t!.`!.g!2w!.g!.h!)t!.h!.i!2w!.i!.j!2w!.j!.k!)t!.k!.p!2w!.p!.s!)t!.s!.t!2w!.t!/W!)t!/W!/X!2w!/X!/h!)t!/h!/i!2w!/i!/j!2w!/j!0_!)t!0_!0g!2w!0g!0i!)t!0i!0j!2w!0j!0k!2w!0k!0m!)t!0m!1T!2w!1T!1U!)t!1U!1]!2w!1]!1^!)t!1^!1_!2w!1_!1`!2w!1`!1a!)t!1a!1f!2w!1f!1i!)t!1i!1j!2w!1j!2Y!)t!2Y!2Z!2w!2Z!2[!2w!2[!2]!)t!2]!2`!2w!2`!2o!)t!2o!2p!2w!2p!3R!)t!3R!3S!2w!3S!3T!)t!3T!3Z!2w!3Z!3^!)t!3^!3a!2w!3a!3b!)t!3b!3f!2w!3f!3i!)t!3i!3j!2w!3j!3k!2w!3k!3l!)t!3l!3m!2w!3m!3n!)t!3n!3o!2w!3o!3p!2w!3p!3s!)t!3s!3t!2w!3t!3u!2w!3u!3x!)t!3x!3{!2w!3{!4O!)t!4O!4[!2w!4[!4r!)t!4r!4s!2w!4s!5y!)t!5y!6R!2w!6R!6S!)t!6S!6V!2w!6V!6W!)t!6W!6o!2w!6o!6p!)t!6p!6z!2w!6z!6{!)t!6{!7Q!2w!7Q!7T!)t!7T!7U!2w!7U!7p!)t!7p!7q!2w!7q!7r!2w!7r!7x!)t!7x!7y!2w!7y!7z!2w!7z!8o!)t!8o!8w!2w!8w!8x!)t!8x!8{!2w!8{!8|!)t!8|!9e!2w!9e!9f!)t!9f!9p!2w!9p!9q!)t!9q!9v!2w!9v!9y!)t!9y!9z!2w!9z!:l!)t!:l!:m!2w!:m!:n!)t!:n!:o!2w!:o!:p!2w!:p!;P!)t!;P!;Q!2w!;Q!;R!2w!;R!;e!)t!;e!;m!2w!;m!;n!)t!;n!;q!2w!;q!;r!)t!;r!<m!2w!<m!<o!)t!<o!<p!2w!<p!=Q!)t!=Q!=R!2w!=R!=d!)t!=d!=e!2w!=e!=f!2w!=f!>O!)t!>O!>U!2w!>U!>Z!)t!>Z!>m!2w!>m!>p!)t!>p!?Y!2w!?Y!?Z!)t!?Z!?d!2w!?d!?e!)t!?e!?f!2w!?f!?h!)t!?h!?o!2w!?o!@{!)t!@{!A}!2w!A}!BO!)t!BO!BP!2w!BP!BQ!2w!BQ!B^!)t!B^!Be!2w!Be!Cq!)t!Cq!Cr!2w!Cr!Cs!2w!Cs!Ct!)t!Ct!Cu!2w!Cu!Cw!)t!Cw!Cx!2w!Cx!Cy!2w!Cy!Cz!)t!Cz!C{!2w!C{!C}!)t!C}!DO!2w!DO!DU!)t!DU!DY!2w!DY!DZ!)t!DZ!Db!2w!Db!Dc!)t!Dc!Df!2w!Df!Dg!)t!Dg!Dh!2w!Dh!Di!)t!Di!Dj!2w!Dj!Dl!)t!Dl!Dm!2w!Dm!Dn!2w!Dn!Do!)t!Do!Ds!2w!Ds!Dt!)t!Dt!Du!2w!Du!Dv!2w!Dv!EP!)t!EP!EQ!2w!EQ!ES!)t!ES!EX!2w!EX!EY!)t!EY!EZ!2w!EZ!Ep!)t!Ep!Et!2w!Et!Ff!)t!Ff!Fg!2w!Fg!Gx!)t!Gx!HQ!2w!HQ!HR!)t!HR!Hw!2w!Hw!Id!)t!Id!Ii!2w!Ii!LQ!)t!LQ!L}!2w!L}!Mc!)t!Mc!Md!2w!Md!Mt!)t!Mt!Mz!2w!Mz!NO!)t!NO!NS!2w!NS!NV!)t!NV!NW!2w!NW!NZ!)t!NZ!N[!2w!N[!N]!2w!N]!Nd!)t!Nd!Ng!2w!Ng!Nk!)t!Nk!Nx!2w!Nx# U!)t# U# V!2w# V# h!)t# h#!`!2w#!`#!a!)t#!a#!b!2w#!b#!g!)t#!g#!h!2w#!h#!j!)t#!j##g!2w##g##h!)t##h#*s!2w#*s#*t!)t#*t#*x!2w#*x#*z!)t#*z#+R!2w#+R#+S!)t#+S#+T!2w#+T#+U!)t#+U#+Y!2w#+Y#+[!)t#+[#,V!2w#,V#,W!)t#,W#,[!2w#,[#,^!)t#,^#-P!2w#-P#-Q!)t#-Q#-U!2w#-U#-W!)t#-W#-_!2w#-_#-`!)t#-`#-a!2w#-a#-b!)t#-b#-f!2w#-f#-h!)t#-h#-w!2w#-w#-x!)t#-x#/T!2w#/T#/U!)t#/U#/Y!2w#/Y#/[!)t#/[#0q!2w#0q#1h!)t#1h#1x!2w#1x#2Y!)t#2Y#4R!2w#4R#4_!)t#4_#Au!2w#Au#Aw!)t#Aw#BY!2w#BY#BZ!)t#BZ#Bu!2w#Bu#Bz!)t#Bz#Di!2w#Di#EO!)t#EO#E]!2w#E]#E^!)t#E^#Eb!2w#Eb#Ep!)t#Ep#FS!2w#FS#Fb!)t#Fb#Ft!2w#Ft#GS!)t#GS#Ga!2w#Ga#Gb!)t#Gb#Ge!2w#Ge#Gt!)t#Gt#Hz!2w#Hz#Io!)t#Io#Ip!2w#Ip#It!)t#It#Iu!2w#Iu#K[!)t#K[#MW!2w#MW#M`!)t#M`#NZ!2w#NZ#N[!)t#N[#N]!2w#N]#Nb!)t#Nb$ z!2w$ z$!U!)t$!U$!s!2w$!s$#x!)t$#x$$h!2w$$h$$j!)t$$j$$o!2w$$o$$z!)t$$z$%x!2w$%x$&_!)t$&_$&f!2w$&f$'p!)t$'p$(X!2w$(X$(b!)t$(b$)i!2w$)i$+_!)t$+_$+`!2w$+`$-a!)t$-a$.b!2w$.b$.s!)t$.s$.z!2w$.z$0T!)t$0T$0s!2w$0s$1Q!)t$1Q$1R!2w$1R$1S!2w$1S$1^!)t$1^$2[!2w$2[$2v!)t$2v$3l!2w$3l$4g!)t$4g$4j!2w$4j$4t!)t$4t$5j!2w$5j$7y!)t$7y$7}!2w$7}$8O!)t$8O$8S!2w$8S$8V!)t$8V$8W!2w$8W$8X!2w$8X$8b!)t$8b$<j!2w$<j$=|!)t$=|$DO!2w$DO$DQ!)t$DQ$DW!2w$DW$DY!)t$DY$EQ!2w$EQ$ES!)t$ES$EY!2w$EY$E[!)t$E[$Ed!2w$Ed$Ee!)t$Ee$Ef!2w$Ef$Eg!)t$Eg$Eh!2w$Eh$Ei!)t$Ei$Ej!2w$Ej$Ek!)t$Ek$F[!2w$F[$F^!)t$F^$Ge!2w$Ge$Gf!)t$Gf$Gm!2w$Gm$Gn!)t$Gn$Go!2w$Go$Gr!)t$Gr$Gu!2w$Gu$Gv!)t$Gv$G}!2w$G}$HQ!)t$HQ$HU!2w$HU$HW!)t$HW$H^!2w$H^$Hb!)t$Hb$Ho!2w$Ho$Ht!)t$Ht$Hw!2w$Hw$Hx!)t$Hx$IP!2w$IP$Ki!)t$Ki$Kj!2w$Kj$Kw!)t$Kw$Kx!2w$Kx$LY!)t$LY$Lg!2w$Lg$Np!)t$Np$Nq!2w$Nq$Nu!)t$Nu$Nv!2w$Nv$Nx!)t$Nx% S!2w% S% T!)t% T% U!2w% U% X!)t% X% ^!2w% ^% d!)t% d% e!2w% e% f!)t% f% g!2w% g% h!)t% h% i!2w% i% j!)t% j% n!2w% n% o!)t% o% z!2w% z% |!)t% |%!Q!2w%!Q%!V!)t%!V%![!2w%![%!`!)t%!`%!a!2w%!a%#g!)t%#g%#h!2w%#h%#i!2w%#i&/x!)t&/x&0y!2w&0y&0z!)t&0z&1{!2w&1{&1|!)t&1|&4w!2w&4w&4}!)t&4}&5R!2w&5R&5U!)t&5U&5V!2w&5V&5W!2w&5W&5d!)t&5d&6[!2w&6[&6]!)t&6]&6^!2w&6^&6c!)t&6c&6d!2w&6d&6f!)t&6f&7p!2w&7p&7w!)t&7w&7x!2w&7x&8Y!)t&8Y&8q!2w&8q&8z!)t&8z&9R!2w&9R&9S!)t&9S&9Z!2w&9Z&9[!)t&9[&9c!2w&9c&9d!)t&9d&9k!2w&9k&9l!)t&9l&9s!2w&9s&9t!)t&9t&9{!2w&9{&9|!)t&9|&:T!2w&:T&:U!)t&:U&:]!2w&:]&<P!)t&<P&<Q!2w&<Q&FZ!)t&FZ&F[!2w&F[&F]!2w&F]&GX!)t&GX&G^!2w&G^&Gc!)t&Gc&Gd!2w&Gd&Ge!2w&Ge&Gi!)t&Gi&Ic!2w&Ic&Ii!)t&Ii&Il!2w&Il&Im!)t&Im&Kk!2w&Kk&Kl!)t&Kl&Kp!2w&Kp&Ku!)t&Ku&Lp!2w&Lp&Ls!)t&Ls&Nu!2w&Nu' W!)t' W' s!2w' s'!z!)t'!z'#[!2w'#['.b!)t'.b*3f!2w*3f*5S!)t*5S40_!2w40_41d!)t41d4Js!2w4Js4LY!)t4LY4MY!2w4MY4M[!)t4M[5%T!2w5%T5%W!)t5%W5%h!2w5%h5%r!)t5%r5%s!2w5%s5%t!2w5%t5&Y!)t5&Y5'Z!2w5'Z5'k!)t5'k5(U!2w5(U5(^!)t5(^5)v!2w5)v5*y!)t5*y5+S!2w5+S5+U!)t5+U5-a!2w5-a5-c!)t5-c5-g!2w5-g5-h!)t5-h5-l!2w5-l5-x!)t5-x5.T!2w5.T5/t!)t5/t50O!2w50O50P!)t50P50S!2w50S50T!)t50T50X!2w50X50Y!)t50Y50q!2w50q51`!)t51`52f!2w52f52t!)t52t53x!2w53x55Y!)t55Y55`!2w55`55c!)t55c55d!2w55d55r!)t55r56`!2w56`56j!)t56j57R!2w57R57l!)t57l58Z!2w58Z58b!)t58b59c!2w59c5:P!)t5:P5:Q!2w5:Q5;S!)t5;S5;}!2w5;}5<f!)t5<f5<i!2w5<i5<j!)t5<j5<r!2w5<r5=W!)t5=W5=o!2w5=o5=r!)t5=r5=s!2w5=s5=x!)t5=x5>z!2w5>z5>{!)t5>{5>|!2w5>|5?P!)t5?P5?Q!2w5?Q5?R!2w5?R5?T!)t5?T5?Y!2w5?Y5?[!)t5?[5?]!2w5?]5?^!)t5?^5?_!2w5?_5?w!)t5?w5?z!2w5?z5?|!)t5?|5@X!2w5@X5@`!)t5@`5@c!2w5@c5@o!)t5@o5@u!2w5@u5@w!)t5@w5@}!2w5@}5AP!)t5AP5AV!2w5AV5A`!)t5A`5Ag!2w5Ag5Ah!)t5Ah5Ao!2w5Ao5Dv!)t5Dv5Ek!2w5Ek5FY!)t5FY;%S!2w;%S;%`!)t;%`;%w!2w;%w;%{!)t;%{;'O!2w;'O;'S!)t;'S;=`!.]<%l?&r!)t?&r?.p!2w?.p?.r!)t?.r?1Q!2w?1Q?1x!)t?1x?2P!2w?2P?2]!)t?2]?2b!2w?2b?2g!)t?2g?2h!2w?2h?2i!)t?2i?2s!2w?2s?2t!)t?2t?3R!2w?3R?3S!)t?3S?3X!2w?3X?3Y!)t?3Y?3Z!2w?3Z?3[!)t?3[?3]!2w?3]?3^!2w?3^?3_!)t?3_?3`!2w?3`?3a!2w?3a?3b!)t?3b?5r!2w?5r?6e!)t?6e?>`!2w?>`?>r!)t?>r?@U!2w?@U?@W!)t?@W?A`!2w?A`?BY!)t?BY?Bf!2w?Bf?EO!)t?EO?ET!2w?ET?EU!)t?EU?HR!2w?HR?Hw!)t?Hw?Ic!2w?Ic?Ii!)t?Ii?JT!2w?JT?J`!)t?J`?L]!2w?L]?L`!)t?L`?Lf!2w?Lf?Lh!)t?Lh?Ln!2w?Ln?Lp!)t?Lp?Lv!2w?Lv?Lx!)t?Lx?L{!2w?L{O!)t_=,gZ!^P!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T#o!)t#o#p=-Y#p;'S!)t;'S;=`!.]<%lO!)t_=-eX!`P!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_=.]X!SP!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)to=/TZ!_P!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T#q!)t#q#r=/v#r;'S!)t;'S;=`!.]<%lO!)tn=0RX!a`!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t_=0wZ!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T#r!)t#r#s=1j#s;'S!)t;'S;=`!.]<%lO!)t_=1sZ!OW|SzQOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T#r!)t#r#s=2f#s;'S!)t;'S;=`!.]<%lO!)t_=2qX!OW|SzQ!iPOr!)trs!*jsw!)twx!,^x#S!)t#S#T!-i#T;'S!)t;'S;=`!.]<%lO!)t",
  tokenizers: [nodeEdgeText, nodeText, styleText2, 0, 1, 2, 3, 4, 5],
  topRules: { "FlowchartDiagram": [0, 5] },
  specialized: [{ term: 29, get: (value) => spec_identifier$3[value] || -1 }],
  tokenPrec: 1356
});
var messageText = 24;
var Activate = 1;
var Autonumber = 2;
var Create = 3;
var Deactivate = 4;
var Destroy = 5;
var End = 6;
var Note = 7;
var Actor = 8;
var As = 9;
var Participant = 10;
var NodeText = 11;
var Position = 12;
var alt = 25;
var and3 = 26;
var box = 27;
var _break3 = 28;
var critical = 29;
var _else2 = 30;
var link = 31;
var links = 32;
var loop = 33;
var opt = 34;
var option = 35;
var par = 36;
var rect = 37;
var skipCodePoints$1 = [-1, 9, 10, 13, 32, 37];
var arrowSuffixCodePoints = [43, 45];
var notAllowedCodePoints$1 = [44, 58, 62];
var notAllowed2Chars = ["->", "-x", "-)", " -", "  "];
var notAllowed3Chars = ["-->", "->>", "--x", "--)", " as"];
var keywordMap$1 = {
  "left of": Position,
  "right of": Position,
  activate: Activate,
  actor: Actor,
  alt,
  and: and3,
  as: As,
  autonumber: Autonumber,
  box,
  break: _break3,
  create: Create,
  critical,
  deactivate: Deactivate,
  destroy: Destroy,
  else: _else2,
  end: End,
  link,
  links,
  loop,
  note: Note,
  opt,
  option,
  over: Position,
  par,
  participant: Participant,
  rect
};
var keywords$2 = Object.keys(keywordMap$1);
var messageTextToken = new ExternalTokenizer((input) => {
  if (skipCodePoints$1.includes(input.next))
    return;
  while (input.next !== 10 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(messageText);
});
var textTokens = new ExternalTokenizer((input) => {
  if (skipCodePoints$1.includes(input.next) || arrowSuffixCodePoints.includes(input.next))
    return;
  const isArrowNext = () => {
    if (input.peek(0) === -1 || input.peek(1) === -1 || input.peek(2) === -1)
      return false;
    let result = String.fromCodePoint(input.peek(0)) + String.fromCodePoint(input.peek(1));
    if (notAllowed2Chars.includes(result))
      return true;
    result += String.fromCodePoint(input.peek(2));
    if (notAllowed3Chars.includes(result))
      return true;
    return false;
  };
  let tokens2 = "";
  while (!notAllowedCodePoints$1.includes(input.next) && !isArrowNext() && input.next !== 10 && input.next !== -1) {
    tokens2 += String.fromCodePoint(input.next);
    input.advance();
  }
  const activeKeyword = keywords$2.filter((keyword3) => {
    if (keyword3 === tokens2) {
      return tokens2.toLowerCase().startsWith(keyword3);
    }
    return tokens2.toLowerCase().startsWith(keyword3 + " ");
  });
  if (activeKeyword.length > 0) {
    input.acceptToken(keywordMap$1[activeKeyword[0]], activeKeyword[0].length - tokens2.length);
    return;
  }
  input.acceptToken(NodeText);
});
var sequenceHighlighting = styleTags({
  DiagramName: sequenceTags.diagramName,
  NodeText: sequenceTags.nodeText,
  Keyword1: sequenceTags.keyword1,
  Keyword2: sequenceTags.keyword2,
  LineComment: sequenceTags.lineComment,
  "Arrow ArrowSuffix": sequenceTags.arrow,
  Position: sequenceTags.position,
  MessageText1: sequenceTags.messageText1,
  MessageText2: sequenceTags.messageText2
});
var spec_identifier$2 = { __proto__: null, sequenceDiagram: 84 };
var parser$3 = LRParser.deserialize({
  version: 14,
  states: "'nOVQSOOO[QSO'#DUQOQSOOOOQO'#Cj'#CjO#QQUO,59pOOQP'#Co'#CoOOQQ'#Cq'#CqOOQO'#DY'#DYO#XQUO'#DYO#gQUO'#DYO#lQUO'#DYO#wQUO'#DYO#|QUO'#DYO$RQTO'#DYO$WQUO'#DYO$]QSO1G/[O$eQYO,59tO$sQUO,59tO$xQUO,59tO%TQUO,59tOOQO,59t,59tO%YQUO,59tOOQO'#Cp'#CpO%_QSO,59tO%dQUO7+$vO%kQSO7+$vOOQQ'#Cm'#CmO%sQSO1G/`O%xQUO1G/`O%}QUO1G/`OOQO1G/`1G/`O&VQUO1G/`O&[QUO1G/`O&gQSO1G/`O&oQTO1G/`OOQO,59^,59^O&tQUO<<HbOOQO-E6p-E6pO&oQTO7+$zO&{QSO7+$zO'QQUO7+$zOOQO7+$z7+$zO'VQUO7+$zOOQO'#Cn'#CnPdQUO'#CrOOQO<<Hf<<HfO&oQTO<<HfO'[QSO<<HfOOQOAN>QAN>QO&oQTOAN>QOOQOG23lG23l",
  stateData: "'g~OwOS~OzRO~O{SOgxX~OPZOQVORYOSZOTYOUVOV[OWXOYXOZWO_VOiTOjTOkTOlTOmTOnTOoUOpUOqTOrTOsTOtTOuTO~Ogxa~PdOXaO``Og|X{|X~OZbO~OWcOYcOZbO~OZdO~O[eO~OhfO~OZgO~O{hOgxi~OZkO{lO}jO!OjO~OZnO~OXoOg|a{|a~OZpO~OZqO~O!PrO~Ogxq~PdO{tOgxq~O!PvO~OZwO~OZwO{xO~OZyO~OXzOg|i{|i~O!PvO!QxO~Oh{O~Ogxy~PdO!P!OO~OZ!PO~OZ}O~O!P!RO~O{w`y`~",
  goto: "#S}PPPPPPPPPPPPPP!OPP!R!U!b!h!k!qPPPPPPPPPPPPPPPPP!wPPP!zRPORm`QyrQ}vQ!Q!OR!S!RX]Sht|Rd]X^Sht|Qi_RuiRQOQ_SVsht|",
  nodeNames: "\u26A0 Activate Autonumber Create Deactivate Destroy End Note Actor As Participant NodeText Position SequenceDiagram DiagramName LineComment Arrow ArrowSuffix MessageText1 Keyword MessageText2 Link",
  maxTerm: 48,
  nodeProps: [
    ["group", -9, 1, 2, 3, 4, 5, 6, 7, 19, 21, "Keyword1", -3, 8, 9, 10, "Keyword2"]
  ],
  propSources: [sequenceHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "(x~RmXY!|YZ#qZ^!|pq!|tu$nuv%`{|%}|}&S}!O&X![!]'T!c!}$n#T#o$n#y#z!|$f$g!|$g#BY$n#BY#BZ'Y#BZ$IS$n$IS$I_'Y$I_$I|$n$I|$JO'Y$JO$JT$n$JT$JU'Y$JU$KV$n$KV$KW'Y$KW&FU$n&FU&FV'Y&FV;'S$n;'S;=`%Y<%lO$n~#RYw~X^!|pq!|#y#z!|$f$g!|#BY#BZ!|$IS$I_!|$I|$JO!|$JT$JU!|$KV$KW!|&FU&FV!|~#x[{~w~XY!|YZ#qZ^!|pq!|#y#z!|$f$g!|#BY#BZ!|$IS$I_!|$I|$JO!|$JT$JU!|$KV$KW!|&FU&FV!|~$sVy~tu$n!Q![$n!c!}$n#T#o$n$g;'S$n;'S;=`%Y<%lO$n~%]P;=`<%l$n~%cPuv%f~%kS_~OY%fZ;'S%f;'S;=`%w<%lO%f~%zP;=`<%l%f~&SO}~~&XO!Q~R&^S!OQyz&j}!O&o!`!a&{#l#m&jP&oO`PP&rRyz&j!`!a&{#l#m&jP'QP`P!`!a&j~'YO!P~~'agw~y~X^!|pq!|tu$n!Q![$n!c!}$n#T#o$n#y#z!|$f$g!|$g#BY$n#BY#BZ'Y#BZ$IS$n$IS$I_'Y$I_$I|$n$I|$JO'Y$JO$JT$n$JT$JU'Y$JU$KV$n$KV$KW'Y$KW&FU$n&FU&FV'Y&FV;'S$n;'S;=`%Y<%lO$n",
  tokenizers: [messageTextToken, textTokens, 0, 1],
  topRules: { "SequenceDiagram": [0, 13] },
  specialized: [{ term: 41, get: (value) => spec_identifier$2[value] || -1 }],
  tokenPrec: 293
});
var Keyword2 = 1;
var text1 = 14;
var text22 = 15;
var text32 = 16;
var skipCodePoints = [-1, 9, 10, 13, 32];
var keywords$1 = ["title", "section"];
var isComment2 = (input) => {
  return input.peek(0) === 37 && input.peek(1) === 37;
};
var shouldSkip = (input) => {
  return skipCodePoints.includes(input.next) || isComment2(input);
};
var keywordTokens = new ExternalTokenizer((input) => {
  if (shouldSkip(input))
    return;
  let tokens2 = "";
  while (!skipCodePoints.includes(input.next)) {
    tokens2 += String.fromCodePoint(input.next);
    input.advance();
  }
  const activeKeyword = keywords$1.filter((keyword3) => {
    if (keyword3 === tokens2) {
      return tokens2.toLowerCase().startsWith(keyword3);
    }
    return tokens2.toLowerCase().startsWith(keyword3 + " ");
  });
  if (activeKeyword.length > 0) {
    input.acceptToken(Keyword2, activeKeyword[0].length - tokens2.length);
    return;
  }
});
var textTokens1 = new ExternalTokenizer((input) => {
  if (shouldSkip(input))
    return;
  while (input.next !== 10 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(text1);
});
var textTokens2 = new ExternalTokenizer((input) => {
  if (shouldSkip(input))
    return;
  while (input.next !== 58 && input.next !== 10 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(text22);
});
var textTokens3 = new ExternalTokenizer((input) => {
  if (shouldSkip(input))
    return;
  while (input.next !== 44 && input.next !== 10 && input.next !== -1) {
    input.advance();
  }
  input.acceptToken(text32);
});
var journeyHighlighting = styleTags({
  DiagramName: journeyTags.diagramName,
  "Text TaskName": journeyTags.text,
  Actor: journeyTags.actor,
  Keyword: journeyTags.keyword,
  LineComment: journeyTags.lineComment,
  Score: journeyTags.score
});
var spec_identifier$1 = { __proto__: null, journey: 42 };
var parser$2 = LRParser.deserialize({
  version: 14,
  states: "%^OVQ`OOO[QeO'#CoQOQ`OOOOQT'#C_'#C_OOQT'#Cf'#CfOmQeO,59ZOOQO'#Cc'#CcO!OQ`O'#CbOOQO'#Cs'#CsO!TQbO'#CsOvQ`O,59ZOOQT-E6d-E6dO!YQ`O1G.uO!bQdO,58|OOQO'#Ca'#CaOOQO,59_,59_O!gQeO1G.uO!YQ`O1G.uO!xQeO7+$aO#RQ`O7+$aOOQO'#Cd'#CdO#ZQ`O1G.hOOQO,59S,59SOOQO-E6f-E6fO#fQeO<<G{O#wQhO7+$SP#|QeO'#CfOOQO'#Ce'#CeO$[Q`O<<GnO#wQhO'#CgO$gQ`OAN=YOOQO,59R,59ROOQO-E6e-E6e",
  stateData: "$u~ObOS~OeRO~OPXOSWO_UOfSO]cX~OPXOSWO_UOfSO]ca~Oh]O~O^^O~OfSO]ci~O_dO~OPXOSWO_UOfSO]ci~OPXOSWO_UOfSO]cq~OhiO]UifUi~OPXOSWO_UOfSO]cy~O`kO~OPXOSWO_UOfSO~OimO]UyfUy~OimO]U!RfU!R~Ofb~",
  goto: "#_hPPPiPlow!P!S!Y!n!tPPPPPP#OPPP#RRPOR_X]WPT`bhj]VPT`bhjRe]QliRomQTPYZT`bhjQ`YSb[aRhcQnlRpnQaYQc[TgacRQOQYPQ[TXf`bhj",
  nodeNames: "\u26A0 Keyword JourneyDiagram DiagramName LineComment Text Task TaskName Score Actor",
  maxTerm: 25,
  propSources: [journeyHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 3,
  tokenData: "$|~RaXY!WYZ!{Z^!Wpq!Wuv#x|}$g![!]$l!c!}$q#T#o$q#y#z!W$f$g!W#BY#BZ!W$IS$I_!W$I|$JO!W$JT$JU!W$KV$KW!W&FU&FV!W~!]Yb~X^!Wpq!W#y#z!W$f$g!W#BY#BZ!W$IS$I_!W$I|$JO!W$JT$JU!W$KV$KW!W&FU&FV!W~#S[f~b~XY!WYZ!{Z^!Wpq!W#y#z!W$f$g!W#BY#BZ!W$IS$I_!W$I|$JO!W$JT$JU!W$KV$KW!W&FU&FV!W~#{Puv$O~$TSS~OY$OZ;'S$O;'S;=`$a<%lO$O~$dP;=`<%l$O~$lOi~~$qOh~~$vQd~!c!}$q#T#o$q",
  tokenizers: [keywordTokens, textTokens1, textTokens2, textTokens3, 0],
  topRules: { "JourneyDiagram": [0, 2] },
  specialized: [{ term: 20, get: (value) => spec_identifier$1[value] || -1 }],
  tokenPrec: 172
});
var RelationshipStart = 1;
var notAllowedCodePoints = [-1, 45, 60, 62, 10, 13, 123, 61];
var relationshipStart = new ExternalTokenizer((input) => {
  if (notAllowedCodePoints.includes(input.next) || input.next === 32)
    return;
  let peek;
  let tokens2 = "";
  let count2 = 0;
  do {
    peek = input.peek(count2);
    if (peek === -1)
      return;
    tokens2 += String.fromCodePoint(peek);
    count2++;
  } while (!notAllowedCodePoints.includes(peek));
  if (peek === 45 || peek === 60) {
    tokens2 = tokens2.slice(0, -1).trim();
    input.acceptToken(RelationshipStart, tokens2.length);
  }
});
var requirementHighlighting = styleTags({
  "DiagramName SubDiagramType": requirementTags.diagramName,
  LineComment: requirementTags.lineComment,
  IDNumber: requirementTags.number,
  "UnquotedString RelationshipStart": requirementTags.unquotedString,
  QuotedString: requirementTags.quotedString,
  PropKeyword: requirementTags.unquotedString,
  Keyword: requirementTags.keyword,
  "ForwardArrow BackArrow Hyphen": requirementTags.arrow
});
var spec_word2 = { __proto__: null, requirementDiagram: 144, requirement: 150, Requirement: 152, functionalRequirement: 154, FunctionalRequirement: 156, performanceRequirement: 158, PerformanceRequirement: 160, interfaceRequirement: 162, InterfaceRequirement: 164, physicalRequirement: 166, PhysicalRequirement: 168, designConstraint: 170, DesignConstraint: 172, element: 174, Element: 176, id: 18, Id: 20, ID: 22, text: 28, Text: 30, risk: 34, Risk: 36, low: 40, Low: 42, medium: 44, Medium: 46, high: 48, High: 50, verifymethod: 54, verifyMethod: 56, VerifyMethod: 58, analysis: 62, Analysis: 64, demonstration: 66, Demonstration: 68, inspection: 70, Inspection: 72, test: 74, Test: 76, type: 80, Type: 82, docRef: 86, DocRef: 88, contains: 96, Contains: 98, copies: 100, Copies: 102, derives: 104, Derives: 106, satisfies: 108, Satisfies: 110, verifies: 112, Verifies: 114, refines: 116, Refines: 118, traces: 120, Traces: 122 };
var parser$12 = LRParser.deserialize({
  version: 14,
  states: ")`OYQQOOO_QQO'#DtQOQQOOOOQO'#C`'#C`O!kQRO,5:`O!rOSO'#CcOOQO'#Ef'#EfO!zQQO'#DZO#SQRO'#DnO$^QRO1G/zOOQO'#Ca'#CaO$eQWO'#DxOOOO'#Do'#DoO$mOSO,58}OOQP,58},58}O$uQQO,59uO$uQQO,59uOOQP,5:Y,5:YOOQP-E7l-E7lOOQP'#Cb'#CbOOQP'#Eg'#EgO%sQQO,5:dOOOO-E7m-E7mOOQP1G.i1G.iO%xQQO1G/aOOQO'#D]'#D]O%}QQO1G/aO&SQQO1G0OO$eQWO7+${O'VQQO7+%jOOQP<<Hg<<HgO'^QQO'#E_O'cQQO'#EbO'hQQO'#EcO'mQQO'#E^OOQO'#Dp'#DpO(qQQO<<IUOOQO'#Cd'#CdOOQO'#Ci'#CiOOQO'#Cl'#ClOOQO'#Cv'#CvOOQO'#DT'#DTOOQO'#DW'#DWO(xQQO'#EaO(}QQO'#EdO)SQQO'#EeOOQP<<IU<<IUO)XQQO,5:yO)^QQO,5:|O)rQQO,5:}OOQO,5:x,5:xOOQO-E7n-E7nOOQPAN>pAN>pO$eQWO,5:{O$eQWO,5;OO$eQWO,5;POOQO1G0e1G0eOOQO1G0h1G0hOOQO'#Co'#CoOOQO1G0i1G0iOOQO'#Cz'#CzOOQO1G0g1G0gOOQO1G0j1G0jOOQO1G0k1G0k",
  stateData: "*e~O!gOSQOS~O!jRO~O!kSO!e!hX~OPUO!mYO!nYO!oYO!pYO!qYO!rYO!sYO!tYO!uYO!vYO!wYO!xYO!yYO!zYO!|TO~O!e!ha~PgO!|^O!}[O~O!O_O!a`O~O!kaOP!bX!e!bX!m!bX!n!bX!o!bX!p!bX!q!bX!r!bX!s!bX!t!bX!u!bX!v!bX!w!bX!x!bX!y!bX!z!bX!|!bX~O!e!hi~PgO!{cO!|TO~O!|gO!}[O~O!QiO!RiO!SiO!TiO!UiO!ViO!WiO!XiO!YiO!ZiO![iO!]iO!^iO!_iO~O#OkO~O!`lO~O!OlO~O!kmO~OXuOYuOZuO^vO_vOawObwOkxOlxOmxOxyOyyO{zO|zO~O#P!OO~P&XO#S!PO~O#S!QO~O#S!RO~O!k!SOX#QXY#QXZ#QX^#QX_#QXa#QXb#QXk#QXl#QXm#QXx#QXy#QX{#QX|#QX#P#QX~O#P!UO~P&XO#S!VO~O#S!WO~O#S!XO~O[!YO~Od![Oe![Of![Og![Oh![Oi![O~Oo!^Op!^Oq!^Or!^Os!^Ot!^Ou!^Ov!^O~O!k!a!g!`!O!`~",
  goto: "%r#[PPPP#]#`#d#k#vPPPP#zPP$OPP$SPPPPPP$VPPP$ZPPPPPPPP$^PP$bPP$fP$jPPPPPPPPPPPPPPPP$p$v$|PPP%SPPP$fPPPPPPPPPPPPPPPPPPP%V%ZP%Z%Z%Z%Z%Z%_%cRPOTZSXZdZl!V!W!XSUSXZdZl!V!W!XTomtT{mtTpmtR!Z!QTqmtR!]!RT|mtT}mtTWSXQh_Rj`QXSRbXQ]TRf]QtmR!TtRQOTsmtTrmtTVSXQeZQnlQ!_!VQ!`!WR!a!X",
  nodeNames: "\u26A0 RelationshipStart LineComment RequirementDiagram DiagramName SubDiagramType UnquotedString QuotedString ID PropKeyword PropKeyword PropKeyword IDNumber Text PropKeyword PropKeyword Risk PropKeyword PropKeyword RiskType Keyword Keyword Keyword Keyword Keyword Keyword VerifyMethod PropKeyword PropKeyword PropKeyword VerifyMethodType Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Type PropKeyword PropKeyword DocRef PropKeyword PropKeyword RelationshipLine Hyphen RelationshipType Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword ForwardArrow BackArrow",
  maxTerm: 103,
  propSources: [requirementHighlighting],
  skippedNodes: [0, 2],
  repeatNodeCount: 3,
  tokenData: "1g~R{OX#xXY$aYZ&SZ^$a^p#xpq$aqr#xrs'}su#xuv(Sv}#x}!O)v!O!Q#x!Q![*t![!]+|!]!^#x!^!_,a!_!c#x!c!}-]!}#T#x#T#o-]#o#p0o#p#q#x#q#r1S#r#y#x#y#z$a#z$f#x$f$g$a$g#BY#x#BY#BZ$a#BZ$IS#x$IS$I_$a$I_$I|#x$I|$JO$a$JO$JT#x$JT$JU$a$JU$KV#x$KV$KW$a$KW&FU#x&FU&FV$a&FV;'S#x;'S;=`$Z<%lO#xQ#}S!}QOr#xs;'S#x;'S;=`$Z<%lO#xQ$^P;=`<%l#xV$hh!}Q!gTOX#xX^$a^p#xpq$aqr#xs#y#x#y#z$a#z$f#x$f$g$a$g#BY#x#BY#BZ$a#BZ$IS#x$IS$I_$a$I_$I|#x$I|$JO$a$JO$JT#x$JT$JU$a$JU$KV#x$KV$KW$a$KW&FU#x&FU&FV$a&FV;'S#x;'S;=`$Z<%lO#xV&]j!}Q!kP!gTOX#xXY$aYZ&SZ^$a^p#xpq$aqr#xs#y#x#y#z$a#z$f#x$f$g$a$g#BY#x#BY#BZ$a#BZ$IS#x$IS$I_$a$I_$I|#x$I|$JO$a$JO$JT#x$JT$JU$a$JU$KV#x$KV$KW$a$KW&FU#x&FU&FV$a&FV;'S#x;'S;=`$Z<%lO#x~(SO!|~V(XU!}QOr#xsu#xuv(kv;'S#x;'S;=`$Z<%lO#xV(rVQT!}QOY(kYZ#xZr(krs)Xs;'S(k;'S;=`)p<%lO(kT)^SQTOY)XZ;'S)X;'S;=`)j<%lO)XT)mP;=`<%l)XV)sP;=`<%l(kR)}U!}Q!OPOr#xs!`#x!`!a*a!a;'S#x;'S;=`$Z<%lO#xR*hS!}Q!`POr#xs;'S#x;'S;=`$Z<%lO#xR*{W[P!}QOr#xs!O#x!O!P+e!P!Q#x!Q![*t![;'S#x;'S;=`$Z<%lO#xR+jU!}QOr#xs!Q#x!Q![*t![;'S#x;'S;=`$Z<%lO#xR,TS#SP!}QOr#xs;'S#x;'S;=`$Z<%lO#xR,fU!}QOr#xs}#x}!O,x!O;'S#x;'S;=`$Z<%lO#xR-PS!}Q!aPOr#xs;'S#x;'S;=`$Z<%lO#xV-fb!}Q!{S!iPOY.nYZ#xZ].n]^#x^r.nrs/ts}.n}!O#x!O!^.n!^!a#x!a!c.n!c!}-]!}#T.n#T#o-]#o#p#x#p;'S.n;'S;=`0i<%lO.nU.u_!}Q!{SOY.nYZ#xZ].n]^#x^r.nrs/ts}.n}!O#x!O!^.n!^!a#x!a#o.n#o#p#x#p;'S.n;'S;=`0i<%lO.nS/yW!{SOY/tZ]/t^}/t!O!^/t!a#o/t#p;'S/t;'S;=`0c<%lO/tS0fP;=`<%l/tU0lP;=`<%l.nR0vS#OP!}QOr#xs;'S#x;'S;=`$Z<%lO#xR1ZS#PP!}QOr#xs;'S#x;'S;=`$Z<%lO#x",
  tokenizers: [relationshipStart, 0, 1, 2],
  topRules: { "RequirementDiagram": [0, 3] },
  specialized: [{ term: 71, get: (value) => spec_word2[value] || -1 }],
  tokenPrec: 428
});
var AxisFormat = 1;
var DateFormat = 2;
var Excludes = 3;
var InclusiveEndDates = 4;
var TickInterval = 5;
var Title = 6;
var TodayMarker = 7;
var Weekday = 8;
var Section = 9;
var text4 = 17;
var keywordMap2 = {
  axisFormat: AxisFormat,
  dateFormat: DateFormat,
  excludes: Excludes,
  inclusiveEndDates: InclusiveEndDates,
  section: Section,
  tickInterval: TickInterval,
  title: Title,
  todayMarker: TodayMarker,
  weekday: Weekday
};
var keywords46 = Object.keys(keywordMap2);
var textToken = new ExternalTokenizer((input) => {
  if (input.next === 32 || input.next === 10 || input.next === -1)
    return;
  if (input.next === 37 && input.peek(1) === 37) {
    return;
  }
  let tokens2 = "";
  while (input.next !== 10 && input.next !== -1) {
    tokens2 += String.fromCodePoint(input.next);
    input.advance();
  }
  const activeKeyword = keywords46.filter((keyword3) => {
    if (keyword3 === tokens2) {
      return tokens2.startsWith(keyword3);
    }
    return tokens2.startsWith(keyword3 + " ");
  });
  if (activeKeyword.length > 0) {
    input.acceptToken(keywordMap2[activeKeyword[0]], activeKeyword[0].length - tokens2.length);
    return;
  }
  input.acceptToken(text4);
});
var ganttHighlighting = styleTags({
  "DiagramName Section": ganttTags.diagramName,
  Keyword: ganttTags.keyword,
  ImportantText: ganttTags.string,
  LineComment: ganttTags.lineComment
});
var spec_identifier11 = { __proto__: null, gantt: 44 };
var parser22 = LRParser.deserialize({
  version: 14,
  states: "!|OVQQOOO[QQO'#CpQOQQOOOOQO'#Cg'#CgO!XQRO,59[OOQP'#Ci'#CiO!`QRO'#CtO!SQRO'#CtOOQP'#Ct'#CtO!eQRO'#CkO#`QRO1G.vOOQP'#Ch'#ChOOQP,59`,59`OOQP,59V,59VOOQP-E6i-E6i",
  stateData: "#j~OcOS~OfRO~OgSO`dX~OPVOQVORVOSWOTVOUUOVVOWVOXUO^WOaTO~O`da~PdOaZO~Og]OP_XQ_XR_XS_XT_XU_XV_XW_XX_X^_X`_Xa_X~O`di~PdOgc~",
  goto: "!UiPPPPPPPPPPPjmpPwPPPP}PPP!QRPOR[USWSYR[VQYSR^YRQOTXSY",
  nodeNames: "\u26A0 AxisFormat DateFormat Excludes InclusiveEndDates TickInterval Title TodayMarker Weekday Section GanttDiagram DiagramName ImportantText Text LineComment",
  maxTerm: 24,
  nodeProps: [
    ["group", -8, 1, 2, 3, 4, 5, 6, 7, 8, "Keyword"]
  ],
  propSources: [ganttHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 1,
  tokenData: "$l~R_XY!QYZ!uZ^!Qpq!Quv#r!c!}$a#T#o$a#y#z!Q$f$g!Q#BY#BZ!Q$IS$I_!Q$I|$JO!Q$JT$JU!Q$KV$KW!Q&FU&FV!Q~!VYc~X^!Qpq!Q#y#z!Q$f$g!Q#BY#BZ!Q$IS$I_!Q$I|$JO!Q$JT$JU!Q$KV$KW!Q&FU&FV!Q~!|[g~c~XY!QYZ!uZ^!Qpq!Q#y#z!Q$f$g!Q#BY#BZ!Q$IS$I_!Q$I|$JO!Q$JT$JU!Q$KV$KW!Q&FU&FV!Q~#uPuv#x~#}S^~OY#xZ;'S#x;'S;=`$Z<%lO#x~$^P;=`<%l#x~$fQe~!c!}$a#T#o$a",
  tokenizers: [textToken, 0],
  topRules: { "GanttDiagram": [0, 10] },
  specialized: [{ term: 21, get: (value) => spec_identifier11[value] || -1 }],
  tokenPrec: 115
});
var DiagramType;
(function(DiagramType2) {
  DiagramType2["Mermaid"] = "MermaidDiagram";
  DiagramType2["Mindmap"] = "MindmapDiagram";
  DiagramType2["Pie"] = "PieDiagram";
  DiagramType2["Flowchart"] = "FlowchartDiagram";
  DiagramType2["Sequence"] = "SequenceDiagram";
  DiagramType2["Journey"] = "JourneyDiagram";
  DiagramType2["Requirement"] = "RequirementDiagram";
  DiagramType2["Gantt"] = "GanttDiagram";
})(DiagramType || (DiagramType = {}));
var MermaidDescriptionName;
(function(MermaidDescriptionName2) {
  MermaidDescriptionName2["Mermaid"] = "mermaid";
  MermaidDescriptionName2["Mindmap"] = "mindmap";
  MermaidDescriptionName2["Pie"] = "pie";
  MermaidDescriptionName2["Flowchart"] = "flowchart";
  MermaidDescriptionName2["Sequence"] = "sequenceDiagram";
  MermaidDescriptionName2["Journey"] = "journey";
  MermaidDescriptionName2["Requirement"] = "requirementDiagram";
  MermaidDescriptionName2["Gantt"] = "gantt";
})(MermaidDescriptionName || (MermaidDescriptionName = {}));
var MermaidLanguageType;
(function(MermaidLanguageType2) {
  MermaidLanguageType2["Mermaid"] = "mermaid";
  MermaidLanguageType2["Mindmap"] = "mindmap";
  MermaidLanguageType2["Pie"] = "pie";
  MermaidLanguageType2["Flowchart"] = "flowchart";
  MermaidLanguageType2["Sequence"] = "sequence";
  MermaidLanguageType2["Journey"] = "journey";
  MermaidLanguageType2["Requirement"] = "requirement";
  MermaidLanguageType2["Gantt"] = "gantt";
})(MermaidLanguageType || (MermaidLanguageType = {}));
var MermaidAlias;
(function(MermaidAlias2) {
  MermaidAlias2["Graph"] = "graph";
  MermaidAlias2["Sequence"] = "sequence";
  MermaidAlias2["Requirement"] = "requirement";
})(MermaidAlias || (MermaidAlias = {}));
var mermaidLanguage = LRLanguage.define({
  name: MermaidLanguageType.Mermaid,
  parser: parser$7.configure({
    wrap: parseMixed((node) => {
      switch (node.name) {
        case DiagramType.Mindmap:
          return { parser: parser$6 };
        case DiagramType.Pie:
          return { parser: parser$5 };
        case DiagramType.Flowchart:
          return { parser: parser$4 };
        case DiagramType.Sequence:
          return { parser: parser$3 };
        case DiagramType.Journey:
          return { parser: parser$2 };
        case DiagramType.Requirement:
          return { parser: parser$12 };
        case DiagramType.Gantt:
          return { parser: parser22 };
        default:
          return null;
      }
    })
  })
});
var mindmapLanguage = LRLanguage.define({
  name: MermaidLanguageType.Mindmap,
  parser: parser$6
});
var pieLanguage = LRLanguage.define({
  name: MermaidLanguageType.Pie,
  parser: parser$5
});
var flowchartLanguage = LRLanguage.define({
  name: MermaidLanguageType.Flowchart,
  parser: parser$4
});
var sequenceLanguage = LRLanguage.define({
  name: MermaidLanguageType.Sequence,
  parser: parser$3
});
var journeyLanguage = LRLanguage.define({
  name: MermaidLanguageType.Journey,
  parser: parser$2
});
var requirementLanguage = LRLanguage.define({
  name: MermaidLanguageType.Requirement,
  parser: parser$12
});
var ganttLanguage = LRLanguage.define({
  name: MermaidLanguageType.Gantt,
  parser: parser22
});
function mermaid() {
  return new LanguageSupport(mermaidLanguage);
}
function mindmap() {
  return new LanguageSupport(mindmapLanguage);
}
function pie() {
  return new LanguageSupport(pieLanguage);
}
function flowchart() {
  return new LanguageSupport(flowchartLanguage);
}
function sequence() {
  return new LanguageSupport(sequenceLanguage);
}
function journey() {
  return new LanguageSupport(journeyLanguage);
}
function requirement() {
  return new LanguageSupport(requirementLanguage);
}
function gantt() {
  return new LanguageSupport(ganttLanguage);
}
var mermaidLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Mermaid,
  load: async () => {
    return mermaid();
  }
});
var mindmapLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Mindmap,
  load: async () => {
    return mindmap();
  }
});
var pieLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Pie,
  load: async () => {
    return pie();
  }
});
var flowchartLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Flowchart,
  alias: [MermaidAlias.Graph],
  load: async () => {
    return flowchart();
  }
});
var sequenceLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Sequence,
  alias: [MermaidAlias.Sequence],
  load: async () => {
    return sequence();
  }
});
var journeyLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Journey,
  load: async () => {
    return journey();
  }
});
var requirementLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Requirement,
  alias: [MermaidAlias.Requirement],
  load: async () => {
    return requirement();
  }
});
var ganttLanguageDescription = LanguageDescription.of({
  name: MermaidDescriptionName.Gantt,
  load: async () => {
    return gantt();
  }
});

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_dist29();
init_dist36();
init_dist8();
init_dist20();
init_dist31();
init_dist10();

// ../../node_modules/@lezer/lezer/dist/index.js
init_dist6();
init_dist4();
var lezerHighlighting = styleTags({
  LineComment: tags.lineComment,
  BlockComment: tags.blockComment,
  AnyChar: tags.character,
  Literal: tags.string,
  "tokens from grammar as empty prop extend specialize AtName": tags.keyword,
  "@top @left @right @cut @external": tags.modifier,
  "@precedence @tokens @context @dialects @skip @detectDelim @conflict": tags.definitionKeyword,
  "@extend @specialize": tags.operatorKeyword,
  "CharSet InvertedCharSet": tags.regexp,
  "CharClass": tags.atom,
  RuleName: tags.variableName,
  "RuleDeclaration/RuleName InlineRule/RuleName TokensBody/RuleName": tags.definition(tags.variableName),
  PrecedenceName: tags.labelName,
  Name: tags.name,
  "( )": tags.paren,
  "[ ]": tags.squareBracket,
  "{ }": tags.brace,
  '"!" ~ "*" + ? |': tags.operator
});
var spec_AtName = { __proto__: null, "@asciiLetter": 244, "@asciiUpperCase": 244, "@asciiLowerCase": 244, "@digit": 244, "@whitespace": 244, "@eof": 244, "@specialize": 76, "@extend": 78, "@top": 98, "@precedence": 102, "@left": 108, "@right": 110, "@cut": 112, "@tokens": 116, "@conflict": 126, "@local": 134, "@else": 142, "@external": 146, "@context": 172, "@dialects": 176, "@skip": 182, "@detectDelim": 190 };
var spec_keyword = { __proto__: null, tokens: 136, from: 148, prop: 156, as: 158, propSource: 162, extend: 166, specialize: 168 };
var parser23 = LRParser.deserialize({
  version: 14,
  states: "<zQ]QPOOOOQO'#Ca'#CaO}QPO'#C`OOQO'#Eq'#EqOOQO'#E`'#E`Q]QPOOOxQPO'#D^O!YQPO'#D`O!_QPO'#DgO!dQQO'#DpO!iQQO'#D{O!zQPO'#ETO#PQPO'#EVO#UQPO'#EYOOQO'#E^'#E^O#ZQPO'#CdO#fQPO'#CnO$iQPO'#CoOOQO,58z,58zO#UQPO,58zO!QQPO,58zOOQO-E8^-E8^O}QPO,59xO$pQPO'#DbOOQO,59z,59zO$xQPO'#DiOOQO,5:R,5:RO%ZQPO,5:[O!zQPO,5:bO!zQPO,5:gO!zQPO,5:jO#UQPO,5:lOOQO'#Cg'#CgO%`QQO,5:oO%eQPO'#EXOOQO,5:q,5:qO%mQPO,5:tO&eQPO'#CeO&pQPO,59OO#^QPO,59OOOQO,59O,59OOOQO,59Y,59YO&xQPO,59YO(bQPO'#EyO(oQPO'#EyOOQO'#Ey'#EyOOQO'#Cv'#CvO)nQPO'#EwO#UQPO'#C}O*[QPO'#DQOOQO'#Ex'#ExO$sQPO'#DVO!zQPO'#DYOOQO'#E{'#E{O*cQPO'#DUOOQO'#Ew'#EwO*vQPO'#EfO+ZQPO'#D[O+lQPO'#EvOOQO'#Ev'#EvOOQO,59Z,59ZO+}QPO,59ZO,SQPO'#DROOQO1G.f1G.fO#UQPO1G.fOOQO1G/d1G/dO#UQPO1G/dO!QQPO1G/dOOQO'#DX'#DXO,[QPO'#DcO,pQPO'#EgO,{QPO,59|OOQO,59|,59|O-TQPO'#DoOOQO'#E|'#E|OOQO'#Eh'#EhO-lQPO,5:TOOQO,5:T,5:TO-}QPO'#DjO.SQPO'#DlO.jQPO'#DsOOQO1G/v1G/vO.qQQO1G/|O.vQQO1G0RO/OQQO1G0UO!zQPO1G0WO/TQPO1G0ZO/YQPO'#ElO/eQPO,5:sOOQO,5:s,5:sO/mQPO'#E]OOQO1G0b1G0bO/xQPO,59POOQO,5:{,5:{OOQO1G.j1G.jO0^QPO1G.jOOQO-E8_-E8_O!zQPO'#EcO0fQPO1G.tOOQO1G.t1G.tOxQPO,59_O0nQPO'#CuOOQO,59`,59`OOQO,59i,59iO#UQPO,59iO0uQPO'#EeOOQO,59d,59dOOQO,59f,59fOOQO,59h,59hOOQO'#Ee'#EeO2VQPO,59pOOQO,59l,59lO2jQPO,59lOOQO,59q,59qOOQO,59t,59tOOQO,5;Q,5;QOOQO-E8d-E8dO2oQPO,59vOOQO1G.u1G.uOOQO,59m,59mO,VQPO,59mOOQO7+$Q7+$QOOQO7+%O7+%OO#UQPO7+%OOOQO,59},59}OOQO,5;R,5;ROOQO-E8e-E8eOOQO1G/h1G/hOOQO,5:Z,5:ZOOQO-E8f-E8fOOQO1G/o1G/oO3QQPO'#DkOOQO,5:U,5:UO3]QPO'#DnOOQO,5:W,5:WOOQO'#Ej'#EjO3eQPO,5:_OOQO,5:_,5:_OxQPO'#DtO3lQPO7+%hO3qQPO7+%mO!zQPO7+%mO3vQPO7+%pO3{QQO7+%rOOQO7+%u7+%uOOQO,5;W,5;WOOQO-E8j-E8jOOQO1G0_1G0_OOQO'#Em'#EmO4QQPO,5:wOOQO,5:w,5:wOxQPO'#CmOOQO'#Eb'#EbO4]QPO1G.kOOQO7+$U7+$UP&sQPO'#EaOOQO,5:},5:}OOQO-E8a-E8aOOQO7+$`7+$`OOQO1G.y1G.yOOQO,59a,59aO4qQPO,59aOOQO1G/T1G/TOOQO-E8c-E8cOOQO1G/W1G/WOOQO1G/X1G/XOOQO<<Hj<<HjO4yQPO'#EyO5_QPO'#EiO5mQPO,5:VOOQO,5:V,5:VO5xQPO,5:YOOQO-E8h-E8hOOQO1G/y1G/yO6TQPO,5:`O6lQPO<<ISOOQO<<IX<<IXO6qQQO<<IXOOQO<<I[<<I[O6vQPO<<I^OOQO-E8k-E8kOOQO1G0c1G0cO6{QPO,59XOOQO-E8`-E8`O#nQPO'#EdO7QQPO1G.{OOQO1G.{1G.{OOQO,5;T,5;TOOQO-E8g-E8gOOQO1G/q1G/qO7YQPO1G/tO7_QPO1G/tOOQO1G/z1G/zO7gQPO'#DyOOQOAN>nAN>nO7oQPOAN>sO6lQPOAN>xOOQO1G.s1G.sOOQO,5;O,5;OOOQO-E8b-E8bOOQO7+$g7+$gOOQO7+%`7+%`O7tQPO7+%`O7yQPO'#DzO8XQPO'#EkO8dQPO,5:eOOQO,5:e,5:eOOQOG24_G24_OOQOG24dG24dOOQO<<Hz<<HzOOQO,5:f,5:fOOQO,5;V,5;VOOQO-E8i-E8iOOQO1G0P1G0P",
  stateData: "8s~O#dOSPOSQOS~O!RUO!TVO![WO!eXO!kYO!xZO!z[O!}]O#R^O#fPO~OV_O`aO#i`O~O`gO~O`iO~O!fkO~O!flO!pmO!snO!uoO!voO~O#fpO~O`rO~O`aO~OUxOYuO#fpO~O#fpO#hyO~OV_O]!SOd!SOe!SOf!SOs!ROv!`Ow!`Oz!TO}!UO!P!YO#fPO#n!OO~O_!^O~P#nO_!jO#f!fO~O]!kO_!oO!T!pO!a!qO#fPO~O`!rO~O!l!xO~O_!{O#fpO~O`!|O!R!|a!T!|a![!|a!e!|a!k!|a!x!|a!z!|a!}!|a#R!|a#b!|a#f!|a~O[#OOUXX#gXX~OU#QO#g#PO~O#g#TO#h#VO~O#i#XO]#mX_#mXd#mXe#mXf#mXk#mXm#mXo#mXs#mXv#mXw#mXz#mX}#mX!P#mX#f#mX#n#mXr#mX#g#mX#h#mX~OV_O^#WO`aO~P'QOV#mX~P'QOV_O]!SOd!SOe!SOf!SOs!ROv!`Ow!`Oz!TO}!UO#fPO#n!OO~Ok#^Om#_Oo#`O_#kX!P#kXr#kX#g#kX#h#kX~P(vOr#cO~P#nO_xX!PxXrxX#gxX#hxX~P(vO_#YX!P#YXr#YX#g#YX#h#YX~P(vO!P!YO_!OXr!OX#g!OX#h!OX~O!P!YO_#jXr#jX#g#jX#h#jX~O_#jO~OV_O#i#XO~O!W#pO!X#pO!Y#pO_!VX#f!VX#g!VX~O#g#qO_#ZX#f#ZX~O_#sO#f!fO~OV_O]!cX_!cX!T!cX!a!cX#f!cX!i!cX~O]!kO_#vO!T!pO!a!qO#fPO~O`#wO~O`#yO~O]!kO!T!pO!a!qO!i$OO#fPO~O_#}O~P.XO!l$PO~O!l$QO!q$RO~O!l$SO~O]$UO~O#g$VO_#`X#f#`X~O_$XO#fpO~O_$[O!RUO#fPO~O]$^O^$^O`$]O#fpOUXa#gXa~OU$`O#g#PO~O#g#TO#h$dO~O#h$fO~P#nOk#^Om#_Oo#`OV#XX]#XX_#XXd#XXe#XXf#XXs#XXv#XXw#XXz#XX}#XX!P#XX#f#XX#n#XXr#XX#g#XX#h#XX~O_xa!Pxarxa#gxa#hxa~P(vOr$jO~O!P!YO_!Oar!Oa#g!Oa#h!Oa~O]$nO_$pO#fPO~O]$qO#fPO~O_$sO~P.XO]$uO~O]$vO~O]$xO~O!l$yO~O_${O!RUO#fPO~O]$^O^$^O`$]O#fpOUXi#gXi~O#g%OO#h%QO~O^#WO#i#XO]#mX_#mX#f#mX#g#mX~O#g%RO]#]X_#]X#f#]X~O]$nO_%TO#fPO~O]%UO#fPO#g%VO~OV_O]!ha_!ha!T!ha!a!ha!i!ha#f!ha~O`%XO~O!l%ZO~O]%[O~O_%]O~O#g%OO#h%`O~O_%aO~O]%bO#fPO~O_%fO#fPO~O]%gO~O_%iO~OV_O_!nX#f!nX#g!nX~O#g%kO_#_X#f#_X~O_%mO#fPO~Oe#dfz#f#q~",
  goto: ".d#qPPPP#r$QPP$}%nP%tPPPPP&m&q&}PPP'p(P(`(kP(kP(kP(k(kPP(k(kPP(u(|P)W(|P)_P)eP)mP)q)tPPP)mP)x){*R){P*U){)mPP*X*[P)mPP*`*f)mPP)mP)mPP)mP)mP*j)mP)m*m)mP*p*v*|+S+Y+`+g+t+z,Q,W,^,d,jPPP,pPPPP,t-Q-Z-gP.O.[SROTW!li!n!r#|T$Y!|$Z`QOTi!n!r!|#|$ZQfU`{a!P!R!W!Y#X#b%OQ$e#WY$m#w#y$o$q%VQ$t$OQ$|$]T%c%X%eQdQ`!Qa!P!R!W!Y#X#b%OQ!efQ#[{Q#l!`Q#t!kQ%W$tR%j%cQv_R#RwQqZSu_wQz`Q!tlQ!umQ!vnS!yr!zQ#f!UQ$T!wS$^#O$_Q$b#TR$w$RT$^#O$_QcQQ!bdQ!dfR#o!eQbQQt]S!acdQ!cfQ!woS#Z{!QQ#m!bS#n!d!eQ$h#[R$l#ok|a!P!R!W!Y#X#b#w#y$o$q%O%Vk}a!P!R!W!Y#X#b#w#y$o$q%O%VU#Y{|$mQ#k!`R$k#la!Sa!P!R!W!Y#X#b%OZ!Xa!R!Y#X%Oa!Va!P!R!W!Y#X#b%OS!gg!iR#e!TX!]a!R#X%OSROTT$Y!|$ZTROTRhVT!hg!iRjWX!li!n!r#|R#x!pR#z!qR!skT#{!r#|Q%Y$uR%h%[T%d%X%eRs[R!}tQTOReTQw_R#SwQ$_#OR$}$_Q#UzR$c#UQ%P$gR%_%PS#b!P!WR$i#bW!Za!R#X%OS#h!Z#iR#i![Q!igR#r!iQ!niR#u!nQ$o#wR%S$oQ#|!rR$r#|Q%e%XR%l%eQ!zrR$W!zQ$Z!|R$z$ZTSOTQ!_aQ#d!RQ$g#XR%^%OW![a!R#X%OR#g!YY!Pa!R!Y#X%OV#]!P!W#b`!Sa!P!R!W!Y#X#b%OS$n#w$oQ$q#yQ%U$qR%b%VY!Wa!R!Y#X%OV#a!P!W#bS!mi!nT#{!r#|",
  nodeNames: "\u26A0 LineComment BlockComment Grammar RuleDeclaration RuleName ] [ Props Prop AtName Name = Literal . } { PropEsc ParamList Body CharSet AnyChar InvertedCharSet ScopedName Call ArgList CharClass ? Optional * Repeat + Repeat1 InlineRule ) ( ParenExpression Specialization @specialize @extend Sequence PrecedenceMarker ! PrecedenceName AmbiguityMarker ~ Choice | RuleDeclaration @top PrecedenceDeclaration @precedence PrecedenceBody Precedence @left @right @cut TokensDeclaration @tokens TokensBody TokenPrecedenceDeclaration PrecedenceBody TokenConflictDeclaration @conflict ConflictBody LiteralTokenDeclaration LocalTokensDeclaration @local tokens TokensBody ElseToken @else ExternalTokensDeclaration @external from TokensBody Token ExternalPropDeclaration prop as ExternalPropSourceDeclaration propSource ExternalSpecializeDeclaration extend specialize ContextDeclaration @context DialectsDeclaration @dialects DialectBody TopSkipDeclaration @skip SkipScope SkipBody DetectDelimDeclaration @detectDelim",
  maxTerm: 125,
  nodeProps: [
    ["group", 4, "Declaration Declaration", -16, 5, 13, 20, 21, 22, 23, 24, 26, 28, 30, 32, 33, 36, 37, 40, 46, "Expression", -16, 48, 50, 57, 60, 62, 65, 66, 72, 77, 80, 82, 85, 87, 90, 92, 94, "Declaration"],
    ["openedBy", 6, "[", 15, "{", 34, "("],
    ["closedBy", 7, "]", 16, "}", 35, ")"]
  ],
  propSources: [lezerHighlighting],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 14,
  tokenData: "3w~R!OX^$Rpq$Rqr$vrs&ftu(^wx)zxy+myz+rz{+w{|+||},R}!O,W!O!P,}!P!Q-S!Q![,W!^!_.{!_!`/Q!`!a/V!a!b/[!b!c/a!c!},W!}#O0q#P#Q0v#R#S0{#T#o,W#o#p1n#p#q1s#q#r1x#r#s1}#y#z$R$f$g$R$g#BY,W#BY#BZ2S#BZ$IS,W$IS$I_2S$I_$I|,W$I|$JO2S$JO$JT,W$JT$JU2S$JU$KV,W$KV$KW2S$KW&FU,W&FU&FV2S&FV;'S,W;'S;=`,w<%lO,W~$WY#d~X^$Rpq$R#y#z$R$f$g$R#BY#BZ$R$IS$I_$R$I|$JO$R$JT$JU$R$KV$KW$R&FU&FV$R~${Pz~!}#O%O~%RUO#O%O#O#P%e#P#Q&Z#Q;'S%O;'S;=`&`<%lO%O~%hRO;'S%O;'S;=`%q;=`O%O~%tVO#O%O#O#P%e#P#Q&Z#Q;'S%O;'S;=`&`;=`<%l%O<%lO%O~&`Of~~&cP;=`<%l%O~&kW]~OY&fZr&frs'Ts#O&f#O#P'Y#P;'S&f;'S;=`(W<%lO&f~'YO]~~']RO;'S&f;'S;=`'f;=`O&f~'kX]~OY&fZr&frs'Ts#O&f#O#P'Y#P;'S&f;'S;=`(W;=`<%l&f<%lO&f~(ZP;=`<%l&f~(aP!}#O(d~(gUO#O(d#O#P(y#P#Q)o#Q;'S(d;'S;=`)t<%lO(d~(|RO;'S(d;'S;=`)V;=`O(d~)YVO#O(d#O#P(y#P#Q)o#Q;'S(d;'S;=`)t;=`<%l(d<%lO(d~)tOd~~)wP;=`<%l(d~*PW]~OY)zZw)zwx'Tx#O)z#O#P*i#P;'S)z;'S;=`+g<%lO)z~*lRO;'S)z;'S;=`*u;=`O)z~*zX]~OY)zZw)zwx'Tx#O)z#O#P*i#P;'S)z;'S;=`+g;=`<%l)z<%lO)z~+jP;=`<%l)z~+rOs~~+wOr~~+|Om~~,ROo~~,WO#g~R,_W#fP#qQ}!O,W!Q![,W!c!},W#R#S,W#T#o,W$g;'S,W;'S;=`,w<%lO,WR,zP;=`<%l,W~-SO^~~-VQz{-]!P!Q.d~-`TOz-]z{-o{;'S-];'S;=`.^<%lO-]~-rVOz-]z{-o{!P-]!P!Q.X!Q;'S-];'S;=`.^<%lO-]~.^OQ~~.aP;=`<%l-]~.iSP~OY.dZ;'S.d;'S;=`.u<%lO.d~.xP;=`<%l.d~/QO#i~~/VO[~~/[O#h~~/aOk~~/dW}!O/|!Q![/|!c!}/|#R#S/|#T#o/|$g;'S/|;'S;=`0k<%lO/|~0RWY~}!O/|!Q![/|!c!}/|#R#S/|#T#o/|$g;'S/|;'S;=`0k<%lO/|~0nP;=`<%l/|~0vOV~~0{OU~R1UWeP#fP#qQ}!O,W!Q![,W!c!},W#R#S,W#T#o,W$g;'S,W;'S;=`,w<%lO,W~1sO`~~1xO!P~~1}O_~~2SO}~~2]h#d~#fP#qQX^$Rpq$R}!O,W!Q![,W!c!},W#R#S,W#T#o,W#y#z$R$f$g$R$g#BY,W#BY#BZ2S#BZ$IS,W$IS$I_2S$I_$I|,W$I|$JO2S$JO$JT,W$JT$JU2S$JU$KV,W$KV$KW2S$KW&FU,W&FU&FV2S&FV;'S,W;'S;=`,w<%lO,W",
  tokenizers: [0, 1],
  topRules: { "Grammar": [0, 3] },
  specialized: [{ term: 10, get: (value) => spec_AtName[value] || -1 }, { term: 125, get: (value) => spec_keyword[value] || -1 }],
  tokenPrec: 1086
});

// ../../node_modules/@codemirror/lang-lezer/dist/index.js
init_dist5();
var lezerLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "lezer",
  parser: /* @__PURE__ */ parser23.configure({
    props: [
      /* @__PURE__ */ foldNodeProp.add({
        "Body TokensBody SkipBody PrecedenceBody": foldInside
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
    indentOnInput: /^\s*\}$/
  }
});
function lezer() {
  return new LanguageSupport(lezerLanguage);
}

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_dist27();
init_dist24();
init_dist34();
init_dist39();
init_dist40();

// ../../node_modules/@replit/codemirror-lang-nix/dist/index.js
init_dist6();
init_dist5();
init_dist4();
init_dist7();
var strContent = 63;
var strDollarBrace = 64;
var strEnd = 65;
var escapeSequence = 66;
var indStrContent = 67;
var indStrDollarBrace = 68;
var indStrEnd = 69;
var indEscapeSequence = 70;
var quote2 = 34;
var backslack = 92;
var braceL3 = 123;
var dollar = 36;
var apostrophe = 39;
var scanString = /* @__PURE__ */ new ExternalTokenizer((input) => {
  for (let afterDollar = false, i = 0; ; i++) {
    let { next: next2 } = input;
    if (next2 < 0) {
      if (i > 0)
        input.acceptToken(strContent);
      break;
    } else if (next2 === quote2) {
      if (i > 0)
        input.acceptToken(strContent);
      else
        input.acceptToken(strEnd, 1);
      break;
    } else if (next2 === braceL3 && afterDollar) {
      if (i == 1)
        input.acceptToken(strDollarBrace, 1);
      else
        input.acceptToken(strContent, -1);
      break;
    } else if (next2 === backslack) {
      input.advance();
      input.acceptToken(escapeSequence, 1);
    }
    afterDollar = next2 === dollar;
    input.advance();
  }
});
var scanIndString = /* @__PURE__ */ new ExternalTokenizer((input) => {
  for (let afterDollar = false, afterApostrophe = false, i = 0; ; i++) {
    let { next: next2 } = input;
    if (next2 < 0) {
      if (i > 0)
        input.acceptToken(indStrContent);
      break;
    } else if (next2 === apostrophe && afterApostrophe) {
      if (i > 1)
        input.acceptToken(indStrContent, -1);
      else
        input.acceptToken(indStrEnd, 1);
      break;
    } else if (next2 === braceL3 && afterDollar) {
      if (i == 1)
        input.acceptToken(indStrDollarBrace, 1);
      else
        input.acceptToken(indStrContent, -1);
      break;
    } else if (next2 === backslack) {
      input.advance();
      input.acceptToken(indEscapeSequence, 1);
    }
    afterDollar = next2 === dollar;
    afterApostrophe = next2 === apostrophe;
    input.advance();
  }
});
var spec_Identifier = { __proto__: null, assert: 22, with: 26, let: 30, inherit: 42, in: 48, if: 52, then: 54, else: 56, builtins: 70, null: 214, true: 216, false: 216, rec: 100, or: 108 };
var parser$13 = /* @__PURE__ */ LRParser.deserialize({
  version: 14,
  states: "7QO]QSOOO!sQWO'#DyO#XQ`O'#EjO&QQSO'#C`O&YQTO'#CnO'lQWO'#EWO(VQSO'#C|O(VQSO'#C|OOQO'#DQ'#DQOOQO'#DT'#DTO)dQUO'#DUO*yQSO'#DcOOQO'#Ej'#EjO,XQ`O'#EiOOQO'#Ei'#EiO-wQ`O'#EXOOQO'#Eh'#EhOOQO'#EX'#EXOOQO'#EW'#EWOOQO'#Dw'#DwO]QSO'#CfO]QSO'#ChO/dQSO'#D^O]QSO'#CuO]QSO'#D[O/xQSO'#D_QOQSOOO/}QSO'#CdO0`Q`O,5:eO3XQSO,5:eO3aQSO,5:eO4sQSO'#EOOOQO'#Cm'#CmOOQO'#Df'#DfO4}QSO,59wO]QSO'#CpO5`QSO'#ClO5eQSO'#EUO]QSO,58zO5sQSO,58zO5xQSO,58zOOQP'#EQ'#EQOOQP'#Dg'#DgO5}QTO,59YOOQO,59Y,59YO]QSO'#CoO6]QSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO(VQSO,59eO6|QWO,59hO8VQSO'#D]O/xQSO'#D^OOQO,59h,59hOOQQ'#En'#EnOOQQ'#Dj'#DjO8hQUO,59pOOQO,59p,59pO]QSO'#DVOOQO'#Dk'#DkO8vQSO,59}OOQO,59},59}O8}QSO'#EiO6]QSO,59jOOQO,59i,59iO9XQSO,59QO9^QSO,59SO9cQSO,59UO]QSO,59UOOQO,59x,59xO9tQSO,59aO9yQSO,59vOOQO,59y,59yO:OQSO'#DhO;hQSO,5:jO]QSO,59OO;rQWO1G0PO;zQSO1G0POOQO1G0P1G0POOQO-E7d-E7dOOQO1G/c1G/cO<SQSO,59[O]QSO,59WOOQO'#Di'#DiO<XQSO,5:pO]QSO,5:qOOQO1G.f1G.fO<gQWO'#DyO<rQSO1G.fOOQP-E7e-E7eOOQO1G.t1G.tO<wQSO,59ZO<|Q`O'#EOOOQO1G/P1G/PO@PQWO1G/PO@WQWO1G/POAuQWO1G/POA|QWO1G/POBTQWO1G/POC^QWO1G/PODgQWO1G/POEpQWO1G/POFyQWO1G/POHSQWO1G/POI]QWO1G/POJfQWO1G/POKoQWO1G/POOQO,59w,59wOOQQ-E7h-E7hOOQO1G/[1G/[OLYQSO,59qOOQO-E7i-E7iOOQO1G/i1G/iOMfQ`O1G/UO]QSO1G.lO]QSO1G.nO]QSO1G.pOOQO1G.p1G.pO]QSO1G.{OOQO1G/b1G/bOOQO,5:S,5:SOOQO-E7f-E7fOOQO1G.j1G.jO! UQSO'#CdOOQO,5:P,5:PO! aQSO7+%kO! fQWO7+%kOOQO-E7c-E7cOOQO7+%k7+%kOOQO1G.v1G.vO! nQSO1G.rOOQO-E7g-E7gOOQO1G0[1G0[O! sQSO1G0]OOQO,5:e,5:eO]QSO7+$QOOQP1G.u1G.uO! xQ`O,5:jOOQQ1G/]1G/]O!#eQSO1G/UO)rQSO7+$pOOQO7+$W7+$WOOQO7+$Y7+$YOOQO7+$[7+$[O!#oQSO7+$gOOQO<<IV<<IVO!#tQSO<<IVP!#yQSO'#DeOOQO7+$^7+$^O!$OQSO7+%wOOQO<<Gl<<GlOOQO<<H[<<H[O]QSO<<HROOQOAN>qAN>qO!$ZQSO<<IcOOQOAN=mAN=mOOQOAN>}AN>}O!$iQSO,59jO)rQSO7+$p",
  stateData: "!$x~O!jOSPOSQOS~OTQOUPOZdO]eO_fOfhOjgOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#QVO#ZUO#_WO#`XO#aYO~OTkOVlOXnOeuO!sSO!usO~O!lvO!pwOT#^XU#^X_#^Xf#^Xn#^Xo#^Xs#^Xu#^Xv#^Xz#^X{#^X|#^X}#^X!S#^X!U#^X!`#^X!n#^X!s#^X!v#^X!|#^X!}#^X#O#^X#P#^X#Q#^X#R#^X#S#^X#T#^X#U#^X#V#^X#W#^X#X#^X#Y#^X#_#^X#`#^X#a#^X!q#^Xk#^Xg#^XV#^X!o#^Xl#^X~O!lvO!pxO~O!ayO!b}O!c|O!dyO~On!TOo!VO!n!OO!|!PO!}!PO#O!QO#P!RO#Q!SO#R!TO#S!UO#T!WO#U!XO#V!YO#W!ZO#X![O#Y!]O~O!`!zX!q!zXk!zXg!zXV!zX!o!zXl!zX~P&hOT[OU!_O_!`OfhOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#QVO#ZUO#_WO#`XO#aYO~O!e!bO!f!fO!g!eO!h!bO~OT[OU!_O_!`OfhOs[Ou[Ov[Oz[O{[O|[O}[O!SiO!UZO!sSO#_WO#`XO#aYO~O!T!iO~P)rOT#]XU#]X_#]Xf#]Xs#]Xu#]Xv#]Xz#]X{#]X|#]X}#]X!S#]X!U#]X!s#]X#_#]X#`#]X#a#]X~O!v!kOn#]Xo#]X!`#]X!n#]X!|#]X!}#]X#O#]X#P#]X#Q#]X#R#]X#S#]X#T#]X#U#]X#V#]X#W#]X#X#]X#Y#]X!q#]Xk#]Xg#]XV#]X!o#]Xl#]X~P+QOn!{Xo!{X!`!{X!n!{X!|!{X!}!{X#O!{X#P!{X#Q!{X#R!{X#S!{X#T!{X#U!{X#V!{X#W!{X#X!{X#Y!{X!q!{Xk!{Xg!{XV!{X!o!{Xl!{X~P)rOToOU!_OeuOh!pO!sSO!usO~OU!_O~O!n!wO!v!uOVWX!oWX!w!rX~OT!PaU!Pa_!Paf!Pan!Pao!Pas!Pau!Pav!Paz!Pa{!Pa|!Pa}!Pa!S!Pa!U!Pa!`!Pa!l!ma!n!Pa!p!ma!s!Pa!v!Pa!|!Pa!}!Pa#O!Pa#P!Pa#Q!Pa#R!Pa#S!Pa#T!Pa#U!Pa#V!Pa#W!Pa#X!Pa#Y!Pa#_!Pa#`!Pa#a!Pa!q!Pak!Pag!PaV!Pa!o!Pal!Pa~OV!zO!o!xO~OV!zO~O!v!uOT!rXU!rX_!rXf!rXs!rXu!rXv!rXz!rX{!rX|!rX}!rX!S!rX!U!rX!W!rX!s!rX#_!rX#`!rX#a!rX~O!w!rX!T!rX~P3fOToOV!|OeuO!sSO!usO~O!w#OO~OT#POf#RO!sSO!usO~OU#TO~OT#UO~O!ayO!b}O!c#WO!dyO~OT#YO!sSO!usO~O!n!OO!|!PO!}!PO#O!QO#P!RO#Q!SO~Onpaopa!`pa#Rpa#Spa#Tpa#Upa#Vpa#Wpa#Xpa#Ypa!qpakpagpaVpa!opalpa~P6hOToOV#iOeuO!sSO!usO~O!e!bO!f!fO!g#kO!h!bO~O!T#nO~P)rO!v$mO!T#]X~P+QO!q#pO~O!q#qO~OToOeuOh#rO!sSO!usO~Ok#tO~Og#uO~OT#vO!sSO!usO~O!v!uOT!raU!ra_!raf!ras!rau!rav!raz!ra{!ra|!ra}!ra!S!ra!U!ra!W!ra!s!ra#_!ra#`!ra#a!ra~O!w!ra!T!ra~P:ZOT#yOX#{O~OV$OO!o#|O~OV$PO~OT#PO!q$SO!sSO!usO~OT#yOV$UOXnO~O!l$VO~OV$WO~On!rXo!rX!`!rX!n!rX!|!rX!}!rX#O!rX#P!rX#Q!rX#R!rX#S!rX#T!rX#U!rX#V!rX#W!rX#X!rX#Y!rX!q!rXk!rXg!rXV!rX!o!rXl!rX~P3fO!n!OO!|!POnmiomi!`mi#Omi#Pmi#Qmi#Rmi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~O!}mi~P>iO!}!PO~P>iO!n!OO!|!PO!}!PO#O!QOnmiomi!`mi#Qmi#Rmi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~O#Pmi~P@_O#P!RO~P@_O#R!TOnmiomi!`mi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TO#R!TOomi!`mi#Smi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TO#R!TO#S!UOomi!`mi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO!`mi#Tmi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO!`mi#Umi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO!`mi#Vmi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO#V!YO!`mi#Wmi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hOn!TOo!VO#R!TO#S!UO#T!WO#U!XO#V!YO#W!ZO!`mi#Xmi#Ymi!qmikmigmiVmi!omilmi~P6hO!`mi!qmikmigmiVmi!omilmi~P&hOV$YO~OTriUri_rifrisriurivrizri{ri|ri}ri!Sri!Uri!sri#_ri#`ri#ari~O!W$[Onriori!`ri!nri!|ri!}ri#Ori#Pri#Qri#Rri#Sri#Tri#Uri#Vri#Wri#Xri#Yri!qrikrigriVri!orilri~PL_O!n!wOVWX!oWX~OV$aO~OT#yOX$bO~O!q$dO~Og$eO~On!rao!ra!`!ra!n!ra!|!ra!}!ra#O!ra#P!ra#Q!ra#R!ra#S!ra#T!ra#U!ra#V!ra#W!ra#X!ra#Y!ra!q!rak!rag!raV!ra!o!ral!ra~P:ZO!W$nO!Tri~PL_Ol$hO~OV$iO~OT#yO~OT#PO!sSO!usO~OT#PO!q$lO!sSO!usO~OToO!sSO!usO~Oz!v!v~",
  goto: "2g#cPPPP#dPPP#yP#dP#dP#dP$S$Z$k%{%fPPPP&PPPP&fPP&f'[(QP({PP({({)vPPPP({)z({({PPP({P*|+S+_+e+p+z,QPPPPPPPPPPP,WP-cPPPP-{P.VPPP$S$S#d.ZPPPPPPPPPPPPPP/o0e1fPPP2cwcOdeghsv}!f!p!w#O#R#p#q#r#t$V$hSmP#TV#z!x#|$cZqPfr!_!oYtPfr!_!oQ#Z!OQ#o!kR$Z$m!p[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$n[oPfr!_!o$mW#Pu#Q$e$jS#Y!O!kR#v!uTyS{wbOdeghsv}!f!p!w#O#R#p#q#r#t$V$h!gaOUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!g`OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!q^OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$n!q[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$nT!bY!d!p[OUVZ_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!h!p!w#O#R#p#q#r#t$V$[$h$nS!qf!`R!tiQ!ymR#}!ySrP!_Q!ofT!{r!oQ{SR#V{S!vkoS#w!v$XR$X#YQ#QuS$R#Q$jR$j$eQ!dYR#j!dQ!hZR#m!hQjOQ!mdQ!neQ!rgQ!shQ!}sQ#SvQ#X}Q#l!fQ#s!pQ#x!wQ$Q#OQ$T#RQ$]#pQ$^#qQ$_#rQ$`#tQ$f$VR$k$hvROdeghsv}!f!p!w#O#R#p#q#r#t$V$hR#UwapPfr!O!_!k!o$mTzS{vTOdeghsv}!f!p!w#O#R#p#q#r#t$V$hQ!^UQ!aVQ#[!PQ#]!QQ#^!RQ#_!SQ#`!TQ#a!UQ#b!VQ#c!WQ#d!XQ#e!YQ#f!ZQ#g![R#h!]!g_OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$h!f`OUVdeghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$hS!gZ!hQ!l_T$g$[$n!j]OUV_deghsv}!P!Q!R!S!T!U!V!W!X!Y!Z![!]!f!p!w#O#R#p#q#r#t$V$[$hV!jZ!h$nT!cY!d",
  nodeNames: "\u26A0 LineComment BlockComment Program Function Identifier { } Formal Ellipses Assert assert With with Let let Bind AttrPath String Interpolation Interpolation inherit ( ) in IfExpr if then else BinaryExpr < > UnaryExpr App Select builtins Null Integer Float Boolean IndentedString Interpolation Path HPath SPath URI Parenthesized AttrSet LetAttrSet RecAttrSet rec ] [ List or",
  maxTerm: 110,
  nodeProps: [
    ["closedBy", 6, "}", 22, ")", 52, "]"],
    ["openedBy", 7, "{", 23, "(", 51, "["]
  ],
  skippedNodes: [0, 1, 2],
  repeatNodeCount: 7,
  tokenData: ">P~RtXY#cYZ#c]^#cpq#cqr#trs$Rst$Wtu$ovw$zwx%Vxy%byz%gz{%l{|%q|})]}!O)b!O!P*X!P!Q.r!Q!R0l!R![2e![!]3S!]!^3X!^!_3^!_!`5_!`!a5l!a!b5y!b!c6O!c!}6T!}#O;g#P#Q;l#R#S:u#T#o6T#o#p;q#p#q;v#q#r<R#r#s<W~#hS!j~XY#cYZ#c]^#cpq#cV#yP#ZP!_!`#|U$RO#VU~$WO!s~~$]SP~OY$WZ;'S$W;'S;=`$i<%lO$W~$lP;=`<%l$W~$rP#o#p$u~$zO!u~~$}Pvw%Q~%VO#W~~%YPwx%]~%bO#a~~%gOf~~%lOg~~%qO!}~~%vW#P~{|&`}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}~&eW!|~{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}T'QW{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}T'mV{|(S}!O(S!O!P(S!Q![(S!c!}(S#R#S(S#T#o(ST(XWzT{|(S}!O(S!O!P(S!P!Q(q!Q![(S!c!}(S#R#S(S#T#o(ST(vVzT{|(S}!O(S!O!P(S!Q![(S!c!}(S#R#S(S#T#o(S~)bO!o~~)gX#Q~{|&}}!O&}!O!P&}!P!Q'j!Q![&}!`!a*S!c!}&}#R#S&}#T#o&}~*XO#Y~~*^W!vT{|&}}!O&}!O!P*v!P!Q'j!Q![,Q!c!}&}#R#S&}#T#o&}V*yW{|&}}!O&}!O!P+c!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}V+hWXQ{|&}}!O&}!O!P&}!P!Q'j!Q![&}!c!}&}#R#S&}#T#o&}~,V[v~{|&}}!O&}!O!P&}!P!Q'j!Q![,Q!c!g&}!g!h,{!h!}&}#R#S&}#T#X&}#X#Y,{#Y#o&}~-OW{|-h}!O-h!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~-kW{|&}}!O&}!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~.YWv~{|&}}!O&}!O!P&}!P!Q'j!Q![.T!c!}&}#R#S&}#T#o&}~.wX#O~z{/d{|(S}!O(S!O!P(S!P!Q0g!Q![(S!c!}(S#R#S(S#T#o(S~/iTQ~Oz/dz{/x{;'S/d;'S;=`0a<%lO/d~/{TO!P/d!P!Q0[!Q;'S/d;'S;=`0a<%lO/d~0aOQ~~0dP;=`<%l/d~0lO#R~~0qWu~{|&}}!O&}!O!P1Z!P!Q'j!Q![1v!c!}&}#R#S&}#T#o&}~1^W{|&}}!O&}!O!P&}!P!Q'j!Q![,Q!c!}&}#R#S&}#T#o&}~1{Wu~{|&}}!O&}!O!P&}!P!Q'j!Q![1v!c!}&}#R#S&}#T#o&}~2jWu~{|&}}!O&}!O!P,Q!P!Q'j!Q![2e!c!}&}#R#S&}#T#o&}~3XO!l~~3^O!q~~3cWn~{|3{}!O3{!O!P3{!Q![3{!_!`5Y!c!}3{#R#S3{#T#o3{~4OX{|3{}!O3{!O!P3{!P!Q4k!Q![3{!`!a5T!c!}3{#R#S3{#T#o3{~4nV{|3{}!O3{!O!P3{!Q![3{!c!}3{#R#S3{#T#o3{~5YO|~~5_O#S~V5dP!wP!_!`5gU5lO#UU~5qPo~!_!`5t~5yO#T~~6OO!n~~6TO!p~~6YYT~wx6x{|7a}!O6T!O!P7a!P!Q'j!Q![6T![!]8P!c!}6T#R#S:u#T#o6T~6}UT~wx6x}!O6x!Q![6x!c!}6x#R#S6x#T#o6x~7dX{|7a}!O7a!O!P7a!P!Q'j!Q![7a![!]8P!c!}7a#R#S&}#T#o7a~8Sdqr9btu9buv9bvw9bwx9bz{9b{|9b|}9b}!O9b!O!P9b!P!Q9b!Q![9b![!]9b!_!`9b!a!b9b!b!c9b!c!}9b#R#S9b#T#o9b#r#s9b~9gd}~qr9btu9buv9bvw9bwx9bz{9b{|9b|}9b}!O9b!O!P9b!P!Q9b!Q![9b![!]9b!_!`9b!a!b9b!b!c9b!c!}9b#R#S9b#T#o9b#r#s9b~:zXT~wx6x{|&}}!O:u!O!P&}!P!Q'j!Q![:u!c!}:u#R#S:u#T#o:u~;lO!U~~;qO!T~~;vOU~~;yP#p#q;|~<RO#X~~<WOV~~<ZP!P!Q<^~<aV{|<v}!O<v!O!P<v!Q![<v!c!}<v#R#S<v#T#o<v~<{W{~{|<v}!O<v!O!P<v!P!Q=e!Q![<v!c!}<v#R#S<v#T#o<v~=jV{~{|<v}!O<v!O!P<v!Q![<v!c!}<v#R#S<v#T#o<v",
  tokenizers: [scanString, scanIndString, 0, 1, 2],
  topRules: { "Program": [0, 3] },
  specialized: [{ term: 5, get: (value) => spec_Identifier[value] || -1 }],
  tokenPrec: 2290
});
var parser24 = parser$13;
var nixLanguage = /* @__PURE__ */ LRLanguage.define({
  name: "Nix",
  parser: /* @__PURE__ */ parser24.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Parenthesized: /* @__PURE__ */ delimitedIndent({ closing: ")" }),
        AttrSet: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
        List: /* @__PURE__ */ delimitedIndent({ closing: "]" }),
        Let: /* @__PURE__ */ continuedIndent({ except: /^\s*in\b/ })
      }),
      /* @__PURE__ */ foldNodeProp.add({
        AttrSet: foldInside,
        List: foldInside,
        Let(node) {
          let first = node.getChild("let"), last = node.getChild("in");
          if (!first || !last)
            return null;
          return { from: first.to, to: last.from };
        }
      }),
      /* @__PURE__ */ styleTags({
        Identifier: tags.propertyName,
        Boolean: tags.bool,
        String: tags.string,
        IndentedString: tags.string,
        LineComment: tags.lineComment,
        BlockComment: tags.blockComment,
        Float: tags.float,
        Integer: tags.integer,
        Null: tags.null,
        URI: tags.url,
        SPath: tags.literal,
        Path: tags.literal,
        "( )": tags.paren,
        "{ }": tags.brace,
        "[ ]": tags.squareBracket,
        "if then else": tags.controlKeyword,
        "import with let in rec builtins inherit assert or": tags.keyword
      })
    ]
  }),
  languageData: {
    commentTokens: { line: "#", block: { open: "/*", close: "*/" } },
    closeBrackets: { brackets: ["(", "[", "{", "''", '"'] },
    indentOnInput: /^\s*(in|\}|\)|\])$/
  }
});
var snippets4 = [
  /* @__PURE__ */ snippetCompletion("let ${binds} in ${expression}", {
    label: "let",
    detail: "Let ... in statement",
    type: "keyword"
  }),
  /* @__PURE__ */ snippetCompletion("with ${expression}; ${expression}", {
    label: "with",
    detail: "With statement",
    type: "keyword"
  })
];
function nix() {
  return new LanguageSupport(nixLanguage, nixLanguage.data.of({
    autocomplete: ifNotIn(["LineComment", "BlockComment", "String", "IndentedString"], completeFromList(snippets4))
  }));
}

// ../../node_modules/@replit/codemirror-lang-svelte/dist/index.js
init_dist6();
init_dist4();
init_dist5();
init_dist12();
init_dist17();
init_dist();
init_dist16();
init_dist18();
init_dist3();
init_dist2();
var scriptText2 = 145;
var StartCloseScriptTag2 = 1;
var styleText3 = 146;
var StartCloseStyleTag2 = 2;
var textareaText2 = 147;
var StartCloseTextareaTag2 = 3;
var StartTag3 = 4;
var StartScriptTag2 = 5;
var StartStyleTag2 = 6;
var StartTextareaTag2 = 7;
var StartSelfClosingTag2 = 8;
var StartCloseTag3 = 9;
var MismatchedStartCloseTag2 = 11;
var missingCloseTag2 = 148;
var IncompleteCloseTag2 = 12;
var commentContent$13 = 149;
var LongExpression = 13;
var ShortExpression = 14;
var Element5 = 67;
var ScriptText2 = 110;
var StyleText3 = 113;
var TextareaText2 = 116;
var OpenTag3 = 118;
var selfClosers3 = {
  area: true,
  base: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
  menuitem: true
};
var implicitlyClosed2 = {
  dd: true,
  li: true,
  optgroup: true,
  option: true,
  p: true,
  rp: true,
  rt: true,
  tbody: true,
  td: true,
  tfoot: true,
  th: true,
  tr: true
};
var closeOnOpen2 = {
  dd: { dd: true, dt: true },
  dt: { dd: true, dt: true },
  li: { li: true },
  option: { option: true, optgroup: true },
  optgroup: { optgroup: true },
  p: {
    address: true,
    article: true,
    aside: true,
    blockquote: true,
    dir: true,
    div: true,
    dl: true,
    fieldset: true,
    footer: true,
    form: true,
    h1: true,
    h2: true,
    h3: true,
    h4: true,
    h5: true,
    h6: true,
    header: true,
    hgroup: true,
    hr: true,
    menu: true,
    nav: true,
    ol: true,
    p: true,
    pre: true,
    section: true,
    table: true,
    ul: true
  },
  rp: { rp: true, rt: true },
  rt: { rp: true, rt: true },
  tbody: { tbody: true, tfoot: true },
  td: { td: true, th: true },
  tfoot: { tbody: true },
  th: { td: true, th: true },
  thead: { tbody: true, tfoot: true },
  tr: { tr: true }
};
function nameChar3(ch2) {
  return ch2 == 45 || ch2 == 46 || ch2 == 58 || ch2 >= 65 && ch2 <= 90 || ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
}
function isSpace5(ch2) {
  return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
}
var cachedName3 = null;
var cachedInput3 = null;
var cachedPos3 = 0;
function tagNameAfter3(input, offset) {
  let pos = input.pos + offset;
  if (cachedPos3 == pos && cachedInput3 == input) return cachedName3;
  let next2 = input.peek(offset);
  while (isSpace5(next2)) next2 = input.peek(++offset);
  let name2 = "";
  for (; ; ) {
    if (!nameChar3(next2)) break;
    name2 += String.fromCharCode(next2);
    next2 = input.peek(++offset);
  }
  cachedInput3 = input;
  cachedPos3 = pos;
  return cachedName3 = name2 ? name2.toLowerCase() : next2 == question3 || next2 == bang2 ? void 0 : null;
}
var lessThan2 = 60;
var greaterThan$1 = 62;
var slash$1 = 47;
var question3 = 63;
var bang2 = 33;
function ElementContext3(name2, parent) {
  this.name = name2;
  this.parent = parent;
  this.hash = parent ? parent.hash : 0;
  for (let i = 0; i < name2.length; i++)
    this.hash += (this.hash << 4) + name2.charCodeAt(i) + (name2.charCodeAt(i) << 8);
}
var startTagTerms2 = [
  StartTag3,
  StartSelfClosingTag2,
  StartScriptTag2,
  StartStyleTag2,
  StartTextareaTag2
];
var elementContext3 = /* @__PURE__ */ new ContextTracker({
  start: null,
  shift(context, term, stack, input) {
    return startTagTerms2.indexOf(term) > -1 ? new ElementContext3(tagNameAfter3(input, 1) || "", context) : context;
  },
  reduce(context, term) {
    return term == Element5 && context ? context.parent : context;
  },
  reuse(context, node, stack, input) {
    let type7 = node.type.id;
    return type7 == StartTag3 || type7 == OpenTag3 ? new ElementContext3(tagNameAfter3(input, 1) || "", context) : context;
  },
  hash(context) {
    return context ? context.hash : 0;
  },
  strict: false
});
var tagStart3 = /* @__PURE__ */ new ExternalTokenizer(
  (input, stack) => {
    if (input.next != lessThan2) {
      if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag2);
      return;
    }
    input.advance();
    let close = input.next == slash$1;
    if (close) input.advance();
    let name2 = tagNameAfter3(input, 0);
    if (name2 === void 0) return;
    if (!name2) return input.acceptToken(close ? IncompleteCloseTag2 : StartTag3);
    let parent = stack.context ? stack.context.name : null;
    if (close) {
      if (name2 == parent) return input.acceptToken(StartCloseTag3);
      if (parent && implicitlyClosed2[parent])
        return input.acceptToken(missingCloseTag2, -2);
      for (let cx2 = stack.context; cx2; cx2 = cx2.parent) if (cx2.name == name2) return;
      input.acceptToken(MismatchedStartCloseTag2);
    } else {
      if (name2 == "script") return input.acceptToken(StartScriptTag2);
      if (name2 == "style") return input.acceptToken(StartStyleTag2);
      if (name2 == "textarea") return input.acceptToken(StartTextareaTag2);
      if (selfClosers3.hasOwnProperty(name2)) return input.acceptToken(StartSelfClosingTag2);
      if (parent && closeOnOpen2[parent] && closeOnOpen2[parent][name2])
        input.acceptToken(missingCloseTag2, -1);
      else input.acceptToken(StartTag3);
    }
  },
  { contextual: true }
);
function contentTokenizer2(tag2, textToken2, endToken) {
  let lastState = 2 + tag2.length;
  return new ExternalTokenizer((input) => {
    for (let state = 0, matchedLen = 0, i = 0; ; i++) {
      if (input.next < 0) {
        if (i) input.acceptToken(textToken2);
        break;
      }
      if (state == 0 && input.next == lessThan2 || state == 1 && input.next == slash$1 || state >= 2 && state < lastState && input.next == tag2.charCodeAt(state - 2)) {
        state++;
        matchedLen++;
      } else if ((state == 2 || state == lastState) && isSpace5(input.next)) {
        matchedLen++;
      } else if (state == lastState && input.next == greaterThan$1) {
        if (i > matchedLen) input.acceptToken(textToken2, -matchedLen);
        else input.acceptToken(endToken, -(matchedLen - 2));
        break;
      } else if ((input.next == 10 || input.next == 13) && i) {
        input.acceptToken(textToken2, 1);
        break;
      } else {
        state = matchedLen = 0;
      }
      input.advance();
    }
  });
}
var scriptTokens2 = /* @__PURE__ */ contentTokenizer2("script", scriptText2, StartCloseScriptTag2);
var styleTokens2 = /* @__PURE__ */ contentTokenizer2("style", styleText3, StartCloseStyleTag2);
var textareaTokens2 = /* @__PURE__ */ contentTokenizer2(
  "textarea",
  textareaText2,
  StartCloseTextareaTag2
);
var space9 = [
  9,
  10,
  11,
  12,
  13,
  32,
  133,
  160,
  5760,
  8192,
  8193,
  8194,
  8195,
  8196,
  8197,
  8198,
  8199,
  8200,
  8201,
  8202,
  8232,
  8233,
  8239,
  8287,
  12288
];
var parenOpen2 = 40;
var parenClose = 41;
var squareOpen = 91;
var squareClose = 93;
var curlyOpen = 123;
var curlyClose = 125;
var comma2 = 44;
var colon5 = 58;
var hash5 = 35;
var at = 64;
var slash5 = 47;
var greaterThan2 = 62;
var dash4 = 45;
var quoteDouble = 34;
var quoteSingle = 39;
var backslash3 = 92;
var newline7 = 10;
var asterisk3 = 42;
var tick = 96;
var prefixes = [colon5, hash5, at, slash5];
var commentContent3 = /* @__PURE__ */ new ExternalTokenizer((input) => {
  for (let dashes = 0, i = 0; ; i++) {
    if (input.next < 0) {
      if (i)
        input.acceptToken(commentContent$13);
      break;
    }
    if (input.next == dash4) {
      dashes++;
    } else if (input.next == greaterThan2 && dashes >= 2) {
      if (i > 3)
        input.acceptToken(commentContent$13, -2);
      break;
    } else {
      dashes = 0;
    }
    input.advance();
  }
});
function createStringHandler(input) {
  let inString4 = false;
  let inStringType = null;
  let inStringIgnoreNext = false;
  return () => {
    if (inString4) {
      if (inStringIgnoreNext) {
        inStringIgnoreNext = false;
        return true;
      }
      if (input.next === backslash3) {
        inStringIgnoreNext = true;
        return true;
      }
      if (inStringType === "double" && input.next === quoteDouble) {
        inString4 = false;
        inStringType = null;
        return true;
      }
      if (inStringType === "single" && input.next === quoteSingle) {
        inString4 = false;
        inStringType = null;
        return true;
      }
      if (inStringType === "template" && input.next === tick) {
        inString4 = false;
        inStringType = null;
        return true;
      }
      return true;
    }
    if (input.next === quoteDouble) {
      inString4 = true;
      inStringType = "double";
      return true;
    }
    if (input.next === quoteSingle) {
      inString4 = true;
      inStringType = "single";
      return true;
    }
    if (input.next === tick) {
      inString4 = true;
      inStringType = "template";
      return true;
    }
    return false;
  };
}
function createCommentHandler(input) {
  let inLineComment = false;
  let inBlockComment = false;
  return () => {
    if (inLineComment) {
      if (input.next === newline7) {
        inLineComment = false;
        return true;
      }
      return true;
    }
    if (inBlockComment) {
      if (input.next === asterisk3 && input.peek(1) === slash5) {
        inBlockComment = false;
        return true;
      }
      return true;
    }
    if (input.next === slash5 && input.peek(1) === slash5) {
      inLineComment = true;
      return true;
    }
    if (input.next === slash5 && input.peek(1) === asterisk3) {
      inBlockComment = true;
      return true;
    }
    return false;
  };
}
var longExpression = /* @__PURE__ */ new ExternalTokenizer((input) => {
  if (prefixes.includes(input.next)) {
    return;
  }
  const commentHandler = createCommentHandler(input);
  const stringHandler = createStringHandler(input);
  let stack = [];
  const popIfMatch = (match2) => {
    const idx = stack.lastIndexOf(match2);
    if (idx !== -1) {
      while (stack.length > idx) {
        stack.pop();
      }
    }
  };
  for (let pos = 0; ; pos++) {
    if (input.next < 0) {
      if (pos > 0)
        input.acceptToken(LongExpression);
      break;
    }
    if (commentHandler() || stringHandler()) {
      input.advance();
      continue;
    }
    if (stack.length === 0 && (input.next === curlyClose || input.next === parenClose || input.next === squareClose)) {
      input.acceptToken(LongExpression);
      break;
    }
    switch (input.next) {
      case parenOpen2:
        stack.push("(");
        break;
      case parenClose:
        popIfMatch("(");
        break;
      case squareOpen:
        stack.push("[");
        break;
      case squareClose:
        popIfMatch("[");
        break;
      case curlyOpen:
        stack.push("{");
        break;
      case curlyClose:
        popIfMatch("{");
        break;
    }
    input.advance();
  }
});
var shortExpression = /* @__PURE__ */ new ExternalTokenizer((input) => {
  if (prefixes.includes(input.peek(0))) {
    return;
  }
  const commentHandler = createCommentHandler(input);
  const stringHandler = createStringHandler(input);
  let stack = [];
  const popIfMatch = (match2) => {
    const idx = stack.lastIndexOf(match2);
    if (idx !== -1) {
      while (stack.length > idx) {
        stack.pop();
      }
    }
  };
  for (let pos = 0; ; pos++) {
    if (input.next < 0) {
      if (pos > 0)
        input.acceptToken(ShortExpression);
      break;
    }
    if (commentHandler() || stringHandler()) {
      input.advance();
      continue;
    }
    if (stack.length === 0 && (input.next === curlyClose || input.next === parenClose || input.next === squareClose || input.next === comma2)) {
      input.acceptToken(ShortExpression);
      break;
    }
    switch (input.next) {
      case parenOpen2:
        stack.push("(");
        break;
      case parenClose:
        popIfMatch("(");
        break;
      case squareOpen:
        stack.push("[");
        break;
      case squareClose:
        popIfMatch("[");
        break;
      case curlyOpen:
        stack.push("{");
        break;
      case curlyClose:
        popIfMatch("{");
        break;
    }
    if (pos !== 0 && stack.length === 0 && space9.includes(input.next)) {
      input.acceptToken(ShortExpression);
      break;
    }
    input.advance();
  }
});
var svelteHighlighting = /* @__PURE__ */ styleTags({
  "Text RawText": tags.content,
  "StartTag StartCloseTag SelfClosingEndTag EndTag": tags.angleBracket,
  "TagName": tags.tagName,
  "MismatchedCloseTag/TagName": [tags.tagName, tags.invalid],
  "AttributeName": tags.attributeName,
  "UnquotedAttributeValue": tags.attributeValue,
  "DoubleQuote SingleQuote AttributeValueContent": tags.attributeValue,
  "Is": tags.definitionOperator,
  "EntityReference CharacterReference": tags.character,
  "Comment": tags.blockComment,
  "ProcessingInst": tags.processingInstruction,
  "DoctypeDecl": tags.documentMeta,
  "{ }": tags.bracket,
  "[ ]": tags.squareBracket,
  "( )": tags.paren,
  "| , :": tags.punctuation,
  "...": tags.derefOperator,
  "ComponentName": tags.className,
  "SvelteElementNamespace": tags.namespace,
  "SvelteElementType": tags.tagName,
  "StyleAttributeName": tags.propertyName,
  "BlockType": tags.controlKeyword,
  "BlockPrefix": tags.typeOperator,
  "UnknownBlock/BlockType": tags.invalid,
  "UnknownBlockContent": tags.invalid,
  "if then catch": tags.controlKeyword,
  "as": tags.definitionOperator,
  "Variable": tags.variableName,
  "Modifier": tags.modifier,
  "DirectlyInterpolatedAttributeValue": tags.attributeValue,
  "DirectiveOn/DirectiveName": tags.controlKeyword,
  "DirectiveOn/DirectiveTarget": tags.typeName,
  "DirectiveUse/DirectiveName": tags.controlKeyword,
  "DirectiveUse/DirectiveTarget": /* @__PURE__ */ tags.function(tags.variableName),
  "DirectiveBind/DirectiveName": tags.controlKeyword,
  "DirectiveBind/DirectiveTarget": tags.variableName,
  "DirectiveLet/DirectiveName": tags.definitionKeyword,
  "DirectiveLet/DirectiveTarget": /* @__PURE__ */ tags.definition(tags.variableName),
  "DirectiveTransition/DirectiveName": tags.operatorKeyword,
  "DirectiveTransition/DirectiveTarget": /* @__PURE__ */ tags.function(tags.variableName),
  "DirectiveIn/DirectiveName": tags.operatorKeyword,
  "DirectiveIn/DirectiveTarget": /* @__PURE__ */ tags.function(tags.variableName),
  "DirectiveOut/DirectiveName": tags.operatorKeyword,
  "DirectiveOut/DirectiveTarget": /* @__PURE__ */ tags.function(tags.variableName),
  "DirectiveAnimate/DirectiveName": tags.operatorKeyword,
  "DirectiveAnimate/DirectiveTarget": /* @__PURE__ */ tags.function(tags.variableName),
  "DirectiveClass/DirectiveName": tags.attributeName,
  "DirectiveClass/DirectiveTarget": tags.variableName,
  "DirectiveStyle/DirectiveName": tags.attributeName,
  "DirectiveStyle/DirectiveTarget": tags.propertyName
});
var spec_BlockPrefix = { __proto__: null, "#": 41, ":": 51, "/": 59, "@": 109 };
var spec_BlockType = { __proto__: null, if: 44, else: 52, each: 64, await: 82, then: 90, catch: 94, key: 102, html: 110, debug: 114, const: 118 };
var spec_identifier12 = { __proto__: null, if: 54, as: 66, then: 84, catch: 86 };
var spec_AttributeName = { __proto__: null, on: 313, bind: 317, let: 319, class: 321, style: 323, use: 325, transition: 327, in: 329, out: 331, animate: 333 };
var spec_TagName2 = { __proto__: null, svelte: 243 };
var parser25 = /* @__PURE__ */ LRParser.deserialize({
  version: 14,
  states: "DxQVO#|OOO!ZO#|O'#ClO#[O#|O'#CzO$]O#|O'#DTO%^O#|O'#D_O&_Q'[O'#DjO&mQ&jO'#DrO&rQ&jO'#EpO&wQ&jO'#EsO&|Q&jO'#EvO'XQ&jO'#E|O'^OXO'#DqO'iOYO'#DqO'tO[O'#DqO)TO#|O'#DqOOOW'#Dq'#DqO)[O&zO'#FOO&|Q&jO'#FQO&|Q&jO'#FROOOW'#Fj'#FjOOOW'#FT'#FTQVO#|OOOOOW'#FU'#FUO!ZO#|O,59WOOOW,59W,59WO)uQ'[O'#DjO#[O#|O,59fOOOW,59f,59fO)|Q'[O'#DjOOOW'#FV'#FVO$]O#|O,59oOOOW,59o,59oO*fQ'[O'#DjOOOW'#FW'#FWO%^O#|O,59yOOOW,59y,59yO*mQ'[O'#DjO+OQ&jO,5:UO+TQ,UO,5:VO+YQ,UO,59XO+hQ,UO,59}O,nQ7[O,5:^O,uQ7[O,5;[O,|Q7[O,5;_O-TO,UO'#ExOOQO'#F|'#F|O-YQ7[O,5;bO-dQ7[O,5;hOOOX'#F^'#F^O-kOXO'#EnO-vOXO,5:]OOOY'#F_'#F_O.OOYO'#EqO.ZOYO,5:]OOO['#F`'#F`O.cO[O'#EtO.nO[O,5:]O.vO#|O,5:]O&|Q&jO'#E{OOOW,5:],5:]OOO`'#Fa'#FaO.}O&zO,5;jOOOW,5;j,5;jO/VQ,UO,5;lO/[Q,UO,5;mOOOW-E9R-E9ROOOW-E9S-E9SOOOW1G.r1G.rO/aQ,UO,59`O/fQ,UO,59dOOOW1G/Q1G/QO/kQ,UO,59nOOOW-E9T-E9TOOOW1G/Z1G/ZO/pQ,UO,59tO/xQ,UO,59xOOOW-E9U-E9UOOOW1G/e1G/eO/}Q,UO,59|OOOW1G/p1G/pO0SQMhO1G/qO0[Q'[O1G.sO0aQ'|O1G/RO0fQ'|O1G/[O0kQ'[O1G/fO0pQ'[O1G/iO0uQ!LQO1G/lO0zQ'[O1G/nO1PQ$ISO'#DtOOOO'#Dz'#DzO1[O,UO'#DyOOOO'#EO'#EOO1aO,UO'#D}OOOO'#EQ'#EQO1fO,UO'#EPOOOO'#ES'#ESO1kO,UO'#EROOOO'#EU'#EUO1pO,UO'#ETOOOO'#EW'#EWO1uO,UO'#EVOOOO'#EY'#EYO1zO,UO'#EXOOOO'#E['#E[O2PO,UO'#EZOOOO'#E^'#E^O2UO,UO'#E]OOOO'#E`'#E`O2ZO,UO'#E_O2`Q7[O'#DxO3gQ7[O'#EjO4kQ7[O'#ElOOQO'#Fl'#FlOOQO'#FY'#FYO5rQ7[O1G/xOOOX1G/x1G/xOOQO'#Fm'#FmO5yQ7[O1G0vOOOY1G0v1G0vO6QQ7[O1G0yOOO[1G0y1G0yO6XO(CWO,5;dO6^Q7[O1G0|OOOW1G0|1G0|OOOW1G1S1G1SO6hQ7[O1G1SOOOX-E9[-E9[O6oQ&jO'#EoOOOW1G/w1G/wOOOY-E9]-E9]O6tQ&jO'#ErOOO[-E9^-E9^O6yQ&jO'#EuO7OQ,UO,5;gOOO`-E9_-E9_OOOW1G1U1G1UOOOW1G1W1G1WOOOW1G1X1G1XP)dQ'[O'#DjO7TQ$ISO1G.zO7]Q&jO1G/OO7bQ&jO1G/YP*TQ'[O'#DjO7gQ!LQO1G/`O7oQ!LQO1G/bO7wQ&jO1G/dO7|Q&jO1G/hOOOW7+%]7+%]O8RQ&jO7+%]O8WQ&jO7+$_O8]Q$ISO7+$mO8bQ$ISO7+$vO8mQ&jO7+%QO8rQ&jO7+%TO8wQ&jO7+%WO9PQ&jO7+%YOOQO'#Du'#DuOOQO,5:`,5:`O9UQ&jO,5:`O9ZQ'[O,5:bO9`O07`O,5:eO9eO07`O,5:iO9jO07`O,5:kO9oO07`O,5:mO9tO07`O,5:oO9yO07`O,5:qO:OO07`O,5:sO:TO07`O,5:uO:YO07`O,5:wO:_O07`O,5:yO:dQ?MpO'#FZO:iQ7[O,5:dO;pQ!0LbO,5:dO<OQ!0LbO,5;UO<^Q7[O,5;WO=eQ!0LbO,5;WOOQO-E9W-E9WOOOX7+%d7+%dOOOY7+&b7+&bOOO[7+&e7+&eOOQO1G1O1G1OOOOW7+&h7+&hOOOW7+&n7+&nO=sQ,UO,5;ZO=xQ,UO,5;^O=}Q,UO,5;aOOOW1G1R1G1ROOOW7+$f7+$fO>SQ'[O7+$fOOOW7+$j7+$jOOOW7+$t7+$tOOOW7+$z7+$zO>XQ&jO7+$zOOOW7+$|7+$|O>^Q&jO7+$|OOOW7+%O7+%OOOOW7+%S7+%SOOOW<<Hw<<HwOOOW<<Gy<<GyO>cQ'|O<<HXOOOW<<Hb<<HbO>hQ'|O<<HbOOOW<<Hl<<HlOOOW<<Ho<<HoO>mQ!LQO'#FXO>rQ&jO<<HrOOOW<<Hr<<HrOOOW<<Ht<<HtOOQO1G/z1G/zO>zQ&jO1G/|OOQO1G0P1G0POOQO1G0T1G0TOOQO1G0V1G0VOOQO1G0X1G0XOOQO1G0Z1G0ZOOQO1G0]1G0]OOQO1G0_1G0_OOQO1G0a1G0aOOQO1G0c1G0cOOQO1G0e1G0eOOQO,5;u,5;uOOQO-E9X-E9XO?PQ!0LbO1G0OO?_Q'[O'#DjOOQO'#Ed'#EdO?uO#@ItO'#EdO@_O&2DjO'#EdOOQO1G0O1G0OOOQO1G0p1G0pO@fQ!0LbO1G0rOOQO1G0r1G0rOOOW1G0u1G0uOOOW1G0x1G0xOOOW1G0{1G0{O@tQ&jO<<HQOOOW<<Hf<<HfOOOW<<Hh<<HhO@yQ&jOAN=sOAUQ&jOAN=|OOQO,5;s,5;sOOQO-E9V-E9VOOOWAN>^AN>^OOQO7+%h7+%hOOQO7+%j7+%jOOOO'#Fz'#FzOOOO'#F['#F[OAZO#@ItO'#EfOOQO,5;O,5;OOAbO&jO,5;OOOOO'#F]'#F]OAgO&2DjO'#EhOAnO&jO,5;OOOQO7+&^7+&^OOOWAN=lAN=lOOOWG23_G23_OAsQ'[OG23_OAxQ!LQOG23_OOOWG23hG23hOOOO-E9Y-E9YOOQO1G0j1G0jOOOO-E9Z-E9ZOBTQ&jOLD(yOOOWLD(yLD(yOBYQ'[OLD(yOB_Q&jOLD(yOBgQ&jO!$'LeOBlQ&jO!$'LeOOOW!$'Le!$'LeOBqQ'[O!$'LeOOOW!)9BP!)9BPOBvQ&jO!)9BPOB{Q&jO!)9BPOOOW!.K7k!.K7kOCQQ&jO!.K7kOOOW!4/-V!4/-V",
  stateData: "Cd~O$]OS~OSXOTUOUVOVWOWYOYbOZaO[cObTO!acO!bcO!ccO!dcO#scO#vdO$q`O~OSXOTUOUVOVWOWYOYbOZaO[cObiO!acO!bcO!ccO!dcO#scO$q`O~OSXOTUOUVOVWOWYOYbOZaO[cOblO!acO!bcO!ccO!dcO#scO$q`O~OSXOTUOUVOVWOWYOYbOZaO[cObpO!acO!bcO!ccO!dcO#scO$q`O~OSXOTUOUVOVWOWYOYbOZaO[cObtO!acO!bcO!ccO!dcO#scO$q`O~O]uOcvOdwO!WxO~O!gyO~O!gzO~O!g{O~O!g}O#k}O#m|O~O!g!PO~O$V!QOP#bP$Y#bP~O$W!TOQ#eP$Y#eP~O$X!WOR#hP$Y#hP~OSXOTUOUVOVWOWYOX![OYbOZaO[cObTO!acO!bcO!ccO!dcO#scO$q`O~O$Y!]O~P(PO$Z!^O$r!`O~O]uOcvOdwOi!fO!WxO~Om!gO~P)dOm!iO~P)dO]uOcvOdwOi!lO!WxO~Om!mO~P*TO]uOcvOdwOm!pO!WxO~Og!qO~Oe!rO~Of!sOp!tOy!uO!T!vO~O!X!wO!Z!xO!]!yO~Ob!zO!o#cO#_#bO$b!{O$d!}O$e#PO$f#RO$g#TO$h#VO$i#XO$j#ZO$k#]O$l#_O~O#a#gO~P+sO#a#jO~P+sO#a#lO~P+sO$c#mO~O#a#oO#q#pO~P+sO#a#pO~P+sO$V!QOP#bX$Y#bX~OP#sO$Y#tO~O$W!TOQ#eX$Y#eX~OQ#vO$Y#tO~O$X!WOR#hX$Y#hX~OR#xO$Y#tO~O$Y#tO~P(PO$Z!^O$r#{O~O#a#|O~O#a#}O~Oj$PO~Of$QO~Op$RO~O}$TO!P$UO~Oy$VO~O!T$WO~Og$XO!`$YO~O]$ZO~O^$[O~O^$]O~O]$^O~O]$_O~Ou$`O~O]$aO~Og$cO!k$eO$_$bO~O$c$fO~O$c$gO~O$c$hO~O$c$iO~O$c$jO~O$c$kO~O$c$lO~O$c$mO~O$c$nO~O$c$oO~O#T$pO#V$rOb!lX!o!lX#_!lX#a!lX$b!lX$d!lX$e!lX$f!lX$g!lX$h!lX$i!lX$j!lX$k!lX$l!lX#q!lX~O#V$sOb#^X!o#^X#_#^X#a#^X$b#^X$d#^X$e#^X$f#^X$g#^X$h#^X$i#^X$j#^X$k#^X$l#^X#q#^X~O#T$pO#V$uOb#`X!o#`X#_#`X#a#`X$b#`X$d#`X$e#`X$f#`X$g#`X$h#`X$i#`X$j#`X$k#`X$l#`X#q#`X~O#a$wO~P+sO#a$xO~P+sO#a$yO~P+sO#n$zO~O#a${O#q$|O~P+sO#a$|O~P+sO!g$}O~O!g%OO~O!g%PO~O#a%QO~Og%ROk%SO~Og%TO~Og%UO~Og%VOu%WO~Og%XOu%YO~Og%ZO~Og%[O~Og%]O~Og%^O~Oq%_O~Og%`Oz%aO{%aO~Og%bO~Og%cO~Og%fOt%dO~Og%gO~Og%hO~O]%iO~O!p%jO~O!p%kO~O!p%lO~O!p%mO~O!p%nO~O!p%oO~O!p%pO~O!p%qO~O!p%rO~O!p%sO~O#U%tO~O#T$pO#V%vOb!la!o!la#_!la#a!la$b!la$d!la$e!la$f!la$g!la$h!la$i!la$j!la$k!la$l!la#q!la~Ob%wO#X%yO#Z%zO#]%{O~Ob%wO#X%yO#Z%zO#]%|O~O#T$pO#V%}Ob#`a!o#`a#_#`a#a#`a$b#`a$d#`a$e#`a$f#`a$g#`a$h#`a$i#`a$j#`a$k#`a$l#`a#q#`a~Ob%wO#X%yO#Z%zO#]&OO~O#a&PO~O#a&QO~O#a&RO~O]&SO~Og&TO~Og&UO~O^&VO~O^&WO~Ou&XO~Og&ZOt%dO~Og&[O~Ob%wO#X%yO#Z%zO#]&]O~O]uO~Ob%wO!b&^O!c&^O!d&^O$m&_O~O#X&aO~P?dOb%wO!b&^O!c&^O!d&^O$o&cO~O#Z&aO~P?|Ob%wO#X%yO#Z%zO#]&fO~Og&gO~Og&hOr&iOt&jO~Og&kO~O#X#YX~P?dO#X&mO~O#Z#[X~P?|O#Z&mO~O]&oO~Og&pOr&qOu&rO~Os&sO~O]&tO~Og&uOr&vO~Og&wO~Os&xO~O]&yO~Og&zO~Os&{O~Og&|O~O!`$]#q$q#s#v!c!b#_!o!d#a~",
  goto: "1T$qPPPPPPPPPPPPPPPP$r%QPPPPPP%`PPP%fP$r%lPPPPPP%z$r&QPPP&`P&`P&d$r&jP&x$rPP$rP$rP'O$rPPPPP$r'kP'y(V'yP'y(Y(fPP(Y(r(Y)O(Y)[(Y)h(Y)t(Y*Q(Y*^(Y*j(Y*vPPP+SP+cP+fP'yP'yP+i+l+o+},Q,T,c,f,iP,wPP,}-TP$rP$r$rP-c-i-s-y.T.Z.q.{/R/X/_/e/kPPPPPPPP/qP0V0cPPPPPPPPPPPP0oP0wicOPQRS^egjnr!ZiPOPQRS^egjnr!ZXfPQgjQhPR!egiQOPQRS^egjnr!ZQkQR!hjiROPQRS^egjnr!ZTmRnQoRR!kniSOPQRS^egjnr!ZQsSR!orhcOPQRS^egjnr!ZY%x$r$s$u%v%}X&^%y%z&`&diZOPQRS^egjnr!Ze#dyz{!O!P#f#i#k#n#qR$d!ze#hyz{!O!P#f#i#k#n#qe!|yz{!O!P#f#i#k#n#qe#Oyz{!O!P#f#i#k#n#qe#Qyz{!O!P#f#i#k#n#qe#Syz{!O!P#f#i#k#n#qe#Uyz{!O!P#f#i#k#n#qe#Wyz{!O!P#f#i#k#n#qe#Yyz{!O!P#f#i#k#n#qe#[yz{!O!P#f#i#k#n#qe#^yz{!O!P#f#i#k#n#qe#`yz{!O!P#f#i#k#n#qQ%{$rQ%|$sQ&O$uQ&]%vR&f%}R&b%yR&e%zR!SZR#t!Si[OPQRS^egjnr!ZR!V[R#t!Vi]OPQRS^egjnr!ZR!Y]R#t!Yi^OPQRS^egjnr!ZX}Xab![Q!]^R#t!Zi_OPQRS^egjnr!ZQeOR!ceQgPQjQT!dgjQnRR!jnQrSQ!Z^T!nr!ZQ%e$`R&Y%eQ#fyQ#izQ#k{Q#n!OQ#q!PZ$v#f#i#k#n#qQ$q#aQ$t#cT%u$q$tQ&`%yR&l&`Q&d%zR&n&dQ!RZR#r!RQ!U[R#u!UQ!X]R#w!XQ!_`R#z!_SdOeWfPQgjSmRnXqS^r!Ze#eyz{!O!P#f#i#k#n#qe#ayz{!O!P#f#i#k#n#qS&_%y&`T&c%z&dQ!OXQ!aaQ!bbR#y![",
  nodeNames: "\u26A0 StartCloseTag StartCloseTag StartCloseTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag LongExpression ShortExpression Document IfBlock IfBlockOpen { BlockPrefix BlockPrefix BlockType BlockType } ElseBlock BlockPrefix BlockType if IfBlockClose BlockPrefix EachBlock EachBlockOpen BlockType as ( ) , Variable EachBlockClose AwaitBlock AwaitBlockOpen BlockType then catch ThenBlock BlockType CatchBlock BlockType AwaitBlockClose KeyBlock KeyBlockOpen BlockType KeyBlockClose RawHTMLBlock BlockPrefix BlockType DebugBlock BlockType ConstBlock BlockType Interpolation UnknownBlock UnknownBlockContent Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName DirectlyInterpolatedAttribute DirectlyInterpolatedAttributeValue SpreadInterpolatedAttribute ... Directive DirectiveOn DirectiveName AttributeName DirectiveTarget DirectiveBind DirectiveName DirectiveLet DirectiveName DirectiveClass DirectiveName DirectiveStyle DirectiveName DirectiveUse DirectiveName DirectiveTransition DirectiveName DirectiveIn DirectiveName DirectiveOut DirectiveName DirectiveAnimate DirectiveName | Modifier Is AttributeValue DoubleQuote AttributeValueContent SingleQuote AttributeValueContent UnquotedAttributeValue StyleAttribute StyleAttributeName Attribute EndTag ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag ComponentName SvelteElementName SvelteElementNamespace SvelteElementType CloseTag SelfClosingTag SelfClosingEndTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
  maxTerm: 172,
  context: elementContext3,
  nodeProps: [
    ["closedBy", -10, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, "EndTag", 4, "EndTag SelfClosingEndTag", 17, "IfBlockClose", 18, "}", 31, "EachBlockClose", 34, "(", 40, "AwaitBlockClose", 48, "AwaitBlockOpen", 50, "KeyBlockClose", -4, 68, 112, 115, 118, "CloseTag", 101, '"', 103, "'"],
    ["group", -10, 12, 60, 64, 65, 66, 67, 126, 127, 128, 129, "Entity", -4, 16, 30, 39, 49, "Block Entity", -4, 17, 31, 40, 50, "BlockOpen", -3, 24, 44, 46, "BlockInline", -4, 28, 38, 48, 52, "BlockClose", -4, 53, 56, 58, 61, "BlockInline Entity", 63, "Entity TextContent", -3, 110, 113, 116, "TextContent Entity"],
    ["openedBy", 23, "{", 28, "IfBlockOpen", 35, ")", 38, "EachBlockOpen", 52, "KeyBlockOpen", 101, '"', 103, "'", 109, "StartTag StartCloseTag", -4, 111, 114, 117, 123, "OpenTag", 125, "StartTag"]
  ],
  propSources: [svelteHighlighting],
  skippedNodes: [0],
  repeatNodeCount: 13,
  tokenData: "&8h$IRR!dOX%aXY/TYZ/TZ[%a[]1{]^/T^p%apq/Tqr2yrsEastF_tuHxuv2yvw!)[wx#,nxy#-lyz#0Vz|2y|}#2p}!O#5Z!O!P#Kk!P!Q$%S!Q![2y![!]$'{!]!^2y!^!_$)u!_!`%'{!`!a%({!a!b2y!b!cF_!c!}%){!}#R2y#R#S%AU#S#T&%m#T#o&'m#o#p&1P#p#q&1d#q#r&3[#r#s2y#s$f%a$f$g2y$g%WHx%W%o%AU%o%pHx%p&a%AU&a&bHx&b1p%AU1p4UHx4U4d%AU4d4eHx4e$IS%AU$IS$I`Hx$I`$Ib%AU$Ib$KhHx$Kh%#t%AU%#t&/xHx&/x&Et%AU&Et&FVHx&FV;'S%AU;'S;:j&5p;:j;=`&5v<%l?&rHx?&r?Ah%AU?Ah?BY&5|?BY?Mn%AU?MnO&5|$3X%ng!aP#]7[$mMh$o!LQ!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wsv'Vvw*}wx(wx!^'V!^!_)q!_!a(w!a#S'V#S#T(w#T#o'V#o#p*}#p#q'V#q#r-b#r;'S'V;'S;=`.}<%lO'V7m'`g!aP#]7[!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wsv'Vvw*}wx(wx!^'V!^!_)q!_!a(w!a#S'V#S#T(w#T#o'V#o#p*}#p#q'V#q#r-b#r;'S'V;'S;=`.}<%lO'Va)OZ!aP!``Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w`)vS!``O#q)q#r;'S)q;'S;=`*S<%lO)q`*VP;=`<%l)qP*_U!aPOv*Yw!^*Y!_#o*Y#p;'S*Y;'S;=`*q<%lO*YP*tP;=`<%l*Ya*zP;=`<%l(w7l+Uc#]7[!``OX*}XZ)qZ[*}[^)q^p*}pq)qqr*}rs)qsw*}wx)qx!^*}!^!a)q!a#S*}#S#T)q#T#q*}#q#r,a#r;'S*};'S;=`-[<%lO*}7[,fY#]7[OX,aZ[,a^p,aqr,asw,ax!^,a!a#S,a#T;'S,a;'S;=`-U<%lO,a7[-XP;=`<%l,a7l-_P;=`<%l*}7]-id!aP#]7[OX-bXZ*YZ[-b[^*Y^p-bpq*Yqr-brs*Ysv-bvw,awx*Yx!^-b!_!a*Y!a#S-b#S#T*Y#T#o-b#o#p,a#p;'S-b;'S;=`.w<%lO-b7].zP;=`<%l-b7m/QP;=`<%l'V$@q/bb!aP$mMh$o!LQ!``$]EUOX(wXY0jYZ0jZ](w]^0j^p(wpq0jqv(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(wEV0sb!aP!``$]EUOX(wXY0jYZ0jZ](w]^0j^p(wpq0jqv(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w#J{2WZ!aP$mMh$o!LQ!``Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w$DR3^p!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'VHg5qp!p&j#U,U!aP#]7[!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'VHf8Sn!p&j#U,U#]7[!``!oWOX*}XZ)qZ[*}[^)q^p*}pq)qqr7urs)qsw7uwx)qx!P7u!P!Q*}!Q![7u![!]*}!]!^7u!^!_:Q!_!a)q!a#S7u#S#T:Q#T#o7u#o#q*}#q#r<y#r#s7u#s$f*}$f;'S7u;'S;=`>s<%l?Ah7u?Ah?BY*}?BY?Mn7u?MnO*}2Y:]f!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q1x;zZ!p&j#U,U!oWqr;qsw;qx!P;q!Q![;q!]!_;q!a#o;q#q#s;q$f;'S;q;'S;=`<m<%l?Ah;q?BY?Mn;q1x<pP;=`<%l;q2Y<vP;=`<%l:QHU=Ug!p&j#U,U#]7[!oWOX,aZ[,a^p,aqr<ysw<yx!P<y!P!Q,a!Q![<y![!],a!]!^<y!^!_;q!a#S<y#S#T;q#T#o<y#o#q,a#q#s<y#s$f,a$f;'S<y;'S;=`>m<%l?Ah<y?Ah?BY,a?BY?Mn<y?MnO,aHU>pP;=`<%l<yHf>vP;=`<%l7u2Z?Wi!p&j#U,U!aP!``!oWOq(wqr>yrs(wsv>yvw:Qwx(wx!P>y!P!Q(w!Q![>y![!](w!]!^>y!^!_:Q!_!a(w!a#o>y#o#p)q#p#q(w#q#r@u#r#s>y#s$f(w$f;'S>y;'S;=`Bo<%l?Ah>y?Ah?BY(w?BY?Mn>y?MnO(w1yAQg!p&j#U,U!aP!oWOq*Yqr@urs*Ysv@uvw;qwx*Yx!P@u!P!Q*Y!Q![@u![!]*Y!]!^@u!^!_;q!_!a*Y!a#o@u#p#q*Y#q#s@u#s$f*Y$f;'S@u;'S;=`Bi<%l?Ah@u?Ah?BY*Y?BY?Mn@u?MnO*Y1yBlP;=`<%l@u2ZBrP;=`<%l>yHVCSo!p&j#U,U!aP#]7[!oWOX-bXZ*YZ[-b[^*Y^p-bpq*YqrBurs*YsvBuvw<ywx*Yx!PBu!P!Q-b!Q![Bu![!]-b!]!^Bu!^!_;q!_!a*Y!a#SBu#S#T@u#T#oBu#o#p,a#p#q-b#q#sBu#s$f-b$f;'SBu;'S;=`ET<%l?AhBu?Ah?BY-b?BY?MnBu?MnO-bHVEWP;=`<%lBuHgE^P;=`<%l5b$3ZElZ#X!5v!aP$o!LQ!``Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w$DTFtpcQ!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'V$FZIcweS!p&j#U,U!aP#]7[up$mMh$o!LQ$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx!O5b!O!PN|!P!Q'V!Q![K|![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}K|!}#R5b#R#SK|#S#T>y#T#oK|#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g;'SK|;'S;=`!&h<%l?AhK|?Ah?BY!&n?BY?MnK|?MnO!&nJoLcweS!p&j#U,U!aP#]7[up$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx!O5b!O!PN|!P!Q'V!Q![K|![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}K|!}#R5b#R#SK|#S#T>y#T#oK|#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g;'SK|;'S;=`!&h<%l?AhK|?Ah?BY!&n?BY?MnK|?MnO!&nIX! _w!p&j#U,U!aP#]7[up!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuN|uv5bvw7uwx(wx!O5b!O!PN|!P!Q'V!Q![N|![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}N|!}#R5b#R#SN|#S#T>y#T#oN|#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g;'SN|;'S;=`!#x<%l?AhN|?Ah?BY!$O?BY?MnN|?MnO!$OIX!#{P;=`<%lN|8_!$Zq!aP#]7[up!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wst'Vtu!$Ouv'Vvw*}wx(wx!O'V!O!P!$O!P!Q'V!Q![!$O![!^'V!^!_)q!_!a(w!a!c'V!c!}!$O!}#R'V#R#S!$O#S#T(w#T#o!$O#o#p*}#p#q'V#q#r-b#r$g'V$g;'S!$O;'S;=`!&b<%lO!$O8_!&eP;=`<%l!$OJo!&kP;=`<%lK|9u!&}qeS!aP#]7[up$_!b!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wst'Vtu!&nuv'Vvw*}wx(wx!O'V!O!P!$O!P!Q'V!Q![!&n![!^'V!^!_)q!_!a(w!a!c'V!c!}!&n!}#R'V#R#S!&n#S#T(w#T#o!&n#o#p*}#p#q'V#q#r-b#r$g'V$g;'S!&n;'S;=`!)U<%lO!&n9u!)XP;=`<%l!&n$DR!)ko!p&j#U,U#]7[!``!oW!d#JkOX!+lXZ!-UZ[!+l[^!-U^p!+lpq)qqr!3Qrs!-Ust!B^tw!3Qwx!-Ux!P!3Q!P!Q!+l!Q![!3Q![!]!+l!]!^7u!^!_!7m!_!a!-U!a#S!3Q#S#T!7m#T#o!3Q#o#q!+l#q#r!>U#r#s!3Q#s$f!+l$f;'S!3Q;'S;=`!BW<%l?Ah!3Q?Ah?BY!+l?BY?Mn!3Q?MnO!+l$3X!+se#]7[!``OX!+lXZ!-UZ[!+l[^!-U^p!+lpq)qqr!+lrs!-Ust*}tw!+lwx!-Ux!]!+l!]!^!/[!^!a!-U!a#S!+l#S#T!-U#T#q!+l#q#r!0p#r;'S!+l;'S;=`!2z<%lO!+l#J{!-ZZ!``Op!-Upq)qqs!-Ust)qt!]!-U!]!^!-|!^#q!-U#q#r!.a#r;'S!-U;'S;=`!/U<%lO!-U#J{!.TS!``!b#JkO#q)q#r;'S)q;'S;=`*S<%lO)q#Jk!.dVOp!.aqs!.at!]!.a!]!^!.y!^;'S!.a;'S;=`!/O<%lO!.a#Jk!/OO!b#Jk#Jk!/RP;=`<%l!.a#J{!/XP;=`<%l!-U$3X!/ec#]7[!``!b#JkOX*}XZ)qZ[*}[^)q^p*}pq)qqr*}rs)qsw*}wx)qx!^*}!^!a)q!a#S*}#S#T)q#T#q*}#q#r,a#r;'S*};'S;=`-[<%lO*}$2w!0ub#]7[OX!0pXZ!.aZ[!0p[^!.a^p!0pqr!0prs!.ast,atw!0pwx!.ax!]!0p!]!^!1}!^!a!.a!a#S!0p#S#T!.a#T;'S!0p;'S;=`!2t<%lO!0p$2w!2UY#]7[!b#JkOX,aZ[,a^p,aqr,asw,ax!^,a!a#S,a#T;'S,a;'S;=`-U<%lO,a$2w!2wP;=`<%l!0p$3X!2}P;=`<%l!+l$DR!3_o!p&j#U,U#]7[!``!oWOX!+lXZ!-UZ[!+l[^!-U^p!+lpq)qqr!3Qrs!-Ust7utw!3Qwx!-Ux!P!3Q!P!Q!+l!Q![!3Q![!]!+l!]!^!5`!^!_!7m!_!a!-U!a#S!3Q#S#T!7m#T#o!3Q#o#q!+l#q#r!>U#r#s!3Q#s$f!+l$f;'S!3Q;'S;=`!BW<%l?Ah!3Q?Ah?BY!+l?BY?Mn!3Q?MnO!+l$DR!5on!p&j#U,U#]7[!``!b#Jk!oWOX*}XZ)qZ[*}[^)q^p*}pq)qqr7urs)qsw7uwx)qx!P7u!P!Q*}!Q![7u![!]*}!]!^7u!^!_:Q!_!a)q!a#S7u#S#T:Q#T#o7u#o#q*}#q#r<y#r#s7u#s$f*}$f;'S7u;'S;=`>s<%l?Ah7u?Ah?BY*}?BY?Mn7u?MnO*}$-u!7xi!p&j#U,U!``!oWOp!-Upq)qqr!7mrs!-Ust:Qtw!7mwx!-Ux!P!7m!P!Q!-U!Q![!7m![!]!-U!]!^!9g!^!_!7m!_!a!-U!a#o!7m#o#q!-U#q#r!;Y#r#s!7m#s$f!-U$f;'S!7m;'S;=`!>O<%l?Ah!7m?Ah?BY!-U?BY?Mn!7m?MnO!-U$-u!9tf!p&j#U,U!``!b#Jk!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q$-e!;cg!p&j#U,U!oWOp!.aqr!;Yrs!.ast;qtw!;Ywx!.ax!P!;Y!P!Q!.a!Q![!;Y![!]!.a!]!^!<z!^!_!;Y!_!a!.a!a#o!;Y#o#q!.a#q#s!;Y#s$f!.a$f;'S!;Y;'S;=`!=x<%l?Ah!;Y?Ah?BY!.a?BY?Mn!;Y?MnO!.a$-e!=VZ!p&j#U,U!b#Jk!oWqr;qsw;qx!P;q!Q![;q!]!_;q!a#o;q#q#s;q$f;'S;q;'S;=`<m<%l?Ah;q?BY?Mn;q$-e!={P;=`<%l!;Y$-u!>RP;=`<%l!7m$Cq!>am!p&j#U,U#]7[!oWOX!0pXZ!.aZ[!0p[^!.a^p!0pqr!>Urs!.ast<ytw!>Uwx!.ax!P!>U!P!Q!0p!Q![!>U![!]!0p!]!^!@[!^!_!;Y!_!a!.a!a#S!>U#S#T!;Y#T#o!>U#o#q!0p#q#s!>U#s$f!0p$f;'S!>U;'S;=`!BQ<%l?Ah!>U?Ah?BY!0p?BY?Mn!>U?MnO!0p$Cq!@ig!p&j#U,U#]7[!b#Jk!oWOX,aZ[,a^p,aqr<ysw<yx!P<y!P!Q,a!Q![<y![!],a!]!^<y!^!_;q!a#S<y#S#T;q#T#o<y#o#q,a#q#s<y#s$f,a$f;'S<y;'S;=`>m<%l?Ah<y?Ah?BY,a?BY?Mn<y?MnO,a$Cq!BTP;=`<%l!>U$DR!BZP;=`<%l!3Q$DR!Bkn!p&j#U,U#]7[!``!oWOX!DiXZ!FOZ[!Di[^!FO^p!Dipq)qqr!Knrs!FOsw!Knwx!FOx!P!Kn!P!Q!Di!Q![!Kn![!]!Di!]!^7u!^!_#!W!_!a!FO!a#S!Kn#S#T#!W#T#o!Kn#o#q!Di#q#r#(i#r#s!Kn#s$f!Di$f;'S!Kn;'S;=`#,h<%l?Ah!Kn?Ah?BY!Di?BY?Mn!Kn?MnO!Di$3X!Dpd#]7[!``OX!DiXZ!FOZ[!Di[^!FO^p!Dipq)qqr!Dirs!FOsw!Diwx!FOx!]!Di!]!^!G{!^!a!FO!a#S!Di#S#T!FO#T#q!Di#q#r!Ia#r;'S!Di;'S;=`!Kh<%lO!Di#J{!FTX!``Op!FOpq)qq!]!FO!]!^!Fp!^#q!FO#q#r!GT#r;'S!FO;'S;=`!Gu<%lO!FO#J{!FwS!``!c#JkO#q)q#r;'S)q;'S;=`*S<%lO)q#Jk!GWUOp!GTq!]!GT!]!^!Gj!^;'S!GT;'S;=`!Go<%lO!GT#Jk!GoO!c#Jk#Jk!GrP;=`<%l!GT#J{!GxP;=`<%l!FO$3X!HUc#]7[!``!c#JkOX*}XZ)qZ[*}[^)q^p*}pq)qqr*}rs)qsw*}wx)qx!^*}!^!a)q!a#S*}#S#T)q#T#q*}#q#r,a#r;'S*};'S;=`-[<%lO*}$2w!Ifa#]7[OX!IaXZ!GTZ[!Ia[^!GT^p!Iaqr!Iars!GTsw!Iawx!GTx!]!Ia!]!^!Jk!^!a!GT!a#S!Ia#S#T!GT#T;'S!Ia;'S;=`!Kb<%lO!Ia$2w!JrY#]7[!c#JkOX,aZ[,a^p,aqr,asw,ax!^,a!a#S,a#T;'S,a;'S;=`-U<%lO,a$2w!KeP;=`<%l!Ia$3X!KkP;=`<%l!Di$DR!K{n!p&j#U,U#]7[!``!oWOX!DiXZ!FOZ[!Di[^!FO^p!Dipq)qqr!Knrs!FOsw!Knwx!FOx!P!Kn!P!Q!Di!Q![!Kn![!]!Di!]!^!My!^!_#!W!_!a!FO!a#S!Kn#S#T#!W#T#o!Kn#o#q!Di#q#r#(i#r#s!Kn#s$f!Di$f;'S!Kn;'S;=`#,h<%l?Ah!Kn?Ah?BY!Di?BY?Mn!Kn?MnO!Di$DR!NYn!p&j#U,U#]7[!``!c#Jk!oWOX*}XZ)qZ[*}[^)q^p*}pq)qqr7urs)qsw7uwx)qx!P7u!P!Q*}!Q![7u![!]*}!]!^7u!^!_:Q!_!a)q!a#S7u#S#T:Q#T#o7u#o#q*}#q#r<y#r#s7u#s$f*}$f;'S7u;'S;=`>s<%l?Ah7u?Ah?BY*}?BY?Mn7u?MnO*}$-u#!ch!p&j#U,U!``!oWOp!FOpq)qqr#!Wrs!FOsw#!Wwx!FOx!P#!W!P!Q!FO!Q![#!W![!]!FO!]!^##}!^!_#!W!_!a!FO!a#o#!W#o#q!FO#q#r#%p#r#s#!W#s$f!FO$f;'S#!W;'S;=`#(c<%l?Ah#!W?Ah?BY!FO?BY?Mn#!W?MnO!FO$-u#$[f!p&j#U,U!``!c#Jk!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q$-e#%yf!p&j#U,U!oWOp!GTqr#%prs!GTsw#%pwx!GTx!P#%p!P!Q!GT!Q![#%p![!]!GT!]!^#'_!^!_#%p!_!a!GT!a#o#%p#o#q!GT#q#s#%p#s$f!GT$f;'S#%p;'S;=`#(]<%l?Ah#%p?Ah?BY!GT?BY?Mn#%p?MnO!GT$-e#'jZ!p&j#U,U!c#Jk!oWqr;qsw;qx!P;q!Q![;q!]!_;q!a#o;q#q#s;q$f;'S;q;'S;=`<m<%l?Ah;q?BY?Mn;q$-e#(`P;=`<%l#%p$-u#(fP;=`<%l#!W$Cq#(tl!p&j#U,U#]7[!oWOX!IaXZ!GTZ[!Ia[^!GT^p!Iaqr#(irs!GTsw#(iwx!GTx!P#(i!P!Q!Ia!Q![#(i![!]!Ia!]!^#*l!^!_#%p!_!a!GT!a#S#(i#S#T#%p#T#o#(i#o#q!Ia#q#s#(i#s$f!Ia$f;'S#(i;'S;=`#,b<%l?Ah#(i?Ah?BY!Ia?BY?Mn#(i?MnO!Ia$Cq#*yg!p&j#U,U#]7[!c#Jk!oWOX,aZ[,a^p,aqr<ysw<yx!P<y!P!Q,a!Q![<y![!],a!]!^<y!^!_;q!a#S<y#S#T;q#T#o<y#o#q,a#q#s<y#s$f,a$f;'S<y;'S;=`>m<%l?Ah<y?Ah?BY,a?BY?Mn<y?MnO,a$Cq#,eP;=`<%l#(i$DR#,kP;=`<%l!Kn$3Z#,yZ#Z#4`!aP$mMh!``Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w$Du#.Rprr!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'V$DT#0lpsQ!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'V$DT#3VptQ!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'V$DT#5nr!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx}5b}!O#7x!O!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'VHi#8Xq!p&j#U,U!aP#]7[!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr#:`rs(wsv#:`vw#<uwx(wx!P#:`!P!Q'V!Q![#:`![!]'V!]!^#:`!^!_#?S!_!`(w!`!a#Jo!a#S#:`#S#T#DR#T#o#:`#o#p*}#p#q'V#q#r#HR#r#s#:`#s$f'V$f;'S#:`;'S;=`#Ji<%l?Ah#:`?Ah?BY'V?BY?Mn#:`?MnO'VHg#:qp!p&j#U,U!aP#]7[!``#_W!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr#:`rs(wsv#:`vw#<uwx(wx!P#:`!P!Q'V!Q![#:`![!]'V!]!^#:`!^!_#?S!_!a(w!a#S#:`#S#T#DR#T#o#:`#o#p*}#p#q'V#q#r#HR#r#s#:`#s$f'V$f;'S#:`;'S;=`#Ji<%l?Ah#:`?Ah?BY'V?BY?Mn#:`?MnO'VHf#=Un!p&j#U,U#]7[!``#_W!oWOX*}XZ)qZ[*}[^)q^p*}pq)qqr#<urs)qsw#<uwx)qx!P#<u!P!Q*}!Q![#<u![!]*}!]!^#<u!^!_#?S!_!a)q!a#S#<u#S#T#?S#T#o#<u#o#q*}#q#r#BP#r#s#<u#s$f*}$f;'S#<u;'S;=`#C{<%l?Ah#<u?Ah?BY*}?BY?Mn#<u?MnO*}2Y#?af!p&j#U,U!``#_W!oWOq)qqr#?Srs)qsw#?Swx)qx!P#?S!P!Q)q!Q![#?S![!])q!]!_#?S!_!a)q!a#o#?S#o#q)q#q#r#@u#r#s#?S#s$f)q$f;'S#?S;'S;=`#Ay<%l?Ah#?S?Ah?BY)q?BY?Mn#?S?MnO)q1x#AQZ!p&j#U,U#_W!oWqr#@usw#@ux!P#@u!Q![#@u!]!_#@u!a#o#@u#q#s#@u$f;'S#@u;'S;=`#As<%l?Ah#@u?BY?Mn#@u1x#AvP;=`<%l#@u2Y#A|P;=`<%l#?SHU#B^g!p&j#U,U#]7[#_W!oWOX,aZ[,a^p,aqr#BPsw#BPx!P#BP!P!Q,a!Q![#BP![!],a!]!^#BP!^!_#@u!a#S#BP#S#T#@u#T#o#BP#o#q,a#q#s#BP#s$f,a$f;'S#BP;'S;=`#Cu<%l?Ah#BP?Ah?BY,a?BY?Mn#BP?MnO,aHU#CxP;=`<%l#BPHf#DOP;=`<%l#<u2Z#Dbi!p&j#U,U!aP!``#_W!oWOq(wqr#DRrs(wsv#DRvw#?Swx(wx!P#DR!P!Q(w!Q![#DR![!](w!]!^#DR!^!_#?S!_!a(w!a#o#DR#o#p)q#p#q(w#q#r#FP#r#s#DR#s$f(w$f;'S#DR;'S;=`#G{<%l?Ah#DR?Ah?BY(w?BY?Mn#DR?MnO(w1y#F^g!p&j#U,U!aP#_W!oWOq*Yqr#FPrs*Ysv#FPvw#@uwx*Yx!P#FP!P!Q*Y!Q![#FP![!]*Y!]!^#FP!^!_#@u!_!a*Y!a#o#FP#p#q*Y#q#s#FP#s$f*Y$f;'S#FP;'S;=`#Gu<%l?Ah#FP?Ah?BY*Y?BY?Mn#FP?MnO*Y1y#GxP;=`<%l#FP2Z#HOP;=`<%l#DRHV#Hbo!p&j#U,U!aP#]7[#_W!oWOX-bXZ*YZ[-b[^*Y^p-bpq*Yqr#HRrs*Ysv#HRvw#BPwx*Yx!P#HR!P!Q-b!Q![#HR![!]-b!]!^#HR!^!_#@u!_!a*Y!a#S#HR#S#T#FP#T#o#HR#o#p,a#p#q-b#q#s#HR#s$f-b$f;'S#HR;'S;=`#Jc<%l?Ah#HR?Ah?BY-b?BY?Mn#HR?MnO-bHV#JfP;=`<%l#HRHg#JlP;=`<%l#:`c#JxZ!aP$rQ!``Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w$Ee#LOq!p&j#U,U!aP#]7[$mMh$o!LQ!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!O5b!O!P#NV!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'VIy#Nfq!p&j#U,U!aP#]7[!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!O5b!O!P$!m!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'VIy$#Op!k!b!p&j#U,U!aP#]7[!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx!P5b!P!Q'V!Q![5b![!]'V!]!^5b!^!_:Q!_!a(w!a#S5b#S#T>y#T#o5b#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f;'S5b;'S;=`EZ<%l?Ah5b?Ah?BY'V?BY?Mn5b?MnO'V$3g$%chcQ!aP#]7[$mMh$o!LQ!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wsv'Vvw*}wx(wx!^'V!^!_)q!_!`(w!`!a$&}!a#S'V#S#T(w#T#o'V#o#p*}#p#q'V#q#r-b#r;'S'V;'S;=`.}<%lO'Vm$'YZ!aP!``#qW#a[Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w$3_$(^g$cScQ!aP#]7[$mMh$o!LQ!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wsv'Vvw*}wx(wx!^'V!^!_)q!_!a(w!a#S'V#S#T(w#T#o'V#o#p*}#p#q'V#q#r-b#r;'S'V;'S;=`.}<%lO'V$-u$*Ug!p&j#U,U$mMh$o!LQ!``!oWOq)qqr$+mrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!b$LZ!b#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$+xl!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx}:Q}!O$-p!O!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!f:Q!f!g$1Y!g#W:Q#W#X$Ac#X#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$-{h!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx}:Q}!O$/g!O!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$/tf!p&j#U,U!``$qP!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$1eh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!q:Q!q!r$3P!r#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$3[h!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!e:Q!e!f$4v!f#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$5Rh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!v:Q!v!w$6m!w#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$6xh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!{:Q!{!|$8d!|#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$8oh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!r:Q!r!s$:Z!s#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$:fh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a!g:Q!g!h$<Q!h#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$<]g!p&j#U,U!``!oWOq$=tqr$<Qrs$=tsw$<Qwx$=tx!P$<Q!P!Q$=t!Q![$<Q![!]$=t!]!_$<Q!_!`$=t!`!a$>`!a#o$<Q#o#q$=t#q#r$?h#r#s$<Q#s$f$=t$f;'S$<Q;'S;=`$A]<%l?Ah$<Q?Ah?BY$=t?BY?Mn$<Q?MnO$=ta$=yV!``O!`$=t!`!a$>`!a#q$=t#q#r$>s#r;'S$=t;'S;=`$?b<%lO$=ta$>gS!``#vPO#q)q#r;'S)q;'S;=`*S<%lO)qP$>vTO!`$>s!`!a$?V!a;'S$>s;'S;=`$?[<%lO$>sP$?[O#vPP$?_P;=`<%l$>sa$?eP;=`<%l$=t1y$?qf!p&j#U,U!oWOq$>sqr$?hrs$>ssw$?hwx$>sx!P$?h!P!Q$>s!Q![$?h![!]$>s!]!_$?h!_!`$>s!`!a$?V!a#o$?h#o#q$>s#q#s$?h#s$f$>s$f;'S$?h;'S;=`$AV<%l?Ah$?h?Ah?BY$>s?BY?Mn$?h?MnO$>s1y$AYP;=`<%l$?h2Z$A`P;=`<%l$<Q2Z$Anh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#c:Q#c#d$CY#d#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$Ceh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#V:Q#V#W$EP#W#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$E[h!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#h:Q#h#i$Fv#i#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$GRh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#m:Q#m#n$Hm#n#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$Hxh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#d:Q#d#e$Jd#e#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$Joh!p&j#U,U!``!oWOq)qqr:Qrs)qsw:Qwx)qx!P:Q!P!Q)q!Q![:Q![!])q!]!_:Q!_!a)q!a#X:Q#X#Y$<Q#Y#o:Q#o#q)q#q#r;q#r#s:Q#s$f)q$f;'S:Q;'S;=`<s<%l?Ah:Q?Ah?BY)q?BY?Mn:Q?MnO)q2Z$Lfg!p&j#U,U!``!oWOq$M}qr$LZrs$M}sw$LZwx$M}x!P$LZ!P!Q$M}!Q![$LZ![!]$M}!]!_$LZ!_!a$M}!a!b%!o!b#o$LZ#o#q$M}#q#r%$c#r#s$LZ#s$f$M}$f;'S$LZ;'S;=`%'u<%l?Ah$LZ?Ah?BY$M}?BY?Mn$LZ?MnO$M}a$NSV!``O!a$M}!a!b$Ni!b#q$M}#q#r% h#r;'S$M};'S;=`%!i<%lO$M}a$NnV!``O!`$M}!`!a% T!a#q$M}#q#r% h#r;'S$M};'S;=`%!i<%lO$M}a% [S!``#sPO#q)q#r;'S)q;'S;=`*S<%lO)qP% kTO!a% h!a!b% z!b;'S% h;'S;=`%!c<%lO% hP% }TO!`% h!`!a%!^!a;'S% h;'S;=`%!c<%lO% hP%!cO#sPP%!fP;=`<%l% ha%!lP;=`<%l$M}2Z%!zg!p&j#U,U!``!oWOq$M}qr$LZrs$M}sw$LZwx$M}x!P$LZ!P!Q$M}!Q![$LZ![!]$M}!]!_$LZ!_!`$M}!`!a% T!a#o$LZ#o#q$M}#q#r%$c#r#s$LZ#s$f$M}$f;'S$LZ;'S;=`%'u<%l?Ah$LZ?Ah?BY$M}?BY?Mn$LZ?MnO$M}1y%$lf!p&j#U,U!oWOq% hqr%$crs% hsw%$cwx% hx!P%$c!P!Q% h!Q![%$c![!]% h!]!_%$c!_!a% h!a!b%&Q!b#o%$c#o#q% h#q#s%$c#s$f% h$f;'S%$c;'S;=`%'o<%l?Ah%$c?Ah?BY% h?BY?Mn%$c?MnO% h1y%&Zf!p&j#U,U!oWOq% hqr%$crs% hsw%$cwx% hx!P%$c!P!Q% h!Q![%$c![!]% h!]!_%$c!_!`% h!`!a%!^!a#o%$c#o#q% h#q#s%$c#s$f% h$f;'S%$c;'S;=`%'o<%l?Ah%$c?Ah?BY% h?BY?Mn%$c?MnO% h1y%'rP;=`<%l%$c2Z%'xP;=`<%l$LZ#KT%(YZ#VW!aP$mMh$o!LQ!``Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w#KX%)YZ!aP$mMh$o!LQ!``#a[Ov(wvw)qw!^(w!^!_)q!_#o(w#o#p)q#p#q(w#q#r*Y#r;'S(w;'S;=`*w<%lO(w$IR%*j!aeS#kQ!p&j#U,U#n#t!aP#]7[up$mMh$o!LQ$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%.o!O!P%3S!P!Q'V!Q![%7r![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%<f!}#R5b#R#S%7r#S#T>y#T#o%<f#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%7r%O%WK|%W%o%7r%o%pK|%p&a%7r&a&bK|&b1p%7r1p4U%7r4U4d%7r4d4eK|4e$IS%7r$IS$I`K|$I`$Ib%7r$Ib$JeK|$Je$Jg%7r$Jg$KhK|$Kh%#t%7r%#t&/xK|&/x&Et%7r&Et&FVK|&FV;'S%7r;'S;:j%<`;:j;=`!&h<%l?&rK|?&r?Ah%7r?Ah?BY!&n?BY?Mn%7r?MnO!&nHi%/Q!^#kQ!p&j#U,U!aP#]7[!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx}5b}!O%.o!O!P%.o!P!Q'V!Q![%.o![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%.o!}#R5b#R#S%.o#S#T>y#T#o%.o#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$}5b$}%O%.o%O%W5b%W%o%.o%o%p5b%p&a%.o&a&b5b&b1p%.o1p4U%.o4U4d%.o4d4e5b4e$IS%.o$IS$I`5b$I`$Ib%.o$Ib$Je5b$Je$Jg%.o$Jg$Kh5b$Kh%#t%.o%#t&/x5b&/x&Et%.o&Et&FV5b&FV;'S%.o;'S;:j%2|;:j;=`EZ<%l?&r5b?&r?Ah%.o?Ah?BY'V?BY?Mn%.o?MnO'VHi%3PP;=`<%l%.oIZ%3g!a#kQ!p&j#U,U!aP#]7[up!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuN|uv5bvw7uwx(wx}5b}!O%.o!O!P%3S!P!Q'V!Q![%3S![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%3S!}#R5b#R#S%3S#S#T>y#T#o%3S#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}N|$}%O%3S%O%WN|%W%o%3S%o%pN|%p&a%3S&a&bN|&b1p%3S1p4U%3S4U4d%3S4d4eN|4e$IS%3S$IS$I`N|$I`$Ib%3S$Ib$JeN|$Je$Jg%3S$Jg$KhN|$Kh%#t%3S%#t&/xN|&/x&Et%3S&Et&FVN|&FV;'S%3S;'S;:j%7l;:j;=`!#x<%l?&rN|?&r?Ah%3S?Ah?BY!$O?BY?Mn%3S?MnO!$OIZ%7oP;=`<%l%3SJq%8Z!aeS#kQ!p&j#U,U!aP#]7[up$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%.o!O!P%3S!P!Q'V!Q![%7r![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%7r!}#R5b#R#S%7r#S#T>y#T#o%7r#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%7r%O%WK|%W%o%7r%o%pK|%p&a%7r&a&bK|&b1p%7r1p4U%7r4U4d%7r4d4eK|4e$IS%7r$IS$I`K|$I`$Ib%7r$Ib$JeK|$Je$Jg%7r$Jg$KhK|$Kh%#t%7r%#t&/xK|&/x&Et%7r&Et&FVK|&FV;'S%7r;'S;:j%<`;:j;=`!&h<%l?&rK|?&r?Ah%7r?Ah?BY!&n?BY?Mn%7r?MnO!&nJq%<cP;=`<%l%7rMg%=P!aeS#kQ!p&j#U,U#n#t!aP#]7[up$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%.o!O!P%3S!P!Q'V!Q![%7r![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%<f!}#R5b#R#S%7r#S#T>y#T#o%<f#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%7r%O%WK|%W%o%7r%o%pK|%p&a%7r&a&bK|&b1p%7r1p4U%7r4U4d%7r4d4eK|4e$IS%7r$IS$I`K|$I`$Ib%7r$Ib$JeK|$Je$Jg%7r$Jg$KhK|$Kh%#t%7r%#t&/xK|&/x&Et%7r&Et&FVK|&FV;'S%7r;'S;:j%<`;:j;=`!&h<%l?&rK|?&r?Ah%7r?Ah?BY!&n?BY?Mn%7r?MnO!&n$F]%Aq!aeS!p&j#U,U!gQ!aP#]7[up$mMh$o!LQ$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%Ev!O!P%JZ!P!Q'V!Q![%Ny![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%Ny!}#R5b#R#S%Ny#S#T>y#T#o%Ny#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%Ny%O%WK|%W%o%Ny%o%pK|%p&a%Ny&a&bK|&b1p%Ny1p4U%Ny4U4d%Ny4d4eK|4e$IS%Ny$IS$I`K|$I`$Ib%Ny$Ib$JeK|$Je$Jg%Ny$Jg$KhK|$Kh%#t%Ny%#t&/xK|&/x&Et%Ny&Et&FVK|&FV;'S%Ny;'S;:j&%g;:j;=`!&h<%l?&rK|?&r?Ah%Ny?Ah?BY!&n?BY?Mn%Ny?MnO!&nHi%FX!^!p&j#U,U!gQ!aP#]7[!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wsv5bvw7uwx(wx}5b}!O%Ev!O!P%Ev!P!Q'V!Q![%Ev![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%Ev!}#R5b#R#S%Ev#S#T>y#T#o%Ev#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$}5b$}%O%Ev%O%W5b%W%o%Ev%o%p5b%p&a%Ev&a&b5b&b1p%Ev1p4U%Ev4U4d%Ev4d4e5b4e$IS%Ev$IS$I`5b$I`$Ib%Ev$Ib$Je5b$Je$Jg%Ev$Jg$Kh5b$Kh%#t%Ev%#t&/x5b&/x&Et%Ev&Et&FV5b&FV;'S%Ev;'S;:j%JT;:j;=`EZ<%l?&r5b?&r?Ah%Ev?Ah?BY'V?BY?Mn%Ev?MnO'VHi%JWP;=`<%l%EvIZ%Jn!a!p&j#U,U!gQ!aP#]7[up!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuN|uv5bvw7uwx(wx}5b}!O%Ev!O!P%JZ!P!Q'V!Q![%JZ![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%JZ!}#R5b#R#S%JZ#S#T>y#T#o%JZ#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}N|$}%O%JZ%O%WN|%W%o%JZ%o%pN|%p&a%JZ&a&bN|&b1p%JZ1p4U%JZ4U4d%JZ4d4eN|4e$IS%JZ$IS$I`N|$I`$Ib%JZ$Ib$JeN|$Je$Jg%JZ$Jg$KhN|$Kh%#t%JZ%#t&/xN|&/x&Et%JZ&Et&FVN|&FV;'S%JZ;'S;:j%Ns;:j;=`!#x<%l?&rN|?&r?Ah%JZ?Ah?BY!$O?BY?Mn%JZ?MnO!$OIZ%NvP;=`<%l%JZJq& b!aeS!p&j#U,U!gQ!aP#]7[up$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%Ev!O!P%JZ!P!Q'V!Q![%Ny![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}%Ny!}#R5b#R#S%Ny#S#T>y#T#o%Ny#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%Ny%O%WK|%W%o%Ny%o%pK|%p&a%Ny&a&bK|&b1p%Ny1p4U%Ny4U4d%Ny4d4eK|4e$IS%Ny$IS$I`K|$I`$Ib%Ny$Ib$JeK|$Je$Jg%Ny$Jg$KhK|$Kh%#t%Ny%#t&/xK|&/x&Et%Ny&Et&FVK|&FV;'S%Ny;'S;:j&%g;:j;=`!&h<%l?&rK|?&r?Ah%Ny?Ah?BY!&n?BY?Mn%Ny?MnO!&nJq&%jP;=`<%l%Ny$-u&&Oi!p&j#U,U!aP$mMh$o!LQ!``!oWOq(wqr>yrs(wsv>yvw:Qwx(wx!P>y!P!Q(w!Q![>y![!](w!]!^>y!^!_:Q!_!a(w!a#o>y#o#p)q#p#q(w#q#r@u#r#s>y#s$f(w$f;'S>y;'S;=`Bo<%l?Ah>y?Ah?BY(w?BY?Mn>y?MnO(w$IR&([!aeS!p&j#U,U#n#t!gQ!aP#]7[up$mMh$o!LQ$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%Ev!O!P%JZ!P!Q'V!Q![%Ny![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}&,a!}#R5b#R#S%Ny#S#T>y#T#o&,a#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%Ny%O%WK|%W%o%Ny%o%pK|%p&a%Ny&a&bK|&b1p%Ny1p4U%Ny4U4d%Ny4d4eK|4e$IS%Ny$IS$I`K|$I`$Ib%Ny$Ib$JeK|$Je$Jg%Ny$Jg$KhK|$Kh%#t%Ny%#t&/xK|&/x&Et%Ny&Et&FVK|&FV;'S%Ny;'S;:j&%g;:j;=`!&h<%l?&rK|?&r?Ah%Ny?Ah?BY!&n?BY?Mn%Ny?MnO!&nMg&,z!aeS!p&j#U,U#n#t!gQ!aP#]7[up$_!b!``!oWOX'VXZ(wZ['V[^(w^p'Vpq(wqr5brs(wst5btuK|uv5bvw7uwx(wx}5b}!O%Ev!O!P%JZ!P!Q'V!Q![%Ny![!]'V!]!^5b!^!_:Q!_!a(w!a!c5b!c!}&,a!}#R5b#R#S%Ny#S#T>y#T#o&,a#o#p*}#p#q'V#q#rBu#r#s5b#s$f'V$f$g5b$g$}K|$}%O%Ny%O%WK|%W%o%Ny%o%pK|%p&a%Ny&a&bK|&b1p%Ny1p4U%Ny4U4d%Ny4d4eK|4e$IS%Ny$IS$I`K|$I`$Ib%Ny$Ib$JeK|$Je$Jg%Ny$Jg$KhK|$Kh%#t%Ny%#t&/xK|&/x&Et%Ny&Et&FVK|&FV;'S%Ny;'S;:j&%g;:j;=`!&h<%l?&rK|?&r?Ah%Ny?Ah?BY!&n?BY?Mn%Ny?MnO!&n$3a&1WSb$3P!``O#q)q#r;'S)q;'S;=`*S<%lO)q$3a&1sg#TW!aP#]7[$mMh$o!LQ!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wsv'Vvw*}wx(wx!^'V!^!_)q!_!a(w!a#S'V#S#T(w#T#o'V#o#p*}#p#q'V#q#r-b#r;'S'V;'S;=`.}<%lO'V$FX&3oog#f!p&j#U,U!aP#]7[$mMh$o!LQ!oWOX-bXZ*YZ[-b[^*Y^p-bpq*YqrBurs*YsvBuvw<ywx*Yx!PBu!P!Q-b!Q![Bu![!]-b!]!^Bu!^!_;q!_!a*Y!a#SBu#S#T@u#T#oBu#o#p,a#p#q-b#q#sBu#s$f-b$f;'SBu;'S;=`ET<%l?AhBu?Ah?BY-b?BY?MnBu?MnO-b$F]&5sP;=`<%l%AU$FZ&5yP;=`<%lHx$5a&6aqeS!aP#]7[up$mMh$o!LQ$_!b!``OX'VXZ(wZ['V[^(w^p'Vpq(wqr'Vrs(wst'Vtu!&nuv'Vvw*}wx(wx!O'V!O!P!$O!P!Q'V!Q![!&n![!^'V!^!_)q!_!a(w!a!c'V!c!}!&n!}#R'V#R#S!&n#S#T(w#T#o!&n#o#p*}#p#q'V#q#r-b#r$g'V$g;'S!&n;'S;=`!)U<%lO!&n",
  tokenizers: [scriptTokens2, styleTokens2, textareaTokens2, tagStart3, commentContent3, longExpression, shortExpression, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
  topRules: { "Document": [0, 15] },
  specialized: [{ term: 19, get: (value) => spec_BlockPrefix[value] || -1 }, { term: 21, get: (value) => spec_BlockType[value] || -1 }, { term: 153, get: (value) => spec_identifier12[value] || -1 }, { term: 77, get: (value) => spec_AttributeName[value] || -1 }, { term: 69, get: (value) => spec_TagName2[value] || -1 }],
  tokenPrec: 1571
});
function getAttrs3(element2, input) {
  let attrs2 = /* @__PURE__ */ Object.create(null);
  for (let att of element2.firstChild.getChildren("Attribute")) {
    let name2 = att.getChild("AttributeName"), value = att.getChild("AttributeValue") || att.getChild("UnquotedAttributeValue");
    if (name2)
      attrs2[input.read(name2.from, name2.to)] = !value ? "" : value.name == "AttributeValue" ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
  }
  return attrs2;
}
function maybeNest2(node, input, tags3) {
  let attrs2;
  for (let tag2 of tags3) {
    if (!tag2.attrs || tag2.attrs(attrs2 || (attrs2 = getAttrs3(node.node.parent, input))))
      return { parser: tag2.parser };
  }
  return null;
}
var expressionParser = /* @__PURE__ */ parser6.configure({ top: "SingleExpression" });
function configureNesting2(tags3) {
  let script = [], style2 = [], textarea = [];
  for (let tag2 of tags3) {
    let array2 = tag2.tag == "script" ? script : tag2.tag == "style" ? style2 : tag2.tag == "textarea" ? textarea : null;
    if (!array2)
      throw new RangeError(
        "Only script, style, and textarea tags can host nested parsers"
      );
    array2.push(tag2);
  }
  return parseMixed((node, input) => {
    let id3 = node.type.id;
    if (id3 === LongExpression) return { parser: expressionParser };
    if (id3 === ShortExpression) return { parser: expressionParser };
    if (id3 === ScriptText2) return maybeNest2(node, input, script);
    if (id3 === StyleText3) return maybeNest2(node, input, style2);
    if (id3 === TextareaText2) return maybeNest2(node, input, textarea);
    return null;
  });
}
var defaultNesting2 = [
  {
    tag: "script",
    attrs: (attrs2) => attrs2.type === "text/typescript" || attrs2.lang === "ts",
    parser: typescriptLanguage.parser
  },
  {
    tag: "script",
    attrs(attrs2) {
      return !attrs2.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs2.type);
    },
    parser: javascriptLanguage.parser
  },
  {
    tag: "style",
    attrs(attrs2) {
      return (!attrs2.lang || attrs2.lang === "css" || attrs2.lang === "scss") && (!attrs2.type || /^(text\/)?(x-)?(stylesheet|css|scss)$/i.test(attrs2.type));
    },
    parser: cssLanguage.parser
  }
];
var svelteLanguage = /* @__PURE__ */ LRLanguage.define({
  // @ts-expect-error
  parser: /* @__PURE__ */ parser25.configure({
    wrap: /* @__PURE__ */ configureNesting2(defaultNesting2),
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        "Element": (context) => {
          let after = /^(\s*)(<\/)?/.exec(context.textAfter);
          if (context.node.to <= context.pos + after[0].length)
            return context.continue();
          return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
        },
        "Block": (context) => {
          const node = context.node;
          const text5 = context.textAfter.trim();
          if (text5.startsWith("{/")) {
            const name2 = node.name;
            if (name2 === "IfBlock" && text5.startsWith("{/if") || name2 === "EachBlock" && text5.startsWith("{/each") || name2 === "AwaitBlock" && text5.startsWith("{/await") || name2 === "KeyBlock" && text5.startsWith("{/key")) {
              return context.lineIndent(context.node.from);
            }
            return null;
          }
          if (node.name === "IfBlock" || node.name === "EachBlock") {
            if (text5.startsWith("{:else"))
              return context.lineIndent(node.from);
          } else if (node.name === "AwaitBlock") {
            if (text5.startsWith("{:then"))
              return context.lineIndent(node.from);
            if (text5.startsWith("{:catch"))
              return context.lineIndent(node.from);
          }
          let after = /^(\s*)(<\/)?/.exec(context.textAfter);
          if (context.node.to <= context.pos + after[0].length)
            return context.continue();
          return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
        },
        "BlockOpen BlockClose BlockInline": (context) => {
          return context.column(context.node.from) + context.unit;
        },
        "OpenTag CloseTag SelfClosingTag": (context) => {
          return context.column(context.node.from) + context.unit;
        },
        "Document": (context) => {
          if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to) {
            return context.continue();
          }
          let endElt = null;
          let close;
          for (let cur2 = context.node; ; ) {
            let last = cur2.lastChild;
            if (!last || last.name != "Element" || last.to != cur2.to)
              break;
            endElt = cur2 = last;
          }
          if (endElt && !((close = endElt.lastChild) && (close.name === "CloseTag" || close.name === "SelfClosingTag"))) {
            return context.lineIndent(endElt.from) + context.unit;
          }
          return null;
        }
      }),
      /* @__PURE__ */ foldNodeProp.add({
        "Block": (node) => {
          const open = `${node.name}Open`;
          const close = `${node.name}Close`;
          const first = node.firstChild;
          const last = node.lastChild;
          if (!first || first.name !== open)
            return null;
          return { from: first.to, to: (last === null || last === void 0 ? void 0 : last.name) === close ? last.from : node.to };
        },
        "Element": (node) => {
          let first = node.firstChild;
          let last = node.lastChild;
          if (!first || first.name != "OpenTag")
            return null;
          return { from: first.to, to: last.name === "CloseTag" ? last.from : node.to };
        }
      })
    ]
  }),
  languageData: {
    commentTokens: { block: { open: "<!--", close: "-->" } },
    indentOnInput: /^\s*((<\/\w+\W)|(\{:(else|then|catch))|(\{\/(if|each|await|key)))$/,
    wordChars: "-._",
    autocomplete: htmlCompletionSource
  }
});
function svelte() {
  return new LanguageSupport(svelteLanguage, [
    javascript().support,
    css().support,
    autoCloseTags4
  ]);
}
function elementName4(doc2, tree, max = doc2.length) {
  if (!tree)
    return "";
  let tag2 = tree.firstChild;
  let name2 = tag2 && (tag2.getChild("TagName") || tag2.getChild("ComponentName") || tag2.getChild("SvelteElementName"));
  return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
}
var autoCloseTags4 = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text5) => {
  if (view.composing || view.state.readOnly || from3 != to || text5 != ">" && text5 != "/" || !svelteLanguage.isActiveAt(view.state, from3, -1))
    return false;
  let { state } = view;
  let changes = state.changeByRange((range) => {
    var _a2, _b2, _c;
    let { head } = range;
    let around = syntaxTree(state).resolveInner(head, -1);
    let name2;
    if (around.name === "TagName" || around.name === "ComponentName" || around.name === "SvelteElementName" || around.name === "StartTag") {
      around = around.parent;
    }
    if (text5 === ">" && around.name === "OpenTag") {
      if (((_b2 = (_a2 = around.parent) === null || _a2 === void 0 ? void 0 : _a2.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "CloseTag" && (name2 = elementName4(state.doc, around.parent, head))) {
        let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
        let insert2 = `${hasRightBracket ? "" : ">"}</${name2}>`;
        return {
          range: EditorSelection.cursor(head + 1),
          changes: { from: head + (hasRightBracket ? 1 : 0), insert: insert2 }
        };
      }
    } else if (text5 === "/" && around.name === "OpenTag") {
      let empty2 = around.parent, base5 = empty2 === null || empty2 === void 0 ? void 0 : empty2.parent;
      if (empty2.from == head - 1 && ((_c = base5.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name2 = elementName4(state.doc, base5, head))) {
        let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
        let insert2 = `/${name2}${hasRightBracket ? "" : ">"}`;
        let pos = head + insert2.length + (hasRightBracket ? 1 : 0);
        return { range: EditorSelection.cursor(pos), changes: { from: head, insert: insert2 } };
      }
    }
    return { range };
  });
  if (changes.changes.empty)
    return false;
  view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
  return true;
});

// ../../node_modules/@replit/codemirror-lang-csharp/dist/index.js
init_dist6();
init_dist5();
init_dist4();
var interpStringContent = 296;
var interpStringBrace = 297;
var interpStringEnd = 298;
var interpVStringContent = 299;
var interpVStringBrace = 300;
var interpVStringEnd = 301;
var quote3 = 34;
var backslash4 = 92;
var braceL4 = 123;
var braceR4 = 125;
var interpString = /* @__PURE__ */ new ExternalTokenizer((input) => {
  for (let i = 0; ; i++) {
    switch (input.next) {
      case -1:
        if (i > 0)
          input.acceptToken(interpStringContent);
        return;
      case quote3:
        if (i > 0)
          input.acceptToken(interpStringContent);
        else
          input.acceptToken(interpStringEnd, 1);
        return;
      case braceL4:
        if (input.peek(1) === braceL4)
          input.acceptToken(interpStringContent, 2);
        else
          input.acceptToken(interpStringBrace);
        return;
      case braceR4:
        if (input.peek(1) === braceR4)
          input.acceptToken(interpStringContent, 2);
        return;
      case backslash4:
        const next2 = input.peek(1);
        if (next2 === braceL4 || next2 === braceR4)
          return;
        input.advance();
      // FALLTHROUGH
      default:
        input.advance();
    }
  }
});
var interpVString = /* @__PURE__ */ new ExternalTokenizer((input) => {
  for (let i = 0; ; i++) {
    switch (input.next) {
      case -1:
        if (i > 0)
          input.acceptToken(interpVStringContent);
        return;
      case quote3:
        if (input.peek(1) === quote3)
          input.acceptToken(interpVStringContent, 2);
        else if (i > 0)
          input.acceptToken(interpVStringContent);
        else
          input.acceptToken(interpVStringEnd, 1);
        return;
      case braceL4:
        if (input.peek(1) === braceL4)
          input.acceptToken(interpVStringContent, 2);
        else
          input.acceptToken(interpVStringBrace);
        return;
      case braceR4:
        if (input.peek(1) === braceR4)
          input.acceptToken(interpVStringContent, 2);
        return;
      default:
        input.advance();
    }
  }
});
var spec_identifier13 = { __proto__: null, extern: 10, alias: 12, using: 16, void: 626, sbyte: 626, byte: 626, short: 626, ushort: 626, int: 626, uint: 626, long: 626, ulong: 626, nint: 626, nuint: 626, char: 626, float: 626, double: 626, bool: 626, decimal: 626, string: 626, object: 626, dynamic: 626, global: 54, static: 56, namespace: 58, true: 662, false: 662, null: 664, await: 112, throw: 114, ref: 140, in: 158, out: 160, scoped: 162, var: 164, this: 168, base: 170, new: 174, typeof: 190, sizeof: 194, checked: 198, unchecked: 202, default: 204, nameof: 206, switch: 210, _: 215, not: 231, and: 233, or: 235, when: 246, with: 250, async: 252, delegate: 254, readonly: 264, const: 272, unsafe: 278, params: 283, where: 284, class: 286, struct: 288, notnull: 290, unmanaged: 292, if: 294, else: 296, case: 300, while: 302, do: 304, for: 306, foreach: 310, break: 314, continue: 316, goto: 318, return: 320, try: 322, catch: 324, finally: 328, lock: 330, yield: 334, fixed: 336, stackalloc: 342, as: 364, is: 366, from: 387, let: 389, join: 391, on: 393, equals: 395, into: 397, orderby: 399, ascending: 401, descending: 403, select: 405, group: 407, by: 409, public: 412, protected: 414, internal: 416, private: 418, virtual: 420, sealed: 422, override: 424, abstract: 426, volatile: 428, partial: 430, required: 432, file: 435, get: 442, set: 444, init: 446, event: 448, add: 453, remove: 455, operator: 458, implicit: 464, explicit: 466, interface: 470, record: 476, enum: 478 };
var parser$14 = /* @__PURE__ */ LRParser.deserialize({
  version: 14,
  states: "&E`O#`QSOOOOQO'#Hh'#HhO#gQSO'#IyOOQO'#Hi'#HiO%kQSO'#IyO%rQSO'#NiOOQO'#If'#IfO'fQSO'#NiOOQO'#J['#J[OOQO'#JX'#JXOOQO'#Ho'#HoO*|QSO'#IyQOQSOOO+TQSO'#MaO,wQSO'#I|O-PQSO'#I|O,zQSO'#JYO-UQSO'#C}OOQO'#Ma'#MaO-ZQSO'#NiO,zQSO'#NkOOQO'#Hq'#HqO,zQSO'#J]O,zQSO'#NYO,zQSO'#N^O-cQSO'#NqOOQO-E;f-E;fO-nQSO,5?eO-uQSO,5?eOOQO-E;g-E;gOOQO-E;o-E;oO-|QSO,5DTO/mQSO,5DTO,zQSO,5DVO,zQSO,5?wO,zQSO,5CtO,zQSO,5CxO-cQSO,5D]OOQO-E<d-E<dOOQO-E;m-E;mO/uQSO,5?fOOQO'#Ce'#CeO/zQSO,5?hO0]QSO'#I}O1TQSO,5?hO,zQSO,5?hO1YQSO,5?hO1bQSO'#JZO3hQSO,5?tO5kQSO,59iO6SQSO'#I}O6^QSO'#J^O6fQSO'#J_O6qQSO,59iO7[QSO,5DTO,zQSO,5DTO7cQSO,5DVO7kQSO,5?wO7yQSO,5CtO8XQSO,5CxOOQO'#Ch'#ChO8gQSO'#JQO-cQSO'#CkOOQO'#JS'#JSO,zQSO,5D]P8rQSO'#IzO8wQSO1G5PO9OQSO1G9oO,zQSO1G9qO,zQSO1G5cO,zQSO1G9`O,zQSO1G9dO-cQSO1G9wO9WQSO1G9oO,zQSO1G9oO7cQSO1G9qO9_QSO1G5cO9mQSO1G9`O9{QSO1G9dO,zQSO1G9wO:ZQSO1G5QO,zQSO'#JWO,zQSO,59aOOQO,5?i,5?iO:`QSO,5?iO-cQSO'#JOO,zQSO1G5SOOQO1G5S1G5SO;WQSO1G5SO,zQSO'#HpO;]QSO,5?uO=cQSO'#C|OOQO1G5`1G5`O=jQSO1G5`O,zQSO1G/TO,zQSO'#IeO?jQSO,5?xOB[QSO'#DPOOQO,5?y,5?yOOQO1G/T1G/TOBcQSO1G/TOCYQSO'#F^OOQO'#I]'#I]OCaQSO1G9oOExQSO'#HOO,zQSO'#LXO,zQSO'#NjOOQO1G9o1G9oOFPQSO1G9oOCaQSO1G9oOFXQSO'#LSOFaQSO1G9oOHvQSO1G9oO-fQSO'#NlOIRQSO'#HfOOQO'#Nm'#NmOOQO1G9q1G9qOI^QSO1G9qOIcQSO1G5cOIkQSO1G5cO,zQSO1G5cO9bQSO1G5cOLQQSO1G9`ON`QSO'#H`ONgQSO1G9`O,zQSO1G9`O9pQSO1G9`O!!|QSO1G9dO!#jQSO'#HbO!#qQSO'#N_O!$PQSO1G9dO,zQSO1G9dO:OQSO1G9dO!&fQSO'#JUOOQO'#Hk'#HkO!'YQSO,5?lOOQO'#Hm'#HmO!'jQSO'#JVOOQO'#JV'#JVOOQO,5?l,5?lO!(_QSO,59YO!(gQSO,59VO!(lQSO1G9wO!(tQSO7+/ZO,zQSO7+/ZO7cQSO7+/]O!({QSO7+*}O!)ZQSO7+.zO!)iQSO7+/OO,zQSO7+/cO!)wQSO7+/ZOOQO7+/Z7+/ZO!*YQSO7+/ZO!)wQSO7+/ZO!*bQSO7+/ZO!,wQSO7+/ZOOQO7+/]7+/]OI^QSO7+/]OIcQSO7+*}O!-SQSO7+*}O,zQSO7+*}O!)OQSO7+*}OLQQSO7+.zO!/iQSO7+.zO,zQSO7+.zO!)^QSO7+.zO!!|QSO7+/OO!2OQSO7+/OO,zQSO7+/OO!)lQSO7+/OO!(lQSO7+/cOOQO7+*l7+*lO!4eQSO,5?rO!5`QSO1G.{OOQO1G5T1G5TO!6^QSO'#JPO!6iQSO,5?jO!6nQSO7+*nOOQO7+*n7+*nOOQO,5>[,5>[OOQO-E;n-E;nO!6sQSO,59hO!6zQSO,59hOOQO,59h,59hO!7RQSO,59hOOQO7+*z7+*zO!7YQSO7+$oOOQO,5?P,5?POOQO-E<c-E<cO!:|QSO'#CeO!;TQSO'#JQO!;cQSO'#I}OOQO'#DR'#DROOQO'#DW'#DWOOQO'#Jd'#JdO!>WQSO'#DeO!>hQSO'#DZOOQO'#DZ'#DZO!AnQSO'#JaO!DqQSO'#JaO!FuQSO'#JiOOQO'#Ji'#JiO!GPQTO'#DXO!G[QUO'#DuOOQO'#Jg'#JgOOQO'#Jc'#JcO!GgQSO'#JbOOQO'#Jb'#JbO#!PQSOOO#'RQSO'#GbOOQO'#MQ'#MQOOQO'#MP'#MPO#(nQSO'#GcO#(sQSO'#GcOOQO'#Ja'#JaO!>hQSO'#J`O#({QSO'#J`OOQO,59k,59kO#)QQSO,59kO!>hQSO'#DdO#)VQSO'#DZO!>hQSO'#DZOOQO'#Dy'#DyO#*sQSO'#JxO#*{QSO'#L}O#+ZQSO'#KpO#+iQSO'#GcO#+tQSO'#MTO#,PQSO'#JaO#/QQSO'#JaO#0WQSO'#JvO#0`QSO'#EUO#0qQSO'#KpO#0yQSO'#JcO#1OQSO'#JcO#1TQSO'#JcO#1YQSO'#JcOOQO7+$o7+$oOOQO'#LV'#LVO#(vQSO'#LUO-cQSO'#LUOOQO,5;x,5;xO#1_QSO,5;xO#2RQSO'#LUOOQO'#LW'#LWO#2nQSO'#LVO-cQSO'#LUO#2YQSO'#LVOOQO-E<Z-E<ZO#2uQSO'#I}O#3^QSO'#MwO#3tQSO'#MwO#4bQSO'#MwO,zQSO'#NWOOQO'#Mc'#McOOQO'#Ih'#IhO#4jQSO,5=jOOQO,5=j,5=jO-cQSO'#MdO#4qQSO'#MeO-cQSO'#MsO#4yQSO'#MfO#5XQSO'#NTO#5dQSO,5AsO#5iQSO,5DUOFXQSO'#LTO#5wQSO'#LTO#6PQSO,5AnOOQO,5DW,5DWOOQO'#FZ'#FZO#6UQSO'#NoO#6^QSO'#NoO#6iQSO'#NnO#6qQSO,5>RO#6vQSO,5>QOOQO7+*}7+*}O#7OQSO'#MbOIcQSO7+*}O#7ZQSO'#MwO#7qQSO'#MwOOQO'#NZ'#NZOOQO'#Ii'#IiO#8_QSO,5=zOOQO,5=z,5=zO-cQSO'#N[OOQO7+.z7+.zOLQQSO7+.zO#8fQSO'#NeOOQO'#Nc'#NcOOQO'#Il'#IlO#8zQSO,5=|OOQO,5=|,5=|O#9RQSO'#NeO-cQSO'#NgO#9ZQSO'#NeO!#qQSO'#NaO#9iQSO'#N`OOQO'#Nb'#NbOOQO'#Na'#NaO,zQSO'#NaO#9qQSO,5CyOOQO7+/O7+/OO!!|QSO7+/OOOQO'#Hl'#HlO#9vQSO,5?pOOQO,5?p,5?pOOQO-E;i-E;iOOQO1G5W1G5WOOQO-E;k-E;kOOQO'#Cl'#ClO#:OQSO,5?oO-cQSO1G.tOOQO1G.q1G.qO#:WQSO7+/cO!(oQSO7+/cO#:`QSO<=$uOOQO<=$u<=$uO#:qQSO<=$uO#:`QSO<=$uO#:yQSO<=$uO#=`QSO<=$uO#=kQSO<=$uOOQO<=$w<=$wOI^QSO<=$wOIcQSO<<NiO#=rQSO<<NiO,zQSO<<NiO#@XQSO<<NiOLQQSO<=$fO#@dQSO<=$fO,zQSO<=$fO#ByQSO<=$fO!!|QSO<=$jO#CUQSO<=$jO,zQSO<=$jO#EkQSO<=$jO!(lQSO<=$}OOQO<<Ni<<NiOIcQSO<<NiOOQO<=$f<=$fOLQQSO<=$fOOQO<=$j<=$jO!!|QSO<=$jO#EvQSO<=$}O!(oQSO<=$}OOQO1G5^1G5^O#FOQSO1G5^OOQO7+$g7+$gO-cQSO'#HnO#FvQSO,5?kOOQO1G5U1G5UOOQO<<NY<<NYO#GRQSO1G/SOOQO1G/S1G/SO#GYQSO1G/SOOQO<<HZ<<HZO#GaQSO<<HZOOQO,59l,59lO#GfQSO,5@YOOQO,5@Y,5@YO#GkQSO,5@YO#GpQSO'#CeO#GzQSO,5:PO#HYQSO'#JmO!>hQSO'#JmO#HdQSO'#KrO#HlQSO,5;lO#HqQSO'#MRO#H|QSO,5:fO-cQSO'#KsOOQO'#Kq'#KqO#IRQSO,5=OO$#vQSO'#CeOOQO,59u,59uO$$^QSO'#DrOOQO'#Jk'#JkO$$cQSO,5@UO$$mQSO'#D|O$%QQSO,5@`O$%VQSO,5BhO$%[QSO,5@xO$%aQSO,5AZOOQO,5?},5?}OOQO,5@b,5@bO#0ZQSO,5@bO?rQSO,5?zOOQP'#Jh'#JhO!>hQSO'#JhOOQP'#Hr'#HrO$%fQTO,59sOOQO,59s,59sOOQQ'#Jl'#JlO!>hQSO'#JlOOQQ'#Ht'#HtO$%qQUO,5:aOOQO,5:a,5:aO$%|QSO,5@cO$$pQSO'#ERO$&RQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO$)wQSO,5<|O-cQSO,5<oO$+dQSO,5<oOOQO,5<|,5<|O$,nQSO,5<}OOQO'#FR'#FRO$,xQSO'#FQO$-^QSO,5<}O$-cQSO,5?zO!>hQSO,5?zOOQO1G/V1G/VOOQO,5:O,5:OO$-mQSO'#CeO$-tQSO'#CuO$1eQSO,59uO!;^QSO'#JnO$$yQSO'#DzO$4SQSO'#KpO$4XQSO,59uO$%VQSO,5@dOOQO,5@d,5@dO$5tQSO'#JzO$6VQSO'#GPO$6aQSO,5BiO$6fQSO,5BiO$7SQSO'#CeO$,xQSO'#FQO#(sQSO,5<}O#0qQSO,5A[O$7rQSO,5BoO$7yQSO,5BoOOQO'#MW'#MWOOQO'#MV'#MVO#,PQSO'#MUOOQO'#M]'#M]O$:bQSO'#MUO$;RQSO'#MXO$;WQSO'#MYO!>hQSO'#M^OOQO,5?{,5?{O$;cQSO'#MWO!>hQSO'#MWO!>hQSO'#M]O-cQSO'#EbO$$mQSO'#D|O$?iQSO'#E]OOQO'#KU'#KUO$?pQSO,5:pO$ExQSO,5:pO$FTQSO,5<mO$FkQSO'#FQO$JpQSO'#FSOOQO,5A[,5A[O#0tQSO,5A[O-cQSO'#E`O!>hQSO'#EdO$JwQSO'#EhO$KVQSO,5ApO#(vQSO,5ApOOQO1G1d1G1dO-cQSO,5ApO-cQSO,5ApOOQO,5Aq,5AqO$KeQSO,5AqO$KyQSO,5ApO$LOQSO,5CpO$LTQSO,5CcO-cQSO,5COO#4qQSO,5CPO-cQSO,5C_O#4bQSO,5CcO,zQSO,5CrO#4yQSO,5CQO#5XQSO,5CoOOQO'#M}'#M}O$LqQSO,5ChO$L|QSO,5CPO$MXQSO'#NRO$MrQSO'#HQO$MyQSO'#M{OOQO,5Cc,5CcOOQO'#M{'#M{O$NTQSO,5CrOOQO-E<f-E<fOOQO1G3U1G3UO#6XQSO,5COO$NqQSO'#CeO% OQSO'#MhO% ZQSO'#K{O% iQSO'#KzO% tQSO'#MhO% yQSO'#MhOOQO'#Mk'#MkO%!RQSO,5CPO%!WQSO,5CUOOQO'#My'#MyO%!`QSO,5CdO!(oQSO,5CRO%!eQSO,5C_O#4yQSO,5CQO%!jQSO'#NSOOQO'#NS'#NSOOQO,5CQ,5CQO!>hQSO'#NXOOQO'#NX'#NXOOQO,5Co,5CoO%#YQSO1G7_O%#aQSO1G9pO,zQSO'#ImO%#aQSO1G9pO%#lQSO,5AoO%#lQSO,5AoOFXQSO'#I[OOQO1G7Y1G7YO%#tQSO,5DZO!>hQSO,5DZO#6UQSO'#InO%$PQSO,5DYO%$XQSO1G3mOOQO1G3l1G3lO%$^QSO,5B|O,zQSO'#IgO%$iQSO,5CcO-cQSO,5CvOOQO-E<g-E<gOOQO1G3f1G3fO%%VQSO,5CvO%%[QSO,5DPO-cQSO,5DRO%%dQSO,5DPOOQO-E<j-E<jOOQO1G3h1G3hO%%rQSO'#D{O%%}QSO,5DPO%!`QSO,5DSO%&SQSO,5DOO%&[QSO,5DROOQO,5C{,5C{O,zQSO,5C{O!#qQSO'#IkO%&aQSO,5CzOOQO1G9e1G9eOOQO-E;j-E;jOOQO1G5[1G5[O-cQSO'#HjO%&iQSO1G5ZO%&qQSO7+$`O#EvQSO<=$}OOQO<=$}<=$}OOQOANHaANHaO%&vQSOANHaO%'OQSOANHaO%)eQSOANHaO%)pQSOANHaO%)pQSOANHaOOQOANHcANHcO%*RQSOANDTOOQOANDTANDTOIcQSOANDTOIcQSOANDTO,zQSOANDTO%,hQSOANHQOOQOANHQANHQOLQQSOANHQOLQQSOANHQO,zQSOANHQO%.}QSOANHUOOQOANHUANHUO!!|QSOANHUO!!|QSOANHUO,zQSOANHUO%1dQSOANHiO!(oQSOANHiO%1dQSOANHiOOQOANHiANHiOOQO7+*x7+*xOOQO,5>Y,5>YOOQO-E;l-E;lOOQO7+$n7+$nO%1lQSO7+$nOOQOAN=uAN=uO%1sQSO'#ClOOQO1G5t1G5tO#0WQSO,5@ZO%:cQSO'#CeO%:vQSO'#ClOOQO1G/k1G/kO%;XQSO,5A_O$$yQSO'#HuO%;dQSO,5@XO%;lQSO,5@XO$FYQSO'#IUO%;vQSO,5A^OOQO1G1W1G1WO#(vQSO'#IcO%<OQSO,5BmOOQO1G0Q1G0QO#(vQSO,5A_OOQO1G2j1G2jOOQO,5:^,5:^O%<WQSO1G5pO!>hQSO1G5pO%=sQSO'#JrOOQO'#Jq'#JqO%>QQSO'#JqO%>bQSO'#JpOOQO,5:h,5:hO!>hQSO'#JrO%>mQSO'#JrO%?OQSO,5:hO#GfQSO1G5zO%?TQSO1G5zO%GmQSO'#JyOOQO1G8S1G8SO&#aQSO'#EjOOQO1G6d1G6dO&#kQSO'#EWOOQO'#J|'#J|OOQO1G6u1G6uOOQO1G5|1G5|OOQO1G5f1G5fO&#vQSO,5@SOOQP-E;p-E;pOOQO1G/_1G/_O&$TQSO,5@WOOQQ-E;r-E;rOOQO1G/{1G/{O&$bQSO1G5}O&,zQSO,5:mOOQO,5<s,5<sO&/xQSO1G2ZO&3OQSO1G2ZO&6OQSO1G2ZO&6YQSO1G2ZO&9]QSO1G2ZO&9gQSO1G2ZO&<mQSO1G2ZO&<tQSO1G2ZO&?wQSO1G2ZO&@OQSO1G2ZO&AsQSO1G2ZO&CYQSO1G2ZOOQO1G2h1G2hOOQO1G2Z1G2ZO&CaQSO'#CeO&GWQSO'#JQO&GfQSO'#KcO'!RQSO'#EnO'!ZQSO'#KdO$+dQSO'#EpO'!fQSO'#EvO'+RQSO'#EyOOQO'#Kb'#KbO'+]QSO'#CkOOQO'#Em'#EmO',gQSO'#KdO$+dQSO'#ErO',rQSO1G2ZO'-iQSO'#KkO'6UQSO'#ExO'>qQSO'#MSOOQO1G2i1G2iOOQO'#MS'#MSO#(vQSO'#KsO'@^QSO'#MRO$,nQSO1G2iO?rQSO1G5fO'@fQSO1G5fOOQO1G6O1G6OOOQO,5@f,5@fOOQO,5<k,5<kO'@mQSO,5<kO!>hQSO'#GOOOQO1G8T1G8TO!>hQSO'#GQO#HQQSO,59YO'@tQSO1G2iOOQO1G6v1G6vO#0tQSO1G6vO$;cQSO1G8ZO'@yQSO1G8ZOOQO,5Bq,5BqO'CbQSO,5BpOOQO,5Bp,5BpO'DRQSO'#M_O'DWQSO,5BsO'D]QSO,5BtO'DdQSO,5BtO'DiQSO,5BxO'FWQSO,5BrO'FqQSO'#MZOOQO,5Br,5BrO'F{QSO,5BwO'HhQSO,5:|O'HmQSO,59YO'IpQSO'#CeO'JoQSO'#JnOOQO'#KX'#KXO'KkQSO'#KXO'KuQSO'#KWO'K}QSO,5:wO'LSQSO,5:xO'L[QSO'#EWOOQO'#J{'#J{OOQO1G0[1G0[O'LoQSO'#JUO'L|QSO1G2XO'MUQSO1G0[O((`QSO1G2XO()iQSO'#FVOOQO'#K}'#K}OOQO1G2X1G2XO()vQSO'#CeO$$yQSO'#DeO(,jQSO'#LaO(,tQSO'#JjOOQO'#Kx'#KxO(-lQSO'#LRO(.WQSO'#F[OOQO'#Kw'#KwOOQO'#L`'#L`O(.`QSO'#L`OOQO'#Lb'#LbOOQO'#Lg'#LgOOQO'#Ln'#LnOOQO'#L_'#L_OOQO'#Ku'#KuOOQO'#IV'#IVO(/cQSO,5;nOOQO,5;n,5;nO#)VQSO'#DZO(/jQSO'#DZO(/tQSO'#FTO',gQSO'#FTO(0SQSO'#FTO-cQSO'#FXO(0XQSO'#IZOOQO'#IZ'#IZO#1TQSO'#LcO#1TQSO'#LhO(0vQSO'#LiO(4_QSO'#LjO(4dQSO'#LmO(4iQSO'#DZO(4sQSO'#LoO(5OQSO'#LpO#1TQSO'#LuO(5]QSO'#LvO(5bQSO'#LxO(5jQSO'#LyO(5oQSO'#L_O#0WQSO'#JvO(5tQSO'#KyO(6[QSO'#KyO(6iQSO'#KxO#1TQSO'#LdO(6}QSO'#LnO#0tQSO'#LrO#1TQSO'#L_O(7SQSO,5:zO(7hQSO,5:zO(7mQSO,5;OO(7tQSO'#CeOOQO'#K]'#K]O(8SQSO'#K[O(8[QSO,5;SOBhQSO1G7[O!>hQSO1G7[O(8aQSO1G7[O#(vQSO1G7[O$KyQSO1G7[OOQO1G7]1G7]O(8oQSO1G7[O(8wQSO'#NVOOQO1G9[1G9[O-cQSO1G8jO$L|QSO1G8kO-cQSO1G8yO#4bQSO1G8}O$LqQSO1G9SO,zQSO1G9^O#4yQSO1G8lO#5XQSO1G9ZO#6XQSO1G8jO(9PQSO1G8kO%!WQSO1G8pO%!eQSO1G8yOOQO1G8}1G8}O(9UQSO1G9^O#4yQSO1G8lOOQO1G8l1G8lOOQO1G9Z1G9ZOOQO1G9S1G9SO(9ZQSO,5CjO-cQSO,5CmO(;PQSO'#MoO(;WQSO'#MnO(;_QSO'#MnO(;sQSO,5=lO(;xQSO'#MpO(<ZQSO'#MpO$LqQSO'#MoO(<iQSO'#MoO$LqQSO'#MqO(<tQSO,5CgO!>hQSO,5CgO(<{QSO1G9^O(=QQSO'#LQO(=VQSO'#LPO(=_QSO1G8jO(=dQSO'#MiOOQO,5CS,5CSO% tQSO,5CSOOQO,5CV,5CVOOQO,5Ce,5CeO(=lQSO,5AgO!(bQSO'#IXO(=yQSO,5AfOOQO1G8k1G8kO(>UQSO'#MmO(>`QSO'#MmOOQO1G8p1G8pOBhQSO'#HYOOQO1G9O1G9OOOQO1G8m1G8mO(AvQSO'#CeO(CcQSO'#MkO(CnQSO'#MkOOQO1G8y1G8yO(CsQSO1G8yO(CxQSO,5CnO!>hQSO,5CnO(DPQSO,5CsO(DWQSO'#LZOOQO'#LY'#LYO(DoQSO'#L[OOQO'#L['#L[O(EZQSO'#LYOOQO7+,y7+,yO(ErQSO'#L]OOQO-E<k-E<kOOQO,5?X,5?XO(EwQSO7+/[O(FSQSO1G7ZOOQO-E<Y-E<YOFXQSO,5>vOOQO,5>v,5>vO!>hQSO1G9uO(F[QSO1G9uOOQO,5?Y,5?YOOQO-E<l-E<lOOQO7+)X7+)XOOQO-E<e-E<eOOQO,5?R,5?RO-cQSO1G9bO%%VQSO1G9bO(FfQSO1G9bO$6aQSO'#N]O%%}QSO1G9kO%!`QSO1G9nO%&SQSO1G9jO%&[QSO1G9mO(FkQSO1G9kO-cQSO1G9mO(FsQSO'#HcOOQO1G9k1G9kO%%}QSO1G9nO(GOQSO1G9jO!(oQSO1G9jOOQO'#D{'#D{O(GWQSO1G9mOOQO1G9g1G9gOOQO,5?V,5?VOOQO-E<i-E<iO!(bQSO,5>UOOQO-E;h-E;hOOQO<<Gz<<GzOOQOG2={G2={O(G]QSOG2={O(IrQSOG2={O(IzQSOG2={O(JVQSOG2={OOQOG29oG29oOIcQSOG29oO(JhQSOG29oOIcQSOG29oOOQOG2=lG2=lOLQQSOG2=lO(L}QSOG2=lOLQQSOG2=lOOQOG2=pG2=pO!!|QSOG2=pO) dQSOG2=pO!!|QSOG2=pO)#yQSOG2>TOOQOG2>TG2>TO)#yQSOG2>TOOQO<<HY<<HYOOQO1G5u1G5uO#0ZQSO1G5uO)$RQSO,5>aO!>hQSO,5>aOOQO-E;s-E;sO)$]QSO1G5sOOQO,5>p,5>pOOQO-E<S-E<SOOQO,5>},5>}OOQO-E<a-E<aOOQO1G6y1G6yO)$eQSO7++[OOQO,5@],5@]O$$pQSO'#HvO)&QQSO,5@[O)&]QSO,5@^O)&jQSO'#CeOOQO'#Js'#JsOOQO,5@^,5@^O!(bQSO,5@^O)&wQSO,5@^OOQO1G0S1G0SO)'VQSO7++fO#GfQSO'#JuOOQO'#Ju'#JuOOQO'#Hw'#HwO)'VQSO7++fO#0ZQSO'#JuOOQO,5@e,5@eO)/oQSO'#KaO)/}QSO'#K`O)0VQSO,5;UOOQO'#K_'#K_OOQO'#EX'#EXO)0_QSO'#KOO)0dQSO'#J}O)0lQSO,5:tO)0qQSO,5:rOOQP1G5n1G5nO)0yQSO1G5nO)1OQSO1G5nOOQQ1G5r1G5rO)0yQSO1G5rO)1OQSO1G5rO)1dQSO7++iOOQO1G0X1G0XO!>hQSO7+'uO'+]QSO'#EwO)BfQSO,5AVO)BmQSO'#H}O)BrQSO,5@}O)K_QSO'#KjO)KgQSO'#EoO)KlQSO'#KiOOQO,5;Y,5;YO)KtQSO,5;YOOQO'#Kf'#KfOOQO,5AO,5AOO'!^QSO,5AOOOQO,5;[,5;[OOQO,5;b,5;bO)K|QSO'#KnO)LWQSO'#KmO)L`QSO'#KmOOQO,5;e,5;eO)LnQSO,5;eO)LvQSO'#CeO)MaQSO,59YO)MoQSO'#KlO&!VQSO'#KlO)M}QSO,5;cO)NSQSO'#ElOOQO'#Ke'#KeOOQO,5;^,5;^O$+dQSO,5;^O$+dQSO,5;^OOQO,5AV,5AVO)NbQSO,5AVOOQO,5;d,5;dOOQO,5A_,5A_OOQO7+(T7+(TOOQO7++Q7++QO)NiQSO7++QOOQO1G2V1G2VO)NnQSO,5<jO)NuQSO'#MOO* SQSO,5<lO$,nQSO7+(TOOQO7+,b7+,bO* XQSO7+-uO$;cQSO7+-uOOQO1G8[1G8[O#,PQSO,5ByO$;cQSO1G8_O!>hQSO1G8`O* rQSO1G8`O!>hQSO1G8dOOQO'#M['#M[O* wQSO,5BuOOQO1G0h1G0hO*!cQSO,5@sO*!mQSO,5@`O$={QSO'#H{O*!rQSO,5@rOOQO1G0c1G0cO*!zQSO1G0dO*#PQSO'#CeO*%wQSO'#JiO*&RQSO'#KRO*&ZQSO'#E[OOQO'#KS'#KSO*&eQSO,5:uO!>hQSO'#KSO*&mQSO,5<nOOQO7+'s7+'sOOQO7+%v7+%vO*)tQSO7+'sO**}QSO'#LOO*+XQSO'#LOOOQO,5;q,5;qO*+aQSO,5;qO$FrQSO,5AbO*+iQSO,5:PO*+wQSO,59uO*.QQSO,5@YO*/tQSO,5AzO*1hQSO,5@bO#0ZQSO,5@bOOQO-E<X-E<XO%&[QSO,5AmO-cQSO,5AmO*3[QSO'#L^OOQO,5;v,5;vOOQO'#L^'#L^OOQO-E<T-E<TOOQO1G1Y1G1YO*4yQSO,5:OO*5sQSO,59uO*6yQSO,59uOOQO,5B],5B]O!(bQSO,5;oO*;zQSO'#KfO*<UQSO,5;oOOQO,5;o,5;oO%&SQSO,5AmO#6XQSO,5;sOOQO,5Ay,5AyO(0vQSO,5A}O(0vQSO,5BSO$$yQSO'#DeO*<ZQSO,5BTOOQSO'#L_O*<`QSO'#FlO(0vQSO,5BUO*>nQSO'#FnO(0vQSO,5BXO*?PQSO,59uO(4dQSO,5BXO*?^QSO,5BZO!>hQSO,5BZO*?cQSO,5B[OOQO,5B[,5B[O!>hQSO,5B[O(0vQSO,5BaO*?jQSO'#FxO(0vQSO,5BbO!>hQSO,5BdO*?}QSO,5BdO-cQSO'#F{O(0vQSO,5BeO*@SQSO,5AeOOQO,5Ae,5AeO(5yQSO'#KyOOQO,5Ad,5AdO*@eQSO,5BOOOQO,5BY,5BYO*@jQSO,5B^O,zQSO'#JWO,zQSO,59aO*@rQSO'#KZO*ATQSO'#KYO*AcQSO1G0fOOQO1G0f1G0fOOQO1G0j1G0jO$%VQSO'#H|O*AhQSO,5@vOOQO1G0n1G0nOOQO7+,v7+,vO*ApQSO7+,vOBhQSO7+,vO!>hQSO7+,vO*A}QSO7+,vO(8oQSO7+,vO#0ZQSO,5CqO#6XQSO7+.UO*B]QSO7+.VO%!WQSO7+.[O%!eQSO7+.eOOQO7+.i7+.iOOQO7+.n7+.nO*BbQSO7+.xO#4yQSO7+.WOOQO7+.W7+.WOOQO7+.u7+.uO*BgQSO7+.UOOQO7+.V7+.VOOQO7+.[7+.[OOQO7+.e7+.eO(CsQSO7+.eO*BlQSO7+.xO*BqQSO1G9WO*ByQSO1G9UO*COQSO1G9UO*CTQSO1G9WO*COQSO1G9XO$LqQSO,5CZO*CYQSO,5CZO$LqQSO,5C]O(:kQSO'#MqOOQO,5CY,5CYO(:wQSO'#MqO*CeQSO'#MoO*CqQSO'#MoOOQO1G3W1G3WOOQO,5C[,5C[OOQO,5CZ,5CZOOQO,5C],5C]OOQO1G9R1G9RO*CvQSO1G9RO#5XQSO7+.xO!>hQSO,5AlO#6XQSO'#IYO*C}QSO,5AkOOQO7+.U7+.UO*DVQSO'#CeO*DkQSO,5CTO*DsQSO,5CTOOQO,5CW,5CWOOQO,5Cf,5CfOOQO1G8n1G8nOOQO1G8q1G8qOOQO1G9P1G9PO*D{QSO'#K|OOQO'#K|'#K|OOQO1G7R1G7RO()lQSO1G7ROOQO,5>s,5>sOOQO-E<V-E<VO*EYQSO,5CXO!>hQSO,5CXO()lQSO'#MrOOQO,5CX,5CXO*EaQSO,5=tO*EfQSO'#MlO(CnQSO,5CVO*EkQSO'#HVOOQO1G9Y1G9YO*EvQSO1G9YOOQO1G9_1G9_O%!tQSO'#I^O*E}QSO,5AuOOQO,5Av,5AvO*FfQSO,5AtO*FkQSO,5AwOOQO1G4b1G4bO*FpQSO7+/aO%%VQSO7+.|O*FzQSO7+.|OOQO7+.|7+.|O*GPQSO,5CwOOQO7+/V7+/VO%%}QSO7+/YO*GXQSO7+/UO!(oQSO7+/UO*GaQSO7+/XO%&SQSO7+/UO%%}QSO7+/VO%!`QSO7+/YO%&[QSO7+/XO*GfQSO'#NfO*GqQSO,5=}O*GvQSO'#NfO*G{QSO'#NfOOQO7+/Y7+/YO*GXQSO7+/UOOQO7+/U7+/UOOQO7+/X7+/XOOQO1G3p1G3pOOQOLD3gLD3gO*HQQSOLD3gO*JgQSOLD3gO*JoQSOLD3gO*JzQSOLD/ZOOQOLD/ZLD/ZOIcQSOLD/ZO*MaQSOLD3WOOQOLD3WLD3WOLQQSOLD3WO+ vQSOLD3[OOQOLD3[LD3[O!!|QSOLD3[OOQOLD3oLD3oO+$]QSOLD3oOOQO7++a7++aO+$eQSO1G3{OOQO,5>b,5>bOOQO-E;t-E;tOOQO1G5x1G5xO!(bQSO1G5xO+$oQSO<= QOOQO,5@a,5@aOOQO-E;u-E;uO!>hQSO,5@{O+-XQSO,5@{O&!VQSO'#ITO+/aQSO,5@zOOQO1G0p1G0pO+/iQSO1G0pO+/nQSO,5@jO+/{QSO'#HxO+0TQSO,5@iO+0]QSO1G0`OOQO1G0^1G0^OOQO'#Hs'#HsO+0bQSO7++YO+0jQSO7++YO+0rQSO7++^O+0zQSO7++^O+1SQSO<<KaOOQO1G6q1G6qO+2oQSO1G6qOOQO'#Dx'#DxOOQO,5>i,5>iOOQO-E;{-E;{O!(bQSO'#IPO+;[QSO,5AUO&!VQSO,5;ZO!(bQSO'#IQO+;dQSO,5ATOOQO1G0t1G0tO+;lQSO1G0tOOQO1G6j1G6jO+;qQSO,5AYO'+UQSO'#ISO+<PQSO,5AXOOQO1G1P1G1PO+<XQSO1G1PO'+]QSO'#IRO+<^QSO,5AWO+<fQSO,5AWOOQO1G0}1G0}O+<tQSO'#KhO+<|QSO,5;WOOQO'#Kg'#KgOOQO1G0x1G0xO+?kQSO1G0xOOQO'#Gq'#GqO+@tQSO'#M`OOQO<<Nl<<NlOOQO1G2U1G2UO!>hQSO'#IbO+@yQSO,5BjOOQO1G2W1G2WOOQO<<Ko<<KoO+AUQSO<=#aOOQO1G8e1G8eO+AoQSO7+-yO+BYQSO7+-zO!>hQSO7+-zO+BaQSO7+.OO+C|QSO1G8aO!>hQSO'#IdO+DhQSO1G6_O!>hQSO1G6_O+DrQSO1G5zOOQO,5>g,5>gOOQO-E;y-E;yOOQO7+&O7+&OO+DwQSO'#HzO+EUQSO,5@mO+E^QSO'#KTO+EhQSO,5:vO!>hQSO'#KTOOQO1G0a1G0aO+EmQSO1G0aO+ErQSO,5@nOOQO1G2Y1G2YOOQO<<K_<<K_O()lQSO'#IWO+E|QSO,5AjOOQO1G1]1G1]O+FUQSO1G1^OOQO1G6|1G6|O+FZQSO1G5|O%&SQSO1G7XO%&[QSO1G7XO+G}QSO,5AxO!>hQSO,5AxOOQO1G7w1G7wOOQO1G1Z1G1ZO+HUQSO1G1ZO+J^QSO1G7XO!(oQSO1G7XOOQO1G1_1G1_O+JiQSO1G7iOOQO1G7n1G7nO+NpQSO,5:PO#1TQSO1G7oO+N{QSO'#LlOOQO'#Lk'#LkO, WQSO,5<WO, bQSO,5<WO!(bQSO'#FTO!>hQSO'#DZOOQO1G7p1G7pO',gQSO,5<YO)&wQSO,5<YOOQO1G7s1G7sO(0vQSO1G7sOOQO1G7u1G7uO, gQSO1G7uOOQO1G7v1G7vO, nQSO1G7vOOQO1G7{1G7{OOQO'#Lw'#LwO, uQSO'#LwO, |QSO,5<dO,!RQSO'#FTOOQO1G7|1G7|O,!ZQSO1G8OOOQO1G8O1G8OO,!bQSO,5<gOOQO1G8P1G8POOQO1G7P1G7PO,!gQSO'#FgOOQO1G7j1G7jOOQO'#I`'#I`O,!rQSO'#LsO,'PQSO'#LsO,'XQSO1G7xOOQSO1G7xO,+cQSO,5?rO,+wQSO1G.{O,,]QSO,5@uOOQO,5@u,5@uO,,eQSO'#KZO,zQSO'#KYOOQO,5@t,5@tOOQO7+&Q7+&QOOQO,5>h,5>hOOQO-E;z-E;zOBhQSO<=!bOOQO<=!b<=!bO,,mQSO<=!bO!>hQSO<=!bOOQO1G9]1G9]O,,zQSO<=#pOOQO<=#q<=#qOOQO<=#v<=#vOOQO<=$P<=$PO(CsQSO<=$PO,-PQSO<=$dOOQO<=#r<=#rOOQO<=#p<=#pO#5XQSO<=$dO#1dQSO'#H]OOQO7+.r7+.rO#1dQSO'#H[OOQO7+.p7+.pO#1dQSO'#H[OOQO7+.s7+.sOOQO1G8u1G8uO$LqQSO1G8uO$LqQSO1G8wOOQO1G8w1G8wO*C]QSO,5C]O,-UQSO,5CZOOQO7+.m7+.mOOQO<=$d<=$dO,-ZQSO1G7WOOQO,5>t,5>tOOQO-E<W-E<WOOQO1G8o1G8oO% tQSO1G8oOOQO1G8r1G8rOOQO1G9Q1G9QOOQO7+,m7+,mOOQO1G8s1G8sO,-eQSO1G8sO,-lQSO,5C^OOQO1G3`1G3`O,-qQSO'#CeO,-|QSO,5CWO,.UQSO'#MuO,.aQSO'#MtO,.iQSO'#MtO,.qQSO,5=qO#0tQSO'#MuO#0tQSO'#MvOOQO7+.t7+.tOOQO,5>x,5>xOOQO-E<[-E<[OOQO1G7`1G7`OOQO1G7c1G7cO,.vQSO<=$hOOQO<=$h<=$hO,.{QSO1G9cO,/TQSO'#IjOOQO<=$t<=$tO,/YQSO<=$pOOQO<=$p<=$pO,/YQSO<=$pOOQO<=$s<=$sO!(oQSO<=$pOOQO<=$q<=$qO%%}QSO<=$tO,/bQSO<=$sO,/gQSO,5DQO,/lQSO,5DQOOQO1G3i1G3iO,/qQSO,5DQO,/|QSO,5DQOOQO!$()R!$()RO,0XQSO!$()RO,2nQSO!$()ROOQO!$($u!$($uO,2vQSO!$($uOOQO!$((r!$((rO,5]QSO!$((rOOQO!$((v!$((vO,7rQSO!$((vOOQO!$()Z!$()ZOOQO7++d7++dO,:XQSO1G6gO,;yQSO1G6gOOQO,5>o,5>oOOQO-E<R-E<ROOQO7+&[7+&[O,<QQSO'#JiOOQO'#KP'#KPOOQO1G6U1G6UO,<[QSO1G6UOOQO,5>d,5>dOOQO-E;v-E;vOOQO7+%z7+%zOOQO-E;q-E;qOOQP<<Nt<<NtO)0yQSO<<NtOOQQ<<Nx<<NxO)0yQSO<<NxOOQO7+,]7+,]OOQO,5>k,5>kOOQO-E;}-E;}O,<fQSO1G0uOOQO,5>l,5>lOOQO-E<O-E<OOOQO7+&`7+&`OOQO,5>n,5>nO,<tQSO,5>nOOQO-E<Q-E<QOOQO7+&k7+&kO,=SQSO,5>mO&!VQSO,5>mOOQO-E<P-E<PO,=bQSO1G6rO',gQSO'#IOO,=jQSO,5ASOOQO1G0r1G0rO!>hQSO,5BzO,=rQSO,5>|OOQO-E<`-E<`O!>hQSO<=#fO,>PQSO<=#fOOQO-E<b-E<bO'FqQSO,5?OO,>WQSO7++yO,?VQSO'#ClOOQO7++y7++yOOQO,5>f,5>fOOQO-E;x-E;xO,?dQSO'#HyO,?nQSO,5@oOOQO1G0b1G0bO,?vQSO,5@oOOQO7+%{7+%{O,@QQSO,5>rOOQO,5>r,5>rOOQO-E<U-E<UOOQO7+&x7+&xO,@[QSO7+,sO!(oQSO7+,sO%&SQSO7+,sOOQO1G7d1G7dO,@gQSO1G7dO,BUQSO7+&uO,@[QSO7+,sO(0vQSO7+-TO,E{QSO7+-ZO,FQQSO'#I_O,HPQSO,5BWO,H[QSO1G1rO,J^QSO1G1rO,JeQSO1G1rO,JoQSO1G1tO',gQSO1G1tOOQO7+-_7+-_OOQO7+-a7+-aOOQO7+-b7+-bOOQO1G2O1G2OOOQO7+-j7+-jO,JtQSO'#L{O,JyQSO'#LzO,KRQSO1G2ROOQO,5<R,5<RO,KWQSO,5<RO&!VQSO'#LeO,K]QSO'#LeOOQO-E<^-E<^O,'PQSO,5B_O-cQSO'#FuO,KbQSO,5B`O#1TQSO,5B`OOQO,5B_,5B_OOQSO7+-dOOQO7+-d7+-dOOQO1G6`1G6`OOQO1G6a1G6aO,KjQSO,5@tOOQOANE|ANE|OBhQSOANE|O,KuQSOANE|OOQOANG[ANG[OOQOANGkANGkO#5XQSOANHOOOQOANHOANHOO#1dQSO'#NPO#(vQSO'#NPO-cQSO'#NPO,LSQSO,5=wO,LXQSO,5=vO,LaQSO,5=vOOQO7+.a7+.aOOQO7+.c7+.cOOQO7+.Z7+.ZOOQO7+.^7+.^OOQO7+.l7+.lOOQO7+._7+._OOQO1G8x1G8xO(CnQSO1G8rO#0tQSO,5CaO#0tQSO,5CbO,LfQSO'#MvOOQO,5C`,5C`O,LnQSO'#MuOOQO1G3]1G3]OOQO,5Ca,5CaOOQO,5Cb,5CbOOQOANHSANHSOOQO-E<h-E<hO$6aQSO,5?UOOQOANH[ANH[O,LvQSOANH[O,LvQSOANH[OOQOANH`ANH`OOQOANH_ANH_O,MOQSO1G9lO,MZQSO1G9lO,MfQSO1G9lO,MnQSO1G9lO,MsQSO1G9lOOQO!)9Lm!)9LmO,M{QSO!)9LmOOQO!)9Ha!)9HaOOQO!)9L^!)9L^OOQO!)9Lb!)9LbO!>hQSO7+,ROOQO7++p7++pO-!bQSOAND`O-!jQSOANDdO-!rQSO1G4XOOQO,5>j,5>jOOQO-E;|-E;|O-#QQSO1G8fO-#XQSOANGQO!>hQSOANGQOOQO1G4j1G4jO-#`QSO,5>eO!>hQSO,5>eOOQO-E;w-E;wO-#jQSO1G6ZO-#rQSO<=!_O-#rQSO<=!_O!(oQSO<=!_OOQO7+-O7+-OOOQO,5:p,5:pOOQO<=!o<=!oOOQO<=!u<=!uOOQO,5>y,5>yOOQO-E<]-E<]OOQO7+'^7+'^O-#}QSO7+'^O-$SQSO7+'^O-&UQSO7+'^O!>hQSO7+'`O-&]QSO7+'`O!>hQSO,5BgO,!bQSO'#IaO-&bQSO,5BfOOQO7+'m7+'mOOQO1G1m1G1mO-&jQSO,5BPO-&xQSO,5BPP,'PQSO'#LtOOQO1G7y1G7yO-*lQSO,5<aOOQO1G7z1G7zO#1TQSO1G7zO#0tQSO1G7zOOQO<=#O<=#OOOQOG2;hG2;hOBhQSOG2;hOOQOG2=jG2=jO#(vQSO,5CkO-cQSO,5CkO-*tQSO,5CkO#1dQSO1G3cOOQO1G3b1G3bOOQO1G8{1G8{OOQO1G8|1G8|OOQO1G4p1G4pOOQOG2=vG2=vO-+PQSOG2=vO-+XQSO7+/WO-+aQSO7+/WO-+fQSO7+/WOOQO7+/W7+/WOOQO!.KBX!.KBXO-+nQSO<= mOOQPG29zG29zOOQQG2:OG2:OO)NiQSO7+.QO$;cQSOG2<lO-+xQSOG2<lO-,PQSO1G4PO-,ZQSOANEyO-,ZQSOANEyOOQO<<Jx<<JxO-,fQSO<<JxO-,kQSO<<JxO-.mQSO<<JzO!>hQSO<<JzO-.tQSO1G8ROOQO,5>{,5>{OOQO-E<_-E<_O-/OQSO1G7kO!>hQSO1G7kO-2rQSO'#LfO&!VQSO'#LfO-6fQSO'#LfOOQO1G7k1G7kOOQO1G1{1G1{O-6nQSO1G1{O#0tQSO7+-fOOQO7+-f7+-fOOQOLD1SLD1SO-6sQSO1G9VO#(vQSO1G9VO!>hQSO1G9VO-7OQSO7+(}OOQOLD3bLD3bO-7TQSO<=$rOOQO<=$r<=$rOOQO<=#l<=#lO-7YQSOLD2WO$;cQSOLD2WO-7vQSOG2;eOOQOAN@dAN@dO-8RQSOAN@dOOQOAN@fAN@fO-8WQSOAN@fOOQO7+-V7+-VO-8_QSO7+-VOOQO,5BQ,5BQO-8fQSO,5BQO-8tQSO,5BQOOQO7+'g7+'gOOQO<=#Q<=#QO!>hQSO7+.qO-8{QSO7+.qO-9WQSO7+.qOOQO<<Li<<LiOOQOANH^ANH^O-9bQSO!$('rO-9gQSO!$('rOOQOG26OG26OOOQOG26QG26QO-:TQSO<=!qO-=wQSO1G7lO!>hQSO1G7lO-AkQSO1G7lO-ArQSO<=$]O!>hQSO<=$]OOQO!)9K^!)9K^O-A|QSO!)9K^OOQOANF]ANF]OOQO7+-W7+-WO-BRQSO7+-WO-BYQSOANGwOOQO!.K@x!.K@xO-BdQSO<=!rOOQOANF^ANF^O8gQSO'#JQO8gQSO'#JQO-FWQSO,5?lO!>hQSO'#DZO-LwQSO'#GbO.#PQSO'#GbO.&^QSO'#GbO$;cQSO'#DdO+HUQSO'#DdO!>hQSO'#DdO.)kQSO'#DdO$;cQSO'#DZO+HUQSO'#DZO.)kQSO'#DZO.+sQSO'#JaO$;cQSO'#DZO+HUQSO'#DZO.)kQSO'#DZO#0`QSO'#EUO.0oQSO'#CeO.0vQSO'#CeO.3kQSO,5@UO.3rQSO,5@UO.5}QSO,5@UO.8YQSO,5@UO.:eQSO,5<oO.:lQSO,5<oO.<wQSO,5<oO.?SQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO$;cQSO,5<oO+HUQSO,5<oO+-XQSO,5<oO.)kQSO,5<oO.A_QSO,5<|O.EgQSO,5<|O.HtQSO,5<|O.LwQSO,5<|O-cQSO,5<oO/!UQSO,5<}O/!]QSO,5<}O/$hQSO,5<}O/&sQSO,5<}O()yQSO'#CeO/)OQSO,59uO/+sQSO,59uO/-SQSO,59uO/1rQSO,59uO/4VQSO,59uO$;cQSO'#M]O+HUQSO'#M]O.)kQSO'#M]O+-XQSO'#M]O$ExQSO,5:pO/7^QSO'#ClO/:kQSO'#CeO/;zQSO'#ClO/<YQSO1G5pO/=iQSO1G5pO/BXQSO1G5pO/CUQSO1G5pO$;cQSO1G5pO+HUQSO1G5pO+-XQSO1G5pO.)kQSO1G5pO/HxQSO1G2ZO0 OQSO1G2ZO0#cQSO1G2ZO0(QQSO1G2ZO0*tQSO1G2ZO01QQSO1G2ZO03bQSO1G2ZO03lQSO1G2ZO06QQSO1G2ZO0<ZQSO1G2ZO0>nQSO1G2ZO0C]QSO1G2ZO0CgQSO1G2ZO0CqQSO1G2ZO0C{QSO1G2ZO0DVQSO1G2ZO0F|QSO1G2ZO0MSQSO1G2ZO1 gQSO1G2ZO1&UQSO1G2ZO1&`QSO1G2ZO1&jQSO1G2ZO1&tQSO1G2ZO1'OQSO1G2ZO1)xQSO1G2ZO10OQSO1G2ZO12cQSO1G2ZO17QQSO1G2ZO17XQSO1G2ZO17`QSO1G2ZO17gQSO1G2ZO17nQSO1G2ZO1:eQSO1G2ZO1@kQSO1G2ZO1COQSO1G2ZO1GmQSO1G2ZO1GtQSO1G2ZO1G{QSO1G2ZO1HSQSO1G2ZO1HZQSO1G2ZO1IuQSO1G2ZO2 xQSO1G2ZO2$rQSO1G2ZO2(zQSO1G2ZO2*aQSO'#CeO2+WQSO'#CeO21hQSO'#CeO&!VQSO'#EpO26aQSO'#EpO27ZQSO'#EpO&!VQSO'#ErO26aQSO'#ErO27ZQSO'#ErO28TQSO'#MSO29dQSO'#MSO2>SQSO'#MSO2?PQSO'#MSO/!UQSO1G2iO/!]QSO1G2iO/$hQSO1G2iO/&sQSO1G2iO2BWQSO,5BwO2CgQSO,5BwO2HVQSO,5BwO2K^QSO,5BwO3!OQSO1G2XO3#bQSO1G2XO3&PQSO,5AgO3(_QSO,5AgO3*mQSO7++[O3+|QSO7++[O30lQSO7++[O31iQSO7++[O$;cQSO7+'uO+HUQSO7+'uO+-XQSO7+'uO.)kQSO7+'uO&!VQSO,5;^O26aQSO,5;^O27ZQSO,5;^O&!VQSO,5;^O26aQSO,5;^O27ZQSO,5;^O/!UQSO7+(TO/!]QSO7+(TO/$hQSO7+(TO/&sQSO7+(TO34pQSO,5ByO35XQSO,5ByO35pQSO,5ByO36XQSO,5ByO$;cQSO1G8dO+HUQSO1G8dO.)kQSO1G8dO+-XQSO1G8dP3:eQSO7+'sO3;wQSO7+'sO+HUQSO,5AlO3>fQSO'#K|O3@wQSO'#K|O3DqQSO1G7RO3F|QSO1G7RO3IXQSO<<KaO3JhQSO<<KaO4 WQSO<<KaO4!TQSO<<KaO4%[QSO1G0xO4%yQSO1G0xO4)mQSO1G0xO4.^QSO7+.OO4/mQSO7+.OO44]QSO7+.OO47dQSO7+.OO!>hQSO1G1ZO48aQSO1G7WO4<ZQSO7+&uO+-XQSO'#DZO4<eQSO'#JaO4>dQSO'#JaO4AtQSO'#JaO4CaQSO'#JaO4GTQSO'#JaO4ISQSO'#JaO4LsQSO'#JaO4N`QSO'#JaO5$VQSO'#GbO5(YQSO'#GcO5(_QSO'#GcO5(dQSO'#GcO5(iQSO'#GcO+-XQSO'#DdO5(nQSO'#DZO+-XQSO'#DZO34pQSO'#JaO35XQSO'#JaO35pQSO'#JaO36XQSO'#JaO5)zQSO,5@YO27ZQSO,5<oO26aQSO,5<oO5*PQSO,5<}O5*UQSO,5<}O5*ZQSO,5<}O5*`QSO,5<}O34pQSO'#MUO35XQSO'#MUO35pQSO'#MUO36XQSO'#MUO$ExQSO,5:pO5+iQSO'#K{O5,{QSO'#K{O5-SQSO1G2ZO5-ZQSO1G2ZO5-bQSO1G2ZO5-iQSO1G2ZO5-pQSO1G2ZO5/]QSO1G2ZO5/jQSO1G2iO5/oQSO1G2iO5/tQSO1G2iO5/yQSO1G2iO50OQSO'#M_O50TQSO'#M_O50YQSO'#M_O50_QSO'#M_O50dQSO,5BxO50kQSO,5BxO50rQSO,5BxO50yQSO,5BxO51QQSO'#LQO!(bQSO'#IXO!(bQSO'#IXO52WQSO,5AfO53jQSO,5AfO!(bQSO,5;oO56tQSO,5;oO#6XQSO'#IYO56yQSO,5AkO5;QQSO'#I}O#(sQSO'#GcO#(sQSO'#GcO#(sQSO'#GcO#(sQSO'#GcO#+ZQSO'#KpO#+ZQSO'#KpO#+ZQSO'#KpO#+ZQSO'#KpO#+iQSO'#GcO#+iQSO'#GcO#+iQSO'#GcO#+iQSO'#GcO#0`QSO'#EUO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO!>hQSO,5<oO#(sQSO,5<}O#(sQSO,5<}O#(sQSO,5<}O#(sQSO,5<}O5=iQSO'#MUO5>VQSO'#MUO5AyQSO'#MUO5BTQSO'#MUO!>hQSO'#M^O!>hQSO'#M^O!>hQSO'#M^O!>hQSO'#M^O5EjQSO'#KzO5F|QSO'#KzO5LaQSO,5BpO5L}QSO,5BpO6!qQSO,5BpO6!{QSO,5BpO6%aQSO'#FTO',gQSO'#FTO6%oQSO'#LPO6)vQSO'#DZ",
  stateData: "6+S~O'kOS'lOSPOSQOSROS~OT]OW^OcaOk_OlbOm`O!hbO!ybO#rbO#siO#xbO$PbO$TfO$UgO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO&ThO&WcO&XdO~O'c'mP~PcO'c'mX~PcOTbOW^OcaOk_OlbOm`O!hbO!ybO#rbO#siO#xbO$PbO$TfO$UgO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO&ThO&WcO&XdO~O'c'mX~P#nOTbOcaOlbO!hbO!ybO#rbO#suO#xbO$PbO$TrO$UsO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO&TtO&WpO&XqO~OTbOlbO!hbO!ybO#rbO#suO#xbO$PbO$TrO$UsO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO&TtO&WpO&XqO~OTbOcaOlbOm`O!hbO!ybO#rbO#siO#xbO$PbO$TfO$UgO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO&ThO&WcO&XdO~O'c'mX~P)VOUxOT+TXl+TX!h+TX!y+TX#r+TX#s+TX#x+TX$P+TX$T+TX$U+TX%f+TX%g+TX%h+TX%i+TX%j+TX%k+TX%l+TX%m+TX%n+TX%o+TX%p+TX%q+TX&T+TX&W+TX&X+TX~Ol}O'oyO~OW!OO~O'o!RO~O$U!XO'oyO~O^!`O'oyO'u!^O~O'c'ma~P#nO'c'ma~P)VOTbOlbO!hbO!ybO#rbO#s!jO#xbO$PbO$T!gO$U!hO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO&T!iO&W!eO&X!fO~O$U!lO'oyO~O'o!rO~OY!xOZ!wOh!sOj!tOV'qX~Oh!sOV'qX^'qXa'qXd'qXc'qXe'qXf'qXo'qX$S'qXr'qX#p'qX~OV!yO~Ol!xO'oyO~Oh!{OT'}XV'}Xc'}Xl'}Xm'}Xo'}X!h'}X!y'}X#r'}X#s'}X#x'}X$P'}X$T'}X$U'}X%f'}X%g'}X%h'}X%i'}X%j'}X%k'}X%l'}X%m'}X%n'}X%o'}X%p'}X%q'}X&T'}X&W'}X&X'}X'c'}Xn'}X~OV#OOo!}OT'|ac'|al'|am'|a!h'|a!y'|a#r'|a#s'|a#x'|a$P'|a$T'|a$U'|a%f'|a%g'|a%h'|a%i'|a%j'|a%k'|a%l'|a%m'|a%n'|a%o'|a%p'|a%q'|a&T'|a&W'|a&X'|a'c'|an'|a~Or#QOZXX^XXaXXdXXhXXjXX~OZ!wOj!tO~P0]Oa#ROd(QX~O^#TOa(RXd(RX~Oa#WOd#VO~OZ#bO^#XOo#[Or#^O$S#]O~OV#_O~P6yOo#fOr#eO~OZ#bOo#[Or#lO$S#]O~OZ#bOo#oOr#qO$S#]O~OZ#uOo#tOr#wO$S#]O~Oc#yOe#|Of$OO~OUxO~O'c'mi~P)VO$U$UO'oyO~OV$]O~P6yOZ#bOo#[Or$fO$S#]O~OZ#bOo#oOr$jO$S#]O~OZ#uOo#tOr$nO$S#]O~OV$qO~Oh!sOV'qa^'qaa'qad'qac'qae'qaf'qao'qa$S'qar'qa#p'qa~OV$xO~Oh!{OT'}aV'}ac'}al'}am'}ao'}a!h'}a!y'}a#r'}a#s'}a#x'}a$P'}a$T'}a$U'}a%f'}a%g'}a%h'}a%i'}a%j'}a%k'}a%l'}a%m'}a%n'}a%o'}a%p'}a%q'}a&T'}a&W'}a&X'}a'c'}an'}a~On$}O~PcOV%POT'|ic'|il'|im'|i!h'|i!y'|i#r'|i#s'|i#x'|i$P'|i$T'|i$U'|i%f'|i%g'|i%h'|i%i'|i%j'|i%k'|i%l'|i%m'|i%n'|i%o'|i%p'|i%q'|i&T'|i&W'|i&X'|i'c'|in'|i~Oa#ROd(Qa~O^%ZOe%[Ol%zOv%YOw%YOx%YOy%YO|%bO!O%[O!P%[O!Q%[O!R%[O!S%[O!T%[O!U%tO!V%tO!Y%[O!Z%uO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#n%iO#r%yO#s&QO$q%xO%X%{O'o%TO'u!^O(X%WO(Y%XO~O]%qO~P?rOd&VO~O^!`OcaO!h&^O!q&^O!r&^O!s&aO!v&_O$R&`O'oyO'u!^O~O]&ZO~PBhOV$]O^#XOo#[Or#^O$S#]O~OTbO^!`OcaOlbO!R&gO!hbO!ybO#rbO#siO#xbO#|&lO$PbO$TfO$UgO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO%x&nO&ThO&WcO&XdO'oyO'u!^O~On&kO~PCrOV$]Oo#[O~OcaO'oyO~OV$]OT,]ic,]il,]im,]i!h,]i!y,]i#r,]i#s,]i#x,]i$P,]i$T,]i$U,]i%f,]i%g,]i%h,]i%i,]i%j,]i%k,]i%l,]i%m,]i%n,]i%o,]i%p,]i%q,]i&T,]i&W,]i&X,]i'c,]in,]i^,]i!R,]i#|,]i%x,]i'o,]i'u,]i$n,]i~OV$]Oo#[Or#^O~OcaO'o&wOa,dP~Oo#fO~Oo#[O$S#]O~OV&}OT(Pic(Pil(Pim(Pi!h(Pi!y(Pi#r(Pi#s(Pi#x(Pi$P(Pi$T(Pi$U(Pi%f(Pi%g(Pi%h(Pi%i(Pi%j(Pi%k(Pi%l(Pi%m(Pi%n(Pi%o(Pi%p(Pi%q(Pi&T(Pi&W(Pi&X(Pi'c(Pin(Pi^(Pi!R(Pi#|(Pi%x(Pi'o(Pi'u(Pi$n(Pi~Oo#oO$S#]O~OTbO^!`OcaOlbO!hbO!ybO#rbO#siO#xbO#|&lO$PbO$TfO$UgO$n'WO%fbO%gbO%hbO%ibO%jbO%kbO%lbO%mbO%nbO%obO%pbO%qbO%x&nO&ThO&WcO&XdO'oyO'u!^O~On'VO~PLYOV'XOT+|ic+|il+|im+|i!h+|i!y+|i#r+|i#s+|i#x+|i$P+|i$T+|i$U+|i%f+|i%g+|i%h+|i%i+|i%j+|i%k+|i%l+|i%m+|i%n+|i%o+|i%p+|i%q+|i&T+|i&W+|i&X+|i'c+|in+|i^+|i!R+|i#|+|i%x+|i'o+|i'u+|i$n+|i~Oo#tO$S#]O~O^!`OcaO!y'bO%x'aO'oyO'u!^O~On'_O~P!#UOcaO!q'eO!r'eO'oyO~OV'iOT,Qic,Qil,Qim,Qi!h,Qi!y,Qi#r,Qi#s,Qi#x,Qi$P,Qi$T,Qi$U,Qi%f,Qi%g,Qi%h,Qi%i,Qi%j,Qi%k,Qi%l,Qi%m,Qi%n,Qi%o,Qi%p,Qi%q,Qi&T,Qi&W,Qi&X,Qi'c,Qin,Qi^,Qi!R,Qi#|,Qi%x,Qi'o,Qi'u,Qi$n,Qi~Oa'kOd'mO~Oc#yO'o'taa'tag'ta^'ta!v'ta]'tao'ta~Oe#|Of$OO%}'ta#_'ta~P!&nOe#|O'o'yXa'yXg'yX^'yX!v'yX]'yXc'yXo'yX%}'yX#_'yX~Oa'sO'o'qO~O]'tO~OZ#uO^#XO~OV'xO~P6yOZ#bOo#[Or(SO$S#]O~OZ#bOo#oOr(WO$S#]O~OZ#uOo#tOr([O$S#]O~OV'xO^#XOo#[Or#^O$S#]O~OV'xOo#[O~OV'xOT,]qc,]ql,]qm,]q!h,]q!y,]q#r,]q#s,]q#x,]q$P,]q$T,]q$U,]q%f,]q%g,]q%h,]q%i,]q%j,]q%k,]q%l,]q%m,]q%n,]q%o,]q%p,]q%q,]q&T,]q&W,]q&X,]q'c,]qn,]q^,]q!R,]q#|,]q%x,]q'o,]q'u,]q$n,]q~OV'xOo#[Or#^O~OV(_OT(Pqc(Pql(Pqm(Pq!h(Pq!y(Pq#r(Pq#s(Pq#x(Pq$P(Pq$T(Pq$U(Pq%f(Pq%g(Pq%h(Pq%i(Pq%j(Pq%k(Pq%l(Pq%m(Pq%n(Pq%o(Pq%p(Pq%q(Pq&T(Pq&W(Pq&X(Pq'c(Pqn(Pq^(Pq!R(Pq#|(Pq%x(Pq'o(Pq'u(Pq$n(Pq~OV(aOT+|qc+|ql+|qm+|q!h+|q!y+|q#r+|q#s+|q#x+|q$P+|q$T+|q$U+|q%f+|q%g+|q%h+|q%i+|q%j+|q%k+|q%l+|q%m+|q%n+|q%o+|q%p+|q%q+|q&T+|q&W+|q&X+|q'c+|qn+|q^+|q!R+|q#|+|q%x+|q'o+|q'u+|q$n+|q~OV(cOT,Qqc,Qql,Qqm,Qq!h,Qq!y,Qq#r,Qq#s,Qq#x,Qq$P,Qq$T,Qq$U,Qq%f,Qq%g,Qq%h,Qq%i,Qq%j,Qq%k,Qq%l,Qq%m,Qq%n,Qq%o,Qq%p,Qq%q,Qq&T,Qq&W,Qq&X,Qq'c,Qqn,Qq^,Qq!R,Qq#|,Qq%x,Qq'o,Qq'u,Qq$n,Qq~OZ!wOh!sOV'za^'zaa'zad'zac'zae'zaf'zao'za$S'zar'za#p'za~OZ!wOViihii^iiaiidiiciieiifiioii$Sii]iirii#pii~Oa(jOg'sX]'sX~Og(lO~OV(mO~On(oO~PcOn(oO~P#nOn(oO~P)VOa(rOd(qO~Or(sOY!lXZXXZ!lXZ!oX]!lX^!lX^!oXa!lXcXXc!lXeXXe!lXfXXf!lXg!lXhXXh!lXjXX!O!lX!P!lX!Q!lX!S!lX!T!lX!U!lX!V!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!e!lX!g!lX#]!lX#e!lX#n!lX#p#uX#q!lX$p!lX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lX~OY%eX~P!7bOc#yOe#|Of$OOh(tO~Oh(vOc'qXe'qXf'qX~O^%ZOe%[Ol%zOv%YOw%YOx%YOy%YO|%bO!O%[O!P%[O!Q%[O!R%[O!S%[O!T%[O!U%tO!V%tO!Y%[O!Z%uO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#n%iO#r%yO#s&QO$q%xO%X%{O'u!^O(X%WO(Y%XO~O!h)PO!r)PO'o(wO])eP~P!;qO'o)SO~P!;qOY)VOZ!wO^)XOf)YOg)UOh(tO!Q)^O!U)^O!V)^O![)VO!])VO!^)VO!_)VO!`)VO!a)VO!b)VO!c)VO!d)VO!g)VO#])[O#q)]O$p)ZOa(TXe(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TXn(TX%^(TXV(TX~O](TXr(TXd(TX%d(TX%`(TX%a(TX%[(TX%](TX~P!>oOY)VOg)UO![)VO!])VO!^)VO!_)VO!`)VO!a)VO!b)VO!c)VO!d)VO!g)VOZ(TXa(TXe(TXf(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TXn(TX%^(TXV(TX~O](TXr(TXd(TX%d(TX%`(TX%a(TX%[(TX%](TX~P!B[OZ(]Xe(]Xf(]Xg(]X!O(]X!P(]X!S(]X!T(]X!e(]X#e(]X#n(]X$x(]X$y(]X$z(]X$|(]X$}(]X%O(]X%P(]X%Q(]X%R(]X%S(]X%T(]X~Oa)aO](SX~P!E_O'd)bO'e)cO'f)fO~O'g)gO'h)hO'i)kO~Oc)mOf)lOY(UXZ(UX](UX^(UXa(UXe(UXg(UXh(UX!O(UX!P(UX!Q(UX!S(UX!T(UX!U(UX!V(UX![(UX!](UX!^(UX!_(UX!`(UX!a(UX!b(UX!c(UX!d(UX!e(UX!g(UX#](UX#e(UX#n(UX#q(UX$p(UX$x(UX$y(UX$z(UX$|(UX$}(UX%O(UX%P(UX%Q(UX%R(UX%S(UX%T(UXn(UXr(UXd(UX%d(UX$S(UX%X(UX%Y(UX%Z(UX%_(UX%b(UX%c(UX%`(UX%a(UX%^(UXV(UX%[(UXT(UXl(UX!R(UX!h(UX!y(UX#r(UX#s(UX#x(UX#|(UX$P(UX$T(UX$U(UX%f(UX%g(UX%h(UX%i(UX%j(UX%k(UX%l(UX%m(UX%n(UX%o(UX%p(UX%q(UX%x(UX&T(UX&W(UX&X(UX'o(UX'u(UX$n(UX#p(UXW(UXo(UXv(UXw(UXx(UXy(UX|(UX!Y(UX!Z(UX!j(UX!k(UX!s(UX!t(UX!v(UX!w(UX#R(UX#T(UX#V(UX#X(UX#Y(UX#Z(UX$X(UX$](UX$^(UX$_(UX$a(UX$c(UX$d(UX$e(UX$f(UX$g(UX$k(UX$m(UX$q(UX(X(UX(Y(UX%](UX$[(UX~OZ)rOe)oOf)zOg)nO!O)pO!P)pO!S)tO!T)uO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O%O)sO%P)sO%Q)vO%R)wO%S)xO%T)yO~O^%ZOv%YOw%YOx%YOy%YO|%bO!U%tO!V%tO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#s&QO$q%xO'o)SO'u!^O(X%WO(Y%XOZ%UXf%UXg%UX!e%UX#e%UX#n%UX$x%UX$y%UX$z%UX$|%UX$}%UX%O%UX%P%UX%Q%UX%R%UX%S%UX%T%UXY%UX![%UX!]%UX!^%UX!_%UX!`%UX!a%UX!b%UX!c%UX!d%UX!g%UX%^%UX~Oe%[Ol%zO!O%[O!P%[O!Q%[O!R%[O!S%[O!T%[O!Y%[O!Z%uO#r%yO%X%{O]%UXa%UXn%UXr%UXd%UX%d%UX%`%UX%a%UXV%UX%[%UX%]%UX~P##gO#p*PO~O^*RO'o*QO~OY*UO~O]*VO~O^*]Ov%YOw%YOx%YOy%YO|%bO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O(X%WO(Y%XO~Oc)mOh*`O~O^!`Oc*cO'oyO'u!^O~O^*gO#s*iO'o*fO'u!^O~O^*gO'o*fO'u!^O~O^!`O'o*jO'u!^O~O$S*uO%X%{O%Y*qO%Z*rO%_*vO%b*wO%c*sO~O^*xOZ(TXa(TXe(TXf(TXg(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TXY(TX![(TX!](TX!^(TX!_(TX!`(TX!a(TX!b(TX!c(TX!d(TX!g(TXn(TX%^(TXV(TX~O](TXr(TXd(TX%d(TX$S(TX%X(TX%Y(TX%Z(TX%_(TX%b(TX%c(TX%`(TX%a(TX%[(TX#p(TX%](TX~P#,hOZ!wO^)XO~O^*yOc#yOo*zO'oyO'u!^O~O^+POo+QO~O^+TO~O^*xO~O^+UO~O^+VO~O]+YO~O^!`OcaO!h&^O!q&^O!r&^O!s&aO!v&_O'oyO'u!^O~O$R+[O~P#1dO!h&^O!q&^O!r&^O^)yX'o)yX'u)yX~O!s+^O~P#2YOZ!wO^#XOh!sOj!tOc'qXe'qXf'qX~O^!`O!R+fO#|+bO%x+dO'oyO'u!^O~P%rO^!`O!R+fO#|+bO%x+dO&Q+lO&R+lO'oyO'u!^O~P'fOo+mO#p+nO~On+sO~PCrO!v,OO'o+uO~OV,UOo+QO#p,TO$S#]O~OV,XOo+QO#p,WO~Or,ZO~O^)XOa,]OV,^ao,^a~Oa,aOg)wX~Og,bO~OcaO'o&wO~OY,dOa,cXn,cX~Oa,eOn,bX~Oa,gO~On,hOa,dX~Oa,jOo+UX$S+UX~O^!`O#|+bO$n,lO%x+dO'oyO'u!^O~P%rO^!`O#|+bO$n,lO%x+dO&Q+lO&R+lO'oyO'u!^O~P'fOn,nO~PLYO^!`OcaO!y,rO%x,qO'oyO'u!^O~On,tO~P!#UO!v,wO'o,uO~O^!`O%x,qO'oyO'u!^O~Oa,|Og,SX~Og-OO~Oa'kOd-QO~Oa-RO]'wa~OV-VO$S#]O~OV-WO^#XOo#[Or#^O$S#]O~OV-WOo#[O~OV-WOT,]yc,]yl,]ym,]y!h,]y!y,]y#r,]y#s,]y#x,]y$P,]y$T,]y$U,]y%f,]y%g,]y%h,]y%i,]y%j,]y%k,]y%l,]y%m,]y%n,]y%o,]y%p,]y%q,]y&T,]y&W,]y&X,]y'c,]yn,]y^,]y!R,]y#|,]y%x,]y'o,]y'u,]y$n,]y~OV-WOo#[Or#^O~OV-WO~P6yOV-`OT(Pyc(Pyl(Pym(Py!h(Py!y(Py#r(Py#s(Py#x(Py$P(Py$T(Py$U(Py%f(Py%g(Py%h(Py%i(Py%j(Py%k(Py%l(Py%m(Py%n(Py%o(Py%p(Py%q(Py&T(Py&W(Py&X(Py'c(Pyn(Py^(Py!R(Py#|(Py%x(Py'o(Py'u(Py$n(Py~Oo#[Or-cO$S#]O~OV-eOT+|yc+|yl+|ym+|y!h+|y!y+|y#r+|y#s+|y#x+|y$P+|y$T+|y$U+|y%f+|y%g+|y%h+|y%i+|y%j+|y%k+|y%l+|y%m+|y%n+|y%o+|y%p+|y%q+|y&T+|y&W+|y&X+|y'c+|yn+|y^+|y!R+|y#|+|y%x+|y'o+|y'u+|y$n+|y~Oo#oOr-hO$S#]O~OV-jOT,Qyc,Qyl,Qym,Qy!h,Qy!y,Qy#r,Qy#s,Qy#x,Qy$P,Qy$T,Qy$U,Qy%f,Qy%g,Qy%h,Qy%i,Qy%j,Qy%k,Qy%l,Qy%m,Qy%n,Qy%o,Qy%p,Qy%q,Qy&T,Qy&W,Qy&X,Qy'c,Qyn,Qy^,Qy!R,Qy#|,Qy%x,Qy'o,Qy'u,Qy$n,Qy~Oo#tOr-mO$S#]O~OV-qO$S#]O~Oh!sOV'zi^'zia'zid'zic'zie'zif'zio'zi$S'zir'zi#p'zi~Oa(jOg'sa]'sa~On-uO~P#nOn-uO~P)VOd-wO~O'o-xO~O'o-{O~O]#uXa#uX~P!7bO]-}O^*ROa'sO'o-|O~Oa.PO](aX~P#!POa.SO])fX~O].UO~Oa.VO]*uX#p*tX~O].XO~O].ZO~OY!lXZ!lXZ!oX]!lX^!lX^!oXa!lXc!lXe!lXf!lXg!lXh!lXjXX!O!lX!P!lX!Q!lX!S!lX!T!lX!U!lX!V!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!e!lX!g!lX#]!lX#e!lX#n!lX#q!lX$p!lX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lXn!lXr!lXd!lX%d!lX$S!lX%X!lX%Y!lX%Z!lX%_!lX%b!lX%c!lX%`!lX%a!lX%^!lXV!lX%[!lXT!lXl!lX!R!lX!h!lX!y!lX#r!lX#s!lX#x!lX#|!lX$P!lX$T!lX$U!lX%f!lX%g!lX%h!lX%i!lX%j!lX%k!lX%l!lX%m!lX%n!lX%o!lX%p!lX%q!lX%x!lX&T!lX&W!lX&X!lX'o!lX'u!lX$n!lXW!lXo!lXv!lXw!lXx!lXy!lX|!lX!Y!lX!Z!lX!j!lX!k!lX!s!lX!t!lX!v!lX!w!lX#R!lX#T!lX#V!lX#X!lX#Y!lX#Z!lX$X!lX$]!lX$^!lX$_!lX$a!lX$c!lX$d!lX$e!lX$f!lX$g!lX$k!lX$m!lX$q!lX(X!lX(Y!lX%]!lX$[!lX~OZXXcXXeXXfXXhXX#p#uX~P#IWO!e.[O~O!h.^O'o)SO~P!;qO].cO!h.dO!q.dO!r.eO'oFuO~P!;qOh.gO~O'o.iO~Oo.kO~Oo.mO~O'd)bO'e)cO'f.tO~O'g)gO'h)hO'i.wO~Oc)mO~Og.zO'o)SO~P!;qO^%ZOv%YOw%YOx%YOy%YO|%bO!U%tO!V%tO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#s&QO$q%xO'o)SO'u!^O(X%WO(Y%XOZ%Uaf%Uag%Ua!e%Ua#e%Ua#n%Ua$x%Ua$y%Ua$z%Ua$|%Ua$}%Ua%O%Ua%P%Ua%Q%Ua%R%Ua%S%Ua%T%UaY%Ua![%Ua!]%Ua!^%Ua!_%Ua!`%Ua!a%Ua!b%Ua!c%Ua!d%Ua!g%Ua%^%Ua~Oe%[Ol%zO!O%[O!P%[O!Q%[O!R%[O!S%[O!T%[O!Y%[O!Z%uO#r%yO%X%{O]%Uaa%Uan%Uar%Uad%Ua%d%Ua%`%Ua%a%UaV%Ua%[%Ua%]%Ua~P$&]OZ/`O^/dOc/bOg/`Oo/^Ov%YOw%YOx%YOy%YO!e/`O!t/fO#_/cO#e/`O#g/gO'o/ZO'u!^O(X%WO(Y%XO~Oo+QO'o)SO~P!;qO^!`O!h)PO!r)PO'o*fO'u!^O])eP~O#p/pO~Oa/qO](Sa~P!E_O#p!lX~P#IWOj!tO~OZ!wO^)XOf)YOh(tO#q)]O$p)ZOY}aa}ae}ag}a!O}a!P}a!S}a!T}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!e}a!g}a#e}a#n}a$x}a$y}a$z}a$|}a$}}a%O}a%P}a%Q}a%R}a%S}a%T}an}a%^}aV}aT}al}a!R}a!h}a!y}a#r}a#s}a#x}a#|}a$P}a'o}a'u}a$n}a~O!Q)^O!U)^O!V)^O#])[O]}ar}ad}a%d}a$S}a%X}a%Y}a%Z}a%_}a%b}a%c}a%`}a%a}a%[}ac}a$T}a$U}a%f}a%g}a%h}a%i}a%j}a%k}a%l}a%m}a%n}a%o}a%p}a%q}a%x}a&T}a&W}a&X}a#p}a%]}a~P$-yO#s*iO~OY}a]}aa}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}an}ar}ad}a%d}a%`}a%a}a%^}aV}a%[}a%]}a~P#!POe#|Of$OOc(nX^(nXo(nX~Od/uO'o)SO~P!;qOc/wO~Oo/yO~OZXXcXXeXXfXXhXXjXX#p#uX~O]#uXa#uX~P$6kOZXXcXXeXXfXXhXXjXX~O!q0OO~P$7^O'o0PO~OZ*xXa*xXe*xXf*xXg*xX!O*xX!P*xX!S*xX!T*xX!e*xX#e*xX#n*xX$x*xX$y*xX$z*xX$|*xX$}*xX%O*xX%P*xX%Q*xX%R*xX%S*xX%T*xXY*xX![*xX!]*xX!^*xX!_*xX!`*xX!a*xX!b*xX!c*xX!d*xX!g*xXn*xXV*xX~O%^0TO]*xXr*xXd*xX%d*xX%`*xX%a*xX%[*xX%]*xX~P$8OO'o0UO~O^!`O'o0VO'u!^O~O^%ZOeFqOlLqOv%YOw%YOx%YOy%YO|%bO!OFqO!PFqO!QFqO!RFqO!SFqO!TFqO!U%tO!V%tO!YFqO!ZFmO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#nFfO#rLmO#s&QO$q%xO%X%{O'o)SO'u!^O(X%WO(Y%XO~O^*]Ov%YOw%YOx%YOy%YO|%bO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o0`O'u!^O(X%WO(Y%XO~On(yP~P$={Oo0gOY!xaZ!xa]!xa^!xaa!xac!xae!xaf!xag!xah!xa!O!xa!P!xa!Q!xa!S!xa!T!xa!U!xa!V!xa![!xa!]!xa!^!xa!_!xa!`!xa!a!xa!b!xa!c!xa!d!xa!e!xa!g!xa#]!xa#e!xa#n!xa#q!xa$p!xa$x!xa$y!xa$z!xa$|!xa$}!xa%O!xa%P!xa%Q!xa%R!xa%S!xa%T!xan!xar!xad!xa%d!xa$S!xa%X!xa%Y!xa%Z!xa%_!xa%b!xa%c!xa%`!xa%a!xa%^!xaV!xa%[!xaT!xal!xa!R!xa!h!xa!y!xa#r!xa#s!xa#x!xa#|!xa$P!xa$T!xa$U!xa%f!xa%g!xa%h!xa%i!xa%j!xa%k!xa%l!xa%m!xa%n!xa%o!xa%p!xa%q!xa%x!xa&T!xa&W!xa&X!xa'o!xa'u!xa$n!xa#p!xa%]!xa~O^)XOc0jOo0gO~Oo0nO~O^!`O!h)PO!r)PO'oyO'u!^O~O])eP~P$FYOT1[OV1OOW1fO^0rOeFeOl1[Oo+QOv%YOw%YOx%YOy%YO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#Y&SO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^O(X%WO(Y%XO~On1SO~P$FrO!v1vO!w1vO'o1uO'u!^O~OY1zOa1yO])xad)xa~O!h&^O!q&^O!r&^O^)ya'o)ya'u)ya~Oc#yO~Or2QO~O^!`O!R2XO#|2SO%x2UO&Q+lO&R+lO'oyO'u!^O~P-|OV,UOo+QO#p,TO~O!v,OO%}2fO'o+uO~O%}2gO~OcaO%g2lO%h2mO%i2mO%v2pO%w2pO~O%u2nO~P$M^O!h2rO'o)SO~P!;qO^2sO~OV`XY`XZXXZ!oX^!oXa`XhXX~OjXXo%sX#p%sX~P$NYOZ!wOh2wOj!tO~OY2|OV)oXa)oX])oX~Oa2}OV)nX])nX~Oh2wO~OZ#bO^+[X~OV3PO~Oo+mO#p3QO~Oc3TO~O'o3WO~O!h3^O'o)SO~P!;qO#Y3cO$T3bO$U3cO$V3cO$W3cO'oyO~O!y3fO~P%!tOa,]OV,^io,^i~Oa,aOg)wa~OY3nOa,can,ca~Oa,eOn,ba~On3rO~Oa,jOo+Ua$S+Ua~O^!`O#|2SO$n3uO%x2UO&Q+lO&R+lO'oyO'u!^O~P-|O'o3xO~O!v3zO'o,uO~O^!`O%x4OO'oyO'u!^O~OZ!oX^!oXo%sX~Oo4PO~OZ#bO^#XO~O'o4UO~Oa,|Og,Sa~Oa-RO]'wi~O]4]O~OV4^Oo#[O~OV4^OT,]!Rc,]!Rl,]!Rm,]!R!h,]!R!y,]!R#r,]!R#s,]!R#x,]!R$P,]!R$T,]!R$U,]!R%f,]!R%g,]!R%h,]!R%i,]!R%j,]!R%k,]!R%l,]!R%m,]!R%n,]!R%o,]!R%p,]!R%q,]!R&T,]!R&W,]!R&X,]!R'c,]!Rn,]!R^,]!R!R,]!R#|,]!R%x,]!R'o,]!R'u,]!R$n,]!R~OV4^Oo#[Or#^O~OV4^O^#XOo#[Or#^O$S#]O~OV4cOT(P!Rc(P!Rl(P!Rm(P!R!h(P!R!y(P!R#r(P!R#s(P!R#x(P!R$P(P!R$T(P!R$U(P!R%f(P!R%g(P!R%h(P!R%i(P!R%j(P!R%k(P!R%l(P!R%m(P!R%n(P!R%o(P!R%p(P!R%q(P!R&T(P!R&W(P!R&X(P!R'c(P!Rn(P!R^(P!R!R(P!R#|(P!R%x(P!R'o(P!R'u(P!R$n(P!R~OV4gOT+|!Rc+|!Rl+|!Rm+|!R!h+|!R!y+|!R#r+|!R#s+|!R#x+|!R$P+|!R$T+|!R$U+|!R%f+|!R%g+|!R%h+|!R%i+|!R%j+|!R%k+|!R%l+|!R%m+|!R%n+|!R%o+|!R%p+|!R%q+|!R&T+|!R&W+|!R&X+|!R'c+|!Rn+|!R^+|!R!R+|!R#|+|!R%x+|!R'o+|!R'u+|!R$n+|!R~OV4kOT,Q!Rc,Q!Rl,Q!Rm,Q!R!h,Q!R!y,Q!R#r,Q!R#s,Q!R#x,Q!R$P,Q!R$T,Q!R$U,Q!R%f,Q!R%g,Q!R%h,Q!R%i,Q!R%j,Q!R%k,Q!R%l,Q!R%m,Q!R%n,Q!R%o,Q!R%p,Q!R%q,Q!R&T,Q!R&W,Q!R&X,Q!R'c,Q!Rn,Q!R^,Q!R!R,Q!R#|,Q!R%x,Q!R'o,Q!R'u,Q!R$n,Q!R~OV4pO$S#]O~On4rO~P)VOY`XZ`XZ!oX]`X^`X^!oXa`Xc`Xe`Xf`Xg`Xh`X!O`X!P`X!Q`X!S`X!T`X!U`X!V`X![`X!]`X!^`X!_`X!``X!a`X!b`X!c`X!d`X!e`X!g`X#]`X#e`X#n`X#q`X$p`X$x`X$y`X$z`X$|`X$}`X%O`X%P`X%Q`X%R`X%S`X%T`Xn`Xr`Xd`X%d`X$S`X%X`X%Y`X%Z`X%_`X%b`X%c`X%``X%a`X%^`XV`X%[`XT`Xl`X!R`X!h`X!y`X#r`X#s`X#x`X#|`X$P`X$T`X$U`X%f`X%g`X%h`X%i`X%j`X%k`X%l`X%m`X%n`X%o`X%p`X%q`X%x`X&T`X&W`X&X`X'o`X'u`X$n`X#p`XW`Xo`Xv`Xw`Xx`Xy`X|`X!Y`X!Z`X!j`X!k`X!s`X!t`X!v`X!w`X#R`X#T`X#V`X#X`X#Y`X#Z`X$X`X$]`X$^`X$_`X$a`X$c`X$d`X$e`X$f`X$g`X$k`X$m`X$q`X(X`X(Y`X%]`X$[`X~OZXXcXXeXXfXXhXX~P%1sO]`X]#uXa`Xa#uX#p#uX~O])gaa)ga#p*tX~Oa.PO](aa~Oa.PO](aa~P#!POa.SO])fa~Oa.VO]*ua~O](^ia(^iY(^i![(^i!](^i!^(^i!_(^i!`(^i!a(^i!b(^i!c(^i!d(^i!g(^in(^ir(^id(^i%d(^i%`(^i%a(^i%^(^iV(^i%[(^i%](^i~P#!PO](fXa(fXd(fX~P#!PO!h.dO!q.dO!r.eO'o)SO~P!;qOa5QO](dXd(dX~O^!`O!s5XO!t5UO'o5TO'u!^O~O]5YO~OZ!wOY(hi](hi^(hia(hic(hie(hif(hig(hih(hi!O(hi!P(hi!Q(hi!S(hi!T(hi!U(hi!V(hi![(hi!](hi!^(hi!_(hi!`(hi!a(hi!b(hi!c(hi!d(hi!e(hi!g(hi#](hi#e(hi#n(hi#q(hi$p(hi$x(hi$y(hi$z(hi$|(hi$}(hi%O(hi%P(hi%Q(hi%R(hi%S(hi%T(hin(hir(hid(hi%d(hi$S(hi%X(hi%Y(hi%Z(hi%_(hi%b(hi%c(hi%`(hi%a(hi%^(hiV(hi%[(hiT(hil(hi!R(hi!h(hi!y(hi#r(hi#s(hi#x(hi#|(hi$P(hi$T(hi$U(hi%f(hi%g(hi%h(hi%i(hi%j(hi%k(hi%l(hi%m(hi%n(hi%o(hi%p(hi%q(hi%x(hi&T(hi&W(hi&X(hi'o(hi'u(hi$n(hi#p(hiW(hio(hiv(hiw(hix(hiy(hi|(hi!Y(hi!Z(hi!j(hi!k(hi!s(hi!t(hi!v(hi!w(hi#R(hi#T(hi#V(hi#X(hi#Y(hi#Z(hi$X(hi$](hi$^(hi$_(hi$a(hi$c(hi$d(hi$e(hi$f(hi$g(hi$k(hi$m(hi$q(hi(X(hi(Y(hi%](hi$[(hi~OZ!wOY(mX](mX^(mXa(mXc(mXe(mXf(mXg(mXh(mX!O(mX!P(mX!Q(mX!S(mX!T(mX!U(mX!V(mX![(mX!](mX!^(mX!_(mX!`(mX!a(mX!b(mX!c(mX!d(mX!e(mX!g(mX#](mX#e(mX#n(mX#q(mX$p(mX$x(mX$y(mX$z(mX$|(mX$}(mX%O(mX%P(mX%Q(mX%R(mX%S(mX%T(mXn(mXr(mXd(mX%d(mX$S(mX%X(mX%Y(mX%Z(mX%_(mX%b(mX%c(mX%`(mX%a(mX%^(mXV(mX%[(mXT(mXl(mX!R(mX!h(mX!y(mX#r(mX#s(mX#x(mX#|(mX$P(mX$T(mX$U(mX%f(mX%g(mX%h(mX%i(mX%j(mX%k(mX%l(mX%m(mX%n(mX%o(mX%p(mX%q(mX%x(mX&T(mX&W(mX&X(mX'o(mX'u(mX$n(mX#p(mXW(mXo(mXv(mXw(mXx(mXy(mX|(mX!Y(mX!Z(mX!j(mX!k(mX!s(mX!t(mX!v(mX!w(mX#R(mX#T(mX#V(mX#X(mX#Y(mX#Z(mX$X(mX$](mX$^(mX$_(mX$a(mX$c(mX$d(mX$e(mX$f(mX$g(mX$k(mX$m(mX$q(mX(X(mX(Y(mX%](mX$[(mX~OZIoO^/dOc/bOgIoOo/^Ov%YOw%YOx%YOy%YO!eIoO!t/fO#_/cO#eIoO#gIrO'oIlO'u!^O(X%WO(Y%XO~Oa)RPn)RP~P&!VOc)mO'o5fOa(tP~Oa5mOn5kOr5lO~P#!POa5pOn5nOr5oO~P#!POZ!wOh5[OY(ki](ki^(kia(kic(kie(kif(kig(ki!O(ki!P(ki!Q(ki!S(ki!T(ki!U(ki!V(ki![(ki!](ki!^(ki!_(ki!`(ki!a(ki!b(ki!c(ki!d(ki!e(ki!g(ki#](ki#e(ki#n(ki#q(ki$p(ki$x(ki$y(ki$z(ki$|(ki$}(ki%O(ki%P(ki%Q(ki%R(ki%S(ki%T(kin(kir(kid(ki%d(ki$S(ki%X(ki%Y(ki%Z(ki%_(ki%b(ki%c(ki%`(ki%a(ki%^(kiV(ki%[(kiT(kil(ki!R(ki!h(ki!y(ki#r(ki#s(ki#x(ki#|(ki$P(ki$T(ki$U(ki%f(ki%g(ki%h(ki%i(ki%j(ki%k(ki%l(ki%m(ki%n(ki%o(ki%p(ki%q(ki%x(ki&T(ki&W(ki&X(ki'o(ki'u(ki$n(ki#p(kiW(kio(kiv(kiw(kix(kiy(ki|(ki!Y(ki!Z(ki!j(ki!k(ki!s(ki!t(ki!v(ki!w(ki#R(ki#T(ki#V(ki#X(ki#Y(ki#Z(ki$X(ki$](ki$^(ki$_(ki$a(ki$c(ki$d(ki$e(ki$f(ki$g(ki$k(ki$m(ki$q(ki(X(ki(Y(ki%](ki$[(ki~Od5rO~Oe)oO!O)pO!P)pO#n){O$x)oO$y)oOZ$wi]$wia$wif$wi!S$wi!T$wi!e$wi#e$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~Og)nO$z)qO~P&-POZ$wi]$wia$wie$wif$wig$wi!O$wi!P$wi!S$wi!T$wi!e$wi#e$wi$x$wi$y$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~O#n){O~P&0SOe)oO#n){O$x)oO$y)oOZ$wi]$wia$wif$wig$wi!S$wi!T$wi!e$wi#e$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~O!O$wi!P$wi~P&3VOg$wi$z$wi~P&-POZ)rOe)oOg)nO!O)pO!P)pO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O]$wia$wif$wi!S$wi!T$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~O%O$wi%P$wi~P&6dO%O)sO%P)sO~P&6dOZ)rOe)oOg)nO!O)pO!P)pO!S)tO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O%O)sO%P)sO]$wia$wif$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~O!T$wi~P&9qO!T)uO~P&9qOZ)rOe)oOg)nO!O)pO!P)pO!S)tO!T)uO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O%O)sO%P)sO%Q)vO]$wia$wif$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~O%R$wi~P&<{O%R)wO~P&<{O]$wia$wif$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$win$wir$wid$wi%d$wi%`$wi%a$wi%^$wiV$wi%[$wi%]$wi~OZ)rOe)oOg)nO!O)pO!P)pO!S)tO!T)uO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O%O)sO%P)sO%Q)vO%R)wO%S)xO%T)yO~P&@VOr5sO~P#!POZ!lX]!lX^XXa!lXe!lXf!lXg!lXh!lX!O!lX!P!lX!S!lX!T!lX!e!lX#e!lX#h!lX#i!lX#n!lX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lXY!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!g!lXn!lXr!lXd!lX%d!lX$S!lX%X!lX%Y!lX%Z!lX%_!lX%b!lX%c!lX%`!lX%a!lX%^!lXV!lX%[!lX#p!lX%]!lX~P$7^O^5tOc#yOe#|Of$OO~Oh5vOZ)VX])VXa)VXe)VXf)VXg)VX!O)VX!P)VX!S)VX!T)VX!e)VX#e)VX#h)VX#i)VX#n)VX$x)VX$y)VX$z)VX$|)VX$})VX%O)VX%P)VX%Q)VX%R)VX%S)VX%T)VXY)VX![)VX!])VX!^)VX!_)VX!`)VX!a)VX!b)VX!c)VX!d)VX!g)VX#o)VX#p)VXd)VXn)VXr)VX%d)VX$S)VX%X)VX%Y)VX%Z)VX%_)VX%b)VX%c)VX%`)VX%a)VX%^)VXV)VX%[)VXT)VX^)VXc)VXl)VX!R)VX!h)VX!y)VX#r)VX#s)VX#x)VX#|)VX$P)VX$T)VX$U)VX%f)VX%g)VX%h)VX%i)VX%j)VX%k)VX%l)VX%m)VX%n)VX%o)VX%p)VX%q)VX%x)VX&T)VX&W)VX&X)VX'o)VX'u)VX$n)VXW)VXo)VXv)VXw)VXx)VXy)VX|)VX!Q)VX!U)VX!V)VX!Y)VX!Z)VX!j)VX!k)VX!s)VX!t)VX!v)VX!w)VX#R)VX#T)VX#V)VX#X)VX#Y)VX#Z)VX#])VX$X)VX$])VX$^)VX$_)VX$a)VX$c)VX$d)VX$e)VX$f)VX$g)VX$k)VX$m)VX$q)VX(X)VX(Y)VX%])VX$[)VX~On5{O'o'qO~Oo/^O#_5}O'o'qO~O#_5}O'o'qOZ#jX]#jXa#jXe#jXf#jXg#jX!O#jX!P#jX!S#jX!T#jX!e#jX#e#jX#h#jX#i#jX#n#jX$x#jX$y#jX$z#jX$|#jX$}#jX%O#jX%P#jX%Q#jX%R#jX%S#jX%T#jXY#jX![#jX!]#jX!^#jX!_#jX!`#jX!a#jX!b#jX!c#jX!d#jX!g#jX#o#jX#p#jXd#jXn#jXr#jX%d#jX$S#jX%X#jX%Y#jX%Z#jX%_#jX%b#jX%c#jX%`#jX%a#jX%^#jXV#jX%[#jXT#jX^#jXc#jXl#jX!R#jX!h#jX!y#jX#r#jX#s#jX#x#jX#|#jX$P#jX$T#jX$U#jX%f#jX%g#jX%h#jX%i#jX%j#jX%k#jX%l#jX%m#jX%n#jX%o#jX%p#jX%q#jX%x#jX&T#jX&W#jX&X#jX'u#jX$n#jXW#jXo#jXv#jXw#jXx#jXy#jX|#jX!Q#jX!U#jX!V#jX!Y#jX!Z#jX!j#jX!k#jX!s#jX!t#jX!v#jX!w#jX#R#jX#T#jX#V#jX#X#jX#Y#jX#Z#jX#]#jX$X#jX$]#jX$^#jX$_#jX$a#jX$c#jX$d#jX$e#jX$f#jX$g#jX$k#jX$m#jX$q#jX(X#jX(Y#jX%]#jX$[#jX~Od6VO#n6SO~P&!VOZIoO^/dOc/bOgIoOo/^Ov%YOw%YOx%YOy%YO!eIoO!t/fO#_/cO#eIoO#gIrO'o6XO'u!^O(X%WO(Y%XO~O^6^O#_5}O'o'qO~O#h6aO#i6bO#n$wi$S$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wi#p$wi~P&0SOo/^O#_5}O'o'qOZ)_X])_Xa)_Xe)_Xf)_Xg)_X!O)_X!P)_X!S)_X!T)_X!e)_X#e)_X#h)_X#i)_X#n)_X$x)_X$y)_X$z)_X$|)_X$})_X%O)_X%P)_X%Q)_X%R)_X%S)_X%T)_XY)_X![)_X!])_X!^)_X!_)_X!`)_X!a)_X!b)_X!c)_X!d)_X!g)_X#o)_X#p)_Xd)_Xn)_Xr)_X%d)_X$S)_X%X)_X%Y)_X%Z)_X%_)_X%b)_X%c)_X%`)_X%a)_X%^)_XV)_X%[)_XT)_X^)_Xc)_Xl)_X!R)_X!h)_X!y)_X#r)_X#s)_X#x)_X#|)_X$P)_X$T)_X$U)_X%f)_X%g)_X%h)_X%i)_X%j)_X%k)_X%l)_X%m)_X%n)_X%o)_X%p)_X%q)_X%x)_X&T)_X&W)_X&X)_X'u)_X$n)_XW)_Xv)_Xw)_Xx)_Xy)_X|)_X!Q)_X!U)_X!V)_X!Y)_X!Z)_X!j)_X!k)_X!s)_X!t)_X!v)_X!w)_X#R)_X#T)_X#V)_X#X)_X#Y)_X#Z)_X#])_X$X)_X$])_X$^)_X$_)_X$a)_X$c)_X$d)_X$e)_X$f)_X$g)_X$k)_X$m)_X$q)_X(X)_X(Y)_X%])_X$[)_X~O#_5}O'o'qOZ#lX]#lXa#lXe#lXf#lXg#lX!O#lX!P#lX!S#lX!T#lX!e#lX#e#lX#h#lX#i#lX#n#lX$x#lX$y#lX$z#lX$|#lX$}#lX%O#lX%P#lX%Q#lX%R#lX%S#lX%T#lXY#lX![#lX!]#lX!^#lX!_#lX!`#lX!a#lX!b#lX!c#lX!d#lX!g#lX#o#lX#p#lXd#lXn#lXr#lX%d#lX$S#lX%X#lX%Y#lX%Z#lX%_#lX%b#lX%c#lX%`#lX%a#lX%^#lXV#lX%[#lXT#lX^#lXc#lXl#lX!R#lX!h#lX!y#lX#r#lX#s#lX#x#lX#|#lX$P#lX$T#lX$U#lX%f#lX%g#lX%h#lX%i#lX%j#lX%k#lX%l#lX%m#lX%n#lX%o#lX%p#lX%q#lX%x#lX&T#lX&W#lX&X#lX'u#lX$n#lXW#lXo#lXv#lXw#lXx#lXy#lX|#lX!Q#lX!U#lX!V#lX!Y#lX!Z#lX!j#lX!k#lX!s#lX!t#lX!v#lX!w#lX#R#lX#T#lX#V#lX#X#lX#Y#lX#Z#lX#]#lX$X#lX$]#lX$^#lX$_#lX$a#lX$c#lX$d#lX$e#lX$f#lX$g#lX$k#lX$m#lX$q#lX(X#lX(Y#lX%]#lX$[#lX~O]*vXa*vXY*vX![*vX!]*vX!^*vX!_*vX!`*vX!a*vX!b*vX!c*vX!d*vX!g*vXn*vXr*vXd*vX%d*vX%`*vX%a*vX%^*vXV*vX%[*vX%]*vX~P#!POa.VO]*uX~Oa6iO~P!E_Od6jO~P#!PO#p6nO~O!q6qO~OZ*xaa*xae*xaf*xag*xa!O*xa!P*xa!S*xa!T*xa!e*xa#e*xa#n*xa$x*xa$y*xa$z*xa$|*xa$}*xa%O*xa%P*xa%Q*xa%R*xa%S*xa%T*xaY*xa![*xa!]*xa!^*xa!_*xa!`*xa!a*xa!b*xa!c*xa!d*xa!g*xan*xaV*xa~O%^0TO]*xar*xad*xa%d*xa%`*xa%a*xa%[*xa%]*xa~P'AOO'o6sO~OY6tO~O!q6uO~P$7^O'o6vO~O%d6wO~P#!POZG]OeGPOfLvOgF{O!OGTO!PGTO!SGeO!TGiO!eG]O#eG]O#nG}O$xGPO$yGPO$zGXO$|)|O$})}O%OGaO%PGaO%QGmO%RGqO%SGuO%TGyO~O$S*za%X*za%Y*za%Z*za%_*za%b*za%c*za~P'DpO%`6xO%a6xO~P#!PO]+Paa+Pa%^+PaY+Pa![+Pa!]+Pa!^+Pa!_+Pa!`+Pa!a+Pa!b+Pa!c+Pa!d+Pa!g+Pan+Par+Pad+Pa%d+Pa%`+Pa%a+PaV+Pa%[+Pa%]+Pa~P#!PO]6zO~O^*ROa'sO'oHeO~O^!lX^!oXc!lXf!lXh!lXjXX!Q!lX!U!lX!V!lX#]!lX#q!lX$p!lX~OY6{OZ!wOa(mXn(mX~P'HxOZ!wO^)XOh(tO!Q)^O!U)^O!V)^O#])[O#q)]O$p)ZO~Of6|O~P'JQOZ(VX^(VXc(VXf(VXh(VX!Q(VX!U(VX!V(VX#](VX#q(VX$p(VX~Oa({Xn({X~P'JvOa6}On(zX~On7PO~Oa7QOn(yX~Oc)mOo7UO!h7XO'o7ROa(tP~P!;qOa'kOd'mO'o)SO~P!;qOc#yOo0nO~Oo0gOY!xiZ!xi]!xi^!xia!xic!xie!xif!xig!xih!xi!O!xi!P!xi!Q!xi!S!xi!T!xi!U!xi!V!xi![!xi!]!xi!^!xi!_!xi!`!xi!a!xi!b!xi!c!xi!d!xi!e!xi!g!xi#]!xi#e!xi#n!xi#q!xi$p!xi$x!xi$y!xi$z!xi$|!xi$}!xi%O!xi%P!xi%Q!xi%R!xi%S!xi%T!xin!xir!xid!xi%d!xi$S!xi%X!xi%Y!xi%Z!xi%_!xi%b!xi%c!xi%`!xi%a!xi%^!xiV!xi%[!xiT!xil!xi!R!xi!h!xi!y!xi#r!xi#s!xi#x!xi#|!xi$P!xi$T!xi$U!xi%f!xi%g!xi%h!xi%i!xi%j!xi%k!xi%l!xi%m!xi%n!xi%o!xi%p!xi%q!xi%x!xi&T!xi&W!xi&X!xi'o!xi'u!xi$n!xi#p!xi%]!xi~Oc#yOY$uiZ$ui^$uia$uie$uif$uig$uih$ui!O$ui!P$ui!Q$ui!S$ui!T$ui!U$ui!V$ui![$ui!]$ui!^$ui!_$ui!`$ui!a$ui!b$ui!c$ui!d$ui!e$ui!g$ui#]$ui#e$ui#n$ui#q$ui$p$ui$x$ui$y$ui$z$ui$|$ui$}$ui%O$ui%P$ui%Q$ui%R$ui%S$ui%T$uin$ui%^$uiV$ui~Oo0nO]$uir$uid$ui%d$ui$S$ui%X$ui%Y$ui%Z$ui%_$ui%b$ui%c$ui%`$ui%a$ui%[$ui#p$ui%]$ui~P(%^On7`Oo0nO'o)SO~P!;qOr7bOY!lXZXXZ!lXZ!oXcXXeXXfXXg!lXhXX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!g!lX~P'HxOY)VOZ!wO^)XOf)YOg)UOh(tO!Q)^O![)VO!])VO!^)VO!_)VO!`)VO!a)VO!b)VO!c)VO!d)VO!g)VO#])[O#q)]O$p)ZO~O!U7fO!V7fO~P(+YOY)VOg)UO![)VO!])VO!^)VO!_)VO!`)VO!a)VO!b)VO!c)VO!d)VO!g)VO~OT1[O^!`Ol1[O!h7kO#r1[O$P1[O'oyO'u!^O~Oo+QO#p7lO~OV*SXY(VXg(VX![(VX!](VX!^(VX!_(VX!`(VX!a(VX!b(VX!c(VX!d(VX!g(VXa*SX]*SX~P'JvOn7pO~P$FrOV7tO'o)SO~P!;qO^!`O!t7uO'oyO'u!^O~O'oHcO~O#s*iOT&}X^&}Xl&}X!h&}X#r&}X$P&}X'o&}X'u&}X~OV1OOW1fO^8OOeFeOo+QOv%YOw%YOx%YOy%YO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#Y&SO#Z&UO#]1nO#r*^O#s&QO$P8QO$X1]O$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o*XO'u!^O(X%WO(Y%XO~O^8RO~O^8TO~O$a8WO'o)SO~P!;qO#Y8XO$[8YO'o8XO~OV8[O!h8]O'o)SO~P!;qO^8_O~O$c8bO$f8aO~O^8cO~OV7{O~O!h8eO~O#x8fO^)mX!t)mX'o)mX'u)mX~O^!`O'oyO'u!^O~P(5yO!h8gO#x1kO^)lX!t)lX'o)lX'u)lX~OV8jO~OZ8nOh8lOj8mOc'qXe'qXf'qX~O]8qO~O]8rO~P#!POZ!wO](mXh(mXjXX~Oh8sO])OX~O]8uO~OY8yOa8xO])xid)xi~Oc#yO'o*QO~O!v8|O!w8|O~OV9YO~O^9^O~OZ9bOe9bOg9_O!O9`O!P9`O!Q9aO!R9aO!S9bO!T9bO!U9aO!V9aO!e9bO#e9bO$x9bO$y9bO$z9bO%O9bO%P9bO%Q9bO(X%WO~OcaO%g2lO%h2mO%i2mO%v9fO%w9fO~O%u9dO~P(:kOn+bX~P$M^OcaO%g2lO%h2mO%i2mO%u2nOn+bX~On9lO~O%h9mO%i9mO%u+dX%v+dX%w+dX~O%g9mO%u+dX%v+dX%w+dX~O%u9dO%v9fO%w9fO~OV9pO~P#!PO]9rO~OY9sO~Oa9tOV)sX~OV9vO~O!v9{O'o9wO~Oo0nO!h:SO'o)SO~P!;qOa2}OV)na])na~O!h:WO'o)SO~P!;qOY:XOT+aX^+aXc+aXl+aXn+aX!R+aX!h+aX!y+aX#r+aX#s+aX#x+aX#|+aX$P+aX$T+aX$U+aX%f+aX%g+aX%h+aX%i+aX%j+aX%k+aX%l+aX%m+aX%n+aX%o+aX%p+aX%q+aX%x+aX&T+aX&W+aX&X+aX'o+aX'u+aX$n+aX~OT`XY`X^`Xa`Xl`Xn`X!R`X!h`X!y`X#r`X#s`X#x`X#|`X$P`X'o`X'u`X$n`X~OZXXc`XhXXjXXo%sX$T`X$U`X%f`X%g`X%h`X%i`X%j`X%k`X%l`X%m`X%n`X%o`X%p`X%q`X%x`X&T`X&W`X&X`X~P(@oOZ!wOh:[Oj!tO~Oh:[O~Oo:^O~OV:_O~P#!POV:aO~P#!POa:bOV)}X^)}Xo)}Xr)}X$S)}X#p)}X~Of:dOV*OX^*OXa*OXo*OXr*OX$S*OX#p*OX~Oa:eOV)|X^)|Xo)|Xr)|X$S)|X#p)|X~O^:fO~Oa,]OV,^qo,^q~Oa,aOg)wi~Oa,cin,ci~P#!POV:kO~O!v:tO'o,uO~OcaO%u:xO%v:yO~OV:|O$S#]O~OV:}O~OV;POT,]!Zc,]!Zl,]!Zm,]!Z!h,]!Z!y,]!Z#r,]!Z#s,]!Z#x,]!Z$P,]!Z$T,]!Z$U,]!Z%f,]!Z%g,]!Z%h,]!Z%i,]!Z%j,]!Z%k,]!Z%l,]!Z%m,]!Z%n,]!Z%o,]!Z%p,]!Z%q,]!Z&T,]!Z&W,]!Z&X,]!Z'c,]!Zn,]!Z^,]!Z!R,]!Z#|,]!Z%x,]!Z'o,]!Z'u,]!Z$n,]!Z~OV;POo#[O~OV;POo#[Or#^O~OV;PO^#XOo#[Or#^O$S#]O~OV;UOT(P!Zc(P!Zl(P!Zm(P!Z!h(P!Z!y(P!Z#r(P!Z#s(P!Z#x(P!Z$P(P!Z$T(P!Z$U(P!Z%f(P!Z%g(P!Z%h(P!Z%i(P!Z%j(P!Z%k(P!Z%l(P!Z%m(P!Z%n(P!Z%o(P!Z%p(P!Z%q(P!Z&T(P!Z&W(P!Z&X(P!Z'c(P!Zn(P!Z^(P!Z!R(P!Z#|(P!Z%x(P!Z'o(P!Z'u(P!Z$n(P!Z~OV;XOT+|!Zc+|!Zl+|!Zm+|!Z!h+|!Z!y+|!Z#r+|!Z#s+|!Z#x+|!Z$P+|!Z$T+|!Z$U+|!Z%f+|!Z%g+|!Z%h+|!Z%i+|!Z%j+|!Z%k+|!Z%l+|!Z%m+|!Z%n+|!Z%o+|!Z%p+|!Z%q+|!Z&T+|!Z&W+|!Z&X+|!Z'c+|!Zn+|!Z^+|!Z!R+|!Z#|+|!Z%x+|!Z'o+|!Z'u+|!Z$n+|!Z~OV;[OT,Q!Zc,Q!Zl,Q!Zm,Q!Z!h,Q!Z!y,Q!Z#r,Q!Z#s,Q!Z#x,Q!Z$P,Q!Z$T,Q!Z$U,Q!Z%f,Q!Z%g,Q!Z%h,Q!Z%i,Q!Z%j,Q!Z%k,Q!Z%l,Q!Z%m,Q!Z%n,Q!Z%o,Q!Z%p,Q!Z%q,Q!Z&T,Q!Z&W,Q!Z&X,Q!Z'c,Q!Zn,Q!Z^,Q!Z!R,Q!Z#|,Q!Z%x,Q!Z'o,Q!Z'u,Q!Z$n,Q!Z~OV;^O$S#]O~O]&iaa&ia~P#!POa.PO](ai~O](^qa(^qY(^q![(^q!](^q!^(^q!_(^q!`(^q!a(^q!b(^q!c(^q!d(^q!g(^qn(^qr(^qd(^q%d(^q%`(^q%a(^q%^(^qV(^q%[(^q%](^q~P#!POa5QO](dad(da~O](faa(fad(fa~P#!PO]`Xa`Xd`X~P$7^O^!`O!t5UO'oyO'u!^O~OZ!wOY(hq](hq^(hqa(hqc(hqe(hqf(hqg(hqh(hq!O(hq!P(hq!Q(hq!S(hq!T(hq!U(hq!V(hq![(hq!](hq!^(hq!_(hq!`(hq!a(hq!b(hq!c(hq!d(hq!e(hq!g(hq#](hq#e(hq#n(hq#q(hq$p(hq$x(hq$y(hq$z(hq$|(hq$}(hq%O(hq%P(hq%Q(hq%R(hq%S(hq%T(hqn(hqr(hqd(hq%d(hq$S(hq%X(hq%Y(hq%Z(hq%_(hq%b(hq%c(hq%`(hq%a(hq%^(hqV(hq%[(hqT(hql(hq!R(hq!h(hq!y(hq#r(hq#s(hq#x(hq#|(hq$P(hq$T(hq$U(hq%f(hq%g(hq%h(hq%i(hq%j(hq%k(hq%l(hq%m(hq%n(hq%o(hq%p(hq%q(hq%x(hq&T(hq&W(hq&X(hq'o(hq'u(hq$n(hq#p(hqW(hqo(hqv(hqw(hqx(hqy(hq|(hq!Y(hq!Z(hq!j(hq!k(hq!s(hq!t(hq!v(hq!w(hq#R(hq#T(hq#V(hq#X(hq#Y(hq#Z(hq$X(hq$](hq$^(hq$_(hq$a(hq$c(hq$d(hq$e(hq$f(hq$g(hq$k(hq$m(hq$q(hq(X(hq(Y(hq%](hq$[(hq~O#hJ_O#iJbO#o;jO#p;iO~Oa;kOn)SX~Oa;nOn;mO~OY;oO~Oa;pOn(qX~Oa;rO~On;sOa(tX~O'o;tO~Ov%YOw%YOx%YOy%YO(X%WO(Y%XO~OZ!wOh5[OY(kq](kq^(kqa(kqc(kqe(kqf(kqg(kq!O(kq!P(kq!Q(kq!S(kq!T(kq!U(kq!V(kq![(kq!](kq!^(kq!_(kq!`(kq!a(kq!b(kq!c(kq!d(kq!e(kq!g(kq#](kq#e(kq#n(kq#q(kq$p(kq$x(kq$y(kq$z(kq$|(kq$}(kq%O(kq%P(kq%Q(kq%R(kq%S(kq%T(kqn(kqr(kqd(kq%d(kq$S(kq%X(kq%Y(kq%Z(kq%_(kq%b(kq%c(kq%`(kq%a(kq%^(kqV(kq%[(kqT(kql(kq!R(kq!h(kq!y(kq#r(kq#s(kq#x(kq#|(kq$P(kq$T(kq$U(kq%f(kq%g(kq%h(kq%i(kq%j(kq%k(kq%l(kq%m(kq%n(kq%o(kq%p(kq%q(kq%x(kq&T(kq&W(kq&X(kq'o(kq'u(kq$n(kq#p(kqW(kqo(kqv(kqw(kqx(kqy(kq|(kq!Y(kq!Z(kq!j(kq!k(kq!s(kq!t(kq!v(kq!w(kq#R(kq#T(kq#V(kq#X(kq#Y(kq#Z(kq$X(kq$](kq$^(kq$_(kq$a(kq$c(kq$d(kq$e(kq$f(kq$g(kq$k(kq$m(kq$q(kq(X(kq(Y(kq%](kq$[(kq~O#_5}O'o'qOZ)_a])_aa)_ae)_af)_ag)_a!O)_a!P)_a!S)_a!T)_a!e)_a#e)_a#h)_a#i)_a#n)_a$x)_a$y)_a$z)_a$|)_a$})_a%O)_a%P)_a%Q)_a%R)_a%S)_a%T)_aY)_a![)_a!])_a!^)_a!_)_a!`)_a!a)_a!b)_a!c)_a!d)_a!g)_a#o)_a#p)_ad)_an)_ar)_a%d)_a$S)_a%X)_a%Y)_a%Z)_a%_)_a%b)_a%c)_a%`)_a%a)_a%^)_aV)_a%[)_aT)_a^)_ac)_al)_a!R)_a!h)_a!y)_a#r)_a#s)_a#x)_a#|)_a$P)_a$T)_a$U)_a%f)_a%g)_a%h)_a%i)_a%j)_a%k)_a%l)_a%m)_a%n)_a%o)_a%p)_a%q)_a%x)_a&T)_a&W)_a&X)_a'u)_a$n)_aW)_av)_aw)_ax)_ay)_a|)_a!Q)_a!U)_a!V)_a!Y)_a!Z)_a!j)_a!k)_a!s)_a!t)_a!v)_a!w)_a#R)_a#T)_a#V)_a#X)_a#Y)_a#Z)_a#])_a$X)_a$])_a$^)_a$_)_a$a)_a$c)_a$d)_a$e)_a$f)_a$g)_a$k)_a$m)_a$q)_a(X)_a(Y)_a%])_a$[)_a~Oo/^O~P)9|O'o;|O~Oh5vOZ)Va])Vaa)Vae)Vaf)Vag)Va!O)Va!P)Va!S)Va!T)Va!e)Va#e)Va#h)Va#i)Va#n)Va$x)Va$y)Va$z)Va$|)Va$})Va%O)Va%P)Va%Q)Va%R)Va%S)Va%T)VaY)Va![)Va!])Va!^)Va!_)Va!`)Va!a)Va!b)Va!c)Va!d)Va!g)Va#o)Va#p)Vad)Van)Var)Va%d)Va$S)Va%X)Va%Y)Va%Z)Va%_)Va%b)Va%c)Va%`)Va%a)Va%^)VaV)Va%[)VaT)Va^)Vac)Val)Va!R)Va!h)Va!y)Va#r)Va#s)Va#x)Va#|)Va$P)Va$T)Va$U)Va%f)Va%g)Va%h)Va%i)Va%j)Va%k)Va%l)Va%m)Va%n)Va%o)Va%p)Va%q)Va%x)Va&T)Va&W)Va&X)Va'o)Va'u)Va$n)VaW)Vao)Vav)Vaw)Vax)Vay)Va|)Va!Q)Va!U)Va!V)Va!Y)Va!Z)Va!j)Va!k)Va!s)Va!t)Va!v)Va!w)Va#R)Va#T)Va#V)Va#X)Va#Y)Va#Z)Va#])Va$X)Va$])Va$^)Va$_)Va$a)Va$c)Va$d)Va$e)Va$f)Va$g)Va$k)Va$m)Va$q)Va(X)Va(Y)Va%])Va$[)Va~Oh<POr)^X~Or<RO~Oa<SOn)]X~Oa<VOn<UO~Oa)bXd)bX~P&!VOa<YOd)aX~Oa<YO#hJ_O#iJbOd)aX~Oa<]Od<[O~Or(sO]!lX^XXa!lXh!lX#h!lX#i!lX~P$7^Oa'sOo/^O#_5}O'o'qO~Oa<^O#hJ_O#iJbO])`X~O]<aO~O^6^O#_5}O'o'qO])ZP~Oo)_a~P)9|O'o<gO~Od<jO~P#!POa<kOn*rXd*rX~P#!POn<mO~O$S*wq%X*wq%Y*wq%Z*wq%_*wq%b*wq%c*wq~P'DpO!q<sO~Oa<vO$S*}a%X*}a%Y*}a%Z*}a%_*}a%b*}a%c*}a~O!h<xO'o)SO~P!;qOh<yO~Oa6}On(za~On<|O~OY!lXY!{XZXXZ!lXZ!oXa!lXcXXeXXe!lXfXXg!lXhXXn!lX!O!lX!P!lX!S!lX!T!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!e!lX!g!lX#e!lX#n!lX#p#uX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lX~P'HxOa(vXn(vX~P!E_Oa<}On(uX~O!h=RO'o)SO~P!;qOa=TOn=SO~Od=VO~Oc#yOY$uqZ$uq^$uqa$uqe$uqf$uqg$uqh$uq!O$uq!P$uq!Q$uq!S$uq!T$uq!U$uq!V$uq![$uq!]$uq!^$uq!_$uq!`$uq!a$uq!b$uq!c$uq!d$uq!e$uq!g$uq#]$uq#e$uq#n$uq#q$uq$p$uq$x$uq$y$uq$z$uq$|$uq$}$uq%O$uq%P$uq%Q$uq%R$uq%S$uq%T$uqn$uq%^$uqV$uq~Oo0nO]$uqr$uqd$uq%d$uq$S$uq%X$uq%Y$uq%Z$uq%_$uq%b$uq%c$uq%`$uq%a$uq%[$uq#p$uq%]$uq~P*&rOa=XOn)rX~P#!POa=XOn)rX~Oa=[On=ZO~O]-}O^*ROa'sO'oHeO~OZ)rOe)oOf)zO!O)pO!P)pO!S)tO!T)uO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O%O)sO%P)sO%Q)vO%R)wO%S)xO%T)yOY}ag}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}a~OV*TaY(baZ(ba^(bac(baf(bag(bah(ba!Q(ba!U(ba!V(ba![(ba!](ba!^(ba!_(ba!`(ba!a(ba!b(ba!c(ba!d(ba!g(ba#](ba#q(ba$p(baa*Ta]*Ta~OV*SaY(VaZ(Va^(Vac(Vaf(Vag(Vah(Va!Q(Va!U(Va!V(Va![(Va!](Va!^(Va!_(Va!`(Va!a(Va!b(Va!c(Va!d(Va!g(Va#](Va#q(Va$p(Vaa*Sa]*Sa~OV*TaY(jaZ(ja^(jac(jaf(jag(jah(ja!Q(ja!U(ja!V(ja![(ja!](ja!^(ja!_(ja!`(ja!a(ja!b(ja!c(ja!d(ja!g(ja#](ja#q(ja$p(jaa*Ta]*Ta~O!h=bO'o)SO~P!;qOZ)rOe)oOf)zO!O)pO!P)pO!S)tO!T)uO!e)rO#e)rO#n){O$x)oO$y)oO$z)qO$|)|O$})}O%O)sO%P)sO%Q)vO%R)wO%S)xO%T)yO~OY!Wag!Wa![!Wa!]!Wa!^!Wa!_!Wa!`!Wa!a!Wa!b!Wa!c!Wa!d!Wa!g!Wa~P*3fOf)YOV*SaY}ag}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}aa*Sa]*Sa~P'JQOV=cOY}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}a~P#!POT)oXV)oXW)oX^)oXa)oXe)oXl)oXn)oXo)oXv)oXw)oXx)oXy)oX|)oX!O)oX!P)oX!Q)oX!R)oX!S)oX!T)oX!U)oX!V)oX!Y)oX!Z)oX!h)oX!j)oX!k)oX!s)oX!t)oX!v)oX!w)oX!y)oX#R)oX#T)oX#V)oX#X)oX#Y)oX#Z)oX#])oX#r)oX#s)oX#x)oX#|)oX$P)oX$X)oX$])oX$^)oX$_)oX$a)oX$c)oX$d)oX$e)oX$f)oX$g)oX$k)oX$m)oX$n)oX$q)oX'o)oX'u)oX(X)oX(Y)oX$[)oX~OY)YX])oX~P*7sOY=eO~O$]=lO~OV=oO^0rOeFeO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y=rO!Z%uO!h8gO!j%cO!k%cO!s1mO!tM_O!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO#x1kO$q%xO'oHWO'u!^O~P)1OO^!`O!s=uO!t5UO'oyO'u!^O~OV*Saa*Sa]*Sa~P*+wOV=xO~OV=zO~P#!PO!h8gO!s1mO!tM_O#x1kO'o)SO~P!;qOV>TO~O#x>WO^)ma!t)ma'o)ma'u)ma~Oo>XO~O$h>]O$j>_O~O^!`Oa'kOg>cO'oyO'u!^O~OZ>dOh>eOj>eO](|X~O]>gO~Oh8sO])Oa~Oa>jO])xqd)xq~P#!POY>mOa>jO])xqd)xq~OV>pO~O^>tO~OV>vO~O]>wO~O^>xOg.zO~O^>zO~O^>|O~O^>xO~O%u?PO%v?QO%w?QO~OcaO%g2lO%h2mO%i2mO%u9dO~OV?UO~P#!POa9tOV)sa~OZXXZ!oX^!oXhXXo%sX#p%sX~OZ!wOh2wO~OZ#bO^+]a~OV)pXa)pX])pX~P#!POV?`O~P#!POd?cO~O'o?dO~OcaO%z?jO%{?kO~OV?lO~P#!POa:bOV)}a^)}ao)}ar)}a$S)}a#p)}a~O!y3fO~O]?pO~Oa,cqn,cq~P#!POV?rO~Oa?tOV,Pa~OV?wO$S#]O~OV?yO~OcaO%u@OO%v@PO~On@QO~OV@RO~OV@SO~OV@TOT,]!cc,]!cl,]!cm,]!c!h,]!c!y,]!c#r,]!c#s,]!c#x,]!c$P,]!c$T,]!c$U,]!c%f,]!c%g,]!c%h,]!c%i,]!c%j,]!c%k,]!c%l,]!c%m,]!c%n,]!c%o,]!c%p,]!c%q,]!c&T,]!c&W,]!c&X,]!c'c,]!cn,]!c^,]!c!R,]!c#|,]!c%x,]!c'o,]!c'u,]!c$n,]!c~OV@TOo#[O~OV@TOo#[Or#^O~OV@WOT(P!cc(P!cl(P!cm(P!c!h(P!c!y(P!c#r(P!c#s(P!c#x(P!c$P(P!c$T(P!c$U(P!c%f(P!c%g(P!c%h(P!c%i(P!c%j(P!c%k(P!c%l(P!c%m(P!c%n(P!c%o(P!c%p(P!c%q(P!c&T(P!c&W(P!c&X(P!c'c(P!cn(P!c^(P!c!R(P!c#|(P!c%x(P!c'o(P!c'u(P!c$n(P!c~OV@YOT+|!cc+|!cl+|!cm+|!c!h+|!c!y+|!c#r+|!c#s+|!c#x+|!c$P+|!c$T+|!c$U+|!c%f+|!c%g+|!c%h+|!c%i+|!c%j+|!c%k+|!c%l+|!c%m+|!c%n+|!c%o+|!c%p+|!c%q+|!c&T+|!c&W+|!c&X+|!c'c+|!cn+|!c^+|!c!R+|!c#|+|!c%x+|!c'o+|!c'u+|!c$n+|!c~OV@[OT,Q!cc,Q!cl,Q!cm,Q!c!h,Q!c!y,Q!c#r,Q!c#s,Q!c#x,Q!c$P,Q!c$T,Q!c$U,Q!c%f,Q!c%g,Q!c%h,Q!c%i,Q!c%j,Q!c%k,Q!c%l,Q!c%m,Q!c%n,Q!c%o,Q!c%p,Q!c%q,Q!c&T,Q!c&W,Q!c&X,Q!c'c,Q!cn,Q!c^,Q!c!R,Q!c#|,Q!c%x,Q!c'o,Q!c'u,Q!c$n,Q!c~OV@^O$S#]O~O]&iia&ii~P#!POZ!wOY(hy](hy^(hya(hyc(hye(hyf(hyg(hyh(hy!O(hy!P(hy!Q(hy!S(hy!T(hy!U(hy!V(hy![(hy!](hy!^(hy!_(hy!`(hy!a(hy!b(hy!c(hy!d(hy!e(hy!g(hy#](hy#e(hy#n(hy#q(hy$p(hy$x(hy$y(hy$z(hy$|(hy$}(hy%O(hy%P(hy%Q(hy%R(hy%S(hy%T(hyn(hyr(hyd(hy%d(hy$S(hy%X(hy%Y(hy%Z(hy%_(hy%b(hy%c(hy%`(hy%a(hy%^(hyV(hy%[(hyT(hyl(hy!R(hy!h(hy!y(hy#r(hy#s(hy#x(hy#|(hy$P(hy$T(hy$U(hy%f(hy%g(hy%h(hy%i(hy%j(hy%k(hy%l(hy%m(hy%n(hy%o(hy%p(hy%q(hy%x(hy&T(hy&W(hy&X(hy'o(hy'u(hy$n(hy#p(hyW(hyo(hyv(hyw(hyx(hyy(hy|(hy!Y(hy!Z(hy!j(hy!k(hy!s(hy!t(hy!v(hy!w(hy#R(hy#T(hy#V(hy#X(hy#Y(hy#Z(hy$X(hy$](hy$^(hy$_(hy$a(hy$c(hy$d(hy$e(hy$f(hy$g(hy$k(hy$m(hy$q(hy(X(hy(Y(hy%](hy$[(hy~O^%ZOeKWOlLsO|%bO!OKWO!PKWO!QKWO!RKWO!SKWO!TKWO!U%tO!V%tO!YKWO!ZKhO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#nKaO#rLoO#s&QO$q%xO%X%{O'oFvO'u!^O~P)1OOa;kOn)Sa~On@dO~Oo0gO!h@hO'o)SO~P!;qOc)mO'o5fO~Oa;pOn(qa~On@kO~On@mO'o;tO~On@mOr@nO~On@oO'o;tO~On@oOr@pO~O]$wya$wyY$wy![$wy!]$wy!^$wy!_$wy!`$wy!a$wy!b$wy!c$wy!d$wy!g$wyn$wyr$wyd$wy%d$wy%`$wy%a$wy%^$wyV$wy%[$wy%]$wy~P#!PO#_5}O'o'qOZ)_i])_ia)_ie)_if)_ig)_i!O)_i!P)_i!S)_i!T)_i!e)_i#e)_i#h)_i#i)_i#n)_i$x)_i$y)_i$z)_i$|)_i$})_i%O)_i%P)_i%Q)_i%R)_i%S)_i%T)_iY)_i![)_i!])_i!^)_i!_)_i!`)_i!a)_i!b)_i!c)_i!d)_i!g)_i#o)_i#p)_id)_in)_ir)_i%d)_i$S)_i%X)_i%Y)_i%Z)_i%_)_i%b)_i%c)_i%`)_i%a)_i%^)_iV)_i%[)_iT)_i^)_ic)_il)_i!R)_i!h)_i!y)_i#r)_i#s)_i#x)_i#|)_i$P)_i$T)_i$U)_i%f)_i%g)_i%h)_i%i)_i%j)_i%k)_i%l)_i%m)_i%n)_i%o)_i%p)_i%q)_i%x)_i&T)_i&W)_i&X)_i'u)_i$n)_iW)_io)_iv)_iw)_ix)_iy)_i|)_i!Q)_i!U)_i!V)_i!Y)_i!Z)_i!j)_i!k)_i!s)_i!t)_i!v)_i!w)_i#R)_i#T)_i#V)_i#X)_i#Y)_i#Z)_i#])_i$X)_i$])_i$^)_i$_)_i$a)_i$c)_i$d)_i$e)_i$f)_i$g)_i$k)_i$m)_i$q)_i(X)_i(Y)_i%])_i$[)_i~Oh<POr)^a~Oa<SOn)]a~On@wO~O#hJ_O#iJbOa)bad)ba~Oa<YOd)aa~Od@{O~Oa<^O])`a~Oa<^O#hJ_O#iJbO])`a~OaAQO])[X~O]ASO~OZ#fia#fie#fif#fig#fi!O#fi!P#fi!S#fi!T#fi!e#fi#e#fi#i#fi#n#fi$x#fi$y#fi$z#fi$|#fi$}#fi%O#fi%P#fi%Q#fi%R#fi%S#fi%T#fiY#fi![#fi!]#fi!^#fi!_#fi!`#fi!a#fi!b#fi!c#fi!d#fi!g#fin#fi%^#fiV#fi~O#h6aO]#fir#fid#fi%d#fi$S#fi%X#fi%Y#fi%Z#fi%_#fi%b#fi%c#fi%`#fi%a#fi%[#fi#p#fi%]#fi~P+=ROYATO~Oa<kOn*rad*ra~O$S*wy%X*wy%Y*wy%Z*wy%_*wy%b*wy%c*wy~P'DpO$S*{q%X*{q%Y*{q%Z*{q%_*{q%b*{q%c*{q~P'DpO%[AWO~P#!PO]+Qqa+Qq%^+QqY+Qq![+Qq!]+Qq!^+Qq!_+Qq!`+Qq!a+Qq!b+Qq!c+Qq!d+Qq!g+Qqn+Qqr+Qqd+Qq%d+Qq%`+Qq%a+QqV+Qq%[+Qq%]+Qq~P#!POa<vO$S*}i%X*}i%Y*}i%Z*}i%_*}i%b*}i%c*}i~Oa({in({i~P#!PO'oA]O~Oo7UO!h7XO'o)SO~P!;qOa<}On(ua~OaAaOn(wX~P#!POnAcO~OnAeO~Oa(van(va~P!E_Oa=XOn)ra~OnAiO~OV*TiY(jiZ(ji^(jic(jif(jig(jih(ji!Q(ji!U(ji!V(ji![(ji!](ji!^(ji!_(ji!`(ji!a(ji!b(ji!c(ji!d(ji!g(ji#](ji#q(ji$p(jia*Ti]*Ti~OVAmO~P#!PO^%ZOeFrOlLrO|%bO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!ZFnO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFgO#rLnO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO$S#]Oo)ui#p)ui~O$YAqOT*ViV*ViW*Vi^*Vie*Vil*Vin*Vio*Viv*Viw*Vix*Viy*Vi|*Vi!O*Vi!P*Vi!Q*Vi!R*Vi!S*Vi!T*Vi!U*Vi!V*Vi!Y*Vi!Z*Vi!h*Vi!j*Vi!k*Vi!s*Vi!t*Vi!v*Vi!w*Vi!y*Vi#R*Vi#T*Vi#V*Vi#X*Vi#Y*Vi#Z*Vi#]*Vi#r*Vi#s*Vi#x*Vi#|*Vi$P*Vi$X*Vi$]*Vi$^*Vi$_*Vi$a*Vi$c*Vi$d*Vi$e*Vi$f*Vi$g*Vi$k*Vi$m*Vi$n*Vi$q*Vi'o*Vi'u*Vi(X*Vi(Y*Vi$[*Vi~O]-}O^*RO'o*QO~OaAsOV*`X]*`X~OVAuO'o)SO~P!;qOVAwO~OVA{O~P#!POVA|O~P#!PO]*kX~P#!PO]A}O~O^*RO'oHeO~OVBOO~P#!PO'oBPO~OnBSO#YBVO$[BUO~O$hBXOT*gXV*gXW*gX^*gXe*gXl*gXn*gXo*gXv*gXw*gXx*gXy*gX|*gX!O*gX!P*gX!Q*gX!R*gX!S*gX!T*gX!U*gX!V*gX!Y*gX!Z*gX!h*gX!j*gX!k*gX!s*gX!t*gX!v*gX!w*gX!y*gX#R*gX#T*gX#V*gX#X*gX#Y*gX#Z*gX#]*gX#r*gX#s*gX#x*gX#|*gX$P*gX$X*gX$]*gX$^*gX$_*gX$a*gX$c*gX$d*gX$e*gX$f*gX$g*gX$j*gX$k*gX$m*gX$n*gX$q*gX'o*gX'u*gX(X*gX(Y*gX$Y*gX$[*gX~O^BYO#oB[O~O$jB^OT*fiV*fiW*fi^*fie*fil*fin*fio*fiv*fiw*fix*fiy*fi|*fi!O*fi!P*fi!Q*fi!R*fi!S*fi!T*fi!U*fi!V*fi!Y*fi!Z*fi!h*fi!j*fi!k*fi!s*fi!t*fi!v*fi!w*fi!y*fi#R*fi#T*fi#V*fi#X*fi#Y*fi#Z*fi#]*fi#r*fi#s*fi#x*fi#|*fi$P*fi$X*fi$]*fi$^*fi$_*fi$a*fi$c*fi$d*fi$e*fi$f*fi$g*fi$k*fi$m*fi$n*fi$q*fi'o*fi'u*fi(X*fi(Y*fi$Y*fi$[*fi~OZ8nOh8lOj>eOc'zae'zaf'za~OZ8nOj>eOciieiifiihii~Oa'kOgBaO~Oa'kOg>cO~OaBdO])xyd)xy~P#!POVBfO~O]BhO~O%u?PO~OV)tia)ti~P#!POVBuO~P#!POVBvO~OZXXhXXo%sX~OZ!wOh:[O~OcaO%zBxO%{ByO~OcaO%{?kO~OcaO%z?jO~OnB}O~OVCQO~Oa?tOV,Pi~O'oCSO~OVCTO$S#]O~OVCXO~OVCYO~OVCZO~OcaO%vC]On,Ya~OcaO%uC]On,Ya~OVC_OT,]!kc,]!kl,]!km,]!k!h,]!k!y,]!k#r,]!k#s,]!k#x,]!k$P,]!k$T,]!k$U,]!k%f,]!k%g,]!k%h,]!k%i,]!k%j,]!k%k,]!k%l,]!k%m,]!k%n,]!k%o,]!k%p,]!k%q,]!k&T,]!k&W,]!k&X,]!k'c,]!kn,]!k^,]!k!R,]!k#|,]!k%x,]!k'o,]!k'u,]!k$n,]!k~OVC_Oo#[O~OVCaOT(P!kc(P!kl(P!km(P!k!h(P!k!y(P!k#r(P!k#s(P!k#x(P!k$P(P!k$T(P!k$U(P!k%f(P!k%g(P!k%h(P!k%i(P!k%j(P!k%k(P!k%l(P!k%m(P!k%n(P!k%o(P!k%p(P!k%q(P!k&T(P!k&W(P!k&X(P!k'c(P!kn(P!k^(P!k!R(P!k#|(P!k%x(P!k'o(P!k'u(P!k$n(P!k~OVCbOT+|!kc+|!kl+|!km+|!k!h+|!k!y+|!k#r+|!k#s+|!k#x+|!k$P+|!k$T+|!k$U+|!k%f+|!k%g+|!k%h+|!k%i+|!k%j+|!k%k+|!k%l+|!k%m+|!k%n+|!k%o+|!k%p+|!k%q+|!k&T+|!k&W+|!k&X+|!k'c+|!kn+|!k^+|!k!R+|!k#|+|!k%x+|!k'o+|!k'u+|!k$n+|!k~OVCcOT,Q!kc,Q!kl,Q!km,Q!k!h,Q!k!y,Q!k#r,Q!k#s,Q!k#x,Q!k$P,Q!k$T,Q!k$U,Q!k%f,Q!k%g,Q!k%h,Q!k%i,Q!k%j,Q!k%k,Q!k%l,Q!k%m,Q!k%n,Q!k%o,Q!k%p,Q!k%q,Q!k&T,Q!k&W,Q!k&X,Q!k'c,Q!kn,Q!k^,Q!k!R,Q!k#|,Q!k%x,Q!k'o,Q!k'u,Q!k$n,Q!k~Oa)Tin)Ti~P#!POZG_OeGROfLxOgF}O!OGVO!PGVO!SGgO!TGkO!eG_O#eG_O#nHPO$xGRO$yGRO$zGZO$|)|O$})}O%OGcO%PGcO%QGoO%RGsO%SGwO%TG{O~O#pCdO~P,:cOa(sXn(sX~P!E_Oo0gO'o)SO~P!;qO#hJ_O#iJbOa#cin#ci~O#hJ_O#iJbOa&vad&va~O#hJ_O#iJbO]&uaa&ua~Oa<^O])`i~OaAQO])[a~Oa'Uan'Uad'Ua~P#!PO%[CmO~P#!POa({qn({q~P#!PO^`X^!oXc`Xf`Xh`X!Q`X!U`X!V`X#]`X#q`X$p`X~OZ!wOa(mXn(mX~P,>bO!hCpO'o)SO~P!;qOaAaOn(wa~OaAaOn(wa~P#!POa&zan&za~P#!PO$S#]Oo)uq#p)uq~OVCvO~P#!POZG^OeGQOfLwOgF|O!OGUO!PGUO!SGfO!TGjO!eG^O#eG^O#nHOO$xGQO$yGQO$zGYO$|)|O$}KoO%OGbO%PGbO%QGnO%RGrO%SGvO%TGzO~OT#wqV#wqW#wq^#wql#wqn#wqo#wqv#wqw#wqx#wqy#wq|#wq!Q#wq!R#wq!U#wq!V#wq!Y#wq!Z#wq!h#wq!j#wq!k#wq!s#wq!t#wq!v#wq!w#wq!y#wq#R#wq#T#wq#V#wq#X#wq#Y#wq#Z#wq#]#wq#r#wq#s#wq#x#wq#|#wq$P#wq$X#wq$]#wq$^#wq$_#wq$a#wq$c#wq$d#wq$e#wq$f#wq$g#wq$k#wq$m#wq$n#wq$q#wq'o#wq'u#wq(X#wq(Y#wq$[#wq~P,@nOVCyO~O^8OOeFeO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y=rO!Z%uO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O~P)1OOaAsOV*`a]*`a~O]C|O^8OOeFeO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y=rO!Z%uO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O~P)1OOVDOO~P#!POVDOO'o)SO~P!;qO!qDQO~OYDSO~OaDTO]*nX~O]DVO~OnDWO~OrDYO~Oo+QO#oD_O~OZ>dOh>eOj>eO~OaDcO])x!Rd)x!R~P#!POaDhO~O]DiOaDhO~O]DiO~OcaO%{ByO~OcaO%zBxO~OVDmO$S#]O~OcaO%vDpOn,Yi~OcaO%uDpOn,Yi~OcaO%vDpO~OVDrO~OcaO%uDpO~OVDsOT,]!sc,]!sl,]!sm,]!s!h,]!s!y,]!s#r,]!s#s,]!s#x,]!s$P,]!s$T,]!s$U,]!s%f,]!s%g,]!s%h,]!s%i,]!s%j,]!s%k,]!s%l,]!s%m,]!s%n,]!s%o,]!s%p,]!s%q,]!s&T,]!s&W,]!s&X,]!s'c,]!sn,]!s^,]!s!R,]!s#|,]!s%x,]!s'o,]!s'u,]!s$n,]!s~OnDuO'o;tO~OnDvO'o;tO~O#hJ_O#iJbO]&uia&ui~OaDwO~P!E_O%]DxO~P#!POa&man&ma~P#!POaAaOn(wi~O$S#]Oo)uy#p)uy~O]D}O~O]D}O^8OOeFeO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y=rO!Z%uO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O~P)1OOVEPO~P#!PO!qERO~OaDTO]*na~OrEVO#hJ_O#iJbO#oEWO~OT1[OV1OOW1fO^0rOeFeOl1[Oo+QO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#YEZO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$[EYO$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^On*Xa~P)1OO]E]O'o'qO~OYEdOa+sa]+sa~OVEfO$S#]O~OcaO%vEgO~OVEhO~OcaO%uEgO~Oa)Tyn)Ty~P#!PO%]EkO~P#!POa&min&mi~P#!PO$S#]Oo)u!R#p)u!R~O]EmO~O]EmO^8OOeFeO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y=rO!Z%uO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O~P)1OO]EoO~P#!PO]*oia*oi~P#!POT1[OV1OOW1fO^0rOeFeOl1[Oo+QO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#YEZO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$[EYO$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^On*Xi~P)1OOT1[OV1OOW1fO^0rOeFeOl1[Oo+QO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#YEZO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$[EYO$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^On*YX~P)1OO^*xOrEuO~O]EvO~OYExOa+si]+si~O]E{O~OVE|O~O%^E}O$S*|!c%X*|!c%Y*|!c%Z*|!c%_*|!c%b*|!c%c*|!c~P'DpO$S#]Oo)u!Z#p)u!Z~O]FPO~O]FQO~P#!POrFRO~P#!POrFSO#hJ_O#iJbO#oFTO~On*Ya~P$FrOYFWOa+sq]+sq~Oa+sq]+sq~P#!PO'oFXO~O%^FYO$S*|!k%X*|!k%Y*|!k%Z*|!k%_*|!k%b*|!k%c*|!k~P'DpOT1[OV1OOW1fO^0rOeFeOl1[Oo+QO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#YEZO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$[EYO$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^On*Xy~P)1OOT1[OV1OOW1fO^0rOeFeOl1[Oo+QO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#YEZO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$[EYO$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^On*Yi~P)1OOn*Yi~P$FrOa+sy]+sy~P#!PO'oF_O~OrF`O~P#!POa+s!R]+s!R~P#!POT1[OV1OOW1fO^0rOeFeOl1[Oo+QO|%bO!OFeO!PFeO!QFeO!RFeO!SFeO!TFeO!U1TO!V1TO!Y1bO!Z1UO!h1lO!j%cO!k%cO!s1mO!t1WO!v%eO!w%wO!y&PO#R&RO#T&SO#V1qO#X1qO#YEZO#Z&UO#]1nO#r1ZO#s&QO#x1kO#|1YO$P1[O$X1]O$[EYO$]1^O$^1_O$_1`O$a1aO$c1oO$d1oO$e1cO$f1dO$g1pO$k1eO$m1gO$n1hO$q%xO'o0qO'u!^On*Yy~P)1OOZ'tae'taf'ta!O'ta!P'ta!S'ta!T'ta!e'ta#e'ta#n'ta$x'ta$y'ta$z'ta$|'ta$}'ta%O'ta%P'ta%Q'ta%R'ta%S'ta%T'taY'ta!['ta!]'ta!^'ta!_'ta!`'ta!a'ta!b'ta!c'ta!d'ta!g'tan'tar'tad'ta%d'ta$S'ta%X'ta%Y'ta%Z'ta%_'ta%b'ta%c'ta%`'ta%a'ta%^'taV'ta%['ta#p'taT'taW'tal'tav'taw'tax'tay'ta|'ta!Q'ta!R'ta!U'ta!V'ta!Y'ta!Z'ta!h'ta!j'ta!k'ta!s'ta!t'ta!w'ta!y'ta#R'ta#T'ta#V'ta#X'ta#Y'ta#Z'ta#]'ta#r'ta#s'ta#x'ta#|'ta$P'ta$X'ta$]'ta$^'ta$_'ta$a'ta$c'ta$d'ta$e'ta$f'ta$g'ta$k'ta$m'ta$n'ta$q'ta'u'ta(X'ta(Y'ta%]'ta$['ta~P!&nOeFqOlLqO!OFqO!PFqO!QFqO!RFqO!SFqO!TFqO!YFqO!ZFmO#rLmO$S%UX%X%UX%Y%UX%Z%UX%_%UX%b%UX%c%UX~P##gO%X%{OT%UXZ%UX^%UXa%UXf%UXg%UXl%UXn%UX!e%UX!h%UX#e%UX#n%UX#r%UX#s%UX#x%UX#|%UX$P%UX$n%UX$x%UX$y%UX$z%UX$|%UX$}%UX%O%UX%P%UX%Q%UX%R%UX%S%UX%T%UX'o%UX'u%UXY%UX![%UX!]%UX!^%UX!_%UX!`%UX!a%UX!b%UX!c%UX!d%UX!g%UX%^%UX~OeFrO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!yFtOV%UXW%UXo%UXv%UXw%UXx%UXy%UX|%UX!Z%UX!j%UX!k%UX!s%UX!t%UX!v%UX!w%UX#R%UX#T%UX#V%UX#X%UX#Y%UX#Z%UX#]%UX$X%UX$]%UX$^%UX$_%UX$a%UX$c%UX$d%UX$e%UX$f%UX$g%UX$k%UX$m%UX$q%UX(X%UX(Y%UX$[%UX~P-NTOeFsOv%YOw%YOx%YOy%YO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO$q%xO(X%WO(Y%XOc%UX$T%UX$U%UX%f%UX%g%UX%h%UX%i%UX%j%UX%k%UX%l%UX%m%UX%n%UX%o%UX%p%UX%q%UX%x%UX&T%UX&W%UX&X%UX~P-NTO^%ZOeFsOlLtO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFhO#rLpO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OOT(TX^(TXc(TXl(TX!R(TX!h(TX!y(TX#r(TX#s(TX#x(TX#|(TX$P(TX$T(TX$U(TX%f(TX%g(TX%h(TX%i(TX%j(TX%k(TX%l(TX%m(TX%n(TX%o(TX%p(TX%q(TX%x(TX&T(TX&W(TX&X(TX'o(TX'u(TX$n(TXW(TXo(TXv(TXw(TXx(TXy(TX|(TX!Q(TX!U(TX!V(TX!Y(TX!Z(TX!j(TX!k(TX!s(TX!t(TX!v(TX!w(TX#R(TX#T(TX#V(TX#X(TX#Y(TX#Z(TX#](TX$X(TX$](TX$^(TX$_(TX$a(TX$c(TX$d(TX$e(TX$f(TX$g(TX$k(TX$m(TX$q(TX(X(TX(Y(TX$[(TX~P#,hOd!lX~P!7bOY!lXZXXZ!lXZ!oXcXXeXXe!lXfXXg!lXhXX!O!lX!P!lX!S!lX!T!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!e!lX!g!lX#e!lX#n!lX#p!lX#p#uX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lX%^!lX~P'HxO!hHjO~P$;cO^%ZOeFrOlLrO|%bO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!ZFnO!hHkO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFgO#rLnO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO^%ZOeKWOlLsO|%bO!OKWO!PKWO!QKWO!RKWO!SKWO!TKWO!U%tO!V%tO!YKWO!ZKhO!hHlO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#nKaO#rLoO#s&QO$q%xO%X%{O'oFvO'u!^O~P)1OO^%ZOeFsOlLtO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!hHmO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFhO#rLpO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OOg.zO~P$;cO^%ZOeFrOg.zOlLrO|%bO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!ZFnO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFgO#rLnO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO^%ZOeKWOg.zOlLsO|%bO!OKWO!PKWO!QKWO!RKWO!SKWO!TKWO!U%tO!V%tO!YKWO!ZKhO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#nKaO#rLoO#s&QO$q%xO%X%{O'oFvO'u!^O~P)1OO^%ZOeFsOg.zOlLtO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFhO#rLpO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OOeFqOlLqO!OFqO!PFqO!QFqO!RFqO!SFqO!TFqO!YFqO!ZFmO#rLmO$S%Ua%X%Ua%Y%Ua%Z%Ua%_%Ua%b%Ua%c%Ua~P$&]O%X%{OT%UaZ%Ua^%Uaa%Uaf%Uag%Ual%Uan%Ua!e%Ua!h%Ua#e%Ua#n%Ua#r%Ua#s%Ua#x%Ua#|%Ua$P%Ua$n%Ua$x%Ua$y%Ua$z%Ua$|%Ua$}%Ua%O%Ua%P%Ua%Q%Ua%R%Ua%S%Ua%T%Ua'o%Ua'u%UaY%Ua![%Ua!]%Ua!^%Ua!_%Ua!`%Ua!a%Ua!b%Ua!c%Ua!d%Ua!g%Ua%^%Ua~OeFrO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!yFtOV%UaW%Uao%Uav%Uaw%Uax%Uay%Ua|%Ua!Z%Ua!j%Ua!k%Ua!s%Ua!t%Ua!v%Ua!w%Ua#R%Ua#T%Ua#V%Ua#X%Ua#Y%Ua#Z%Ua#]%Ua$X%Ua$]%Ua$^%Ua$_%Ua$a%Ua$c%Ua$d%Ua$e%Ua$f%Ua$g%Ua$k%Ua$m%Ua$q%Ua(X%Ua(Y%Ua$[%Ua~P.BkO^%ZOeKWOlLsO|%bO!OKWO!PKWO!QKWO!RKWO!SKWO!TKWO!U%tO!V%tO!YKWO!ZKhO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#rLoO#s&QO$q%xO%X%{O'oFvO'u!^OZ%Uaf%Uag%Ua!e%Ua#e%Ua#n%Ua#p%Ua$x%Ua$y%Ua$z%Ua$|%Ua$}%Ua%O%Ua%P%Ua%Q%Ua%R%Ua%S%Ua%T%UaY%Ua![%Ua!]%Ua!^%Ua!_%Ua!`%Ua!a%Ua!b%Ua!c%Ua!d%Ua!g%Ua%^%Ua~P)1OOeFsOv%YOw%YOx%YOy%YO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO$q%xO(X%WO(Y%XOc%Ua$T%Ua$U%Ua%f%Ua%g%Ua%h%Ua%i%Ua%j%Ua%k%Ua%l%Ua%m%Ua%n%Ua%o%Ua%p%Ua%q%Ua%x%Ua&T%Ua&W%Ua&X%Ua~P.BkOo+QO~P$;cO^%ZOeFrOlLrOo+QO|%bO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!ZFnO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFgO#rLnO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO^%ZOeKWOlLsOo+QO|%bO!OKWO!PKWO!QKWO!RKWO!SKWO!TKWO!U%tO!V%tO!YKWO!ZKhO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#nKaO#rLoO#s&QO$q%xO%X%{O'oFvO'u!^O~P)1OO^%ZOeFsOlLtOo+QO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFhO#rLpO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OOW}ao}av}aw}ax}ay}a|}a!Q}a!U}a!V}a!Y}a!Z}a!j}a!k}a!s}a!t}a!v}a!w}a#R}a#T}a#V}a#X}a#Y}a#Z}a#]}a$X}a$]}a$^}a$_}a$a}a$c}a$d}a$e}a$f}a$g}a$k}a$m}a$q}a(X}a(Y}a$[}a~P$-yOY}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}a$S}a%X}a%Y}a%Z}a%_}a%b}a%c}a%^}a~P'DpOT}aV}aW}aY}a^}aa}al}an}ao}av}aw}ax}ay}a|}a!Q}a!R}a!U}a!V}a!Y}a!Z}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}a!h}a!j}a!k}a!s}a!t}a!v}a!w}a!y}a#R}a#T}a#V}a#X}a#Y}a#Z}a#]}a#r}a#s}a#x}a#|}a$P}a$X}a$]}a$^}a$_}a$a}a$c}a$d}a$e}a$f}a$g}a$k}a$m}a$n}a$q}a'o}a'u}a(X}a(Y}a%^}a$[}a~P,@nOY}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}a#p}a%^}a~P,:cOZG`OeGSOfLyOgGOO!OGWO!PGWO!SGhO!TGlO!eG`O#eG`O#nHQO$xGSO$yGSO$zG[O$|HRO$}KnO%OGdO%PGdO%QGpO%RGtO%SGxO%TG|O~OT}aY}a^}aa}ac}al}an}a!R}a![}a!]}a!^}a!_}a!`}a!a}a!b}a!c}a!d}a!g}a!h}a!y}a#r}a#s}a#x}a#|}a$P}a$T}a$U}a%f}a%g}a%h}a%i}a%j}a%k}a%l}a%m}a%n}a%o}a%p}a%q}a%x}a&T}a&W}a&X}a'o}a'u}a$n}a%^}a~P/2oOV`XW`XZ!oX^!oXe`Xo`Xv`Xw`Xx`Xy`X|`X!O`X!P`X!Q`X!S`X!T`X!U`X!V`X!Y`X!Z`X!j`X!k`X!s`X!t`X!v`X!w`X#R`X#T`X#V`X#X`X#Y`X#Z`X#]`X$X`X$]`X$^`X$_`X$a`X$c`X$d`X$e`X$f`X$g`X$k`X$m`X$q`X(X`X(Y`X$[`X~P(@oOY`XZXXZ`XZ!oXcXXeXXfXXg`XhXX![`X!]`X!^`X!_`X!``X!a`X!b`X!c`X!d`X!g`X~P,>bO]`Xa`X#p#uXY`X~O$S(^i%X(^i%Y(^i%Z(^i%_(^i%b(^i%c(^iY(^i![(^i!](^i!^(^i!_(^i!`(^i!a(^i!b(^i!c(^i!d(^i!g(^i%^(^i~P'DpOT(^iV(^iW(^i^(^ia(^il(^in(^io(^iv(^iw(^ix(^iy(^i|(^i!Q(^i!R(^i!U(^i!V(^i!Y(^i!Z(^i!h(^i!j(^i!k(^i!s(^i!t(^i!v(^i!w(^i!y(^i#R(^i#T(^i#V(^i#X(^i#Y(^i#Z(^i#](^i#r(^i#s(^i#x(^i#|(^i$P(^i$X(^i$](^i$^(^i$_(^i$a(^i$c(^i$d(^i$e(^i$f(^i$g(^i$k(^i$m(^i$n(^i$q(^i'o(^i'u(^i(X(^i(Y(^iY(^i![(^i!](^i!^(^i!_(^i!`(^i!a(^i!b(^i!c(^i!d(^i!g(^i%^(^i$[(^i~P,@nO#p(^iY(^i![(^i!](^i!^(^i!_(^i!`(^i!a(^i!b(^i!c(^i!d(^i!g(^i%^(^i~P,:cOT(^i^(^ia(^ic(^il(^in(^i!R(^i!h(^i!y(^i#r(^i#s(^i#x(^i#|(^i$P(^i$T(^i$U(^i%f(^i%g(^i%h(^i%i(^i%j(^i%k(^i%l(^i%m(^i%n(^i%o(^i%p(^i%q(^i%x(^i&T(^i&W(^i&X(^i'o(^i'u(^i$n(^iY(^i![(^i!](^i!^(^i!_(^i!`(^i!a(^i!b(^i!c(^i!d(^i!g(^i%^(^i~P/2oOeGPO!OGTO!PGTO#nG}O$xGPO$yGPOZ$wif$wi!S$wi!T$wi!e$wi#e$wi$S$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~OgF{O$zGXO~P/F]OeGQO!OGUO!PGUO#nHOO$xGQO$yGQOT$wiV$wiW$wiZ$wi^$wia$wif$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!Q$wi!R$wi!S$wi!T$wi!U$wi!V$wi!Y$wi!Z$wi!e$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#e$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~OgF|O$zGYO~P/ISOeGRO!OGVO!PGVO#nHPO$xGRO$yGROZ$wif$wi!S$wi!T$wi!e$wi#e$wi#p$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~OgF}O$zGZO~P0 YOeGSO!OGWO!PGWO#nHQO$xGSO$yGSOT$wiZ$wi^$wia$wic$wif$wil$win$wi!R$wi!S$wi!T$wi!e$wi!h$wi!y$wi#e$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~OgGOO$zG[O~P0#mO#nG}OZ$wif$wig$wi!O$wi!P$wi!S$wi!T$wi!e$wi#e$wi$S$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~Oe$wi$x$wi$y$wi~P0([OT$wiV$wiW$wiZ$wi^$wia$wie$wif$wig$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!O$wi!P$wi!Q$wi!R$wi!S$wi!T$wi!U$wi!V$wi!Y$wi!Z$wi!e$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#e$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi$x$wi$y$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~O#nHOO~P0+ROZ$wie$wif$wig$wi!O$wi!P$wi!S$wi!T$wi!e$wi#e$wi$x$wi$y$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O#nHPO#p$wi~P01XO#nHQOT$wi^$wia$wic$wil$win$wi!R$wi!h$wi!y$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wi~P01XOeGPO$xGPO$yGPO~P0([OeGQO#nHOO$xGQO$yGQOT$wiV$wiW$wiZ$wi^$wia$wif$wig$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!Q$wi!R$wi!S$wi!T$wi!U$wi!V$wi!Y$wi!Z$wi!e$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#e$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~O!O$wi!P$wi~P06_OeGRO#nHPO$xGRO$yGROZ$wif$wig$wi!S$wi!T$wi!e$wi#e$wi#p$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O!O$wi!P$wi~P0<eOeGSO#nHQO$xGSO$yGSOT$wiZ$wi^$wia$wic$wif$wig$wil$win$wi!R$wi!S$wi!T$wi!e$wi!h$wi!y$wi#e$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O!O$wi!P$wi~P0>xOg$wi$z$wi~P/F]Og$wi$z$wi~P/ISOg$wi$z$wi~P0 YOg$wi$z$wi~P0#mOZG]OeGPOgF{O!OGTO!PGTO!eG]O#eG]O#nG}O$xGPO$yGPO$zGXO$|)|O$})}Of$wi!S$wi!T$wi$S$wi%Q$wi%R$wi%S$wi%T$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O%O$wi%P$wi~P0DaOZG^OeGQOgF|O!OGUO!PGUO!eG^O#eG^O#nHOO$xGQO$yGQO$zGYO$|)|O$}KoOT$wiV$wiW$wi^$wia$wif$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!Q$wi!R$wi!S$wi!T$wi!U$wi!V$wi!Y$wi!Z$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi%Q$wi%R$wi%S$wi%T$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~O%O$wi%P$wi~P0GWOZG_OeGROgF}O!OGVO!PGVO!eG_O#eG_O#nHPO$xGRO$yGRO$zGZO$|)|O$})}Of$wi!S$wi!T$wi#p$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O%O$wi%P$wi~P0M^OZG`OeGSOgGOO!OGWO!PGWO!eG`O#eG`O#nHQO$xGSO$yGSO$zG[O$|HRO$}KnOT$wi^$wia$wic$wif$wil$win$wi!R$wi!S$wi!T$wi!h$wi!y$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi%Q$wi%R$wi%S$wi%T$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O%O$wi%P$wi~P1 qO%OGaO%PGaO~P0DaO%OGbO%PGbO~P0GWO%OGcO%PGcO~P0M^O%OGdO%PGdO~P1 qOZG]OeGPOgF{O!OGTO!PGTO!SGeO!eG]O#eG]O#nG}O$xGPO$yGPO$zGXO$|)|O$})}O%OGaO%PGaOf$wi$S$wi%Q$wi%R$wi%S$wi%T$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O!T$wi~P1'YOZG^OeGQOgF|O!OGUO!PGUO!SGfO!eG^O#eG^O#nHOO$xGQO$yGQO$zGYO$|)|O$}KoO%OGbO%PGbOT$wiV$wiW$wi^$wia$wif$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!Q$wi!R$wi!U$wi!V$wi!Y$wi!Z$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi%Q$wi%R$wi%S$wi%T$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~O!T$wi~P1*POZG_OeGROgF}O!OGVO!PGVO!SGgO!eG_O#eG_O#nHPO$xGRO$yGRO$zGZO$|)|O$})}O%OGcO%PGcOf$wi#p$wi%Q$wi%R$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O!T$wi~P10VOZG`OeGSOgGOO!OGWO!PGWO!SGhO!eG`O#eG`O#nHQO$xGSO$yGSO$zG[O$|HRO$}KnO%OGdO%PGdOT$wi^$wia$wic$wif$wil$win$wi!R$wi!h$wi!y$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi%Q$wi%R$wi%S$wi%T$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O!T$wi~P12jO!TGiO~P1'YO!TGjO~P1*PO!TGkO~P10VO!TGlO~P12jOZG]OeGPOgF{O!OGTO!PGTO!SGeO!TGiO!eG]O#eG]O#nG}O$xGPO$yGPO$zGXO$|)|O$})}O%OGaO%PGaO%QGmOf$wi$S$wi%S$wi%T$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O%R$wi~P17uOZG^OeGQOgF|O!OGUO!PGUO!SGfO!TGjO!eG^O#eG^O#nHOO$xGQO$yGQO$zGYO$|)|O$}KoO%OGbO%PGbO%QGnOT$wiV$wiW$wi^$wia$wif$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!Q$wi!R$wi!U$wi!V$wi!Y$wi!Z$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi%S$wi%T$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~O%R$wi~P1:lOZG_OeGROgF}O!OGVO!PGVO!SGgO!TGkO!eG_O#eG_O#nHPO$xGRO$yGRO$zGZO$|)|O$})}O%OGcO%PGcO%QGoOf$wi#p$wi%S$wi%T$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O%R$wi~P1@rOZG`OeGSOgGOO!OGWO!PGWO!SGhO!TGlO!eG`O#eG`O#nHQO$xGSO$yGSO$zG[O$|HRO$}KnO%OGdO%PGdO%QGpOT$wi^$wia$wic$wif$wil$win$wi!R$wi!h$wi!y$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi%S$wi%T$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~O%R$wi~P1CVO%RGqO~P17uO%RGrO~P1:lO%RGsO~P1@rO%RGtO~P1CVOZG]OeGPOgF{O!OGTO!PGTO!SGeO!TGiO!eG]O#eG]O#nG}O$xGPO$yGPO$zGXO$|)|O$})}O%OGaO%PGaO%QGmO%RGqO%SGuO%TGyO~Of$wi$S$wi%X$wi%Y$wi%Z$wi%_$wi%b$wi%c$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~P1HbOT$wiV$wiW$wi^$wia$wif$wil$win$wio$wiv$wiw$wix$wiy$wi|$wi!Q$wi!R$wi!U$wi!V$wi!Y$wi!Z$wi!h$wi!j$wi!k$wi!s$wi!t$wi!v$wi!w$wi!y$wi#R$wi#T$wi#V$wi#X$wi#Y$wi#Z$wi#]$wi#r$wi#s$wi#x$wi#|$wi$P$wi$X$wi$]$wi$^$wi$_$wi$a$wi$c$wi$d$wi$e$wi$f$wi$g$wi$k$wi$m$wi$n$wi$q$wi'o$wi'u$wi(X$wi(Y$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi$[$wi~OZG^OeGQOgF|O!OGUO!PGUO!SGfO!TGjO!eG^O#eG^O#nHOO$xGQO$yGQO$zGYO$|)|O$}KoO%OGbO%PGbO%QGnO%RGrO%SGvO%TGzO~P1KXOZG_OeGROgF}O!OGVO!PGVO!SGgO!TGkO!eG_O#eG_O#nHPO$xGRO$yGRO$zGZO$|)|O$})}O%OGcO%PGcO%QGoO%RGsO%SGwO%TG{O~Of$wi#p$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~P2#_OT$wi^$wia$wic$wif$wil$win$wi!R$wi!h$wi!y$wi#r$wi#s$wi#x$wi#|$wi$P$wi$T$wi$U$wi%f$wi%g$wi%h$wi%i$wi%j$wi%k$wi%l$wi%m$wi%n$wi%o$wi%p$wi%q$wi%x$wi&T$wi&W$wi&X$wi'o$wi'u$wi$n$wiY$wi![$wi!]$wi!^$wi!_$wi!`$wi!a$wi!b$wi!c$wi!d$wi!g$wi%^$wi~OZG`OeGSOgGOO!OGWO!PGWO!SGhO!TGlO!eG`O#eG`O#nHQO$xGSO$yGSO$zG[O$|HRO$}KnO%OGdO%PGdO%QGpO%RGtO%SGxO%TG|O~P2%rO^XXh!lX#h!lX#i!lX#o!lX#p!lXa!lXd!lX]!lXn!lXr!lX~P$7^OT!lXV!lXW!lXZ!lX^XX^!lXa!lXe!lXf!lXg!lXh!lXl!lXn!lXo!lXv!lXw!lXx!lXy!lX|!lX!O!lX!P!lX!Q!lX!R!lX!S!lX!T!lX!U!lX!V!lX!Y!lX!Z!lX!e!lX!h!lX!j!lX!k!lX!s!lX!t!lX!v!lX!w!lX!y!lX#R!lX#T!lX#V!lX#X!lX#Y!lX#Z!lX#]!lX#e!lX#h!lX#i!lX#n!lX#r!lX#s!lX#x!lX#|!lX$P!lX$X!lX$]!lX$^!lX$_!lX$a!lX$c!lX$d!lX$e!lX$f!lX$g!lX$k!lX$m!lX$n!lX$q!lX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lX'o!lX'u!lX(X!lX(Y!lXY!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!g!lX%^!lX$[!lX~P$7^OT!lXZ!lX^XX^!lXa!lXc!lXe!lXf!lXg!lXh!lXl!lXn!lX!O!lX!P!lX!R!lX!S!lX!T!lX!e!lX!h!lX!y!lX#e!lX#h!lX#i!lX#n!lX#r!lX#s!lX#x!lX#|!lX$P!lX$T!lX$U!lX$x!lX$y!lX$z!lX$|!lX$}!lX%O!lX%P!lX%Q!lX%R!lX%S!lX%T!lX%f!lX%g!lX%h!lX%i!lX%j!lX%k!lX%l!lX%m!lX%n!lX%o!lX%p!lX%q!lX%x!lX&T!lX&W!lX&X!lX'o!lX'u!lX$n!lXY!lX![!lX!]!lX!^!lX!_!lX!`!lX!a!lX!b!lX!c!lX!d!lX!g!lX%^!lX~P$7^OZIpO^/dOc/bOgIpOo/^O!eIpO!t/fO#_/cO#eIpO#gIsO'oImO'u!^O~P)1OOZIqO^/dOc/bOgIqOo/^O!eIqO!t/fO#_/cO#eIqO#gItO'oInO'u!^O~P)1OO$S*vX%X*vX%Y*vX%Z*vX%_*vX%b*vX%c*vXY*vX![*vX!]*vX!^*vX!_*vX!`*vX!a*vX!b*vX!c*vX!d*vX!g*vX%^*vX~P'DpOT*vXV*vXW*vX^*vXa*vXl*vXn*vXo*vXv*vXw*vXx*vXy*vX|*vX!Q*vX!R*vX!U*vX!V*vX!Y*vX!Z*vX!h*vX!j*vX!k*vX!s*vX!t*vX!v*vX!w*vX!y*vX#R*vX#T*vX#V*vX#X*vX#Y*vX#Z*vX#]*vX#r*vX#s*vX#x*vX#|*vX$P*vX$X*vX$]*vX$^*vX$_*vX$a*vX$c*vX$d*vX$e*vX$f*vX$g*vX$k*vX$m*vX$n*vX$q*vX'o*vX'u*vX(X*vX(Y*vXY*vX![*vX!]*vX!^*vX!_*vX!`*vX!a*vX!b*vX!c*vX!d*vX!g*vX%^*vX$[*vX~P,@nO#p*vXY*vX![*vX!]*vX!^*vX!_*vX!`*vX!a*vX!b*vX!c*vX!d*vX!g*vX%^*vX~P,:cOT*vX^*vXa*vXc*vXl*vXn*vX!R*vX!h*vX!y*vX#r*vX#s*vX#x*vX#|*vX$P*vX$T*vX$U*vX%f*vX%g*vX%h*vX%i*vX%j*vX%k*vX%l*vX%m*vX%n*vX%o*vX%p*vX%q*vX%x*vX&T*vX&W*vX&X*vX'o*vX'u*vX$n*vXY*vX![*vX!]*vX!^*vX!_*vX!`*vX!a*vX!b*vX!c*vX!d*vX!g*vX%^*vX~P/2oO$S+Pa%X+Pa%Y+Pa%Z+Pa%^+Pa%_+Pa%b+Pa%c+PaY+Pa![+Pa!]+Pa!^+Pa!_+Pa!`+Pa!a+Pa!b+Pa!c+Pa!d+Pa!g+Pa~P'DpOT+PaV+PaW+Pa^+Paa+Pal+Pan+Pao+Pav+Paw+Pax+Pay+Pa|+Pa!Q+Pa!R+Pa!U+Pa!V+Pa!Y+Pa!Z+Pa!h+Pa!j+Pa!k+Pa!s+Pa!t+Pa!v+Pa!w+Pa!y+Pa#R+Pa#T+Pa#V+Pa#X+Pa#Y+Pa#Z+Pa#]+Pa#r+Pa#s+Pa#x+Pa#|+Pa$P+Pa$X+Pa$]+Pa$^+Pa$_+Pa$a+Pa$c+Pa$d+Pa$e+Pa$f+Pa$g+Pa$k+Pa$m+Pa$n+Pa$q+Pa%^+Pa'o+Pa'u+Pa(X+Pa(Y+PaY+Pa![+Pa!]+Pa!^+Pa!_+Pa!`+Pa!a+Pa!b+Pa!c+Pa!d+Pa!g+Pa$[+Pa~P,@nOT+Pa^+Paa+Pac+Pal+Pan+Pa!R+Pa!h+Pa!y+Pa#r+Pa#s+Pa#x+Pa#|+Pa$P+Pa$T+Pa$U+Pa%^+Pa%f+Pa%g+Pa%h+Pa%i+Pa%j+Pa%k+Pa%l+Pa%m+Pa%n+Pa%o+Pa%p+Pa%q+Pa%x+Pa&T+Pa&W+Pa&X+Pa'o+Pa'u+Pa$n+PaY+Pa![+Pa!]+Pa!^+Pa!_+Pa!`+Pa!a+Pa!b+Pa!c+Pa!d+Pa!g+Pa~P/2oO#p+Pa%^+PaY+Pa![+Pa!]+Pa!^+Pa!_+Pa!`+Pa!a+Pa!b+Pa!c+Pa!d+Pa!g+Pa~P,:cOT$uiY$uiZ$ui^$uia$uie$uif$uig$uih$uil$uin$ui!O$ui!P$ui!Q$ui!R$ui!S$ui!T$ui!U$ui!V$ui![$ui!]$ui!^$ui!_$ui!`$ui!a$ui!b$ui!c$ui!d$ui!e$ui!g$ui!h$ui!y$ui#]$ui#e$ui#n$ui#q$ui#r$ui#s$ui#x$ui#|$ui$P$ui$p$ui$x$ui$y$ui$z$ui$|$ui$}$ui%O$ui%P$ui%Q$ui%R$ui%S$ui%T$ui'o$ui'u$ui$n$ui%^$ui~Oo0nOc$ui$T$ui$U$ui%f$ui%g$ui%h$ui%i$ui%j$ui%k$ui%l$ui%m$ui%n$ui%o$ui%p$ui%q$ui%x$ui&T$ui&W$ui&X$ui~P2LZOc#yOV$uiW$uio$uiv$uiw$uix$uiy$ui|$ui!Y$ui!Z$ui!j$ui!k$ui!s$ui!t$ui!v$ui!w$ui#R$ui#T$ui#V$ui#X$ui#Y$ui#Z$ui$X$ui$]$ui$^$ui$_$ui$a$ui$c$ui$d$ui$e$ui$f$ui$g$ui$k$ui$m$ui$q$ui(X$ui(Y$ui$[$ui~P2LZO^%ZOeFsOlLtOo0nO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!hJvO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFhO#rLpO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO^%ZOeFrOlLrOo0nO|%bO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!ZFnO!hJwO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFgO#rLnO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO$S(^q%X(^q%Y(^q%Z(^q%_(^q%b(^q%c(^qY(^q![(^q!](^q!^(^q!_(^q!`(^q!a(^q!b(^q!c(^q!d(^q!g(^q%^(^q~P'DpOT(^qV(^qW(^q^(^qa(^ql(^qn(^qo(^qv(^qw(^qx(^qy(^q|(^q!Q(^q!R(^q!U(^q!V(^q!Y(^q!Z(^q!h(^q!j(^q!k(^q!s(^q!t(^q!v(^q!w(^q!y(^q#R(^q#T(^q#V(^q#X(^q#Y(^q#Z(^q#](^q#r(^q#s(^q#x(^q#|(^q$P(^q$X(^q$](^q$^(^q$_(^q$a(^q$c(^q$d(^q$e(^q$f(^q$g(^q$k(^q$m(^q$n(^q$q(^q'o(^q'u(^q(X(^q(Y(^qY(^q![(^q!](^q!^(^q!_(^q!`(^q!a(^q!b(^q!c(^q!d(^q!g(^q%^(^q$[(^q~P,@nO#p(^qY(^q![(^q!](^q!^(^q!_(^q!`(^q!a(^q!b(^q!c(^q!d(^q!g(^q%^(^q~P,:cOT(^q^(^qa(^qc(^ql(^qn(^q!R(^q!h(^q!y(^q#r(^q#s(^q#x(^q#|(^q$P(^q$T(^q$U(^q%f(^q%g(^q%h(^q%i(^q%j(^q%k(^q%l(^q%m(^q%n(^q%o(^q%p(^q%q(^q%x(^q&T(^q&W(^q&X(^q'o(^q'u(^q$n(^qY(^q![(^q!](^q!^(^q!_(^q!`(^q!a(^q!b(^q!c(^q!d(^q!g(^q%^(^q~P/2oO$S*uO%X%{O%Y*qO%Z*rO%_*vO%bH^O%cMSO~O$S*uO%X%{O%Y*qO%Z*rO%_*vO%bH_O%cMTO~O$S*uO%X%{O%Y*qO%Z*rO%_*vO%bHaO%cMVO~O$S*uO%X%{O%Y*qO%Z*rO%_*vO%bH`O%cMUO~OT$uqY$uqZ$uq^$uqa$uqe$uqf$uqg$uqh$uql$uqn$uq!O$uq!P$uq!Q$uq!R$uq!S$uq!T$uq!U$uq!V$uq![$uq!]$uq!^$uq!_$uq!`$uq!a$uq!b$uq!c$uq!d$uq!e$uq!g$uq!h$uq!y$uq#]$uq#e$uq#n$uq#q$uq#r$uq#s$uq#x$uq#|$uq$P$uq$p$uq$x$uq$y$uq$z$uq$|$uq$}$uq%O$uq%P$uq%Q$uq%R$uq%S$uq%T$uq'o$uq'u$uq$n$uq%^$uq~Oo0nOc$uq$T$uq$U$uq%f$uq%g$uq%h$uq%i$uq%j$uq%k$uq%l$uq%m$uq%n$uq%o$uq%p$uq%q$uq%x$uq&T$uq&W$uq&X$uq~P36pOc#yOV$uqW$uqo$uqv$uqw$uqx$uqy$uq|$uq!Y$uq!Z$uq!j$uq!k$uq!s$uq!t$uq!v$uq!w$uq#R$uq#T$uq#V$uq#X$uq#Y$uq#Z$uq$X$uq$]$uq$^$uq$_$uq$a$uq$c$uq$d$uq$e$uq$f$uq$g$uq$k$uq$m$uq$q$uq(X$uq(Y$uq$[$uq~P36pOT)pX^)pXa)pXc)pXl)pXn)pX!R)pX!h)pX!y)pX#r)pX#s)pX#x)pX#|)pX$P)pX$T)pX$U)pX%f)pX%g)pX%h)pX%i)pX%j)pX%k)pX%l)pX%m)pX%n)pX%o)pX%p)pX%q)pX%x)pX&T)pX&W)pX&X)pX'o)pX'u)pX$n)pX~P/2oOT)pXV)pXW)pX^)pXa)pXl)pXn)pXo)pXv)pXw)pXx)pXy)pX|)pX!Q)pX!R)pX!U)pX!V)pX!Y)pX!Z)pX!h)pX!j)pX!k)pX!s)pX!t)pX!v)pX!w)pX!y)pX#R)pX#T)pX#V)pX#X)pX#Y)pX#Z)pX#])pX#r)pX#s)pX#x)pX#|)pX$P)pX$X)pX$])pX$^)pX$_)pX$a)pX$c)pX$d)pX$e)pX$f)pX$g)pX$k)pX$m)pX$n)pX$q)pX'o)pX'u)pX(X)pX(Y)pX$[)pX~P,@nO^%ZOeFsOlLtOo0nO|%bO!OFsO!PFsO!QFsO!RFsO!SFsO!TFsO!UMaO!VMaO!YFsO!ZFoO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFhO#rLpO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO^%ZOeFrOlLrOo0nO|%bO!OFrO!PFrO!QFrO!RFrO!SFrO!TFrO!UKgO!VKgO!YFrO!ZFnO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#YFpO#Z&UO#nFgO#rLnO#s&QO$q%xO%X%{O'o)SO'u!^O~P)1OO$S$wy%X$wy%Y$wy%Z$wy%_$wy%b$wy%c$wyY$wy![$wy!]$wy!^$wy!_$wy!`$wy!a$wy!b$wy!c$wy!d$wy!g$wy%^$wy~P'DpOT$wyV$wyW$wy^$wya$wyl$wyn$wyo$wyv$wyw$wyx$wyy$wy|$wy!Q$wy!R$wy!U$wy!V$wy!Y$wy!Z$wy!h$wy!j$wy!k$wy!s$wy!t$wy!v$wy!w$wy!y$wy#R$wy#T$wy#V$wy#X$wy#Y$wy#Z$wy#]$wy#r$wy#s$wy#x$wy#|$wy$P$wy$X$wy$]$wy$^$wy$_$wy$a$wy$c$wy$d$wy$e$wy$f$wy$g$wy$k$wy$m$wy$n$wy$q$wy'o$wy'u$wy(X$wy(Y$wyY$wy![$wy!]$wy!^$wy!_$wy!`$wy!a$wy!b$wy!c$wy!d$wy!g$wy%^$wy$[$wy~P,@nO#p$wyY$wy![$wy!]$wy!^$wy!_$wy!`$wy!a$wy!b$wy!c$wy!d$wy!g$wy%^$wy~P,:cOT$wy^$wya$wyc$wyl$wyn$wy!R$wy!h$wy!y$wy#r$wy#s$wy#x$wy#|$wy$P$wy$T$wy$U$wy%f$wy%g$wy%h$wy%i$wy%j$wy%k$wy%l$wy%m$wy%n$wy%o$wy%p$wy%q$wy%x$wy&T$wy&W$wy&X$wy'o$wy'u$wy$n$wyY$wy![$wy!]$wy!^$wy!_$wy!`$wy!a$wy!b$wy!c$wy!d$wy!g$wy%^$wy~P/2oO#hJ_O#i#fi#o#fi#p#fia#fid#fi]#fin#fir#fi~O#hJ`OT#fiW#fi^#fil#fio#fiv#fiw#fix#fiy#fi|#fi!Q#fi!R#fi!U#fi!V#fi!Y#fi!Z#fi!h#fi!j#fi!k#fi!s#fi!t#fi!v#fi!w#fi!y#fi#R#fi#T#fi#V#fi#X#fi#Y#fi#Z#fi#]#fi#r#fi#s#fi#x#fi#|#fi$P#fi$X#fi$]#fi$^#fi$_#fi$a#fi$c#fi$d#fi$e#fi$f#fi$g#fi$k#fi$m#fi$n#fi$q#fi'o#fi'u#fi(X#fi(Y#fi$[#fi~P+=RO#hJaOT#fiZ#fi^#fia#fic#fie#fif#fig#fil#fin#fi!O#fi!P#fi!R#fi!S#fi!T#fi!e#fi!h#fi!y#fi#e#fi#i#fi#n#fi#r#fi#s#fi#x#fi#|#fi$P#fi$T#fi$U#fi$x#fi$y#fi$z#fi$|#fi$}#fi%O#fi%P#fi%Q#fi%R#fi%S#fi%T#fi%f#fi%g#fi%h#fi%i#fi%j#fi%k#fi%l#fi%m#fi%n#fi%o#fi%p#fi%q#fi%x#fi&T#fi&W#fi&X#fi'o#fi'u#fi$n#fiY#fi![#fi!]#fi!^#fi!_#fi!`#fi!a#fi!b#fi!c#fi!d#fi!g#fi%^#fi~O$S+Qq%X+Qq%Y+Qq%Z+Qq%^+Qq%_+Qq%b+Qq%c+QqY+Qq![+Qq!]+Qq!^+Qq!_+Qq!`+Qq!a+Qq!b+Qq!c+Qq!d+Qq!g+Qq~P'DpOT+QqV+QqW+Qq^+Qqa+Qql+Qqn+Qqo+Qqv+Qqw+Qqx+Qqy+Qq|+Qq!Q+Qq!R+Qq!U+Qq!V+Qq!Y+Qq!Z+Qq!h+Qq!j+Qq!k+Qq!s+Qq!t+Qq!v+Qq!w+Qq!y+Qq#R+Qq#T+Qq#V+Qq#X+Qq#Y+Qq#Z+Qq#]+Qq#r+Qq#s+Qq#x+Qq#|+Qq$P+Qq$X+Qq$]+Qq$^+Qq$_+Qq$a+Qq$c+Qq$d+Qq$e+Qq$f+Qq$g+Qq$k+Qq$m+Qq$n+Qq$q+Qq%^+Qq'o+Qq'u+Qq(X+Qq(Y+QqY+Qq![+Qq!]+Qq!^+Qq!_+Qq!`+Qq!a+Qq!b+Qq!c+Qq!d+Qq!g+Qq$[+Qq~P,@nOT+Qq^+Qqa+Qqc+Qql+Qqn+Qq!R+Qq!h+Qq!y+Qq#r+Qq#s+Qq#x+Qq#|+Qq$P+Qq$T+Qq$U+Qq%^+Qq%f+Qq%g+Qq%h+Qq%i+Qq%j+Qq%k+Qq%l+Qq%m+Qq%n+Qq%o+Qq%p+Qq%q+Qq%x+Qq&T+Qq&W+Qq&X+Qq'o+Qq'u+Qq$n+QqY+Qq![+Qq!]+Qq!^+Qq!_+Qq!`+Qq!a+Qq!b+Qq!c+Qq!d+Qq!g+Qq~P/2oO#p+Qq%^+QqY+Qq![+Qq!]+Qq!^+Qq!_+Qq!`+Qq!a+Qq!b+Qq!c+Qq!d+Qq!g+Qq~P,:cOT)tiV)tiW)ti^)tia)til)tin)tio)tiv)tiw)tix)tiy)ti|)ti!Q)ti!R)ti!U)ti!V)ti!Y)ti!Z)ti!h)ti!j)ti!k)ti!s)ti!t)ti!v)ti!w)ti!y)ti#R)ti#T)ti#V)ti#X)ti#Y)ti#Z)ti#])ti#r)ti#s)ti#x)ti#|)ti$P)ti$X)ti$])ti$^)ti$_)ti$a)ti$c)ti$d)ti$e)ti$f)ti$g)ti$k)ti$m)ti$n)ti$q)ti'o)ti'u)ti(X)ti(Y)ti$[)ti~P,@nOV#wq]#wq~P#!PO!U)^O!V)^Oe(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX$S(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TX%X(TX%Y(TX%Z(TX%_(TX%b(TX%c(TX%^(TX~P(+YOT(TXW(TXl(TXo(TXv(TXw(TXx(TXy(TX|(TX!R(TX!Y(TX!Z(TX!h(TX!j(TX!k(TX!s(TX!t(TX!v(TX!w(TX!y(TX#R(TX#T(TX#V(TX#X(TX#Y(TX#Z(TX#r(TX#s(TX#x(TX#|(TX$P(TX$X(TX$](TX$^(TX$_(TX$a(TX$c(TX$d(TX$e(TX$f(TX$g(TX$k(TX$m(TX$n(TX$q(TX'o(TX'u(TX(X(TX(Y(TX$[(TX~P!>oO!U)^O!V)^Oe(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX#p(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TX%^(TX~P(+YO!U)^O!V)^OT(TXa(TXc(TXe(TXl(TXn(TX!O(TX!P(TX!R(TX!S(TX!T(TX!e(TX!h(TX!y(TX#e(TX#n(TX#r(TX#s(TX#x(TX#|(TX$P(TX$T(TX$U(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TX%f(TX%g(TX%h(TX%i(TX%j(TX%k(TX%l(TX%m(TX%n(TX%o(TX%p(TX%q(TX%x(TX&T(TX&W(TX&X(TX'o(TX'u(TX$n(TX%^(TX~P(+YOZ(TXe(TXf(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX$S(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TX%X(TX%Y(TX%Z(TX%_(TX%b(TX%c(TX%^(TX~P(,tOT(TXW(TX^(TXl(TXo(TXv(TXw(TXx(TXy(TX|(TX!Q(TX!R(TX!U(TX!V(TX!Y(TX!Z(TX!h(TX!j(TX!k(TX!s(TX!t(TX!v(TX!w(TX!y(TX#R(TX#T(TX#V(TX#X(TX#Y(TX#Z(TX#](TX#r(TX#s(TX#x(TX#|(TX$P(TX$X(TX$](TX$^(TX$_(TX$a(TX$c(TX$d(TX$e(TX$f(TX$g(TX$k(TX$m(TX$n(TX$q(TX'o(TX'u(TX(X(TX(Y(TX$[(TX~P!B[OZ(TXe(TXf(TX!O(TX!P(TX!S(TX!T(TX!e(TX#e(TX#n(TX#p(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TX%^(TX~P(,tOT(TXZ(TX^(TXa(TXc(TXe(TXf(TXl(TXn(TX!O(TX!P(TX!R(TX!S(TX!T(TX!e(TX!h(TX!y(TX#e(TX#n(TX#r(TX#s(TX#x(TX#|(TX$P(TX$T(TX$U(TX$x(TX$y(TX$z(TX$|(TX$}(TX%O(TX%P(TX%Q(TX%R(TX%S(TX%T(TX%f(TX%g(TX%h(TX%i(TX%j(TX%k(TX%l(TX%m(TX%n(TX%o(TX%p(TX%q(TX%x(TX&T(TX&W(TX&X(TX'o(TX'u(TX$n(TX%^(TX~P(,tO^%ZOeKWOlLsO|%bO!OKWO!PKWO!QKWO!RKWO!SKWO!TKWO!U%tO!V%tO!YKWO!ZKhO!j%cO!k%cO!v%eO!w%wO!y&PO#R&RO#T&SO#V&TO#X&TO#Y%}O#Z&UO#rLoO#s&QO$q%xO%X%{O'oFvO'u!^OZ%UXf%UXg%UX!e%UX#e%UX#n%UX#p%UX$x%UX$y%UX$z%UX$|%UX$}%UX%O%UX%P%UX%Q%UX%R%UX%S%UX%T%UXY%UX![%UX!]%UX!^%UX!_%UX!`%UX!a%UX!b%UX!c%UX!d%UX!g%UX%^%UX~P)1OO#pHSO~O#pHTO~O#pHUO~O#pHVO~O^*]O|%bO!j%cO!k%cO!v%eO!w%wO!yFtO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O~P)1OO'oHdO~O#pIyO~O#pIzO~O#pI{O~O#pI|O~OT)oX^)oXa)oXl)oXn)oX!R)oX!h)oX!y)oX#r)oX#s)oX#x)oX#|)oX$P)oX'o)oX'u)oX$n)oX~OYJTOc)oX$T)oX$U)oX%f)oX%g)oX%h)oX%i)oX%j)oX%k)oX%l)oX%m)oX%n)oX%o)oX%p)oX%q)oX%x)oX&T)oX&W)oX&X)oX~P5*eOYJUO~P*7sOrJZO~P#!POrJ[O~P#!POrJ]O~P#!POrJ^O~P#!PO#hJaO#iJdOZ$wie$wig$wi!O$wi!P$wi!S$wi!T$wi!e$wi#e$wi#n$wi$x$wi$y$wi$z$wi$|$wi$}$wi%O$wi%P$wi%Q$wi%R$wi%S$wi%T$wi~P2%rO#hJ`O#iJcO#n$wi~P0+RO#pJeO~O#pJfO~O#pJgO~O#pJhO~O'oJiO~O'oJjO~O'oJkO~O'oJlO~O%dJmO~P#!PO%dJnO~P#!PO%dJoO~P#!PO%dJpO~P#!POYJsO~OT)na^)nal)nan)na!R)na!h)na!y)na#r)na#s)na#x)na#|)na$P)na'o)na'u)na$n)na~OaL`Oc)na$T)na$U)na%f)na%g)na%h)na%i)na%j)na%k)na%l)na%m)na%n)na%o)na%p)na%q)na%x)na&T)na&W)na&X)na~P51VOaLaOV)naW)nae)nao)nav)naw)nax)nay)na|)na!O)na!P)na!Q)na!S)na!T)na!U)na!V)na!Y)na!Z)na!j)na!k)na!s)na!t)na!v)na!w)na#R)na#T)na#V)na#X)na#Y)na#Z)na#])na$X)na$])na$^)na$_)na$a)na$c)na$d)na$e)na$f)na$g)na$k)na$m)na$q)na(X)na(Y)na$[)na~P51VOYKTO~OaLfOT)saV)saW)sa^)sae)sal)san)sao)sav)saw)sax)say)sa|)sa!O)sa!P)sa!Q)sa!R)sa!S)sa!T)sa!U)sa!V)sa!Y)sa!Z)sa!h)sa!j)sa!k)sa!s)sa!t)sa!v)sa!w)sa!y)sa#R)sa#T)sa#V)sa#X)sa#Y)sa#Z)sa#])sa#r)sa#s)sa#x)sa#|)sa$P)sa$X)sa$])sa$^)sa$_)sa$a)sa$c)sa$d)sa$e)sa$f)sa$g)sa$k)sa$m)sa$n)sa$q)sa'o)sa'u)sa(X)sa(Y)sa$[)sa~OhKmOc'qXe'qXf'qX~OZ*xXe*xXf*xXg*xX!O*xX!P*xX!S*xX!T*xX!e*xX#e*xX#n*xX$x*xX$y*xX$z*xX$|*xX$}*xX%O*xX%P*xX%Q*xX%R*xX%S*xX%T*xXY*xX![*xX!]*xX!^*xX!_*xX!`*xX!a*xX!b*xX!c*xX!d*xX!g*xX~O%^LVO$S*xX%X*xX%Y*xX%Z*xX%_*xX%b*xX%c*xX~P5;`O%^LWOT*xXW*xX^*xXl*xXo*xXv*xXw*xXx*xXy*xX|*xX!Q*xX!R*xX!U*xX!V*xX!Y*xX!Z*xX!h*xX!j*xX!k*xX!s*xX!t*xX!v*xX!w*xX!y*xX#R*xX#T*xX#V*xX#X*xX#Y*xX#Z*xX#]*xX#r*xX#s*xX#x*xX#|*xX$P*xX$X*xX$]*xX$^*xX$_*xX$a*xX$c*xX$d*xX$e*xX$f*xX$g*xX$k*xX$m*xX$n*xX$q*xX'o*xX'u*xX(X*xX(Y*xX$[*xX~P$8OO%^LXO#p*xX~P5;`O%^LYOT*xX^*xXa*xXc*xXl*xXn*xX!R*xX!h*xX!y*xX#r*xX#s*xX#x*xX#|*xX$P*xX$T*xX$U*xX%f*xX%g*xX%h*xX%i*xX%j*xX%k*xX%l*xX%m*xX%n*xX%o*xX%p*xX%q*xX%x*xX&T*xX&W*xX&X*xX'o*xX'u*xX$n*xX~P5;`OT)nX^)nXl)nXn)nX!R)nX!h)nX!y)nX#r)nX#s)nX#x)nX#|)nX$P)nX'o)nX'u)nX$n)nX~OaL`Oc)nX$T)nX$U)nX%f)nX%g)nX%h)nX%i)nX%j)nX%k)nX%l)nX%m)nX%n)nX%o)nX%p)nX%q)nX%x)nX&T)nX&W)nX&X)nX~P5DiOaLaOV)nXW)nXe)nXo)nXv)nXw)nXx)nXy)nX|)nX!O)nX!P)nX!Q)nX!S)nX!T)nX!U)nX!V)nX!Y)nX!Z)nX!j)nX!k)nX!s)nX!t)nX!v)nX!w)nX#R)nX#T)nX#V)nX#X)nX#Y)nX#Z)nX#])nX$X)nX$])nX$^)nX$_)nX$a)nX$c)nX$d)nX$e)nX$f)nX$g)nX$k)nX$m)nX$q)nX(X)nX(Y)nX$[)nX~P5DiOZ*xae*xaf*xag*xa!O*xa!P*xa!S*xa!T*xa!e*xa#e*xa#n*xa$x*xa$y*xa$z*xa$|*xa$}*xa%O*xa%P*xa%Q*xa%R*xa%S*xa%T*xaY*xa![*xa!]*xa!^*xa!_*xa!`*xa!a*xa!b*xa!c*xa!d*xa!g*xa~O%^LVO$S*xa%X*xa%Y*xa%Z*xa%_*xa%b*xa%c*xa~P5JWO%^LWOT*xaW*xa^*xal*xao*xav*xaw*xax*xay*xa|*xa!Q*xa!R*xa!U*xa!V*xa!Y*xa!Z*xa!h*xa!j*xa!k*xa!s*xa!t*xa!v*xa!w*xa!y*xa#R*xa#T*xa#V*xa#X*xa#Y*xa#Z*xa#]*xa#r*xa#s*xa#x*xa#|*xa$P*xa$X*xa$]*xa$^*xa$_*xa$a*xa$c*xa$d*xa$e*xa$f*xa$g*xa$k*xa$m*xa$n*xa$q*xa'o*xa'u*xa(X*xa(Y*xa$[*xa~P'AOO%^LXO#p*xa~P5JWO%^LYOT*xa^*xaa*xac*xal*xan*xa!R*xa!h*xa!y*xa#r*xa#s*xa#x*xa#|*xa$P*xa$T*xa$U*xa%f*xa%g*xa%h*xa%i*xa%j*xa%k*xa%l*xa%m*xa%n*xa%o*xa%p*xa%q*xa%x*xa&T*xa&W*xa&X*xa'o*xa'u*xa$n*xa~P5JWO^!`O!tLdO'oyO'u!^O~OaLfOT)sXV)sXW)sX^)sXe)sXl)sXn)sXo)sXv)sXw)sXx)sXy)sX|)sX!O)sX!P)sX!Q)sX!R)sX!S)sX!T)sX!U)sX!V)sX!Y)sX!Z)sX!h)sX!j)sX!k)sX!s)sX!t)sX!v)sX!w)sX!y)sX#R)sX#T)sX#V)sX#X)sX#Y)sX#Z)sX#])sX#r)sX#s)sX#x)sX#|)sX$P)sX$X)sX$])sX$^)sX$_)sX$a)sX$c)sX$d)sX$e)sX$f)sX$g)sX$k)sX$m)sX$n)sX$q)sX'o)sX'u)sX(X)sX(Y)sX$[)sX~O^*]O|%bO!j%cO!k%cO!v%eO!w%wO!yLuO#R&RO#T&SO#V&TO#X&TO#Y&SO#Z&UO#r*^O#s&QO$q%xO'o*XO'u!^O~P)1OO",
  goto: "(=d,fPPPPPPPPP,gPP8mPPAgIiPAgPPPPPPK_PPPPPP!&t!&wP!(b!(e!)QPPPP!/n!6XP!<OPPPPPPPP!A{!GjPPPPPPPPPPPP!McPP!6XPP!Mq#&]#,Q#1u#8jPPPP#9oPP#9}P#?x#@S#?x#@X#@b#@f#@fP#@kP#@nP#@tPPP#A_P#AbP#Ae#An#Bl#Cd#CjP#CjPPP#Cj#D^#Cj#ETPPPPPP#Ew#Kk$$T$&^P$&q$&q$'SP$'a$'SP$'rPPPPPPPP$)_PPPP$)bP$)ePPPPPP$)kPP$)pPP$)sPP$)v$*P$*S$*V$0O$0XPPP$5`PPPPPPPP$0X$9S$>VPPPPPPPPPPPP$CsPPPPPPPPPPPP$C|$Eh$FOPPPP$FYPP$FcP$Fo$FvPP$F{P$Gk$HZPP$Hm$Hm$Hu$IP$Ic$Ii$J`$Jl$Jz$KQ$Kn$Kt$NZ$Na$Ns$Ny% T% Z% i% o% y%!P%!V%!]%!c%!i%!o%!u%#P%#W%#^%#d%#n%#u%$T%$_%$o%$y%(j%(p%(v%(|%)S%)Y%)a%)g%)m%*h%*n%*t%*z%+Q%+W%+^%+hPPPPPPPPPP%+n%+qP%+w%,R%5[%6i%6pP%Ah%Ip%Ix%Jd%Jq%KU%Kf%Kv%Ky%Lc%Lw%L}%MU%M_&$t&+P&0xPP&7i&=`&=d&Jc'!W'!n'!r'!x'(s')_')f')n')w'*T'/|'*T'*T'0U'5}'6b'6t'7R'7_'7c'7j'7p'7t'7w'7}'8Q'8V'8Y'8]'8c'8n'8u'8x'*T'8{'9O'9R'9X#Cj#Cj':u';[';|'<P'<S'<V#Cj'<Z'<_'<b'*T#&]'<h'<n'<t'<}'=`'=q'=q'>O'>a'>s'?c'?|'@Z'@v'@y'AV'Ac'Ap'Bx'B{'Cb'Cw'D_'F`'Fc'Ff'Fl'Fr'Fu'Gr' j'Hd'H{'H{'Id'Ig'Hd'Iy'Iy'Iy'Jb'Je'Iy'Hd'Jq'Jq'Jq'Hd'KY'K]'Hd'Hd'Ka'Hd'Hd'Kd'Kg'*T&7i'Km'Ks(#}()k()p(*V(/u(0T(0i(0|(0|(1_(1b(1h(2](2n(2|(3S(3q(4g%LZ%LZ%LZ(4k(4{(5R%LZ(5`(5s(6V(6`(6c(6i(6{(7R%LZ(7U(7X(7_%LZ(7e(7u(7{(8Y%LZ(8c(8k(8q(8k(8k(8}%LZ(9u(:V(:Y(:^%Lc(:p%L_(:t%Lc(:}(;a(;d(;j(;q(;u(;u(;y(;u(;u%Lc(;|%Lc(<o(<x(=W(=Z(=a%LcQz^Q!P`1j!Saiu}!O!`!j!w!x#Q#R#T#X#^#e#l#q#t#w$f$j$n%Z%[%i%o%s%u%x%y%z%{&P&Y&]&`&l&n'W'Z'^'a'b's(S(W([(j(z)P)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)|)}*P*R*U*]*c*g*r*s*u*v*w*x*y+P+Q+U+Z+[+b+d+n,T,W,Z,],d,j,l,q,r-R-c-h-m.P.S.^.a.d.e.k/`/b/d/g/p/q/w/y0O0g0j0n0r0v1R1U1V1Y1b1d1l1y1z2S2U2g2r2|3Q3T3^3n3u4O4v5Q5X5s5t6S6[6a6b6n6q6t6u6w6{7U7X7b7k7l8O8R8T8Y8]8_8a8c8n8x8y9s:S:W:X:b;i;j;k;o<R<Y<^<k<s<v<x<}=R=X=b=e=o=r=u>j>m>x>z>|@h@}ATAWAaAwBUBYBdBjBlCdCmCpDQDSDYDcDfDhDxEREVEWEXEYEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFtFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHRHSHTHUHVH^H_H`HaHjHkHlHmIoIpIqIrIsItIyIzI{I|JTJUJZJ[J]J^J_J`JaJbJcJdJeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhKnKoLmLnLoLpLqLrLsLtLuLvLwLxLyMSMTMUMVM^Q!WcQ!YdQ!ZfQ![gQ!]hS!kp!XQ!mqQ!nrQ!osQ!ptQ$S!bS$T!e!lQ$V!fQ$W!gQ$X!hQ$Y!iQ$p!qU$r!s(vKmQ$s!tQ$y!{d&c#[#o&d&e&j'Q'R'U+a,kQ&q#]Q&t#bS'f#u,|Q'}$UQ(^$Zz*Y%t*z+V1T1_6}7|7}8S8U8^8`8d=wAqAsAuDOEPKgMaQ+q&gW+v&m+c+k2TQ,_&sS,z'c'gQ1r+TQ2a+fU3X,R2_9QQ3m,aQ4W,{Q9T2XQ9x2wQ:g3lQ>`8lQ>a8mQ?e:[RBb>e$p!_iu!`!j!w#X#[#o#t%y%z%{&Y&]&d&e&j&l&n'Q'R'U'W'Z'^'a'b's(j)P*R*g*r*x+P+T+Z+a+b+d,k,l,q,r-R.S.e0v1V1Y1l1y2S2U2g3T3u4O5X7k8T8c8n8x=u>j>x>z>|BYBdBjBlDcDfDhLmLnLoLpLqLrLsLtM^+j%U#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7b7l8O8R8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDYDxEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMVQ&v#ex*[%t*z1T1_6}7|7}8S8U8^8`8d=wAqAsAuDOEPKgMa[*b%x&P&`+[FtLu!b/[)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoQ1v+VQFb)|RFcHR1P!aiu!`!j!w#T#X#[#o#t%Z%[%i%o%s%u%x%y%z%{&P&Y&]&`&d&e&j&l&n'Q'R'U'W'Z'^'a'b's(j(z)P)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)|)}*P*R*U*]*c*g*r*s*u*v*w*x*y+P+Q+T+U+Z+[+a+b+d+n,T,W,d,k,l,q,r-R.P.S.^.a.d.e.k/`/b/d/g/p/q/w/y0O0g0j0n0r0v1R1U1V1Y1b1d1l1y1z2S2U2g2r2|3Q3T3^3n3u4O4v5Q5X5s5t6S6[6a6b6n6q6t6u6w6{7U7X7b7k7l8O8R8T8Y8]8_8a8c8n8x8y9s:S:W:X;i;j;k;o<R<Y<^<k<s<v<x<}=R=X=b=e=o=r=u>j>m>x>z>|@h@}ATAWAaAwBUBYBdBjBlCdCmCpDQDSDYDcDfDhDxEREVEWEXEYEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFtFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHRHSHTHUHVH^H_H`HaHjHkHlHmIoIpIqIrIsItIyIzI{I|JTJUJZJ[J]J^J_J`JaJbJcJdJeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhKnKoLmLnLoLpLqLrLsLtLuLvLwLxLyMSMTMUMVM^Y'r$Q(x/z0_7c`+w&m+c+k2T2}=q>QLdU-y(t(vKmQ5V.eS5Z.g<yS5x/^<Sl5}/_/a/f/i/j5u6P6Y6^6d;{=tAQAyS7v1WM_Q;O4ZQ;d5WQ;g5[Q@_;eQ@r<PQE^D]WKy,R2_9QL`VKz1X7uLa'h{^aiu}!O!`!j!w!x#Q#R#X#[#^#e#l#o#q#t#w$f$j$n%x%y%z%{&P&Y&]&`&d&e&j&l&n'Q'R'U'W'Z'^'a'b's(S(W([(j)P)|)}*R*g*r*x+P+T+Z+[+a+b+d,Z,],j,k,l,q,r-R-c-h-m.S.e.k/`/b/d/g0v1V1Y1l1y2S2U2g3T3u4O5X5t6S6[6a6b7k8T8c8n8x:b;k<R<Y<^=u>j>x>z>|@}BUBYBdBjBlDcDfDhEYFtHRIoIpIqIrIsItJ_J`JaJbJcJdKnKoLmLnLoLpLqLrLsLtLuM^+Q%V#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMVx*[%t*z1T1_6}7|7}8S8U8^8`8d=wAqAsAuDOEPKgMaW+y&m+c+k2TQ1v+VU3Y,R2_9QiLh+Q1R7b8RDYEVEXEuFRFSFUF`R#P!Q$PeOQSTZkl!d!}#X#[#b#f#o#t#u${$|%O&]&d&j&s&x'Q'U'Z'^'c(n(p+m,a,e,|-v1y2h2i2j3T3l4P8x9g9j:^:v>j>x>z>|?f?g?h@R@SBdBjBzB|CYCZC[C^DcDhDoDqR#U!UU%o#T)a/qW(z%Z*]0r8OW.a)X)m*y5QQ4v.PS6[/d5tR@}<^.O%Y#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)}*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d.k/`/b/d/g/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5m5p5s5t6S6[6a6b6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;k;o<R<Y<^<k<s<v<x<}=R=X=b=e=o=r=w>m@h@}ATAWAaAqAsAuAwBUCdCmCpDODQDSDYDxEPEREVEWEXEYEdEkEuExFRFSFTFUFWF`FeFfFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHQHSHTHUHVH^H_H`HaHjHkHlHmIoIpIqIrIsItIyIzI{I|JTJUJZJ[J]J^J_J`JaJbJcJdJeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhKnKoLvLwLxLyMSMTMUMVMaR9a2f.P%Y#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)}*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d.k/`/b/d/g/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5m5p5s5t6S6[6a6b6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;k;o<R<Y<^<k<s<v<x<}=R=X=b=e=o=r=w>m@h@}ATAWAaAqAsAuAwBUCdCmCpDODQDSDYDxEPEREVEWEXEYEdEkEuExFRFSFTFUFWF`FeFfFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHQHSHTHUHVH^H_H`HaHjHkHlHmIoIpIqIrIsItIyIzI{I|JTJUJZJ[J]J^J_J`JaJbJcJdJeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhKnKoLvLwLxLyMSMTMUMVMa,i%d#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa&^%_#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;o<k<s<v<x<}=R=X=b=o=r>m@hATAWAaAwCdCmCpDQDSEREWEdExFTFWFeFkKTLvLwLxLyMSMTMUMV!U0t+Q1R1_7b7|7}8R8S8U8^8`8d=wAqAsAuDODYEPEVEXEuFRFSFUF`!`K]*u0O6q6tDxEkFfFiFmFqFwF{GPGTGXG]GaGeGiGmGqGuGyG}HSH^HjIyJZJeJm![K^=eFgFjFnFrFxF|GQGUGYG^GbGfGjGnGrGvGzHOHTH_HkIzJUJ[JfJnJsJw!UK_;jFyF}GRGVGZG_GcGgGkGoGsGwG{HPHUHaHlI{J]JgJpKWKaKfKh!XK`FhFlFoFsFzGOGSGWG[G`GdGhGlGpGtGxG|HQHVH`HmI|JTJ^JhJoJv,X%]#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMV&^%s#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;o<k<s<v<x<}=R=X=b=o=r>m@hATAWAaAwCdCmCpDQDSEREWEdExFTFWFeFkKTLvLwLxLyMSMTMUMV!`Fi*u0O6q6tDxEkFfFiFmFqFwF{GPGTGXG]GaGeGiGmGqGuGyG}HSH^HjIyJZJeJm!WFj=eFjFnFrFxF|GQGUGYG^GbGfGjGnGrGvGzHTH_HkIzJUJ[JfJnJsJw!UFk+Q1R1_7b7|7}8R8S8U8^8`8d=wAqAsAuDODYEPEVEXEuFRFSFUF`!SFlFlFoFsFzGOGSGWG[G`GdGhGlGpGtGxG|HVH`HmI|JTJ^JhJoJv!VKf;jFyF}GRGVGZG_GcGgGkGoGsGwG{HPHUHaHlI{J]JgJpKWKaKfKhi)V%^%_0s0tKXKYKZK[K]K^K_K`,d%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa!b/])}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoR;}5v,e%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa,e%v#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa+^&O#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1T1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMaW+z&m+c+k2TQ,x'`[-z(t(v.g5[<yKm!U1j+Q1R1_7b7|7}8R8S8U8^8`8d=wAqAsAuDODYEPEVEXEuFRFSFUF`Q3{,pQ4V,yQ7y1XQ9y2wQ:q3|Q:r3}Q=_7jQ?}:uRAl=`d)_%^&O*Z0a7rHXKXKYKZK[S*|&PLuQ,^&rQ.p)`Q0iHbS0l*}KxQ4s-zS7g0s1jQ;`4tQ;g5`Q=^7hQ>n8|RCwFtQ)^%fQ*a%wQ.x)lV5f.m0g;p+f%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1T1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa!V0z+Q1R1_7b7|7}8R8S8U8^8`8d=wAqAsAuDODYEPEVEXEuFRFSFUF`a.n)]*|*}0l;o@hHbKxV5g.m0g;p_0h*|*}0l;o@hHbKxT7V0g<}V*{&PFtLuR)^&RX)^%}&SEZFpS)^&T1qQ7|1]Q7}1^Q8^1eQ8i1nQAr=lQD`B[RE_D_R)^&UR.l)[_6_/f1W6^=tAQAyM_!b/a)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoS6P/_6YQ6d/iR;{5u!k/e)}.k/_/`/b/d/g/i5t5u6S6Y6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoQ5z/^R@u<S!c/c)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKo!b/i)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoR5u/[!c/j)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKo,U%k#T%Z%[%i%m%o%s%u%y%z(x(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*h*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0_0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7c7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=k=o=r>Q>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLiLjLkLlLmLnLoLpLqLrLsLtLvLwLxLyLzL{L|L}MSMTMUMVQ+S&QR/}*i,Q%j#T%[%i%m%o%s%u%y%z(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*h*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0_0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7c7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=k=o=r>Q>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLiLjLkLlLmLnLoLpLqLrLsLtLvLwLxLyLzL{L|L}MSMTMUMVQ(}%ZQ+W&XQ.O(xS/o*R*gQ1{+XQ4{.VQ4}.YS6f/n/zQ8v2PQ8z1|Q>k8{QDgBkQEbDeREyEcQ+R&Ql,U&o+g+j,S2W2Y2b2n2p9U9d9f?P?Q[,X&p+h2Z9r>wBhn/m*P/p6nHSHTHUHVIyIzI{I|JeJfJgJhS/|*i+Sz1O+Q1R1_7b7|7}8S8U8^8`8d=wAqDYEVEXEuFRFSFUF`Q6o/}Q7n0wQ8k1pQCO?jQCP?kQD^BZQDjBxQDkByQE`D`REwE_f0x+Q1R7bDYEVEXEuFRFSFUF`Q=n8RR=}8_o0o+O0k0m0n2|7]:S:X=XJRJTJUJqJvJwg0x+Q1R7bDYEVEXEuFRFSFUF`S&y#f,eQ,c&xW2t+t2[8}9tTL_7zLfQ#d!WU$a!k#Z#aQ'u$SU'|$T$[$_S(e$p'vQ+`&cU-Z'w'z'}S-n(^(fQ3V,QQ4S,xS4a-[-]Q4q-oS:o3{4TQ;S4bQ=f7yS?x:p:rSAj=_=gQCV?zSCtAkAlRD|CuR>Y8iR8S1`Q8U1aR=w8WVBZ>]BXDZR8`1fR8d1hQ/x*dQ:l3xRDlCSR*e%xR/x*e,m%g#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMaQ0m*}QJRKxRJSHb+Z%n#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMV$v)q%h(y*_.R.]._.r.u.{/P/Q/R/S/T/U/V/W/k/v0X0Z0]1t2q3]3_3o4u5O5S6k6l7^7s8Z8w9q:P:V:`:h;a;y<r<t<w=P=a=y={>O>S>l?W?a@`AUAXAZA[AdAfAnAvBeClCoDPDtDyDzEQESEpErEzFVF]F^KVK{K|K}LOLZL[L]L^Q9b2fzGX0Y6p<o<qEjFOHYHfHnIOISIWI[I`IdIhIuI}JVJxKPtGYAoHZHgHoIPITIXI]IaIeIiIvJOJWJuJyKQKUpGZ@aH[HhHpIQIUIYI^IbIfIjIwJQJXJzKSqG[H]HiHqIRIVIZI_IcIgIkIxJPJYJtJ{KR+R%n#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMV,V%j#T%Z%[%i%m%o%s%u%y%z(x(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*h*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0_0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7c7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=k=o=r>Q>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLiLjLkLlLmLnLoLpLqLrLsLtLvLwLxLyLzL{L|L}MSMTMUMVU%p#T)a/qT<h6iDwQ#c!WQ#k!ZY$`!k#Z#`#a#dU$e!n#j#mY'{$T$[$^$_$aW(R$W$d$g'PY-Y'w'y'z'|'}U-_(Q(T(`W4_-X-Z-[-]S4e-a-bU;Q4`4a4bS;T4d4fS@U;R;SQ@X;VRC`@V^+{&m+c+k,R2T2_9QQ,v'`Q3y,pS9z2w:[R:s3}U+p&f+e2VV3R+}2^9PQ9[3[Q>r9]RBg>sQ3U,PQ4R,wQ:n3zR?|:tS>{9`9aR>}9cV>y9_9`9bQ#p![U$i!o#n#rW(V$X$h$k'YU-d(U(X(bS4i-f-gS;W4h4jR@Z;YQ#v!]U$m!p#s#xW(Z$Y$l$o'jU-i(Y(](dS4m-k-lS;Z4l4nR@];]Q4Q,vQ:m3yQ:z4RQ?u:nQ?{:sRCW?|]#g!Y!m#i$V$c(PQQOSjQ${R${!}QSOQkQWmSk$|(nQ$|!}R(n${Q-S'rR4[-SU#{!_%U/[Q$PFc^'n#{0k2P7]8{FdJrU0k*}HbKxQ2P+_Q7]0mQ8{1}QFdFbRJrJSS'l#y0jS-P'l>bT>b8n>dY#}!_#{%U*b/[S$OFbFcR'p#}Q(k$uR-t(kQZOSlQS[wZl!d%O(p-vQ!dkQ%O!}S(p${$|R-v(nQ!|!PR$z!|lTOQSZkl!d!}${$|%O(n(p-vznT&]&d&s&x'Q'Z'c2h3l9g9j:v?fBjBzB|C[C^DoDq^&]#X1y3T8x>jBdDcS&d#[&jQ&s#bS&x#f,eS'Q#o'US'Z#t'^S'c#u,|Q2h+mQ3l,aQ9g2iQ9j2jQ:v4PQ?f:^WBj>x>z>|DhQBz?gQB|?hQC[@RQC^@SQDoCYRDqCZQ)e%bR.s)eQ;u5lQ;w5oW@l;u;wCfCgQCf@nRCg@pQ)j%cR.v)jQ.Q(yS4w.Q4xR4x.RQ5R.bR;c5RQ5_.hQ5q.xQ;f5ZV;h5_5q;fQ;q5hR@j;qQAb=PSCqAbCrRCrAdQ=O7TRA`=OQ7O0dR<{7OQ8t1wR>i8tQ5w/]R<O5wQAR<bRCjARQ<Q5xR@s<QQ<T5zR@v<TQ<_6ZSAO<_APRAP<`S<Z6T6UR@z<ZQ;l5cR@c;lQ.T({R4z.TQ1R+QS7o1RFURFUEuS=Y7^7_RAh=YQ3O+xU:U3OLbLcQLbMWRLcMXQ9u2uS?Y9uLgRLgM`f0v+Q1R7bDYEVEXEuFRFSFUF`R7i0vQ,`&tQ3j,_T3k,`3jQ#Z!WQ#j!ZQ#n![Q#s!]S$[!k#aS$d!n#mS$h!o#rS$l!p#x!n&b#Z#j#n#s$[$d$h$l'w(Q(U(Y,S-U-[-b-g-l-p2b4b4d4h4l4o9U:{;V;Y;];_?vApCUCsDnD{ElS'w$T$_U(Q$W$g'PU(U$X$k'YU(Y$Y$o'jQ,S&oQ-U'uS-['z'}S-b(T(`S-g(X(bS-l(](dQ-p(eQ2b+gQ4b-]Q4d-aQ4h-fQ4l-kQ4o-nQ9U2YQ:{4SQ;V4fQ;Y4jQ;]4nQ;_4qQ?v:oQAp=fQCU?xQCsAjQDnCVQD{CtRElD|Q:c3`R?n:cQAt=mRC{AtQ>[8kRBW>[QDUBQREUDUQ<l6lRAV<lS.W(}/oR4|.WQ<u6yRAY<uQ#S!TR%S#SlVOQSZkl!d!}${$|%O(n(p-vQoT[vVo&e'R+a,kS&e#[&jS'R#o'UQ+a&dR,k'QQ,i'OR3s,iQ&j#[R+r&jQ'U#oR,m'UQ?s:lRCR?sQ,}'dR4Y,}Q'^#tR,s'^Q,[&rS3g,[3iR3i,^Q,f&zR3q,fR[OXPOQ!}${aROQSk!}${$|(nQ|^U!Ua#Q#R/[!_iu!`!j!w#T#X#[#o#t%Z%[%i%o%s%u%y%z%{&Y&]&d&e&j&l&n'Q'R'U'W'Z'^'a'b's(j(z)P)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*R*U*]*c*g*r*s*u*v*w*x*y+P+Q+T+U+Z+a+b+d+n,T,W,d,k,l,q,r-R.P.S.^.a.d.e/p/q/w/y0O0g0j0n0r0v1R1U1V1Y1b1d1l1y1z2S2U2g2r2|3Q3T3^3n3u4O4v5Q5X5s6n6q6t6u6w6{7U7X7b7k7l8O8R8T8Y8]8_8a8c8n8x8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=u>j>m>x>z>|@hATAWAaAwBYBdBjBlCdCmCpDQDSDYDcDfDhDxEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLmLnLoLpLqLrLsLtLvLwLxLyMSMTMUMVM^S!z}!OQ$w!xQ&r#^Q&v#eh'O#l#q#w$f$j$n(S(W([-c-h-m[*b%x&P&`+[FtLu!b/[)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoS3b,Z:bQ3h,]Q3t,jQFb)|RFcHRW!vz!S&c1rS(h$r>`S(i$s>ad)`%^&O*Z0a7rHXKXKYKZK[Q2y+vQ4t-z[5`.h.x5Z5_5q;fW5a.i0`1uA]S7h0s1jQ:]3XQ?[9xRBw?eS$v!w8nR-T'sQ!biQ!quQ$Q!`Q$Z!jU$u!w's8n&S%m#T%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*v*w+U+n,T,W,d.P.^.a.d/p/q/w/y0g0j0n1U1b1d1z2r2|3Q3^3n4v5Q5s6n6u6w6{7U7X7l8Y8]8a8y9s:S:W:X;i;o<k<s<v<x<}=R=X=b=o=r>m@hATAWAaAwCdCmCpDQDSEREWEdExFTFWFeFkKTLvLwLxLyMSMTMUMV^&X#X1y3T8x>jBdDcW&m#[#o&j'US'`#t'^Q(x%ZS*h%y%zQ*k%{S+X&Y&]S+c&d'QS+k&e'RQ+t&lQ,R&nQ,o'WS,p'Z'bQ,y'aQ-s(jQ.Y)PS/Y)|HR!`/_)}.k/`/b/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoU/n*R+P.SQ/z*gQ0W*rQ0^*xQ0_*yf1X+Q1R7bDYEVEXEuFRFSFUF`Q1s+TQ1|+ZS2T+a,kQ2[+bQ2_+dQ3v,lQ3|,qQ3},rQ4Z-RW5U.e5X8T=uQ6Y/dQ7c0rS7j0v1lQ7u1VQ7z1YQ8}2SQ9Q2UQ9c2gQ:i3uQ:u4OQ=`7kQ=k8OQ=q8RQ>Q8_Q>U8cWBk>x>z>|DhQD]BYSDeBjBlQEcDfQLdM^!`Li*u0O6q6tDxEkFfFiFmFqFwF{GPGTGXG]GaGeGiGmGqGuGyG}HSH^HjIyJZJeJm!WLj=eFjFnFrFxF|GQGUGYG^GbGfGjGnGrGvGzHTH_HkIzJUJ[JfJnJsJw!ULk;jFyF}GRGVGZG_GcGgGkGoGsGwG{HPHUHaHlI{J]JgJpKWKaKfKh!SLlFlFoFsFzGOGSGWG[G`GdGhGlGpGtGxG|HVH`HmI|JTJ^JhJoJvSLzLmLqSL{LnLrSL|LoLsTL}LpLt0n!_iu!`!j!w#T#X#[#o#t%Z%[%i%o%s%u%y%z%{&Y&]&d&e&j&l&n'Q'R'U'W'Z'^'a'b's(j(z)P)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)}*P*R*U*]*c*g*r*s*u*v*w*x*y+P+Q+T+U+Z+a+b+d+n,T,W,d,k,l,q,r-R.P.S.^.a.d.e.k/`/b/d/g/p/q/w/y0O0g0j0n0r0v1R1U1V1Y1b1d1l1y1z2S2U2g2r2|3Q3T3^3n3u4O4v5Q5X5s5t6S6[6a6b6n6q6t6u6w6{7U7X7b7k7l8O8R8T8Y8]8_8a8c8n8x8y9s:S:W:X;i;j;k;o<R<Y<^<k<s<v<x<}=R=X=b=e=o=r=u>j>m>x>z>|@h@}ATAWAaAwBUBYBdBjBlCdCmCpDQDSDYDcDfDhDxEREVEWEXEYEdEkEuExFRFSFTFUFWF`FeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIoIpIqIrIsItIyIzI{I|JTJUJZJ[J]J^J_J`JaJbJcJdJeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhKnKoLmLnLoLpLqLrLsLtLvLwLxLyMSMTMUMVM^[*b%x&P&`+[FtLuQFb)|RFcHR]$R!`%Z*g*y/d0rv#z!_#{%U*}+_/[0k0m1}2P7]8{FbFcFdHbJSJrKxV+O&PFtLuY$P!_%U/[FbFcQ'o#{R/t*b^!uz{!S%V&c1rLhQ$t!vS(g$r>`R-r(hmYOQSZkl!d!}${$|%O(n(p-vmXOQSZkl!d!}${$|%O(n(p-vR!Q`lXOQSZkl!d!}${$|%O(n(p-vS&h#[&jT'S#o'UuWOQSZkl!d!}#[#o${$|%O&j'U(n(p-vQ!VaR%Q#QS!Ta#QR%R#RQ%r#TQ.q)aR6h/qU%`#T)a/q*r%a%Z%[%i%s%u(z)W)X)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*]*c*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/w/y0O0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7l8O8Y8]8_8a8y9s:S:W:X;i;j<k<s<v<x=R=X=b=e=o=r>mAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMVQ*T%oQ/r*US7S0g<}Q=U7XS@e;o@hRCkAT&^%^#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;o<k<s<v<x<}=R=X=b=o=r>m@hATAWAaAwCdCmCpDQDSEREWEdExFTFWFeFkKTLvLwLxLyMSMTMUMVS*Z%tMaS0a*z6}!U0s+Q1R1_7b7|7}8R8S8U8^8`8d=wAqAsAuDODYEPEVEXEuFRFSFUF`Q7r1TQHXKg!`KX*u0O6q6tDxEkFfFiFmFqFwF{GPGTGXG]GaGeGiGmGqGuGyG}HSH^HjIyJZJeJm![KY=eFgFjFnFrFxF|GQGUGYG^GbGfGjGnGrGvGzHOHTH_HkIzJUJ[JfJnJsJw!UKZ;jFyF}GRGVGZG_GcGgGkGoGsGwG{HPHUHaHlI{J]JgJpKWKaKfKh!XK[FhFlFoFsFzGOGSGWG[G`GdGhGlGpGtGxG|HQHVH`HmI|JTJ^JhJoJv,m%f#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa,h%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa!b/c)}.k/`/b/d/g5t6S6[6a6b;k<R<Y<^@}BUEYIoIpIqIrIsItJ_J`JaJbJcJdKnKoQ;v5mR;x5p,i%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMaT)d%b)ef%h#T%o)a*U/q0g7X;o<}@hATW(y%Z*]0r8OY)T%[FqFrFsKWY*O%iFfFgFhKaY*W%sFiFjFlKfQ*_%uQ.R(zQ.])WY._)X)m*y.a5QQ.r)cQ.u)hS.{)n)rQ.|)oQ.})pQ/O)qQ/P)sQ/Q)tQ/R)uQ/S)vQ/T)wQ/U)xQ/V)yQ/W)zY/X){G}HOHPHQU/k*P/p6nQ/v*cQ0X*sQ0Y*uQ0Z*vQ0]*wQ1t+UQ2q+nQ3],TQ3_,WQ3o,dQ4u.PQ5O.^Q5S.dQ6k/wS6l/y0jQ6p0OQ7^0nQ7dFeQ7qFkQ7s1US8V1b=rQ8Z1dQ8w1zQ9q2rU:P2|:S:XQ:V3QQ:`3^Q:h3nQ;a4vQ;y5sQ<o6qQ<q6tQ<r6uQ<t6wQ<w6{Q=P7UQ=a7lQ=y8YQ={8]Q>O8_Q>S8aQ>l8yQ?W9sQ?a:WQ@`;iQ@a;jQAU<kQAX<sQAZ<vQA[<xQAd=RQAf=XQAn=bQAo=eQAv=oQBe>mQClAWQCoAaQDPAwQDtCdQDyCmQDzCpQEQDQQESDSQEjDxQEpERQErEWQEzEdQFOEkQFVExQF]FTQF^FWQHYFmQHZFnQH[KhQH]FoQHfFwQHgFxQHhFyQHiFzSHnF{G]SHoF|G^SHpF}G_SHqGOG`QHrGPQHsGQQHtGRQHuGSQHvGTQHwGUQHxGVQHyGWQHzGXQH{GYQH|GZQH}G[QIOGaQIPGbQIQGcQIRGdQISGeQITGfQIUGgQIVGhQIWGiQIXGjQIYGkQIZGlQI[GmQI]GnQI^GoQI_GpQI`GqQIaGrQIbGsQIcGtQIdGuQIeGvQIfGwQIgGxQIhGyQIiGzQIjG{QIkG|UIuHSIyJeUIvHTIzJfUIwHUI{JgUIxHVI|JhQI}H^QJOH_QJPH`QJQHaQJVHjQJWHkQJXHlQJYHmSJtJTJvSJuJUJwQJxJZQJyJ[QJzJ]QJ{J^QKPJmQKQJnQKRJoQKSJpQKUJsQKVKTQK{LvQK|LwQK}LxQLOLyQLZMSQL[MTQL]MURL^MV+Y%a#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLvLwLxLyMSMTMUMV!V0y+Q1R1_7b7|7}8R8S8U8^8`8d=wAqAsAuDODYEPEVEXEuFRFSFUF`W)W%^%_0s0tSFwKXK]SFxKYK^SFyKZK_TFzK[K`T)i%c)jX)O%Z*]0r8O,h%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMaT0c*z6}j(u%U%V%^*Z*[0a7rHXKXKYKZK[LhS.h)Y6|S5].x5qR7e0sS.f)X*yR.y)mU.b)X)m*yR;b5QW.`)X)m*y5QR5P.aQ5W.eQ;e5XQ=t8TRAy=u,m%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y*z+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{6}7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFgFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HOHPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMa]5^.h.x5Z5_5q;f,d%e#T%Z%[%i%o%s%t%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*u*v*w*y+Q+U+n,T,W,d.P.^.a.d/p/q/w/y0O0g0j0n0r1R1T1U1_1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7b7l7|7}8O8R8S8U8Y8]8^8_8`8a8d8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=o=r=w>m@hATAWAaAqAsAuAwCdCmCpDODQDSDYDxEPEREVEWEXEdEkEuExFRFSFTFUFWF`FeFfFhFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHQHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKgKhLvLwLxLyMSMTMUMVMaT0c*z6}Q.j)ZQ/s*`S0b*z6}Q1v+VQ>h8sRA^<yQ*d%xQ*}&PQ+_&`Q1}+[QHbFtRKxLuW0i*|*}HbKxQ7[0lT@f;o@hQ.o)]_0h*|*}0l;o@hHbKxT5j.m0gS5h.m0gR@i;pQ@g;oRCe@hT5i.m0gR7W0gQ7T0gRA_<}R=Q7UV)^&PFtLuR0e*zR0f*zQ0d*zR<z6}Q8p1rQ>f8oVB`>`>aBbZ8o1r8o>`>aBbR1x+VR1w+VR5d.kR5e.kQ5c.kR@b;kQ/h)}S5b.k;kW6Q/`IoIpIqQ6U/bS6Z/d5tW6`/gIrIsItQ<X6SQ<`6[W<e6aJ_J`JaQ<f6bQ@t<RQ@y<YQ@|<^QCh@}QDXBUQEtEYQJ|JbQJ}JcQKOJdQLPKnRLQKoQ6O/fQ7w1WQ<b6^QAx=tQCiAQQDRAyRLeM_S6O/_6YQ6R/a^6_/f1W6^=tAQAyM_Q6c/iQ6e/jS;z5u6dQ<W6PR@q;{R<c6^R<d6^R5|/^T5y/^<ST6]/d5tR6W/bQ6T/bR@x<YX(|%Z*R*g+PX)Q%Z*R*g+PW({%Z*R*g+PR4y.SU7{1[1q8QQB]>]QB_>_QD[BXRDaB^W1Q+Q1REuFUQ=]7b]EXDYEVEXFRFSF`g1P+Q1R7bDYEVEXEuFRFSFUF`f1V+Q1R7bDYEVEXEuFRFSFUF`TM^8R8_j0u+Q1R7b8R8_DYEVEXEuFRFSFUF`R8h1mQ+|&mS2]+c+kQ3Z,RY7x1W1X=q>QM_Q9O2TQ9[2_S=d7uLdR>r9Q`+x&m+c+k2T=q>QLdM_U:T2}L`LaUMW,R2_9QVMX1W1X7uU:R2|JTJUU?_:SJvJwR?b:XQ0p+OU7Z0k0mJRQ7_0n^:Q2|:S:XJTJUJvJwS=W7]JqRAg=XR7a0nQ2v+tQ9X2[Q=h7zR>o8}U2u+t2[8}S?X9tLfRM`7zg0w+Q1R7bDYEVEXEuFRFSFUF`Q#a!WQ#m!ZQ#r![Q$_!kQ$g!nQ$k!oQ'z$TQ(T$WQ(X$XQ-]'}Q2x+zQ4T,xQ:p3{Q=g7yQ?Z9yQ?z:rQAk=_RCuAlR&u#bQ&[#XQ8v1yQ:Z3TQ>k8xQBc>jQDbBdREaDc^&Y#X1y3T8x>jBdDcQ+Z&]WBl>x>z>|DhRDfBjj&W#X&]1y3T8x>j>x>z>|BdBjDcDhS+]&_&aR2O+^$}#Y!W!Z![!]!k!n!o!p#Z#a#j#m#n#r#s#x$T$W$X$Y$[$_$d$g$h$k$l$o&o'P'Y'j'u'w'z'}(Q(T(U(X(Y(](`(b(d(e+g,S-U-[-]-a-b-f-g-k-l-n-p2Y2b4S4b4d4f4h4j4l4n4o4q9U:o:{;V;Y;];_=f?v?xAjApCUCVCsCtDnD{D|ElR3e,ZR3d,ZQ3`,ZR?m:bQ3a,ZR?o:eR7m0wf1P+Q1R7bDYEVEXEuFRFSFUF`Q8P1_Q=i7|Q=j7}Q=s8SQ=v8UQ=|8^Q>R8`Q>V8dQAz=wRCxAqz1i+Q1R1_7b7|7}8S8U8^8`8d=wAqDYEVEXEuFRFSFUF`W=m8RAuDOEPRCzAs{1O+Q1R1_7b7|7}8S8U8^8`8d=wAqDYEVEXEuFRFSFUF`{0{+Q1R1_7b7|7}8S8U8^8`8d=wAqDYEVEXEuFRFSFUF`RBT>XQE[DYQEqEVQEsEXQFZFRQF[FSRFaF`{0|+Q1R1_7b7|7}8S8U8^8`8d=wAqDYEVEXEuFRFSFUF`R=p8RQ=n8RQC}AuQEODOREnEP{0}+Q1R1_7b7|7}8S8U8^8`8d=wAqDYEVEXEuFRFSFUF`R>^8kT>Z8k>[R>P8_RBR>UQBQ>URETDTQ6m/yR7Y0j&^%l#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;o<k<s<v<x<}=R=X=b=o=r>m@hATAWAaAwCdCmCpDQDSEREWEdExFTFWFeFkKTLvLwLxLyMSMTMUMV`*S%m%y%z(x0_7c=k>QQ/{*h!`Kb*u0O6q6tDxEkFfFiFmFqFwF{GPGTGXG]GaGeGiGmGqGuGyG}HSH^HjIyJZJeJm!WKc=eFjFnFrFxF|GQGUGYG^GbGfGjGnGrGvGzHTH_HkIzJUJ[JfJnJsJw!UKd;jFyF}GRGVGZG_GcGgGkGoGsGwG{HPHUHaHlI{J]JgJpKWKaKfKh!SKeFlFoFsFzGOGSGWG[G`GdGhGlGpGtGxG|HVH`HmI|JTJ^JhJoJvUKpLiLmLqUKqLjLnLrUKrLkLoLsUKsLlLpLtQLRLzQLSL{QLTL|RLUL},V%k#T%Z%[%i%m%o%s%u%y%z(x(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*h*s*u*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0O0_0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6q6t6u6w6{7U7X7c7l8O8Y8]8_8a8y9s:S:W:X;i;j;o<k<s<v<x<}=R=X=b=e=k=o=r>Q>m@hATAWAaAwCdCmCpDQDSDxEREWEdEkExFTFWFeFfFiFjFkFlFmFnFoFqFrFsFwFxFyFzF{F|F}GOGPGQGRGSGTGUGVGWGXGYGZG[G]G^G_G`GaGbGcGdGeGfGgGhGiGjGkGlGmGnGoGpGqGrGsGtGuGvGwGxGyGzG{G|G}HPHSHTHUHVH^H_H`HaHjHkHlHmIyIzI{I|JTJUJZJ[J]J^JeJfJgJhJmJnJoJpJsJvJwKTKWKaKfKhLiLjLkLlLmLnLoLpLqLrLsLtLvLwLxLyLzL{L|L}MSMTMUMVV)R%Z*R*gY/l*PHSHTHUHVY6g/pIyIzI{I|Z<n6nJeJfJgJh&^%|#T%Z%[%i%o%s%u(z)W)X)a)c)h)m)n)o)p)q)r)s)t)u)v)w)x)y)z){*P*U*]*c*s*v*w*y+U+n,T,W,d.P.^.a.d/p/q/w/y0g0j0n0r1U1b1d1z2r2|3Q3^3n4v5Q5s6n6u6w6{7U7X7l8O8Y8]8_8a8y9s:S:W:X;i;o<k<s<v<x<}=R=X=b=o=r>m@hATAWAaAwCdCmCpDQDSEREWEdExFTFWFeFkKTLvLwLxLyMSMTMUMVn*l%|*n6sJiJjJkJlKiKjKkKlKtKuKvKw![Ki*u0O6q6tDxEkFiFmFqFwF{GPGTGXG]GaGeGiGmGqGuGyHSH^HjIyJZJeJm![Kj=eFgFjFnFrFxF|GQGUGYG^GbGfGjGnGrGvGzHOHTH_HkIzJUJ[JfJnJsJw!UKk;jFyF}GRGVGZG_GcGgGkGoGsGwG{HPHUHaHlI{J]JgJpKWKaKfKh!XKlFhFlFoFsFzGOGSGWG[G`GdGhGlGpGtGxG|HQHVH`HmI|JTJ^JhJoJvY*t%|KiKjKkKlZ<p6sJiJjJkJlS*n%|6sSKtJiKiSKuJjKjSKvJkKkTKwJlKld*m%|6sJiJjJkJlKiKjKkKlZ0Q*nKtKuKvKwo*l%|*n6sJiJjJkJlKiKjKkKlKtKuKvKwR0[*vQ6y0ZRCnAZS*p%|6sQ0R*nSMOJiKiSMPJjKjSMQJkKkSMRJlKlQMYKtQMZKuQM[KvRM]Kwo*o%|*n6sJiJjJkJlKiKjKkKlKtKuKvKwY0S*pMOMPMQMRZ6r0RMYMZM[M]Q<i6iREiDw!XUOQSTVZklo!d!}#[#o${$|%O&d&e&j'Q'R'U(n(p+a,k-vQ'P#lQ'Y#qQ'j#wQ(`$fQ(b$jQ(d$nQ-a(SQ-f(WQ-k([Q4f-cQ4j-hR4n-mT&i#[&jW&o#[#o&j'UW+g&d&e'Q'RT2Y+a,kX,Q&m+c+k2TS2x+v+yQ9|2yQ?Z9xRBr?[Q+}&mS2^+c+kQ3[,RQ9P2TQ9]2_R>s9QW2z+v+y3X3YS9}2y:]S?]9x?eTBs?[BwQ3S+}Q9Z2^R>q9PR2k+mQ2i+mR9h2jQ2o+mQ9e2hQ9i2iQ9k2jQ?S9gR?T9jQ2j+mR9h2iR:Y3RR?i:^Q?g:^RB{?hQ?h:^RB{?gW&f#[#o&j'UW+e&d&e'Q'RT2V+a,kX,P&m+c+k2TS2{+v+yQ:O2yQ?^9xRBt?[Q+o&fQ2`+eR9R2VS+j&e'RT2W+a,kX+i&e'R+a,kQBm>xQBn>zQBo>|REeDhQ,V&oS2c+g,SQ2e+jQ9S2WS9V2Y2bQ9n2nQ9o2pQ>u9UQ?O9dQ?R9fQBp?PRBq?QW&p#[#o&j'UW+h&d&e'Q'RT2Z+a,kR2R+`T&h#[&jQ,Y&pQ2d+hQ9W2ZQ?V9rQBi>wRDdBhT'T#o'UQ3w,oQ:j3vR?q:iQ#x!]Q$o!pQ'v$SQ(]$YQ(f$pR-o(^R'h#uQ'd#uR4X,|S'g#u,|R,{'cT']#t'^T'[#t'^R:w4PQ#`!WW$^!k#Z#a#dW'y$T$[$_$aW-X'w'z'|'}U4`-Z-[-]S;R4a4bR@V;SQ#i!YQ$c!mR(P$VQ#h!YS$b!m#iS(O$V$cR-^(PR&|#fQ&z#fR3p,eR&{#f",
  nodeNames: '\u26A0 LineComment BlockComment PP_Directive Program Keyword Keyword ; Keyword TypeIdentifier = < SimpleType ) ( Delim VarName , Delim [ ] Astrisk ? > . QualifiedAliasMember :: Keyword Keyword Keyword } { Delim Delim : Delim ArgumentName BooleanLiteral IntegerLiteral RealLiteral CharacterLiteral StringLiteral NullLiteral InterpolatedRegularString $" UnaryExpr + - Not ~ & ^ ++ -- Cast Delim Keyword Keyword += -= *= SlashEq %= &= |= ^= <<= >= RightShiftAssignment ??= Keyword InterpolatedVerbatimString $@" @$" Ident ParenOrTupleExpr Delim MethodName Delim Keyword Keyword Keyword Keyword Delim Keyword Keyword ObjectCreationExpr Keyword Delim InitializerTarget Delim Delim Delim Delim Delim Keyword Delim Keyword Delim Keyword Delim Keyword Keyword Keyword Delim Keyword Delim ContextualKeyword Delim PropertyPatternFields Delim PropertyPatternField RelationalPattern <= LogicalPattern ContextualKeyword ContextualKeyword ContextualKeyword PropertyPattern Delim ListPattern Delim .. Keyword => Keyword Keyword Keyword Delim ParamName Delim LocalVarDecl Keyword Delim Delim LocalConstDecl Keyword ConstName LocalFuncDecl Keyword Delim ContextualKeyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Delim Keyword Keyword Keyword Keyword Delim Keyword Delim Keyword Keyword Keyword Keyword Keyword Keyword Delim Keyword Keyword Delim Keyword Keyword Delim -> Keyword Delim Delim Delim ArrayCreationExpr Delim BinaryExpr Slash % << RightShift Keyword Keyword == NotEq | && || ?? RangeExpr LambdaExpr Delim ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword ContextualKeyword AttrsNamedArg Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword Keyword ContextualKeyword Delim PropertyName Delim Keyword Keyword Keyword Keyword Delim ContextualKeyword ContextualKeyword Delim Keyword Delim Delim Keyword Keyword Delim Keyword Delim Delim Keyword Keyword Delim Delim',
  maxTerm: 527,
  nodeProps: [
    ["openedBy", 13, "(", 20, "[", 30, "{"],
    ["closedBy", 14, ")", 19, "]", 31, "}"]
  ],
  skippedNodes: [0, 1, 2, 3],
  repeatNodeCount: 53,
  tokenData: "!$e~R!RXY$[YZ$aZ[$[[]$[]^$fpq$[qr$nrs${st-Ttu:yuv;dvw;qwx<WxyAjyzAoz{At{|BR|}Bh}!OBm!O!PC[!P!QEy!Q!RHR!R![Ii![!]MX!]!^Mf!^!_Mk!_!`NY!`!aNo!a!bN|!b!c! c!c!}!!u!}#O!#W#P#Q!#]#Q#R!#b#R#S!!u#T#o!!u#o#p!#o#p#q!#t#q#r!$Z#r#s!$`#y#z$a$f$g$[#BY#BZ$[$IS$I_$[$I|$I}$a$I}$JO$a$JO$JP$[$KV$KW$[&FU&FV$[~$aO'l~~$fO'k~~$kP'k~YZ$a~$sP!Q~!_!`$v~${O%P~~%OZOY${Z]${^r${rs%qs#O${#O#P&U#P#y${#z$I|${$JO;'S${;'S;=`,}<%lO${~%vPy~#i#j%y~%|P!Y!Z&P~&UOy~~&X^rs${wx${!Q!R${!w!x'T#O#P${#T#U${#U#V${#Y#Z${#b#c${#f#g${#h#i${#i#j(V#j#k${#l#m)X~'WR!Q!['a!c!i'a#T#Z'a~'dR!Q!['m!c!i'm#T#Z'm~'pR!Q!['y!c!i'y#T#Z'y~'|R!Q![(V!c!i(V#T#Z(V~(YR!Q![(c!c!i(c#T#Z(c~(fR!Q![(o!c!i(o#T#Z(o~(rR!Q![({!c!i({#T#Z({~)OR!Q![${!c!i${#T#Z${~)[R!Q![)e!c!i)e#T#Z)e~)haOY${Z]${^r${rs%qs!Q${!Q![*m![!c${!c!i*m!i#O${#O#P&U#P#T${#T#Z*m#Z#y${#z$I|${$JO;'S${;'S;=`,}<%lO${~*paOY${Z]${^r${rs%qs!Q${!Q![+u![!c${!c!i+u!i#O${#O#P&U#P#T${#T#Z+u#Z#y${#z$I|${$JO;'S${;'S;=`,}<%lO${~+xaOY${Z]${^r${rs%qs!Q${!Q![${![!c${!c!i${!i#O${#O#P&U#P#T${#T#Z${#Z#y${#z$I|${$JO;'S${;'S;=`,}<%lO${~-QP;=`<%l${~-WbXY-TZ[-T[]-Tpq-T#W#X.`#X#Y1_#]#^1t#`#a8i#d#e8{#f#g6r#i#j9k#k#l:T$f$g-T#BY#BZ-T$IS$I_-T$JO$JP-T$KV$KW-T&FU&FV-T~.cP#X#Y.f~.iP#Y#Z.l~.oP#]#^.r~.uP#b#c.x~.{P#X#Y/O~/RYXY/qZ[/q[]/qpq/q$f$g/q#BY#BZ/q$IS$I_/q$JO$JP/q$KV$KW/q&FU&FV/q~/t^XY/qZ[/q[]/qpq/q!b!c0p!c!}0|#R#S0|#T#o0|$f$g/q#BY#BZ/q$IS$I_/q$JO$JP/q$KV$KW/q&FU&FV/q~0sR!c!}0|#R#S0|#T#o0|~1RSR~!Q![0|!c!}0|#R#S0|#T#o0|~1bR#`#a1k#b#c6]#f#g8V~1nQ#]#^1t#g#h6Q~1wP#Y#Z1z~1}YXY2mZ[2m[]2mpq2m$f$g2m#BY#BZ2m$IS$I_2m$JO$JP2m$KV$KW2m&FU&FV2m~2peOX4RXY4jZ[4j[]4j]p4Rpq4jq$f4R$f$g4j$g#BY4R#BY#BZ4j#BZ$IS4R$IS$I_4j$I_$JO4R$JO$JP4j$JP$KV4R$KV$KW4j$KW&FU4R&FU&FV4j&FV;'S4R;'S;=`4d<%lO4R~4WSR~OY4RZ;'S4R;'S;=`4d<%lO4R~4gP;=`<%l4R~4oeR~OX4RXY4jZ[4j[]4j]p4Rpq4jq$f4R$f$g4j$g#BY4R#BY#BZ4j#BZ$IS4R$IS$I_4j$I_$JO4R$JO$JP4j$JP$KV4R$KV$KW4j$KW&FU4R&FU&FV4j&FV;'S4R;'S;=`4d<%lO4R~6TP#X#Y6W~6]OR~~6`P#W#X6c~6fQ#]#^6l#f#g6r~6oP#Y#Z6W~6uP#X#Y6x~6{P#Z#[7O~7RP#]#^7U~7XP#c#d7[~7_P#b#c7b~7gYR~XY2mZ[2m[]2mpq2m$f$g2m#BY#BZ2m$IS$I_2m$JO$JP2m$KV$KW2m&FU&FV2m~8YP#f#g8]~8`P#c#d8c~8fP#f#g7b~8lP#]#^8o~8rP#b#c8u~8xP#X#Y1z~9OP#f#g9R~9UP#T#U9X~9[P#Z#[9_~9bP#a#b9e~9hP#T#U7b~9nP#b#c9q~9tP#W#X9w~9zP#X#Y9}~:QP#Y#Z/O~:WP#T#U:Z~:^P#f#g:a~:dP#b#c:g~:jP#]#^:m~:pP#b#c:s~:vP#Z#[7b~:|Qrs;S!b!c;X~;XO|~~;[Prs;_~;dO!j~~;iP$y~!_!`;l~;qO!`~~;vQ!S~vw;|!_!`<R~<RO%R~~<WO!a~~<ZYOY<yZ]<y^w<yx#O<y#O#P=U#P#y<y#z$I|<y$JO;'S<y;'S;=`Ad<%lO<y~<|Pwx=P~=UOx~~=X^rs<ywx<y!Q!R<y!w!x>T#O#P<y#T#U<y#U#V<y#Y#Z<y#b#c<y#f#g<y#h#i<y#i#j?V#j#k<y#l#m@X~>WR!Q![>a!c!i>a#T#Z>a~>dR!Q![>m!c!i>m#T#Z>m~>pR!Q![>y!c!i>y#T#Z>y~>|R!Q![?V!c!i?V#T#Z?V~?YR!Q![?c!c!i?c#T#Z?c~?fR!Q![?o!c!i?o#T#Z?o~?rR!Q![?{!c!i?{#T#Z?{~@OR!Q![<y!c!i<y#T#Z<y~@[R!Q![@e!c!i@e#T#Z@e~@hSwx=P!Q![@t!c!i@t#T#Z@t~@wSwx=P!Q![AT!c!iAT#T#ZAT~AWSwx=P!Q![<y!c!i<y#T#Z<y~AgP;=`<%l<y~AoO^~~AtO]~~AyPe~!_!`A|~BRO!^~~BWQ!O~{|B^!_!`Bc~BcO!U~~BhO![~~BmOa~~BrR!P~}!OB{!_!`CQ!`!aCV~CQO!V~~CVO!]~~C[O$p~~CaQh~!O!PCg!Q![Cl~ClO#n~~CqYw~!Q![Cl!f!gDa!g!hDf!h!iDa!o!pDa#R#SEp#W#XDa#X#YDf#Y#ZDa#a#bDa~DfOw~~DiR{|Dr}!ODr!Q![Dx~DuP!Q![Dx~D}Ww~!Q![Dx!f!gDa!h!iDa!o!pDa#R#SEg#W#XDa#Y#ZDa#a#bDa~EjQ!Q![Dx#R#SEg~EsQ!Q![Cl#R#SEp~FOR$x~z{FX!P!QG[!_!`G|~F^TQ~OzFXz{Fm{;'SFX;'S;=`GU<%lOFX~FpTO!PFX!P!QGP!Q;'SFX;'S;=`GU<%lOFX~GUOQ~~GXP;=`<%lFX~GaVP~OYG[Z]G[^#yG[#z$I|G[$JO;'SG[;'S;=`Gv<%lOG[~GyP;=`<%lG[~HRO!_~~HWcv~!O!PIc!Q![Ii!d!eKc!f!gDa!g!hDf!h!iDa!n!oJm!o!pDa!w!xJ}!z!{LZ#R#SKY#U#VKc#W#XDa#X#YDf#Y#ZDa#`#aJm#a#bDa#i#jJ}#l#mLZ~IfP!Q![Cl~In_v~!O!PIc!Q![Ii!f!gDa!g!hDf!h!iDa!n!oJm!o!pDa!w!xJ}#R#SKY#W#XDa#X#YDf#Y#ZDa#`#aJm#a#bDa#i#jJ}~JrQv~!w!xJx#i#jJx~J}Ov~~KSQv~!n!oJx#`#aJx~K]Q!Q![Ii#R#SKY~KfR!Q!RKo!R!SKo#R#SKc~KtVv~!Q!RKo!R!SKo!n!oJm!w!xJ}#R#SKc#`#aJm#i#jJ}~L^S!Q![Lj!c!iLj#R#SLZ#T#ZLj~LoWv~!Q![Lj!c!iLj!n!oJm!w!xJ}#R#SLZ#T#ZLj#`#aJm#i#jJ}~M^Pr~![!]Ma~MfOj~~MkOV~~MpQZ~!^!_Mv!_!`NT~M{P$z~!_!`NO~NTO!d~~NYO#e~~N_QY~!_!`Ne!`!aNj~NjO%O~~NoO#p~~NtPg~!_!`Nw~N|O!e~~! RPf~!a!b! U~! ZP%T~!_!`! ^~! cO!g~~! fTrs! utu!!j!c!}!!u#R#S!!u#T#o!!u~! xTOr! urs!!Xs;'S! u;'S;=`!!d<%lO! u~!!^Qy~rs! u#i#j%y~!!gP;=`<%l! u~!!mPrs!!p~!!uO!k~~!!zS'o~!Q![!!u!c!}!!u#R#S!!u#T#o!!u~!#]Oc~~!#bOd~~!#gP!T~!_!`!#j~!#oO!c~~!#tOo~~!#yQ%Q~!_!`!$P#p#q!$U~!$UO!b~~!$ZO%S~~!$`On~~!$eO!R~",
  tokenizers: [interpString, interpVString, 0],
  topRules: { "Program": [0, 4] },
  dynamicPrecedences: { "54": 1, "75": -1, "89": 1, "191": 1, "205": 1 },
  specialized: [{ term: 307, get: (value) => spec_identifier13[value] || -1 }],
  tokenPrec: 0
});
var parser26 = parser$14;
var csharpLanguage = /* @__PURE__ */ LRLanguage.define({
  parser: /* @__PURE__ */ parser26.configure({
    props: [
      /* @__PURE__ */ indentNodeProp.add({
        Delim: /* @__PURE__ */ continuedIndent({ except: /^\s*(?:case\b|default:)/ })
      }),
      /* @__PURE__ */ foldNodeProp.add({
        Delim: foldInside
      }),
      /* @__PURE__ */ styleTags({
        "Keyword ContextualKeyword SimpleType": tags.keyword,
        "NullLiteral BooleanLiteral": tags.bool,
        IntegerLiteral: tags.integer,
        RealLiteral: tags.float,
        'StringLiteral CharacterLiteral InterpolatedRegularString InterpolatedVerbatimString $" @$" $@"': tags.string,
        "LineComment BlockComment": tags.comment,
        ". .. : Astrisk Slash % + - ++ -- Not ~ << & | ^ && || < > <= >= == NotEq = += -= *= SlashEq %= &= |= ^= ? ?? ??= =>": tags.operator,
        PP_Directive: tags.keyword,
        TypeIdentifier: tags.typeName,
        "ArgumentName AttrsNamedArg": tags.variableName,
        ConstName: /* @__PURE__ */ tags.constant(tags.variableName),
        //Ident: t.name,
        MethodName: /* @__PURE__ */ tags.function(tags.variableName),
        ParamName: [tags.emphasis, tags.variableName],
        VarName: tags.variableName,
        "FieldName PropertyName": tags.propertyName,
        "( )": tags.paren,
        "{ }": tags.brace,
        "[ ]": tags.squareBracket
      })
    ]
  }),
  languageData: {
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    closeBrackets: { brackets: ["(", "[", "{", '"', "'"] },
    indentOnInput: /^\s*((\)|\]|\})$|(else|else\s+if|catch|finally|case)\b|default:)/
  }
});
function csharp2() {
  return new LanguageSupport(csharpLanguage);
}

// ../../node_modules/@replit/codemirror-lang-solidity/dist/index.js
init_dist5();
init_dist4();
var keywords47 = {
  pragma: true,
  solidity: true,
  import: true,
  as: true,
  from: true,
  contract: true,
  constructor: true,
  is: true,
  function: true,
  modifier: true,
  // modifiers
  pure: true,
  view: true,
  payable: true,
  constant: true,
  anonymous: true,
  indexed: true,
  returns: true,
  return: true,
  event: true,
  struct: true,
  mapping: true,
  interface: true,
  using: true,
  library: true,
  storage: true,
  memory: true,
  calldata: true,
  public: true,
  private: true,
  external: true,
  internal: true,
  emit: true,
  assembly: true,
  abstract: true,
  after: true,
  catch: true,
  final: true,
  in: true,
  inline: true,
  let: true,
  match: true,
  null: true,
  of: true,
  relocatable: true,
  static: true,
  try: true,
  typeof: true,
  var: true
};
var keywordsSpecial = {
  pragma: true,
  returns: true,
  address: true,
  contract: true,
  function: true,
  struct: true
};
var keywordsEtherUnit = {
  wei: true,
  szabo: true,
  finney: true,
  ether: true
};
var keywordsTimeUnit = {
  seconds: true,
  minutes: true,
  hours: true,
  days: true,
  weeks: true
};
var keywordsBlockAndTransactionProperties = {
  block: ["coinbase", "difficulty", "gaslimit", "number", "timestamp"],
  msg: ["data", "sender", "sig", "value"],
  tx: ["gasprice", "origin"]
};
var keywordsMoreBlockAndTransactionProperties = {
  now: true,
  gasleft: true,
  blockhash: true
};
var keywordsErrorHandling = {
  assert: true,
  require: true,
  revert: true,
  throw: true
};
var keywordsMathematicalAndCryptographicFuctions = {
  addmod: true,
  mulmod: true,
  keccak256: true,
  sha256: true,
  ripemd160: true,
  ecrecover: true
};
var keywordsContractRelated = {
  this: true,
  selfdestruct: true,
  super: true
};
var keywordsTypeInformation = { type: true };
var keywordsContractList = {};
var keywordsControlStructures = {
  if: true,
  else: true,
  while: true,
  do: true,
  for: true,
  break: true,
  continue: true,
  switch: true,
  case: true,
  default: true
};
var keywordsValueTypes = {
  bool: true,
  byte: true,
  string: true,
  enum: true,
  address: true
};
var keywordsV0505NewReserve = {
  alias: true,
  apply: true,
  auto: true,
  copyof: true,
  define: true,
  immutable: true,
  implements: true,
  macro: true,
  mutable: true,
  override: true,
  partial: true,
  promise: true,
  reference: true,
  sealed: true,
  sizeof: true,
  supports: true,
  typedef: true,
  unchecked: true
};
var keywordsAbiEncodeDecodeFunctions = {
  abi: [
    "decode",
    "encodePacked",
    "encodeWithSelector",
    "encodeWithSignature",
    "encode"
  ]
};
var keywordsMembersOfAddressType = [
  "transfer",
  "send",
  "balance",
  "call",
  "delegatecall",
  "staticcall"
];
var natSpecTags = ["title", "author", "notice", "dev", "param", "return"];
var atoms16 = {
  delete: true,
  new: true,
  true: true,
  false: true
};
var isOperatorChar15 = /[+\-*&^%:=<>!|/~]/;
var isNegativeChar = /[-]/;
var curPunc13;
function tokenBase46(stream, state) {
  let ch2 = stream.next();
  if (ch2 === '"' || ch2 === "'" || ch2 === "`") {
    state.tokenize = tokenString29(ch2);
    return state.tokenize(stream, state);
  }
  if (isVersion(stream, state)) {
    return "version";
  }
  if (ch2 === "." && keywordsMembersOfAddressType.some(function(item) {
    return stream.match(`${item}`);
  })) {
    return "addressFunction";
  }
  if (typeof ch2 === "string" && isNumber3(ch2, stream)) {
    return "number";
  }
  if (typeof ch2 === "string" && /[[\]{}(),;:.]/.test(ch2)) {
    return updateGarmmer(ch2, state);
  }
  if (ch2 === "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment20;
      return tokenComment20(stream, state);
    }
    if (stream.match(/\/{2}/)) {
      ch2 = stream.next();
      while (ch2) {
        if (ch2 === "@") {
          stream.backUp(1);
          state.grammar = "doc";
          break;
        }
        ch2 = stream.next();
      }
      return "doc";
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (typeof ch2 === "string" && isNegativeChar.test(ch2)) {
    const peeked = stream.peek();
    if (typeof peeked === "string" && isNumber3(peeked, stream)) {
      return "number";
    }
    return "operator";
  }
  if (typeof ch2 === "string" && isOperatorChar15.test(ch2)) {
    stream.eatWhile(isOperatorChar15);
    return "operator";
  }
  stream.eatWhile(/[\w$_\xa1-\uffff]/);
  const cur2 = stream.current();
  if (state.grammar === "doc") {
    if (natSpecTags.some(function(item) {
      return cur2 === `@${item}`;
    })) {
      return "docReserve";
    }
    return "doc";
  }
  if (cur2 === "solidity" && state.lastToken === "pragma") {
    state.lastToken = state.lastToken + " " + cur2;
  }
  if (Object.prototype.propertyIsEnumerable.call(keywords47, cur2)) {
    if (cur2 === "case" || cur2 === "default") {
      curPunc13 = "case";
    }
    if (Object.prototype.propertyIsEnumerable.call(keywordsSpecial, cur2)) {
      state.lastToken = cur2;
    }
    return "keyword";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsEtherUnit, cur2)) {
    return "etherUnit";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsContractRelated, cur2)) {
    return "contractRelated";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsControlStructures, cur2) || Object.prototype.propertyIsEnumerable.call(keywordsTypeInformation, cur2) || Object.prototype.propertyIsEnumerable.call(keywordsV0505NewReserve, cur2)) {
    return "keyword";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsValueTypes, cur2) || Object.prototype.propertyIsEnumerable.call(keywordsTimeUnit, cur2) || isValidInteger(cur2) || isValidBytes(cur2) || isValidFixed(cur2)) {
    state.lastToken += "variable";
    return "keyword";
  }
  if (Object.prototype.propertyIsEnumerable.call(atoms16, cur2)) {
    return "atom";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsErrorHandling, cur2)) {
    return "errorHandling";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsMathematicalAndCryptographicFuctions, cur2)) {
    return "mathematicalAndCryptographic";
  }
  if (Object.prototype.propertyIsEnumerable.call(keywordsMoreBlockAndTransactionProperties, cur2) || Object.prototype.propertyIsEnumerable.call(keywordsBlockAndTransactionProperties, cur2) && keywordsBlockAndTransactionProperties[cur2].some(function(item) {
    return stream.match(`.${item}`);
  })) {
    return "variable-2";
  }
  if (cur2 === "abi" && keywordsAbiEncodeDecodeFunctions[cur2].some(function(item) {
    return stream.match(`.${item}`);
  })) {
    return "abi";
  }
  const style2 = updateHexLiterals(cur2, stream);
  if (style2 != null) {
    return style2;
  }
  if ((state.lastToken === "functionName(" || state.lastToken === "returns(") && Object.prototype.propertyIsEnumerable.call(keywordsContractList, cur2)) {
    state.lastToken += "variable";
    return "variable";
  }
  if (state.lastToken === "function") {
    state.lastToken = "functionName";
    if (state.para == null) {
      state.grammar = "function";
      state.para = "";
    }
    state.para += "functionName";
    return "functionName";
  }
  if (state.lastToken === "functionName(variable") {
    state.lastToken = "functionName(";
    return "parameterValue";
  }
  if (state.lastToken === "returns(variable") {
    state.lastToken = "returns(";
    return "parameterValue";
  }
  if (state.lastToken === "address" && cur2 === "payable") {
    state.lastToken = "address payable";
  }
  if (state.lastToken === "contract" || state.lastToken === "struct") {
    keywordsContractList[cur2] = true;
    state.lastToken = null;
  }
  if (state.grammar === "function") {
    return "parameterValue";
  }
  return "variable";
}
function tokenString29(quote4) {
  return function(stream, state) {
    let escaped = false;
    let next2;
    let end2 = false;
    next2 = stream.next();
    while (next2 != null) {
      if (next2 === quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && quote4 !== "`" && next2 === "\\";
      next2 = stream.next();
    }
    if (end2 || !(escaped || quote4 === "`")) {
      state.tokenize = tokenBase46;
    }
    return "string";
  };
}
function tokenComment20(stream, state) {
  let maybeEnd = false;
  let ch2 = stream.next();
  while (ch2) {
    if (ch2 === "/" && maybeEnd) {
      state.tokenize = tokenBase46;
      break;
    }
    maybeEnd = ch2 === "*";
    ch2 = stream.next();
  }
  return "comment";
}
function isVersion(stream, state) {
  if (state.lastToken === "pragma solidity") {
    state.lastToken = null;
    return !state.startOfLine && (stream.match(/[\^{0}][0-9.]+/) || stream.match(/[>=]+?[\s]*[0-9.]+[\s]*[<]?[\s]*[0-9.]+/));
  }
}
function isNumber3(ch2, stream) {
  if (/[\d.]/.test(ch2)) {
    if (ch2 === ".") {
      stream.match(/^[0-9]+([eE][-+]?[0-9]+)?/);
    } else if (ch2 === "0") {
      if (!stream.match(/^[xX][0-9a-fA-F]+/)) {
        stream.match(/^0[0-7]+/);
      }
    } else {
      stream.match(/^[0-9]*\.?[0-9]*([eE][-+]?[0-9]+)?/);
    }
    return true;
  }
}
function isValidInteger(token) {
  if (token.match(/^[u]?int/)) {
    if (token.indexOf("t") + 1 === token.length) {
      return true;
    }
    const numberPart = Number(token.substr(token.indexOf("t") + 1, token.length));
    return numberPart % 8 === 0 && numberPart <= 256;
  }
}
function isValidBytes(token) {
  if (token.match(/^bytes/)) {
    if (token.indexOf("s") + 1 === token.length) {
      return true;
    }
    const bytesPart = token.substr(token.indexOf("s") + 1, token.length);
    return Number(bytesPart) <= 32;
  }
}
function isValidFixed(token) {
  if (token.match(/^[u]?fixed([0-9]+x[0-9]+)?/)) {
    if (token.indexOf("d") + 1 === token.length) {
      return true;
    }
    const numberPart = token.substr(token.indexOf("d") + 1, token.length).split("x").map(Number);
    return numberPart[0] % 8 === 0 && numberPart[0] <= 256 && numberPart[1] <= 80;
  }
}
function updateHexLiterals(token, stream) {
  if (token.match(/^hex/) && stream.peek() === '"') {
    let maybeEnd = false;
    let ch2;
    let hexValue = "";
    let stringAfterHex = "";
    ch2 = stream.next();
    while (ch2) {
      stringAfterHex += ch2;
      if (ch2 === '"' && maybeEnd) {
        hexValue = stringAfterHex.substring(1, stringAfterHex.length - 1);
        if (hexValue.match(/^[0-9a-fA-F]+$/)) {
          return "number";
        }
        stream.backUp(stringAfterHex.length);
        break;
      }
      maybeEnd = maybeEnd || ch2 === '"';
      ch2 = stream.next();
    }
  }
}
function updateGarmmer(ch2, state) {
  if (ch2 === "," && state.para === "functionName(variable") {
    state.para = "functionName(";
  }
  if (state.para != null && state.para.startsWith("functionName")) {
    if (ch2 === ")") {
      if (state.para.endsWith("(")) {
        state.para = state.para.substr(0, state.para.length - 1);
        if (state.para === "functionName") {
          state.grammar = "";
        }
      }
    } else if (ch2 === "(") {
      state.para += ch2;
    }
  }
  if (ch2 === "(" && state.lastToken === "functionName") {
    state.lastToken += ch2;
  } else if (ch2 === ")" && state.lastToken === "functionName(") {
    state.lastToken = null;
  } else if (ch2 === "(" && state.lastToken === "returns") {
    state.lastToken += ch2;
  } else if (ch2 === ")" && (state.lastToken === "returns(" || state.lastToken === "returns(variable")) {
    state.lastToken = null;
  }
  if (ch2 === "(" && state.lastToken === "address") {
    state.lastToken += ch2;
  }
  curPunc13 = ch2;
  return null;
}
var Context15 = class {
  constructor(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
};
function pushContext16(state, col, type7) {
  state.context = new Context15(state.indented, col, type7, null, state.context);
  return state.context;
}
function popContext16(state) {
  if (!state.context.prev) {
    return;
  }
  const t2 = state.context.type;
  if (t2 === ")" || t2 === "]" || t2 === "}") {
    state.indented = state.context.indented;
  }
  return state.context = state.context.prev;
}
var parser27 = {
  startState(indentUnit2) {
    return {
      tokenize: null,
      context: new Context15(0 - indentUnit2, 0, "top", false, null),
      indented: 0,
      startOfLine: true,
      grammar: null,
      lastToken: null,
      para: null
    };
  },
  token(stream, state) {
    const ctx = state.context;
    if (stream.sol()) {
      if (ctx.align == null) {
        ctx.align = false;
      }
      state.indented = stream.indentation();
      state.startOfLine = true;
      if (ctx.type === "case") {
        ctx.type = "}";
      }
      if (state.grammar === "doc") {
        state.grammar = null;
      }
    }
    if (stream.eatSpace()) {
      return null;
    }
    curPunc13 = null;
    const style2 = (state.tokenize || tokenBase46)(stream, state);
    if (style2 === "comment") {
      return style2;
    }
    if (ctx.align == null) {
      ctx.align = true;
    }
    if (curPunc13 === "{") {
      pushContext16(state, stream.column(), "}");
    } else if (curPunc13 === "[") {
      pushContext16(state, stream.column(), "]");
    } else if (curPunc13 === "(") {
      pushContext16(state, stream.column(), ")");
    } else if (curPunc13 === "case") {
      ctx.type = "case";
    } else if (curPunc13 === "}" && ctx.type === "}") {
      popContext16(state);
    } else if (curPunc13 === ctx.type) {
      popContext16(state);
    }
    state.startOfLine = false;
    return style2;
  },
  indent(state, textAfter, indentContext) {
    if (state.tokenize !== tokenBase46 && state.tokenize != null) {
      return null;
    }
    const ctx = state.context;
    const firstChar = textAfter && textAfter.charAt(0);
    if (ctx.type === "case" && /^(?:case|default)\b/.test(textAfter)) {
      state.context.type = "}";
      return ctx.indented;
    }
    const closing4 = firstChar === ctx.type;
    if (ctx.align) {
      return ctx.column + (closing4 ? 0 : 1);
    }
    return ctx.indented + (closing4 ? 0 : indentContext.unit);
  },
  // @ts-ignore not specified in new stream parser, but maybe does something
  electricChars: "{}):",
  closeBrackets: "()[]{}''\"\"``",
  fold: "brace",
  blockCommentStart: "/*",
  blockCommentEnd: "*/",
  lineComment: "//",
  tokenTable: {
    functionName: /* @__PURE__ */ Tag.define(),
    parameterValue: /* @__PURE__ */ Tag.define(),
    addressFunction: /* @__PURE__ */ Tag.define(),
    errorHandling: /* @__PURE__ */ Tag.define(),
    contractRelated: /* @__PURE__ */ Tag.define(),
    version: /* @__PURE__ */ Tag.define(),
    etherUnit: /* @__PURE__ */ Tag.define(),
    doc: /* @__PURE__ */ Tag.define(),
    mathematicalAndCryptographic: /* @__PURE__ */ Tag.define(),
    abi: /* @__PURE__ */ Tag.define()
  }
};
var solidity = /* @__PURE__ */ new LanguageSupport(/* @__PURE__ */ StreamLanguage.define(parser27));

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_apl();
init_asciiarmor();
init_asterisk();
init_brainfuck();
init_clike();

// ../../node_modules/@nextjournal/lezer-clojure/dist/index.es.js
init_dist6();
init_dist();
var flag = () => new NodeProp({ deserialize: (str) => true });
var coll = flag();
var prefixColl = flag();
var prefixEdge = flag();
var sameEdge = flag();
var prefixContainer = flag();
var props = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  coll,
  prefixColl,
  prefixEdge,
  sameEdge,
  prefixContainer
});
var spec_Symbol = { __proto__: null, true: 136, false: 136, nil: 138, def: 147, defn: 147, "defn-": 147, defmacro: 147, definline: 147, defonce: 147, deftest: 147, defcard: 147, ns: 155 };
var parser28 = LRParser.deserialize({
  version: 14,
  states: "-zQ]QPOOP!pOPOOOOQO'#C`'#C`OOQO'#Cb'#CbO]QPO'#CcO]QPO'#CeO]QPO'#CgO]QPO'#CiO]QPO'#CkO]OPO'#CtO]OPO'#CvO!uOQO'#C|OOQO'#Dm'#DmQ]QPOOO$hQPO'#CqO$oQPO'#DUO$vQPO'#DXO$}OSO'#DZO%cOPO'#D]O%hOPO'#D`O%mOPO'#DbO%uOWO'#DdO]QPO'#DgO]QPO'#DhO%zQPO'#DjOOQO'#Dq'#DqP&SQPO'#C^POOO)C?e)C?eOOQO,58},58}OOQO,59P,59POOQO,59R,59ROOQO,59T,59TOOQO,59V,59VOOQO,59`,59`OOQO,59b,59bOOQO,59h,59hO'gOPO,59hOOQO-E7k-E7kOOQO'#Cr'#CrO!}QPO'#CsOOQO'#Dv'#DvO'lQPO'#D|O'sQPO'#DuOOQO'#DO'#DOOOQO'#Dz'#DzO'sQPO'#DyOOQO'#DQ'#DQOOQO'#D}'#D}O'lQPO'#D|OOQO'#Dt'#DtO(OQPO,59]O(TQPO,59pOOQO,59p,59pO([QPO,59sOOQO,59s,59sOOQO,59u,59uOOOO,59x,59xOOQO,59y,59yOOQO,5:Q,5:QOOQO,5:T,5:TOOQO,5:V,5:VOOQO,59w,59wOOQO,59z,59zOOQO,59|,59|OOQO,5:O,5:OOOQO,5:R,5:ROOQO,5:S,5:SOOQO,5:U,5:UPOOO,58x,58xOOQO1G/S1G/SOOQO,59_,59_OOQO,59k,59kOOQO,59m,59mOOQO'#Cx'#CxO'sQPO'#CyOOQO'#Dx'#DxO(cQPO,5:aO(jQPO,5:eO(qQPO,5:hOOQO1G.w1G.wOOQO1G/[1G/[OOQO1G/_1G/_OOQO,59e,59eO(xQPO'#CzO*`QPO1G/{O]QPO1G/{OOQO'#Cz'#CzO*gQPO1G0PO*gQPO1G0PO*nQPO7+%gO*uQPO7+%kP&SQPO'#CcP&SQPO'#CeP&SQPO'#CgP&SQPO'#CiP&SQPO'#CkP*|OPO'#DbP&SQPO'#DgP&SQPO'#Dh",
  stateData: "+[~O!dOSPOSRPQ~OTiOWSOYTO[UO^VO`WOaiObiOd^OiXOkYOoZOw_Oz`O|iO!OaO!TcO!VdO!XeO!fQO!gRO~ORjO~OosOqtO~OT!OOWSOYTO[UO^VO`WOaiObiOd^OiXOkYOoZOw_Oz`O|iO!OaO!TcO!VdO!XeO!fQO!gRO!kvO!o{O~Oc!pP~P!}Ov!UO~P]Oy!WO~P]Od^OoZOz`O!r!YO!t!]O!u!^O~Oz`O~OT!`O~OWSOd^O~O!s!bO~Ow_Oz`O~OTiOW!}OY#OO[#PO^#QO`#ROaiObiOd^OiXOkYOoZOw_Oz`O|iO!OaO!TcO!V#SO!XeO!fQO!gRO~Oo!gO~Oc!pX~P]OT!kOiXOkYO~Oc!qO~Ov!rO~P]Oy!sO~P]Oc!ia~P]Oc!ma~P]Oc!pa~P]OTnXWnXYnX[nX^nX`nXanXbnXc!eXdnXinXknXonXwnXznX|nX!OnX!TnX!VnX!XnX!fnX!gnX~Oc!ii~P]Oc!mi~P]Oc!iq~P]Oc!mq~P]OW!}Od^O~Oa!u!tT!t~",
  goto: "/]!rPP!sP!vP!v#nP!vP!vP!vP!vPPPPP$j%i%i%mP%mP&n&n&sP&yP'x'x'|'|PP(QPP({P!vP!v)|!v!vP!vP!vP!v!v!v*t!v+nP,fPPP-^PP.j.m.pP.v.m/PP.m/VRkP!kiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#U!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UT!ad#S!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ![aT!ad#STx^w!UfOSTUVWXY]_`fgy!Q!T!V!n!o!p!v!w!y!z!{!|Sw^wU!lz}!la#Tj!}#O#P#Q#R#T#UV!mz}!lQ!w!nR!z!o!fiOSTUVWXY]^_`fgjwy!Q!T!V!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ!ZaQ!u!nR!x!oT|^wT!P^w!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UR!eh!jiOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ!XaQ!_bR!eh!kbOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#U!YgOSTUVWXY]^_`fgwy!Q!T!V!n!o!p!v!w!y!z!{!|a#Uj!}#O#P#Q#R#T#U!khOSTUVWXY]^_`fgjwy!Q!T!V!n!o!p!v!w!y!z!{!|!}#O#P#Q#R#T#UQ]Obu]y!T!V!p!v!y!{!|Qy^Q!T_Q!V`Q!p!QQ!v!nQ!y!oQ!{!wR!|!zt[O]^_`y!Q!T!V!n!o!p!v!w!y!z!{!|SlS!}SmT#OSnU#PSoV#QSpW#RQqXQrYU!cfw#TS!dg#UR!fjR!S^R!R^Qz^R!hwQ!nzQ!o}R!t!lQ}^R!iwQ!Q^R!jw",
  nodeNames: "\u26A0 LineComment Discard #_ Boolean Symbol Nil Deref @ Quote ' SyntaxQuote ` Unquote ~ UnquoteSplice ~@ Number Keyword ) ( List DefLike Meta Metadata ^ ReaderMetadata #^ VarName Meta DocString \" String StringContent NS Meta Operator Meta ] [ Vector } { Map Character Set # NamespacedMap KeywordPrefix RegExp Var #' ReaderConditional #? SymbolicValue ## AnonymousFunction Meta TaggedLiteral ReaderTag ConstructorCall ConstructorPrefix Program",
  maxTerm: 83,
  nodeProps: [
    [prefixEdge, -14, 3, 8, 10, 12, 14, 16, 25, 27, 46, 48, 51, 53, 55, 61, ""],
    [prefixColl, -13, 7, 9, 11, 13, 15, 24, 26, 45, 47, 49, 50, 52, 56, ""],
    ["openedBy", 19, "(", 31, '"', 38, "[", 41, "{"],
    ["closedBy", 20, ")", 31, '"', 39, "]", 42, "}"],
    [coll, -3, 21, 40, 43, ""],
    [prefixContainer, -7, 23, 29, 35, 37, 57, 58, 60, ""],
    [sameEdge, 31, ""]
  ],
  skippedNodes: [0, 1, 2, 3],
  repeatNodeCount: 1,
  tokenData: "#6x~R![OX$wX^%n^p$wpq%nqr'grs,Tst,Ytu/Yuv'gvw'gwx6Vxy6jyz6}z{'g{|7b|}%n}!O7b!O!P9t!P!Q)v!Q!R!8[!R![!>t![!]!Cp!]!^!J]!^!_'g!_!`'g!`!a'g!a!b'g!b!c!Kr!c!}/Y!}#O!LV#O#P!Lj#P#Q#3w#Q#R#4[#R#S/Y#S#T#4o#T#o/Y#o#p#5S#p#q$w#q#r#5g#r#s#5z#s#y$w#y#z%n#z$f$w$f$g%n$g##l/Y##l#BY$w#BY#BZ%n#BZ$IS$w$IS$I_%n$I_$I|$w$I|$JO%n$JO$JT$w$JT$JU%n$JU$KV$w$KV$KW%n$KW&FU$w&FU&FV%n&FV~$wQ$|SqQOr$ws#O$w#O#P%Y#P~$wQ%_TqQOr$wrs$ws#O$w#O#P%Y#P~$wR%ujqQ!dPOX$wX^%n^p$wpq%nqr$ws|$w|}%n}#O$w#O#P%Y#P#y$w#y#z%n#z$f$w$f$g%n$g#BY$w#BY#BZ%n#BZ$IS$w$IS$I_%n$I_$I|$w$I|$JO%n$JO$JT$w$JT$JU%n$JU$KV$w$KV$KW%n$KW&FU$w&FU&FV%n&FV~$w_'rpqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q!['g![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$wZ*PpqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$w~,YOo~R,a[!OPqQOr$wst-Vtw$wwx-jx!a$w!a!b-}!b#O$w#O#P%Y#P#Q$w#Q#R.b#R#S.u#S~$wR-^S!XPqQOr$ws#O$w#O#P%Y#P~$wR-qS!TPqQOr$ws#O$w#O#P%Y#P~$wR.US!VPqQOr$ws#O$w#O#P%Y#P~$wR.iSkPqQOr$ws#O$w#O#P%Y#P~$wR.|SRPqQOr$ws#O$w#O#P%Y#P~$w_/epqQ!sW!tSTPOq$wqr'gst)vtu/Yuv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P1i!P!Q'g!Q![/Y![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}/Y!}#O$w#O#P%Y#P#R$w#R#S/Y#S#T$w#T#o/Y#o$g$w$g##l/Y##l~$w_1rpqQ!sWTPOq$wqr)vst)vtu3vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!}3v!}#O$w#O#P%Y#P#R$w#R#S3v#S#T$w#T#o3v#o$g$w$g##l3v##l~$w_4RpqQ!sW!uSTPOq$wqr)vst)vtu3vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P1i!P!Q)v!Q![3v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!}3v!}#O$w#O#P%Y#P#R$w#R#S3v#S#T$w#T#o3v#o$g$w$g##l3v##l~$wR6^SYPqQOr$ws#O$w#O#P%Y#P~$wV6qSdTqQOr$ws#O$w#O#P%Y#P~$wR7UScPqQOr$ws#O$w#O#P%Y#P~$w_7mqqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P9t!P!Q'g!Q!RHO!R![!&|![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$wZ9}pqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![<R![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZ<^tqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![<R![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!g)v!g!h>n!h!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#X)v#X#Y>n#Y#o)v#o$g$w$g##l)v##l~$wZ>wpqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|@{|}$w}!O@{!O!P)v!P!Q)v!Q![CY![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZAUpqQ!sWTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![CY![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZCerqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![CY![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!o)v!o!pEo!p!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$wZEzpqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#o)v#o$g$w$g##l)v##l~$w_H]yqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!PJ|!P!Q!![!Q![!&|![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!g'g!g!h!)t!h!o'g!o!p!0{!p!q!0{!q!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#X'g#X#Y!)t#Y#l'g#l#m!3^#m#o'g#o$g$w$g##l'g##l~$wZKXvqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![J|![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!g)v!g!h>n!h!o)v!o!pMo!p!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#X)v#X#Y>n#Y#o)v#o$g$w$g##l)v##l~$wZMztqQ!sWaPTPOq$wqr)vst)vtu)vuv)vvw)vwx)vxz$wz{)v{|)v|}$w}!O)v!O!P)v!P!Q)v!Q![)v![!])v!]!^$w!^!_)v!_!`)v!`!a)v!a!b)v!b!c$w!c!g)v!g!h>n!h!})v!}#O$w#O#P%Y#P#R$w#R#S)v#S#T$w#T#X)v#X#Y>n#Y#o)v#o$g$w$g##l)v##l~$w_!!gpqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!$k![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!$xpqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!$k![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!'ZwqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!PJ|!P!Q!![!Q![!&|![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!g'g!g!h!)t!h!o'g!o!p!0{!p!q!0{!q!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#X'g#X#Y!)t#Y#o'g#o$g$w$g##l'g##l~$w_!*PpqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|!,T|}$w}!O!,T!O!P)v!P!Q'g!Q![!.d![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!,`pqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!.d![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!.qrqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!.d![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!o'g!o!p!0{!p!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!1YpqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q!['g![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#o'g#o$g$w$g##l'g##l~$w_!3irqQ!sW!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!5s![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!i!5s!i!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#Z!5s#Z#o'g#o$g$w$g##l'g##l~$w_!6QrqQ!sWaP!tSTPOq$wqr'gst)vtu'guv'gvw'gwx)vxz$wz{'g{|'g|}$w}!O'g!O!P)v!P!Q'g!Q![!5s![!])v!]!^$w!^!_'g!_!`'g!`!a'g!a!b'g!b!c$w!c!i!5s!i!}'g!}#O$w#O#P%Y#P#R$w#R#S'g#S#T$w#T#Z!5s#Z#o'g#o$g$w$g##l'g##l~$wR!8ceqQaPOr$ws!O$w!O!P!9t!P!Q!=r!Q![!>t![!g$w!g!h!:q!h!o$w!o!p!<n!p!q!<n!q#O$w#O#P%Y#P#U$w#U#V!?z#V#X$w#X#Y!:q#Y#c$w#c#d!AS#d#l$w#l#m!BU#m~$wR!9{[qQaPOr$ws!Q$w!Q![!9t![!g$w!g!h!:q!h!o$w!o!p!=R!p#O$w#O#P%Y#P#X$w#X#Y!:q#Y~$wR!:vYqQOr$ws{$w{|!;f|}$w}!O!;f!O!Q$w!Q![!;}![#O$w#O#P%Y#P~$wR!;kUqQOr$ws!Q$w!Q![!;}![#O$w#O#P%Y#P~$wR!<UWqQaPOr$ws!Q$w!Q![!;}![!o$w!o!p!<n!p#O$w#O#P%Y#P~$wR!<uSqQaPOr$ws#O$w#O#P%Y#P~$wR!=YWqQaPOr$ws!g$w!g!h!:q!h#O$w#O#P%Y#P#X$w#X#Y!:q#Y~$wR!=wUqQOr$ws!Q$w!Q![!>Z![#O$w#O#P%Y#P~$wR!>bUqQaPOr$ws!Q$w!Q![!>Z![#O$w#O#P%Y#P~$wR!>{_qQaPOr$ws!O$w!O!P!9t!P!Q!=r!Q![!>t![!g$w!g!h!:q!h!o$w!o!p!<n!p!q!<n!q#O$w#O#P%Y#P#X$w#X#Y!:q#Y~$wR!@PVqQOr$ws!Q$w!Q!R!@f!R!S!@f!S#O$w#O#P%Y#P~$wR!@mVqQaPOr$ws!Q$w!Q!R!@f!R!S!@f!S#O$w#O#P%Y#P~$wR!AXUqQOr$ws!Q$w!Q!Y!Ak!Y#O$w#O#P%Y#P~$wR!ArUqQaPOr$ws!Q$w!Q!Y!Ak!Y#O$w#O#P%Y#P~$wR!BZYqQOr$ws!Q$w!Q![!By![!c$w!c!i!By!i#O$w#O#P%Y#P#T$w#T#Z!By#Z~$wR!CQYqQaPOr$ws!Q$w!Q![!By![!c$w!c!i!By!i#O$w#O#P%Y#P#T$w#T#Z!By#Z~$wV!CyobPqQ!rSOq$wqr!Ezst$wtu!Ezuv!Ezvw!Ezwz$wz{!Ez{|!Ez|}$w}!O!Ez!O!P!Ez!P!Q!Ez!Q![$w![!]!HX!]!^$w!^!_!Ez!_!`!Ez!`!a!Ez!a!b!Ez!b!c$w!c!}!Ez!}#O$w#O#P%Y#P#R$w#R#S!Ez#S#T$w#T#o!Ez#o$g$w$g##l!Ez##l~$wV!FTpbPqQ!rSOq$wqr!Ezst!Eztu!Ezuv!Ezvw!Ezwx!Ezxz$wz{!Ez{|!Ez|}$w}!O!Ez!O!P!Ez!P!Q!Ez!Q![!Ez![!]!Ez!]!^$w!^!_!Ez!_!`!Ez!`!a!Ez!a!b!Ez!b!c$w!c!}!Ez!}#O$w#O#P%Y#P#R$w#R#S!Ez#S#T$w#T#o!Ez#o$g$w$g##l!Ez##l~$wV!HbmbPqQ!rSOq$wqr!Ezst$wtu!Ezuv!Ezvw!Ezwz$wz{!Ez{|!Ez|}$w}!O!Ez!O!P!Ez!P!Q!Ez!Q!^$w!^!_!Ez!_!`!Ez!`!a!Ez!a!b!Ez!b!c$w!c!}!Ez!}#O$w#O#P%Y#P#R$w#R#S!Ez#S#T$w#T#o!Ez#o$g$w$g##l!Ez##l~$wR!JdVPPqQOY!J]YZ$wZr!J]rs!Jys#O!J]#O#P!KU#P~!J]P!KOQPPOY!JyZ~!JyR!K]VPPqQOY!J]YZ$wZr!J]rs!J]s#O!J]#O#P!KU#P~!J]R!KySWPqQOr$ws#O$w#O#P%Y#P~$wR!L^SwPqQOr$ws#O$w#O#P%Y#P~$wR!LocqQOY!MzYZ$wZr!Mzrs!Mzs#O!Mz#O#P!N_#P#U!Mz#U#V!Nu#V#Y!Mz#Y#Z#$w#Z#b!Mz#b#c#(b#c#d#*{#d#f!Mz#f#g#,m#g#h#/W#h#i#/q#i#j#0s#j~!MzR!NRS|PqQOr$ws#O$w#O#P%Y#P~$wR!NfT|PqQOr$wrs$ws#O$w#O#P%Y#P~$wR!N|U|PqQOr$ws#O$w#O#P%Y#P#T$w#T#U# `#U~$wR# eUqQOr$ws#O$w#O#P%Y#P#V$w#V#W# w#W~$wR# |UqQOr$ws#O$w#O#P%Y#P#_$w#_#`#!`#`~$wR#!eUqQOr$ws#O$w#O#P%Y#P#g$w#g#h#!w#h~$wR#!|UqQOr$ws#O$w#O#P%Y#P#d$w#d#e##`#e~$wR##eUqQOr$ws#O$w#O#P%Y#P#T$w#T#U##w#U~$wR##|UqQOr$ws#O$w#O#P%Y#P#V$w#V#W#$`#W~$wR#$eUqQOr$ws#O$w#O#P%Y#P#X$w#X#Y!Mz#Y~$wR#%OU|PqQOr$ws#O$w#O#P%Y#P#c$w#c#d#%b#d~$wR#%gUqQOr$ws#O$w#O#P%Y#P#f$w#f#g#%y#g~$wR#&OUqQOr$ws#O$w#O#P%Y#P#a$w#a#b#&b#b~$wR#&gUqQOr$ws#O$w#O#P%Y#P#Y$w#Y#Z#&y#Z~$wR#'OUqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#'b#Y~$wR#'gUqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#'y#Y~$wR#(OUqQOr$ws#O$w#O#P%Y#P#W$w#W#X!Mz#X~$wR#(iU|PqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#({#Y~$wR#)QUqQOr$ws#O$w#O#P%Y#P#k$w#k#l#)d#l~$wR#)iUqQOr$ws#O$w#O#P%Y#P#`$w#`#a#){#a~$wR#*QUqQOr$ws#O$w#O#P%Y#P#]$w#]#^#*d#^~$wR#*iUqQOr$ws#O$w#O#P%Y#P#b$w#b#c#$`#c~$wR#+SV|PqQOr$ws!Q$w!Q!U#+i!U!Y#,S!Y#O$w#O#P%Y#P~$wR#+pU|PqQOr$ws!Q$w!Q!Y#,S!Y#O$w#O#P%Y#P~$wR#,ZU|PqQOr$ws!Q$w!Q!Y!Mz!Y#O$w#O#P%Y#P~$wR#,tU|PqQOr$ws#O$w#O#P%Y#P#X$w#X#Y#-W#Y~$wR#-]UqQOr$ws#O$w#O#P%Y#P#h$w#h#i#-o#i~$wR#-tUqQOr$ws#O$w#O#P%Y#P#i$w#i#j#.W#j~$wR#.]UqQOr$ws#O$w#O#P%Y#P#f$w#f#g#.o#g~$wR#.tUqQOr$ws#O$w#O#P%Y#P#b$w#b#c!Mz#c~$wR#/_U|PqQOr$ws#O$w#O#P%Y#P#d$w#d#e##`#e~$wR#/xU|PqQOr$ws#O$w#O#P%Y#P#T$w#T#U#0[#U~$wR#0aUqQOr$ws#O$w#O#P%Y#P#U$w#U#V!Mz#V~$wR#0zY|PqQOr$ws!Q$w!Q![#1j![!c$w!c!i#1j!i#O$w#O#P%Y#P#T$w#T#Z#1j#Z~$wR#1oYqQOr$ws!Q$w!Q![#2_![!c$w!c!i#2_!i#O$w#O#P%Y#P#T$w#T#Z#2_#Z~$wR#2dYqQOr$ws!Q$w!Q![#3S![!c$w!c!i#3S!i#O$w#O#P%Y#P#T$w#T#Z#3S#Z~$wR#3XYqQOr$ws!Q$w!Q![!Mz![!c$w!c!i!Mz!i#O$w#O#P%Y#P#T$w#T#Z!Mz#Z~$wR#4OSvPqQOr$ws#O$w#O#P%Y#P~$wR#4cSiPqQOr$ws#O$w#O#P%Y#P~$wR#4vS[PqQOr$ws#O$w#O#P%Y#P~$wV#5ZSzTqQOr$ws#O$w#O#P%Y#P~$wR#5nSyPqQOr$ws#O$w#O#P%Y#P~$wR#6RU^PqQOr$ws!b$w!b!c#6e!c#O$w#O#P%Y#P~$wR#6lS`PqQOr$ws#O$w#O#P%Y#P~$w",
  tokenizers: [0, 1, 2, 3],
  topRules: { "Program": [0, 62] },
  dynamicPrecedences: { "22": 1, "34": 2 },
  specialized: [{ term: 5, get: (value) => spec_Symbol[value] || -1 }],
  tokenPrec: 466
});

// ../../node_modules/@nextjournal/lang-clojure/dist/index.js
init_dist4();
init_dist5();
var { coll: coll2 } = props;
var clojureLanguage = /* @__PURE__ */ LRLanguage.define({
  parser: /* @__PURE__ */ parser28.configure({
    props: [
      /* @__PURE__ */ styleTags({
        NS: tags.keyword,
        DefLike: tags.keyword,
        "Operator/Symbol": tags.keyword,
        "VarName/Symbol": /* @__PURE__ */ tags.definition(tags.variableName),
        // Symbol: tags.keyword,
        // "'": tags.keyword, // quote
        Boolean: tags.atom,
        "DocString/...": tags.emphasis,
        "Discard!": tags.comment,
        Number: tags.number,
        StringContent: tags.string,
        '"\\""': tags.string,
        Keyword: tags.atom,
        Nil: tags.null,
        LineComment: tags.lineComment,
        RegExp: tags.regexp
      }),
      /* @__PURE__ */ indentNodeProp.add((nodeType) => {
        return (context) => {
          let { pos, unit, node, state, baseIndent, textAfter } = context;
          if (nodeType.prop(coll2)) {
            let parentBase = context.column(node.firstChild.to);
            if ("List" == nodeType.name && ["NS", "DefLike", "Operator"].includes(node.firstChild.nextSibling.type.name)) {
              return parentBase + 1;
            } else {
              return parentBase;
            }
          } else {
            return 0;
          }
        };
      }),
      /* @__PURE__ */ foldNodeProp.add({ ["Vector Map List"]: foldInside })
    ]
  }),
  languageData: { commentTokens: { line: ";;" } }
});
function clojure2() {
  return new LanguageSupport(clojureLanguage);
}

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_cmake();
init_cobol();
init_coffeescript();
init_commonlisp();
init_crystal();
init_cypher();
init_d();
init_diff();
init_dockerfile();
init_dtd();
init_dylan();
init_ebnf();
init_ecl();
init_eiffel();
init_elm();
init_erlang();
init_factor();
init_fcl();
init_forth();
init_fortran();
init_gas();
init_gherkin();

// ../../node_modules/@codemirror/legacy-modes/mode/go.js
var keywords48 = {
  "break": true,
  "case": true,
  "chan": true,
  "const": true,
  "continue": true,
  "default": true,
  "defer": true,
  "else": true,
  "fallthrough": true,
  "for": true,
  "func": true,
  "go": true,
  "goto": true,
  "if": true,
  "import": true,
  "interface": true,
  "map": true,
  "package": true,
  "range": true,
  "return": true,
  "select": true,
  "struct": true,
  "switch": true,
  "type": true,
  "var": true,
  "bool": true,
  "byte": true,
  "complex64": true,
  "complex128": true,
  "float32": true,
  "float64": true,
  "int8": true,
  "int16": true,
  "int32": true,
  "int64": true,
  "string": true,
  "uint8": true,
  "uint16": true,
  "uint32": true,
  "uint64": true,
  "int": true,
  "uint": true,
  "uintptr": true,
  "error": true,
  "rune": true,
  "any": true,
  "comparable": true
};
var atoms17 = {
  "true": true,
  "false": true,
  "iota": true,
  "nil": true,
  "append": true,
  "cap": true,
  "close": true,
  "complex": true,
  "copy": true,
  "delete": true,
  "imag": true,
  "len": true,
  "make": true,
  "new": true,
  "panic": true,
  "print": true,
  "println": true,
  "real": true,
  "recover": true
};
var isOperatorChar16 = /[+\-*&^%:=<>!|\/]/;
var curPunc14;
function tokenBase47(stream, state) {
  var ch2 = stream.next();
  if (ch2 == '"' || ch2 == "'" || ch2 == "`") {
    state.tokenize = tokenString30(ch2);
    return state.tokenize(stream, state);
  }
  if (/[\d\.]/.test(ch2)) {
    if (ch2 == ".") {
      stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
    } else if (ch2 == "0") {
      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
    } else {
      stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
    }
    return "number";
  }
  if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
    curPunc14 = ch2;
    return null;
  }
  if (ch2 == "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment21;
      return tokenComment21(stream, state);
    }
    if (stream.eat("/")) {
      stream.skipToEnd();
      return "comment";
    }
  }
  if (isOperatorChar16.test(ch2)) {
    stream.eatWhile(isOperatorChar16);
    return "operator";
  }
  stream.eatWhile(/[\w\$_\xa1-\uffff]/);
  var cur2 = stream.current();
  if (keywords48.propertyIsEnumerable(cur2)) {
    if (cur2 == "case" || cur2 == "default") curPunc14 = "case";
    return "keyword";
  }
  if (atoms17.propertyIsEnumerable(cur2)) return "atom";
  return "variable";
}
function tokenString30(quote4) {
  return function(stream, state) {
    var escaped = false, next2, end2 = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == quote4 && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && quote4 != "`" && next2 == "\\";
    }
    if (end2 || !(escaped || quote4 == "`"))
      state.tokenize = tokenBase47;
    return "string";
  };
}
function tokenComment21(stream, state) {
  var maybeEnd = false, ch2;
  while (ch2 = stream.next()) {
    if (ch2 == "/" && maybeEnd) {
      state.tokenize = tokenBase47;
      break;
    }
    maybeEnd = ch2 == "*";
  }
  return "comment";
}
function Context16(indented, column, type7, align, prev) {
  this.indented = indented;
  this.column = column;
  this.type = type7;
  this.align = align;
  this.prev = prev;
}
function pushContext17(state, col, type7) {
  return state.context = new Context16(state.indented, col, type7, null, state.context);
}
function popContext17(state) {
  if (!state.context.prev) return;
  var t2 = state.context.type;
  if (t2 == ")" || t2 == "]" || t2 == "}")
    state.indented = state.context.indented;
  return state.context = state.context.prev;
}
var go2 = {
  name: "go",
  startState: function(indentUnit2) {
    return {
      tokenize: null,
      context: new Context16(-indentUnit2, 0, "top", false),
      indented: 0,
      startOfLine: true
    };
  },
  token: function(stream, state) {
    var ctx = state.context;
    if (stream.sol()) {
      if (ctx.align == null) ctx.align = false;
      state.indented = stream.indentation();
      state.startOfLine = true;
      if (ctx.type == "case") ctx.type = "}";
    }
    if (stream.eatSpace()) return null;
    curPunc14 = null;
    var style2 = (state.tokenize || tokenBase47)(stream, state);
    if (style2 == "comment") return style2;
    if (ctx.align == null) ctx.align = true;
    if (curPunc14 == "{") pushContext17(state, stream.column(), "}");
    else if (curPunc14 == "[") pushContext17(state, stream.column(), "]");
    else if (curPunc14 == "(") pushContext17(state, stream.column(), ")");
    else if (curPunc14 == "case") ctx.type = "case";
    else if (curPunc14 == "}" && ctx.type == "}") popContext17(state);
    else if (curPunc14 == ctx.type) popContext17(state);
    state.startOfLine = false;
    return style2;
  },
  indent: function(state, textAfter, cx2) {
    if (state.tokenize != tokenBase47 && state.tokenize != null) return null;
    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
    if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter)) return ctx.indented;
    var closing4 = firstChar == ctx.type;
    if (ctx.align) return ctx.column + (closing4 ? 0 : 1);
    else return ctx.indented + (closing4 ? 0 : cx2.unit);
  },
  languageData: {
    indentOnInput: /^\s([{}]|case |default\s*:)$/,
    commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
  }
};

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_groovy();
init_haskell();
init_haxe();
init_http();
init_idl();
init_jinja2();
init_julia();
init_livescript();
init_lua();
init_mathematica();
init_mbox();
init_mirc();
init_modelica();
init_mscgen();
init_mumps();
init_nginx();
init_nsis();
init_ntriples();
init_octave();
init_oz();
init_pascal();
init_perl();
init_pig();
init_powershell();
init_properties();
init_protobuf();
init_puppet();
init_q();
init_r();
init_ruby();
init_sas();
init_scheme();
init_shell();
init_sieve();
init_smalltalk();
init_solr();
init_sparql();
init_spreadsheet();
init_stex();
init_stylus();
init_swift();
init_tcl();
init_textile();
init_tiddlywiki();
init_tiki();
init_toml();
init_troff();
init_ttcn();
init_turtle();
init_vb();
init_vbscript();
init_velocity();
init_verilog();
init_vhdl();
init_webidl();
init_xquery();
init_yacas();

// ../../node_modules/@codemirror/legacy-modes/mode/yaml.js
var cons = ["true", "false", "on", "off", "yes", "no"];
var keywordRegex = new RegExp("\\b((" + cons.join(")|(") + "))$", "i");
var yaml2 = {
  name: "yaml",
  token: function(stream, state) {
    var ch2 = stream.peek();
    var esc = state.escaped;
    state.escaped = false;
    if (ch2 == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
      return "string";
    if (state.literal && stream.indentation() > state.keyCol) {
      stream.skipToEnd();
      return "string";
    } else if (state.literal) {
      state.literal = false;
    }
    if (stream.sol()) {
      state.keyCol = 0;
      state.pair = false;
      state.pairStart = false;
      if (stream.match("---")) {
        return "def";
      }
      if (stream.match("...")) {
        return "def";
      }
      if (stream.match(/^\s*-\s+/)) {
        return "meta";
      }
    }
    if (stream.match(/^(\{|\}|\[|\])/)) {
      if (ch2 == "{")
        state.inlinePairs++;
      else if (ch2 == "}")
        state.inlinePairs--;
      else if (ch2 == "[")
        state.inlineList++;
      else
        state.inlineList--;
      return "meta";
    }
    if (state.inlineList > 0 && !esc && ch2 == ",") {
      stream.next();
      return "meta";
    }
    if (state.inlinePairs > 0 && !esc && ch2 == ",") {
      state.keyCol = 0;
      state.pair = false;
      state.pairStart = false;
      stream.next();
      return "meta";
    }
    if (state.pairStart) {
      if (stream.match(/^\s*(\||\>)\s*/)) {
        state.literal = true;
        return "meta";
      }
      ;
      if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) {
        return "variable";
      }
      if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) {
        return "number";
      }
      if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) {
        return "number";
      }
      if (stream.match(keywordRegex)) {
        return "keyword";
      }
    }
    if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
      state.pair = true;
      state.keyCol = stream.indentation();
      return "atom";
    }
    if (state.pair && stream.match(/^:\s*/)) {
      state.pairStart = true;
      return "meta";
    }
    state.pairStart = false;
    state.escaped = ch2 == "\\";
    stream.next();
    return null;
  },
  startState: function() {
    return {
      pair: false,
      pairStart: false,
      keyCol: 0,
      inlinePairs: 0,
      inlineList: 0,
      literal: false,
      escaped: false
    };
  },
  languageData: {
    commentTokens: { line: "#" }
  }
};

// ../../node_modules/@uiw/codemirror-extensions-langs/esm/index.js
init_z80();
var langs = {
  apl: () => StreamLanguage.define(apl),
  asciiArmor: () => StreamLanguage.define(asciiArmor),
  // asn1: () => StreamLanguage.define(asn1),
  asterisk: () => StreamLanguage.define(asterisk2),
  // clike: () => StreamLanguage.define(clike),
  c: () => StreamLanguage.define(c),
  csharp: () => csharp2(),
  scala: () => StreamLanguage.define(scala),
  solidity: () => solidity,
  kotlin: () => StreamLanguage.define(kotlin),
  shader: () => StreamLanguage.define(shader),
  nesC: () => StreamLanguage.define(nesC),
  objectiveC: () => StreamLanguage.define(objectiveC),
  objectiveCpp: () => StreamLanguage.define(objectiveCpp),
  squirrel: () => StreamLanguage.define(squirrel),
  ceylon: () => StreamLanguage.define(ceylon),
  dart: () => StreamLanguage.define(dart),
  cmake: () => StreamLanguage.define(cmake),
  cobol: () => StreamLanguage.define(cobol),
  commonLisp: () => StreamLanguage.define(commonLisp),
  crystal: () => StreamLanguage.define(crystal),
  cypher: () => StreamLanguage.define(cypher),
  d: () => StreamLanguage.define(d),
  diff: () => StreamLanguage.define(diff),
  dtd: () => StreamLanguage.define(dtd),
  dylan: () => StreamLanguage.define(dylan),
  ebnf: () => StreamLanguage.define(ebnf),
  ecl: () => StreamLanguage.define(ecl),
  eiffel: () => StreamLanguage.define(eiffel),
  elm: () => StreamLanguage.define(elm),
  factor: () => StreamLanguage.define(factor),
  fcl: () => StreamLanguage.define(fcl),
  forth: () => StreamLanguage.define(forth),
  fortran: () => StreamLanguage.define(fortran),
  gas: () => StreamLanguage.define(gas),
  gherkin: () => StreamLanguage.define(gherkin),
  groovy: () => StreamLanguage.define(groovy),
  haskell: () => StreamLanguage.define(haskell),
  haxe: () => StreamLanguage.define(haxe),
  http: () => StreamLanguage.define(http),
  idl: () => StreamLanguage.define(idl),
  jinja2: () => StreamLanguage.define(jinja2),
  mathematica: () => StreamLanguage.define(mathematica),
  mbox: () => StreamLanguage.define(mbox),
  mirc: () => StreamLanguage.define(mirc),
  modelica: () => StreamLanguage.define(modelica),
  mscgen: () => StreamLanguage.define(mscgen),
  mumps: () => StreamLanguage.define(mumps),
  nsis: () => StreamLanguage.define(nsis),
  ntriples: () => StreamLanguage.define(ntriples),
  octave: () => StreamLanguage.define(octave),
  oz: () => StreamLanguage.define(oz),
  pig: () => StreamLanguage.define(pig),
  properties: () => StreamLanguage.define(properties2),
  protobuf: () => StreamLanguage.define(protobuf),
  puppet: () => StreamLanguage.define(puppet),
  q: () => StreamLanguage.define(q),
  sas: () => StreamLanguage.define(sas),
  sass: () => sass(),
  liquid: () => liquid(),
  mermaid: () => mermaid(),
  nix: () => nix(),
  svelte: () => svelte(),
  sieve: () => StreamLanguage.define(sieve),
  smalltalk: () => StreamLanguage.define(smalltalk),
  solr: () => StreamLanguage.define(solr),
  sparql: () => StreamLanguage.define(sparql),
  spreadsheet: () => StreamLanguage.define(spreadsheet),
  stex: () => StreamLanguage.define(stex),
  textile: () => StreamLanguage.define(textile),
  tiddlyWiki: () => StreamLanguage.define(tiddlyWiki),
  tiki: () => StreamLanguage.define(tiki),
  troff: () => StreamLanguage.define(troff),
  ttcn: () => StreamLanguage.define(ttcn),
  turtle: () => StreamLanguage.define(turtle),
  velocity: () => StreamLanguage.define(velocity),
  verilog: () => StreamLanguage.define(verilog),
  vhdl: () => StreamLanguage.define(vhdl),
  webIDL: () => StreamLanguage.define(webIDL),
  xQuery: () => StreamLanguage.define(xQuery),
  yacas: () => StreamLanguage.define(yacas),
  z80: () => StreamLanguage.define(z80),
  wast,
  javascript,
  jsx: () => javascript({
    jsx: true
  }),
  typescript: () => javascript({
    typescript: true
  }),
  tsx: () => javascript({
    jsx: true,
    typescript: true
  }),
  vue: () => vue(),
  angular: () => angular(),
  json,
  html,
  css,
  python,
  markdown: () => markdown({
    base: markdownLanguage,
    codeLanguages: languages
  }),
  xml,
  sql,
  mysql: () => sql({
    dialect: MySQL
  }),
  pgsql: () => sql({
    dialect: PostgreSQL
  }),
  java,
  rust,
  cpp,
  // clike: () => StreamLanguage.define(clike),
  // clike: () => clike({ }),
  lezer,
  php,
  go: () => StreamLanguage.define(go2),
  shell: () => StreamLanguage.define(shell),
  lua: () => StreamLanguage.define(lua),
  swift: () => StreamLanguage.define(swift),
  tcl: () => StreamLanguage.define(tcl),
  yaml: () => StreamLanguage.define(yaml2),
  vb: () => StreamLanguage.define(vb),
  powershell: () => StreamLanguage.define(powerShell),
  brainfuck: () => StreamLanguage.define(brainfuck),
  stylus: () => StreamLanguage.define(stylus),
  erlang: () => StreamLanguage.define(erlang),
  nginx: () => StreamLanguage.define(nginx),
  perl: () => StreamLanguage.define(perl),
  ruby: () => StreamLanguage.define(ruby),
  pascal: () => StreamLanguage.define(pascal),
  livescript: () => StreamLanguage.define(liveScript),
  less: () => less(),
  scheme: () => StreamLanguage.define(scheme),
  toml: () => StreamLanguage.define(toml),
  vbscript: () => StreamLanguage.define(vbScript),
  clojure: () => clojure2(),
  coffeescript: () => StreamLanguage.define(coffeeScript),
  julia: () => StreamLanguage.define(julia),
  dockerfile: () => StreamLanguage.define(dockerFile),
  r: () => StreamLanguage.define(r)
};
var langNames = Object.keys(langs);
function loadLanguage(name2) {
  return langs[name2] ? langs[name2]() : null;
}

// ../../node_modules/@babel/runtime/helpers/esm/extends.js
function _extends2() {
  return _extends2 = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r2 in t2) ({}).hasOwnProperty.call(t2, r2) && (n[r2] = t2[r2]);
    }
    return n;
  }, _extends2.apply(null, arguments);
}

// ../../node_modules/@uiw/codemirror-theme-github/esm/index.js
init_dist4();

// ../../node_modules/@uiw/codemirror-themes/esm/index.js
init_dist3();
init_dist5();
var createTheme = (_ref) => {
  var {
    theme: theme2,
    settings = {},
    styles: styles2 = []
  } = _ref;
  var themeOptions = {
    ".cm-gutters": {}
  };
  var baseStyle = {};
  if (settings.background) {
    baseStyle.backgroundColor = settings.background;
  }
  if (settings.backgroundImage) {
    baseStyle.backgroundImage = settings.backgroundImage;
  }
  if (settings.foreground) {
    baseStyle.color = settings.foreground;
  }
  if (settings.fontSize) {
    baseStyle.fontSize = settings.fontSize;
  }
  if (settings.background || settings.foreground) {
    themeOptions["&"] = baseStyle;
  }
  if (settings.fontFamily) {
    themeOptions["&.cm-editor .cm-scroller"] = {
      fontFamily: settings.fontFamily
    };
  }
  if (settings.gutterBackground) {
    themeOptions[".cm-gutters"].backgroundColor = settings.gutterBackground;
  }
  if (settings.gutterForeground) {
    themeOptions[".cm-gutters"].color = settings.gutterForeground;
  }
  if (settings.gutterBorder) {
    themeOptions[".cm-gutters"].borderRightColor = settings.gutterBorder;
  }
  if (settings.caret) {
    themeOptions[".cm-content"] = {
      caretColor: settings.caret
    };
    themeOptions[".cm-cursor, .cm-dropCursor"] = {
      borderLeftColor: settings.caret
    };
  }
  var activeLineGutterStyle = {};
  if (settings.gutterActiveForeground) {
    activeLineGutterStyle.color = settings.gutterActiveForeground;
  }
  if (settings.lineHighlight) {
    themeOptions[".cm-activeLine"] = {
      backgroundColor: settings.lineHighlight
    };
    activeLineGutterStyle.backgroundColor = settings.lineHighlight;
  }
  themeOptions[".cm-activeLineGutter"] = activeLineGutterStyle;
  if (settings.selection) {
    themeOptions["&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection"] = {
      background: settings.selection + " !important"
    };
  }
  if (settings.selectionMatch) {
    themeOptions["& .cm-selectionMatch"] = {
      backgroundColor: settings.selectionMatch
    };
  }
  var themeExtension = EditorView.theme(themeOptions, {
    dark: theme2 === "dark"
  });
  var highlightStyle = HighlightStyle.define(styles2);
  var extension = [themeExtension, syntaxHighlighting(highlightStyle)];
  return extension;
};

// ../../node_modules/@uiw/codemirror-theme-github/esm/index.js
var defaultSettingsGithubLight = {
  background: "#fff",
  foreground: "#24292e",
  selection: "#BBDFFF",
  selectionMatch: "#BBDFFF",
  gutterBackground: "#fff",
  gutterForeground: "#6e7781"
};
var githubLightStyle = [{
  tag: [tags.standard(tags.tagName), tags.tagName],
  color: "#116329"
}, {
  tag: [tags.comment, tags.bracket],
  color: "#6a737d"
}, {
  tag: [tags.className, tags.propertyName],
  color: "#6f42c1"
}, {
  tag: [tags.variableName, tags.attributeName, tags.number, tags.operator],
  color: "#005cc5"
}, {
  tag: [tags.keyword, tags.typeName, tags.typeOperator, tags.typeName],
  color: "#d73a49"
}, {
  tag: [tags.string, tags.meta, tags.regexp],
  color: "#032f62"
}, {
  tag: [tags.name, tags.quote],
  color: "#22863a"
}, {
  tag: [tags.heading, tags.strong],
  color: "#24292e",
  fontWeight: "bold"
}, {
  tag: [tags.emphasis],
  color: "#24292e",
  fontStyle: "italic"
}, {
  tag: [tags.deleted],
  color: "#b31d28",
  backgroundColor: "ffeef0"
}, {
  tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
  color: "#e36209"
}, {
  tag: [tags.url, tags.escape, tags.regexp, tags.link],
  color: "#032f62"
}, {
  tag: tags.link,
  textDecoration: "underline"
}, {
  tag: tags.strikethrough,
  textDecoration: "line-through"
}, {
  tag: tags.invalid,
  color: "#cb2431"
}];
var githubLightInit = (options) => {
  var {
    theme: theme2 = "light",
    settings = {},
    styles: styles2 = []
  } = options || {};
  return createTheme({
    theme: theme2,
    settings: _extends2({}, defaultSettingsGithubLight, settings),
    styles: [...githubLightStyle, ...styles2]
  });
};
var githubLight = githubLightInit();
var defaultSettingsGithubDark = {
  background: "#0d1117",
  foreground: "#c9d1d9",
  caret: "#c9d1d9",
  selection: "#003d73",
  selectionMatch: "#003d73",
  lineHighlight: "#36334280"
};
var githubDarkStyle = [{
  tag: [tags.standard(tags.tagName), tags.tagName],
  color: "#7ee787"
}, {
  tag: [tags.comment, tags.bracket],
  color: "#8b949e"
}, {
  tag: [tags.className, tags.propertyName],
  color: "#d2a8ff"
}, {
  tag: [tags.variableName, tags.attributeName, tags.number, tags.operator],
  color: "#79c0ff"
}, {
  tag: [tags.keyword, tags.typeName, tags.typeOperator, tags.typeName],
  color: "#ff7b72"
}, {
  tag: [tags.string, tags.meta, tags.regexp],
  color: "#a5d6ff"
}, {
  tag: [tags.name, tags.quote],
  color: "#7ee787"
}, {
  tag: [tags.heading, tags.strong],
  color: "#d2a8ff",
  fontWeight: "bold"
}, {
  tag: [tags.emphasis],
  color: "#d2a8ff",
  fontStyle: "italic"
}, {
  tag: [tags.deleted],
  color: "#ffdcd7",
  backgroundColor: "ffeef0"
}, {
  tag: [tags.atom, tags.bool, tags.special(tags.variableName)],
  color: "#ffab70"
}, {
  tag: tags.link,
  textDecoration: "underline"
}, {
  tag: tags.strikethrough,
  textDecoration: "line-through"
}, {
  tag: tags.invalid,
  color: "#f97583"
}];
var githubDarkInit = (options) => {
  var {
    theme: theme2 = "dark",
    settings = {},
    styles: styles2 = []
  } = options || {};
  return createTheme({
    theme: theme2,
    settings: _extends2({}, defaultSettingsGithubDark, settings),
    styles: [...githubDarkStyle, ...styles2]
  });
};
var githubDark = githubDarkInit();

// ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(r2, e) {
  if (null == r2) return {};
  var t2 = {};
  for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t2[n] = r2[n];
  }
  return t2;
}

// ../../node_modules/@uiw/react-codemirror/esm/index.js
var import_react4 = __toESM(require("react"), 1);

// ../../node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
var import_react3 = require("react");
init_dist2();
init_dist3();

// ../../node_modules/@codemirror/commands/dist/index.js
init_dist2();
init_dist3();
init_dist5();
init_dist();
var toggleComment = (target) => {
  let { state } = target, line = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line.from);
  return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
};
function command2(f, option2) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let tr = f(option2, state);
    if (!tr)
      return false;
    dispatch(state.update(tr));
    return true;
  };
}
var toggleLineComment = /* @__PURE__ */ command2(
  changeLineComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockComment = /* @__PURE__ */ command2(
  changeBlockComment,
  0
  /* CommentOption.Toggle */
);
var toggleBlockCommentByLine = /* @__PURE__ */ command2(
  (o, s) => changeBlockComment(o, s, selectedLineRanges(s)),
  0
  /* CommentOption.Toggle */
);
function getConfig(state, pos) {
  let data2 = state.languageDataAt("commentTokens", pos, 1);
  return data2.length ? data2[0] : {};
}
var SearchMargin = 50;
function findBlockComment(state, { open, close }, from3, to) {
  let textBefore = state.sliceDoc(from3 - SearchMargin, from3);
  let textAfter = state.sliceDoc(to, to + SearchMargin);
  let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
  let beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: { pos: from3 - spaceBefore, margin: spaceBefore && 1 },
      close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
    };
  }
  let startText, endText;
  if (to - from3 <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from3, to);
  } else {
    startText = state.sliceDoc(from3, from3 + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
  let endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from3 + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
function selectedLineRanges(state) {
  let ranges = [];
  for (let r2 of state.selection.ranges) {
    let fromLine = state.doc.lineAt(r2.from);
    let toLine = r2.to <= fromLine.to ? fromLine : state.doc.lineAt(r2.to);
    if (toLine.from > fromLine.from && toLine.from == r2.to)
      toLine = r2.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r2.to - 1);
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last].to > fromLine.from)
      ranges[last].to = toLine.to;
    else
      ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
  }
  return ranges;
}
function changeBlockComment(option2, state, ranges = state.selection.ranges) {
  let tokens2 = ranges.map((r2) => getConfig(state, r2.from).block);
  if (!tokens2.every((c2) => c2))
    return null;
  let comments2 = ranges.map((r2, i) => findBlockComment(state, tokens2[i], r2.from, r2.to));
  if (option2 != 2 && !comments2.every((c2) => c2)) {
    return { changes: state.changes(ranges.map((range, i) => {
      if (comments2[i])
        return [];
      return [{ from: range.from, insert: tokens2[i].open + " " }, { from: range.to, insert: " " + tokens2[i].close }];
    })) };
  } else if (option2 != 1 && comments2.some((c2) => c2)) {
    let changes = [];
    for (let i = 0, comment4; i < comments2.length; i++)
      if (comment4 = comments2[i]) {
        let token = tokens2[i], { open, close } = comment4;
        changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
      }
    return { changes };
  }
  return null;
}
function changeLineComment(option2, state, ranges = state.selection.ranges) {
  let lines = [];
  let prevLine = -1;
  for (let { from: from3, to } of ranges) {
    let startI = lines.length, minIndent = 1e9;
    let token = getConfig(state, from3).line;
    if (!token)
      continue;
    for (let pos = from3; pos <= to; ) {
      let line = state.doc.lineAt(pos);
      if (line.from > prevLine && (from3 == to || to > line.from)) {
        prevLine = line.from;
        let indent7 = /^\s*/.exec(line.text)[0].length;
        let empty2 = indent7 == line.length;
        let comment4 = line.text.slice(indent7, indent7 + token.length) == token ? indent7 : -1;
        if (indent7 < line.text.length && indent7 < minIndent)
          minIndent = indent7;
        lines.push({ line, comment: comment4, token, indent: indent7, empty: empty2, single: false });
      }
      pos = line.to + 1;
    }
    if (minIndent < 1e9) {
      for (let i = startI; i < lines.length; i++)
        if (lines[i].indent < lines[i].line.text.length)
          lines[i].indent = minIndent;
    }
    if (lines.length == startI + 1)
      lines[startI].single = true;
  }
  if (option2 != 2 && lines.some((l) => l.comment < 0 && (!l.empty || l.single))) {
    let changes = [];
    for (let { line, token, indent: indent7, empty: empty2, single } of lines)
      if (single || !empty2)
        changes.push({ from: line.from + indent7, insert: token + " " });
    let changeSet = state.changes(changes);
    return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
  } else if (option2 != 1 && lines.some((l) => l.comment >= 0)) {
    let changes = [];
    for (let { line, comment: comment4, token } of lines)
      if (comment4 >= 0) {
        let from3 = line.from + comment4, to = from3 + token.length;
        if (line.text[to - line.from] == " ")
          to++;
        changes.push({ from: from3, to });
      }
    return { changes };
  }
  return null;
}
var fromHistory = /* @__PURE__ */ Annotation.define();
var isolateHistory = /* @__PURE__ */ Annotation.define();
var invertedEffects = /* @__PURE__ */ Facet.define();
var historyConfig = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      minDepth: 100,
      newGroupDelay: 500,
      joinToEvent: (_t, isAdjacent2) => isAdjacent2
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min,
      joinToEvent: (a2, b) => (tr, adj) => a2(tr, adj) || b(tr, adj)
    });
  }
});
var historyField_ = /* @__PURE__ */ StateField.define({
  create() {
    return HistoryState.empty;
  },
  update(state, tr) {
    let config2 = tr.state.facet(historyConfig);
    let fromHist = tr.annotation(fromHistory);
    if (fromHist) {
      let item = HistEvent.fromTransaction(tr, fromHist.selection), from3 = fromHist.side;
      let other = from3 == 0 ? state.undone : state.done;
      if (item)
        other = updateBranch(other, other.length, config2.minDepth, item);
      else
        other = addSelection(other, tr.startState.selection);
      return new HistoryState(from3 == 0 ? fromHist.rest : other, from3 == 0 ? other : fromHist.rest);
    }
    let isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before")
      state = state.isolate();
    if (tr.annotation(Transaction.addToHistory) === false)
      return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    let event = HistEvent.fromTransaction(tr);
    let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
    if (event)
      state = state.addChanges(event, time, userEvent, config2, tr);
    else if (tr.selection)
      state = state.addSelection(tr.startState.selection, time, userEvent, config2.newGroupDelay);
    if (isolate == "full" || isolate == "after")
      state = state.isolate();
    return state;
  },
  toJSON(value) {
    return { done: value.done.map((e) => e.toJSON()), undone: value.undone.map((e) => e.toJSON()) };
  },
  fromJSON(json3) {
    return new HistoryState(json3.done.map(HistEvent.fromJSON), json3.undone.map(HistEvent.fromJSON));
  }
});
function history(config2 = {}) {
  return [
    historyField_,
    historyConfig.of(config2),
    EditorView.domEventHandlers({
      beforeinput(e, view) {
        let command3 = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
        if (!command3)
          return false;
        e.preventDefault();
        return command3(view);
      }
    })
  ];
}
function cmd(side, selection2) {
  return function({ state, dispatch }) {
    if (!selection2 && state.readOnly)
      return false;
    let historyState = state.field(historyField_, false);
    if (!historyState)
      return false;
    let tr = historyState.pop(side, state, selection2);
    if (!tr)
      return false;
    dispatch(tr);
    return true;
  };
}
var undo = /* @__PURE__ */ cmd(0, false);
var redo = /* @__PURE__ */ cmd(1, false);
var undoSelection = /* @__PURE__ */ cmd(0, true);
var redoSelection = /* @__PURE__ */ cmd(1, true);
var HistEvent = class _HistEvent {
  constructor(changes, effects, mapped, startSelection, selectionsAfter) {
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  setSelAfter(after) {
    return new _HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
  }
  toJSON() {
    var _a2, _b2, _c;
    return {
      changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
      mapped: (_b2 = this.mapped) === null || _b2 === void 0 ? void 0 : _b2.toJSON(),
      startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
      selectionsAfter: this.selectionsAfter.map((s) => s.toJSON())
    };
  }
  static fromJSON(json3) {
    return new _HistEvent(json3.changes && ChangeSet.fromJSON(json3.changes), [], json3.mapped && ChangeDesc.fromJSON(json3.mapped), json3.startSelection && EditorSelection.fromJSON(json3.startSelection), json3.selectionsAfter.map(EditorSelection.fromJSON));
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(tr, selection2) {
    let effects = none4;
    for (let invert of tr.startState.facet(invertedEffects)) {
      let result = invert(tr);
      if (result.length)
        effects = effects.concat(result);
    }
    if (!effects.length && tr.changes.empty)
      return null;
    return new _HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection2 || tr.startState.selection, none4);
  }
  static selection(selections) {
    return new _HistEvent(void 0, none4, void 0, void 0, selections);
  }
};
function updateBranch(branch, to, maxLen, newEvent) {
  let start2 = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  let newBranch = branch.slice(start2, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a2, b) {
  let ranges = [], isAdjacent2 = false;
  a2.iterChangedRanges((f, t2) => ranges.push(f, t2));
  b.iterChangedRanges((_f2, _t, f, t2) => {
    for (let i = 0; i < ranges.length; ) {
      let from3 = ranges[i++], to = ranges[i++];
      if (t2 >= from3 && f <= to)
        isAdjacent2 = true;
    }
  });
  return isAdjacent2;
}
function eqSelectionShape(a2, b) {
  return a2.ranges.length == b.ranges.length && a2.ranges.filter((r2, i) => r2.empty != b.ranges[i].empty).length === 0;
}
function conc(a2, b) {
  return !a2.length ? b : !b.length ? a2 : a2.concat(b);
}
var none4 = [];
var MaxSelectionsPerEvent = 200;
function addSelection(branch, selection2) {
  if (!branch.length) {
    return [HistEvent.selection([selection2])];
  } else {
    let lastEvent = branch[branch.length - 1];
    let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection2))
      return branch;
    sels.push(selection2);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
function popSelection(branch) {
  let last = branch[branch.length - 1];
  let newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
function addMappingToBranch(branch, mapping) {
  if (!branch.length)
    return branch;
  let length = branch.length, selections = none4;
  while (length) {
    let event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      let result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none4;
}
function mapEvent(event, mapping, extraSelections) {
  let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s) => s.map(mapping)) : none4, extraSelections);
  if (!event.changes)
    return HistEvent.selection(selections);
  let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
  let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var joinableUserEvent = /^(input\.type|delete)($|\.)/;
var HistoryState = class _HistoryState {
  constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  isolate() {
    return this.prevTime ? new _HistoryState(this.done, this.undone) : this;
  }
  addChanges(event, time, userEvent, config2, tr) {
    let done = this.done, lastEvent = done[done.length - 1];
    if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
    userEvent == "input.type.compose")) {
      done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none4));
    } else {
      done = updateBranch(done, done.length, config2.minDepth, event);
    }
    return new _HistoryState(done, none4, time, userEvent);
  }
  addSelection(selection2, time, userEvent, newGroupDelay) {
    let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none4;
    if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection2))
      return this;
    return new _HistoryState(addSelection(this.done, selection2), this.undone, time, userEvent);
  }
  addMapping(mapping) {
    return new _HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
  }
  pop(side, state, onlySelection) {
    let branch = side == 0 ? this.done : this.undone;
    if (branch.length == 0)
      return null;
    let event = branch[branch.length - 1], selection2 = event.selectionsAfter[0] || state.selection;
    if (onlySelection && event.selectionsAfter.length) {
      return state.update({
        selection: event.selectionsAfter[event.selectionsAfter.length - 1],
        annotations: fromHistory.of({ side, rest: popSelection(branch), selection: selection2 }),
        userEvent: side == 0 ? "select.undo" : "select.redo",
        scrollIntoView: true
      });
    } else if (!event.changes) {
      return null;
    } else {
      let rest = branch.length == 1 ? none4 : branch.slice(0, branch.length - 1);
      if (event.mapped)
        rest = addMappingToBranch(rest, event.mapped);
      return state.update({
        changes: event.changes,
        selection: event.startSelection,
        effects: event.effects,
        annotations: fromHistory.of({ side, rest, selection: selection2 }),
        filter: false,
        userEvent: side == 0 ? "undo" : "redo",
        scrollIntoView: true
      });
    }
  }
};
HistoryState.empty = /* @__PURE__ */ new HistoryState(none4, none4);
var historyKeymap = [
  { key: "Mod-z", run: undo, preventDefault: true },
  { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
  { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
  { key: "Mod-u", run: undoSelection, preventDefault: true },
  { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
];
function updateSel(sel, by) {
  return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection2) {
  return state.update({ selection: selection2, scrollIntoView: true, userEvent: "select" });
}
function moveSel({ state, dispatch }, how) {
  let selection2 = updateSel(state.selection, how);
  if (selection2.eq(state.selection, true))
    return false;
  dispatch(setSel(state, selection2));
  return true;
}
function rangeEnd(range, forward) {
  return EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
}
function ltrAtCursor(view) {
  return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
}
var cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
var cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
function cursorByGroup(view, forward) {
  return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
}
var cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
var cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
var segmenter = typeof Intl != "undefined" && Intl.Segmenter ? /* @__PURE__ */ new Intl.Segmenter(void 0, { granularity: "word" }) : null;
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp))
    return true;
  let len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start2, forward) {
  let pos = syntaxTree(state).resolveInner(start2.head);
  let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
  for (let at2 = start2.head; ; ) {
    let next2 = forward ? pos.childAfter(at2) : pos.childBefore(at2);
    if (!next2)
      break;
    if (interestingNode(state, next2, bracketProp))
      pos = next2;
    else
      at2 = forward ? next2.to : next2.from;
  }
  let bracket2 = pos.type.prop(bracketProp), match2, newPos;
  if (bracket2 && (match2 = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match2.matched)
    newPos = forward ? match2.end.to : match2.end.from;
  else
    newPos = forward ? pos.to : pos.from;
  return EditorSelection.cursor(newPos, forward ? -1 : 1);
}
var cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function cursorByLine(view, forward) {
  return moveSel(view, (range) => {
    if (!range.empty)
      return rangeEnd(range, forward);
    let moved = view.moveVertically(range, forward);
    return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
  });
}
var cursorLineUp = (view) => cursorByLine(view, false);
var cursorLineDown = (view) => cursorByLine(view, true);
function pageInfo(view) {
  let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
  let marginTop = 0, marginBottom = 0, height;
  if (selfScroll) {
    for (let source of view.state.facet(EditorView.scrollMargins)) {
      let margins = source(view);
      if (margins === null || margins === void 0 ? void 0 : margins.top)
        marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
      if (margins === null || margins === void 0 ? void 0 : margins.bottom)
        marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
    }
    height = view.scrollDOM.clientHeight - marginTop - marginBottom;
  } else {
    height = (view.dom.ownerDocument.defaultView || window).innerHeight;
  }
  return {
    marginTop,
    marginBottom,
    selfScroll,
    height: Math.max(view.defaultLineHeight, height - 5)
  };
}
function cursorByPage(view, forward) {
  let page = pageInfo(view);
  let { state } = view, selection2 = updateSel(state.selection, (range) => {
    return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
  });
  if (selection2.eq(state.selection))
    return false;
  let effect;
  if (page.selfScroll) {
    let startPos = view.coordsAtPos(state.selection.main.head);
    let scrollRect = view.scrollDOM.getBoundingClientRect();
    let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
    if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
      effect = EditorView.scrollIntoView(selection2.main.head, { y: "start", yMargin: startPos.top - scrollTop });
  }
  view.dispatch(setSel(state, selection2), { effects: effect });
  return true;
}
var cursorPageUp = (view) => cursorByPage(view, false);
var cursorPageDown = (view) => cursorByPage(view, true);
function moveByLineBoundary(view, start2, forward) {
  let line = view.lineBlockAt(start2.head), moved = view.moveToLineBoundary(start2, forward);
  if (moved.head == start2.head && moved.head != (forward ? line.to : line.from))
    moved = view.moveToLineBoundary(start2, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    let space10 = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space10 && start2.head != line.from + space10)
      moved = EditorSelection.cursor(line.from + space10);
  }
  return moved;
}
var cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
var cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
var cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
var cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
function toMatchingBracket(state, dispatch, extend) {
  let found = false, selection2 = updateSel(state.selection, (range) => {
    let matching2 = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
    if (!matching2 || !matching2.end)
      return range;
    found = true;
    let head = matching2.start.from == range.head ? matching2.end.to : matching2.end.from;
    return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
  });
  if (!found)
    return false;
  dispatch(setSel(state, selection2));
  return true;
}
var cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
function extendSel(target, how) {
  let selection2 = updateSel(target.state.selection, (range) => {
    let head = how(range);
    return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
  });
  if (selection2.eq(target.state.selection))
    return false;
  target.dispatch(setSel(target.state, selection2));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, (range) => view.moveByChar(range, forward));
}
var selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
var selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
function selectByGroup(view, forward) {
  return extendSel(view, (range) => view.moveByGroup(range, forward));
}
var selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
var selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
var selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
var selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
function selectByLine(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward));
}
var selectLineUp = (view) => selectByLine(view, false);
var selectLineDown = (view) => selectByLine(view, true);
function selectByPage(view, forward) {
  return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
}
var selectPageUp = (view) => selectByPage(view, false);
var selectPageDown = (view) => selectByPage(view, true);
var selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
var selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
var selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
var selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
var selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
var selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
var cursorDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: 0 }));
  return true;
};
var cursorDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.doc.length }));
  return true;
};
var selectDocStart = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
  return true;
};
var selectDocEnd = ({ state, dispatch }) => {
  dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
  return true;
};
var selectAll = ({ state, dispatch }) => {
  dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
  return true;
};
var selectLine = ({ state, dispatch }) => {
  let ranges = selectedLineBlocks(state).map(({ from: from3, to }) => EditorSelection.range(from3, Math.min(to + 1, state.doc.length)));
  dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
  return true;
};
var selectParentSyntax = ({ state, dispatch }) => {
  let selection2 = updateSel(state.selection, (range) => {
    let tree = syntaxTree(state), stack = tree.resolveStack(range.from, 1);
    if (range.empty) {
      let stackBefore = tree.resolveStack(range.from, -1);
      if (stackBefore.node.from >= stack.node.from && stackBefore.node.to <= stack.node.to)
        stack = stackBefore;
    }
    for (let cur2 = stack; cur2; cur2 = cur2.next) {
      let { node } = cur2;
      if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && cur2.next)
        return EditorSelection.range(node.to, node.from);
    }
    return range;
  });
  if (selection2.eq(state.selection))
    return false;
  dispatch(setSel(state, selection2));
  return true;
};
var simplifySelection = ({ state, dispatch }) => {
  let cur2 = state.selection, selection2 = null;
  if (cur2.ranges.length > 1)
    selection2 = EditorSelection.create([cur2.main]);
  else if (!cur2.main.empty)
    selection2 = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
  if (!selection2)
    return false;
  dispatch(setSel(state, selection2));
  return true;
};
function deleteBy(target, by) {
  if (target.state.readOnly)
    return false;
  let event = "delete.selection", { state } = target;
  let changes = state.changeByRange((range) => {
    let { from: from3, to } = range;
    if (from3 == to) {
      let towards = by(range);
      if (towards < from3) {
        event = "delete.backward";
        towards = skipAtomic(target, towards, false);
      } else if (towards > from3) {
        event = "delete.forward";
        towards = skipAtomic(target, towards, true);
      }
      from3 = Math.min(from3, towards);
      to = Math.max(to, towards);
    } else {
      from3 = skipAtomic(target, from3, false);
      to = skipAtomic(target, to, true);
    }
    return from3 == to ? { range } : { changes: { from: from3, to }, range: EditorSelection.cursor(from3, from3 < range.head ? -1 : 1) };
  });
  if (changes.changes.empty)
    return false;
  target.dispatch(state.update(changes, {
    scrollIntoView: true,
    userEvent: event,
    effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
  }));
  return true;
}
function skipAtomic(target, pos, forward) {
  if (target instanceof EditorView)
    for (let ranges of target.state.facet(EditorView.atomicRanges).map((f) => f(target)))
      ranges.between(pos, pos, (from3, to) => {
        if (from3 < pos && to > pos)
          pos = forward ? to : from3;
      });
  return pos;
}
var deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
  let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
  if (byIndentUnit && !forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
    if (before[before.length - 1] == "	")
      return pos - 1;
    let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
    for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
      pos--;
    targetPos = pos;
  } else {
    targetPos = findClusterBreak2(line.text, pos - line.from, forward, forward) + line.from;
    if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
      targetPos += forward ? 1 : -1;
    else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
      targetPos = findClusterBreak2(line.text, targetPos - line.from, false, false) + line.from;
  }
  return targetPos;
});
var deleteCharBackward = (view) => deleteByChar(view, false, true);
var deleteCharForward = (view) => deleteByChar(view, true, false);
var deleteByGroup = (target, forward) => deleteBy(target, (range) => {
  let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
  let categorize = state.charCategorizer(pos);
  for (let cat = null; ; ) {
    if (pos == (forward ? line.to : line.from)) {
      if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
        pos += forward ? 1 : -1;
      break;
    }
    let next2 = findClusterBreak2(line.text, pos - line.from, forward) + line.from;
    let nextChar2 = line.text.slice(Math.min(pos, next2) - line.from, Math.max(pos, next2) - line.from);
    let nextCat = categorize(nextChar2);
    if (cat != null && nextCat != cat)
      break;
    if (nextChar2 != " " || pos != range.head)
      cat = nextCat;
    pos = next2;
  }
  return pos;
});
var deleteGroupBackward = (target) => deleteByGroup(target, false);
var deleteGroupForward = (target) => deleteByGroup(target, true);
var deleteToLineEnd = (view) => deleteBy(view, (range) => {
  let lineEnd2 = view.lineBlockAt(range.head).to;
  return range.head < lineEnd2 ? lineEnd2 : Math.min(view.state.doc.length, range.head + 1);
});
var deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, false).head;
  return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
});
var deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
  let lineStart = view.moveToLineBoundary(range, true).head;
  return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
});
var splitLine = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    return {
      changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
      range: EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
  return true;
};
var transposeChars = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let changes = state.changeByRange((range) => {
    if (!range.empty || range.from == 0 || range.from == state.doc.length)
      return { range };
    let pos = range.from, line = state.doc.lineAt(pos);
    let from3 = pos == line.from ? pos - 1 : findClusterBreak2(line.text, pos - line.from, false) + line.from;
    let to = pos == line.to ? pos + 1 : findClusterBreak2(line.text, pos - line.from, true) + line.from;
    return {
      changes: { from: from3, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from3, pos)) },
      range: EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty)
    return false;
  dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
  return true;
};
function selectedLineBlocks(state) {
  let blocks = [], upto = -1;
  for (let range of state.selection.ranges) {
    let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
    if (!range.empty && range.to == endLine.from)
      endLine = state.doc.lineAt(range.to - 1);
    if (upto >= startLine.number) {
      let prev = blocks[blocks.length - 1];
      prev.to = endLine.to;
      prev.ranges.push(range);
    } else {
      blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
    }
    upto = endLine.number + 1;
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [], ranges = [];
  for (let block3 of selectedLineBlocks(state)) {
    if (forward ? block3.to == state.doc.length : block3.from == 0)
      continue;
    let nextLine = state.doc.lineAt(forward ? block3.to + 1 : block3.from - 1);
    let size = nextLine.length + 1;
    if (forward) {
      changes.push({ from: block3.to, to: nextLine.to }, { from: block3.from, insert: nextLine.text + state.lineBreak });
      for (let r2 of block3.ranges)
        ranges.push(EditorSelection.range(Math.min(state.doc.length, r2.anchor + size), Math.min(state.doc.length, r2.head + size)));
    } else {
      changes.push({ from: nextLine.from, to: block3.from }, { from: block3.to, insert: state.lineBreak + nextLine.text });
      for (let r2 of block3.ranges)
        ranges.push(EditorSelection.range(r2.anchor - size, r2.head - size));
    }
  }
  if (!changes.length)
    return false;
  dispatch(state.update({
    changes,
    scrollIntoView: true,
    selection: EditorSelection.create(ranges, state.selection.mainIndex),
    userEvent: "move.line"
  }));
  return true;
}
var moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
var moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
function copyLine(state, dispatch, forward) {
  if (state.readOnly)
    return false;
  let changes = [];
  for (let block3 of selectedLineBlocks(state)) {
    if (forward)
      changes.push({ from: block3.from, insert: state.doc.slice(block3.from, block3.to) + state.lineBreak });
    else
      changes.push({ from: block3.to, insert: state.lineBreak + state.doc.slice(block3.from, block3.to) });
  }
  dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
  return true;
}
var copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
var copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
var deleteLine = (view) => {
  if (view.state.readOnly)
    return false;
  let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from: from3, to }) => {
    if (from3 > 0)
      from3--;
    else if (to < state.doc.length)
      to++;
    return { from: from3, to };
  }));
  let selection2 = updateSel(state.selection, (range) => {
    let dist2 = void 0;
    if (view.lineWrapping) {
      let block3 = view.lineBlockAt(range.head), pos = view.coordsAtPos(range.head, range.assoc || 1);
      if (pos)
        dist2 = block3.bottom + view.documentTop - pos.bottom + view.defaultLineHeight / 2;
    }
    return view.moveVertically(range, true, dist2);
  }).map(changes);
  view.dispatch({ changes, selection: selection2, scrollIntoView: true, userEvent: "delete.line" });
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
    return { from: pos, to: pos };
  let context = syntaxTree(state).resolveInner(pos);
  let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
    return { from: before.to, to: after.from };
  return null;
}
var insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
var insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
function newlineAndIndent(atEof) {
  return ({ state, dispatch }) => {
    if (state.readOnly)
      return false;
    let changes = state.changeByRange((range) => {
      let { from: from3, to } = range, line = state.doc.lineAt(from3);
      let explode = !atEof && from3 == to && isBetweenBrackets(state, from3);
      if (atEof)
        from3 = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
      let cx2 = new IndentContext(state, { simulateBreak: from3, simulateDoubleBreak: !!explode });
      let indent7 = getIndentation(cx2, from3);
      if (indent7 == null)
        indent7 = countColumn(/^\s*/.exec(state.doc.lineAt(from3).text)[0], state.tabSize);
      while (to < line.to && /\s/.test(line.text[to - line.from]))
        to++;
      if (explode)
        ({ from: from3, to } = explode);
      else if (from3 > line.from && from3 < line.from + 100 && !/\S/.test(line.text.slice(0, from3)))
        from3 = line.from;
      let insert2 = ["", indentString(state, indent7)];
      if (explode)
        insert2.push(indentString(state, cx2.lineIndent(line.from, -1)));
      return {
        changes: { from: from3, to, insert: Text.of(insert2) },
        range: EditorSelection.cursor(from3 + 1 + insert2[1].length)
      };
    });
    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
    return true;
  };
}
function changeBySelectedLine(state, f) {
  let atLine = -1;
  return state.changeByRange((range) => {
    let changes = [];
    for (let pos = range.from; pos <= range.to; ) {
      let line = state.doc.lineAt(pos);
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f(line, changes, range);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    let changeSet = state.changes(changes);
    return {
      changes,
      range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
var indentSelection = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  let updated = /* @__PURE__ */ Object.create(null);
  let context = new IndentContext(state, { overrideIndentation: (start2) => {
    let found = updated[start2];
    return found == null ? -1 : found;
  } });
  let changes = changeBySelectedLine(state, (line, changes2, range) => {
    let indent7 = getIndentation(context, line.from);
    if (indent7 == null)
      return;
    if (!/\S/.test(line.text))
      indent7 = 0;
    let cur2 = /^\s*/.exec(line.text)[0];
    let norm = indentString(state, indent7);
    if (cur2 != norm || range.from < line.from + cur2.length) {
      updated[line.from] = indent7;
      changes2.push({ from: line.from, to: line.from + cur2.length, insert: norm });
    }
  });
  if (!changes.changes.empty)
    dispatch(state.update(changes, { userEvent: "indent" }));
  return true;
};
var indentMore = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    changes.push({ from: line.from, insert: state.facet(indentUnit) });
  }), { userEvent: "input.indent" }));
  return true;
};
var indentLess = ({ state, dispatch }) => {
  if (state.readOnly)
    return false;
  dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
    let space10 = /^\s*/.exec(line.text)[0];
    if (!space10)
      return;
    let col = countColumn(space10, state.tabSize), keep = 0;
    let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
    while (keep < space10.length && keep < insert2.length && space10.charCodeAt(keep) == insert2.charCodeAt(keep))
      keep++;
    changes.push({ from: line.from + keep, to: line.from + space10.length, insert: insert2.slice(keep) });
  }), { userEvent: "delete.dedent" }));
  return true;
};
var toggleTabFocusMode = (view) => {
  view.setTabFocusMode();
  return true;
};
var emacsStyleKeymap = [
  { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
  { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
  { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
  { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
  { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
  { key: "Ctrl-d", run: deleteCharForward },
  { key: "Ctrl-h", run: deleteCharBackward },
  { key: "Ctrl-k", run: deleteToLineEnd },
  { key: "Ctrl-Alt-h", run: deleteGroupBackward },
  { key: "Ctrl-o", run: splitLine },
  { key: "Ctrl-t", run: transposeChars },
  { key: "Ctrl-v", run: cursorPageDown }
];
var standardKeymap = /* @__PURE__ */ [
  { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
  { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
  { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
  { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
  { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
  { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
  { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
  { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
  { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
  { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
  { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
  { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
  { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
  { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
  { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
  { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
  { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
  { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
  { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
  { key: "Mod-a", run: selectAll },
  { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
  { key: "Delete", run: deleteCharForward },
  { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
  { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
  { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
  { mac: "Mod-Delete", run: deleteLineBoundaryForward }
].concat(/* @__PURE__ */ emacsStyleKeymap.map((b) => ({ mac: b.key, run: b.run, shift: b.shift })));
var defaultKeymap = /* @__PURE__ */ [
  { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
  { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
  { key: "Alt-ArrowUp", run: moveLineUp },
  { key: "Shift-Alt-ArrowUp", run: copyLineUp },
  { key: "Alt-ArrowDown", run: moveLineDown },
  { key: "Shift-Alt-ArrowDown", run: copyLineDown },
  { key: "Escape", run: simplifySelection },
  { key: "Mod-Enter", run: insertBlankLine },
  { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
  { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
  { key: "Mod-[", run: indentLess },
  { key: "Mod-]", run: indentMore },
  { key: "Mod-Alt-\\", run: indentSelection },
  { key: "Shift-Mod-k", run: deleteLine },
  { key: "Shift-Mod-\\", run: cursorMatchingBracket },
  { key: "Mod-/", run: toggleComment },
  { key: "Alt-A", run: toggleBlockComment },
  { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
].concat(standardKeymap);
var indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

// ../../node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js
init_dist3();
init_dist2();

// ../../node_modules/@codemirror/search/dist/index.js
init_dist3();
init_dist2();

// ../../node_modules/crelt/index.js
function crelt() {
  var elt2 = arguments[0];
  if (typeof elt2 == "string") elt2 = document.createElement(elt2);
  var i = 1, next2 = arguments[1];
  if (next2 && typeof next2 == "object" && next2.nodeType == null && !Array.isArray(next2)) {
    for (var name2 in next2) if (Object.prototype.hasOwnProperty.call(next2, name2)) {
      var value = next2[name2];
      if (typeof value == "string") elt2.setAttribute(name2, value);
      else if (value != null) elt2[name2] = value;
    }
    i++;
  }
  for (; i < arguments.length; i++) add2(elt2, arguments[i]);
  return elt2;
}
function add2(elt2, child) {
  if (typeof child == "string") {
    elt2.appendChild(document.createTextNode(child));
  } else if (child == null) {
  } else if (child.nodeType != null) {
    elt2.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++) add2(elt2, child[i]);
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

// ../../node_modules/@codemirror/search/dist/index.js
var basicNormalize = typeof String.prototype.normalize == "function" ? (x) => x.normalize("NFKD") : (x) => x;
var SearchCursor = class {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(text5, query, from3 = 0, to = text5.length, normalize, test) {
    this.test = test;
    this.value = { from: 0, to: 0 };
    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text5.iterRange(from3, to);
    this.bufferStart = from3;
    this.normalize = normalize ? (x) => normalize(basicNormalize(x)) : basicNormalize;
    this.query = this.normalize(query);
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      this.bufferStart += this.buffer.length;
      this.iter.next();
      if (this.iter.done)
        return -1;
      this.bufferPos = 0;
      this.buffer = this.iter.value;
    }
    return codePointAt2(this.buffer, this.bufferPos);
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    while (this.matches.length)
      this.matches.pop();
    return this.nextOverlapping();
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (; ; ) {
      let next2 = this.peek();
      if (next2 < 0) {
        this.done = true;
        return this;
      }
      let str = fromCodePoint(next2), start2 = this.bufferStart + this.bufferPos;
      this.bufferPos += codePointSize2(next2);
      let norm = this.normalize(str);
      if (norm.length)
        for (let i = 0, pos = start2; ; i++) {
          let code2 = norm.charCodeAt(i);
          let match2 = this.match(code2, pos, this.bufferPos + this.bufferStart);
          if (i == norm.length - 1) {
            if (match2) {
              this.value = match2;
              return this;
            }
            break;
          }
          if (pos == start2 && i < str.length && str.charCodeAt(i) == code2)
            pos++;
        }
    }
  }
  match(code2, pos, end2) {
    let match2 = null;
    for (let i = 0; i < this.matches.length; i += 2) {
      let index = this.matches[i], keep = false;
      if (this.query.charCodeAt(index) == code2) {
        if (index == this.query.length - 1) {
          match2 = { from: this.matches[i + 1], to: end2 };
        } else {
          this.matches[i]++;
          keep = true;
        }
      }
      if (!keep) {
        this.matches.splice(i, 2);
        i -= 2;
      }
    }
    if (this.query.charCodeAt(0) == code2) {
      if (this.query.length == 1)
        match2 = { from: pos, to: end2 };
      else
        this.matches.push(1, pos);
    }
    if (match2 && this.test && !this.test(match2.from, match2.to, this.buffer, this.bufferStart))
      match2 = null;
    return match2;
  }
};
if (typeof Symbol != "undefined")
  SearchCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
var empty = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec("") };
var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
var RegExpCursor = class {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(text5, query, options, from3 = 0, to = text5.length) {
    this.text = text5;
    this.to = to;
    this.curLine = "";
    this.done = false;
    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
      return new MultilineRegExpCursor(text5, query, options, from3, to);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.iter = text5.iter();
    let startLine = text5.lineAt(from3);
    this.curLineStart = startLine.from;
    this.matchPos = toCharEnd(text5, from3);
    this.getLine(this.curLineStart);
  }
  getLine(skip) {
    this.iter.next(skip);
    if (this.iter.lineBreak) {
      this.curLine = "";
    } else {
      this.curLine = this.iter.value;
      if (this.curLineStart + this.curLine.length > this.to)
        this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
      this.iter.next();
    }
  }
  nextLine() {
    this.curLineStart = this.curLineStart + this.curLine.length + 1;
    if (this.curLineStart > this.to)
      this.curLine = "";
    else
      this.getLine(0);
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let off = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = off;
      let match2 = this.matchPos <= this.to && this.re.exec(this.curLine);
      if (match2) {
        let from3 = this.curLineStart + match2.index, to = from3 + match2[0].length;
        this.matchPos = toCharEnd(this.text, to + (from3 == to ? 1 : 0));
        if (from3 == this.curLineStart + this.curLine.length)
          this.nextLine();
        if ((from3 < to || from3 > this.value.to) && (!this.test || this.test(from3, to, match2))) {
          this.value = { from: from3, to, match: match2 };
          return this;
        }
        off = this.matchPos - this.curLineStart;
      } else if (this.curLineStart + this.curLine.length < this.to) {
        this.nextLine();
        off = 0;
      } else {
        this.done = true;
        return this;
      }
    }
  }
};
var flattened = /* @__PURE__ */ new WeakMap();
var FlattenedDoc = class _FlattenedDoc {
  constructor(from3, text5) {
    this.from = from3;
    this.text = text5;
  }
  get to() {
    return this.from + this.text.length;
  }
  static get(doc2, from3, to) {
    let cached = flattened.get(doc2);
    if (!cached || cached.from >= to || cached.to <= from3) {
      let flat = new _FlattenedDoc(from3, doc2.sliceString(from3, to));
      flattened.set(doc2, flat);
      return flat;
    }
    if (cached.from == from3 && cached.to == to)
      return cached;
    let { text: text5, from: cachedFrom } = cached;
    if (cachedFrom > from3) {
      text5 = doc2.sliceString(from3, cachedFrom) + text5;
      cachedFrom = from3;
    }
    if (cached.to < to)
      text5 += doc2.sliceString(cached.to, to);
    flattened.set(doc2, new _FlattenedDoc(cachedFrom, text5));
    return new _FlattenedDoc(from3, text5.slice(from3 - cachedFrom, to - cachedFrom));
  }
};
var MultilineRegExpCursor = class {
  constructor(text5, query, options, from3, to) {
    this.text = text5;
    this.to = to;
    this.done = false;
    this.value = empty;
    this.matchPos = toCharEnd(text5, from3);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.test = options === null || options === void 0 ? void 0 : options.test;
    this.flat = FlattenedDoc.get(text5, from3, this.chunkEnd(
      from3 + 5e3
      /* Chunk.Base */
    ));
  }
  chunkEnd(pos) {
    return pos >= this.to ? this.to : this.text.lineAt(pos).to;
  }
  next() {
    for (; ; ) {
      let off = this.re.lastIndex = this.matchPos - this.flat.from;
      let match2 = this.re.exec(this.flat.text);
      if (match2 && !match2[0] && match2.index == off) {
        this.re.lastIndex = off + 1;
        match2 = this.re.exec(this.flat.text);
      }
      if (match2) {
        let from3 = this.flat.from + match2.index, to = from3 + match2[0].length;
        if ((this.flat.to >= this.to || match2.index + match2[0].length <= this.flat.text.length - 10) && (!this.test || this.test(from3, to, match2))) {
          this.value = { from: from3, to, match: match2 };
          this.matchPos = toCharEnd(this.text, to + (from3 == to ? 1 : 0));
          return this;
        }
      }
      if (this.flat.to == this.to) {
        this.done = true;
        return this;
      }
      this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
    }
  }
};
if (typeof Symbol != "undefined") {
  RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] = function() {
    return this;
  };
}
function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a2) {
    return false;
  }
}
function toCharEnd(text5, pos) {
  if (pos >= text5.length)
    return pos;
  let line = text5.lineAt(pos), next2;
  while (pos < line.to && (next2 = line.text.charCodeAt(pos - line.from)) >= 56320 && next2 < 57344)
    pos++;
  return pos;
}
function createLineDialog(view) {
  let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
  let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
  let dom = crelt("form", {
    class: "cm-gotoLine",
    onkeydown: (event) => {
      if (event.keyCode == 27) {
        event.preventDefault();
        view.dispatch({ effects: dialogEffect.of(false) });
        view.focus();
      } else if (event.keyCode == 13) {
        event.preventDefault();
        go3();
      }
    },
    onsubmit: (event) => {
      event.preventDefault();
      go3();
    }
  }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")), crelt("button", {
    name: "close",
    onclick: () => {
      view.dispatch({ effects: dialogEffect.of(false) });
      view.focus();
    },
    "aria-label": view.state.phrase("close"),
    type: "button"
  }, ["\xD7"]));
  function go3() {
    let match2 = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match2)
      return;
    let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
    let [, sign2, ln, cl, percent3] = match2;
    let col = cl ? +cl.slice(1) : 0;
    let line2 = ln ? +ln : startLine.number;
    if (ln && percent3) {
      let pc = line2 / 100;
      if (sign2)
        pc = pc * (sign2 == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line2 = Math.round(state.doc.lines * pc);
    } else if (ln && sign2) {
      line2 = line2 * (sign2 == "-" ? -1 : 1) + startLine.number;
    }
    let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line2)));
    let selection2 = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
    view.dispatch({
      effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection2.from, { y: "center" })],
      selection: selection2
    });
    view.focus();
  }
  return { dom };
}
var dialogEffect = /* @__PURE__ */ StateEffect.define();
var dialogField = /* @__PURE__ */ StateField.define({
  create() {
    return true;
  },
  update(value, tr) {
    for (let e of tr.effects)
      if (e.is(dialogEffect))
        value = e.value;
    return value;
  },
  provide: (f) => showPanel.from(f, (val) => val ? createLineDialog : null)
});
var gotoLine = (view) => {
  let panel = getPanel(view, createLineDialog);
  if (!panel) {
    let effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null)
      effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$13]));
    view.dispatch({ effects });
    panel = getPanel(view, createLineDialog);
  }
  if (panel)
    panel.dom.querySelector("input").select();
  return true;
};
var baseTheme$13 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    position: "relative",
    "& label": { fontSize: "80%" },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      bottom: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: "0"
    }
  }
});
var defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100,
  wholeWords: false
};
var highlightConfig = /* @__PURE__ */ Facet.define({
  combine(options) {
    return combineConfig(options, defaultHighlightOptions, {
      highlightWordAroundCursor: (a2, b) => a2 || b,
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
function highlightSelectionMatches(options) {
  let ext = [defaultTheme, matchHighlighter];
  if (options)
    ext.push(highlightConfig.of(options));
  return ext;
}
var matchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch" });
var mainMatchDeco = /* @__PURE__ */ Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
function insideWordBoundaries(check, state, from3, to) {
  return (from3 == 0 || check(state.sliceDoc(from3 - 1, from3)) != CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
}
function insideWord(check, state, from3, to) {
  return check(state.sliceDoc(from3, from3 + 1)) == CharCategory.Word && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
}
var matchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.getDeco(view);
  }
  update(update) {
    if (update.selectionSet || update.docChanged || update.viewportChanged)
      this.decorations = this.getDeco(update.view);
  }
  getDeco(view) {
    let conf = view.state.facet(highlightConfig);
    let { state } = view, sel = state.selection;
    if (sel.ranges.length > 1)
      return Decoration.none;
    let range = sel.main, query, check = null;
    if (range.empty) {
      if (!conf.highlightWordAroundCursor)
        return Decoration.none;
      let word = state.wordAt(range.head);
      if (!word)
        return Decoration.none;
      check = state.charCategorizer(range.head);
      query = state.sliceDoc(word.from, word.to);
    } else {
      let len = range.to - range.from;
      if (len < conf.minSelectionLength || len > 200)
        return Decoration.none;
      if (conf.wholeWords) {
        query = state.sliceDoc(range.from, range.to);
        check = state.charCategorizer(range.head);
        if (!(insideWordBoundaries(check, state, range.from, range.to) && insideWord(check, state, range.from, range.to)))
          return Decoration.none;
      } else {
        query = state.sliceDoc(range.from, range.to);
        if (!query)
          return Decoration.none;
      }
    }
    let deco = [];
    for (let part of view.visibleRanges) {
      let cursor2 = new SearchCursor(state.doc, query, part.from, part.to);
      while (!cursor2.next().done) {
        let { from: from3, to } = cursor2.value;
        if (!check || insideWordBoundaries(check, state, from3, to)) {
          if (range.empty && from3 <= range.from && to >= range.to)
            deco.push(mainMatchDeco.range(from3, to));
          else if (from3 >= range.to || to <= range.from)
            deco.push(matchDeco.range(from3, to));
          if (deco.length > conf.maxMatches)
            return Decoration.none;
        }
      }
    }
    return Decoration.set(deco);
  }
}, {
  decorations: (v) => v.decorations
});
var defaultTheme = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
  ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
});
var selectWord = ({ state, dispatch }) => {
  let { selection: selection2 } = state;
  let newSel = EditorSelection.create(selection2.ranges.map((range) => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection2.mainIndex);
  if (newSel.eq(selection2))
    return false;
  dispatch(state.update({ selection: newSel }));
  return true;
};
function findNextOccurrence(state, query) {
  let { main, ranges } = state.selection;
  let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
  for (let cycled = false, cursor2 = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to); ; ) {
    cursor2.next();
    if (cursor2.done) {
      if (cycled)
        return null;
      cursor2 = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
      cycled = true;
    } else {
      if (cycled && ranges.some((r2) => r2.from == cursor2.value.from))
        continue;
      if (fullWord) {
        let word2 = state.wordAt(cursor2.value.from);
        if (!word2 || word2.from != cursor2.value.from || word2.to != cursor2.value.to)
          continue;
      }
      return cursor2.value;
    }
  }
}
var selectNextOccurrence = ({ state, dispatch }) => {
  let { ranges } = state.selection;
  if (ranges.some((sel) => sel.from === sel.to))
    return selectWord({ state, dispatch });
  let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some((r2) => state.sliceDoc(r2.from, r2.to) != searchedText))
    return false;
  let range = findNextOccurrence(state, searchedText);
  if (!range)
    return false;
  dispatch(state.update({
    selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
    effects: EditorView.scrollIntoView(range.to)
  }));
  return true;
};
var searchConfigFacet = /* @__PURE__ */ Facet.define({
  combine(configs) {
    return combineConfig(configs, {
      top: false,
      caseSensitive: false,
      literal: false,
      regexp: false,
      wholeWord: false,
      createPanel: (view) => new SearchPanel(view),
      scrollToMatch: (range) => EditorView.scrollIntoView(range)
    });
  }
});
var SearchQuery = class {
  /**
  Create a query object.
  */
  constructor(config2) {
    this.search = config2.search;
    this.caseSensitive = !!config2.caseSensitive;
    this.literal = !!config2.literal;
    this.regexp = !!config2.regexp;
    this.replace = config2.replace || "";
    this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
    this.unquoted = this.unquote(this.search);
    this.wholeWord = !!config2.wholeWord;
  }
  /**
  @internal
  */
  unquote(text5) {
    return this.literal ? text5 : text5.replace(/\\([nrt\\])/g, (_, ch2) => ch2 == "n" ? "\n" : ch2 == "r" ? "\r" : ch2 == "t" ? "	" : "\\");
  }
  /**
  Compare this query to another query.
  */
  eq(other) {
    return this.search == other.search && this.replace == other.replace && this.caseSensitive == other.caseSensitive && this.regexp == other.regexp && this.wholeWord == other.wholeWord;
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(state, from3 = 0, to) {
    let st = state.doc ? state : EditorState.create({ doc: state });
    if (to == null)
      to = st.doc.length;
    return this.regexp ? regexpCursor(this, st, from3, to) : stringCursor(this, st, from3, to);
  }
};
var QueryType2 = class {
  constructor(spec) {
    this.spec = spec;
  }
};
function stringCursor(spec, state, from3, to) {
  return new SearchCursor(state.doc, spec.unquoted, from3, to, spec.caseSensitive ? void 0 : (x) => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : void 0);
}
function stringWordTest(doc2, categorizer) {
  return (from3, to, buf, bufPos) => {
    if (bufPos > from3 || bufPos + buf.length < to) {
      bufPos = Math.max(0, from3 - 2);
      buf = doc2.sliceString(bufPos, Math.min(doc2.length, to + 2));
    }
    return (categorizer(charBefore(buf, from3 - bufPos)) != CharCategory.Word || categorizer(charAfter(buf, from3 - bufPos)) != CharCategory.Word) && (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word || categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
  };
}
var StringQuery = class extends QueryType2 {
  constructor(spec) {
    super(spec);
  }
  nextMatch(state, curFrom, curTo) {
    let cursor2 = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
    if (cursor2.done) {
      let end2 = Math.min(state.doc.length, curFrom + this.spec.unquoted.length);
      cursor2 = stringCursor(this.spec, state, 0, end2).nextOverlapping();
    }
    return cursor2.done || cursor2.value.from == curFrom && cursor2.value.to == curTo ? null : cursor2.value;
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(state, from3, to) {
    for (let pos = to; ; ) {
      let start2 = Math.max(from3, pos - 1e4 - this.spec.unquoted.length);
      let cursor2 = stringCursor(this.spec, state, start2, pos), range = null;
      while (!cursor2.nextOverlapping().done)
        range = cursor2.value;
      if (range)
        return range;
      if (start2 == from3)
        return null;
      pos -= 1e4;
    }
  }
  prevMatch(state, curFrom, curTo) {
    let found = this.prevMatchInRange(state, 0, curFrom);
    if (!found)
      found = this.prevMatchInRange(state, Math.max(0, curTo - this.spec.unquoted.length), state.doc.length);
    return found && (found.from != curFrom || found.to != curTo) ? found : null;
  }
  getReplacement(_result) {
    return this.spec.unquote(this.spec.replace);
  }
  matchAll(state, limit) {
    let cursor2 = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor2.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor2.value);
    }
    return ranges;
  }
  highlight(state, from3, to, add3) {
    let cursor2 = stringCursor(this.spec, state, Math.max(0, from3 - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
    while (!cursor2.next().done)
      add3(cursor2.value.from, cursor2.value.to);
  }
};
function regexpCursor(spec, state, from3, to) {
  return new RegExpCursor(state.doc, spec.search, {
    ignoreCase: !spec.caseSensitive,
    test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : void 0
  }, from3, to);
}
function charBefore(str, index) {
  return str.slice(findClusterBreak2(str, index, false), index);
}
function charAfter(str, index) {
  return str.slice(index, findClusterBreak2(str, index));
}
function regexpWordTest(categorizer) {
  return (_from, _to, match2) => !match2[0].length || (categorizer(charBefore(match2.input, match2.index)) != CharCategory.Word || categorizer(charAfter(match2.input, match2.index)) != CharCategory.Word) && (categorizer(charAfter(match2.input, match2.index + match2[0].length)) != CharCategory.Word || categorizer(charBefore(match2.input, match2.index + match2[0].length)) != CharCategory.Word);
}
var RegExpQuery = class extends QueryType2 {
  nextMatch(state, curFrom, curTo) {
    let cursor2 = regexpCursor(this.spec, state, curTo, state.doc.length).next();
    if (cursor2.done)
      cursor2 = regexpCursor(this.spec, state, 0, curFrom).next();
    return cursor2.done ? null : cursor2.value;
  }
  prevMatchInRange(state, from3, to) {
    for (let size = 1; ; size++) {
      let start2 = Math.max(
        from3,
        to - size * 1e4
        /* FindPrev.ChunkSize */
      );
      let cursor2 = regexpCursor(this.spec, state, start2, to), range = null;
      while (!cursor2.next().done)
        range = cursor2.value;
      if (range && (start2 == from3 || range.from > start2 + 10))
        return range;
      if (start2 == from3)
        return null;
    }
  }
  prevMatch(state, curFrom, curTo) {
    return this.prevMatchInRange(state, 0, curFrom) || this.prevMatchInRange(state, curTo, state.doc.length);
  }
  getReplacement(result) {
    return this.spec.unquote(this.spec.replace).replace(/\$([$&]|\d+)/g, (m, i) => {
      if (i == "&")
        return result.match[0];
      if (i == "$")
        return "$";
      for (let l = i.length; l > 0; l--) {
        let n = +i.slice(0, l);
        if (n > 0 && n < result.match.length)
          return result.match[n] + i.slice(l);
      }
      return m;
    });
  }
  matchAll(state, limit) {
    let cursor2 = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
    while (!cursor2.next().done) {
      if (ranges.length >= limit)
        return null;
      ranges.push(cursor2.value);
    }
    return ranges;
  }
  highlight(state, from3, to, add3) {
    let cursor2 = regexpCursor(this.spec, state, Math.max(
      0,
      from3 - 250
      /* RegExp.HighlightMargin */
    ), Math.min(to + 250, state.doc.length));
    while (!cursor2.next().done)
      add3(cursor2.value.from, cursor2.value.to);
  }
};
var setSearchQuery = /* @__PURE__ */ StateEffect.define();
var togglePanel = /* @__PURE__ */ StateEffect.define();
var searchState = /* @__PURE__ */ StateField.define({
  create(state) {
    return new SearchState(defaultQuery(state).create(), null);
  },
  update(value, tr) {
    for (let effect of tr.effects) {
      if (effect.is(setSearchQuery))
        value = new SearchState(effect.value.create(), value.panel);
      else if (effect.is(togglePanel))
        value = new SearchState(value.query, effect.value ? createSearchPanel : null);
    }
    return value;
  },
  provide: (f) => showPanel.from(f, (val) => val.panel)
});
var SearchState = class {
  constructor(query, panel) {
    this.query = query;
    this.panel = panel;
  }
};
var matchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch" });
var selectedMatchMark = /* @__PURE__ */ Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
var searchHighlighter = /* @__PURE__ */ ViewPlugin.fromClass(class {
  constructor(view) {
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }
  update(update) {
    let state = update.state.field(searchState);
    if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
      this.decorations = this.highlight(state);
  }
  highlight({ query, panel }) {
    if (!panel || !query.spec.valid)
      return Decoration.none;
    let { view } = this;
    let builder = new RangeSetBuilder();
    for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
      let { from: from3, to } = ranges[i];
      while (i < l - 1 && to > ranges[i + 1].from - 2 * 250)
        to = ranges[++i].to;
      query.highlight(view.state, from3, to, (from4, to2) => {
        let selected = view.state.selection.ranges.some((r2) => r2.from == from4 && r2.to == to2);
        builder.add(from4, to2, selected ? selectedMatchMark : matchMark);
      });
    }
    return builder.finish();
  }
}, {
  decorations: (v) => v.decorations
});
function searchCommand(f) {
  return (view) => {
    let state = view.state.field(searchState, false);
    return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
  };
}
var findNext = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { to } = view.state.selection.main;
  let next2 = query.nextMatch(view.state, to, to);
  if (!next2)
    return false;
  let selection2 = EditorSelection.single(next2.from, next2.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection: selection2,
    effects: [announceMatch(view, next2), config2.scrollToMatch(selection2.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var findPrevious = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { state } = view, { from: from3 } = state.selection.main;
  let prev = query.prevMatch(state, from3, from3);
  if (!prev)
    return false;
  let selection2 = EditorSelection.single(prev.from, prev.to);
  let config2 = view.state.facet(searchConfigFacet);
  view.dispatch({
    selection: selection2,
    effects: [announceMatch(view, prev), config2.scrollToMatch(selection2.main, view)],
    userEvent: "select.search"
  });
  selectSearchInput(view);
  return true;
});
var selectMatches = /* @__PURE__ */ searchCommand((view, { query }) => {
  let ranges = query.matchAll(view.state, 1e3);
  if (!ranges || !ranges.length)
    return false;
  view.dispatch({
    selection: EditorSelection.create(ranges.map((r2) => EditorSelection.range(r2.from, r2.to))),
    userEvent: "select.search.matches"
  });
  return true;
});
var selectSelectionMatches = ({ state, dispatch }) => {
  let sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty)
    return false;
  let { from: from3, to } = sel.main;
  let ranges = [], main = 0;
  for (let cur2 = new SearchCursor(state.doc, state.sliceDoc(from3, to)); !cur2.next().done; ) {
    if (ranges.length > 1e3)
      return false;
    if (cur2.value.from == from3)
      main = ranges.length;
    ranges.push(EditorSelection.range(cur2.value.from, cur2.value.to));
  }
  dispatch(state.update({
    selection: EditorSelection.create(ranges, main),
    userEvent: "select.search.matches"
  }));
  return true;
};
var replaceNext = /* @__PURE__ */ searchCommand((view, { query }) => {
  let { state } = view, { from: from3, to } = state.selection.main;
  if (state.readOnly)
    return false;
  let match2 = query.nextMatch(state, from3, from3);
  if (!match2)
    return false;
  let next2 = match2;
  let changes = [], selection2, replacement;
  let effects = [];
  if (next2.from == from3 && next2.to == to) {
    replacement = state.toText(query.getReplacement(next2));
    changes.push({ from: next2.from, to: next2.to, insert: replacement });
    next2 = query.nextMatch(state, next2.from, next2.to);
    effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from3).number) + "."));
  }
  if (next2) {
    let off = changes.length == 0 || changes[0].from >= match2.to ? 0 : match2.to - match2.from - replacement.length;
    selection2 = EditorSelection.single(next2.from - off, next2.to - off);
    effects.push(announceMatch(view, next2));
    effects.push(state.facet(searchConfigFacet).scrollToMatch(selection2.main, view));
  }
  view.dispatch({
    changes,
    selection: selection2,
    effects,
    userEvent: "input.replace"
  });
  return true;
});
var replaceAll = /* @__PURE__ */ searchCommand((view, { query }) => {
  if (view.state.readOnly)
    return false;
  let changes = query.matchAll(view.state, 1e9).map((match2) => {
    let { from: from3, to } = match2;
    return { from: from3, to, insert: query.getReplacement(match2) };
  });
  if (!changes.length)
    return false;
  let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
  view.dispatch({
    changes,
    effects: EditorView.announce.of(announceText),
    userEvent: "input.replace.all"
  });
  return true;
});
function createSearchPanel(view) {
  return view.state.facet(searchConfigFacet).createPanel(view);
}
function defaultQuery(state, fallback2) {
  var _a2, _b2, _c, _d, _e2;
  let sel = state.selection.main;
  let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  if (fallback2 && !selText)
    return fallback2;
  let config2 = state.facet(searchConfigFacet);
  return new SearchQuery({
    search: ((_a2 = fallback2 === null || fallback2 === void 0 ? void 0 : fallback2.literal) !== null && _a2 !== void 0 ? _a2 : config2.literal) ? selText : selText.replace(/\n/g, "\\n"),
    caseSensitive: (_b2 = fallback2 === null || fallback2 === void 0 ? void 0 : fallback2.caseSensitive) !== null && _b2 !== void 0 ? _b2 : config2.caseSensitive,
    literal: (_c = fallback2 === null || fallback2 === void 0 ? void 0 : fallback2.literal) !== null && _c !== void 0 ? _c : config2.literal,
    regexp: (_d = fallback2 === null || fallback2 === void 0 ? void 0 : fallback2.regexp) !== null && _d !== void 0 ? _d : config2.regexp,
    wholeWord: (_e2 = fallback2 === null || fallback2 === void 0 ? void 0 : fallback2.wholeWord) !== null && _e2 !== void 0 ? _e2 : config2.wholeWord
  });
}
function getSearchInput(view) {
  let panel = getPanel(view, createSearchPanel);
  return panel && panel.dom.querySelector("[main-field]");
}
function selectSearchInput(view) {
  let input = getSearchInput(view);
  if (input && input == view.root.activeElement)
    input.select();
}
var openSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (state && state.panel) {
    let searchInput = getSearchInput(view);
    if (searchInput && searchInput != view.root.activeElement) {
      let query = defaultQuery(view.state, state.query.spec);
      if (query.valid)
        view.dispatch({ effects: setSearchQuery.of(query) });
      searchInput.focus();
      searchInput.select();
    }
  } else {
    view.dispatch({ effects: [
      togglePanel.of(true),
      state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
    ] });
  }
  return true;
};
var closeSearchPanel = (view) => {
  let state = view.state.field(searchState, false);
  if (!state || !state.panel)
    return false;
  let panel = getPanel(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement))
    view.focus();
  view.dispatch({ effects: togglePanel.of(false) });
  return true;
};
var searchKeymap = [
  { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
  { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
  { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
  { key: "Mod-Shift-l", run: selectSelectionMatches },
  { key: "Mod-Alt-g", run: gotoLine },
  { key: "Mod-d", run: selectNextOccurrence, preventDefault: true }
];
var SearchPanel = class {
  constructor(view) {
    this.view = view;
    let query = this.query = view.state.field(searchState).query.spec;
    this.commit = this.commit.bind(this);
    this.searchField = crelt("input", {
      value: query.search,
      placeholder: phrase(view, "Find"),
      "aria-label": phrase(view, "Find"),
      class: "cm-textfield",
      name: "search",
      form: "",
      "main-field": "true",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.replaceField = crelt("input", {
      value: query.replace,
      placeholder: phrase(view, "Replace"),
      "aria-label": phrase(view, "Replace"),
      class: "cm-textfield",
      name: "replace",
      form: "",
      onchange: this.commit,
      onkeyup: this.commit
    });
    this.caseField = crelt("input", {
      type: "checkbox",
      name: "case",
      form: "",
      checked: query.caseSensitive,
      onchange: this.commit
    });
    this.reField = crelt("input", {
      type: "checkbox",
      name: "re",
      form: "",
      checked: query.regexp,
      onchange: this.commit
    });
    this.wordField = crelt("input", {
      type: "checkbox",
      name: "word",
      form: "",
      checked: query.wholeWord,
      onchange: this.commit
    });
    function button(name2, onclick, content3) {
      return crelt("button", { class: "cm-button", name: name2, onclick, type: "button" }, content3);
    }
    this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
      this.searchField,
      button("next", () => findNext(view), [phrase(view, "next")]),
      button("prev", () => findPrevious(view), [phrase(view, "previous")]),
      button("select", () => selectMatches(view), [phrase(view, "all")]),
      crelt("label", null, [this.caseField, phrase(view, "match case")]),
      crelt("label", null, [this.reField, phrase(view, "regexp")]),
      crelt("label", null, [this.wordField, phrase(view, "by word")]),
      ...view.state.readOnly ? [] : [
        crelt("br"),
        this.replaceField,
        button("replace", () => replaceNext(view), [phrase(view, "replace")]),
        button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
      ],
      crelt("button", {
        name: "close",
        onclick: () => closeSearchPanel(view),
        "aria-label": phrase(view, "close"),
        type: "button"
      }, ["\xD7"])
    ]);
  }
  commit() {
    let query = new SearchQuery({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    });
    if (!query.eq(this.query)) {
      this.query = query;
      this.view.dispatch({ effects: setSearchQuery.of(query) });
    }
  }
  keydown(e) {
    if (runScopeHandlers(this.view, e, "search-panel")) {
      e.preventDefault();
    } else if (e.keyCode == 13 && e.target == this.searchField) {
      e.preventDefault();
      (e.shiftKey ? findPrevious : findNext)(this.view);
    } else if (e.keyCode == 13 && e.target == this.replaceField) {
      e.preventDefault();
      replaceNext(this.view);
    }
  }
  update(update) {
    for (let tr of update.transactions)
      for (let effect of tr.effects) {
        if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
          this.setQuery(effect.value);
      }
  }
  setQuery(query) {
    this.query = query;
    this.searchField.value = query.search;
    this.replaceField.value = query.replace;
    this.caseField.checked = query.caseSensitive;
    this.reField.checked = query.regexp;
    this.wordField.checked = query.wholeWord;
  }
  mount() {
    this.searchField.select();
  }
  get pos() {
    return 80;
  }
  get top() {
    return this.view.state.facet(searchConfigFacet).top;
  }
};
function phrase(view, phrase2) {
  return view.state.phrase(phrase2);
}
var AnnounceMargin = 30;
var Break = /[\s\.,:;?!]/;
function announceMatch(view, { from: from3, to }) {
  let line = view.state.doc.lineAt(from3), lineEnd2 = view.state.doc.lineAt(to).to;
  let start2 = Math.max(line.from, from3 - AnnounceMargin), end2 = Math.min(lineEnd2, to + AnnounceMargin);
  let text5 = view.state.sliceDoc(start2, end2);
  if (start2 != line.from) {
    for (let i = 0; i < AnnounceMargin; i++)
      if (!Break.test(text5[i + 1]) && Break.test(text5[i])) {
        text5 = text5.slice(i);
        break;
      }
  }
  if (end2 != lineEnd2) {
    for (let i = text5.length - 1; i > text5.length - AnnounceMargin; i--)
      if (!Break.test(text5[i - 1]) && Break.test(text5[i])) {
        text5 = text5.slice(0, i);
        break;
      }
  }
  return EditorView.announce.of(`${view.state.phrase("current match")}. ${text5} ${view.state.phrase("on line")} ${line.number}.`);
}
var baseTheme4 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
  "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
  "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
  "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
});
var searchExtensions = [
  searchState,
  /* @__PURE__ */ Prec.low(searchHighlighter),
  baseTheme4
];

// ../../node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js
init_dist7();
init_dist5();

// ../../node_modules/@codemirror/lint/dist/index.js
init_dist3();
init_dist2();
var SelectedDiagnostic = class {
  constructor(from3, to, diagnostic) {
    this.from = from3;
    this.to = to;
    this.diagnostic = diagnostic;
  }
};
var LintState = class _LintState {
  constructor(diagnostics, panel, selected) {
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  static init(diagnostics, panel, state) {
    let diagnosticFilter = state.facet(lintConfig).markerFilter;
    if (diagnosticFilter)
      diagnostics = diagnosticFilter(diagnostics, state);
    let sorted = diagnostics.slice().sort((a2, b) => a2.from - b.from || a2.to - b.to);
    let deco = new RangeSetBuilder(), active = [], pos = 0;
    for (let i = 0; ; ) {
      let next2 = i == sorted.length ? null : sorted[i];
      if (!next2 && !active.length)
        break;
      let from3, to;
      if (active.length) {
        from3 = pos;
        to = active.reduce((p, d3) => Math.min(p, d3.to), next2 && next2.from > from3 ? next2.from : 1e8);
      } else {
        from3 = next2.from;
        to = next2.to;
        active.push(next2);
        i++;
      }
      while (i < sorted.length) {
        let next3 = sorted[i];
        if (next3.from == from3 && (next3.to > next3.from || next3.to == from3)) {
          active.push(next3);
          i++;
          to = Math.min(next3.to, to);
        } else {
          to = Math.min(next3.from, to);
          break;
        }
      }
      let sev = maxSeverity(active);
      if (active.some((d3) => d3.from == d3.to || d3.from == d3.to - 1 && state.doc.lineAt(d3.from).to == d3.from)) {
        deco.add(from3, from3, Decoration.widget({
          widget: new DiagnosticWidget(sev),
          diagnostics: active.slice()
        }));
      } else {
        let markClass = active.reduce((c2, d3) => d3.markClass ? c2 + " " + d3.markClass : c2, "");
        deco.add(from3, to, Decoration.mark({
          class: "cm-lintRange cm-lintRange-" + sev + markClass,
          diagnostics: active.slice(),
          inclusiveEnd: active.some((a2) => a2.to > to)
        }));
      }
      pos = to;
      for (let i2 = 0; i2 < active.length; i2++)
        if (active[i2].to <= pos)
          active.splice(i2--, 1);
    }
    let set2 = deco.finish();
    return new _LintState(set2, panel, findDiagnostic(set2));
  }
};
function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
  let found = null;
  diagnostics.between(after, 1e9, (from3, to, { spec }) => {
    if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
      return;
    if (!found)
      found = new SelectedDiagnostic(from3, to, diagnostic || spec.diagnostics[0]);
    else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
      return false;
    else
      found = new SelectedDiagnostic(found.from, to, found.diagnostic);
  });
  return found;
}
function hideTooltip(tr, tooltip) {
  let from3 = tooltip.pos, to = tooltip.end || from3;
  let result = tr.state.facet(lintConfig).hideOn(tr, from3, to);
  if (result != null)
    return result;
  let line = tr.startState.doc.lineAt(tooltip.pos);
  return !!(tr.effects.some((e) => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));
}
function maybeEnableLint(state, effects) {
  return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
}
var setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
var togglePanel2 = /* @__PURE__ */ StateEffect.define();
var movePanelSelection = /* @__PURE__ */ StateEffect.define();
var lintState = /* @__PURE__ */ StateField.define({
  create() {
    return new LintState(Decoration.none, null, null);
  },
  update(value, tr) {
    if (tr.docChanged && value.diagnostics.size) {
      let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
      if (value.selected) {
        let selPos = tr.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
        panel = null;
      value = new LintState(mapped, panel, selected);
    }
    for (let effect of tr.effects) {
      if (effect.is(setDiagnosticsEffect)) {
        let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;
        value = LintState.init(effect.value, panel, tr.state);
      } else if (effect.is(togglePanel2)) {
        value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
      } else if (effect.is(movePanelSelection)) {
        value = new LintState(value.diagnostics, value.panel, effect.value);
      }
    }
    return value;
  },
  provide: (f) => [
    showPanel.from(f, (val) => val.panel),
    EditorView.decorations.from(f, (s) => s.diagnostics)
  ]
});
var activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
function lintTooltip(view, pos, side) {
  let { diagnostics } = view.state.field(lintState);
  let found, start2 = -1, end2 = -1;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from3, to, { spec }) => {
    if (pos >= from3 && pos <= to && (from3 == to || (pos > from3 || side > 0) && (pos < to || side < 0))) {
      found = spec.diagnostics;
      start2 = from3;
      end2 = to;
      return false;
    }
  });
  let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
  if (found && diagnosticFilter)
    found = diagnosticFilter(found, view.state);
  if (!found)
    return null;
  return {
    pos: start2,
    end: end2,
    above: view.state.doc.lineAt(start2).to < end2,
    create() {
      return { dom: diagnosticsTooltip(view, found) };
    }
  };
}
function diagnosticsTooltip(view, diagnostics) {
  return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d3) => renderDiagnostic(view, d3, false)));
}
var openLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel2.of(true)]) });
  let panel = getPanel(view, LintPanel.open);
  if (panel)
    panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
var closeLintPanel = (view) => {
  let field = view.state.field(lintState, false);
  if (!field || !field.panel)
    return false;
  view.dispatch({ effects: togglePanel2.of(false) });
  return true;
};
var nextDiagnostic = (view) => {
  let field = view.state.field(lintState, false);
  if (!field)
    return false;
  let sel = view.state.selection.main, next2 = field.diagnostics.iter(sel.to + 1);
  if (!next2.value) {
    next2 = field.diagnostics.iter(0);
    if (!next2.value || next2.from == sel.from && next2.to == sel.to)
      return false;
  }
  view.dispatch({ selection: { anchor: next2.from, head: next2.to }, scrollIntoView: true });
  return true;
};
var lintKeymap = [
  { key: "Mod-Shift-m", run: openLintPanel, preventDefault: true },
  { key: "F8", run: nextDiagnostic }
];
var lintConfig = /* @__PURE__ */ Facet.define({
  combine(input) {
    return Object.assign({ sources: input.map((i) => i.source).filter((x) => x != null) }, combineConfig(input.map((i) => i.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (a2, b) => !a2 ? b : !b ? a2 : (u2) => a2(u2) || b(u2)
    }));
  }
});
function assignKeys(actions) {
  let assigned = [];
  if (actions)
    actions: for (let { name: name2 } of actions) {
      for (let i = 0; i < name2.length; i++) {
        let ch2 = name2[i];
        if (/[a-zA-Z]/.test(ch2) && !assigned.some((c2) => c2.toLowerCase() == ch2.toLowerCase())) {
          assigned.push(ch2);
          continue actions;
        }
      }
      assigned.push("");
    }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a2;
  let keys2 = inPanel ? assignKeys(diagnostic.actions) : [];
  return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i) => {
    let fired = false, click = (e) => {
      e.preventDefault();
      if (fired)
        return;
      fired = true;
      let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
      if (found)
        action.apply(view, found.from, found.to);
    };
    let { name: name2 } = action, keyIndex = keys2[i] ? name2.indexOf(keys2[i]) : -1;
    let nameElt = keyIndex < 0 ? name2 : [
      name2.slice(0, keyIndex),
      crelt("u", name2.slice(keyIndex, keyIndex + 1)),
      name2.slice(keyIndex + 1)
    ];
    return crelt("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys2[i]})"`}.`
    }, nameElt);
  }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
}
var DiagnosticWidget = class extends WidgetType {
  constructor(sev) {
    super();
    this.sev = sev;
  }
  eq(other) {
    return other.sev == this.sev;
  }
  toDOM() {
    return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
  }
};
var PanelItem = class {
  constructor(view, diagnostic) {
    this.diagnostic = diagnostic;
    this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
    this.dom = renderDiagnostic(view, diagnostic, true);
    this.dom.id = this.id;
    this.dom.setAttribute("role", "option");
  }
};
var LintPanel = class _LintPanel {
  constructor(view) {
    this.view = view;
    this.items = [];
    let onkeydown = (event) => {
      if (event.keyCode == 27) {
        closeLintPanel(this.view);
        this.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      } else if (event.keyCode == 36) {
        this.moveSelection(0);
      } else if (event.keyCode == 35) {
        this.moveSelection(this.items.length - 1);
      } else if (event.keyCode == 13) {
        this.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic } = this.items[this.selectedIndex], keys2 = assignKeys(diagnostic.actions);
        for (let i = 0; i < keys2.length; i++)
          if (keys2[i].toUpperCase().charCodeAt(0) == event.keyCode) {
            let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
            if (found)
              diagnostic.actions[i].apply(view, found.from, found.to);
          }
      } else {
        return;
      }
      event.preventDefault();
    };
    let onclick = (event) => {
      for (let i = 0; i < this.items.length; i++) {
        if (this.items[i].dom.contains(event.target))
          this.moveSelection(i);
      }
    };
    this.list = crelt("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown,
      onclick
    });
    this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => closeLintPanel(this.view)
    }, "\xD7"));
    this.update();
  }
  get selectedIndex() {
    let selected = this.view.state.field(lintState).selected;
    if (!selected)
      return -1;
    for (let i = 0; i < this.items.length; i++)
      if (this.items[i].diagnostic == selected.diagnostic)
        return i;
    return -1;
  }
  update() {
    let { diagnostics, selected } = this.view.state.field(lintState);
    let i = 0, needsSync = false, newSelectedItem = null;
    let seen = /* @__PURE__ */ new Set();
    diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
      for (let diagnostic of spec.diagnostics) {
        if (seen.has(diagnostic))
          continue;
        seen.add(diagnostic);
        let found = -1, item;
        for (let j = i; j < this.items.length; j++)
          if (this.items[j].diagnostic == diagnostic) {
            found = j;
            break;
          }
        if (found < 0) {
          item = new PanelItem(this.view, diagnostic);
          this.items.splice(i, 0, item);
          needsSync = true;
        } else {
          item = this.items[found];
          if (found > i) {
            this.items.splice(i, found - i);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i++;
      }
    });
    while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
      needsSync = true;
      this.items.pop();
    }
    if (this.items.length == 0) {
      this.items.push(new PanelItem(this.view, {
        from: -1,
        to: -1,
        severity: "info",
        message: this.view.state.phrase("No diagnostics")
      }));
      needsSync = true;
    }
    if (newSelectedItem) {
      this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
      this.view.requestMeasure({
        key: this,
        read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
        write: ({ sel, panel }) => {
          let scaleY = panel.height / this.list.offsetHeight;
          if (sel.top < panel.top)
            this.list.scrollTop -= (panel.top - sel.top) / scaleY;
          else if (sel.bottom > panel.bottom)
            this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
        }
      });
    } else if (this.selectedIndex < 0) {
      this.list.removeAttribute("aria-activedescendant");
    }
    if (needsSync)
      this.sync();
  }
  sync() {
    let domPos = this.list.firstChild;
    function rm2() {
      let prev = domPos;
      domPos = prev.nextSibling;
      prev.remove();
    }
    for (let item of this.items) {
      if (item.dom.parentNode == this.list) {
        while (domPos != item.dom)
          rm2();
        domPos = item.dom.nextSibling;
      } else {
        this.list.insertBefore(item.dom, domPos);
      }
    }
    while (domPos)
      rm2();
  }
  moveSelection(selectedIndex) {
    if (this.selectedIndex < 0)
      return;
    let field = this.view.state.field(lintState);
    let selection2 = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
    if (!selection2)
      return;
    this.view.dispatch({
      selection: { anchor: selection2.from, head: selection2.to },
      scrollIntoView: true,
      effects: movePanelSelection.of(selection2)
    });
  }
  static open(view) {
    return new _LintPanel(view);
  }
};
function svg(content3, attrs2 = `viewBox="0 0 40 40"`) {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs2}>${encodeURIComponent(content3)}</svg>')`;
}
function underline(color) {
  return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
}
var baseTheme5 = /* @__PURE__ */ EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});
function severityWeight(sev) {
  return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
}
function maxSeverity(diagnostics) {
  let sev = "hint", weight = 1;
  for (let d3 of diagnostics) {
    let w = severityWeight(d3.severity);
    if (w > weight) {
      weight = w;
      sev = d3.severity;
    }
  }
  return sev;
}
var lintExtensions = [
  lintState,
  /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
    let { selected, panel } = state.field(lintState);
    return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
      activeMark.range(selected.from, selected.to)
    ]);
  }),
  /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
  baseTheme5
];

// ../../node_modules/@uiw/codemirror-extensions-basic-setup/esm/index.js
var basicSetup = function basicSetup2(options) {
  if (options === void 0) {
    options = {};
  }
  var {
    crosshairCursor: initCrosshairCursor = false
  } = options;
  var keymaps = [];
  if (options.closeBracketsKeymap !== false) {
    keymaps = keymaps.concat(closeBracketsKeymap);
  }
  if (options.defaultKeymap !== false) {
    keymaps = keymaps.concat(defaultKeymap);
  }
  if (options.searchKeymap !== false) {
    keymaps = keymaps.concat(searchKeymap);
  }
  if (options.historyKeymap !== false) {
    keymaps = keymaps.concat(historyKeymap);
  }
  if (options.foldKeymap !== false) {
    keymaps = keymaps.concat(foldKeymap);
  }
  if (options.completionKeymap !== false) {
    keymaps = keymaps.concat(completionKeymap);
  }
  if (options.lintKeymap !== false) {
    keymaps = keymaps.concat(lintKeymap);
  }
  var extensions = [];
  if (options.lineNumbers !== false) extensions.push(lineNumbers());
  if (options.highlightActiveLineGutter !== false) extensions.push(highlightActiveLineGutter());
  if (options.highlightSpecialChars !== false) extensions.push(highlightSpecialChars());
  if (options.history !== false) extensions.push(history());
  if (options.foldGutter !== false) extensions.push(foldGutter());
  if (options.drawSelection !== false) extensions.push(drawSelection());
  if (options.dropCursor !== false) extensions.push(dropCursor());
  if (options.allowMultipleSelections !== false) extensions.push(EditorState.allowMultipleSelections.of(true));
  if (options.indentOnInput !== false) extensions.push(indentOnInput());
  if (options.syntaxHighlighting !== false) extensions.push(syntaxHighlighting(defaultHighlightStyle, {
    fallback: true
  }));
  if (options.bracketMatching !== false) extensions.push(bracketMatching());
  if (options.closeBrackets !== false) extensions.push(closeBrackets());
  if (options.autocompletion !== false) extensions.push(autocompletion());
  if (options.rectangularSelection !== false) extensions.push(rectangularSelection());
  if (initCrosshairCursor !== false) extensions.push(crosshairCursor());
  if (options.highlightActiveLine !== false) extensions.push(highlightActiveLine());
  if (options.highlightSelectionMatches !== false) extensions.push(highlightSelectionMatches());
  if (options.tabSize && typeof options.tabSize === "number") extensions.push(indentUnit.of(" ".repeat(options.tabSize)));
  return extensions.concat([keymap.of(keymaps.flat())]).filter(Boolean);
};

// ../../node_modules/@uiw/react-codemirror/esm/getDefaultExtensions.js
init_dist3();

// ../../node_modules/@codemirror/theme-one-dark/dist/index.js
init_dist3();
init_dist5();
init_dist4();
var chalky = "#e5c07b";
var coral = "#e06c75";
var cyan = "#56b6c2";
var invalid = "#ffffff";
var ivory = "#abb2bf";
var stone = "#7d8799";
var malibu = "#61afef";
var sage = "#98c379";
var whiskey = "#d19a66";
var violet = "#c678dd";
var darkBackground = "#21252b";
var highlightBackground = "#2c313a";
var background = "#282c34";
var tooltipBackground = "#353a42";
var selection = "#3E4451";
var cursor = "#528bff";
var oneDarkTheme = /* @__PURE__ */ EditorView.theme({
  "&": {
    color: ivory,
    backgroundColor: background
  },
  ".cm-content": {
    caretColor: cursor
  },
  ".cm-cursor, .cm-dropCursor": { borderLeftColor: cursor },
  "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: selection },
  ".cm-panels": { backgroundColor: darkBackground, color: ivory },
  ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
  ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
  ".cm-searchMatch": {
    backgroundColor: "#72a1ff59",
    outline: "1px solid #457dff"
  },
  ".cm-searchMatch.cm-searchMatch-selected": {
    backgroundColor: "#6199ff2f"
  },
  ".cm-activeLine": { backgroundColor: "#6699ff0b" },
  ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
  "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
    backgroundColor: "#bad0f847"
  },
  ".cm-gutters": {
    backgroundColor: background,
    color: stone,
    border: "none"
  },
  ".cm-activeLineGutter": {
    backgroundColor: highlightBackground
  },
  ".cm-foldPlaceholder": {
    backgroundColor: "transparent",
    border: "none",
    color: "#ddd"
  },
  ".cm-tooltip": {
    border: "none",
    backgroundColor: tooltipBackground
  },
  ".cm-tooltip .cm-tooltip-arrow:before": {
    borderTopColor: "transparent",
    borderBottomColor: "transparent"
  },
  ".cm-tooltip .cm-tooltip-arrow:after": {
    borderTopColor: tooltipBackground,
    borderBottomColor: tooltipBackground
  },
  ".cm-tooltip-autocomplete": {
    "& > ul > li[aria-selected]": {
      backgroundColor: highlightBackground,
      color: ivory
    }
  }
}, { dark: true });
var oneDarkHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
  {
    tag: tags.keyword,
    color: violet
  },
  {
    tag: [tags.name, tags.deleted, tags.character, tags.propertyName, tags.macroName],
    color: coral
  },
  {
    tag: [/* @__PURE__ */ tags.function(tags.variableName), tags.labelName],
    color: malibu
  },
  {
    tag: [tags.color, /* @__PURE__ */ tags.constant(tags.name), /* @__PURE__ */ tags.standard(tags.name)],
    color: whiskey
  },
  {
    tag: [/* @__PURE__ */ tags.definition(tags.name), tags.separator],
    color: ivory
  },
  {
    tag: [tags.typeName, tags.className, tags.number, tags.changed, tags.annotation, tags.modifier, tags.self, tags.namespace],
    color: chalky
  },
  {
    tag: [tags.operator, tags.operatorKeyword, tags.url, tags.escape, tags.regexp, tags.link, /* @__PURE__ */ tags.special(tags.string)],
    color: cyan
  },
  {
    tag: [tags.meta, tags.comment],
    color: stone
  },
  {
    tag: tags.strong,
    fontWeight: "bold"
  },
  {
    tag: tags.emphasis,
    fontStyle: "italic"
  },
  {
    tag: tags.strikethrough,
    textDecoration: "line-through"
  },
  {
    tag: tags.link,
    color: stone,
    textDecoration: "underline"
  },
  {
    tag: tags.heading,
    fontWeight: "bold",
    color: coral
  },
  {
    tag: [tags.atom, tags.bool, /* @__PURE__ */ tags.special(tags.variableName)],
    color: whiskey
  },
  {
    tag: [tags.processingInstruction, tags.string, tags.inserted],
    color: sage
  },
  {
    tag: tags.invalid,
    color: invalid
  }
]);
var oneDark = [oneDarkTheme, /* @__PURE__ */ syntaxHighlighting(oneDarkHighlightStyle)];

// ../../node_modules/@uiw/react-codemirror/esm/getDefaultExtensions.js
init_dist2();

// ../../node_modules/@uiw/react-codemirror/esm/theme/light.js
init_dist3();
var defaultLightThemeOption = EditorView.theme({
  "&": {
    backgroundColor: "#fff"
  }
}, {
  dark: false
});

// ../../node_modules/@uiw/react-codemirror/esm/getDefaultExtensions.js
var getDefaultExtensions = function getDefaultExtensions2(optios) {
  if (optios === void 0) {
    optios = {};
  }
  var {
    indentWithTab: defaultIndentWithTab = true,
    editable: editable2 = true,
    readOnly: readOnly2 = false,
    theme: theme2 = "light",
    placeholder: placeholderStr = "",
    basicSetup: defaultBasicSetup = true
  } = optios;
  var getExtensions = [];
  if (defaultIndentWithTab) {
    getExtensions.unshift(keymap.of([indentWithTab]));
  }
  if (defaultBasicSetup) {
    if (typeof defaultBasicSetup === "boolean") {
      getExtensions.unshift(basicSetup());
    } else {
      getExtensions.unshift(basicSetup(defaultBasicSetup));
    }
  }
  if (placeholderStr) {
    getExtensions.unshift(placeholder(placeholderStr));
  }
  switch (theme2) {
    case "light":
      getExtensions.push(defaultLightThemeOption);
      break;
    case "dark":
      getExtensions.push(oneDark);
      break;
    case "none":
      break;
    default:
      getExtensions.push(theme2);
      break;
  }
  if (editable2 === false) {
    getExtensions.push(EditorView.editable.of(false));
  }
  if (readOnly2) {
    getExtensions.push(EditorState.readOnly.of(true));
  }
  return [...getExtensions];
};

// ../../node_modules/@uiw/react-codemirror/esm/utils.js
var getStatistics = (view) => {
  return {
    line: view.state.doc.lineAt(view.state.selection.main.from),
    lineCount: view.state.doc.lines,
    lineBreak: view.state.lineBreak,
    length: view.state.doc.length,
    readOnly: view.state.readOnly,
    tabSize: view.state.tabSize,
    selection: view.state.selection,
    selectionAsSingle: view.state.selection.asSingle().main,
    ranges: view.state.selection.ranges,
    selectionCode: view.state.sliceDoc(view.state.selection.main.from, view.state.selection.main.to),
    selections: view.state.selection.ranges.map((r2) => view.state.sliceDoc(r2.from, r2.to)),
    selectedText: view.state.selection.ranges.some((r2) => !r2.empty)
  };
};

// ../../node_modules/@uiw/react-codemirror/esm/useCodeMirror.js
var External = Annotation.define();
var emptyExtensions = [];
function useCodeMirror(props2) {
  var {
    value,
    selection: selection2,
    onChange,
    onStatistics,
    onCreateEditor,
    onUpdate,
    extensions = emptyExtensions,
    autoFocus,
    theme: theme2 = "light",
    height = null,
    minHeight = null,
    maxHeight = null,
    width = null,
    minWidth = null,
    maxWidth = null,
    placeholder: placeholderStr = "",
    editable: editable2 = true,
    readOnly: readOnly2 = false,
    indentWithTab: defaultIndentWithTab = true,
    basicSetup: defaultBasicSetup = true,
    root,
    initialState
  } = props2;
  var [container, setContainer] = (0, import_react3.useState)();
  var [view, setView] = (0, import_react3.useState)();
  var [state, setState] = (0, import_react3.useState)();
  var defaultThemeOption = EditorView.theme({
    "&": {
      height,
      minHeight,
      maxHeight,
      width,
      minWidth,
      maxWidth
    },
    "& .cm-scroller": {
      height: "100% !important"
    }
  });
  var updateListener2 = EditorView.updateListener.of((vu) => {
    if (vu.docChanged && typeof onChange === "function" && // Fix echoing of the remote changes:
    // If transaction is market as remote we don't have to call `onChange` handler again
    !vu.transactions.some((tr) => tr.annotation(External))) {
      var doc2 = vu.state.doc;
      var _value = doc2.toString();
      onChange(_value, vu);
    }
    onStatistics && onStatistics(getStatistics(vu));
  });
  var defaultExtensions = getDefaultExtensions({
    theme: theme2,
    editable: editable2,
    readOnly: readOnly2,
    placeholder: placeholderStr,
    indentWithTab: defaultIndentWithTab,
    basicSetup: defaultBasicSetup
  });
  var getExtensions = [updateListener2, defaultThemeOption, ...defaultExtensions];
  if (onUpdate && typeof onUpdate === "function") {
    getExtensions.push(EditorView.updateListener.of(onUpdate));
  }
  getExtensions = getExtensions.concat(extensions);
  (0, import_react3.useLayoutEffect)(() => {
    if (container && !state) {
      var config2 = {
        doc: value,
        selection: selection2,
        extensions: getExtensions
      };
      var stateCurrent = initialState ? EditorState.fromJSON(initialState.json, config2, initialState.fields) : EditorState.create(config2);
      setState(stateCurrent);
      if (!view) {
        var viewCurrent = new EditorView({
          state: stateCurrent,
          parent: container,
          root
        });
        setView(viewCurrent);
        onCreateEditor && onCreateEditor(viewCurrent, stateCurrent);
      }
    }
    return () => {
      if (view) {
        setState(void 0);
        setView(void 0);
      }
    };
  }, [container, state]);
  (0, import_react3.useEffect)(() => {
    if (props2.container) {
      setContainer(props2.container);
    }
  }, [props2.container]);
  (0, import_react3.useEffect)(() => () => {
    if (view) {
      view.destroy();
      setView(void 0);
    }
  }, [view]);
  (0, import_react3.useEffect)(() => {
    if (autoFocus && view) {
      view.focus();
    }
  }, [autoFocus, view]);
  (0, import_react3.useEffect)(() => {
    if (view) {
      view.dispatch({
        effects: StateEffect.reconfigure.of(getExtensions)
      });
    }
  }, [theme2, extensions, height, minHeight, maxHeight, width, minWidth, maxWidth, placeholderStr, editable2, readOnly2, defaultIndentWithTab, defaultBasicSetup, onChange, onUpdate]);
  (0, import_react3.useEffect)(() => {
    if (value === void 0) {
      return;
    }
    var currentValue = view ? view.state.doc.toString() : "";
    if (view && value !== currentValue) {
      view.dispatch({
        changes: {
          from: 0,
          to: currentValue.length,
          insert: value || ""
        },
        annotations: [External.of(true)]
      });
    }
  }, [value, view]);
  return {
    state,
    setState,
    view,
    setView,
    container,
    setContainer
  };
}

// ../../node_modules/@uiw/react-codemirror/esm/index.js
var import_jsx_runtime = require("react/jsx-runtime");
init_dist3();
init_dist2();
var _excluded = ["className", "value", "selection", "extensions", "onChange", "onStatistics", "onCreateEditor", "onUpdate", "autoFocus", "theme", "height", "minHeight", "maxHeight", "width", "minWidth", "maxWidth", "basicSetup", "placeholder", "indentWithTab", "editable", "readOnly", "root", "initialState"];
var ReactCodeMirror = /* @__PURE__ */ (0, import_react4.forwardRef)((props2, ref) => {
  var {
    className: className2,
    value = "",
    selection: selection2,
    extensions = [],
    onChange,
    onStatistics,
    onCreateEditor,
    onUpdate,
    autoFocus,
    theme: theme2 = "light",
    height,
    minHeight,
    maxHeight,
    width,
    minWidth,
    maxWidth,
    basicSetup: basicSetup3,
    placeholder: placeholder2,
    indentWithTab: indentWithTab2,
    editable: editable2,
    readOnly: readOnly2,
    root,
    initialState
  } = props2, other = _objectWithoutPropertiesLoose(props2, _excluded);
  var editor = (0, import_react4.useRef)(null);
  var {
    state,
    view,
    container,
    setContainer
  } = useCodeMirror({
    root,
    value,
    autoFocus,
    theme: theme2,
    height,
    minHeight,
    maxHeight,
    width,
    minWidth,
    maxWidth,
    basicSetup: basicSetup3,
    placeholder: placeholder2,
    indentWithTab: indentWithTab2,
    editable: editable2,
    readOnly: readOnly2,
    selection: selection2,
    onChange,
    onStatistics,
    onCreateEditor,
    onUpdate,
    extensions,
    initialState
  });
  (0, import_react4.useImperativeHandle)(ref, () => ({
    editor: editor.current,
    state,
    view
  }), [editor, container, state, view]);
  var setEditorRef = (0, import_react4.useCallback)((el) => {
    editor.current = el;
    setContainer(el);
  }, [setContainer]);
  if (typeof value !== "string") {
    throw new Error("value must be typeof string but got " + typeof value);
  }
  var defaultClassNames = typeof theme2 === "string" ? "cm-theme-" + theme2 : "cm-theme";
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", _extends2({
    ref: setEditorRef,
    className: "" + defaultClassNames + (className2 ? " " + className2 : "")
  }, other));
});
ReactCodeMirror.displayName = "CodeMirror";
var esm_default = ReactCodeMirror;

// src/components/postgresql/query/postgreSQLQueryResponseJSONTab.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react5 = __toESM(require("react"));
var PostgreSQLQueryResponseJSONTab = ({ data: data2 }) => {
  PostgreSQLQueryResponseJSONTab.propTypes = {
    data: import_prop_types2.default.object
  };
  return /* @__PURE__ */ import_react5.default.createElement("div", { className: "w-100 flex-grow h-full overflow-y-auto " }, /* @__PURE__ */ import_react5.default.createElement(
    esm_default,
    {
      value: JSON.stringify(data2, null, 2),
      extensions: [loadLanguage("json")],
      theme: githubLight,
      style: {
        width: "100%",
        borderWidth: 0,
        borderBottomWidth: 1,
        outline: "none"
      },
      className: "border-slate-300 focus:border-slate-300 focus:outline-slate-300 flex-grow non-focusable-code-editor !h-full"
    }
  ));
};

// src/components/postgresql/query/postgreSQLQueryResponseRawTab.js
var import_react6 = __toESM(require("react"));
var import_prop_types3 = __toESM(require_prop_types());
var PostgreSQLQueryResponseRAWTab = ({ data: data2 }) => {
  PostgreSQLQueryResponseRAWTab.propTypes = {
    data: import_prop_types3.default.object
  };
  return /* @__PURE__ */ import_react6.default.createElement("div", { className: "w-100 flex-grow h-full overflow-y-auto " }, /* @__PURE__ */ import_react6.default.createElement(
    esm_default,
    {
      value: JSON.stringify(data2, null, 2),
      theme: githubLight,
      style: {
        width: "100%",
        borderWidth: 0,
        borderBottomWidth: 1,
        outline: "none"
      },
      className: "border-slate-300 focus:border-slate-300 focus:outline-slate-300 flex-grow non-focusable-code-editor !h-full"
    }
  ));
};

// src/components/postgresql/query/postgreSQLQueryResponseSchemaTab.js
var import_react7 = __toESM(require("react"));
var import_to_json_schema = __toESM(require_lib());
var import_prop_types4 = __toESM(require_prop_types());
var PostgreSQLQueryResponseSchemaTab = ({ data: data2 }) => {
  PostgreSQLQueryResponseSchemaTab.propTypes = {
    data: import_prop_types4.default.object
  };
  const dataSchema = (0, import_to_json_schema.default)(
    data2 ? data2 : { arrays: { mode: "all" } }
  );
  return /* @__PURE__ */ import_react7.default.createElement("div", { className: "w-100 flex-grow h-full overflow-y-auto " }, /* @__PURE__ */ import_react7.default.createElement(
    esm_default,
    {
      value: JSON.stringify(dataSchema, null, 2),
      theme: githubLight,
      extensions: [loadLanguage("json")],
      style: {
        width: "100%",
        borderWidth: 0,
        borderBottomWidth: 1,
        outline: "none"
      },
      className: "border-slate-300 focus:border-slate-300 focus:outline-slate-300 flex-grow non-focusable-code-editor !h-full"
    }
  ));
};

// src/components/postgresql/query/postgreSQLQueryResponseTableTab.js
var import_material = require("@mui/material");
var import_react8 = __toESM(require("react"));
var import_x_data_grid = require("@mui/x-data-grid");
var import_to_json_schema2 = __toESM(require_lib());
var import_prop_types5 = __toESM(require_prop_types());
var PostgreSQLQueryResponseTableTab = ({
  data: data2,
  className: className2,
  height = "100%",
  width = "100%"
}) => {
  PostgreSQLQueryResponseTableTab.propTypes = {
    data: import_prop_types5.default.array,
    className: import_prop_types5.default.string,
    height: import_prop_types5.default.string,
    width: import_prop_types5.default.string
  };
  const dataSchema = Array.isArray(data2) && data2.length > 0 ? (0, import_to_json_schema2.default)(data2[0]) : null;
  const columns = (0, import_react8.useMemo)(() => {
    if (dataSchema && dataSchema.properties) {
      return Object.keys(dataSchema.properties).map((key) => {
        return {
          key,
          name: key,
          field: key,
          display: "flex",
          headerName: String(key),
          width: 300
        };
      });
    } else {
      return null;
    }
  }, [dataSchema]);
  return /* @__PURE__ */ import_react8.default.createElement(
    import_material.Box,
    {
      sx: { width, height },
      className: `!flex !flex-col !justify-start !items-stretch ${className2}`
    },
    !dataSchema ? /* @__PURE__ */ import_react8.default.createElement("div", { className: "!h-32 flex !flex-col !justify-center !items-center w-full text-slate-500" }, /* @__PURE__ */ import_react8.default.createElement("span", null, "Data schema not valid or no data available")) : !columns ? /* @__PURE__ */ import_react8.default.createElement("div", { className: "!h-32 flex !flex-col !justify-center !items-center w-full text-slate-500" }, /* @__PURE__ */ import_react8.default.createElement("span", null, "Columns cannot be extracted or mapped")) : data2 && Array.isArray(data2) && data2.length && columns ? /* @__PURE__ */ import_react8.default.createElement(
      import_x_data_grid.DataGrid,
      {
        rows: data2.map((item, index) => {
          return { _g_uuid: `_index_${index}`, ...item };
        }),
        virtualizeColumnsWithAutoRowHeight: true,
        columns,
        className: `!w-100 !border-0`,
        density: "compact",
        showCellVerticalBorder: true,
        getRowClassName: (params) => params.indexRelativeToCurrentPage % 2 === 0 ? "bg-[#646cff]/10" : "Mui-odd",
        getRowHeight: () => "auto",
        getRowId: (row) => row._g_uuid,
        defaultColumnOptions: {
          sortable: true,
          resizable: true
        },
        sx: {
          "--unstable_DataGrid-radius": "0",
          "& .MuiDataGrid-root": {
            borderRadius: 0
          },
          "& .MuiIconButton-root": {
            outline: "none"
          },
          "& .MuiDataGrid-cell": {
            fontSize: "0.875rem !important",
            lineHeight: "1.25rem !important",
            fontWeight: "400 !important"
          },
          "& .MuiCheckbox-root": {
            padding: "4px"
          },
          "& .MuiDataGrid-columnHeaderCheckbox": {
            minWidth: "auto !important",
            width: "auto !important",
            flex: "0 0 auto !important",
            padding: "0.25rem !important",
            "& .MuiDataGrid-columnHeaderTitleContainer": {
              width: "auto",
              minWidth: "auto",
              flex: "none"
            }
          },
          "& .MuiDataGrid-cellCheckbox": {
            minWidth: "auto !important",
            width: "auto !important",
            flex: "0 0 auto !important",
            color: "#646cff !important",
            padding: "0.25rem !important"
          }
        }
      }
    ) : /* @__PURE__ */ import_react8.default.createElement("div", { className: "!h-32 flex !flex-col !justify-center !items-center w-full text-slate-500" }, /* @__PURE__ */ import_react8.default.createElement("span", null, "No data"))
  );
};

// src/components/postgresql/query/postgreSQLQueryResponseView.js
var import_prop_types6 = __toESM(require_prop_types());
var PostgreSQLQueryResponseView = ({ queryResult }) => {
  PostgreSQLQueryResponseView.propTypes = {
    queryResult: import_prop_types6.default.object
  };
  const [tab4, setTab] = (0, import_react9.useState)(0);
  const _handleTabChange = (event, newTab) => {
    setTab(newTab);
  };
  return /* @__PURE__ */ import_react9.default.createElement(import_react9.default.Fragment, null, /* @__PURE__ */ import_react9.default.createElement(
    import_material2.Tabs,
    {
      value: tab4,
      onChange: _handleTabChange,
      className: "!w-full !border-b !border-gray-200",
      sx: {
        "& .MuiTabs-indicator": {
          background: "#646cff !important"
        }
      }
    },
    /* @__PURE__ */ import_react9.default.createElement(
      import_material2.Tab,
      {
        label: "Table",
        disableRipple: true,
        disableFocusRipple: true,
        disableTouchRipple: true,
        className: `!outline-none !border-0 hover:!outline-none hover:!border-0 focus:!outline-none !font-medium !text-sm !normal-case ${tab4 === 0 ? "!text-[#646cff]" : "!text-slate-700"}`
      }
    ),
    /* @__PURE__ */ import_react9.default.createElement(
      import_material2.Tab,
      {
        label: "JSON",
        disableRipple: true,
        disableFocusRipple: true,
        disableTouchRipple: true,
        className: `!outline-none !border-0 hover:!outline-none hover:!border-0 focus:!outline-none !font-medium !text-sm !normal-case ${tab4 === 1 ? "!text-[#646cff]" : "!text-slate-700"}`
      }
    ),
    /* @__PURE__ */ import_react9.default.createElement(
      import_material2.Tab,
      {
        label: "Raw",
        disableRipple: true,
        disableFocusRipple: true,
        disableTouchRipple: true,
        className: `!outline-none !border-0 hover:!outline-none hover:!border-0 focus:!outline-none !font-medium !text-sm !normal-case ${tab4 === 2 ? "!text-[#646cff]" : "!text-slate-700"}`
      }
    ),
    /* @__PURE__ */ import_react9.default.createElement(
      import_material2.Tab,
      {
        label: "Data Schema",
        disableRipple: true,
        disableFocusRipple: true,
        disableTouchRipple: true,
        className: `!outline-none !border-0 hover:!outline-none hover:!border-0 focus:!outline-none !font-medium !text-sm !normal-case ${tab4 === 3 ? "!text-[#646cff]" : "!text-slate-700"}`
      }
    )
  ), /* @__PURE__ */ import_react9.default.createElement("div", { className: "w-100 h-[calc(100%-48px)]" }, tab4 === 0 && /* @__PURE__ */ import_react9.default.createElement(
    PostgreSQLQueryResponseTableTab,
    {
      data: queryResult ? queryResult.result : ""
    }
  ), tab4 === 1 && /* @__PURE__ */ import_react9.default.createElement(
    PostgreSQLQueryResponseJSONTab,
    {
      data: queryResult ? queryResult.result : ""
    }
  ), tab4 === 2 && /* @__PURE__ */ import_react9.default.createElement(
    PostgreSQLQueryResponseRAWTab,
    {
      data: queryResult ? queryResult.result : ""
    }
  ), tab4 === 3 && /* @__PURE__ */ import_react9.default.createElement(
    PostgreSQLQueryResponseSchemaTab,
    {
      data: queryResult ? queryResult.result : {}
    }
  )));
};

// src/components/postgresql/formConfig.json
var formConfig_default = {
  schema: {
    type: "object",
    properties: {
      connectionName: {
        type: "string",
        description: "A unique name for this data source connection.",
        minLength: 3
      },
      host: {
        type: "string",
        description: "The hostname or IP address of the PostgreSQL server.",
        format: "hostname"
      },
      port: {
        type: "integer",
        description: "The port number of the PostgreSQL server (default is 5432).",
        minimum: 1,
        maximum: 65535,
        default: 5432
      },
      database: {
        type: "string",
        description: "The name of the database to connect to.",
        minLength: 1
      },
      user: {
        type: "string",
        description: "The username for connecting to the database.",
        minLength: 1
      },
      password: {
        type: "string",
        description: "The password for the specified user.",
        format: "password"
      },
      sslMode: {
        type: "string",
        description: "SSL mode for the connection.",
        enum: [
          "disable",
          "allow",
          "prefer",
          "require",
          "verify-ca",
          "verify-full"
        ],
        default: "prefer"
      },
      additionalOptions: {
        type: "object",
        description: "Additional connection options (e.g., timeout, application name).",
        properties: {
          connectTimeout: {
            type: "integer",
            description: "Connection timeout in seconds.",
            minimum: 0
          },
          applicationName: {
            type: "string",
            description: "Application name to be sent to the server."
          }
        },
        additionalProperties: true
      }
    },
    required: ["connectionName", "host", "database", "user", "password"]
  },
  uischema: {
    type: "VerticalLayout",
    elements: [
      {
        type: "HorizontalLayout",
        elements: [
          {
            type: "Control",
            scope: "#/properties/connectionName",
            label: "Connection Name"
          },
          {
            type: "Control",
            scope: "#/properties/host",
            label: "Host"
          },
          {
            type: "Control",
            scope: "#/properties/port",
            label: "Port"
          }
        ]
      },
      {
        type: "HorizontalLayout",
        elements: [
          {
            type: "Control",
            scope: "#/properties/database",
            label: "Database Name"
          },
          {
            type: "Control",
            scope: "#/properties/user",
            label: "Username"
          },
          {
            type: "Control",
            scope: "#/properties/password",
            label: "Password",
            options: {
              format: "password"
            }
          }
        ]
      },
      {
        type: "Control",
        scope: "#/properties/sslMode",
        label: "SSL Mode"
      },
      {
        type: "Group",
        label: "Advanced Options",
        elements: [
          {
            type: "Control",
            scope: "#/properties/additionalOptions/properties/connectTimeout",
            label: "Connection Timeout (seconds)"
          },
          {
            type: "Control",
            scope: "#/properties/additionalOptions/properties/applicationName",
            label: "Application Name"
          }
        ]
      }
    ]
  },
  data: {
    connectionName: "MyDevPostgres",
    host: "localhost",
    port: 5432,
    database: "mydatabase",
    user: "dbuser",
    password: "securepassword",
    sslMode: "prefer",
    additionalOptions: {
      connectTimeout: 10,
      applicationName: "JSONFormsApp"
    }
  }
};

// src/index.js
var import_react10 = __toESM(require("react"));
var DATASOURCE_UI_COMPONENTS = {
  [DATASOURCE_TYPES.POSTGRESQL.value]: {
    formConfig: formConfig_default,
    queryEditor: function({ query, setQuery }) {
      return import_react10.default.createElement(PostgreSQLQueryEditor, { query, setQuery });
    },
    queryResponseView: function({ queryResult }) {
      return import_react10.default.createElement(PostgreSQLQueryResponseView, { queryResult });
    }
  }
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=index.cjs.map
